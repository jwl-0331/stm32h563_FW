
stm32h563_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023204  08000250  08000250  00010250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .Table4CLI    00000030  08023454  08023454  00033454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       00003d30  08023484  08023484  00033484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080271b4  080271b4  000401a8  2**0
                  CONTENTS
  5 .ARM          00000008  080271b4  080271b4  000371b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080271bc  080271bc  000401a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080271bc  080271bc  000371bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080271c0  080271c0  000371c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000e8  20000000  080271c4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .RxDecripSection 00000060  200000e8  080272ac  000400e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .TxDecripSection 00000060  20000148  0802730c  00040148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0002f0e8  200001a8  0802736c  000401a8  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2002f290  0802736c  0004f290  2**0
                  ALLOC
 14 .ARM.attributes 00000036  00000000  00000000  000401a8  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  000401de  2**0
                  CONTENTS, READONLY
 16 .debug_info   00047403  00000000  00000000  00040221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000ab43  00000000  00000000  00087624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000036c8  00000000  00000000  00092168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002af9  00000000  00000000  00095830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00048ab0  00000000  00000000  00098329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00054063  00000000  00000000  000e0dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00177e54  00000000  00000000  00134e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000ef68  00000000  00000000  002acc90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000004b  00000000  00000000  002bbbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001a8 	.word	0x200001a8
 800026c:	00000000 	.word	0x00000000
 8000270:	0802343c 	.word	0x0802343c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001ac 	.word	0x200001ac
 800028c:	0802343c 	.word	0x0802343c

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b982 	b.w	80005d0 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ea:	460d      	mov	r5, r1
 80002ec:	4604      	mov	r4, r0
 80002ee:	460f      	mov	r7, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d146      	bne.n	8000382 <__udivmoddi4+0x9e>
 80002f4:	428a      	cmp	r2, r1
 80002f6:	4694      	mov	ip, r2
 80002f8:	d95e      	bls.n	80003b8 <__udivmoddi4+0xd4>
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	b143      	cbz	r3, 8000312 <__udivmoddi4+0x2e>
 8000300:	fa02 fc03 	lsl.w	ip, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	409c      	lsls	r4, r3
 800030c:	fa20 f202 	lsr.w	r2, r0, r2
 8000310:	4317      	orrs	r7, r2
 8000312:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000316:	fa1f f58c 	uxth.w	r5, ip
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fbb7 f1fe 	udiv	r1, r7, lr
 8000320:	fb0e 7711 	mls	r7, lr, r1, r7
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800032c:	4290      	cmp	r0, r2
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x5e>
 8000330:	eb1c 0202 	adds.w	r2, ip, r2
 8000334:	f101 37ff 	add.w	r7, r1, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x5c>
 800033a:	4290      	cmp	r0, r2
 800033c:	f200 8134 	bhi.w	80005a8 <__udivmoddi4+0x2c4>
 8000340:	4639      	mov	r1, r7
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	fb00 f505 	mul.w	r5, r0, r5
 8000352:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000356:	42a5      	cmp	r5, r4
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x88>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x86>
 8000364:	42a5      	cmp	r5, r4
 8000366:	f200 8119 	bhi.w	800059c <__udivmoddi4+0x2b8>
 800036a:	4610      	mov	r0, r2
 800036c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	2100      	movs	r1, #0
 8000374:	b11e      	cbz	r6, 800037e <__udivmoddi4+0x9a>
 8000376:	40dc      	lsrs	r4, r3
 8000378:	2300      	movs	r3, #0
 800037a:	e9c6 4300 	strd	r4, r3, [r6]
 800037e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0xb4>
 8000386:	2e00      	cmp	r6, #0
 8000388:	f000 80fc 	beq.w	8000584 <__udivmoddi4+0x2a0>
 800038c:	2100      	movs	r1, #0
 800038e:	e9c6 0500 	strd	r0, r5, [r6]
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	d14c      	bne.n	800043a <__udivmoddi4+0x156>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f0c0 80f2 	bcc.w	800058a <__udivmoddi4+0x2a6>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f240 80ef 	bls.w	800058a <__udivmoddi4+0x2a6>
 80003ac:	4608      	mov	r0, r1
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0e5      	beq.n	800037e <__udivmoddi4+0x9a>
 80003b2:	e9c6 4700 	strd	r4, r7, [r6]
 80003b6:	e7e2      	b.n	800037e <__udivmoddi4+0x9a>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xd8>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f382 	clz	r3, r2
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 809f 	bne.w	8000504 <__udivmoddi4+0x220>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f5fe 	udiv	r5, r2, lr
 80003d6:	fb0e 2015 	mls	r0, lr, r5, r2
 80003da:	0c22      	lsrs	r2, r4, #16
 80003dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e0:	fb07 f005 	mul.w	r0, r7, r5
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d90f      	bls.n	8000408 <__udivmoddi4+0x124>
 80003e8:	eb1c 0202 	adds.w	r2, ip, r2
 80003ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f0:	bf2c      	ite	cs
 80003f2:	f04f 0901 	movcs.w	r9, #1
 80003f6:	f04f 0900 	movcc.w	r9, #0
 80003fa:	4290      	cmp	r0, r2
 80003fc:	d903      	bls.n	8000406 <__udivmoddi4+0x122>
 80003fe:	f1b9 0f00 	cmp.w	r9, #0
 8000402:	f000 80ce 	beq.w	80005a2 <__udivmoddi4+0x2be>
 8000406:	4645      	mov	r5, r8
 8000408:	1a12      	subs	r2, r2, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000410:	fb0e 2210 	mls	r2, lr, r0, r2
 8000414:	fb00 f707 	mul.w	r7, r0, r7
 8000418:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800041c:	42a7      	cmp	r7, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x14e>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 32ff 	add.w	r2, r0, #4294967295
 8000428:	d202      	bcs.n	8000430 <__udivmoddi4+0x14c>
 800042a:	42a7      	cmp	r7, r4
 800042c:	f200 80b3 	bhi.w	8000596 <__udivmoddi4+0x2b2>
 8000430:	4610      	mov	r0, r2
 8000432:	1be4      	subs	r4, r4, r7
 8000434:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000438:	e79c      	b.n	8000374 <__udivmoddi4+0x90>
 800043a:	f1c1 0420 	rsb	r4, r1, #32
 800043e:	408b      	lsls	r3, r1
 8000440:	fa05 fc01 	lsl.w	ip, r5, r1
 8000444:	fa22 f704 	lsr.w	r7, r2, r4
 8000448:	40e5      	lsrs	r5, r4
 800044a:	408a      	lsls	r2, r1
 800044c:	431f      	orrs	r7, r3
 800044e:	fa20 f304 	lsr.w	r3, r0, r4
 8000452:	4088      	lsls	r0, r1
 8000454:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000458:	ea43 030c 	orr.w	r3, r3, ip
 800045c:	fa1f fc87 	uxth.w	ip, r7
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb5 fef8 	udiv	lr, r5, r8
 8000468:	fb08 551e 	mls	r5, r8, lr, r5
 800046c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000470:	fb0e f90c 	mul.w	r9, lr, ip
 8000474:	45a9      	cmp	r9, r5
 8000476:	d90e      	bls.n	8000496 <__udivmoddi4+0x1b2>
 8000478:	197d      	adds	r5, r7, r5
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	bf2c      	ite	cs
 8000480:	f04f 0b01 	movcs.w	fp, #1
 8000484:	f04f 0b00 	movcc.w	fp, #0
 8000488:	45a9      	cmp	r9, r5
 800048a:	d903      	bls.n	8000494 <__udivmoddi4+0x1b0>
 800048c:	f1bb 0f00 	cmp.w	fp, #0
 8000490:	f000 808d 	beq.w	80005ae <__udivmoddi4+0x2ca>
 8000494:	46d6      	mov	lr, sl
 8000496:	eba5 0509 	sub.w	r5, r5, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb5 f3f8 	udiv	r3, r5, r8
 80004a2:	fb08 5513 	mls	r5, r8, r3, r5
 80004a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004aa:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004ae:	45ac      	cmp	ip, r5
 80004b0:	d906      	bls.n	80004c0 <__udivmoddi4+0x1dc>
 80004b2:	197d      	adds	r5, r7, r5
 80004b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x1da>
 80004ba:	45ac      	cmp	ip, r5
 80004bc:	d87e      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004be:	4643      	mov	r3, r8
 80004c0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004c4:	eba5 050c 	sub.w	r5, r5, ip
 80004c8:	fba3 9802 	umull	r9, r8, r3, r2
 80004cc:	4545      	cmp	r5, r8
 80004ce:	46ce      	mov	lr, r9
 80004d0:	46c4      	mov	ip, r8
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x1f6>
 80004d4:	d106      	bne.n	80004e4 <__udivmoddi4+0x200>
 80004d6:	4548      	cmp	r0, r9
 80004d8:	d204      	bcs.n	80004e4 <__udivmoddi4+0x200>
 80004da:	3b01      	subs	r3, #1
 80004dc:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e0:	eb68 0c07 	sbc.w	ip, r8, r7
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d06f      	beq.n	80005c8 <__udivmoddi4+0x2e4>
 80004e8:	ebb0 020e 	subs.w	r2, r0, lr
 80004ec:	eb65 050c 	sbc.w	r5, r5, ip
 80004f0:	40ca      	lsrs	r2, r1
 80004f2:	fa05 f404 	lsl.w	r4, r5, r4
 80004f6:	40cd      	lsrs	r5, r1
 80004f8:	4618      	mov	r0, r3
 80004fa:	4314      	orrs	r4, r2
 80004fc:	2100      	movs	r1, #0
 80004fe:	e9c6 4500 	strd	r4, r5, [r6]
 8000502:	e73c      	b.n	800037e <__udivmoddi4+0x9a>
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	f1c3 0220 	rsb	r2, r3, #32
 800050c:	4099      	lsls	r1, r3
 800050e:	409c      	lsls	r4, r3
 8000510:	40d5      	lsrs	r5, r2
 8000512:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000516:	fa20 f202 	lsr.w	r2, r0, r2
 800051a:	fa1f f78c 	uxth.w	r7, ip
 800051e:	fbb5 f0fe 	udiv	r0, r5, lr
 8000522:	430a      	orrs	r2, r1
 8000524:	fb0e 5510 	mls	r5, lr, r0, r5
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052e:	fb00 f507 	mul.w	r5, r0, r7
 8000532:	428d      	cmp	r5, r1
 8000534:	d90e      	bls.n	8000554 <__udivmoddi4+0x270>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	bf2c      	ite	cs
 8000540:	f04f 0901 	movcs.w	r9, #1
 8000544:	f04f 0900 	movcc.w	r9, #0
 8000548:	428d      	cmp	r5, r1
 800054a:	d902      	bls.n	8000552 <__udivmoddi4+0x26e>
 800054c:	f1b9 0f00 	cmp.w	r9, #0
 8000550:	d031      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 8000552:	4640      	mov	r0, r8
 8000554:	1b49      	subs	r1, r1, r5
 8000556:	b292      	uxth	r2, r2
 8000558:	fbb1 f5fe 	udiv	r5, r1, lr
 800055c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000560:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000564:	fb05 f107 	mul.w	r1, r5, r7
 8000568:	4291      	cmp	r1, r2
 800056a:	d907      	bls.n	800057c <__udivmoddi4+0x298>
 800056c:	eb1c 0202 	adds.w	r2, ip, r2
 8000570:	f105 38ff 	add.w	r8, r5, #4294967295
 8000574:	d201      	bcs.n	800057a <__udivmoddi4+0x296>
 8000576:	4291      	cmp	r1, r2
 8000578:	d823      	bhi.n	80005c2 <__udivmoddi4+0x2de>
 800057a:	4645      	mov	r5, r8
 800057c:	1a52      	subs	r2, r2, r1
 800057e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000582:	e726      	b.n	80003d2 <__udivmoddi4+0xee>
 8000584:	4631      	mov	r1, r6
 8000586:	4630      	mov	r0, r6
 8000588:	e6f9      	b.n	800037e <__udivmoddi4+0x9a>
 800058a:	1a84      	subs	r4, r0, r2
 800058c:	eb65 0203 	sbc.w	r2, r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	4617      	mov	r7, r2
 8000594:	e70b      	b.n	80003ae <__udivmoddi4+0xca>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74a      	b.n	8000432 <__udivmoddi4+0x14e>
 800059c:	4464      	add	r4, ip
 800059e:	3802      	subs	r0, #2
 80005a0:	e6e4      	b.n	800036c <__udivmoddi4+0x88>
 80005a2:	3d02      	subs	r5, #2
 80005a4:	4462      	add	r2, ip
 80005a6:	e72f      	b.n	8000408 <__udivmoddi4+0x124>
 80005a8:	3902      	subs	r1, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e6c9      	b.n	8000342 <__udivmoddi4+0x5e>
 80005ae:	f1ae 0e02 	sub.w	lr, lr, #2
 80005b2:	443d      	add	r5, r7
 80005b4:	e76f      	b.n	8000496 <__udivmoddi4+0x1b2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4461      	add	r1, ip
 80005ba:	e7cb      	b.n	8000554 <__udivmoddi4+0x270>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443d      	add	r5, r7
 80005c0:	e77e      	b.n	80004c0 <__udivmoddi4+0x1dc>
 80005c2:	3d02      	subs	r5, #2
 80005c4:	4462      	add	r2, ip
 80005c6:	e7d9      	b.n	800057c <__udivmoddi4+0x298>
 80005c8:	4618      	mov	r0, r3
 80005ca:	4631      	mov	r1, r6
 80005cc:	e6d7      	b.n	800037e <__udivmoddi4+0x9a>
 80005ce:	bf00      	nop

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <AppMain>:
    HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET);
  }
}

void AppMain()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af02      	add	r7, sp, #8
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80005da:	b662      	cpsie	i
}
 80005dc:	bf00      	nop
  __enable_irq();

  RESET_Init();
 80005de:	f003 f959 	bl	8003894 <RESET_Init>
  LED_Init();
 80005e2:	f003 f8a7 	bl	8003734 <LED_Init>
  LED_SimpleAnimation();
 80005e6:	f003 f8ff 	bl	80037e8 <LED_SimpleAnimation>

  svDebugInit();
 80005ea:	f003 fb69 	bl	8003cc0 <svDebugInit>
  UART_Init(_DEF_UART1, 115200);
 80005ee:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005f2:	2000      	movs	r0, #0
 80005f4:	f003 f9b6 	bl	8003964 <UART_Init>

  CAN_Init();
 80005f8:	f001 fdea 	bl	80021d0 <CAN_Init>
  CAN_Open(_DEF_CAN1, CAN_NORMAL, CAN_CLASSIC, CAN_1M, CAN_2M);
 80005fc:	2305      	movs	r3, #5
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2000      	movs	r0, #0
 8000608:	f001 fe66 	bl	80022d8 <CAN_Open>

  //ethernetif_notify_conn_changed(&gnetif);

  // Chk Reset Count
  //uint32_t pre_time = HAL_GetTick();
  DebugMsg(DEBUGMSG_APP, "\r\n<< svCLI TEST : >>\r\n");
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <AppMain+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <AppMain+0x46>
 8000614:	4809      	ldr	r0, [pc, #36]	; (800063c <AppMain+0x68>)
 8000616:	f003 fb87 	bl	8003d28 <svDebugMessage>
  /* Init scheduler */
  osKernelInitialize();
 800061a:	f010 fa2f 	bl	8010a7c <osKernelInitialize>

  g_hTaskMain = osThreadNew(TaskMain, NULL, &TaskMain_attributes);
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <AppMain+0x6c>)
 8000620:	2100      	movs	r1, #0
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <AppMain+0x70>)
 8000624:	f010 fa8e 	bl	8010b44 <osThreadNew>
 8000628:	4603      	mov	r3, r0
 800062a:	4a07      	ldr	r2, [pc, #28]	; (8000648 <AppMain+0x74>)
 800062c:	6013      	str	r3, [r2, #0]

  osKernelStart();
 800062e:	f010 fa4b 	bl	8010ac8 <osKernelStart>
  while(1)
  {
    /* End OF ECHO SERVER  */


    svDebugProcess();
 8000632:	f003 faed 	bl	8003c10 <svDebugProcess>
 8000636:	e7fc      	b.n	8000632 <AppMain+0x5e>
 8000638:	2000003c 	.word	0x2000003c
 800063c:	0802349c 	.word	0x0802349c
 8000640:	08026da4 	.word	0x08026da4
 8000644:	0800064d 	.word	0x0800064d
 8000648:	200001c4 	.word	0x200001c4

0800064c <TaskMain>:
    */
  }
}

void TaskMain(void* argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  MX_LWIP_Init();
 8000654:	f000 fe68 	bl	8001328 <MX_LWIP_Init>
  LED_OnOff(LED3_RED, TRUE);
 8000658:	2101      	movs	r1, #1
 800065a:	2003      	movs	r0, #3
 800065c:	f003 f87c 	bl	8003758 <LED_OnOff>

  echoTaskHandle = osThreadNew(StartEchoTask, NULL, &echoTask_attributes);
 8000660:	4a05      	ldr	r2, [pc, #20]	; (8000678 <TaskMain+0x2c>)
 8000662:	2100      	movs	r1, #0
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <TaskMain+0x30>)
 8000666:	f010 fa6d 	bl	8010b44 <osThreadNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <TaskMain+0x34>)
 800066e:	6013      	str	r3, [r2, #0]
  for(;;)
  {
    svDebugProcess();
 8000670:	f003 face 	bl	8003c10 <svDebugProcess>
 8000674:	e7fc      	b.n	8000670 <TaskMain+0x24>
 8000676:	bf00      	nop
 8000678:	08026dc8 	.word	0x08026dc8
 800067c:	08000685 	.word	0x08000685
 8000680:	200001c8 	.word	0x200001c8

08000684 <StartEchoTask>:
  }

}

void StartEchoTask(void const *argument)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af02      	add	r7, sp, #8
 800068a:	6078      	str	r0, [r7, #4]
  void *data;
  u16_t len;

  LWIP_UNUSED_ARG(argument);

  conn = netconn_new(NETCONN_TCP); //new tcp netconn , create new connection
 800068c:	2200      	movs	r2, #0
 800068e:	2100      	movs	r1, #0
 8000690:	2010      	movs	r0, #16
 8000692:	f013 ff23 	bl	80144dc <netconn_new_with_proto_and_callback>
 8000696:	61f8      	str	r0, [r7, #28]

  if (conn != NULL)
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d052      	beq.n	8000744 <StartEchoTask+0xc0>
  {
    err = netconn_bind(conn, NULL, 7); //bind to port 7
 800069e:	2207      	movs	r2, #7
 80006a0:	2100      	movs	r1, #0
 80006a2:	69f8      	ldr	r0, [r7, #28]
 80006a4:	f013 ffd4 	bl	8014650 <netconn_bind>
 80006a8:	4603      	mov	r3, r0
 80006aa:	76fb      	strb	r3, [r7, #27]

    if (err == ERR_OK)
 80006ac:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d143      	bne.n	800073c <StartEchoTask+0xb8>
    {
      netconn_listen(conn); //listen at port 7
 80006b4:	21ff      	movs	r1, #255	; 0xff
 80006b6:	69f8      	ldr	r0, [r7, #28]
 80006b8:	f014 f802 	bl	80146c0 <netconn_listen_with_backlog>

      while (1)
      {
        accept_err = netconn_accept(conn, &newconn); //accept new connection
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	69f8      	ldr	r0, [r7, #28]
 80006c4:	f014 f828 	bl	8014718 <netconn_accept>
 80006c8:	4603      	mov	r3, r0
 80006ca:	76bb      	strb	r3, [r7, #26]

        if (accept_err == ERR_OK) //accept ok
 80006cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1f3      	bne.n	80006bc <StartEchoTask+0x38>
        {
          while (netconn_recv(newconn, &buf) == ERR_OK) //receive data
 80006d4:	e01f      	b.n	8000716 <StartEchoTask+0x92>
          {
            do
            {
              netbuf_data(buf, &data, &len); //receive data pointer & length  buf -> data
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	f107 020a 	add.w	r2, r7, #10
 80006dc:	f107 010c 	add.w	r1, r7, #12
 80006e0:	4618      	mov	r0, r3
 80006e2:	f015 ffbb 	bl	801665c <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY); //echo back to the client
 80006e6:	6978      	ldr	r0, [r7, #20]
 80006e8:	68f9      	ldr	r1, [r7, #12]
 80006ea:	897b      	ldrh	r3, [r7, #10]
 80006ec:	461a      	mov	r2, r3
 80006ee:	2300      	movs	r3, #0
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2301      	movs	r3, #1
 80006f4:	f014 fa92 	bl	8014c1c <netconn_write_partly>

              HAL_GPIO_TogglePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin); //toggle data led
 80006f8:	2110      	movs	r1, #16
 80006fa:	4814      	ldr	r0, [pc, #80]	; (800074c <StartEchoTask+0xc8>)
 80006fc:	f006 fd6e 	bl	80071dc <HAL_GPIO_TogglePin>
            }
            while (netbuf_next(buf) >= 0); //check buffer empty
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	4618      	mov	r0, r3
 8000704:	f015 fff4 	bl	80166f0 <netbuf_next>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	dae3      	bge.n	80006d6 <StartEchoTask+0x52>

            netbuf_delete(buf); //clear buffer
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	4618      	mov	r0, r3
 8000712:	f015 ff83 	bl	801661c <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) //receive data
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	f107 0210 	add.w	r2, r7, #16
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f014 fa02 	bl	8014b28 <netconn_recv>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0d5      	beq.n	80006d6 <StartEchoTask+0x52>
          }

          netconn_close(newconn); //close session
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	4618      	mov	r0, r3
 800072e:	f014 fb77 	bl	8014e20 <netconn_close>
          netconn_delete(newconn); //free memory
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	4618      	mov	r0, r3
 8000736:	f013 ff6f 	bl	8014618 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn); //accept new connection
 800073a:	e7bf      	b.n	80006bc <StartEchoTask+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn); //free memory
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	4618      	mov	r0, r3
 8000740:	f013 ff6a 	bl	8014618 <netconn_delete>
    }
  }
}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	42021400 	.word	0x42021400

08000750 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == USER_BUTTON_Pin)
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000760:	d103      	bne.n	800076a <HAL_GPIO_EXTI_Rising_Callback+0x1a>
  {
    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 8000762:	2101      	movs	r1, #1
 8000764:	4803      	ldr	r0, [pc, #12]	; (8000774 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 8000766:	f006 fd39 	bl	80071dc <HAL_GPIO_TogglePin>
  }
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	42020400 	.word	0x42020400

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077c:	f003 fb0a 	bl	8003d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000780:	f000 f80e 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000784:	f000 f92a 	bl	80009dc <MX_GPIO_Init>
  MX_FLASH_Init();
 8000788:	f000 f874 	bl	8000874 <MX_FLASH_Init>
  MX_ICACHE_Init();
 800078c:	f000 f884 	bl	8000898 <MX_ICACHE_Init>
  //MX_USART2_UART_Init();
  //MX_RTC_Init();
  MX_LPUART1_UART_Init();
 8000790:	f000 f88e 	bl	80008b0 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000794:	f000 f8d6 	bl	8000944 <MX_USART3_UART_Init>
  /* Start scheduler */
  osKernelStart();
#endif

#if 1
  AppMain();
 8000798:	f7ff ff1c 	bl	80005d4 <AppMain>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079c:	e7fe      	b.n	800079c <main+0x24>
	...

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b09c      	sub	sp, #112	; 0x70
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	2250      	movs	r2, #80	; 0x50
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f021 fe9e 	bl	80224f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
 80007c4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c6:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <SystemClock_Config+0xd0>)
 80007c8:	691b      	ldr	r3, [r3, #16]
 80007ca:	4a29      	ldr	r2, [pc, #164]	; (8000870 <SystemClock_Config+0xd0>)
 80007cc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80007d0:	6113      	str	r3, [r2, #16]
 80007d2:	4b27      	ldr	r3, [pc, #156]	; (8000870 <SystemClock_Config+0xd0>)
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007de:	bf00      	nop
 80007e0:	4b23      	ldr	r3, [pc, #140]	; (8000870 <SystemClock_Config+0xd0>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	2b08      	cmp	r3, #8
 80007ea:	d1f9      	bne.n	80007e0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007ec:	2309      	movs	r3, #9
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 80007f0:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80007fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fc:	2302      	movs	r3, #2
 80007fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000800:	2303      	movs	r3, #3
 8000802:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000808:	2314      	movs	r3, #20
 800080a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000810:	2302      	movs	r3, #2
 8000812:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000814:	2302      	movs	r3, #2
 8000816:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000818:	230c      	movs	r3, #12
 800081a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800081c:	2300      	movs	r3, #0
 800081e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	4618      	mov	r0, r3
 800082a:	f006 fd33 	bl	8007294 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000834:	f000 f9e6 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	231f      	movs	r3, #31
 800083a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083c:	2303      	movs	r3, #3
 800083e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	2103      	movs	r1, #3
 8000856:	4618      	mov	r0, r3
 8000858:	f007 f954 	bl	8007b04 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000862:	f000 f9cf 	bl	8000c04 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3770      	adds	r7, #112	; 0x70
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	44020800 	.word	0x44020800

08000874 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 8000878:	f006 f910 	bl	8006a9c <HAL_FLASH_Unlock>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 8000882:	f000 f9bf 	bl	8000c04 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 8000886:	f006 f92f 	bl	8006ae8 <HAL_FLASH_Lock>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 8000890:	f000 f9b8 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 800089c:	f006 fcea 	bl	8007274 <HAL_ICACHE_Enable>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80008a6:	f000 f9ad 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <MX_LPUART1_UART_Init+0x88>)
 80008b6:	4a21      	ldr	r2, [pc, #132]	; (800093c <MX_LPUART1_UART_Init+0x8c>)
 80008b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_LPUART1_UART_Init+0x88>)
 80008bc:	4a20      	ldr	r2, [pc, #128]	; (8000940 <MX_LPUART1_UART_Init+0x90>)
 80008be:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c0:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <MX_LPUART1_UART_Init+0x88>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <MX_LPUART1_UART_Init+0x88>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_LPUART1_UART_Init+0x88>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <MX_LPUART1_UART_Init+0x88>)
 80008d4:	220c      	movs	r2, #12
 80008d6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_LPUART1_UART_Init+0x88>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_LPUART1_UART_Init+0x88>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_LPUART1_UART_Init+0x88>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_LPUART1_UART_Init+0x88>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008f0:	4811      	ldr	r0, [pc, #68]	; (8000938 <MX_LPUART1_UART_Init+0x88>)
 80008f2:	f00d f8e7 	bl	800dac4 <HAL_UART_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80008fc:	f000 f982 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_LPUART1_UART_Init+0x88>)
 8000904:	f00f f81d 	bl	800f942 <HAL_UARTEx_SetTxFifoThreshold>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800090e:	f000 f979 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4808      	ldr	r0, [pc, #32]	; (8000938 <MX_LPUART1_UART_Init+0x88>)
 8000916:	f00f f852 	bl	800f9be <HAL_UARTEx_SetRxFifoThreshold>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000920:	f000 f970 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_LPUART1_UART_Init+0x88>)
 8000926:	f00e ffd3 	bl	800f8d0 <HAL_UARTEx_DisableFifoMode>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000930:	f000 f968 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200001cc 	.word	0x200001cc
 800093c:	44002400 	.word	0x44002400
 8000940:	00033324 	.word	0x00033324

08000944 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800094a:	4a23      	ldr	r2, [pc, #140]	; (80009d8 <MX_USART3_UART_Init+0x94>)
 800094c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800098c:	4811      	ldr	r0, [pc, #68]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800098e:	f00d f899 	bl	800dac4 <HAL_UART_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000998:	f000 f934 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099c:	2100      	movs	r1, #0
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 80009a0:	f00e ffcf 	bl	800f942 <HAL_UARTEx_SetTxFifoThreshold>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009aa:	f000 f92b 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4808      	ldr	r0, [pc, #32]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 80009b2:	f00f f804 	bl	800f9be <HAL_UARTEx_SetRxFifoThreshold>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009bc:	f000 f922 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 80009c2:	f00e ff85 	bl	800f8d0 <HAL_UARTEx_DisableFifoMode>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009cc:	f000 f91a 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000260 	.word	0x20000260
 80009d8:	40004800 	.word	0x40004800

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08e      	sub	sp, #56	; 0x38
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f2:	4b6b      	ldr	r3, [pc, #428]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 80009f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009f8:	4a69      	ldr	r2, [pc, #420]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 80009fa:	f043 0310 	orr.w	r3, r3, #16
 80009fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a02:	4b67      	ldr	r3, [pc, #412]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a08:	f003 0310 	and.w	r3, r3, #16
 8000a0c:	623b      	str	r3, [r7, #32]
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a10:	4b63      	ldr	r3, [pc, #396]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a16:	4a62      	ldr	r2, [pc, #392]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a20:	4b5f      	ldr	r3, [pc, #380]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	61fb      	str	r3, [r7, #28]
 8000a2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a2e:	4b5c      	ldr	r3, [pc, #368]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a34:	4a5a      	ldr	r2, [pc, #360]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000a36:	f043 0320 	orr.w	r3, r3, #32
 8000a3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a3e:	4b58      	ldr	r3, [pc, #352]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a44:	f003 0320 	and.w	r3, r3, #32
 8000a48:	61bb      	str	r3, [r7, #24]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4c:	4b54      	ldr	r3, [pc, #336]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a52:	4a53      	ldr	r2, [pc, #332]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a5c:	4b50      	ldr	r3, [pc, #320]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a70:	4a4b      	ldr	r2, [pc, #300]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a7a:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a88:	4b45      	ldr	r3, [pc, #276]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a8e:	4a44      	ldr	r2, [pc, #272]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a98:	4b41      	ldr	r3, [pc, #260]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	4b3e      	ldr	r3, [pc, #248]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aac:	4a3c      	ldr	r2, [pc, #240]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ab6:	4b3a      	ldr	r3, [pc, #232]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000abc:	f003 0308 	and.w	r3, r3, #8
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac4:	4b36      	ldr	r3, [pc, #216]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aca:	4a35      	ldr	r2, [pc, #212]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ad4:	4b32      	ldr	r3, [pc, #200]	; (8000ba0 <MX_GPIO_Init+0x1c4>)
 8000ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2110      	movs	r1, #16
 8000ae6:	482f      	ldr	r0, [pc, #188]	; (8000ba4 <MX_GPIO_Init+0x1c8>)
 8000ae8:	f006 fb60 	bl	80071ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2101      	movs	r1, #1
 8000af0:	482d      	ldr	r0, [pc, #180]	; (8000ba8 <MX_GPIO_Init+0x1cc>)
 8000af2:	f006 fb5b 	bl	80071ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2110      	movs	r1, #16
 8000afa:	482c      	ldr	r0, [pc, #176]	; (8000bac <MX_GPIO_Init+0x1d0>)
 8000afc:	f006 fb56 	bl	80071ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b06:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <MX_GPIO_Init+0x1d4>)
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	4619      	mov	r1, r3
 8000b14:	4827      	ldr	r0, [pc, #156]	; (8000bb4 <MX_GPIO_Init+0x1d8>)
 8000b16:	f006 f9f7 	bl	8006f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	481c      	ldr	r0, [pc, #112]	; (8000ba4 <MX_GPIO_Init+0x1c8>)
 8000b32:	f006 f9e9 	bl	8006f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000b36:	2301      	movs	r3, #1
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4816      	ldr	r0, [pc, #88]	; (8000ba8 <MX_GPIO_Init+0x1cc>)
 8000b4e:	f006 f9db 	bl	8006f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000b52:	2310      	movs	r3, #16
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	4619      	mov	r1, r3
 8000b68:	4810      	ldr	r0, [pc, #64]	; (8000bac <MX_GPIO_Init+0x1d0>)
 8000b6a:	f006 f9cd 	bl	8006f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_GPIO_Init+0x1d4>)
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480a      	ldr	r0, [pc, #40]	; (8000bac <MX_GPIO_Init+0x1d0>)
 8000b82:	f006 f9c1 	bl	8006f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2105      	movs	r1, #5
 8000b8a:	2018      	movs	r0, #24
 8000b8c:	f003 fa3a 	bl	8004004 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000b90:	2018      	movs	r0, #24
 8000b92:	f003 fa51 	bl	8004038 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b96:	bf00      	nop
 8000b98:	3738      	adds	r7, #56	; 0x38
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	44020c00 	.word	0x44020c00
 8000ba4:	42021400 	.word	0x42021400
 8000ba8:	42020400 	.word	0x42020400
 8000bac:	42021800 	.word	0x42021800
 8000bb0:	10110000 	.word	0x10110000
 8000bb4:	42020800 	.word	0x42020800

08000bb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0c      	ldr	r2, [pc, #48]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d101      	bne.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bca:	f003 f909 	bl	8003de0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  timeCounter++;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000bd6:	6013      	str	r3, [r2, #0]

  if(timeCounter > 1000)
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000be0:	d905      	bls.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    timeFlag = TRUE;
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	601a      	str	r2, [r3, #0]
    timeCounter = 0;
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40001000 	.word	0x40001000
 8000bfc:	200002f8 	.word	0x200002f8
 8000c00:	200002f4 	.word	0x200002f4

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>

08000c0e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	210f      	movs	r1, #15
 8000c16:	f06f 0001 	mvn.w	r0, #1
 8000c1a:	f003 f9f3 	bl	8004004 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b0d0      	sub	sp, #320	; 0x140
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c2e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000c32:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c44:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c48:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000c52:	461a      	mov	r2, r3
 8000c54:	2100      	movs	r1, #0
 8000c56:	f021 fc4b 	bl	80224f0 <memset>
  if(huart->Instance==LPUART1)
 8000c5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c5e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a9e      	ldr	r2, [pc, #632]	; (8000ee0 <HAL_UART_MspInit+0x2bc>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d15e      	bne.n	8000d2a <HAL_UART_MspInit+0x106>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c6c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c70:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000c74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c78:	f04f 0300 	mov.w	r3, #0
 8000c7c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8000c80:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c84:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8e:	f107 0320 	add.w	r3, r7, #32
 8000c92:	4618      	mov	r0, r3
 8000c94:	f007 fab0 	bl	80081f8 <HAL_RCCEx_PeriphCLKConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000c9e:	f7ff ffb1 	bl	8000c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ca2:	4b90      	ldr	r3, [pc, #576]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000ca4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ca8:	4a8e      	ldr	r2, [pc, #568]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cae:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000cb2:	4b8c      	ldr	r3, [pc, #560]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000cb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000cb8:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000cbc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cc0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cca:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000cce:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd0:	4b84      	ldr	r3, [pc, #528]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cd6:	4a83      	ldr	r2, [pc, #524]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ce0:	4b80      	ldr	r3, [pc, #512]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ce6:	f003 0202 	and.w	r2, r3, #2
 8000cea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cf8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000cfc:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cfe:	23c0      	movs	r3, #192	; 0xc0
 8000d00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d16:	2308      	movs	r3, #8
 8000d18:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000d20:	4619      	mov	r1, r3
 8000d22:	4871      	ldr	r0, [pc, #452]	; (8000ee8 <HAL_UART_MspInit+0x2c4>)
 8000d24:	f006 f8f0 	bl	8006f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d28:	e0d5      	b.n	8000ed6 <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART2)
 8000d2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d2e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a6d      	ldr	r2, [pc, #436]	; (8000eec <HAL_UART_MspInit+0x2c8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d165      	bne.n	8000e08 <HAL_UART_MspInit+0x1e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d40:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000d44:	f04f 0202 	mov.w	r2, #2
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d54:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d58:	2200      	movs	r2, #0
 8000d5a:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d5c:	f107 0320 	add.w	r3, r7, #32
 8000d60:	4618      	mov	r0, r3
 8000d62:	f007 fa49 	bl	80081f8 <HAL_RCCEx_PeriphCLKConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8000d6c:	f7ff ff4a 	bl	8000c04 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d70:	4b5c      	ldr	r3, [pc, #368]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d76:	4a5b      	ldr	r2, [pc, #364]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000d80:	4b58      	ldr	r3, [pc, #352]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d86:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8000d8a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000d9c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9e:	4b51      	ldr	r3, [pc, #324]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000da4:	4a4f      	ldr	r2, [pc, #316]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dae:	4b4d      	ldr	r3, [pc, #308]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000db4:	f003 0208 	and.w	r2, r3, #8
 8000db8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000dca:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000dcc:	2360      	movs	r3, #96	; 0x60
 8000dce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de4:	2307      	movs	r3, #7
 8000de6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dea:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000dee:	4619      	mov	r1, r3
 8000df0:	483f      	ldr	r0, [pc, #252]	; (8000ef0 <HAL_UART_MspInit+0x2cc>)
 8000df2:	f006 f889 	bl	8006f08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2105      	movs	r1, #5
 8000dfa:	203b      	movs	r0, #59	; 0x3b
 8000dfc:	f003 f902 	bl	8004004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e00:	203b      	movs	r0, #59	; 0x3b
 8000e02:	f003 f919 	bl	8004038 <HAL_NVIC_EnableIRQ>
}
 8000e06:	e066      	b.n	8000ed6 <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART3)
 8000e08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e0c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a37      	ldr	r2, [pc, #220]	; (8000ef4 <HAL_UART_MspInit+0x2d0>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d15d      	bne.n	8000ed6 <HAL_UART_MspInit+0x2b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e1e:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000e22:	f04f 0204 	mov.w	r2, #4
 8000e26:	f04f 0300 	mov.w	r3, #0
 8000e2a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e32:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e36:	2200      	movs	r2, #0
 8000e38:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f007 f9da 	bl	80081f8 <HAL_RCCEx_PeriphCLKConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_UART_MspInit+0x22a>
      Error_Handler();
 8000e4a:	f7ff fedb 	bl	8000c04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e54:	4a23      	ldr	r2, [pc, #140]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000e56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e5a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e64:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8000e68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e6c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e76:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000e7a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e82:	4a18      	ldr	r2, [pc, #96]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000e84:	f043 0308 	orr.w	r3, r3, #8
 8000e88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_UART_MspInit+0x2c0>)
 8000e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e92:	f003 0208 	and.w	r2, r3, #8
 8000e96:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ea4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000ea8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eca:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <HAL_UART_MspInit+0x2cc>)
 8000ed2:	f006 f819 	bl	8006f08 <HAL_GPIO_Init>
}
 8000ed6:	bf00      	nop
 8000ed8:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	44002400 	.word	0x44002400
 8000ee4:	44020c00 	.word	0x44020c00
 8000ee8:	42020400 	.word	0x42020400
 8000eec:	40004400 	.word	0x40004400
 8000ef0:	42020c00 	.word	0x42020c00
 8000ef4:	40004800 	.word	0x40004800

08000ef8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08e      	sub	sp, #56	; 0x38
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f00:	4b33      	ldr	r3, [pc, #204]	; (8000fd0 <HAL_InitTick+0xd8>)
 8000f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f06:	4a32      	ldr	r2, [pc, #200]	; (8000fd0 <HAL_InitTick+0xd8>)
 8000f08:	f043 0310 	orr.w	r3, r3, #16
 8000f0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000f10:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <HAL_InitTick+0xd8>)
 8000f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f16:	f003 0310 	and.w	r3, r3, #16
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f1e:	f107 020c 	add.w	r2, r7, #12
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f007 f92d 	bl	8008188 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d103      	bne.n	8000f40 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f38:	f007 f8e4 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 8000f3c:	6378      	str	r0, [r7, #52]	; 0x34
 8000f3e:	e004      	b.n	8000f4a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f40:	f007 f8e0 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 8000f44:	4603      	mov	r3, r0
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f4c:	095b      	lsrs	r3, r3, #5
 8000f4e:	4a21      	ldr	r2, [pc, #132]	; (8000fd4 <HAL_InitTick+0xdc>)
 8000f50:	fba2 2303 	umull	r2, r3, r2, r3
 8000f54:	09db      	lsrs	r3, r3, #7
 8000f56:	3b01      	subs	r3, #1
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <HAL_InitTick+0xe0>)
 8000f5c:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <HAL_InitTick+0xe4>)
 8000f5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_InitTick+0xe0>)
 8000f62:	2263      	movs	r2, #99	; 0x63
 8000f64:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f66:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <HAL_InitTick+0xe0>)
 8000f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <HAL_InitTick+0xe0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_InitTick+0xe0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000f78:	4817      	ldr	r0, [pc, #92]	; (8000fd8 <HAL_InitTick+0xe0>)
 8000f7a:	f00c f9bd 	bl	800d2f8 <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d118      	bne.n	8000fbe <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f8c:	4812      	ldr	r0, [pc, #72]	; (8000fd8 <HAL_InitTick+0xe0>)
 8000f8e:	f00c fa15 	bl	800d3bc <HAL_TIM_Base_Start_IT>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d10e      	bne.n	8000fbe <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b0f      	cmp	r3, #15
 8000fa4:	d808      	bhi.n	8000fb8 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	2031      	movs	r0, #49	; 0x31
 8000fac:	f003 f82a 	bl	8004004 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb0:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <HAL_InitTick+0xe8>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e002      	b.n	8000fbe <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000fbe:	2031      	movs	r0, #49	; 0x31
 8000fc0:	f003 f83a 	bl	8004038 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000fc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3738      	adds	r7, #56	; 0x38
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	44020c00 	.word	0x44020c00
 8000fd4:	0a7c5ac5 	.word	0x0a7c5ac5
 8000fd8:	200002fc 	.word	0x200002fc
 8000fdc:	40001000 	.word	0x40001000
 8000fe0:	20000040 	.word	0x20000040

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001014:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001018:	f006 f8fa 	bl	8007210 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <TIM6_IRQHandler+0x10>)
 8001026:	f00c fa77 	bl	800d518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200002fc 	.word	0x200002fc

08001034 <USART2_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <USART2_IRQHandler+0x10>)
 800103a:	f00c fe93 	bl	800dd64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2000540c 	.word	0x2000540c

08001048 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return 1;
 800104c:	2301      	movs	r3, #1
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <_kill>:

int _kill(int pid, int sig)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <_kill+0x20>)
 8001064:	2216      	movs	r2, #22
 8001066:	601a      	str	r2, [r3, #0]
  return -1;
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	2002f288 	.word	0x2002f288

0800107c <_exit>:

void _exit (int status)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffe5 	bl	8001058 <_kill>
  while (1) {}    /* Make sure we hang here */
 800108e:	e7fe      	b.n	800108e <_exit+0x12>

08001090 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	e00a      	b.n	80010b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010a2:	f3af 8000 	nop.w
 80010a6:	4601      	mov	r1, r0
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	60ba      	str	r2, [r7, #8]
 80010ae:	b2ca      	uxtb	r2, r1
 80010b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbf0      	blt.n	80010a2 <_read+0x12>
  }

  return len;
 80010c0:	687b      	ldr	r3, [r7, #4]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	e009      	b.n	80010f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	60ba      	str	r2, [r7, #8]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3301      	adds	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dbf1      	blt.n	80010dc <_write+0x12>
  }
  return len;
 80010f8:	687b      	ldr	r3, [r7, #4]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_close>:

int _close(int file)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112a:	605a      	str	r2, [r3, #4]
  return 0;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <_isatty>:

int _isatty(int file)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d205      	bcs.n	80011a8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <_sbrk+0x6c>)
 800119e:	220c      	movs	r2, #12
 80011a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	e009      	b.n	80011bc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <_sbrk+0x64>)
 80011b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	371c      	adds	r7, #28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	200a0000 	.word	0x200a0000
 80011cc:	00000400 	.word	0x00000400
 80011d0:	20000348 	.word	0x20000348
 80011d4:	2002f290 	.word	0x2002f290
 80011d8:	2002f288 	.word	0x2002f288

080011dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011e2:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <SystemInit+0xdc>)
 80011e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e8:	4a33      	ldr	r2, [pc, #204]	; (80012b8 <SystemInit+0xdc>)
 80011ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <SystemInit+0xe0>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <SystemInit+0xe0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80011fe:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <SystemInit+0xe0>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001204:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <SystemInit+0xe0>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	492c      	ldr	r1, [pc, #176]	; (80012bc <SystemInit+0xe0>)
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <SystemInit+0xe4>)
 800120c:	4013      	ands	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001210:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <SystemInit+0xe0>)
 8001212:	2200      	movs	r2, #0
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001216:	4b29      	ldr	r3, [pc, #164]	; (80012bc <SystemInit+0xe0>)
 8001218:	2200      	movs	r2, #0
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <SystemInit+0xe0>)
 800121e:	2200      	movs	r2, #0
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <SystemInit+0xe0>)
 8001224:	4a27      	ldr	r2, [pc, #156]	; (80012c4 <SystemInit+0xe8>)
 8001226:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <SystemInit+0xe0>)
 800122a:	2200      	movs	r2, #0
 800122c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <SystemInit+0xe0>)
 8001230:	4a24      	ldr	r2, [pc, #144]	; (80012c4 <SystemInit+0xe8>)
 8001232:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <SystemInit+0xe0>)
 8001236:	2200      	movs	r2, #0
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <SystemInit+0xe0>)
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <SystemInit+0xe8>)
 800123e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <SystemInit+0xe0>)
 8001242:	2200      	movs	r2, #0
 8001244:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <SystemInit+0xe0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <SystemInit+0xe0>)
 800124c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001250:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <SystemInit+0xe0>)
 8001254:	2200      	movs	r2, #0
 8001256:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <SystemInit+0xdc>)
 800125a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800125e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <SystemInit+0xec>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001268:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001270:	d003      	beq.n	800127a <SystemInit+0x9e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001278:	d117      	bne.n	80012aa <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <SystemInit+0xec>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <SystemInit+0xec>)
 8001288:	4a10      	ldr	r2, [pc, #64]	; (80012cc <SystemInit+0xf0>)
 800128a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <SystemInit+0xec>)
 800128e:	4a10      	ldr	r2, [pc, #64]	; (80012d0 <SystemInit+0xf4>)
 8001290:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <SystemInit+0xec>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <SystemInit+0xec>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <SystemInit+0xec>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <SystemInit+0xec>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	61d3      	str	r3, [r2, #28]
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00
 80012bc:	44020c00 	.word	0x44020c00
 80012c0:	eae2eae3 	.word	0xeae2eae3
 80012c4:	01010280 	.word	0x01010280
 80012c8:	40022000 	.word	0x40022000
 80012cc:	08192a3b 	.word	0x08192a3b
 80012d0:	4c5d6e7f 	.word	0x4c5d6e7f

080012d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012d8:	f7ff ff80 	bl	80011dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012dc:	480c      	ldr	r0, [pc, #48]	; (8001310 <LoopForever+0x6>)
  ldr r1, =_edata
 80012de:	490d      	ldr	r1, [pc, #52]	; (8001314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012e0:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <LoopForever+0xe>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e4:	e002      	b.n	80012ec <LoopCopyDataInit>

080012e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ea:	3304      	adds	r3, #4

080012ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f0:	d3f9      	bcc.n	80012e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <LoopForever+0x12>)
  ldr r4, =_ebss
 80012f4:	4c0a      	ldr	r4, [pc, #40]	; (8001320 <LoopForever+0x16>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f8:	e001      	b.n	80012fe <LoopFillZerobss>

080012fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012fc:	3204      	adds	r2, #4

080012fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001300:	d3fb      	bcc.n	80012fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001302:	f021 f967 	bl	80225d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001306:	f7ff fa37 	bl	8000778 <main>

0800130a <LoopForever>:

LoopForever:
    b LoopForever
 800130a:	e7fe      	b.n	800130a <LoopForever>
  ldr   r0, =_estack
 800130c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001314:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8001318:	080271c4 	.word	0x080271c4
  ldr r2, =_sbss
 800131c:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8001320:	2002f290 	.word	0x2002f290

08001324 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001324:	e7fe      	b.n	8001324 <ADC1_IRQHandler>
	...

08001328 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800132e:	4b98      	ldr	r3, [pc, #608]	; (8001590 <MX_LWIP_Init+0x268>)
 8001330:	22c0      	movs	r2, #192	; 0xc0
 8001332:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8001334:	4b96      	ldr	r3, [pc, #600]	; (8001590 <MX_LWIP_Init+0x268>)
 8001336:	22a8      	movs	r2, #168	; 0xa8
 8001338:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 219;
 800133a:	4b95      	ldr	r3, [pc, #596]	; (8001590 <MX_LWIP_Init+0x268>)
 800133c:	22db      	movs	r2, #219	; 0xdb
 800133e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 120;
 8001340:	4b93      	ldr	r3, [pc, #588]	; (8001590 <MX_LWIP_Init+0x268>)
 8001342:	2278      	movs	r2, #120	; 0x78
 8001344:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8001346:	4b93      	ldr	r3, [pc, #588]	; (8001594 <MX_LWIP_Init+0x26c>)
 8001348:	22ff      	movs	r2, #255	; 0xff
 800134a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800134c:	4b91      	ldr	r3, [pc, #580]	; (8001594 <MX_LWIP_Init+0x26c>)
 800134e:	22ff      	movs	r2, #255	; 0xff
 8001350:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8001352:	4b90      	ldr	r3, [pc, #576]	; (8001594 <MX_LWIP_Init+0x26c>)
 8001354:	22ff      	movs	r2, #255	; 0xff
 8001356:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8001358:	4b8e      	ldr	r3, [pc, #568]	; (8001594 <MX_LWIP_Init+0x26c>)
 800135a:	2200      	movs	r2, #0
 800135c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800135e:	4b8e      	ldr	r3, [pc, #568]	; (8001598 <MX_LWIP_Init+0x270>)
 8001360:	22c0      	movs	r2, #192	; 0xc0
 8001362:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8001364:	4b8c      	ldr	r3, [pc, #560]	; (8001598 <MX_LWIP_Init+0x270>)
 8001366:	22a8      	movs	r2, #168	; 0xa8
 8001368:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 219;
 800136a:	4b8b      	ldr	r3, [pc, #556]	; (8001598 <MX_LWIP_Init+0x270>)
 800136c:	22db      	movs	r2, #219	; 0xdb
 800136e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8001370:	4b89      	ldr	r3, [pc, #548]	; (8001598 <MX_LWIP_Init+0x270>)
 8001372:	2201      	movs	r2, #1
 8001374:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8001376:	2100      	movs	r1, #0
 8001378:	2000      	movs	r0, #0
 800137a:	f015 fb57 	bl	8016a2c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800137e:	4b84      	ldr	r3, [pc, #528]	; (8001590 <MX_LWIP_Init+0x268>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	061a      	lsls	r2, r3, #24
 8001384:	4b82      	ldr	r3, [pc, #520]	; (8001590 <MX_LWIP_Init+0x268>)
 8001386:	785b      	ldrb	r3, [r3, #1]
 8001388:	041b      	lsls	r3, r3, #16
 800138a:	431a      	orrs	r2, r3
 800138c:	4b80      	ldr	r3, [pc, #512]	; (8001590 <MX_LWIP_Init+0x268>)
 800138e:	789b      	ldrb	r3, [r3, #2]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	4313      	orrs	r3, r2
 8001394:	4a7e      	ldr	r2, [pc, #504]	; (8001590 <MX_LWIP_Init+0x268>)
 8001396:	78d2      	ldrb	r2, [r2, #3]
 8001398:	4313      	orrs	r3, r2
 800139a:	061a      	lsls	r2, r3, #24
 800139c:	4b7c      	ldr	r3, [pc, #496]	; (8001590 <MX_LWIP_Init+0x268>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	0619      	lsls	r1, r3, #24
 80013a2:	4b7b      	ldr	r3, [pc, #492]	; (8001590 <MX_LWIP_Init+0x268>)
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	041b      	lsls	r3, r3, #16
 80013a8:	4319      	orrs	r1, r3
 80013aa:	4b79      	ldr	r3, [pc, #484]	; (8001590 <MX_LWIP_Init+0x268>)
 80013ac:	789b      	ldrb	r3, [r3, #2]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	430b      	orrs	r3, r1
 80013b2:	4977      	ldr	r1, [pc, #476]	; (8001590 <MX_LWIP_Init+0x268>)
 80013b4:	78c9      	ldrb	r1, [r1, #3]
 80013b6:	430b      	orrs	r3, r1
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80013be:	431a      	orrs	r2, r3
 80013c0:	4b73      	ldr	r3, [pc, #460]	; (8001590 <MX_LWIP_Init+0x268>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	0619      	lsls	r1, r3, #24
 80013c6:	4b72      	ldr	r3, [pc, #456]	; (8001590 <MX_LWIP_Init+0x268>)
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	041b      	lsls	r3, r3, #16
 80013cc:	4319      	orrs	r1, r3
 80013ce:	4b70      	ldr	r3, [pc, #448]	; (8001590 <MX_LWIP_Init+0x268>)
 80013d0:	789b      	ldrb	r3, [r3, #2]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	430b      	orrs	r3, r1
 80013d6:	496e      	ldr	r1, [pc, #440]	; (8001590 <MX_LWIP_Init+0x268>)
 80013d8:	78c9      	ldrb	r1, [r1, #3]
 80013da:	430b      	orrs	r3, r1
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80013e2:	431a      	orrs	r2, r3
 80013e4:	4b6a      	ldr	r3, [pc, #424]	; (8001590 <MX_LWIP_Init+0x268>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	0619      	lsls	r1, r3, #24
 80013ea:	4b69      	ldr	r3, [pc, #420]	; (8001590 <MX_LWIP_Init+0x268>)
 80013ec:	785b      	ldrb	r3, [r3, #1]
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	4319      	orrs	r1, r3
 80013f2:	4b67      	ldr	r3, [pc, #412]	; (8001590 <MX_LWIP_Init+0x268>)
 80013f4:	789b      	ldrb	r3, [r3, #2]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	430b      	orrs	r3, r1
 80013fa:	4965      	ldr	r1, [pc, #404]	; (8001590 <MX_LWIP_Init+0x268>)
 80013fc:	78c9      	ldrb	r1, [r1, #3]
 80013fe:	430b      	orrs	r3, r1
 8001400:	0e1b      	lsrs	r3, r3, #24
 8001402:	4313      	orrs	r3, r2
 8001404:	4a65      	ldr	r2, [pc, #404]	; (800159c <MX_LWIP_Init+0x274>)
 8001406:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8001408:	4b62      	ldr	r3, [pc, #392]	; (8001594 <MX_LWIP_Init+0x26c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	061a      	lsls	r2, r3, #24
 800140e:	4b61      	ldr	r3, [pc, #388]	; (8001594 <MX_LWIP_Init+0x26c>)
 8001410:	785b      	ldrb	r3, [r3, #1]
 8001412:	041b      	lsls	r3, r3, #16
 8001414:	431a      	orrs	r2, r3
 8001416:	4b5f      	ldr	r3, [pc, #380]	; (8001594 <MX_LWIP_Init+0x26c>)
 8001418:	789b      	ldrb	r3, [r3, #2]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	4313      	orrs	r3, r2
 800141e:	4a5d      	ldr	r2, [pc, #372]	; (8001594 <MX_LWIP_Init+0x26c>)
 8001420:	78d2      	ldrb	r2, [r2, #3]
 8001422:	4313      	orrs	r3, r2
 8001424:	061a      	lsls	r2, r3, #24
 8001426:	4b5b      	ldr	r3, [pc, #364]	; (8001594 <MX_LWIP_Init+0x26c>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	0619      	lsls	r1, r3, #24
 800142c:	4b59      	ldr	r3, [pc, #356]	; (8001594 <MX_LWIP_Init+0x26c>)
 800142e:	785b      	ldrb	r3, [r3, #1]
 8001430:	041b      	lsls	r3, r3, #16
 8001432:	4319      	orrs	r1, r3
 8001434:	4b57      	ldr	r3, [pc, #348]	; (8001594 <MX_LWIP_Init+0x26c>)
 8001436:	789b      	ldrb	r3, [r3, #2]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	430b      	orrs	r3, r1
 800143c:	4955      	ldr	r1, [pc, #340]	; (8001594 <MX_LWIP_Init+0x26c>)
 800143e:	78c9      	ldrb	r1, [r1, #3]
 8001440:	430b      	orrs	r3, r1
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001448:	431a      	orrs	r2, r3
 800144a:	4b52      	ldr	r3, [pc, #328]	; (8001594 <MX_LWIP_Init+0x26c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	0619      	lsls	r1, r3, #24
 8001450:	4b50      	ldr	r3, [pc, #320]	; (8001594 <MX_LWIP_Init+0x26c>)
 8001452:	785b      	ldrb	r3, [r3, #1]
 8001454:	041b      	lsls	r3, r3, #16
 8001456:	4319      	orrs	r1, r3
 8001458:	4b4e      	ldr	r3, [pc, #312]	; (8001594 <MX_LWIP_Init+0x26c>)
 800145a:	789b      	ldrb	r3, [r3, #2]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	430b      	orrs	r3, r1
 8001460:	494c      	ldr	r1, [pc, #304]	; (8001594 <MX_LWIP_Init+0x26c>)
 8001462:	78c9      	ldrb	r1, [r1, #3]
 8001464:	430b      	orrs	r3, r1
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800146c:	431a      	orrs	r2, r3
 800146e:	4b49      	ldr	r3, [pc, #292]	; (8001594 <MX_LWIP_Init+0x26c>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	0619      	lsls	r1, r3, #24
 8001474:	4b47      	ldr	r3, [pc, #284]	; (8001594 <MX_LWIP_Init+0x26c>)
 8001476:	785b      	ldrb	r3, [r3, #1]
 8001478:	041b      	lsls	r3, r3, #16
 800147a:	4319      	orrs	r1, r3
 800147c:	4b45      	ldr	r3, [pc, #276]	; (8001594 <MX_LWIP_Init+0x26c>)
 800147e:	789b      	ldrb	r3, [r3, #2]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	430b      	orrs	r3, r1
 8001484:	4943      	ldr	r1, [pc, #268]	; (8001594 <MX_LWIP_Init+0x26c>)
 8001486:	78c9      	ldrb	r1, [r1, #3]
 8001488:	430b      	orrs	r3, r1
 800148a:	0e1b      	lsrs	r3, r3, #24
 800148c:	4313      	orrs	r3, r2
 800148e:	4a44      	ldr	r2, [pc, #272]	; (80015a0 <MX_LWIP_Init+0x278>)
 8001490:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8001492:	4b41      	ldr	r3, [pc, #260]	; (8001598 <MX_LWIP_Init+0x270>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	061a      	lsls	r2, r3, #24
 8001498:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <MX_LWIP_Init+0x270>)
 800149a:	785b      	ldrb	r3, [r3, #1]
 800149c:	041b      	lsls	r3, r3, #16
 800149e:	431a      	orrs	r2, r3
 80014a0:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <MX_LWIP_Init+0x270>)
 80014a2:	789b      	ldrb	r3, [r3, #2]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	4313      	orrs	r3, r2
 80014a8:	4a3b      	ldr	r2, [pc, #236]	; (8001598 <MX_LWIP_Init+0x270>)
 80014aa:	78d2      	ldrb	r2, [r2, #3]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	061a      	lsls	r2, r3, #24
 80014b0:	4b39      	ldr	r3, [pc, #228]	; (8001598 <MX_LWIP_Init+0x270>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	0619      	lsls	r1, r3, #24
 80014b6:	4b38      	ldr	r3, [pc, #224]	; (8001598 <MX_LWIP_Init+0x270>)
 80014b8:	785b      	ldrb	r3, [r3, #1]
 80014ba:	041b      	lsls	r3, r3, #16
 80014bc:	4319      	orrs	r1, r3
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <MX_LWIP_Init+0x270>)
 80014c0:	789b      	ldrb	r3, [r3, #2]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	430b      	orrs	r3, r1
 80014c6:	4934      	ldr	r1, [pc, #208]	; (8001598 <MX_LWIP_Init+0x270>)
 80014c8:	78c9      	ldrb	r1, [r1, #3]
 80014ca:	430b      	orrs	r3, r1
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80014d2:	431a      	orrs	r2, r3
 80014d4:	4b30      	ldr	r3, [pc, #192]	; (8001598 <MX_LWIP_Init+0x270>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	0619      	lsls	r1, r3, #24
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <MX_LWIP_Init+0x270>)
 80014dc:	785b      	ldrb	r3, [r3, #1]
 80014de:	041b      	lsls	r3, r3, #16
 80014e0:	4319      	orrs	r1, r3
 80014e2:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <MX_LWIP_Init+0x270>)
 80014e4:	789b      	ldrb	r3, [r3, #2]
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	430b      	orrs	r3, r1
 80014ea:	492b      	ldr	r1, [pc, #172]	; (8001598 <MX_LWIP_Init+0x270>)
 80014ec:	78c9      	ldrb	r1, [r1, #3]
 80014ee:	430b      	orrs	r3, r1
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80014f6:	431a      	orrs	r2, r3
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <MX_LWIP_Init+0x270>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	0619      	lsls	r1, r3, #24
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <MX_LWIP_Init+0x270>)
 8001500:	785b      	ldrb	r3, [r3, #1]
 8001502:	041b      	lsls	r3, r3, #16
 8001504:	4319      	orrs	r1, r3
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <MX_LWIP_Init+0x270>)
 8001508:	789b      	ldrb	r3, [r3, #2]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	430b      	orrs	r3, r1
 800150e:	4922      	ldr	r1, [pc, #136]	; (8001598 <MX_LWIP_Init+0x270>)
 8001510:	78c9      	ldrb	r1, [r1, #3]
 8001512:	430b      	orrs	r3, r1
 8001514:	0e1b      	lsrs	r3, r3, #24
 8001516:	4313      	orrs	r3, r2
 8001518:	4a22      	ldr	r2, [pc, #136]	; (80015a4 <MX_LWIP_Init+0x27c>)
 800151a:	6013      	str	r3, [r2, #0]

  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <MX_LWIP_Init+0x280>)
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <MX_LWIP_Init+0x284>)
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	2300      	movs	r3, #0
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <MX_LWIP_Init+0x27c>)
 800152a:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <MX_LWIP_Init+0x278>)
 800152c:	491b      	ldr	r1, [pc, #108]	; (800159c <MX_LWIP_Init+0x274>)
 800152e:	4820      	ldr	r0, [pc, #128]	; (80015b0 <MX_LWIP_Init+0x288>)
 8001530:	f016 f8fe 	bl	8017730 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8001534:	481e      	ldr	r0, [pc, #120]	; (80015b0 <MX_LWIP_Init+0x288>)
 8001536:	f016 faad 	bl	8017a94 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <MX_LWIP_Init+0x288>)
 800153c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800154c:	4818      	ldr	r0, [pc, #96]	; (80015b0 <MX_LWIP_Init+0x288>)
 800154e:	f016 fab1 	bl	8017ab4 <netif_set_up>
 8001552:	e002      	b.n	800155a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8001554:	4816      	ldr	r0, [pc, #88]	; (80015b0 <MX_LWIP_Init+0x288>)
 8001556:	f016 fb19 	bl	8017b8c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800155a:	4916      	ldr	r1, [pc, #88]	; (80015b4 <MX_LWIP_Init+0x28c>)
 800155c:	4814      	ldr	r0, [pc, #80]	; (80015b0 <MX_LWIP_Init+0x288>)
 800155e:	f016 fbab 	bl	8017cb8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
  /* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8001562:	2224      	movs	r2, #36	; 0x24
 8001564:	2100      	movs	r1, #0
 8001566:	4814      	ldr	r0, [pc, #80]	; (80015b8 <MX_LWIP_Init+0x290>)
 8001568:	f020 ffc2 	bl	80224f0 <memset>
  attributes.name = "EthLink";
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_LWIP_Init+0x290>)
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <MX_LWIP_Init+0x294>)
 8001570:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_LWIP_Init+0x290>)
 8001574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001578:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_LWIP_Init+0x290>)
 800157c:	2210      	movs	r2, #16
 800157e:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8001580:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <MX_LWIP_Init+0x290>)
 8001582:	490b      	ldr	r1, [pc, #44]	; (80015b0 <MX_LWIP_Init+0x288>)
 8001584:	480e      	ldr	r0, [pc, #56]	; (80015c0 <MX_LWIP_Init+0x298>)
 8001586:	f00f fadd 	bl	8010b44 <osThreadNew>
  /* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	2000038c 	.word	0x2000038c
 8001594:	20000390 	.word	0x20000390
 8001598:	20000394 	.word	0x20000394
 800159c:	20000380 	.word	0x20000380
 80015a0:	20000384 	.word	0x20000384
 80015a4:	20000388 	.word	0x20000388
 80015a8:	0801693d 	.word	0x0801693d
 80015ac:	080019f9 	.word	0x080019f9
 80015b0:	2000034c 	.word	0x2000034c
 80015b4:	080015c5 	.word	0x080015c5
 80015b8:	20000398 	.word	0x20000398
 80015bc:	080234b4 	.word	0x080234b4
 80015c0:	08001cfd 	.word	0x08001cfd

080015c4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b0aa      	sub	sp, #168	; 0xa8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 80015f2:	f107 0310 	add.w	r3, r7, #16
 80015f6:	2264      	movs	r2, #100	; 0x64
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f020 ff78 	bl	80224f0 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8001600:	4b85      	ldr	r3, [pc, #532]	; (8001818 <low_level_init+0x240>)
 8001602:	4a86      	ldr	r2, [pc, #536]	; (800181c <low_level_init+0x244>)
 8001604:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001606:	2300      	movs	r3, #0
 8001608:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800160e:	23e1      	movs	r3, #225	; 0xe1
 8001610:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8001612:	2300      	movs	r3, #0
 8001614:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8001616:	2300      	movs	r3, #0
 8001618:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800161a:	2300      	movs	r3, #0
 800161c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800161e:	4a7e      	ldr	r2, [pc, #504]	; (8001818 <low_level_init+0x240>)
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001626:	4b7c      	ldr	r3, [pc, #496]	; (8001818 <low_level_init+0x240>)
 8001628:	2201      	movs	r2, #1
 800162a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800162c:	4b7a      	ldr	r3, [pc, #488]	; (8001818 <low_level_init+0x240>)
 800162e:	4a7c      	ldr	r2, [pc, #496]	; (8001820 <low_level_init+0x248>)
 8001630:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001632:	4b79      	ldr	r3, [pc, #484]	; (8001818 <low_level_init+0x240>)
 8001634:	4a7b      	ldr	r2, [pc, #492]	; (8001824 <low_level_init+0x24c>)
 8001636:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8001638:	4b77      	ldr	r3, [pc, #476]	; (8001818 <low_level_init+0x240>)
 800163a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800163e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8001640:	4875      	ldr	r0, [pc, #468]	; (8001818 <low_level_init+0x240>)
 8001642:	f002 fdad 	bl	80041a0 <HAL_ETH_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800164c:	2238      	movs	r2, #56	; 0x38
 800164e:	2100      	movs	r1, #0
 8001650:	4875      	ldr	r0, [pc, #468]	; (8001828 <low_level_init+0x250>)
 8001652:	f020 ff4d 	bl	80224f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001656:	4b74      	ldr	r3, [pc, #464]	; (8001828 <low_level_init+0x250>)
 8001658:	2221      	movs	r2, #33	; 0x21
 800165a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800165c:	4b72      	ldr	r3, [pc, #456]	; (8001828 <low_level_init+0x250>)
 800165e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001662:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001664:	4b70      	ldr	r3, [pc, #448]	; (8001828 <low_level_init+0x250>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800166a:	4870      	ldr	r0, [pc, #448]	; (800182c <low_level_init+0x254>)
 800166c:	f015 ff1a 	bl	80174a4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2206      	movs	r2, #6
 8001674:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8001678:	4b67      	ldr	r3, [pc, #412]	; (8001818 <low_level_init+0x240>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8001684:	4b64      	ldr	r3, [pc, #400]	; (8001818 <low_level_init+0x240>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	785a      	ldrb	r2, [r3, #1]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8001690:	4b61      	ldr	r3, [pc, #388]	; (8001818 <low_level_init+0x240>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	789a      	ldrb	r2, [r3, #2]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800169c:	4b5e      	ldr	r3, [pc, #376]	; (8001818 <low_level_init+0x240>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	78da      	ldrb	r2, [r3, #3]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80016a8:	4b5b      	ldr	r3, [pc, #364]	; (8001818 <low_level_init+0x240>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	791a      	ldrb	r2, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80016b4:	4b58      	ldr	r3, [pc, #352]	; (8001818 <low_level_init+0x240>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	795a      	ldrb	r2, [r3, #5]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80016c6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80016ce:	f043 030a 	orr.w	r3, r3, #10
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80016da:	2200      	movs	r2, #0
 80016dc:	2101      	movs	r1, #1
 80016de:	2001      	movs	r0, #1
 80016e0:	f00f fbe7 	bl	8010eb2 <osSemaphoreNew>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4a52      	ldr	r2, [pc, #328]	; (8001830 <low_level_init+0x258>)
 80016e8:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2101      	movs	r1, #1
 80016ee:	2001      	movs	r0, #1
 80016f0:	f00f fbdf 	bl	8010eb2 <osSemaphoreNew>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a4f      	ldr	r2, [pc, #316]	; (8001834 <low_level_init+0x25c>)
 80016f8:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80016fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016fe:	2224      	movs	r2, #36	; 0x24
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f020 fef4 	bl	80224f0 <memset>
  attributes.name = "EthIf";
 8001708:	4b4b      	ldr	r3, [pc, #300]	; (8001838 <low_level_init+0x260>)
 800170a:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800170c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001710:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8001714:	2330      	movs	r3, #48	; 0x30
 8001716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800171a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800171e:	461a      	mov	r2, r3
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4846      	ldr	r0, [pc, #280]	; (800183c <low_level_init+0x264>)
 8001724:	f00f fa0e 	bl	8010b44 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8001728:	4945      	ldr	r1, [pc, #276]	; (8001840 <low_level_init+0x268>)
 800172a:	4846      	ldr	r0, [pc, #280]	; (8001844 <low_level_init+0x26c>)
 800172c:	f000 fbef 	bl	8001f0e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8001730:	4844      	ldr	r0, [pc, #272]	; (8001844 <low_level_init+0x26c>)
 8001732:	f000 fc1e 	bl	8001f72 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8001736:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800173a:	2b00      	cmp	r3, #0
 800173c:	d165      	bne.n	800180a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800173e:	4841      	ldr	r0, [pc, #260]	; (8001844 <low_level_init+0x26c>)
 8001740:	f000 fcbf 	bl	80020c2 <LAN8742_GetLinkState>
 8001744:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8001748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800174c:	2b01      	cmp	r3, #1
 800174e:	dc06      	bgt.n	800175e <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f016 fa81 	bl	8017c58 <netif_set_link_down>
      netif_set_down(netif);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f016 fa18 	bl	8017b8c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800175c:	e057      	b.n	800180e <low_level_init+0x236>
      switch (PHYLinkState)
 800175e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001762:	3b02      	subs	r3, #2
 8001764:	2b03      	cmp	r3, #3
 8001766:	d82b      	bhi.n	80017c0 <low_level_init+0x1e8>
 8001768:	a201      	add	r2, pc, #4	; (adr r2, 8001770 <low_level_init+0x198>)
 800176a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176e:	bf00      	nop
 8001770:	08001781 	.word	0x08001781
 8001774:	08001793 	.word	0x08001793
 8001778:	080017a3 	.word	0x080017a3
 800177c:	080017b3 	.word	0x080017b3
        duplex = ETH_FULLDUPLEX_MODE;
 8001780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001784:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8001788:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800178c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8001790:	e01f      	b.n	80017d2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8001792:	2300      	movs	r3, #0
 8001794:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8001798:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800179c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80017a0:	e017      	b.n	80017d2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80017a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80017b0:	e00f      	b.n	80017d2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80017be:	e008      	b.n	80017d2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80017c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80017c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80017d0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	4619      	mov	r1, r3
 80017d8:	480f      	ldr	r0, [pc, #60]	; (8001818 <low_level_init+0x240>)
 80017da:	f003 f94f 	bl	8004a7c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80017de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 80017e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80017ea:	f107 0310 	add.w	r3, r7, #16
 80017ee:	4619      	mov	r1, r3
 80017f0:	4809      	ldr	r0, [pc, #36]	; (8001818 <low_level_init+0x240>)
 80017f2:	f003 fb17 	bl	8004e24 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80017f6:	4808      	ldr	r0, [pc, #32]	; (8001818 <low_level_init+0x240>)
 80017f8:	f002 fdb8 	bl	800436c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f016 f959 	bl	8017ab4 <netif_set_up>
    netif_set_link_up(netif);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f016 f9f4 	bl	8017bf0 <netif_set_link_up>
}
 8001808:	e001      	b.n	800180e <low_level_init+0x236>
    Error_Handler();
 800180a:	f7ff f9fb 	bl	8000c04 <Error_Handler>
}
 800180e:	bf00      	nop
 8001810:	37a8      	adds	r7, #168	; 0xa8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20004d50 	.word	0x20004d50
 800181c:	40028000 	.word	0x40028000
 8001820:	20000148 	.word	0x20000148
 8001824:	200000e8 	.word	0x200000e8
 8001828:	20004e00 	.word	0x20004e00
 800182c:	08026e04 	.word	0x08026e04
 8001830:	20004d48 	.word	0x20004d48
 8001834:	20004d4c 	.word	0x20004d4c
 8001838:	080234bc 	.word	0x080234bc
 800183c:	080019a5 	.word	0x080019a5
 8001840:	20000004 	.word	0x20000004
 8001844:	20004e38 	.word	0x20004e38

08001848 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b092      	sub	sp, #72	; 0x48
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8001856:	2300      	movs	r3, #0
 8001858:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	2230      	movs	r2, #48	; 0x30
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f020 fe41 	bl	80224f0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	2230      	movs	r2, #48	; 0x30
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f020 fe3a 	bl	80224f0 <memset>

  for(q = p; q != NULL; q = q->next)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	643b      	str	r3, [r7, #64]	; 0x40
 8001880:	e045      	b.n	800190e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8001882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001884:	2b03      	cmp	r3, #3
 8001886:	d902      	bls.n	800188e <low_level_output+0x46>
      return ERR_IF;
 8001888:	f06f 030b 	mvn.w	r3, #11
 800188c:	e065      	b.n	800195a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800188e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001890:	6859      	ldr	r1, [r3, #4]
 8001892:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	3348      	adds	r3, #72	; 0x48
 800189e:	443b      	add	r3, r7
 80018a0:	3b3c      	subs	r3, #60	; 0x3c
 80018a2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80018a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018a6:	895b      	ldrh	r3, [r3, #10]
 80018a8:	4619      	mov	r1, r3
 80018aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	3348      	adds	r3, #72	; 0x48
 80018b6:	443b      	add	r3, r7
 80018b8:	3b38      	subs	r3, #56	; 0x38
 80018ba:	6019      	str	r1, [r3, #0]

    if(i>0)
 80018bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d011      	beq.n	80018e6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80018c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	f107 000c 	add.w	r0, r7, #12
 80018ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80018cc:	460b      	mov	r3, r1
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	440b      	add	r3, r1
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	18c1      	adds	r1, r0, r3
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	3348      	adds	r3, #72	; 0x48
 80018e0:	443b      	add	r3, r7
 80018e2:	3b34      	subs	r3, #52	; 0x34
 80018e4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80018e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80018ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	3348      	adds	r3, #72	; 0x48
 80018fa:	443b      	add	r3, r7
 80018fc:	3b34      	subs	r3, #52	; 0x34
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
    }

    i++;
 8001902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001904:	3301      	adds	r3, #1
 8001906:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8001908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	643b      	str	r3, [r7, #64]	; 0x40
 800190e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1b6      	bne.n	8001882 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	891b      	ldrh	r3, [r3, #8]
 8001918:	461a      	mov	r2, r3
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <low_level_output+0x11c>)
 800191c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800191e:	4a11      	ldr	r2, [pc, #68]	; (8001964 <low_level_output+0x11c>)
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8001926:	4a0f      	ldr	r2, [pc, #60]	; (8001964 <low_level_output+0x11c>)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800192c:	6838      	ldr	r0, [r7, #0]
 800192e:	f016 fe17 	bl	8018560 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8001932:	490c      	ldr	r1, [pc, #48]	; (8001964 <low_level_output+0x11c>)
 8001934:	480c      	ldr	r0, [pc, #48]	; (8001968 <low_level_output+0x120>)
 8001936:	f002 fe1f 	bl	8004578 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800193a:	bf00      	nop
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <low_level_output+0x124>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	4618      	mov	r0, r3
 8001946:	f00f fb3d 	bl	8010fc4 <osSemaphoreAcquire>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f5      	bne.n	800193c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <low_level_output+0x120>)
 8001952:	f002 ff90 	bl	8004876 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8001956:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800195a:	4618      	mov	r0, r3
 800195c:	3748      	adds	r7, #72	; 0x48
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20004e00 	.word	0x20004e00
 8001968:	20004d50 	.word	0x20004d50
 800196c:	20004d4c 	.word	0x20004d4c

08001970 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <low_level_input+0x2c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	4619      	mov	r1, r3
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <low_level_input+0x30>)
 800198c:	f002 fe45 	bl	800461a <HAL_ETH_ReadData>
  }

  return p;
 8001990:	68fb      	ldr	r3, [r7, #12]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20004d44 	.word	0x20004d44
 80019a0:	20004d50 	.word	0x20004d50

080019a4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <ethernetif_input+0x50>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295
 80019bc:	4618      	mov	r0, r3
 80019be:	f00f fb01 	bl	8010fc4 <osSemaphoreAcquire>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f5      	bne.n	80019b4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80019c8:	68b8      	ldr	r0, [r7, #8]
 80019ca:	f7ff ffd1 	bl	8001970 <low_level_input>
 80019ce:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00a      	beq.n	80019ec <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	4798      	blx	r3
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f016 fd14 	bl	8018414 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1ea      	bne.n	80019c8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80019f2:	e7df      	b.n	80019b4 <ethernetif_input+0x10>
 80019f4:	20004d48 	.word	0x20004d48

080019f8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d106      	bne.n	8001a14 <ethernetif_init+0x1c>
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <ethernetif_init+0x48>)
 8001a08:	f240 12f5 	movw	r2, #501	; 0x1f5
 8001a0c:	490d      	ldr	r1, [pc, #52]	; (8001a44 <ethernetif_init+0x4c>)
 8001a0e:	480e      	ldr	r0, [pc, #56]	; (8001a48 <ethernetif_init+0x50>)
 8001a10:	f020 fc96 	bl	8022340 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2273      	movs	r2, #115	; 0x73
 8001a18:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2274      	movs	r2, #116	; 0x74
 8001a20:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a09      	ldr	r2, [pc, #36]	; (8001a4c <ethernetif_init+0x54>)
 8001a28:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <ethernetif_init+0x58>)
 8001a2e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff fdd1 	bl	80015d8 <low_level_init>

  return ERR_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	080234c4 	.word	0x080234c4
 8001a44:	080234ec 	.word	0x080234ec
 8001a48:	080234fc 	.word	0x080234fc
 8001a4c:	0801fbe1 	.word	0x0801fbe1
 8001a50:	08001849 	.word	0x08001849

08001a54 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8001a60:	68f9      	ldr	r1, [r7, #12]
 8001a62:	4809      	ldr	r0, [pc, #36]	; (8001a88 <pbuf_free_custom+0x34>)
 8001a64:	f015 fe0e 	bl	8017684 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <pbuf_free_custom+0x38>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d107      	bne.n	8001a80 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <pbuf_free_custom+0x38>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <pbuf_free_custom+0x3c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f00f faee 	bl	801105c <osSemaphoreRelease>
  }
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	08026e04 	.word	0x08026e04
 8001a8c:	20004d44 	.word	0x20004d44
 8001a90:	20004d48 	.word	0x20004d48

08001a94 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001a98:	f002 f9b6 	bl	8003e08 <HAL_GetTick>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08e      	sub	sp, #56	; 0x38
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a61      	ldr	r2, [pc, #388]	; (8001c48 <HAL_ETH_MspInit+0x1a4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	f040 80bb 	bne.w	8001c3e <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001ac8:	4b60      	ldr	r3, [pc, #384]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ace:	4a5f      	ldr	r2, [pc, #380]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001ad0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001ad8:	4b5c      	ldr	r3, [pc, #368]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ae2:	623b      	str	r3, [r7, #32]
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8001ae6:	4b59      	ldr	r3, [pc, #356]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aec:	4a57      	ldr	r2, [pc, #348]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001af2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001af6:	4b55      	ldr	r3, [pc, #340]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8001b04:	4b51      	ldr	r3, [pc, #324]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0a:	4a50      	ldr	r2, [pc, #320]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001b0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001b14:	4b4d      	ldr	r3, [pc, #308]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1e:	61bb      	str	r3, [r7, #24]
 8001b20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b28:	4a48      	ldr	r2, [pc, #288]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001b2a:	f043 0304 	orr.w	r3, r3, #4
 8001b2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b32:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b40:	4b42      	ldr	r3, [pc, #264]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b46:	4a41      	ldr	r2, [pc, #260]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b50:	4b3e      	ldr	r3, [pc, #248]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b64:	4a39      	ldr	r2, [pc, #228]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001b66:	f043 0302 	orr.w	r3, r3, #2
 8001b6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b6e:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b7c:	4b33      	ldr	r3, [pc, #204]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b82:	4a32      	ldr	r2, [pc, #200]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b8c:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <HAL_ETH_MspInit+0x1a8>)
 8001b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001b9a:	2332      	movs	r3, #50	; 0x32
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001baa:	230b      	movs	r3, #11
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4826      	ldr	r0, [pc, #152]	; (8001c50 <HAL_ETH_MspInit+0x1ac>)
 8001bb6:	f005 f9a7 	bl	8006f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001bba:	2386      	movs	r3, #134	; 0x86
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bca:	230b      	movs	r3, #11
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	481f      	ldr	r0, [pc, #124]	; (8001c54 <HAL_ETH_MspInit+0x1b0>)
 8001bd6:	f005 f997 	bl	8006f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bec:	230b      	movs	r3, #11
 8001bee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4818      	ldr	r0, [pc, #96]	; (8001c58 <HAL_ETH_MspInit+0x1b4>)
 8001bf8:	f005 f986 	bl	8006f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001bfc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c0e:	230b      	movs	r3, #11
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c16:	4619      	mov	r1, r3
 8001c18:	4810      	ldr	r0, [pc, #64]	; (8001c5c <HAL_ETH_MspInit+0x1b8>)
 8001c1a:	f005 f975 	bl	8006f08 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2105      	movs	r1, #5
 8001c22:	206a      	movs	r0, #106	; 0x6a
 8001c24:	f002 f9ee 	bl	8004004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001c28:	206a      	movs	r0, #106	; 0x6a
 8001c2a:	f002 fa05 	bl	8004038 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2105      	movs	r1, #5
 8001c32:	206b      	movs	r0, #107	; 0x6b
 8001c34:	f002 f9e6 	bl	8004004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8001c38:	206b      	movs	r0, #107	; 0x6b
 8001c3a:	f002 f9fd 	bl	8004038 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3738      	adds	r7, #56	; 0x38
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40028000 	.word	0x40028000
 8001c4c:	44020c00 	.word	0x44020c00
 8001c50:	42020800 	.word	0x42020800
 8001c54:	42020000 	.word	0x42020000
 8001c58:	42020400 	.word	0x42020400
 8001c5c:	42021800 	.word	0x42021800

08001c60 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <ETH_PHY_IO_Init+0x10>)
 8001c66:	f003 f8f7 	bl	8004e58 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20004d50 	.word	0x20004d50

08001c74 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return 0;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	68f9      	ldr	r1, [r7, #12]
 8001c96:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <ETH_PHY_IO_ReadReg+0x30>)
 8001c98:	f002 fe48 	bl	800492c <HAL_ETH_ReadPHYRegister>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e000      	b.n	8001caa <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20004d50 	.word	0x20004d50

08001cb8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	68f9      	ldr	r1, [r7, #12]
 8001cca:	4807      	ldr	r0, [pc, #28]	; (8001ce8 <ETH_PHY_IO_WriteReg+0x30>)
 8001ccc:	f002 fe82 	bl	80049d4 <HAL_ETH_WritePHYRegister>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	e000      	b.n	8001cde <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20004d50 	.word	0x20004d50

08001cec <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001cf0:	f002 f88a 	bl	8003e08 <HAL_GetTick>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b0a0      	sub	sp, #128	; 0x80
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8001d04:	f107 0308 	add.w	r3, r7, #8
 8001d08:	2264      	movs	r2, #100	; 0x64
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f020 fbef 	bl	80224f0 <memset>
  int32_t PHYLinkState = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d1e:	2300      	movs	r3, #0
 8001d20:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001d26:	483a      	ldr	r0, [pc, #232]	; (8001e10 <ethernet_link_thread+0x114>)
 8001d28:	f000 f9cb 	bl	80020c2 <LAN8742_GetLinkState>
 8001d2c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8001d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00c      	beq.n	8001d5a <ethernet_link_thread+0x5e>
 8001d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	dc09      	bgt.n	8001d5a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8001d46:	4833      	ldr	r0, [pc, #204]	; (8001e14 <ethernet_link_thread+0x118>)
 8001d48:	f002 fb9e 	bl	8004488 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8001d4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001d4e:	f015 ff1d 	bl	8017b8c <netif_set_down>
    netif_set_link_down(netif);
 8001d52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001d54:	f015 ff80 	bl	8017c58 <netif_set_link_down>
 8001d58:	e055      	b.n	8001e06 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8001d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d14e      	bne.n	8001e06 <ethernet_link_thread+0x10a>
 8001d68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	dd4b      	ble.n	8001e06 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8001d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d70:	3b02      	subs	r3, #2
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d82a      	bhi.n	8001dcc <ethernet_link_thread+0xd0>
 8001d76:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <ethernet_link_thread+0x80>)
 8001d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7c:	08001d8d 	.word	0x08001d8d
 8001d80:	08001d9f 	.word	0x08001d9f
 8001d84:	08001daf 	.word	0x08001daf
 8001d88:	08001dbf 	.word	0x08001dbf
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8001d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d90:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8001d92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d96:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001d9c:	e017      	b.n	8001dce <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8001da2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001da6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001da8:	2301      	movs	r3, #1
 8001daa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001dac:	e00f      	b.n	8001dce <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8001dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8001db4:	2300      	movs	r3, #0
 8001db6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001db8:	2301      	movs	r3, #1
 8001dba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001dbc:	e007      	b.n	8001dce <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8001dca:	e000      	b.n	8001dce <ethernet_link_thread+0xd2>
    default:
      break;
 8001dcc:	bf00      	nop
    }

    if(linkchanged)
 8001dce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d018      	beq.n	8001e06 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8001dd4:	f107 0308 	add.w	r3, r7, #8
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480e      	ldr	r0, [pc, #56]	; (8001e14 <ethernet_link_thread+0x118>)
 8001ddc:	f002 fe4e 	bl	8004a7c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8001de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001de2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8001de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001de6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8001de8:	f107 0308 	add.w	r3, r7, #8
 8001dec:	4619      	mov	r1, r3
 8001dee:	4809      	ldr	r0, [pc, #36]	; (8001e14 <ethernet_link_thread+0x118>)
 8001df0:	f003 f818 	bl	8004e24 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8001df4:	4807      	ldr	r0, [pc, #28]	; (8001e14 <ethernet_link_thread+0x118>)
 8001df6:	f002 fab9 	bl	800436c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8001dfa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001dfc:	f015 fe5a 	bl	8017ab4 <netif_set_up>
      netif_set_link_up(netif);
 8001e00:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001e02:	f015 fef5 	bl	8017bf0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8001e06:	2064      	movs	r0, #100	; 0x64
 8001e08:	f00e ff2e 	bl	8010c68 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001e0c:	e78b      	b.n	8001d26 <ethernet_link_thread+0x2a>
 8001e0e:	bf00      	nop
 8001e10:	20004e38 	.word	0x20004e38
 8001e14:	20004d50 	.word	0x20004d50

08001e18 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8001e20:	4812      	ldr	r0, [pc, #72]	; (8001e6c <HAL_ETH_RxAllocateCallback+0x54>)
 8001e22:	f015 fbbb 	bl	801759c <memp_malloc_pool>
 8001e26:	60f8      	str	r0, [r7, #12]
  if (p)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d014      	beq.n	8001e58 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f103 0220 	add.w	r2, r3, #32
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <HAL_ETH_RxAllocateCallback+0x58>)
 8001e3c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001e46:	9201      	str	r2, [sp, #4]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2241      	movs	r2, #65	; 0x41
 8001e4e:	2100      	movs	r1, #0
 8001e50:	2000      	movs	r0, #0
 8001e52:	f016 f925 	bl	80180a0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8001e56:	e005      	b.n	8001e64 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_ETH_RxAllocateCallback+0x5c>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	08026e04 	.word	0x08026e04
 8001e70:	08001a55 	.word	0x08001a55
 8001e74:	20004d44 	.word	0x20004d44

08001e78 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3b20      	subs	r3, #32
 8001e96:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d103      	bne.n	8001eba <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e003      	b.n	8001ec2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	69fa      	ldr	r2, [r7, #28]
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	e009      	b.n	8001ee4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	891a      	ldrh	r2, [r3, #8]
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f2      	bne.n	8001ed0 <HAL_ETH_RxLinkCallback+0x58>

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
//  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	3724      	adds	r7, #36	; 0x24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f016 fa87 	bl	8018414 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00b      	beq.n	8001f36 <LAN8742_RegisterBusIO+0x28>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <LAN8742_RegisterBusIO+0x28>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <LAN8742_RegisterBusIO+0x28>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	e014      	b.n	8001f66 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d17c      	bne.n	800208c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	e01c      	b.n	8001fe6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	f107 0208 	add.w	r2, r7, #8
 8001fb4:	2112      	movs	r1, #18
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	4798      	blx	r3
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	da03      	bge.n	8001fc8 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001fc0:	f06f 0304 	mvn.w	r3, #4
 8001fc4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001fc6:	e00b      	b.n	8001fe0 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 031f 	and.w	r3, r3, #31
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d105      	bne.n	8001fe0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
         break;
 8001fde:	e005      	b.n	8001fec <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b1f      	cmp	r3, #31
 8001fea:	d9df      	bls.n	8001fac <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b1f      	cmp	r3, #31
 8001ff2:	d902      	bls.n	8001ffa <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001ff4:	f06f 0302 	mvn.w	r3, #2
 8001ff8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d145      	bne.n	800208c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6810      	ldr	r0, [r2, #0]
 8002008:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800200c:	2100      	movs	r1, #0
 800200e:	4798      	blx	r3
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	db37      	blt.n	8002086 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6810      	ldr	r0, [r2, #0]
 800201e:	f107 0208 	add.w	r2, r7, #8
 8002022:	2100      	movs	r1, #0
 8002024:	4798      	blx	r3
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	db28      	blt.n	800207e <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4798      	blx	r3
 8002032:	4603      	mov	r3, r0
 8002034:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002036:	e01c      	b.n	8002072 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4798      	blx	r3
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800204a:	d80e      	bhi.n	800206a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6810      	ldr	r0, [r2, #0]
 8002054:	f107 0208 	add.w	r2, r7, #8
 8002058:	2100      	movs	r1, #0
 800205a:	4798      	blx	r3
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	da07      	bge.n	8002072 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8002062:	f06f 0304 	mvn.w	r3, #4
 8002066:	613b      	str	r3, [r7, #16]
                 break;
 8002068:	e010      	b.n	800208c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800206a:	f06f 0301 	mvn.w	r3, #1
 800206e:	613b      	str	r3, [r7, #16]
               break;
 8002070:	e00c      	b.n	800208c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1dd      	bne.n	8002038 <LAN8742_Init+0xc6>
 800207c:	e006      	b.n	800208c <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800207e:	f06f 0304 	mvn.w	r3, #4
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	e002      	b.n	800208c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002086:	f06f 0303 	mvn.w	r3, #3
 800208a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d112      	bne.n	80020b8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	4798      	blx	r3
 8002098:	4603      	mov	r3, r0
 800209a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800209c:	bf00      	nop
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	4798      	blx	r3
 80020a4:	4603      	mov	r3, r0
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020b0:	d9f5      	bls.n	800209e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	605a      	str	r2, [r3, #4]
   }

   return status;
 80020b8:	693b      	ldr	r3, [r7, #16]
 }
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6810      	ldr	r0, [r2, #0]
 80020d6:	f107 020c 	add.w	r2, r7, #12
 80020da:	2101      	movs	r1, #1
 80020dc:	4798      	blx	r3
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	da02      	bge.n	80020ea <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80020e4:	f06f 0304 	mvn.w	r3, #4
 80020e8:	e06e      	b.n	80021c8 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6810      	ldr	r0, [r2, #0]
 80020f2:	f107 020c 	add.w	r2, r7, #12
 80020f6:	2101      	movs	r1, #1
 80020f8:	4798      	blx	r3
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	da02      	bge.n	8002106 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002100:	f06f 0304 	mvn.w	r3, #4
 8002104:	e060      	b.n	80021c8 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8002110:	2301      	movs	r3, #1
 8002112:	e059      	b.n	80021c8 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6810      	ldr	r0, [r2, #0]
 800211c:	f107 020c 	add.w	r2, r7, #12
 8002120:	2100      	movs	r1, #0
 8002122:	4798      	blx	r3
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	da02      	bge.n	8002130 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800212a:	f06f 0304 	mvn.w	r3, #4
 800212e:	e04b      	b.n	80021c8 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d11b      	bne.n	8002172 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <LAN8742_GetLinkState+0x90>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800214e:	2302      	movs	r3, #2
 8002150:	e03a      	b.n	80021c8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800215c:	2303      	movs	r3, #3
 800215e:	e033      	b.n	80021c8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800216a:	2304      	movs	r3, #4
 800216c:	e02c      	b.n	80021c8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800216e:	2305      	movs	r3, #5
 8002170:	e02a      	b.n	80021c8 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6810      	ldr	r0, [r2, #0]
 800217a:	f107 020c 	add.w	r2, r7, #12
 800217e:	211f      	movs	r1, #31
 8002180:	4798      	blx	r3
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	da02      	bge.n	800218e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002188:	f06f 0304 	mvn.w	r3, #4
 800218c:	e01c      	b.n	80021c8 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002198:	2306      	movs	r3, #6
 800219a:	e015      	b.n	80021c8 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 031c 	and.w	r3, r3, #28
 80021a2:	2b18      	cmp	r3, #24
 80021a4:	d101      	bne.n	80021aa <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80021a6:	2302      	movs	r3, #2
 80021a8:	e00e      	b.n	80021c8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f003 031c 	and.w	r3, r3, #28
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d101      	bne.n	80021b8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e007      	b.n	80021c8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 031c 	and.w	r3, r3, #28
 80021be:	2b14      	cmp	r3, #20
 80021c0:	d101      	bne.n	80021c6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80021c2:	2304      	movs	r3, #4
 80021c4:	e000      	b.n	80021c8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80021c6:	2305      	movs	r3, #5
    }
  }
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <CAN_Init>:
static volatile uint32_t err_int_cnt = 0;

static void CAN_ErrUpdate(uint8_t ch);

BOOL     CAN_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 80021d6:	2301      	movs	r3, #1
 80021d8:	603b      	str	r3, [r7, #0]

  for(int i=0; i<CAN_MAX_CH; i++)
 80021da:	2300      	movs	r3, #0
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	e070      	b.n	80022c2 <CAN_Init+0xf2>
  {
    can_tbl[i].is_init = TRUE;
 80021e0:	4a3c      	ldr	r2, [pc, #240]	; (80022d4 <CAN_Init+0x104>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f240 516c 	movw	r1, #1388	; 0x56c
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	2201      	movs	r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
    can_tbl[i].is_open = TRUE;
 80021f2:	4a38      	ldr	r2, [pc, #224]	; (80022d4 <CAN_Init+0x104>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f240 516c 	movw	r1, #1388	; 0x56c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]
    can_tbl[i].err_code = CAN_ERR_NONE;
 8002206:	4a33      	ldr	r2, [pc, #204]	; (80022d4 <CAN_Init+0x104>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f240 516c 	movw	r1, #1388	; 0x56c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3308      	adds	r3, #8
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
    can_tbl[i].state = 0;
 800221a:	4a2e      	ldr	r2, [pc, #184]	; (80022d4 <CAN_Init+0x104>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	330c      	adds	r3, #12
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
    can_tbl[i].recovery_cnt = 0;
 800222e:	4a29      	ldr	r2, [pc, #164]	; (80022d4 <CAN_Init+0x104>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f240 516c 	movw	r1, #1388	; 0x56c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3310      	adds	r3, #16
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]

    can_tbl[i].q_rx_full_cnt = 0;
 8002242:	4a24      	ldr	r2, [pc, #144]	; (80022d4 <CAN_Init+0x104>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f240 516c 	movw	r1, #1388	; 0x56c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	3314      	adds	r3, #20
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
    can_tbl[i].q_tx_full_cnt = 0;
 8002256:	4a1f      	ldr	r2, [pc, #124]	; (80022d4 <CAN_Init+0x104>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f240 516c 	movw	r1, #1388	; 0x56c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	3318      	adds	r3, #24
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_full_cnt = 0;
 800226a:	4a1a      	ldr	r2, [pc, #104]	; (80022d4 <CAN_Init+0x104>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	331c      	adds	r3, #28
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_lost_cnt = 0;
 800227e:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <CAN_Init+0x104>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f240 516c 	movw	r1, #1388	; 0x56c
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	4413      	add	r3, r2
 800228c:	3320      	adds	r3, #32
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]

    qbufferCreateBySize(&can_tbl[i].q_msg, (uint8_t *)&can_tbl[i].can_msg[0], sizeof(CAN_MSG_t), CAN_MSG_RX_BUF_MAX);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f240 526c 	movw	r2, #1388	; 0x56c
 8002298:	fb02 f303 	mul.w	r3, r2, r3
 800229c:	3398      	adds	r3, #152	; 0x98
 800229e:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <CAN_Init+0x104>)
 80022a0:	1898      	adds	r0, r3, r2
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f240 526c 	movw	r2, #1388	; 0x56c
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	33a8      	adds	r3, #168	; 0xa8
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <CAN_Init+0x104>)
 80022b0:	4413      	add	r3, r2
 80022b2:	1d19      	adds	r1, r3, #4
 80022b4:	2310      	movs	r3, #16
 80022b6:	224c      	movs	r2, #76	; 0x4c
 80022b8:	f00d fc0e 	bl	800fad8 <qbufferCreateBySize>
  for(int i=0; i<CAN_MAX_CH; i++)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3301      	adds	r3, #1
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	dd8b      	ble.n	80021e0 <CAN_Init+0x10>

  }
  return ret;
 80022c8:	683b      	ldr	r3, [r7, #0]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20004e58 	.word	0x20004e58

080022d8 <CAN_Open>:

BOOL     CAN_Open(uint8_t ch, CAN_MODE_t mode, CAN_FRAME_t frame, CAN_BAUD_t baud, CAN_BAUD_t baud_data)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b089      	sub	sp, #36	; 0x24
 80022dc:	af02      	add	r7, sp, #8
 80022de:	4604      	mov	r4, r0
 80022e0:	4608      	mov	r0, r1
 80022e2:	4611      	mov	r1, r2
 80022e4:	461a      	mov	r2, r3
 80022e6:	4623      	mov	r3, r4
 80022e8:	71fb      	strb	r3, [r7, #7]
 80022ea:	4603      	mov	r3, r0
 80022ec:	71bb      	strb	r3, [r7, #6]
 80022ee:	460b      	mov	r3, r1
 80022f0:	717b      	strb	r3, [r7, #5]
 80022f2:	4613      	mov	r3, r2
 80022f4:	713b      	strb	r3, [r7, #4]
  BOOL ret = TRUE;
 80022f6:	2301      	movs	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
  FDCAN_HandleTypeDef  *p_can;
  uint32_t tdc_offset;

  p_can = &can_tbl[ch].hfdcan;
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f240 526c 	movw	r2, #1388	; 0x56c
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	3330      	adds	r3, #48	; 0x30
 8002306:	4a90      	ldr	r2, [pc, #576]	; (8002548 <CAN_Open+0x270>)
 8002308:	4413      	add	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
  if(ch >= CAN_MAX_CH) return FALSE;
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <CAN_Open+0x3e>
 8002312:	2300      	movs	r3, #0
 8002314:	e114      	b.n	8002540 <CAN_Open+0x268>

  switch(ch)
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	f040 80a8 	bne.w	800246e <CAN_Open+0x196>
  {
    case _DEF_CAN1:
      p_can->Instance = FDCAN1;
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4a8a      	ldr	r2, [pc, #552]	; (800254c <CAN_Open+0x274>)
 8002322:	601a      	str	r2, [r3, #0]
      p_can->Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2200      	movs	r2, #0
 8002328:	605a      	str	r2, [r3, #4]
      p_can->Init.FrameFormat = frame_tbl[frame];
 800232a:	797b      	ldrb	r3, [r7, #5]
 800232c:	4a88      	ldr	r2, [pc, #544]	; (8002550 <CAN_Open+0x278>)
 800232e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	609a      	str	r2, [r3, #8]
      p_can->Init.Mode = mode_tbl[mode];
 8002336:	79bb      	ldrb	r3, [r7, #6]
 8002338:	4a86      	ldr	r2, [pc, #536]	; (8002554 <CAN_Open+0x27c>)
 800233a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	60da      	str	r2, [r3, #12]
      p_can->Init.AutoRetransmission = ENABLE;
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2201      	movs	r2, #1
 8002346:	741a      	strb	r2, [r3, #16]
      p_can->Init.TransmitPause = ENABLE;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	2201      	movs	r2, #1
 800234c:	745a      	strb	r2, [r3, #17]
      p_can->Init.ProtocolException = ENABLE;
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	2201      	movs	r2, #1
 8002352:	749a      	strb	r2, [r3, #18]
      p_can->Init.NominalPrescaler = p_baud_normal[baud].prescaler;
 8002354:	4b80      	ldr	r3, [pc, #512]	; (8002558 <CAN_Open+0x280>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	793b      	ldrb	r3, [r7, #4]
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	4413      	add	r3, r2
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	615a      	str	r2, [r3, #20]
      p_can->Init.NominalSyncJumpWidth = p_baud_normal[baud].sjw;
 8002364:	4b7c      	ldr	r3, [pc, #496]	; (8002558 <CAN_Open+0x280>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	793b      	ldrb	r3, [r7, #4]
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	4413      	add	r3, r2
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	619a      	str	r2, [r3, #24]
      p_can->Init.NominalTimeSeg1 = p_baud_normal[baud].tseg1;
 8002374:	4b78      	ldr	r3, [pc, #480]	; (8002558 <CAN_Open+0x280>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	793b      	ldrb	r3, [r7, #4]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4413      	add	r3, r2
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	61da      	str	r2, [r3, #28]
      p_can->Init.NominalTimeSeg2 = p_baud_normal[baud].tseg2;
 8002384:	4b74      	ldr	r3, [pc, #464]	; (8002558 <CAN_Open+0x280>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	793b      	ldrb	r3, [r7, #4]
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	4413      	add	r3, r2
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	621a      	str	r2, [r3, #32]
      p_can->Init.DataPrescaler = p_baud_data[baud_data].prescaler;
 8002394:	4b71      	ldr	r3, [pc, #452]	; (800255c <CAN_Open+0x284>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	4413      	add	r3, r2
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
      p_can->Init.DataSyncJumpWidth = p_baud_data[baud_data].sjw;
 80023a6:	4b6d      	ldr	r3, [pc, #436]	; (800255c <CAN_Open+0x284>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	4413      	add	r3, r2
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
      p_can->Init.DataTimeSeg1 = p_baud_data[baud_data].tseg1;
 80023b8:	4b68      	ldr	r3, [pc, #416]	; (800255c <CAN_Open+0x284>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	4413      	add	r3, r2
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	62da      	str	r2, [r3, #44]	; 0x2c
      p_can->Init.DataTimeSeg2 = p_baud_data[baud_data].tseg2;
 80023ca:	4b64      	ldr	r3, [pc, #400]	; (800255c <CAN_Open+0x284>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	4413      	add	r3, r2
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
      p_can->Init.StdFiltersNbr = 28;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	221c      	movs	r2, #28
 80023e0:	635a      	str	r2, [r3, #52]	; 0x34
      p_can->Init.ExtFiltersNbr = 8;
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2208      	movs	r2, #8
 80023e6:	639a      	str	r2, [r3, #56]	; 0x38
      p_can->Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION; //FIFO MODE
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	2200      	movs	r2, #0
 80023ec:	63da      	str	r2, [r3, #60]	; 0x3c
      can_tbl[ch].mode                  = mode;
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	4a55      	ldr	r2, [pc, #340]	; (8002548 <CAN_Open+0x270>)
 80023f2:	f240 516c 	movw	r1, #1388	; 0x56c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	332c      	adds	r3, #44	; 0x2c
 80023fe:	79ba      	ldrb	r2, [r7, #6]
 8002400:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].frame                 = frame;
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	4a50      	ldr	r2, [pc, #320]	; (8002548 <CAN_Open+0x270>)
 8002406:	f240 516c 	movw	r1, #1388	; 0x56c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	332d      	adds	r3, #45	; 0x2d
 8002412:	797a      	ldrb	r2, [r7, #5]
 8002414:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud                  = baud;
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	4a4b      	ldr	r2, [pc, #300]	; (8002548 <CAN_Open+0x270>)
 800241a:	f240 516c 	movw	r1, #1388	; 0x56c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	332e      	adds	r3, #46	; 0x2e
 8002426:	793a      	ldrb	r2, [r7, #4]
 8002428:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud_data             = baud_data;
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	4a46      	ldr	r2, [pc, #280]	; (8002548 <CAN_Open+0x270>)
 800242e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	332f      	adds	r3, #47	; 0x2f
 800243a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800243e:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].fifo_idx              = FDCAN_RX_FIFO0;
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	4a41      	ldr	r2, [pc, #260]	; (8002548 <CAN_Open+0x270>)
 8002444:	f240 516c 	movw	r1, #1388	; 0x56c
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	3324      	adds	r3, #36	; 0x24
 8002450:	2240      	movs	r2, #64	; 0x40
 8002452:	601a      	str	r2, [r3, #0]
      can_tbl[ch].enable_int            = FDCAN_IT_LIST_RX_FIFO0 |
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	4a3c      	ldr	r2, [pc, #240]	; (8002548 <CAN_Open+0x270>)
 8002458:	f240 516c 	movw	r1, #1388	; 0x56c
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	4413      	add	r3, r2
 8002462:	3328      	adds	r3, #40	; 0x28
 8002464:	4a3e      	ldr	r2, [pc, #248]	; (8002560 <CAN_Open+0x288>)
 8002466:	601a      	str	r2, [r3, #0]
                                          FDCAN_IT_BUS_OFF |
                                          FDCAN_IT_ERROR_WARNING |
                                          FDCAN_IT_ERROR_PASSIVE;

      ret = TRUE;
 8002468:	2301      	movs	r3, #1
 800246a:	617b      	str	r3, [r7, #20]

      break;
 800246c:	bf00      	nop
  }

  if(ret != TRUE)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d001      	beq.n	8002478 <CAN_Open+0x1a0>
  {
    return FALSE;
 8002474:	2300      	movs	r3, #0
 8002476:	e063      	b.n	8002540 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_Init(p_can) != HAL_OK)
 8002478:	6938      	ldr	r0, [r7, #16]
 800247a:	f003 fac7 	bl	8005a0c <HAL_FDCAN_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <CAN_Open+0x1b0>
  {
    return FALSE;
 8002484:	2300      	movs	r3, #0
 8002486:	e05b      	b.n	8002540 <CAN_Open+0x268>
  }

  CAN_ConfigFilter(ch, 0, CAN_STD, 0x0000, 0x0000);
 8002488:	79f8      	ldrb	r0, [r7, #7]
 800248a:	2300      	movs	r3, #0
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2300      	movs	r3, #0
 8002490:	2200      	movs	r2, #0
 8002492:	2100      	movs	r1, #0
 8002494:	f000 f866 	bl	8002564 <CAN_ConfigFilter>
  CAN_ConfigFilter(ch, 0, CAN_EXT, 0x0000, 0x0000);
 8002498:	79f8      	ldrb	r0, [r7, #7]
 800249a:	2300      	movs	r3, #0
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2300      	movs	r3, #0
 80024a0:	2201      	movs	r2, #1
 80024a2:	2100      	movs	r1, #0
 80024a4:	f000 f85e 	bl	8002564 <CAN_ConfigFilter>

  if (HAL_FDCAN_ConfigGlobalFilter(p_can, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80024a8:	2300      	movs	r3, #0
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	2300      	movs	r3, #0
 80024ae:	2202      	movs	r2, #2
 80024b0:	2102      	movs	r1, #2
 80024b2:	6938      	ldr	r0, [r7, #16]
 80024b4:	f003 fc5e 	bl	8005d74 <HAL_FDCAN_ConfigGlobalFilter>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <CAN_Open+0x1ea>
  {
    return FALSE;
 80024be:	2300      	movs	r3, #0
 80024c0:	e03e      	b.n	8002540 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_ActivateNotification(p_can, can_tbl[ch].enable_int, 0) != HAL_OK)
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	4a20      	ldr	r2, [pc, #128]	; (8002548 <CAN_Open+0x270>)
 80024c6:	f240 516c 	movw	r1, #1388	; 0x56c
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	3328      	adds	r3, #40	; 0x28
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2200      	movs	r2, #0
 80024d6:	4619      	mov	r1, r3
 80024d8:	6938      	ldr	r0, [r7, #16]
 80024da:	f003 ff2a 	bl	8006332 <HAL_FDCAN_ActivateNotification>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <CAN_Open+0x210>
  {
    return FALSE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e02b      	b.n	8002540 <CAN_Open+0x268>
  }


  tdc_offset = p_can->Init.DataPrescaler * p_can->Init.DataTimeSeg1;
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024f0:	fb02 f303 	mul.w	r3, r2, r3
 80024f4:	60fb      	str	r3, [r7, #12]

  if (HAL_FDCAN_ConfigTxDelayCompensation(p_can, tdc_offset, 0) != HAL_OK) return FALSE;
 80024f6:	2200      	movs	r2, #0
 80024f8:	68f9      	ldr	r1, [r7, #12]
 80024fa:	6938      	ldr	r0, [r7, #16]
 80024fc:	f003 fc6b 	bl	8005dd6 <HAL_FDCAN_ConfigTxDelayCompensation>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <CAN_Open+0x232>
 8002506:	2300      	movs	r3, #0
 8002508:	e01a      	b.n	8002540 <CAN_Open+0x268>
  if (HAL_FDCAN_EnableTxDelayCompensation(p_can) != HAL_OK)                return FALSE;
 800250a:	6938      	ldr	r0, [r7, #16]
 800250c:	f003 fc85 	bl	8005e1a <HAL_FDCAN_EnableTxDelayCompensation>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <CAN_Open+0x242>
 8002516:	2300      	movs	r3, #0
 8002518:	e012      	b.n	8002540 <CAN_Open+0x268>

  if (HAL_FDCAN_Start(p_can) != HAL_OK)
 800251a:	6938      	ldr	r0, [r7, #16]
 800251c:	f003 fc9e 	bl	8005e5c <HAL_FDCAN_Start>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <CAN_Open+0x252>
  {
    return FALSE;
 8002526:	2300      	movs	r3, #0
 8002528:	e00a      	b.n	8002540 <CAN_Open+0x268>
  }

  can_tbl[ch].is_open = TRUE;
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	4a06      	ldr	r2, [pc, #24]	; (8002548 <CAN_Open+0x270>)
 800252e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3304      	adds	r3, #4
 800253a:	2201      	movs	r2, #1
 800253c:	601a      	str	r2, [r3, #0]

  return ret;
 800253e:	697b      	ldr	r3, [r7, #20]
}
 8002540:	4618      	mov	r0, r3
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	bd90      	pop	{r4, r7, pc}
 8002548:	20004e58 	.word	0x20004e58
 800254c:	4000a400 	.word	0x4000a400
 8002550:	08026f60 	.word	0x08026f60
 8002554:	08026f6c 	.word	0x08026f6c
 8002558:	20000018 	.word	0x20000018
 800255c:	2000001c 	.word	0x2000001c
 8002560:	000e0007 	.word	0x000e0007

08002564 <CAN_ConfigFilter>:
void     CAN_Close(uint8_t ch)
{

}
BOOL     CAN_ConfigFilter(uint8_t ch, uint8_t index, CAN_ID_TYPE_t id_type, uint32_t id, uint32_t id_mask)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	4603      	mov	r3, r0
 800256e:	71fb      	strb	r3, [r7, #7]
 8002570:	460b      	mov	r3, r1
 8002572:	71bb      	strb	r3, [r7, #6]
 8002574:	4613      	mov	r3, r2
 8002576:	717b      	strb	r3, [r7, #5]
  BOOL ret = FALSE;
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24

  FDCAN_FilterTypeDef sFilterConfig;

  if (ch >= CAN_MAX_CH) return FALSE;
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <CAN_ConfigFilter+0x22>
 8002582:	2300      	movs	r3, #0
 8002584:	e034      	b.n	80025f0 <CAN_ConfigFilter+0x8c>


  if (id_type == CAN_STD)
 8002586:	797b      	ldrb	r3, [r7, #5]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <CAN_ConfigFilter+0x2e>
  {
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	e002      	b.n	8002598 <CAN_ConfigFilter+0x34>
  }
  else
  {
    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8002592:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002596:	60fb      	str	r3, [r7, #12]
  }

  if (can_tbl[ch].fifo_idx == FDCAN_RX_FIFO0)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	4a17      	ldr	r2, [pc, #92]	; (80025f8 <CAN_ConfigFilter+0x94>)
 800259c:	f240 516c 	movw	r1, #1388	; 0x56c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3324      	adds	r3, #36	; 0x24
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b40      	cmp	r3, #64	; 0x40
 80025ac:	d102      	bne.n	80025b4 <CAN_ConfigFilter+0x50>
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO0;
 80025ae:	2301      	movs	r3, #1
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	e001      	b.n	80025b8 <CAN_ConfigFilter+0x54>
  }
  else
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO1;
 80025b4:	2302      	movs	r3, #2
 80025b6:	61bb      	str	r3, [r7, #24]
  }

  sFilterConfig.FilterIndex   = index;
 80025b8:	79bb      	ldrb	r3, [r7, #6]
 80025ba:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterType    = FDCAN_FILTER_MASK; //Classic filter
 80025bc:	2302      	movs	r3, #2
 80025be:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterID1     = id;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterID2     = id_mask;
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	623b      	str	r3, [r7, #32]


  if (HAL_FDCAN_ConfigFilter(&can_tbl[ch].hfdcan, &sFilterConfig) == HAL_OK)
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	f240 526c 	movw	r2, #1388	; 0x56c
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	3330      	adds	r3, #48	; 0x30
 80025d4:	4a08      	ldr	r2, [pc, #32]	; (80025f8 <CAN_ConfigFilter+0x94>)
 80025d6:	4413      	add	r3, r2
 80025d8:	f107 020c 	add.w	r2, r7, #12
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f003 fb6e 	bl	8005cc0 <HAL_FDCAN_ConfigFilter>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <CAN_ConfigFilter+0x8a>
  {
    ret = TRUE;
 80025ea:	2301      	movs	r3, #1
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3728      	adds	r7, #40	; 0x28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20004e58 	.word	0x20004e58

080025fc <CAN_MsgAvailable>:

uint32_t CAN_MsgAvailable(uint8_t ch)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return 0;
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d901      	bls.n	8002610 <CAN_MsgAvailable+0x14>
 800260c:	2300      	movs	r3, #0
 800260e:	e00b      	b.n	8002628 <CAN_MsgAvailable+0x2c>

  return qbufferAvailable(&can_tbl[ch].q_msg);
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	f240 526c 	movw	r2, #1388	; 0x56c
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	3398      	adds	r3, #152	; 0x98
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <CAN_MsgAvailable+0x34>)
 800261e:	4413      	add	r3, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f00d fb3c 	bl	800fc9e <qbufferAvailable>
 8002626:	4603      	mov	r3, r0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20004e58 	.word	0x20004e58

08002634 <CAN_MsgWrite>:
  p_msg->length  = dlc_len_tbl[dlc];
  return TRUE;
}

BOOL     CAN_MsgWrite(uint8_t ch, CAN_MSG_t *p_msg, uint32_t timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b090      	sub	sp, #64	; 0x40
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	73fb      	strb	r3, [r7, #15]
  {
    FDCAN_HandleTypeDef  *p_can;
    FDCAN_TxHeaderTypeDef tx_header;
    uint32_t pre_time;
    BOOL ret = TRUE;
 8002642:	2301      	movs	r3, #1
 8002644:	63fb      	str	r3, [r7, #60]	; 0x3c


    if(ch > CAN_MAX_CH) return FALSE;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d901      	bls.n	8002650 <CAN_MsgWrite+0x1c>
 800264c:	2300      	movs	r3, #0
 800264e:	e083      	b.n	8002758 <CAN_MsgWrite+0x124>

    if (can_tbl[ch].err_code & CAN_ERR_BUS_OFF) return FALSE;
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	4a43      	ldr	r2, [pc, #268]	; (8002760 <CAN_MsgWrite+0x12c>)
 8002654:	f240 516c 	movw	r1, #1388	; 0x56c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	3308      	adds	r3, #8
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <CAN_MsgWrite+0x3a>
 800266a:	2300      	movs	r3, #0
 800266c:	e074      	b.n	8002758 <CAN_MsgWrite+0x124>


    p_can = &can_tbl[ch].hfdcan;
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	f240 526c 	movw	r2, #1388	; 0x56c
 8002674:	fb02 f303 	mul.w	r3, r2, r3
 8002678:	3330      	adds	r3, #48	; 0x30
 800267a:	4a39      	ldr	r2, [pc, #228]	; (8002760 <CAN_MsgWrite+0x12c>)
 800267c:	4413      	add	r3, r2
 800267e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch(p_msg->id_type)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <CAN_MsgWrite+0x5c>
 800268a:	2b01      	cmp	r3, #1
 800268c:	d003      	beq.n	8002696 <CAN_MsgWrite+0x62>
 800268e:	e006      	b.n	800269e <CAN_MsgWrite+0x6a>
    {
      case CAN_STD :
        tx_header.IdType = FDCAN_STANDARD_ID;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
        break;
 8002694:	e003      	b.n	800269e <CAN_MsgWrite+0x6a>

      case CAN_EXT :
        tx_header.IdType = FDCAN_EXTENDED_ID;
 8002696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800269a:	617b      	str	r3, [r7, #20]
        break;
 800269c:	bf00      	nop
    }

    switch(p_msg->frame)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d011      	beq.n	80026cc <CAN_MsgWrite+0x98>
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	dc16      	bgt.n	80026da <CAN_MsgWrite+0xa6>
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <CAN_MsgWrite+0x82>
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d005      	beq.n	80026c0 <CAN_MsgWrite+0x8c>
 80026b4:	e011      	b.n	80026da <CAN_MsgWrite+0xa6>
    {
      case CAN_CLASSIC:
        tx_header.FDFormat      = FDCAN_CLASSIC_CAN;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80026ba:	2300      	movs	r3, #0
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80026be:	e00c      	b.n	80026da <CAN_MsgWrite+0xa6>

      case CAN_FD_NO_BRS:
        tx_header.FDFormat      = FDCAN_FD_CAN;
 80026c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80026c6:	2300      	movs	r3, #0
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80026ca:	e006      	b.n	80026da <CAN_MsgWrite+0xa6>

      case CAN_FD_BRS:
        tx_header.FDFormat      = FDCAN_FD_CAN;
 80026cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_ON;
 80026d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80026d8:	bf00      	nop
    }

    tx_header.Identifier          = p_msg->id;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	613b      	str	r3, [r7, #16]
    tx_header.MessageMarker       = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
    tx_header.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 80026e4:	2300      	movs	r3, #0
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	623b      	str	r3, [r7, #32]
    tx_header.TxFrameType         = FDCAN_DATA_FRAME;
 80026ec:	2300      	movs	r3, #0
 80026ee:	61bb      	str	r3, [r7, #24]
    tx_header.DataLength          = dlc_tbl[p_msg->dlc];
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80026f6:	461a      	mov	r2, r3
 80026f8:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <CAN_MsgWrite+0x130>)
 80026fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fe:	61fb      	str	r3, [r7, #28]


    if (HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8002700:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002702:	f003 fe04 	bl	800630e <HAL_FDCAN_GetTxFifoFreeLevel>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <CAN_MsgWrite+0xdc>
    {
      return FALSE;
 800270c:	2300      	movs	r3, #0
 800270e:	e023      	b.n	8002758 <CAN_MsgWrite+0x124>
    }


    pre_time = HAL_GetTick();
 8002710:	f001 fb7a 	bl	8003e08 <HAL_GetTick>
 8002714:	6378      	str	r0, [r7, #52]	; 0x34
    if(HAL_FDCAN_AddMessageToTxFifoQ(p_can, &tx_header, p_msg->data) == HAL_OK)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	1d9a      	adds	r2, r3, #6
 800271a:	f107 0310 	add.w	r3, r7, #16
 800271e:	4619      	mov	r1, r3
 8002720:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002722:	f003 fc33 	bl	8005f8c <HAL_FDCAN_AddMessageToTxFifoQ>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d112      	bne.n	8002752 <CAN_MsgWrite+0x11e>
    {
      /* Wait transmission complete */
      while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 800272c:	e00a      	b.n	8002744 <CAN_MsgWrite+0x110>
      {
        if (HAL_GetTick()-pre_time >= timeout)
 800272e:	f001 fb6b 	bl	8003e08 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	429a      	cmp	r2, r3
 800273c:	d802      	bhi.n	8002744 <CAN_MsgWrite+0x110>
        {
          ret = FALSE;
 800273e:	2300      	movs	r3, #0
 8002740:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002742:	e008      	b.n	8002756 <CAN_MsgWrite+0x122>
      while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8002744:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002746:	f003 fde2 	bl	800630e <HAL_FDCAN_GetTxFifoFreeLevel>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0ee      	beq.n	800272e <CAN_MsgWrite+0xfa>
 8002750:	e001      	b.n	8002756 <CAN_MsgWrite+0x122>
        }
      }
    }
    else
    {
      ret = FALSE;
 8002752:	2300      	movs	r3, #0
 8002754:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    return ret;
 8002756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  }
}
 8002758:	4618      	mov	r0, r3
 800275a:	3740      	adds	r7, #64	; 0x40
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20004e58 	.word	0x20004e58
 8002764:	08026f20 	.word	0x08026f20

08002768 <CAN_MsgRead>:
BOOL     CAN_MsgRead(uint8_t ch, CAN_MSG_t *p_msg)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	6039      	str	r1, [r7, #0]
 8002772:	71fb      	strb	r3, [r7, #7]
  BOOL ret = TRUE;
 8002774:	2301      	movs	r3, #1
 8002776:	60fb      	str	r3, [r7, #12]

  if(ch > CAN_MAX_CH) return 0;
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d901      	bls.n	8002782 <CAN_MsgRead+0x1a>
 800277e:	2300      	movs	r3, #0
 8002780:	e00e      	b.n	80027a0 <CAN_MsgRead+0x38>

  ret = qbufferRead(&can_tbl[ch].q_msg, (uint8_t *)p_msg, 1);
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	f240 526c 	movw	r2, #1388	; 0x56c
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	3398      	adds	r3, #152	; 0x98
 800278e:	4a06      	ldr	r2, [pc, #24]	; (80027a8 <CAN_MsgRead+0x40>)
 8002790:	4413      	add	r3, r2
 8002792:	2201      	movs	r2, #1
 8002794:	6839      	ldr	r1, [r7, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f00d fa16 	bl	800fbc8 <qbufferRead>
 800279c:	60f8      	str	r0, [r7, #12]

  return ret;
 800279e:	68fb      	ldr	r3, [r7, #12]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20004e58 	.word	0x20004e58

080027ac <CAN_GetRxErrCount>:

uint16_t CAN_GetRxErrCount(uint8_t ch)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d901      	bls.n	80027c4 <CAN_GetRxErrCount+0x18>
 80027c0:	2300      	movs	r3, #0
 80027c2:	e015      	b.n	80027f0 <CAN_GetRxErrCount+0x44>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	f240 526c 	movw	r2, #1388	; 0x56c
 80027ca:	fb02 f303 	mul.w	r3, r2, r3
 80027ce:	3330      	adds	r3, #48	; 0x30
 80027d0:	4a09      	ldr	r2, [pc, #36]	; (80027f8 <CAN_GetRxErrCount+0x4c>)
 80027d2:	4413      	add	r3, r2
 80027d4:	f107 020c 	add.w	r2, r7, #12
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f003 fd72 	bl	80062c4 <HAL_FDCAN_GetErrorCounters>
 80027e0:	4603      	mov	r3, r0
 80027e2:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 80027e4:	7f7b      	ldrb	r3, [r7, #29]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <CAN_GetRxErrCount+0x42>
  {
    ret = error_counters.RxErrorCnt;
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 80027ee:	8bfb      	ldrh	r3, [r7, #30]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3720      	adds	r7, #32
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20004e58 	.word	0x20004e58

080027fc <CAN_GetTxErrCount>:
uint16_t CAN_GetTxErrCount(uint8_t ch)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d901      	bls.n	8002814 <CAN_GetTxErrCount+0x18>
 8002810:	2300      	movs	r3, #0
 8002812:	e015      	b.n	8002840 <CAN_GetTxErrCount+0x44>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	f240 526c 	movw	r2, #1388	; 0x56c
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	3330      	adds	r3, #48	; 0x30
 8002820:	4a09      	ldr	r2, [pc, #36]	; (8002848 <CAN_GetTxErrCount+0x4c>)
 8002822:	4413      	add	r3, r2
 8002824:	f107 020c 	add.w	r2, r7, #12
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f003 fd4a 	bl	80062c4 <HAL_FDCAN_GetErrorCounters>
 8002830:	4603      	mov	r3, r0
 8002832:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 8002834:	7f7b      	ldrb	r3, [r7, #29]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <CAN_GetTxErrCount+0x42>
  {
    ret = error_counters.TxErrorCnt;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 800283e:	8bfb      	ldrh	r3, [r7, #30]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20004e58 	.word	0x20004e58

0800284c <CAN_RxFifoCallback>:
  return HAL_FDCAN_GetState(&can_tbl[ch].hfdcan);
}


void CAN_RxFifoCallback(uint8_t ch, FDCAN_HandleTypeDef *hfdcan)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08e      	sub	sp, #56	; 0x38
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	6039      	str	r1, [r7, #0]
 8002856:	71fb      	strb	r3, [r7, #7]
  CAN_MSG_t *rx_buf;
  FDCAN_RxHeaderTypeDef rx_header;


  rx_buf  = (CAN_MSG_t *)qbufferPeekWrite(&can_tbl[ch].q_msg);
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	f240 526c 	movw	r2, #1388	; 0x56c
 800285e:	fb02 f303 	mul.w	r3, r2, r3
 8002862:	3398      	adds	r3, #152	; 0x98
 8002864:	4a4b      	ldr	r2, [pc, #300]	; (8002994 <CAN_RxFifoCallback+0x148>)
 8002866:	4413      	add	r3, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f00d fa05 	bl	800fc78 <qbufferPeekWrite>
 800286e:	6378      	str	r0, [r7, #52]	; 0x34

  if (HAL_FDCAN_GetRxMessage(hfdcan, can_tbl[ch].fifo_idx, &rx_header, rx_buf->data) == HAL_OK)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	4a48      	ldr	r2, [pc, #288]	; (8002994 <CAN_RxFifoCallback+0x148>)
 8002874:	f240 516c 	movw	r1, #1388	; 0x56c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	3324      	adds	r3, #36	; 0x24
 8002880:	6819      	ldr	r1, [r3, #0]
 8002882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002884:	3306      	adds	r3, #6
 8002886:	f107 020c 	add.w	r2, r7, #12
 800288a:	6838      	ldr	r0, [r7, #0]
 800288c:	f003 fbc2 	bl	8006014 <HAL_FDCAN_GetRxMessage>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d179      	bne.n	800298a <CAN_RxFifoCallback+0x13e>
  {
    if(rx_header.IdType == FDCAN_STANDARD_ID)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <CAN_RxFifoCallback+0x60>
    {
      rx_buf->id      = rx_header.Identifier;
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a0:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_STD;
 80028a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80028aa:	e006      	b.n	80028ba <CAN_RxFifoCallback+0x6e>
    }
    else
    {
      rx_buf->id      = rx_header.Identifier;
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b0:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_EXT;
 80028b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    }
    rx_buf->length = dlc_len_tbl[(rx_header.DataLength >> 16) & 0x0F];
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	4a35      	ldr	r2, [pc, #212]	; (8002998 <CAN_RxFifoCallback+0x14c>)
 80028c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028cc:	809a      	strh	r2, [r3, #4]


    if (rx_header.FDFormat == FDCAN_FD_CAN)
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028d4:	d10d      	bne.n	80028f2 <CAN_RxFifoCallback+0xa6>
    {
      if (rx_header.BitRateSwitch == FDCAN_BRS_ON)
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028dc:	d104      	bne.n	80028e8 <CAN_RxFifoCallback+0x9c>
      {
        rx_buf->frame = CAN_FD_BRS;
 80028de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e0:	2202      	movs	r2, #2
 80028e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80028e6:	e008      	b.n	80028fa <CAN_RxFifoCallback+0xae>
      }
      else
      {
        rx_buf->frame = CAN_FD_NO_BRS;
 80028e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80028f0:	e003      	b.n	80028fa <CAN_RxFifoCallback+0xae>
      }
    }
    else
    {
      rx_buf->frame = CAN_CLASSIC;
 80028f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    }

    if (qbufferWrite(&can_tbl[ch].q_msg, NULL, 1) != TRUE)
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	f240 526c 	movw	r2, #1388	; 0x56c
 8002900:	fb02 f303 	mul.w	r3, r2, r3
 8002904:	3398      	adds	r3, #152	; 0x98
 8002906:	4a23      	ldr	r2, [pc, #140]	; (8002994 <CAN_RxFifoCallback+0x148>)
 8002908:	4413      	add	r3, r2
 800290a:	2201      	movs	r2, #1
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f00d f901 	bl	800fb16 <qbufferWrite>
 8002914:	4603      	mov	r3, r0
 8002916:	2b01      	cmp	r3, #1
 8002918:	d011      	beq.n	800293e <CAN_RxFifoCallback+0xf2>
    {
      can_tbl[ch].q_rx_full_cnt++;
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	491d      	ldr	r1, [pc, #116]	; (8002994 <CAN_RxFifoCallback+0x148>)
 800291e:	f240 526c 	movw	r2, #1388	; 0x56c
 8002922:	fb03 f202 	mul.w	r2, r3, r2
 8002926:	440a      	add	r2, r1
 8002928:	3214      	adds	r2, #20
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	3201      	adds	r2, #1
 800292e:	4919      	ldr	r1, [pc, #100]	; (8002994 <CAN_RxFifoCallback+0x148>)
 8002930:	f240 506c 	movw	r0, #1388	; 0x56c
 8002934:	fb00 f303 	mul.w	r3, r0, r3
 8002938:	440b      	add	r3, r1
 800293a:	3314      	adds	r3, #20
 800293c:	601a      	str	r2, [r3, #0]
    }

    if( can_tbl[ch].handler != NULL )
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <CAN_RxFifoCallback+0x148>)
 8002942:	f240 516c 	movw	r1, #1388	; 0x56c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3394      	adds	r3, #148	; 0x94
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01a      	beq.n	800298a <CAN_RxFifoCallback+0x13e>
    {
      if ((*can_tbl[ch].handler)((void *)rx_buf) == TRUE)
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	4a0f      	ldr	r2, [pc, #60]	; (8002994 <CAN_RxFifoCallback+0x148>)
 8002958:	f240 516c 	movw	r1, #1388	; 0x56c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	3394      	adds	r3, #148	; 0x94
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002968:	4798      	blx	r3
 800296a:	4603      	mov	r3, r0
 800296c:	2b01      	cmp	r3, #1
 800296e:	d10c      	bne.n	800298a <CAN_RxFifoCallback+0x13e>
      {
        qbufferRead(&can_tbl[ch].q_msg, NULL, 1);
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	f240 526c 	movw	r2, #1388	; 0x56c
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	3398      	adds	r3, #152	; 0x98
 800297c:	4a05      	ldr	r2, [pc, #20]	; (8002994 <CAN_RxFifoCallback+0x148>)
 800297e:	4413      	add	r3, r2
 8002980:	2201      	movs	r2, #1
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f00d f91f 	bl	800fbc8 <qbufferRead>
      }
    }
  }
}
 800298a:	bf00      	nop
 800298c:	3738      	adds	r7, #56	; 0x38
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20004e58 	.word	0x20004e58
 8002998:	08026ee0 	.word	0x08026ee0

0800299c <CAN_Recovery>:

  can_tbl[ch].handler = NULL;
}

void CAN_Recovery(uint8_t ch)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return;
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d828      	bhi.n	80029fe <CAN_Recovery+0x62>

  HAL_FDCAN_Stop(&can_tbl[ch].hfdcan);
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	f240 526c 	movw	r2, #1388	; 0x56c
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	3330      	adds	r3, #48	; 0x30
 80029b8:	4a13      	ldr	r2, [pc, #76]	; (8002a08 <CAN_Recovery+0x6c>)
 80029ba:	4413      	add	r3, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f003 fa75 	bl	8005eac <HAL_FDCAN_Stop>
  HAL_FDCAN_Start(&can_tbl[ch].hfdcan);
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	f240 526c 	movw	r2, #1388	; 0x56c
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	3330      	adds	r3, #48	; 0x30
 80029ce:	4a0e      	ldr	r2, [pc, #56]	; (8002a08 <CAN_Recovery+0x6c>)
 80029d0:	4413      	add	r3, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f003 fa42 	bl	8005e5c <HAL_FDCAN_Start>

  can_tbl[ch].recovery_cnt++;
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	490b      	ldr	r1, [pc, #44]	; (8002a08 <CAN_Recovery+0x6c>)
 80029dc:	f240 526c 	movw	r2, #1388	; 0x56c
 80029e0:	fb03 f202 	mul.w	r2, r3, r2
 80029e4:	440a      	add	r2, r1
 80029e6:	3210      	adds	r2, #16
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	3201      	adds	r2, #1
 80029ec:	4906      	ldr	r1, [pc, #24]	; (8002a08 <CAN_Recovery+0x6c>)
 80029ee:	f240 506c 	movw	r0, #1388	; 0x56c
 80029f2:	fb00 f303 	mul.w	r3, r0, r3
 80029f6:	440b      	add	r3, r1
 80029f8:	3310      	adds	r3, #16
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e000      	b.n	8002a00 <CAN_Recovery+0x64>
  if(ch > CAN_MAX_CH) return;
 80029fe:	bf00      	nop
}
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20004e58 	.word	0x20004e58

08002a0c <CAN_Update>:

BOOL     CAN_Update(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
  BOOL ret = FALSE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
  CAN_TBL_t *p_can;

  for (int i=0; i<CAN_MAX_CH; i++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	e02f      	b.n	8002a7c <CAN_Update+0x70>
  {
    p_can = &can_tbl[i];
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f240 526c 	movw	r2, #1388	; 0x56c
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <CAN_Update+0x80>)
 8002a28:	4413      	add	r3, r2
 8002a2a:	607b      	str	r3, [r7, #4]


    switch(p_can->state)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	7b1b      	ldrb	r3, [r3, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <CAN_Update+0x2e>
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d011      	beq.n	8002a5c <CAN_Update+0x50>
 8002a38:	e01d      	b.n	8002a76 <CAN_Update+0x6a>
    {
      case 0:
        if (p_can->err_code & CAN_ERR_BUS_OFF)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d014      	beq.n	8002a70 <CAN_Update+0x64>
        {
          CAN_Recovery(i);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ffa6 	bl	800299c <CAN_Recovery>
          p_can->state = 1;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	731a      	strb	r2, [r3, #12]
          ret = TRUE;
 8002a56:	2301      	movs	r3, #1
 8002a58:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002a5a:	e009      	b.n	8002a70 <CAN_Update+0x64>

      case 1:
        if ((p_can->err_code & CAN_ERR_BUS_OFF) == 0)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d105      	bne.n	8002a74 <CAN_Update+0x68>
        {
          p_can->state = 0;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	731a      	strb	r2, [r3, #12]
        }
        break;
 8002a6e:	e001      	b.n	8002a74 <CAN_Update+0x68>
        break;
 8002a70:	bf00      	nop
 8002a72:	e000      	b.n	8002a76 <CAN_Update+0x6a>
        break;
 8002a74:	bf00      	nop
  for (int i=0; i<CAN_MAX_CH; i++)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	ddcc      	ble.n	8002a1c <CAN_Update+0x10>
    }
  }

  return ret;
 8002a82:	68fb      	ldr	r3, [r7, #12]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	20004e58 	.word	0x20004e58

08002a90 <CAN_ErrPrint>:

  can_tbl[ch].err_code = CAN_ERR_NONE;
}

void     CAN_ErrPrint(uint8_t ch)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  uint32_t err_code;


  if(ch > CAN_MAX_CH) return;
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d822      	bhi.n	8002ae6 <CAN_ErrPrint+0x56>

  err_code = can_tbl[ch].err_code;
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <CAN_ErrPrint+0x60>)
 8002aa4:	f240 516c 	movw	r1, #1388	; 0x56c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	3308      	adds	r3, #8
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60fb      	str	r3, [r7, #12]

  if (err_code & CAN_ERR_PASSIVE) UART_Printf("  ERR : CAN_ERR_PASSIVE\n");
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <CAN_ErrPrint+0x34>
 8002abe:	480d      	ldr	r0, [pc, #52]	; (8002af4 <CAN_ErrPrint+0x64>)
 8002ac0:	f001 f81c 	bl	8003afc <UART_Printf>
  if (err_code & CAN_ERR_WARNING) UART_Printf("  ERR : CAN_ERR_WARNING\n");
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <CAN_ErrPrint+0x44>
 8002ace:	480a      	ldr	r0, [pc, #40]	; (8002af8 <CAN_ErrPrint+0x68>)
 8002ad0:	f001 f814 	bl	8003afc <UART_Printf>
  if (err_code & CAN_ERR_BUS_OFF) UART_Printf("  ERR : CAN_ERR_BUS_OFF\n");
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d004      	beq.n	8002ae8 <CAN_ErrPrint+0x58>
 8002ade:	4807      	ldr	r0, [pc, #28]	; (8002afc <CAN_ErrPrint+0x6c>)
 8002ae0:	f001 f80c 	bl	8003afc <UART_Printf>
 8002ae4:	e000      	b.n	8002ae8 <CAN_ErrPrint+0x58>
  if(ch > CAN_MAX_CH) return;
 8002ae6:	bf00      	nop
}
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20004e58 	.word	0x20004e58
 8002af4:	08023524 	.word	0x08023524
 8002af8:	08023540 	.word	0x08023540
 8002afc:	0802355c 	.word	0x0802355c

08002b00 <CAN_ErrUpdate>:

void CAN_ErrUpdate(uint8_t ch)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08e      	sub	sp, #56	; 0x38
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
  FDCAN_ProtocolStatusTypeDef protocol_status;

  HAL_FDCAN_GetProtocolStatus(&can_tbl[ch].hfdcan, &protocol_status);
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	f240 526c 	movw	r2, #1388	; 0x56c
 8002b10:	fb02 f303 	mul.w	r3, r2, r3
 8002b14:	3330      	adds	r3, #48	; 0x30
 8002b16:	4a48      	ldr	r2, [pc, #288]	; (8002c38 <CAN_ErrUpdate+0x138>)
 8002b18:	4413      	add	r3, r2
 8002b1a:	f107 020c 	add.w	r2, r7, #12
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f003 fb7f 	bl	8006224 <HAL_FDCAN_GetProtocolStatus>

  if (protocol_status.ErrorPassive)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d014      	beq.n	8002b56 <CAN_ErrUpdate+0x56>
  {
    can_tbl[ch].err_code |= CAN_ERR_PASSIVE;
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	4a42      	ldr	r2, [pc, #264]	; (8002c38 <CAN_ErrUpdate+0x138>)
 8002b30:	f240 516c 	movw	r1, #1388	; 0x56c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3308      	adds	r3, #8
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	f042 0201 	orr.w	r2, r2, #1
 8002b44:	493c      	ldr	r1, [pc, #240]	; (8002c38 <CAN_ErrUpdate+0x138>)
 8002b46:	f240 506c 	movw	r0, #1388	; 0x56c
 8002b4a:	fb00 f303 	mul.w	r3, r0, r3
 8002b4e:	440b      	add	r3, r1
 8002b50:	3308      	adds	r3, #8
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	e013      	b.n	8002b7e <CAN_ErrUpdate+0x7e>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_PASSIVE;
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	4a37      	ldr	r2, [pc, #220]	; (8002c38 <CAN_ErrUpdate+0x138>)
 8002b5a:	f240 516c 	movw	r1, #1388	; 0x56c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	3308      	adds	r3, #8
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	4932      	ldr	r1, [pc, #200]	; (8002c38 <CAN_ErrUpdate+0x138>)
 8002b70:	f240 506c 	movw	r0, #1388	; 0x56c
 8002b74:	fb00 f303 	mul.w	r3, r0, r3
 8002b78:	440b      	add	r3, r1
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.Warning)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d014      	beq.n	8002bae <CAN_ErrUpdate+0xae>
  {
    can_tbl[ch].err_code |= CAN_ERR_WARNING;
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	4a2c      	ldr	r2, [pc, #176]	; (8002c38 <CAN_ErrUpdate+0x138>)
 8002b88:	f240 516c 	movw	r1, #1388	; 0x56c
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	3308      	adds	r3, #8
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	f042 0202 	orr.w	r2, r2, #2
 8002b9c:	4926      	ldr	r1, [pc, #152]	; (8002c38 <CAN_ErrUpdate+0x138>)
 8002b9e:	f240 506c 	movw	r0, #1388	; 0x56c
 8002ba2:	fb00 f303 	mul.w	r3, r0, r3
 8002ba6:	440b      	add	r3, r1
 8002ba8:	3308      	adds	r3, #8
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e013      	b.n	8002bd6 <CAN_ErrUpdate+0xd6>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_WARNING;
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	4a21      	ldr	r2, [pc, #132]	; (8002c38 <CAN_ErrUpdate+0x138>)
 8002bb2:	f240 516c 	movw	r1, #1388	; 0x56c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	3308      	adds	r3, #8
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f022 0202 	bic.w	r2, r2, #2
 8002bc6:	491c      	ldr	r1, [pc, #112]	; (8002c38 <CAN_ErrUpdate+0x138>)
 8002bc8:	f240 506c 	movw	r0, #1388	; 0x56c
 8002bcc:	fb00 f303 	mul.w	r3, r0, r3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3308      	adds	r3, #8
 8002bd4:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.BusOff)
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d014      	beq.n	8002c06 <CAN_ErrUpdate+0x106>
  {
    can_tbl[ch].err_code |= CAN_ERR_BUS_OFF;
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	4a16      	ldr	r2, [pc, #88]	; (8002c38 <CAN_ErrUpdate+0x138>)
 8002be0:	f240 516c 	movw	r1, #1388	; 0x56c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3308      	adds	r3, #8
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	f042 0204 	orr.w	r2, r2, #4
 8002bf4:	4910      	ldr	r1, [pc, #64]	; (8002c38 <CAN_ErrUpdate+0x138>)
 8002bf6:	f240 506c 	movw	r0, #1388	; 0x56c
 8002bfa:	fb00 f303 	mul.w	r3, r0, r3
 8002bfe:	440b      	add	r3, r1
 8002c00:	3308      	adds	r3, #8
 8002c02:	601a      	str	r2, [r3, #0]
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
  }
}
 8002c04:	e013      	b.n	8002c2e <CAN_ErrUpdate+0x12e>
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <CAN_ErrUpdate+0x138>)
 8002c0a:	f240 516c 	movw	r1, #1388	; 0x56c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	3308      	adds	r3, #8
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	f022 0204 	bic.w	r2, r2, #4
 8002c1e:	4906      	ldr	r1, [pc, #24]	; (8002c38 <CAN_ErrUpdate+0x138>)
 8002c20:	f240 506c 	movw	r0, #1388	; 0x56c
 8002c24:	fb00 f303 	mul.w	r3, r0, r3
 8002c28:	440b      	add	r3, r1
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	601a      	str	r2, [r3, #0]
}
 8002c2e:	bf00      	nop
 8002c30:	3738      	adds	r7, #56	; 0x38
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20004e58 	.word	0x20004e58

08002c3c <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint8_t ch = _DEF_CAN1;
 8002c46:	2300      	movs	r3, #0
 8002c48:	73fb      	strb	r3, [r7, #15]

  CAN_ErrUpdate(ch);
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff57 	bl	8002b00 <CAN_ErrUpdate>
}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_FDCAN_ErrorCallback>:
void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint8_t ch = _DEF_CAN1;
 8002c64:	2300      	movs	r3, #0
 8002c66:	73fb      	strb	r3, [r7, #15]

  err_int_cnt++;
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <HAL_FDCAN_ErrorCallback+0x54>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	4a10      	ldr	r2, [pc, #64]	; (8002cb0 <HAL_FDCAN_ErrorCallback+0x54>)
 8002c70:	6013      	str	r3, [r2, #0]

  if (hfdcan->ErrorCode > 0)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d013      	beq.n	8002ca2 <HAL_FDCAN_ErrorCallback+0x46>
  {
    can_tbl[ch].err_code |= CAN_ERR_ETC;
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <HAL_FDCAN_ErrorCallback+0x58>)
 8002c7e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	3308      	adds	r3, #8
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	f042 0210 	orr.w	r2, r2, #16
 8002c92:	4908      	ldr	r1, [pc, #32]	; (8002cb4 <HAL_FDCAN_ErrorCallback+0x58>)
 8002c94:	f240 506c 	movw	r0, #1388	; 0x56c
 8002c98:	fb00 f303 	mul.w	r3, r0, r3
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	601a      	str	r2, [r3, #0]
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	200053c4 	.word	0x200053c4
 8002cb4:	20004e58 	.word	0x20004e58

08002cb8 <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  HAL_FDCAN_IRQHandler(&can_tbl[_DEF_CAN1].hfdcan);
 8002cbc:	4802      	ldr	r0, [pc, #8]	; (8002cc8 <FDCAN1_IT0_IRQHandler+0x10>)
 8002cbe:	f003 fc1e 	bl	80064fe <HAL_FDCAN_IRQHandler>
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20004e88 	.word	0x20004e88

08002ccc <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_FDCAN_RxFifo0Callback+0x1c>
  {
    CAN_RxFifoCallback(_DEF_CAN1, hfdcan);
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7ff fdb2 	bl	800284c <CAN_RxFifoCallback>
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_FULL) != RESET)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <HAL_FDCAN_RxFifo0Callback+0x30>
  {
    can_tbl[_DEF_CAN1].fifo_full_cnt++;
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002cfa:	61d3      	str	r3, [r2, #28]
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_MESSAGE_LOST) != RESET)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <HAL_FDCAN_RxFifo0Callback+0x44>
  {
    can_tbl[_DEF_CAN1].fifo_lost_cnt++;
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	4a02      	ldr	r2, [pc, #8]	; (8002d18 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002d0e:	6213      	str	r3, [r2, #32]
  }
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20004e58 	.word	0x20004e58

08002d1c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b0cc      	sub	sp, #304	; 0x130
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d2a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d40:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d44:	4618      	mov	r0, r3
 8002d46:	f44f 7384 	mov.w	r3, #264	; 0x108
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	f01f fbcf 	bl	80224f0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a37      	ldr	r2, [pc, #220]	; (8002e3c <HAL_FDCAN_MspInit+0x120>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d166      	bne.n	8002e32 <HAL_FDCAN_MspInit+0x116>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d68:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0304 	mov.w	r3, #4
 8002d74:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002d7c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002d80:	2200      	movs	r2, #0
 8002d82:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d86:	f107 0310 	add.w	r3, r7, #16
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f005 fa34 	bl	80081f8 <HAL_RCCEx_PeriphCLKConfig>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_FDCAN_MspInit+0x7e>
    {
      Error_Handler();
 8002d96:	f7fd ff35 	bl	8000c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002d9a:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <HAL_FDCAN_MspInit+0x124>)
 8002d9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002da0:	4a27      	ldr	r2, [pc, #156]	; (8002e40 <HAL_FDCAN_MspInit+0x124>)
 8002da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002da6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8002daa:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <HAL_FDCAN_MspInit+0x124>)
 8002dac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002db0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8002db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002db8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002dc2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002dc6:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_FDCAN_MspInit+0x124>)
 8002dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dce:	4a1c      	ldr	r2, [pc, #112]	; (8002e40 <HAL_FDCAN_MspInit+0x124>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002dd8:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_FDCAN_MspInit+0x124>)
 8002dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dde:	f003 0201 	and.w	r2, r3, #1
 8002de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002de6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002df0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002df4:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002df6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002dfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002e10:	2309      	movs	r3, #9
 8002e12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e16:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4809      	ldr	r0, [pc, #36]	; (8002e44 <HAL_FDCAN_MspInit+0x128>)
 8002e1e:	f004 f873 	bl	8006f08 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	2105      	movs	r1, #5
 8002e26:	2027      	movs	r0, #39	; 0x27
 8002e28:	f001 f8ec 	bl	8004004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002e2c:	2027      	movs	r0, #39	; 0x27
 8002e2e:	f001 f903 	bl	8004038 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002e32:	bf00      	nop
 8002e34:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	4000a400 	.word	0x4000a400
 8002e40:	44020c00 	.word	0x44020c00
 8002e44:	42020000 	.word	0x42020000

08002e48 <CLI_FDCANTest>:
}

#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (CAN_TEST, "CAN", "CAN [1(INFO),2(READ),3(SEND)] [SEND ID]", CLI_FDCANTest)
static void CLI_FDCANTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b0a1      	sub	sp, #132	; 0x84
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
  BOOL ret = FALSE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (nCount == 2)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	f040 822b 	bne.w	80032b8 <CLI_FDCANTest+0x470>
  {
    switch(nFirst)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	f000 80d3 	beq.w	8003010 <CLI_FDCANTest+0x1c8>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	f200 8223 	bhi.w	80032b8 <CLI_FDCANTest+0x470>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d003      	beq.n	8002e80 <CLI_FDCANTest+0x38>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d062      	beq.n	8002f44 <CLI_FDCANTest+0xfc>
          }
        }
        ret = TRUE;
    }
  }
}
 8002e7e:	e21b      	b.n	80032b8 <CLI_FDCANTest+0x470>
        for (int i=0; i<CAN_MAX_CH; i++)
 8002e80:	2300      	movs	r3, #0
 8002e82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e84:	e057      	b.n	8002f36 <CLI_FDCANTest+0xee>
          DebugMsg(DEBUGMSG_CLI,"is_open       : %d\n", can_tbl[i].is_open);
 8002e86:	4b94      	ldr	r3, [pc, #592]	; (80030d8 <CLI_FDCANTest+0x290>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00c      	beq.n	8002ea8 <CLI_FDCANTest+0x60>
 8002e8e:	4a93      	ldr	r2, [pc, #588]	; (80030dc <CLI_FDCANTest+0x294>)
 8002e90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e92:	f240 516c 	movw	r1, #1388	; 0x56c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	488f      	ldr	r0, [pc, #572]	; (80030e0 <CLI_FDCANTest+0x298>)
 8002ea4:	f000 ff40 	bl	8003d28 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_rx_full_cnt : %d\n", can_tbl[i].q_rx_full_cnt);
 8002ea8:	4b8b      	ldr	r3, [pc, #556]	; (80030d8 <CLI_FDCANTest+0x290>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00c      	beq.n	8002eca <CLI_FDCANTest+0x82>
 8002eb0:	4a8a      	ldr	r2, [pc, #552]	; (80030dc <CLI_FDCANTest+0x294>)
 8002eb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eb4:	f240 516c 	movw	r1, #1388	; 0x56c
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3314      	adds	r3, #20
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4887      	ldr	r0, [pc, #540]	; (80030e4 <CLI_FDCANTest+0x29c>)
 8002ec6:	f000 ff2f 	bl	8003d28 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_tx_full_cnt : %d\n", can_tbl[i].q_tx_full_cnt);
 8002eca:	4b83      	ldr	r3, [pc, #524]	; (80030d8 <CLI_FDCANTest+0x290>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00c      	beq.n	8002eec <CLI_FDCANTest+0xa4>
 8002ed2:	4a82      	ldr	r2, [pc, #520]	; (80030dc <CLI_FDCANTest+0x294>)
 8002ed4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ed6:	f240 516c 	movw	r1, #1388	; 0x56c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3318      	adds	r3, #24
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4880      	ldr	r0, [pc, #512]	; (80030e8 <CLI_FDCANTest+0x2a0>)
 8002ee8:	f000 ff1e 	bl	8003d28 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_full_cnt : %d\n", can_tbl[i].fifo_full_cnt);
 8002eec:	4b7a      	ldr	r3, [pc, #488]	; (80030d8 <CLI_FDCANTest+0x290>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00c      	beq.n	8002f0e <CLI_FDCANTest+0xc6>
 8002ef4:	4a79      	ldr	r2, [pc, #484]	; (80030dc <CLI_FDCANTest+0x294>)
 8002ef6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ef8:	f240 516c 	movw	r1, #1388	; 0x56c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	331c      	adds	r3, #28
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4619      	mov	r1, r3
 8002f08:	4878      	ldr	r0, [pc, #480]	; (80030ec <CLI_FDCANTest+0x2a4>)
 8002f0a:	f000 ff0d 	bl	8003d28 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_lost_cnt : %d\n", can_tbl[i].fifo_lost_cnt);
 8002f0e:	4b72      	ldr	r3, [pc, #456]	; (80030d8 <CLI_FDCANTest+0x290>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00c      	beq.n	8002f30 <CLI_FDCANTest+0xe8>
 8002f16:	4a71      	ldr	r2, [pc, #452]	; (80030dc <CLI_FDCANTest+0x294>)
 8002f18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f1a:	f240 516c 	movw	r1, #1388	; 0x56c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	3320      	adds	r3, #32
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4871      	ldr	r0, [pc, #452]	; (80030f0 <CLI_FDCANTest+0x2a8>)
 8002f2c:	f000 fefc 	bl	8003d28 <svDebugMessage>
        for (int i=0; i<CAN_MAX_CH; i++)
 8002f30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f32:	3301      	adds	r3, #1
 8002f34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	dda4      	ble.n	8002e86 <CLI_FDCANTest+0x3e>
        ret = TRUE;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
        break;
 8002f40:	bf00      	nop
}
 8002f42:	e1b9      	b.n	80032b8 <CLI_FDCANTest+0x470>
        uint32_t index = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	67bb      	str	r3, [r7, #120]	; 0x78
        while(svCLI_KeepLoop())
 8002f48:	e05d      	b.n	8003006 <CLI_FDCANTest+0x1be>
          if (CAN_MsgAvailable(_DEF_CAN1))
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f7ff fb56 	bl	80025fc <CAN_MsgAvailable>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d057      	beq.n	8003006 <CLI_FDCANTest+0x1be>
            CAN_MsgRead(_DEF_CAN1, &msg);
 8002f56:	f107 0310 	add.w	r3, r7, #16
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7ff fc03 	bl	8002768 <CAN_MsgRead>
            index %= 1000;
 8002f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f64:	4a63      	ldr	r2, [pc, #396]	; (80030f4 <CLI_FDCANTest+0x2ac>)
 8002f66:	fba2 1203 	umull	r1, r2, r2, r3
 8002f6a:	0992      	lsrs	r2, r2, #6
 8002f6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f70:	fb01 f202 	mul.w	r2, r1, r2
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	67bb      	str	r3, [r7, #120]	; 0x78
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", index++);
 8002f78:	4b57      	ldr	r3, [pc, #348]	; (80030d8 <CLI_FDCANTest+0x290>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d006      	beq.n	8002f8e <CLI_FDCANTest+0x146>
 8002f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	67ba      	str	r2, [r7, #120]	; 0x78
 8002f86:	4619      	mov	r1, r3
 8002f88:	485b      	ldr	r0, [pc, #364]	; (80030f8 <CLI_FDCANTest+0x2b0>)
 8002f8a:	f000 fecd 	bl	8003d28 <svDebugMessage>
            if (msg.id_type == CAN_STD)
 8002f8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <CLI_FDCANTest+0x15e>
              DebugMsg(DEBUGMSG_CLI,"std ");
 8002f96:	4b50      	ldr	r3, [pc, #320]	; (80030d8 <CLI_FDCANTest+0x290>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <CLI_FDCANTest+0x16c>
 8002f9e:	4857      	ldr	r0, [pc, #348]	; (80030fc <CLI_FDCANTest+0x2b4>)
 8002fa0:	f000 fec2 	bl	8003d28 <svDebugMessage>
 8002fa4:	e006      	b.n	8002fb4 <CLI_FDCANTest+0x16c>
              DebugMsg(DEBUGMSG_CLI,"ext ");
 8002fa6:	4b4c      	ldr	r3, [pc, #304]	; (80030d8 <CLI_FDCANTest+0x290>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <CLI_FDCANTest+0x16c>
 8002fae:	4854      	ldr	r0, [pc, #336]	; (8003100 <CLI_FDCANTest+0x2b8>)
 8002fb0:	f000 feba 	bl	8003d28 <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 8002fb4:	4b48      	ldr	r3, [pc, #288]	; (80030d8 <CLI_FDCANTest+0x290>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <CLI_FDCANTest+0x180>
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	8aba      	ldrh	r2, [r7, #20]
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4850      	ldr	r0, [pc, #320]	; (8003104 <CLI_FDCANTest+0x2bc>)
 8002fc4:	f000 feb0 	bl	8003d28 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8002fc8:	2300      	movs	r3, #0
 8002fca:	677b      	str	r3, [r7, #116]	; 0x74
 8002fcc:	e00f      	b.n	8002fee <CLI_FDCANTest+0x1a6>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 8002fce:	4b42      	ldr	r3, [pc, #264]	; (80030d8 <CLI_FDCANTest+0x290>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <CLI_FDCANTest+0x1a0>
 8002fd6:	f107 0216 	add.w	r2, r7, #22
 8002fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fdc:	4413      	add	r3, r2
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4849      	ldr	r0, [pc, #292]	; (8003108 <CLI_FDCANTest+0x2c0>)
 8002fe4:	f000 fea0 	bl	8003d28 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8002fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fea:	3301      	adds	r3, #1
 8002fec:	677b      	str	r3, [r7, #116]	; 0x74
 8002fee:	8abb      	ldrh	r3, [r7, #20]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	dbea      	blt.n	8002fce <CLI_FDCANTest+0x186>
            DebugMsg(DEBUGMSG_CLI,"\n");
 8002ff8:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <CLI_FDCANTest+0x290>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <CLI_FDCANTest+0x1be>
 8003000:	4842      	ldr	r0, [pc, #264]	; (800310c <CLI_FDCANTest+0x2c4>)
 8003002:	f000 fe91 	bl	8003d28 <svDebugMessage>
        while(svCLI_KeepLoop())
 8003006:	f00c ff51 	bl	800feac <svCLI_KeepLoop>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d19c      	bne.n	8002f4a <CLI_FDCANTest+0x102>
        uint32_t num = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	66fb      	str	r3, [r7, #108]	; 0x6c
        err_code = can_tbl[_DEF_CAN1].err_code;
 8003014:	4b31      	ldr	r3, [pc, #196]	; (80030dc <CLI_FDCANTest+0x294>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	66bb      	str	r3, [r7, #104]	; 0x68
        while(svCLI_KeepLoop())
 800301a:	e145      	b.n	80032a8 <CLI_FDCANTest+0x460>
          if (HAL_GetTick()-pre_time >= 1000)
 800301c:	f000 fef4 	bl	8003e08 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800302a:	f0c0 80be 	bcc.w	80031aa <CLI_FDCANTest+0x362>
            pre_time = HAL_GetTick();
 800302e:	f000 feeb 	bl	8003e08 <HAL_GetTick>
 8003032:	6738      	str	r0, [r7, #112]	; 0x70
            msg.frame   = CAN_CLASSIC;
 8003034:	2300      	movs	r3, #0
 8003036:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            msg.id_type = CAN_EXT;
 800303a:	2301      	movs	r3, #1
 800303c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            msg.dlc     = CAN_DLC_2;
 8003040:	2302      	movs	r3, #2
 8003042:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            msg.id      = nAddress;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	613b      	str	r3, [r7, #16]
            msg.length  = 2;
 800304a:	2302      	movs	r3, #2
 800304c:	82bb      	strh	r3, [r7, #20]
            msg.data[0] = 1;
 800304e:	2301      	movs	r3, #1
 8003050:	75bb      	strb	r3, [r7, #22]
            msg.data[1] = 2;
 8003052:	2302      	movs	r3, #2
 8003054:	75fb      	strb	r3, [r7, #23]
            if (CAN_MsgWrite(_DEF_CAN1, &msg, 10) > 0)
 8003056:	f107 0310 	add.w	r3, r7, #16
 800305a:	220a      	movs	r2, #10
 800305c:	4619      	mov	r1, r3
 800305e:	2000      	movs	r0, #0
 8003060:	f7ff fae8 	bl	8002634 <CAN_MsgWrite>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d070      	beq.n	800314c <CLI_FDCANTest+0x304>
              index %= 1000;
 800306a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800306c:	4a21      	ldr	r2, [pc, #132]	; (80030f4 <CLI_FDCANTest+0x2ac>)
 800306e:	fba2 1203 	umull	r1, r2, r2, r3
 8003072:	0992      	lsrs	r2, r2, #6
 8003074:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003078:	fb01 f202 	mul.w	r2, r1, r2
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	67bb      	str	r3, [r7, #120]	; 0x78
              DebugMsg(DEBUGMSG_CLI,"%03d(T) -> id ", num++);
 8003080:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <CLI_FDCANTest+0x290>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <CLI_FDCANTest+0x24e>
 8003088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800308e:	4619      	mov	r1, r3
 8003090:	481f      	ldr	r0, [pc, #124]	; (8003110 <CLI_FDCANTest+0x2c8>)
 8003092:	f000 fe49 	bl	8003d28 <svDebugMessage>
              if (msg.id_type == CAN_STD)
 8003096:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800309a:	2b00      	cmp	r3, #0
 800309c:	d107      	bne.n	80030ae <CLI_FDCANTest+0x266>
                DebugMsg(DEBUGMSG_CLI,"std ");
 800309e:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <CLI_FDCANTest+0x290>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <CLI_FDCANTest+0x274>
 80030a6:	4815      	ldr	r0, [pc, #84]	; (80030fc <CLI_FDCANTest+0x2b4>)
 80030a8:	f000 fe3e 	bl	8003d28 <svDebugMessage>
 80030ac:	e006      	b.n	80030bc <CLI_FDCANTest+0x274>
                DebugMsg(DEBUGMSG_CLI,"ext ");
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <CLI_FDCANTest+0x290>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <CLI_FDCANTest+0x274>
 80030b6:	4812      	ldr	r0, [pc, #72]	; (8003100 <CLI_FDCANTest+0x2b8>)
 80030b8:	f000 fe36 	bl	8003d28 <svDebugMessage>
              DebugMsg(DEBUGMSG_CLI, ": 0x%08X, L:%02d, ", msg.id, msg.length);
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <CLI_FDCANTest+0x290>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <CLI_FDCANTest+0x288>
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	8aba      	ldrh	r2, [r7, #20]
 80030c8:	4619      	mov	r1, r3
 80030ca:	480e      	ldr	r0, [pc, #56]	; (8003104 <CLI_FDCANTest+0x2bc>)
 80030cc:	f000 fe2c 	bl	8003d28 <svDebugMessage>
              for (int i=0; i<msg.length; i++)
 80030d0:	2300      	movs	r3, #0
 80030d2:	667b      	str	r3, [r7, #100]	; 0x64
 80030d4:	e02e      	b.n	8003134 <CLI_FDCANTest+0x2ec>
 80030d6:	bf00      	nop
 80030d8:	2000003c 	.word	0x2000003c
 80030dc:	20004e58 	.word	0x20004e58
 80030e0:	080235a4 	.word	0x080235a4
 80030e4:	080235b8 	.word	0x080235b8
 80030e8:	080235cc 	.word	0x080235cc
 80030ec:	080235e0 	.word	0x080235e0
 80030f0:	080235f4 	.word	0x080235f4
 80030f4:	10624dd3 	.word	0x10624dd3
 80030f8:	08023608 	.word	0x08023608
 80030fc:	08023618 	.word	0x08023618
 8003100:	08023620 	.word	0x08023620
 8003104:	08023628 	.word	0x08023628
 8003108:	0802363c 	.word	0x0802363c
 800310c:	08023644 	.word	0x08023644
 8003110:	08023648 	.word	0x08023648
                DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 8003114:	4b6a      	ldr	r3, [pc, #424]	; (80032c0 <CLI_FDCANTest+0x478>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <CLI_FDCANTest+0x2e6>
 800311c:	f107 0216 	add.w	r2, r7, #22
 8003120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003122:	4413      	add	r3, r2
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	4619      	mov	r1, r3
 8003128:	4866      	ldr	r0, [pc, #408]	; (80032c4 <CLI_FDCANTest+0x47c>)
 800312a:	f000 fdfd 	bl	8003d28 <svDebugMessage>
              for (int i=0; i<msg.length; i++)
 800312e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003130:	3301      	adds	r3, #1
 8003132:	667b      	str	r3, [r7, #100]	; 0x64
 8003134:	8abb      	ldrh	r3, [r7, #20]
 8003136:	461a      	mov	r2, r3
 8003138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800313a:	4293      	cmp	r3, r2
 800313c:	dbea      	blt.n	8003114 <CLI_FDCANTest+0x2cc>
              DebugMsg(DEBUGMSG_CLI,"\n");
 800313e:	4b60      	ldr	r3, [pc, #384]	; (80032c0 <CLI_FDCANTest+0x478>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <CLI_FDCANTest+0x304>
 8003146:	4860      	ldr	r0, [pc, #384]	; (80032c8 <CLI_FDCANTest+0x480>)
 8003148:	f000 fdee 	bl	8003d28 <svDebugMessage>
            if (CAN_GetRxErrCount(_DEF_CAN1) > 0 || CAN_GetTxErrCount(_DEF_CAN1) > 0)
 800314c:	2000      	movs	r0, #0
 800314e:	f7ff fb2d 	bl	80027ac <CAN_GetRxErrCount>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <CLI_FDCANTest+0x31c>
 8003158:	2000      	movs	r0, #0
 800315a:	f7ff fb4f 	bl	80027fc <CAN_GetTxErrCount>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d011      	beq.n	8003188 <CLI_FDCANTest+0x340>
              DebugMsg(DEBUGMSG_CLI,"ErrCnt : %d, %d\n", CAN_GetRxErrCount(_DEF_CAN1), CAN_GetTxErrCount(_DEF_CAN1));
 8003164:	4b56      	ldr	r3, [pc, #344]	; (80032c0 <CLI_FDCANTest+0x478>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00d      	beq.n	8003188 <CLI_FDCANTest+0x340>
 800316c:	2000      	movs	r0, #0
 800316e:	f7ff fb1d 	bl	80027ac <CAN_GetRxErrCount>
 8003172:	4603      	mov	r3, r0
 8003174:	461c      	mov	r4, r3
 8003176:	2000      	movs	r0, #0
 8003178:	f7ff fb40 	bl	80027fc <CAN_GetTxErrCount>
 800317c:	4603      	mov	r3, r0
 800317e:	461a      	mov	r2, r3
 8003180:	4621      	mov	r1, r4
 8003182:	4852      	ldr	r0, [pc, #328]	; (80032cc <CLI_FDCANTest+0x484>)
 8003184:	f000 fdd0 	bl	8003d28 <svDebugMessage>
            if (err_int_cnt > 0)
 8003188:	4b51      	ldr	r3, [pc, #324]	; (80032d0 <CLI_FDCANTest+0x488>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00c      	beq.n	80031aa <CLI_FDCANTest+0x362>
              DebugMsg(DEBUGMSG_CLI,"Cnt : %d\n",err_int_cnt);
 8003190:	4b4b      	ldr	r3, [pc, #300]	; (80032c0 <CLI_FDCANTest+0x478>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <CLI_FDCANTest+0x35c>
 8003198:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <CLI_FDCANTest+0x488>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4619      	mov	r1, r3
 800319e:	484d      	ldr	r0, [pc, #308]	; (80032d4 <CLI_FDCANTest+0x48c>)
 80031a0:	f000 fdc2 	bl	8003d28 <svDebugMessage>
              err_int_cnt = 0;
 80031a4:	4b4a      	ldr	r3, [pc, #296]	; (80032d0 <CLI_FDCANTest+0x488>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
          if (can_tbl[_DEF_CAN1].err_code != err_code)
 80031aa:	4b4b      	ldr	r3, [pc, #300]	; (80032d8 <CLI_FDCANTest+0x490>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d00f      	beq.n	80031d4 <CLI_FDCANTest+0x38c>
            DebugMsg(DEBUGMSG_CLI, "ErrCode : 0x%X\n", can_tbl[_DEF_CAN1].err_code);
 80031b4:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <CLI_FDCANTest+0x478>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <CLI_FDCANTest+0x380>
 80031bc:	4b46      	ldr	r3, [pc, #280]	; (80032d8 <CLI_FDCANTest+0x490>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	4619      	mov	r1, r3
 80031c2:	4846      	ldr	r0, [pc, #280]	; (80032dc <CLI_FDCANTest+0x494>)
 80031c4:	f000 fdb0 	bl	8003d28 <svDebugMessage>
            CAN_ErrPrint(_DEF_CAN1);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7ff fc61 	bl	8002a90 <CAN_ErrPrint>
            err_code = can_tbl[_DEF_CAN1].err_code;
 80031ce:	4b42      	ldr	r3, [pc, #264]	; (80032d8 <CLI_FDCANTest+0x490>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	66bb      	str	r3, [r7, #104]	; 0x68
          if (CAN_Update())
 80031d4:	f7ff fc1a 	bl	8002a0c <CAN_Update>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d006      	beq.n	80031ec <CLI_FDCANTest+0x3a4>
            DebugMsg(DEBUGMSG_CLI,"BusOff Recovery\n");
 80031de:	4b38      	ldr	r3, [pc, #224]	; (80032c0 <CLI_FDCANTest+0x478>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <CLI_FDCANTest+0x3a4>
 80031e6:	483e      	ldr	r0, [pc, #248]	; (80032e0 <CLI_FDCANTest+0x498>)
 80031e8:	f000 fd9e 	bl	8003d28 <svDebugMessage>
          if (CAN_MsgAvailable(_DEF_CAN1))
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7ff fa05 	bl	80025fc <CAN_MsgAvailable>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d057      	beq.n	80032a8 <CLI_FDCANTest+0x460>
            CAN_MsgRead(_DEF_CAN1, &msg);
 80031f8:	f107 0310 	add.w	r3, r7, #16
 80031fc:	4619      	mov	r1, r3
 80031fe:	2000      	movs	r0, #0
 8003200:	f7ff fab2 	bl	8002768 <CAN_MsgRead>
            index %= 1000;
 8003204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003206:	4a37      	ldr	r2, [pc, #220]	; (80032e4 <CLI_FDCANTest+0x49c>)
 8003208:	fba2 1203 	umull	r1, r2, r2, r3
 800320c:	0992      	lsrs	r2, r2, #6
 800320e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003212:	fb01 f202 	mul.w	r2, r1, r2
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	67bb      	str	r3, [r7, #120]	; 0x78
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", num++);
 800321a:	4b29      	ldr	r3, [pc, #164]	; (80032c0 <CLI_FDCANTest+0x478>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d006      	beq.n	8003230 <CLI_FDCANTest+0x3e8>
 8003222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003228:	4619      	mov	r1, r3
 800322a:	482f      	ldr	r0, [pc, #188]	; (80032e8 <CLI_FDCANTest+0x4a0>)
 800322c:	f000 fd7c 	bl	8003d28 <svDebugMessage>
            if (msg.id_type == CAN_STD)
 8003230:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003234:	2b00      	cmp	r3, #0
 8003236:	d107      	bne.n	8003248 <CLI_FDCANTest+0x400>
              DebugMsg(DEBUGMSG_CLI, "std ");
 8003238:	4b21      	ldr	r3, [pc, #132]	; (80032c0 <CLI_FDCANTest+0x478>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <CLI_FDCANTest+0x40e>
 8003240:	482a      	ldr	r0, [pc, #168]	; (80032ec <CLI_FDCANTest+0x4a4>)
 8003242:	f000 fd71 	bl	8003d28 <svDebugMessage>
 8003246:	e006      	b.n	8003256 <CLI_FDCANTest+0x40e>
              DebugMsg(DEBUGMSG_CLI, "ext ");
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <CLI_FDCANTest+0x478>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <CLI_FDCANTest+0x40e>
 8003250:	4827      	ldr	r0, [pc, #156]	; (80032f0 <CLI_FDCANTest+0x4a8>)
 8003252:	f000 fd69 	bl	8003d28 <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 8003256:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <CLI_FDCANTest+0x478>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <CLI_FDCANTest+0x422>
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	8aba      	ldrh	r2, [r7, #20]
 8003262:	4619      	mov	r1, r3
 8003264:	4823      	ldr	r0, [pc, #140]	; (80032f4 <CLI_FDCANTest+0x4ac>)
 8003266:	f000 fd5f 	bl	8003d28 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 800326a:	2300      	movs	r3, #0
 800326c:	663b      	str	r3, [r7, #96]	; 0x60
 800326e:	e00f      	b.n	8003290 <CLI_FDCANTest+0x448>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 8003270:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <CLI_FDCANTest+0x478>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <CLI_FDCANTest+0x442>
 8003278:	f107 0216 	add.w	r2, r7, #22
 800327c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800327e:	4413      	add	r3, r2
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	4619      	mov	r1, r3
 8003284:	480f      	ldr	r0, [pc, #60]	; (80032c4 <CLI_FDCANTest+0x47c>)
 8003286:	f000 fd4f 	bl	8003d28 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 800328a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800328c:	3301      	adds	r3, #1
 800328e:	663b      	str	r3, [r7, #96]	; 0x60
 8003290:	8abb      	ldrh	r3, [r7, #20]
 8003292:	461a      	mov	r2, r3
 8003294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003296:	4293      	cmp	r3, r2
 8003298:	dbea      	blt.n	8003270 <CLI_FDCANTest+0x428>
            DebugMsg(DEBUGMSG_CLI,"\n");
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <CLI_FDCANTest+0x478>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <CLI_FDCANTest+0x460>
 80032a2:	4809      	ldr	r0, [pc, #36]	; (80032c8 <CLI_FDCANTest+0x480>)
 80032a4:	f000 fd40 	bl	8003d28 <svDebugMessage>
        while(svCLI_KeepLoop())
 80032a8:	f00c fe00 	bl	800feac <svCLI_KeepLoop>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f47f aeb4 	bne.w	800301c <CLI_FDCANTest+0x1d4>
        ret = TRUE;
 80032b4:	2301      	movs	r3, #1
 80032b6:	65fb      	str	r3, [r7, #92]	; 0x5c
}
 80032b8:	bf00      	nop
 80032ba:	3784      	adds	r7, #132	; 0x84
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd90      	pop	{r4, r7, pc}
 80032c0:	2000003c 	.word	0x2000003c
 80032c4:	0802363c 	.word	0x0802363c
 80032c8:	08023644 	.word	0x08023644
 80032cc:	08023658 	.word	0x08023658
 80032d0:	200053c4 	.word	0x200053c4
 80032d4:	0802366c 	.word	0x0802366c
 80032d8:	20004e58 	.word	0x20004e58
 80032dc:	08023678 	.word	0x08023678
 80032e0:	08023688 	.word	0x08023688
 80032e4:	10624dd3 	.word	0x10624dd3
 80032e8:	08023608 	.word	0x08023608
 80032ec:	08023618 	.word	0x08023618
 80032f0:	08023620 	.word	0x08023620
 80032f4:	08023628 	.word	0x08023628

080032f8 <Flash_Erase>:


  return ret;
}
BOOL Flash_Erase(uint32_t addr, uint32_t length)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08c      	sub	sp, #48	; 0x30
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  BOOL ret = FALSE;
 8003302:	2300      	movs	r3, #0
 8003304:	627b      	str	r3, [r7, #36]	; 0x24

  int32_t start_sector = -1;
 8003306:	f04f 33ff 	mov.w	r3, #4294967295
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t end_sector = -1;
 800330c:	f04f 33ff 	mov.w	r3, #4294967295
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_FLASH_Unlock();
 8003312:	f003 fbc3 	bl	8006a9c <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTCHANGEERR);
 8003316:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <Flash_Erase+0xb0>)
 8003318:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800331c:	631a      	str	r2, [r3, #48]	; 0x30

  start_sector = -1;
 800331e:	f04f 33ff 	mov.w	r3, #4294967295
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
  end_sector = -1;
 8003324:	f04f 33ff 	mov.w	r3, #4294967295
 8003328:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 800332a:	2300      	movs	r3, #0
 800332c:	623b      	str	r3, [r7, #32]
 800332e:	e013      	b.n	8003358 <Flash_Erase+0x60>
  {
    if(Flash_InSector(i, addr, length) == TRUE)
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	b29b      	uxth	r3, r3
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4618      	mov	r0, r3
 800333a:	f000 f837 	bl	80033ac <Flash_InSector>
 800333e:	4603      	mov	r3, r0
 8003340:	2b01      	cmp	r3, #1
 8003342:	d106      	bne.n	8003352 <Flash_Erase+0x5a>
    {
      if(start_sector < 0)
 8003344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003346:	2b00      	cmp	r3, #0
 8003348:	da01      	bge.n	800334e <Flash_Erase+0x56>
      {
        start_sector = i;
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      end_sector = i;
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	3301      	adds	r3, #1
 8003356:	623b      	str	r3, [r7, #32]
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	2b7f      	cmp	r3, #127	; 0x7f
 800335c:	dde8      	ble.n	8003330 <Flash_Erase+0x38>
    }
  }

  if(start_sector >= 0)
 800335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003360:	2b00      	cmp	r3, #0
 8003362:	db19      	blt.n	8003398 <Flash_Erase+0xa0>
    HAL_StatusTypeDef status;
    // TypeErase : Mass or Page Erase ,Banks :   Page/PageAddress:  Nbpages:
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t SectorError;
    //@ref FLASH_Type_Erase
    EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8003364:	2304      	movs	r3, #4
 8003366:	60fb      	str	r3, [r7, #12]
    //@ref FLASH_Banks  - FLASH_BANK_BOTH  , 1
    EraseInit.Banks = FLASH_BANK_BOTH;
 8003368:	2303      	movs	r3, #3
 800336a:	613b      	str	r3, [r7, #16]
    EraseInit.Sector = start_sector;    // sector 번호 OR sector address , 확인해야댐 (페이지 번호를 주거나, 지우는 주소를 주거나)
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	617b      	str	r3, [r7, #20]
    EraseInit.NbSectors = (end_sector - start_sector) + 1;     // 페이지 개수 (시작 페이지 부터 몇개의 페이지를 지울 것인가)
 8003370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	3301      	adds	r3, #1
 8003378:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 800337a:	f107 0208 	add.w	r2, r7, #8
 800337e:	f107 030c 	add.w	r3, r7, #12
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f003 fcbb 	bl	8006d00 <HAL_FLASHEx_Erase>
 800338a:	4603      	mov	r3, r0
 800338c:	77fb      	strb	r3, [r7, #31]

    if(status == HAL_OK)
 800338e:	7ffb      	ldrb	r3, [r7, #31]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <Flash_Erase+0xa0>
    {
      ret = TRUE;
 8003394:	2301      	movs	r3, #1
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  HAL_FLASH_Lock();
 8003398:	f003 fba6 	bl	8006ae8 <HAL_FLASH_Lock>
  return ret;
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3730      	adds	r7, #48	; 0x30
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40022000 	.word	0x40022000

080033ac <Flash_InSector>:
BOOL Flash_InSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b08b      	sub	sp, #44	; 0x2c
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	81fb      	strh	r3, [r7, #14]
  BOOL ret = FALSE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = FLASH_BASE + (sector_num * FLASH_SECTOR_SIZE);
 80033be:	89fb      	ldrh	r3, [r7, #14]
 80033c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80033c4:	035b      	lsls	r3, r3, #13
 80033c6:	623b      	str	r3, [r7, #32]
  sector_end   = sector_start + FLASH_SECTOR_SIZE - 1;
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80033ce:	331f      	adds	r3, #31
 80033d0:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4413      	add	r3, r2
 80033dc:	3b01      	subs	r3, #1
 80033de:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 80033e0:	6a3a      	ldr	r2, [r7, #32]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d305      	bcc.n	80033f4 <Flash_InSector+0x48>
 80033e8:	6a3a      	ldr	r2, [r7, #32]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d801      	bhi.n	80033f4 <Flash_InSector+0x48>
  {
    ret = TRUE;
 80033f0:	2301      	movs	r3, #1
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d305      	bcc.n	8003408 <Flash_InSector+0x5c>
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	429a      	cmp	r2, r3
 8003402:	d801      	bhi.n	8003408 <Flash_InSector+0x5c>
  {
    ret = TRUE;
 8003404:	2301      	movs	r3, #1
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	429a      	cmp	r2, r3
 800340e:	d305      	bcc.n	800341c <Flash_InSector+0x70>
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	429a      	cmp	r2, r3
 8003416:	d801      	bhi.n	800341c <Flash_InSector+0x70>
  {
    ret = TRUE;
 8003418:	2301      	movs	r3, #1
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	429a      	cmp	r2, r3
 8003422:	d305      	bcc.n	8003430 <Flash_InSector+0x84>
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	429a      	cmp	r2, r3
 800342a:	d801      	bhi.n	8003430 <Flash_InSector+0x84>
  {
    ret = TRUE;
 800342c:	2301      	movs	r3, #1
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003432:	4618      	mov	r0, r3
 8003434:	372c      	adds	r7, #44	; 0x2c
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <Flash_Write>:

BOOL Flash_Write(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b092      	sub	sp, #72	; 0x48
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800344a:	2301      	movs	r3, #1
 800344c:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t buf[32];
  uint32_t offset;
  HAL_StatusTypeDef status;

  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Unlock();
 800344e:	f003 fb25 	bl	8006a9c <HAL_FLASH_Unlock>

  index = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	643b      	str	r3, [r7, #64]	; 0x40
  offset = addr % FLASH_WRITE_SIZE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	63fb      	str	r3, [r7, #60]	; 0x3c


  if(offset != 0 || length < FLASH_WRITE_SIZE)
 800345e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d103      	bne.n	800346c <Flash_Write+0x2e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b0f      	cmp	r3, #15
 8003468:	f200 808e 	bhi.w	8003588 <Flash_Write+0x14a>
  {
    write_addr = addr - offset;
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 8003474:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003476:	f107 0310 	add.w	r3, r7, #16
 800347a:	2210      	movs	r2, #16
 800347c:	4618      	mov	r0, r3
 800347e:	f01f f8d0 	bl	8022622 <memcpy>
    memcpy(&buf[offset], &p_data[0], constrain(FLASH_WRITE_SIZE-offset, 0, length));
 8003482:	f107 0210 	add.w	r2, r7, #16
 8003486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003488:	18d0      	adds	r0, r2, r3
 800348a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348c:	f1c3 0210 	rsb	r2, r3, #16
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4293      	cmp	r3, r2
 8003494:	bf28      	it	cs
 8003496:	4613      	movcs	r3, r2
 8003498:	461a      	mov	r2, r3
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	f01f f8c1 	bl	8022622 <memcpy>

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 80034a0:	f107 0310 	add.w	r3, r7, #16
 80034a4:	461a      	mov	r2, r3
 80034a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034a8:	2002      	movs	r0, #2
 80034aa:	f003 fa7f 	bl	80069ac <HAL_FLASH_Program>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status != HAL_OK)
 80034b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <Flash_Write+0x82>
    {
      return FALSE;
 80034bc:	2300      	movs	r3, #0
 80034be:	e06c      	b.n	800359a <Flash_Write+0x15c>
    }

    if (offset == 0 && length < FLASH_WRITE_SIZE)
 80034c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d107      	bne.n	80034d6 <Flash_Write+0x98>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b0f      	cmp	r3, #15
 80034ca:	d804      	bhi.n	80034d6 <Flash_Write+0x98>
    {
      index += length;
 80034cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4413      	add	r3, r2
 80034d2:	643b      	str	r3, [r7, #64]	; 0x40
 80034d4:	e004      	b.n	80034e0 <Flash_Write+0xa2>
    }
    else
    {
      index += (FLASH_WRITE_SIZE - offset);
 80034d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	3310      	adds	r3, #16
 80034de:	643b      	str	r3, [r7, #64]	; 0x40
    }
  }
  while(index < length)
 80034e0:	e052      	b.n	8003588 <Flash_Write+0x14a>
  {
    write_length = constrain(length - index, 0, FLASH_WRITE_SIZE);
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	bf28      	it	cs
 80034ec:	2310      	movcs	r3, #16
 80034ee:	633b      	str	r3, [r7, #48]	; 0x30

    if (write_length == FLASH_WRITE_SIZE)
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d117      	bne.n	8003526 <Flash_Write+0xe8>
    {
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, addr + index, (uint32_t)&p_data[index]);
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034fa:	18d1      	adds	r1, r2, r3
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003500:	4413      	add	r3, r2
 8003502:	461a      	mov	r2, r3
 8003504:	2002      	movs	r0, #2
 8003506:	f003 fa51 	bl	80069ac <HAL_FLASH_Program>
 800350a:	4603      	mov	r3, r0
 800350c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 8003510:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <Flash_Write+0xe0>
      {
        ret = FALSE;
 8003518:	2300      	movs	r3, #0
 800351a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800351c:	e03a      	b.n	8003594 <Flash_Write+0x156>
      }
      index += write_length;
 800351e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003522:	4413      	add	r3, r2
 8003524:	643b      	str	r3, [r7, #64]	; 0x40
    }

    if ((length - index) > 0 && (length - index) < FLASH_WRITE_SIZE)
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800352a:	429a      	cmp	r2, r3
 800352c:	d02c      	beq.n	8003588 <Flash_Write+0x14a>
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b0f      	cmp	r3, #15
 8003536:	d827      	bhi.n	8003588 <Flash_Write+0x14a>
    {
      offset = length - index;
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
      write_addr = addr + index;
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003544:	4413      	add	r3, r2
 8003546:	63bb      	str	r3, [r7, #56]	; 0x38
      memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 8003548:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800354a:	f107 0310 	add.w	r3, r7, #16
 800354e:	2210      	movs	r2, #16
 8003550:	4618      	mov	r0, r3
 8003552:	f01f f866 	bl	8022622 <memcpy>
      memcpy(&buf[0], &p_data[index], offset);
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355a:	18d1      	adds	r1, r2, r3
 800355c:	f107 0310 	add.w	r3, r7, #16
 8003560:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003562:	4618      	mov	r0, r3
 8003564:	f01f f85d 	bl	8022622 <memcpy>

      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 8003568:	f107 0310 	add.w	r3, r7, #16
 800356c:	461a      	mov	r2, r3
 800356e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003570:	2002      	movs	r0, #2
 8003572:	f003 fa1b 	bl	80069ac <HAL_FLASH_Program>
 8003576:	4603      	mov	r3, r0
 8003578:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 800357c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003580:	2b00      	cmp	r3, #0
 8003582:	d006      	beq.n	8003592 <Flash_Write+0x154>
      {
        return FALSE;
 8003584:	2300      	movs	r3, #0
 8003586:	e008      	b.n	800359a <Flash_Write+0x15c>
  while(index < length)
 8003588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	429a      	cmp	r2, r3
 800358e:	d3a8      	bcc.n	80034e2 <Flash_Write+0xa4>
 8003590:	e000      	b.n	8003594 <Flash_Write+0x156>
      }
      break;
 8003592:	bf00      	nop
    }
  }
  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Lock();
 8003594:	f003 faa8 	bl	8006ae8 <HAL_FLASH_Lock>
  return ret;
 8003598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800359a:	4618      	mov	r0, r3
 800359c:	3748      	adds	r7, #72	; 0x48
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <Flash_Read>:
BOOL Flash_Read(uint32_t addr, uint32_t *p_data, uint32_t length)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b089      	sub	sp, #36	; 0x24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 80035ae:	2301      	movs	r3, #1
 80035b0:	61bb      	str	r3, [r7, #24]

  // 1byte 데이터 포인터
  uint8_t *p_byte = (uint8_t *)addr;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	617b      	str	r3, [r7, #20]

  for(int i=0; i < length; i++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
 80035ba:	e00c      	b.n	80035d6 <Flash_Read+0x34>
  {
    p_data[i] = p_byte[i];
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4413      	add	r3, r2
 80035c2:	7819      	ldrb	r1, [r3, #0]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	4413      	add	r3, r2
 80035cc:	460a      	mov	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]
  for(int i=0; i < length; i++)
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	3301      	adds	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d8ee      	bhi.n	80035bc <Flash_Read+0x1a>
  }



  return ret;
 80035de:	69bb      	ldr	r3, [r7, #24]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3724      	adds	r7, #36	; 0x24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <CLI_FlashTest>:

// Read, Erase, Write
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (FLASH_TEST, "Flash", "Flash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]", CLI_FlashTest)
static void CLI_FlashTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b09a      	sub	sp, #104	; 0x68
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
  if(nCount == 2)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	f040 8085 	bne.w	800370c <CLI_FlashTest+0x120>
  {
    switch(nFirst)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d049      	beq.n	800369c <CLI_FlashTest+0xb0>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b03      	cmp	r3, #3
 800360c:	d871      	bhi.n	80036f2 <CLI_FlashTest+0x106>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d003      	beq.n	800361c <CLI_FlashTest+0x30>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d029      	beq.n	800366e <CLI_FlashTest+0x82>
 800361a:	e06a      	b.n	80036f2 <CLI_FlashTest+0x106>
    {
      case 1:
        uint32_t rbuf[16];
        DebugMsg(DEBUGMSG_CLI,"=============================================\r\n");
 800361c:	4b3d      	ldr	r3, [pc, #244]	; (8003714 <CLI_FlashTest+0x128>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <CLI_FlashTest+0x3e>
 8003624:	483c      	ldr	r0, [pc, #240]	; (8003718 <CLI_FlashTest+0x12c>)
 8003626:	f000 fb7f 	bl	8003d28 <svDebugMessage>
        Flash_Read(nAddress, &rbuf[0],16);
 800362a:	f107 0310 	add.w	r3, r7, #16
 800362e:	2210      	movs	r2, #16
 8003630:	4619      	mov	r1, r3
 8003632:	6838      	ldr	r0, [r7, #0]
 8003634:	f7ff ffb5 	bl	80035a2 <Flash_Read>
        for(int i=0; i<16; i++)
 8003638:	2300      	movs	r3, #0
 800363a:	667b      	str	r3, [r7, #100]	; 0x64
 800363c:	e013      	b.n	8003666 <CLI_FlashTest+0x7a>
        {
          DebugMsg(DEBUGMSG_CLI, "0x%X : 0x%X\n", nAddress + i, rbuf[i]);
 800363e:	4b35      	ldr	r3, [pc, #212]	; (8003714 <CLI_FlashTest+0x128>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00c      	beq.n	8003660 <CLI_FlashTest+0x74>
 8003646:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	18d1      	adds	r1, r2, r3
 800364c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	3368      	adds	r3, #104	; 0x68
 8003652:	443b      	add	r3, r7
 8003654:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8003658:	461a      	mov	r2, r3
 800365a:	4830      	ldr	r0, [pc, #192]	; (800371c <CLI_FlashTest+0x130>)
 800365c:	f000 fb64 	bl	8003d28 <svDebugMessage>
        for(int i=0; i<16; i++)
 8003660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003662:	3301      	adds	r3, #1
 8003664:	667b      	str	r3, [r7, #100]	; 0x64
 8003666:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003668:	2b0f      	cmp	r3, #15
 800366a:	dde8      	ble.n	800363e <CLI_FlashTest+0x52>
        }
        break;
 800366c:	e04e      	b.n	800370c <CLI_FlashTest+0x120>
      case 2:
        if(Flash_Erase(nAddress, 16) == TRUE)
 800366e:	2110      	movs	r1, #16
 8003670:	6838      	ldr	r0, [r7, #0]
 8003672:	f7ff fe41 	bl	80032f8 <Flash_Erase>
 8003676:	4603      	mov	r3, r0
 8003678:	2b01      	cmp	r3, #1
 800367a:	d107      	bne.n	800368c <CLI_FlashTest+0xa0>
        {
          DebugMsg(DEBUGMSG_CLI, "Erase OK\n");
 800367c:	4b25      	ldr	r3, [pc, #148]	; (8003714 <CLI_FlashTest+0x128>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d03e      	beq.n	8003702 <CLI_FlashTest+0x116>
 8003684:	4826      	ldr	r0, [pc, #152]	; (8003720 <CLI_FlashTest+0x134>)
 8003686:	f000 fb4f 	bl	8003d28 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
        }
        break;
 800368a:	e03a      	b.n	8003702 <CLI_FlashTest+0x116>
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
 800368c:	4b21      	ldr	r3, [pc, #132]	; (8003714 <CLI_FlashTest+0x128>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d036      	beq.n	8003702 <CLI_FlashTest+0x116>
 8003694:	4823      	ldr	r0, [pc, #140]	; (8003724 <CLI_FlashTest+0x138>)
 8003696:	f000 fb47 	bl	8003d28 <svDebugMessage>
        break;
 800369a:	e032      	b.n	8003702 <CLI_FlashTest+0x116>
      case 3:
        uint8_t wbuf[16];
        for(int i=0; i<16; i++)
 800369c:	2300      	movs	r3, #0
 800369e:	663b      	str	r3, [r7, #96]	; 0x60
 80036a0:	e00a      	b.n	80036b8 <CLI_FlashTest+0xcc>
        {
          wbuf[i] = i;
 80036a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036a4:	b2d9      	uxtb	r1, r3
 80036a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80036aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ac:	4413      	add	r3, r2
 80036ae:	460a      	mov	r2, r1
 80036b0:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<16; i++)
 80036b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036b4:	3301      	adds	r3, #1
 80036b6:	663b      	str	r3, [r7, #96]	; 0x60
 80036b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ba:	2b0f      	cmp	r3, #15
 80036bc:	ddf1      	ble.n	80036a2 <CLI_FlashTest+0xb6>
        }
        if(Flash_Write(nAddress, wbuf, 16) == TRUE)
 80036be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036c2:	2210      	movs	r2, #16
 80036c4:	4619      	mov	r1, r3
 80036c6:	6838      	ldr	r0, [r7, #0]
 80036c8:	f7ff feb9 	bl	800343e <Flash_Write>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d107      	bne.n	80036e2 <CLI_FlashTest+0xf6>
        {
          DebugMsg(DEBUGMSG_CLI, "Write OK\n");
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <CLI_FlashTest+0x128>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d015      	beq.n	8003706 <CLI_FlashTest+0x11a>
 80036da:	4813      	ldr	r0, [pc, #76]	; (8003728 <CLI_FlashTest+0x13c>)
 80036dc:	f000 fb24 	bl	8003d28 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
        }
        break;
 80036e0:	e011      	b.n	8003706 <CLI_FlashTest+0x11a>
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
 80036e2:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <CLI_FlashTest+0x128>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00d      	beq.n	8003706 <CLI_FlashTest+0x11a>
 80036ea:	4810      	ldr	r0, [pc, #64]	; (800372c <CLI_FlashTest+0x140>)
 80036ec:	f000 fb1c 	bl	8003d28 <svDebugMessage>
        break;
 80036f0:	e009      	b.n	8003706 <CLI_FlashTest+0x11a>
      default:
        DebugMsg(DEBUGMSG_CLI,"\r\nFlash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]\r\n");
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <CLI_FlashTest+0x128>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <CLI_FlashTest+0x11e>
 80036fa:	480d      	ldr	r0, [pc, #52]	; (8003730 <CLI_FlashTest+0x144>)
 80036fc:	f000 fb14 	bl	8003d28 <svDebugMessage>
        break;
 8003700:	e003      	b.n	800370a <CLI_FlashTest+0x11e>
        break;
 8003702:	bf00      	nop
 8003704:	e002      	b.n	800370c <CLI_FlashTest+0x120>
        break;
 8003706:	bf00      	nop
 8003708:	e000      	b.n	800370c <CLI_FlashTest+0x120>
        break;
 800370a:	bf00      	nop
    }
  }
}
 800370c:	bf00      	nop
 800370e:	3768      	adds	r7, #104	; 0x68
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	2000003c 	.word	0x2000003c
 8003718:	080236e0 	.word	0x080236e0
 800371c:	08023710 	.word	0x08023710
 8003720:	08023720 	.word	0x08023720
 8003724:	0802372c 	.word	0x0802372c
 8003728:	08023738 	.word	0x08023738
 800372c:	08023744 	.word	0x08023744
 8003730:	08023750 	.word	0x08023750

08003734 <LED_Init>:
static BOOL s_bLEDInit = FALSE;
static BOOL s_bLEDEnable = FALSE;

// Function Declarations
void LED_Init(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  s_bLEDInit = TRUE;
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <LED_Init+0x1c>)
 800373a:	2201      	movs	r2, #1
 800373c:	601a      	str	r2, [r3, #0]
  s_bLEDEnable = TRUE;
 800373e:	4b05      	ldr	r3, [pc, #20]	; (8003754 <LED_Init+0x20>)
 8003740:	2201      	movs	r2, #1
 8003742:	601a      	str	r2, [r3, #0]
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	200053c8 	.word	0x200053c8
 8003754:	200053cc 	.word	0x200053cc

08003758 <LED_OnOff>:
{
  s_bLEDEnable = bEnable;
}

void LED_OnOff(LED_e eLED, BOOL bOn)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	6039      	str	r1, [r7, #0]
 8003762:	71fb      	strb	r3, [r7, #7]
  if(FALSE == s_bLEDEnable)
 8003764:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <LED_OnOff+0x7c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d02d      	beq.n	80037c8 <LED_OnOff+0x70>
    return;
  }

  GPIO_TypeDef* LED_GPIO_Port;
  uint16_t LED_GPIO_Pin;
  if(s_bLEDInit)
 800376c:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <LED_OnOff+0x80>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d02c      	beq.n	80037ce <LED_OnOff+0x76>
  {
    switch(eLED){
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d010      	beq.n	800379c <LED_OnOff+0x44>
 800377a:	2b03      	cmp	r3, #3
 800377c:	dc26      	bgt.n	80037cc <LED_OnOff+0x74>
 800377e:	2b01      	cmp	r3, #1
 8003780:	d002      	beq.n	8003788 <LED_OnOff+0x30>
 8003782:	2b02      	cmp	r3, #2
 8003784:	d005      	beq.n	8003792 <LED_OnOff+0x3a>
      case LED3_RED:
        LED_GPIO_Port = LED3_RED_GPIO_Port;
        LED_GPIO_Pin = LED3_RED_Pin;
        break;
      default:
        return;
 8003786:	e021      	b.n	80037cc <LED_OnOff+0x74>
        LED_GPIO_Port = LED1_GREEN_GPIO_Port;
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <LED_OnOff+0x84>)
 800378a:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED1_GREEN_Pin;
 800378c:	2301      	movs	r3, #1
 800378e:	817b      	strh	r3, [r7, #10]
        break;
 8003790:	e009      	b.n	80037a6 <LED_OnOff+0x4e>
        LED_GPIO_Port = LED2_YELLOW_GPIO_Port;
 8003792:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <LED_OnOff+0x88>)
 8003794:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED2_YELLOW_Pin;
 8003796:	2310      	movs	r3, #16
 8003798:	817b      	strh	r3, [r7, #10]
        break;
 800379a:	e004      	b.n	80037a6 <LED_OnOff+0x4e>
        LED_GPIO_Port = LED3_RED_GPIO_Port;
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <LED_OnOff+0x8c>)
 800379e:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED3_RED_Pin;
 80037a0:	2310      	movs	r3, #16
 80037a2:	817b      	strh	r3, [r7, #10]
        break;
 80037a4:	bf00      	nop
        break;
    }
    if(bOn)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d006      	beq.n	80037ba <LED_OnOff+0x62>
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_SET);
 80037ac:	897b      	ldrh	r3, [r7, #10]
 80037ae:	2201      	movs	r2, #1
 80037b0:	4619      	mov	r1, r3
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f003 fcfa 	bl	80071ac <HAL_GPIO_WritePin>
 80037b8:	e009      	b.n	80037ce <LED_OnOff+0x76>
    }
    else
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_RESET);
 80037ba:	897b      	ldrh	r3, [r7, #10]
 80037bc:	2200      	movs	r2, #0
 80037be:	4619      	mov	r1, r3
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f003 fcf3 	bl	80071ac <HAL_GPIO_WritePin>
 80037c6:	e002      	b.n	80037ce <LED_OnOff+0x76>
    return;
 80037c8:	bf00      	nop
 80037ca:	e000      	b.n	80037ce <LED_OnOff+0x76>
        return;
 80037cc:	bf00      	nop
    }
  }
}
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	200053cc 	.word	0x200053cc
 80037d8:	200053c8 	.word	0x200053c8
 80037dc:	42020400 	.word	0x42020400
 80037e0:	42021400 	.word	0x42021400
 80037e4:	42021800 	.word	0x42021800

080037e8 <LED_SimpleAnimation>:
  LED_OnOff(LED2_YELLOW, bOn);
  LED_OnOff(LED3_RED, bOn);
}

void LED_SimpleAnimation(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
  for(int i =0; i<3; i++)
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	e02c      	b.n	800384e <LED_SimpleAnimation+0x66>
  {
    LED_OnOff(LED1_GREEN, TRUE);
 80037f4:	2101      	movs	r1, #1
 80037f6:	2001      	movs	r0, #1
 80037f8:	f7ff ffae 	bl	8003758 <LED_OnOff>
    HAL_Delay(50);
 80037fc:	2032      	movs	r0, #50	; 0x32
 80037fe:	f000 fb0f 	bl	8003e20 <HAL_Delay>
    LED_OnOff(LED1_GREEN, FALSE);
 8003802:	2100      	movs	r1, #0
 8003804:	2001      	movs	r0, #1
 8003806:	f7ff ffa7 	bl	8003758 <LED_OnOff>
    HAL_Delay(50);
 800380a:	2032      	movs	r0, #50	; 0x32
 800380c:	f000 fb08 	bl	8003e20 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, TRUE);
 8003810:	2101      	movs	r1, #1
 8003812:	2002      	movs	r0, #2
 8003814:	f7ff ffa0 	bl	8003758 <LED_OnOff>
    HAL_Delay(50);
 8003818:	2032      	movs	r0, #50	; 0x32
 800381a:	f000 fb01 	bl	8003e20 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, FALSE);
 800381e:	2100      	movs	r1, #0
 8003820:	2002      	movs	r0, #2
 8003822:	f7ff ff99 	bl	8003758 <LED_OnOff>
    HAL_Delay(50);
 8003826:	2032      	movs	r0, #50	; 0x32
 8003828:	f000 fafa 	bl	8003e20 <HAL_Delay>
    LED_OnOff(LED3_RED, TRUE);
 800382c:	2101      	movs	r1, #1
 800382e:	2003      	movs	r0, #3
 8003830:	f7ff ff92 	bl	8003758 <LED_OnOff>
    HAL_Delay(50);
 8003834:	2032      	movs	r0, #50	; 0x32
 8003836:	f000 faf3 	bl	8003e20 <HAL_Delay>
    LED_OnOff(LED3_RED, FALSE);
 800383a:	2100      	movs	r1, #0
 800383c:	2003      	movs	r0, #3
 800383e:	f7ff ff8b 	bl	8003758 <LED_OnOff>
    HAL_Delay(50);
 8003842:	2032      	movs	r0, #50	; 0x32
 8003844:	f000 faec 	bl	8003e20 <HAL_Delay>
  for(int i =0; i<3; i++)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3301      	adds	r3, #1
 800384c:	607b      	str	r3, [r7, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b02      	cmp	r3, #2
 8003852:	ddcf      	ble.n	80037f4 <LED_SimpleAnimation+0xc>
  }
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <CLI_LEDTest>:
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (LED_TEST,"LED","LED [1~11] [0,1,2] ",CLI_LEDTest);

static void CLI_LEDTest(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	603b      	str	r3, [r7, #0]
  if (nCount == 2) {
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d10b      	bne.n	800388a <CLI_LEDTest+0x2c>
    LED_OnOff((LED_e)nFirst, (BOOL)(nSecond != 0));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf14      	ite	ne
 800387c:	2301      	movne	r3, #1
 800387e:	2300      	moveq	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	4619      	mov	r1, r3
 8003884:	4610      	mov	r0, r2
 8003886:	f7ff ff67 	bl	8003758 <LED_OnOff>
  }
}
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <RESET_Init>:
  }
}


BOOL RESET_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 800389a:	2301      	movs	r3, #1
 800389c:	603b      	str	r3, [r7, #0]
  BOOL is_debug = FALSE;
 800389e:	2300      	movs	r3, #0
 80038a0:	607b      	str	r3, [r7, #4]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 80038a2:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <RESET_Init+0x80>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <RESET_Init+0x1e>
  {
    is_debug = TRUE;
 80038ae:	2301      	movs	r3, #1
 80038b0:	607b      	str	r3, [r7, #4]
  }
  RTC_WriteBackupReg(RESET_REG_COUNT+1, RESET_REG_MAGICNUMBER);
 80038b2:	4919      	ldr	r1, [pc, #100]	; (8003918 <RESET_Init+0x84>)
 80038b4:	2002      	movs	r0, #2
 80038b6:	f000 f845 	bl	8003944 <RTC_WriteBackupReg>
  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if((RCC->RSR & (1<<26) && is_debug != TRUE) && RTC_ReadBackupReg(RESET_REG_COUNT+1) == RESET_REG_MAGICNUMBER)
 80038ba:	4b18      	ldr	r3, [pc, #96]	; (800391c <RESET_Init+0x88>)
 80038bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01c      	beq.n	8003902 <RESET_Init+0x6e>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d019      	beq.n	8003902 <RESET_Init+0x6e>
 80038ce:	2002      	movs	r0, #2
 80038d0:	f000 f828 	bl	8003924 <RTC_ReadBackupReg>
 80038d4:	4603      	mov	r3, r0
 80038d6:	4a10      	ldr	r2, [pc, #64]	; (8003918 <RESET_Init+0x84>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d112      	bne.n	8003902 <RESET_Init+0x6e>
  {
    RTC_WriteBackupReg(RESET_REG_COUNT, RTC_ReadBackupReg(RESET_REG_COUNT) + 1);
 80038dc:	2001      	movs	r0, #1
 80038de:	f000 f821 	bl	8003924 <RTC_ReadBackupReg>
 80038e2:	4603      	mov	r3, r0
 80038e4:	3301      	adds	r3, #1
 80038e6:	4619      	mov	r1, r3
 80038e8:	2001      	movs	r0, #1
 80038ea:	f000 f82b 	bl	8003944 <RTC_WriteBackupReg>
    HAL_Delay(500); // 500 m delay
 80038ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038f2:	f000 fa95 	bl	8003e20 <HAL_Delay>
    s_ResetCount = RTC_ReadBackupReg(RESET_REG_COUNT);
 80038f6:	2001      	movs	r0, #1
 80038f8:	f000 f814 	bl	8003924 <RTC_ReadBackupReg>
 80038fc:	4603      	mov	r3, r0
 80038fe:	4a08      	ldr	r2, [pc, #32]	; (8003920 <RESET_Init+0x8c>)
 8003900:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  RTC_WriteBackupReg(RESET_REG_COUNT, 0);
 8003902:	2100      	movs	r1, #0
 8003904:	2001      	movs	r0, #1
 8003906:	f000 f81d 	bl	8003944 <RTC_WriteBackupReg>

  return ret;
 800390a:	683b      	ldr	r3, [r7, #0]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	e000edf0 	.word	0xe000edf0
 8003918:	20240215 	.word	0x20240215
 800391c:	44020c00 	.word	0x44020c00
 8003920:	200053d0 	.word	0x200053d0

08003924 <RTC_ReadBackupReg>:
#include "RTC.h"

RTC_HandleTypeDef hrtc;

uint32_t RTC_ReadBackupReg(uint32_t index)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4804      	ldr	r0, [pc, #16]	; (8003940 <RTC_ReadBackupReg+0x1c>)
 8003930:	f009 fccc 	bl	800d2cc <HAL_RTCEx_BKUPRead>
 8003934:	4603      	mov	r3, r0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	200053d4 	.word	0x200053d4

08003944 <RTC_WriteBackupReg>:

void RTC_WriteBackupReg(uint32_t index, uint32_t data)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4803      	ldr	r0, [pc, #12]	; (8003960 <RTC_WriteBackupReg+0x1c>)
 8003954:	f009 fca2 	bl	800d29c <HAL_RTCEx_BKUPWrite>
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	200053d4 	.word	0x200053d4

08003964 <UART_Init>:

UART_HandleTypeDef huart2;
//UART_HandleTypeDef huart3;

void  UART_Init(uint8_t ch, uint32_t baud)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	6039      	str	r1, [r7, #0]
 800396e:	71fb      	strb	r3, [r7, #7]
  switch(ch)
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d177      	bne.n	8003a66 <UART_Init+0x102>
  {
    case _DEF_UART1:
      huart2.Instance = USART2;
 8003976:	4b3e      	ldr	r3, [pc, #248]	; (8003a70 <UART_Init+0x10c>)
 8003978:	4a3e      	ldr	r2, [pc, #248]	; (8003a74 <UART_Init+0x110>)
 800397a:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = baud;
 800397c:	4a3c      	ldr	r2, [pc, #240]	; (8003a70 <UART_Init+0x10c>)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003982:	4b3b      	ldr	r3, [pc, #236]	; (8003a70 <UART_Init+0x10c>)
 8003984:	2200      	movs	r2, #0
 8003986:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 8003988:	4b39      	ldr	r3, [pc, #228]	; (8003a70 <UART_Init+0x10c>)
 800398a:	2200      	movs	r2, #0
 800398c:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 800398e:	4b38      	ldr	r3, [pc, #224]	; (8003a70 <UART_Init+0x10c>)
 8003990:	2200      	movs	r2, #0
 8003992:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 8003994:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <UART_Init+0x10c>)
 8003996:	220c      	movs	r2, #12
 8003998:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800399a:	4b35      	ldr	r3, [pc, #212]	; (8003a70 <UART_Init+0x10c>)
 800399c:	2200      	movs	r2, #0
 800399e:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039a0:	4b33      	ldr	r3, [pc, #204]	; (8003a70 <UART_Init+0x10c>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	61da      	str	r2, [r3, #28]
      huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039a6:	4b32      	ldr	r3, [pc, #200]	; (8003a70 <UART_Init+0x10c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	621a      	str	r2, [r3, #32]
      huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80039ac:	4b30      	ldr	r3, [pc, #192]	; (8003a70 <UART_Init+0x10c>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24
      huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039b2:	4b2f      	ldr	r3, [pc, #188]	; (8003a70 <UART_Init+0x10c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_UART_Init(&huart2) != HAL_OK)
 80039b8:	482d      	ldr	r0, [pc, #180]	; (8003a70 <UART_Init+0x10c>)
 80039ba:	f00a f883 	bl	800dac4 <HAL_UART_Init>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <UART_Init+0x72>
      {
        Error_Handler();
 80039c4:	f7fd f91e 	bl	8000c04 <Error_Handler>
        s_bUARTConnected = FALSE;
 80039c8:	4b2b      	ldr	r3, [pc, #172]	; (8003a78 <UART_Init+0x114>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 80039ce:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <UART_Init+0x118>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	e031      	b.n	8003a3a <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039d6:	2100      	movs	r1, #0
 80039d8:	4825      	ldr	r0, [pc, #148]	; (8003a70 <UART_Init+0x10c>)
 80039da:	f00b ffb2 	bl	800f942 <HAL_UARTEx_SetTxFifoThreshold>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <UART_Init+0x92>
      {
        Error_Handler();
 80039e4:	f7fd f90e 	bl	8000c04 <Error_Handler>
        s_bUARTConnected = FALSE;
 80039e8:	4b23      	ldr	r3, [pc, #140]	; (8003a78 <UART_Init+0x114>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 80039ee:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <UART_Init+0x118>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	e021      	b.n	8003a3a <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80039f6:	2100      	movs	r1, #0
 80039f8:	481d      	ldr	r0, [pc, #116]	; (8003a70 <UART_Init+0x10c>)
 80039fa:	f00b ffe0 	bl	800f9be <HAL_UARTEx_SetRxFifoThreshold>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <UART_Init+0xb2>
      {
        Error_Handler();
 8003a04:	f7fd f8fe 	bl	8000c04 <Error_Handler>
        s_bUARTConnected = FALSE;
 8003a08:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <UART_Init+0x114>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003a0e:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <UART_Init+0x118>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	e011      	b.n	8003a3a <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003a16:	4816      	ldr	r0, [pc, #88]	; (8003a70 <UART_Init+0x10c>)
 8003a18:	f00b ff5a 	bl	800f8d0 <HAL_UARTEx_DisableFifoMode>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <UART_Init+0xd0>
      {
        Error_Handler();
 8003a22:	f7fd f8ef 	bl	8000c04 <Error_Handler>
        s_bUARTConnected = FALSE;
 8003a26:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <UART_Init+0x114>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003a2c:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <UART_Init+0x118>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	e002      	b.n	8003a3a <UART_Init+0xd6>
      }
      else
      {
        // ring buffer
        svRingBuffer_Reset(&g_uartRxBuff);
 8003a34:	4812      	ldr	r0, [pc, #72]	; (8003a80 <UART_Init+0x11c>)
 8003a36:	f00c ff4c 	bl	80108d2 <svRingBuffer_Reset>
      }

      if(HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_data,1) != HAL_OK)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	4911      	ldr	r1, [pc, #68]	; (8003a84 <UART_Init+0x120>)
 8003a3e:	480c      	ldr	r0, [pc, #48]	; (8003a70 <UART_Init+0x10c>)
 8003a40:	f00a f92e 	bl	800dca0 <HAL_UART_Receive_IT>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d006      	beq.n	8003a58 <UART_Init+0xf4>
      {
        s_bUARTConnected = FALSE;
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <UART_Init+0x114>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <UART_Init+0x118>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
      else
      {
        s_bUARTConnected = TRUE;
        g_bDebugTx = TRUE;
      }
      break;
 8003a56:	e007      	b.n	8003a68 <UART_Init+0x104>
        s_bUARTConnected = TRUE;
 8003a58:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <UART_Init+0x114>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
        g_bDebugTx = TRUE;
 8003a5e:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <UART_Init+0x118>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
      break;
 8003a64:	e000      	b.n	8003a68 <UART_Init+0x104>
    default:
      break;
 8003a66:	bf00      	nop
  }
  return;
 8003a68:	bf00      	nop
}
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	2000540c 	.word	0x2000540c
 8003a74:	40004400 	.word	0x40004400
 8003a78:	20005408 	.word	0x20005408
 8003a7c:	20005520 	.word	0x20005520
 8003a80:	20000020 	.word	0x20000020
 8003a84:	20005404 	.word	0x20005404

08003a88 <IsUartConnected>:

BOOL  IsUartConnected(uint8_t ch)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71fb      	strb	r3, [r7, #7]
  return s_bUARTConnected;
 8003a92:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <IsUartConnected+0x1c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20005408 	.word	0x20005408

08003aa8 <UART_Write>:

uint32_t  UART_Write(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	6039      	str	r1, [r7, #0]
 8003ab2:	71fb      	strb	r3, [r7, #7]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status;

  switch(ch)
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d110      	bne.n	8003ae4 <UART_Write+0x3c>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart2, Buf, Len, 100);
 8003ac2:	88ba      	ldrh	r2, [r7, #4]
 8003ac4:	2364      	movs	r3, #100	; 0x64
 8003ac6:	6839      	ldr	r1, [r7, #0]
 8003ac8:	480a      	ldr	r0, [pc, #40]	; (8003af4 <UART_Write+0x4c>)
 8003aca:	f00a f84b 	bl	800db64 <HAL_UART_Transmit>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	72fb      	strb	r3, [r7, #11]

      if(status == HAL_OK)
 8003ad2:	7afb      	ldrb	r3, [r7, #11]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d107      	bne.n	8003ae8 <UART_Write+0x40>
      {
        ret = Len;
 8003ad8:	88bb      	ldrh	r3, [r7, #4]
 8003ada:	60fb      	str	r3, [r7, #12]
        g_bDebugTx = TRUE;
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <UART_Write+0x50>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
      }
      break;
 8003ae2:	e001      	b.n	8003ae8 <UART_Write+0x40>
    default:
      break;
 8003ae4:	bf00      	nop
 8003ae6:	e000      	b.n	8003aea <UART_Write+0x42>
      break;
 8003ae8:	bf00      	nop
  }
  return ret;
 8003aea:	68fb      	ldr	r3, [r7, #12]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	2000540c 	.word	0x2000540c
 8003af8:	20005520 	.word	0x20005520

08003afc <UART_Printf>:
  return ret;
}


uint32_t UART_Printf(uint8_t ch, char* fmt, ...) // ... arg
{
 8003afc:	b40e      	push	{r1, r2, r3}
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b0c7      	sub	sp, #284	; 0x11c
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	4602      	mov	r2, r0
 8003b06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003b0a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003b0e:	701a      	strb	r2, [r3, #0]
  va_list args;

  int len;
  uint32_t ret;

  va_start(args, fmt);
 8003b10:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003b14:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003b18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b1c:	601a      	str	r2, [r3, #0]
  // printf 결과를 buf 에 저장
  len = vsnprintf(buf, 256, fmt, args);
 8003b1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003b22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b26:	f107 0010 	add.w	r0, r7, #16
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003b30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b34:	f01e fc84 	bl	8022440 <vsniprintf>
 8003b38:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = UART_Write(ch, (uint8_t *)buf, len);
 8003b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	f107 0110 	add.w	r1, r7, #16
 8003b46:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003b4a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff ffa9 	bl	8003aa8 <UART_Write>
 8003b56:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8003b5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003b64:	46bd      	mov	sp, r7
 8003b66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b6a:	b003      	add	sp, #12
 8003b6c:	4770      	bx	lr
	...

08003b70 <Uart_Available>:

uint32_t Uart_Available(uint8_t ch)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d104      	bne.n	8003b8e <Uart_Available+0x1e>
  {
    case _DEF_UART1:
      ret = svRingBuffer_GetCount(&g_uartRxBuff);
 8003b84:	4804      	ldr	r0, [pc, #16]	; (8003b98 <Uart_Available+0x28>)
 8003b86:	f00c fe82 	bl	801088e <svRingBuffer_GetCount>
 8003b8a:	60f8      	str	r0, [r7, #12]
      break;
 8003b8c:	bf00      	nop
  }

  return ret;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000020 	.word	0x20000020

08003b9c <HAL_UART_RxCpltCallback>:
  return ret;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a0c      	ldr	r2, [pc, #48]	; (8003bdc <HAL_UART_RxCpltCallback+0x40>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d112      	bne.n	8003bd4 <HAL_UART_RxCpltCallback+0x38>
  {
    // For UART Test
    // UART_Printf(_DEF_UART1, "RxData : 0x%X\n", rx_data);
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 8003bae:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <HAL_UART_RxCpltCallback+0x44>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	480b      	ldr	r0, [pc, #44]	; (8003be4 <HAL_UART_RxCpltCallback+0x48>)
 8003bb6:	f00c fea4 	bl	8010902 <svRingBuffer_Push>
 8003bba:	60f8      	str	r0, [r7, #12]
    if(result == -2 )
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f113 0f02 	cmn.w	r3, #2
 8003bc2:	d102      	bne.n	8003bca <HAL_UART_RxCpltCallback+0x2e>
    {
      svRingBuffer_Reset(&g_uartRxBuff);
 8003bc4:	4807      	ldr	r0, [pc, #28]	; (8003be4 <HAL_UART_RxCpltCallback+0x48>)
 8003bc6:	f00c fe84 	bl	80108d2 <svRingBuffer_Reset>
    }else
    {

    }
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data, 1);
 8003bca:	2201      	movs	r2, #1
 8003bcc:	4904      	ldr	r1, [pc, #16]	; (8003be0 <HAL_UART_RxCpltCallback+0x44>)
 8003bce:	4806      	ldr	r0, [pc, #24]	; (8003be8 <HAL_UART_RxCpltCallback+0x4c>)
 8003bd0:	f00a f866 	bl	800dca0 <HAL_UART_Receive_IT>
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40004400 	.word	0x40004400
 8003be0:	20005404 	.word	0x20005404
 8003be4:	20000020 	.word	0x20000020
 8003be8:	2000540c 	.word	0x2000540c

08003bec <svDebugRxChar>:
  return ch;
}
#endif

char svDebugRxChar(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
	if (svRingBuffer_GetCount(&g_rbDebugRx) > 0) {
 8003bf0:	4806      	ldr	r0, [pc, #24]	; (8003c0c <svDebugRxChar+0x20>)
 8003bf2:	f00c fe4c 	bl	801088e <svRingBuffer_GetCount>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d004      	beq.n	8003c06 <svDebugRxChar+0x1a>
		return svRingBuffer_Pop(&g_rbDebugRx);
 8003bfc:	4803      	ldr	r0, [pc, #12]	; (8003c0c <svDebugRxChar+0x20>)
 8003bfe:	f00c feb4 	bl	801096a <svRingBuffer_Pop>
 8003c02:	4603      	mov	r3, r0
 8003c04:	e000      	b.n	8003c08 <svDebugRxChar+0x1c>
	}
	else {
		return 0;
 8003c06:	2300      	movs	r3, #0
	}
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20000020 	.word	0x20000020

08003c10 <svDebugProcess>:

void svDebugProcess(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
	if (IsUartConnected(_DEF_UART1)) {
 8003c16:	2000      	movs	r0, #0
 8003c18:	f7ff ff36 	bl	8003a88 <IsUartConnected>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d01a      	beq.n	8003c58 <svDebugProcess+0x48>
	  svCLI_Handler();
 8003c22:	f00c fce1 	bl	80105e8 <svCLI_Handler>
		if (g_bDebugTx == TRUE) {
 8003c26:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <svDebugProcess+0x50>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d114      	bne.n	8003c58 <svDebugProcess+0x48>
			size_t nLength = lwrb_get_linear_block_read_length(&g_lwrbDebugTx);
 8003c2e:	480d      	ldr	r0, [pc, #52]	; (8003c64 <svDebugProcess+0x54>)
 8003c30:	f01e f967 	bl	8021f02 <lwrb_get_linear_block_read_length>
 8003c34:	6078      	str	r0, [r7, #4]
			if (nLength > 0) {
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00d      	beq.n	8003c58 <svDebugProcess+0x48>
			  /*
				if (nLength > UART_TX_DATA_SIZE) {
					nLength = UART_TX_DATA_SIZE;
				}
				*/
				UART_Write(_DEF_UART1, lwrb_get_linear_block_read_address(&g_lwrbDebugTx), nLength);
 8003c3c:	4809      	ldr	r0, [pc, #36]	; (8003c64 <svDebugProcess+0x54>)
 8003c3e:	f01e f944 	bl	8021eca <lwrb_get_linear_block_read_address>
 8003c42:	4601      	mov	r1, r0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f7ff ff2c 	bl	8003aa8 <UART_Write>
				lwrb_skip(&g_lwrbDebugTx, nLength);
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4804      	ldr	r0, [pc, #16]	; (8003c64 <svDebugProcess+0x54>)
 8003c54:	f01e f988 	bl	8021f68 <lwrb_skip>
				g_bDebugTx = TRUE;
		  }
		}
		*/
	}
}
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20005520 	.word	0x20005520
 8003c64:	20005524 	.word	0x20005524

08003c68 <svDebugCallback>:

void svDebugCallback(LWRB_VOLATILE struct lwrb* buff, lwrb_evt_type_t evt, size_t bp)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	460b      	mov	r3, r1
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	72fb      	strb	r3, [r7, #11]
	if (evt == LWRB_EVT_FULL) {
 8003c76:	7afb      	ldrb	r3, [r7, #11]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d11a      	bne.n	8003cb2 <svDebugCallback+0x4a>
		if (IsUartConnected(_DEF_UART1)) {
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	f7ff ff03 	bl	8003a88 <IsUartConnected>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d014      	beq.n	8003cb2 <svDebugCallback+0x4a>
			uint32_t uTick = HAL_GetTick();
 8003c88:	f000 f8be 	bl	8003e08 <HAL_GetTick>
 8003c8c:	6178      	str	r0, [r7, #20]
			while (GetElapsedTime(uTick) < 100) {
 8003c8e:	e003      	b.n	8003c98 <svDebugCallback+0x30>
				if (g_bDebugTx == TRUE) {
 8003c90:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <svDebugCallback+0x54>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d006      	beq.n	8003ca6 <svDebugCallback+0x3e>
			while (GetElapsedTime(uTick) < 100) {
 8003c98:	6978      	ldr	r0, [r7, #20]
 8003c9a:	f000 f863 	bl	8003d64 <GetElapsedTime>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b63      	cmp	r3, #99	; 0x63
 8003ca2:	d9f5      	bls.n	8003c90 <svDebugCallback+0x28>
 8003ca4:	e000      	b.n	8003ca8 <svDebugCallback+0x40>
					break;
 8003ca6:	bf00      	nop
				}
				// HAL_Delay(1);
			}
      g_bDebugTx = TRUE;
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <svDebugCallback+0x54>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
			svDebugProcess();
 8003cae:	f7ff ffaf 	bl	8003c10 <svDebugProcess>
		}
	}
}
 8003cb2:	bf00      	nop
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20005520 	.word	0x20005520

08003cc0 <svDebugInit>:
{
	return lwrb_get_free(&g_lwrbDebugTx);
}

void svDebugInit(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
	svRingBuffer_Reset(&g_rbDebugRx);
 8003cc4:	4809      	ldr	r0, [pc, #36]	; (8003cec <svDebugInit+0x2c>)
 8003cc6:	f00c fe04 	bl	80108d2 <svRingBuffer_Reset>
	svCLI_Init(&svDebugRxChar, &svDebugPutChar, NULL);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	4908      	ldr	r1, [pc, #32]	; (8003cf0 <svDebugInit+0x30>)
 8003cce:	4809      	ldr	r0, [pc, #36]	; (8003cf4 <svDebugInit+0x34>)
 8003cd0:	f00b fffe 	bl	800fcd0 <svCLI_Init>

  lwrb_init(&g_lwrbDebugTx, &s_byDebugTxRingBuffer[0], DEBUG_TX_BUFFER_SIZE);
 8003cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd8:	4907      	ldr	r1, [pc, #28]	; (8003cf8 <svDebugInit+0x38>)
 8003cda:	4808      	ldr	r0, [pc, #32]	; (8003cfc <svDebugInit+0x3c>)
 8003cdc:	f01d ffd6 	bl	8021c8c <lwrb_init>
	lwrb_set_evt_fn(&g_lwrbDebugTx, svDebugCallback);
 8003ce0:	4907      	ldr	r1, [pc, #28]	; (8003d00 <svDebugInit+0x40>)
 8003ce2:	4806      	ldr	r0, [pc, #24]	; (8003cfc <svDebugInit+0x3c>)
 8003ce4:	f01d fff3 	bl	8021cce <lwrb_set_evt_fn>
}
 8003ce8:	bf00      	nop
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20000020 	.word	0x20000020
 8003cf0:	08003d05 	.word	0x08003d05
 8003cf4:	08003bed 	.word	0x08003bed
 8003cf8:	20005538 	.word	0x20005538
 8003cfc:	20005524 	.word	0x20005524
 8003d00:	08003c69 	.word	0x08003c69

08003d04 <svDebugPutChar>:
		uDebugMsgLevel = DEBUG_VERBOSE;
	g_DebugMsgLevel = uDebugMsgLevel;
}

void svDebugPutChar(char cPut)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
	lwrb_write(&g_lwrbDebugTx, (const void*)(&cPut), 1);
 8003d0e:	1dfb      	adds	r3, r7, #7
 8003d10:	2201      	movs	r2, #1
 8003d12:	4619      	mov	r1, r3
 8003d14:	4803      	ldr	r0, [pc, #12]	; (8003d24 <svDebugPutChar+0x20>)
 8003d16:	f01d fff3 	bl	8021d00 <lwrb_write>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20005524 	.word	0x20005524

08003d28 <svDebugMessage>:
#endif
	lwrb_write(&g_lwrbDebugTx, (const void*)szMsg, lenMax);
}

void svDebugMessage(char* fmt,...)
{
 8003d28:	b40f      	push	{r0, r1, r2, r3}
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
	static char s_msg4Debug[DEBUG_MESSAGE_SIZE];
	va_list ap;
	int len;

	va_start(ap, fmt);
 8003d30:	f107 0314 	add.w	r3, r7, #20
 8003d34:	603b      	str	r3, [r7, #0]
	len = vsprintf(s_msg4Debug, fmt, ap);
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	6939      	ldr	r1, [r7, #16]
 8003d3a:	4808      	ldr	r0, [pc, #32]	; (8003d5c <svDebugMessage+0x34>)
 8003d3c:	f01e fba4 	bl	8022488 <vsiprintf>
 8003d40:	6078      	str	r0, [r7, #4]
	va_end(ap);

	lwrb_write(&g_lwrbDebugTx, (const void*)s_msg4Debug, len);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	461a      	mov	r2, r3
 8003d46:	4905      	ldr	r1, [pc, #20]	; (8003d5c <svDebugMessage+0x34>)
 8003d48:	4805      	ldr	r0, [pc, #20]	; (8003d60 <svDebugMessage+0x38>)
 8003d4a:	f01d ffd9 	bl	8021d00 <lwrb_write>
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d58:	b004      	add	sp, #16
 8003d5a:	4770      	bx	lr
 8003d5c:	2000573c 	.word	0x2000573c
 8003d60:	20005524 	.word	0x20005524

08003d64 <GetElapsedTime>:
#include <math.h>


// Functions
uint32_t GetElapsedTime(uint32_t tickRef)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
	uint32_t tickCurrent = HAL_GetTick();
 8003d6c:	f000 f84c 	bl	8003e08 <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]
	// Check Wrap around
	if (tickCurrent < tickRef) {
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d204      	bcs.n	8003d84 <GetElapsedTime+0x20>
		return (0xffffffff - tickRef + tickCurrent);
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	e002      	b.n	8003d8a <GetElapsedTime+0x26>
	}
	else {
		return tickCurrent - tickRef;
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	1ad3      	subs	r3, r2, r3
	}
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d98:	2003      	movs	r0, #3
 8003d9a:	f000 f928 	bl	8003fee <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003d9e:	f004 f869 	bl	8007e74 <HAL_RCC_GetSysClockFreq>
 8003da2:	4602      	mov	r2, r0
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_Init+0x40>)
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	490a      	ldr	r1, [pc, #40]	; (8003dd8 <HAL_Init+0x44>)
 8003dae:	5ccb      	ldrb	r3, [r1, r3]
 8003db0:	fa22 f303 	lsr.w	r3, r2, r3
 8003db4:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <HAL_Init+0x48>)
 8003db6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003db8:	200f      	movs	r0, #15
 8003dba:	f7fd f89d 	bl	8000ef8 <HAL_InitTick>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e002      	b.n	8003dce <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003dc8:	f7fc ff21 	bl	8000c0e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	44020c00 	.word	0x44020c00
 8003dd8:	08026dec 	.word	0x08026dec
 8003ddc:	20000000 	.word	0x20000000

08003de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_IncTick+0x20>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_IncTick+0x24>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4413      	add	r3, r2
 8003df0:	4a04      	ldr	r2, [pc, #16]	; (8003e04 <HAL_IncTick+0x24>)
 8003df2:	6013      	str	r3, [r2, #0]
}
 8003df4:	bf00      	nop
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	20000044 	.word	0x20000044
 8003e04:	200057bc 	.word	0x200057bc

08003e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e0c:	4b03      	ldr	r3, [pc, #12]	; (8003e1c <HAL_GetTick+0x14>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	200057bc 	.word	0x200057bc

08003e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e28:	f7ff ffee 	bl	8003e08 <HAL_GetTick>
 8003e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d005      	beq.n	8003e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <HAL_Delay+0x44>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e46:	bf00      	nop
 8003e48:	f7ff ffde 	bl	8003e08 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d8f7      	bhi.n	8003e48 <HAL_Delay+0x28>
  {
  }
}
 8003e58:	bf00      	nop
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000044 	.word	0x20000044

08003e68 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8003e70:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8003e72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e76:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003e7a:	4905      	ldr	r1, [pc, #20]	; (8003e90 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	44000400 	.word	0x44000400

08003e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ec6:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	60d3      	str	r3, [r2, #12]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ee0:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	0a1b      	lsrs	r3, r3, #8
 8003ee6:	f003 0307 	and.w	r3, r3, #7
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	e000ed00 	.word	0xe000ed00

08003ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	db0b      	blt.n	8003f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	f003 021f 	and.w	r2, r3, #31
 8003f10:	4907      	ldr	r1, [pc, #28]	; (8003f30 <__NVIC_EnableIRQ+0x38>)
 8003f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	2001      	movs	r0, #1
 8003f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	e000e100 	.word	0xe000e100

08003f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	6039      	str	r1, [r7, #0]
 8003f3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	db0a      	blt.n	8003f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	490c      	ldr	r1, [pc, #48]	; (8003f80 <__NVIC_SetPriority+0x4c>)
 8003f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f52:	0112      	lsls	r2, r2, #4
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	440b      	add	r3, r1
 8003f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f5c:	e00a      	b.n	8003f74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	4908      	ldr	r1, [pc, #32]	; (8003f84 <__NVIC_SetPriority+0x50>)
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	3b04      	subs	r3, #4
 8003f6c:	0112      	lsls	r2, r2, #4
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	440b      	add	r3, r1
 8003f72:	761a      	strb	r2, [r3, #24]
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	e000e100 	.word	0xe000e100
 8003f84:	e000ed00 	.word	0xe000ed00

08003f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b089      	sub	sp, #36	; 0x24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f1c3 0307 	rsb	r3, r3, #7
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	bf28      	it	cs
 8003fa6:	2304      	movcs	r3, #4
 8003fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3304      	adds	r3, #4
 8003fae:	2b06      	cmp	r3, #6
 8003fb0:	d902      	bls.n	8003fb8 <NVIC_EncodePriority+0x30>
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3b03      	subs	r3, #3
 8003fb6:	e000      	b.n	8003fba <NVIC_EncodePriority+0x32>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43da      	mvns	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	401a      	ands	r2, r3
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fda:	43d9      	mvns	r1, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe0:	4313      	orrs	r3, r2
         );
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3724      	adds	r7, #36	; 0x24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff ff4c 	bl	8003e94 <__NVIC_SetPriorityGrouping>
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004012:	f7ff ff63 	bl	8003edc <__NVIC_GetPriorityGrouping>
 8004016:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	6978      	ldr	r0, [r7, #20]
 800401e:	f7ff ffb3 	bl	8003f88 <NVIC_EncodePriority>
 8004022:	4602      	mov	r2, r0
 8004024:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ff82 	bl	8003f34 <__NVIC_SetPriority>
}
 8004030:	bf00      	nop
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff ff56 	bl	8003ef8 <__NVIC_EnableIRQ>
}
 800404c:	bf00      	nop
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800405c:	f7ff fed4 	bl	8003e08 <HAL_GetTick>
 8004060:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e06b      	b.n	8004144 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d008      	beq.n	800408a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e05c      	b.n	8004144 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0204 	orr.w	r2, r2, #4
 8004098:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2205      	movs	r2, #5
 800409e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80040a2:	e020      	b.n	80040e6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80040a4:	f7ff feb0 	bl	8003e08 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b05      	cmp	r3, #5
 80040b0:	d919      	bls.n	80040e6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	f043 0210 	orr.w	r2, r3, #16
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2203      	movs	r2, #3
 80040c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d6:	2201      	movs	r2, #1
 80040d8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e02e      	b.n	8004144 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0d7      	beq.n	80040a4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0202 	orr.w	r2, r2, #2
 8004102:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2204      	movs	r2, #4
 8004108:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004114:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d007      	beq.n	800413a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412e:	2201      	movs	r2, #1
 8004130:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2200      	movs	r2, #0
 8004138:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e019      	b.n	8004192 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d004      	beq.n	8004174 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e00e      	b.n	8004192 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2204      	movs	r2, #4
 8004178:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800418a:	f043 0304 	orr.w	r3, r3, #4
 800418e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e0d2      	b.n	8004358 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d106      	bne.n	80041ca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2223      	movs	r2, #35	; 0x23
 80041c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7fd fc6d 	bl	8001aa4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 80041ca:	4b65      	ldr	r3, [pc, #404]	; (8004360 <HAL_ETH_Init+0x1c0>)
 80041cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041d0:	4a63      	ldr	r2, [pc, #396]	; (8004360 <HAL_ETH_Init+0x1c0>)
 80041d2:	f043 0302 	orr.w	r3, r3, #2
 80041d6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80041da:	4b61      	ldr	r3, [pc, #388]	; (8004360 <HAL_ETH_Init+0x1c0>)
 80041dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	7a1b      	ldrb	r3, [r3, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d103      	bne.n	80041f8 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 80041f0:	2000      	movs	r0, #0
 80041f2:	f7ff fe39 	bl	8003e68 <HAL_SBS_ETHInterfaceSelect>
 80041f6:	e003      	b.n	8004200 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 80041f8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80041fc:	f7ff fe34 	bl	8003e68 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8004200:	4b58      	ldr	r3, [pc, #352]	; (8004364 <HAL_ETH_Init+0x1c4>)
 8004202:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800421c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800421e:	f7ff fdf3 	bl	8003e08 <HAL_GetTick>
 8004222:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004224:	e011      	b.n	800424a <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004226:	f7ff fdef 	bl	8003e08 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004234:	d909      	bls.n	800424a <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2204      	movs	r2, #4
 800423a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	22e0      	movs	r2, #224	; 0xe0
 8004242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e086      	b.n	8004358 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e4      	bne.n	8004226 <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fdfb 	bl	8004e58 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004262:	f003 ff33 	bl	80080cc <HAL_RCC_GetHCLKFreq>
 8004266:	4603      	mov	r3, r0
 8004268:	4a3f      	ldr	r2, [pc, #252]	; (8004368 <HAL_ETH_Init+0x1c8>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	0c9a      	lsrs	r2, r3, #18
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3a01      	subs	r2, #1
 8004276:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fff6 	bl	800526c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004288:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800428c:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004298:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800429c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d009      	beq.n	80042c0 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	22e0      	movs	r2, #224	; 0xe0
 80042b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e04b      	b.n	8004358 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042cc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80042d0:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6952      	ldr	r2, [r2, #20]
 80042d8:	0051      	lsls	r1, r2, #1
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	430b      	orrs	r3, r1
 80042e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042e4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f001 f85c 	bl	80053a6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f001 f8a2 	bl	8005438 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	3305      	adds	r3, #5
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	021a      	lsls	r2, r3, #8
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	4619      	mov	r1, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	3303      	adds	r3, #3
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	061a      	lsls	r2, r3, #24
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	3302      	adds	r3, #2
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	041b      	lsls	r3, r3, #16
 8004326:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	3301      	adds	r3, #1
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004332:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004340:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004342:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2210      	movs	r2, #16
 8004352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	44020c00 	.word	0x44020c00
 8004364:	44000400 	.word	0x44000400
 8004368:	431bde83 	.word	0x431bde83

0800436c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800437a:	2b10      	cmp	r3, #16
 800437c:	d17c      	bne.n	8004478 <HAL_ETH_Start_IT+0x10c>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2223      	movs	r2, #35	; 0x23
 8004382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b3a      	ldr	r3, [pc, #232]	; (8004484 <HAL_ETH_Start_IT+0x118>)
 800439a:	430b      	orrs	r3, r1
 800439c:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	f043 6342 	orr.w	r3, r3, #203423744	; 0xc200000
 80043b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043b4:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2204      	movs	r2, #4
 80043bc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f9eb 	bl	800479a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0202 	orr.w	r2, r2, #2
 80043d2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004400:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004410:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800442c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004438:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8004444:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004448:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004454:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	f443 4350 	orr.w	r3, r3, #53248	; 0xd000
 8004460:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8004464:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004468:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2223      	movs	r2, #35	; 0x23
 8004470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e000      	b.n	800447a <HAL_ETH_Start_IT+0x10e>
  }
  else
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	0c020060 	.word	0x0c020060

08004488 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004496:	2b23      	cmp	r3, #35	; 0x23
 8004498:	d167      	bne.n	800456a <HAL_ETH_Stop_IT+0xe2>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2223      	movs	r2, #35	; 0x23
 800449e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044aa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 80044b6:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80044ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044be:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044da:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	f023 0301 	bic.w	r3, r3, #1
 80044f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044f6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0201 	bic.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0202 	bic.w	r2, r2, #2
 800452c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	e00e      	b.n	8004552 <HAL_ETH_Stop_IT+0xca>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	3212      	adds	r2, #18
 800453a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800453e:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3301      	adds	r3, #1
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b03      	cmp	r3, #3
 8004556:	d9ed      	bls.n	8004534 <HAL_ETH_Stop_IT+0xac>
    }

    heth->RxDescList.ItMode = 0U;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2210      	movs	r2, #16
 8004562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	e000      	b.n	800456c <HAL_ETH_Stop_IT+0xe4>
  }
  else
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
  }
}
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e03a      	b.n	8004612 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a2:	2b23      	cmp	r3, #35	; 0x23
 80045a4:	d134      	bne.n	8004610 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80045ae:	2201      	movs	r2, #1
 80045b0:	6839      	ldr	r1, [r7, #0]
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 ff9d 	bl	80054f2 <ETH_Prepare_Tx_Descriptors>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c4:	f043 0202 	orr.w	r2, r3, #2
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e01f      	b.n	8004612 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80045d2:	f3bf 8f4f 	dsb	sy
}
 80045d6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	629a      	str	r2, [r3, #40]	; 0x28
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d904      	bls.n	80045f4 <HAL_ETH_Transmit_IT+0x7c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ee:	1f1a      	subs	r2, r3, #4
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3106      	adds	r1, #6
 8004600:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004604:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004608:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	e000      	b.n	8004612 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
  }
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b088      	sub	sp, #32
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	f043 0201 	orr.w	r2, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e0a5      	b.n	8004792 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800464c:	2b23      	cmp	r3, #35	; 0x23
 800464e:	d001      	beq.n	8004654 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e09e      	b.n	8004792 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004658:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	3212      	adds	r2, #18
 8004660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004664:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800466a:	f1c3 0304 	rsb	r3, r3, #4
 800466e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004670:	e067      	b.n	8004742 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d103      	bne.n	80046a2 <HAL_ETH_ReadData+0x88>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d03d      	beq.n	800471e <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00d      	beq.n	80046e8 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80046f8:	461a      	mov	r2, r3
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	f7fd fbbb 	bl	8001e78 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	441a      	add	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	3301      	adds	r3, #1
 8004722:	61fb      	str	r3, [r7, #28]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	2b03      	cmp	r3, #3
 8004728:	d902      	bls.n	8004730 <HAL_ETH_ReadData+0x116>
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3b04      	subs	r3, #4
 800472e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	3212      	adds	r2, #18
 8004736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800473a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	3301      	adds	r3, #1
 8004740:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8004746:	2b00      	cmp	r3, #0
 8004748:	db06      	blt.n	8004758 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	429a      	cmp	r2, r3
 8004750:	d202      	bcs.n	8004758 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d08c      	beq.n	8004672 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	441a      	add	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f814 	bl	800479a <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d108      	bne.n	8004790 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e000      	b.n	8004792 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
}
 8004792:	4618      	mov	r0, r3
 8004794:	3720      	adds	r7, #32
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b088      	sub	sp, #32
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80047a6:	2301      	movs	r3, #1
 80047a8:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ae:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	3212      	adds	r2, #18
 80047b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ba:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047c0:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80047c2:	e03b      	b.n	800483c <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d112      	bne.n	80047f2 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80047cc:	f107 030c 	add.w	r3, r7, #12
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fd fb21 	bl	8001e18 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d102      	bne.n	80047e2 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	74fb      	strb	r3, [r7, #19]
 80047e0:	e007      	b.n	80047f2 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	461a      	mov	r2, r3
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	461a      	mov	r2, r3
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80047f2:	7cfb      	ldrb	r3, [r7, #19]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d021      	beq.n	800483c <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 80047f8:	f3bf 8f5f 	dmb	sy
}
 80047fc:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004802:	2b00      	cmp	r3, #0
 8004804:	d004      	beq.n	8004810 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 800480c:	60da      	str	r2, [r3, #12]
 800480e:	e003      	b.n	8004818 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8004816:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	3301      	adds	r3, #1
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	2b03      	cmp	r3, #3
 8004822:	d902      	bls.n	800482a <ETH_UpdateDescriptor+0x90>
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	3b04      	subs	r3, #4
 8004828:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	3212      	adds	r2, #18
 8004830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004834:	617b      	str	r3, [r7, #20]
      desccount--;
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	3b01      	subs	r3, #1
 800483a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <ETH_UpdateDescriptor+0xae>
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1bd      	bne.n	80047c4 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	429a      	cmp	r2, r3
 8004850:	d00d      	beq.n	800486e <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485a:	461a      	mov	r2, r3
 800485c:	2300      	movs	r3, #0
 800485e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800486e:	bf00      	nop
 8004870:	3720      	adds	r7, #32
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b086      	sub	sp, #24
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3318      	adds	r3, #24
 8004882:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004894:	e03f      	b.n	8004916 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8004896:	2301      	movs	r3, #1
 8004898:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	3b01      	subs	r3, #1
 800489e:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	3304      	adds	r3, #4
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d106      	bne.n	80048be <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	3301      	adds	r3, #1
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80048be:	7bbb      	ldrb	r3, [r7, #14]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d028      	beq.n	8004916 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68d9      	ldr	r1, [r3, #12]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4613      	mov	r3, r2
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	4413      	add	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	440b      	add	r3, r1
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	db1b      	blt.n	8004912 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	3304      	adds	r3, #4
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fd fb06 	bl	8001ef8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	3304      	adds	r3, #4
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	2200      	movs	r2, #0
 80048f8:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	3301      	adds	r3, #1
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004910:	e001      	b.n	8004916 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <HAL_ETH_ReleaseTxPacket+0xac>
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1b9      	bne.n	8004896 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e03e      	b.n	80049cc <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004956:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	055b      	lsls	r3, r3, #21
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	041b      	lsls	r3, r3, #16
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f043 030c 	orr.w	r3, r3, #12
 800497a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800498e:	f7ff fa3b 	bl	8003e08 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004994:	e009      	b.n	80049aa <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004996:	f7ff fa37 	bl	8003e08 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049a4:	d901      	bls.n	80049aa <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e010      	b.n	80049cc <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1ed      	bne.n	8004996 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e03c      	b.n	8004a70 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049fe:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	055b      	lsls	r3, r3, #21
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	041b      	lsls	r3, r3, #16
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 030c 	bic.w	r3, r3, #12
 8004a22:	f043 0304 	orr.w	r3, r3, #4
 8004a26:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <HAL_ETH_WritePHYRegister+0xa4>)
 8004a36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004a3a:	4a0f      	ldr	r2, [pc, #60]	; (8004a78 <HAL_ETH_WritePHYRegister+0xa4>)
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004a42:	f7ff f9e1 	bl	8003e08 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004a48:	e009      	b.n	8004a5e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004a4a:	f7ff f9dd 	bl	8003e08 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a58:	d901      	bls.n	8004a5e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e008      	b.n	8004a70 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ed      	bne.n	8004a4a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40028000 	.word	0x40028000

08004a7c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e1c3      	b.n	8004e18 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 020c 	and.w	r2, r3, #12
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0310 	and.w	r3, r3, #16
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf14      	ite	ne
 8004aac:	2301      	movne	r3, #1
 8004aae:	2300      	moveq	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	bf0c      	ite	eq
 8004ad6:	2301      	moveq	r3, #1
 8004ad8:	2300      	movne	r3, #0
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	bf14      	ite	ne
 8004af2:	2301      	movne	r3, #1
 8004af4:	2300      	moveq	r3, #0
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bf0c      	ite	eq
 8004b0c:	2301      	moveq	r3, #1
 8004b0e:	2300      	movne	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bf14      	ite	ne
 8004b26:	2301      	movne	r3, #1
 8004b28:	2300      	moveq	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	bf14      	ite	ne
 8004b40:	2301      	movne	r3, #1
 8004b42:	2300      	moveq	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bf14      	ite	ne
 8004b76:	2301      	movne	r3, #1
 8004b78:	2300      	moveq	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bf0c      	ite	eq
 8004b90:	2301      	moveq	r3, #1
 8004b92:	2300      	movne	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	bf0c      	ite	eq
 8004baa:	2301      	moveq	r3, #1
 8004bac:	2300      	movne	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	461a      	mov	r2, r3
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	bf14      	ite	ne
 8004bde:	2301      	movne	r3, #1
 8004be0:	2300      	moveq	r3, #0
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bf14      	ite	ne
 8004bf8:	2301      	movne	r3, #1
 8004bfa:	2300      	moveq	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004c0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bf14      	ite	ne
 8004c12:	2301      	movne	r3, #1
 8004c14:	2300      	moveq	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf14      	ite	ne
 8004c3a:	2301      	movne	r3, #1
 8004c3c:	2300      	moveq	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	bf0c      	ite	eq
 8004c70:	2301      	moveq	r3, #1
 8004c72:	2300      	movne	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	461a      	mov	r2, r3
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bf14      	ite	ne
 8004c8c:	2301      	movne	r3, #1
 8004c8e:	2300      	moveq	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004ca0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	bf14      	ite	ne
 8004ca8:	2301      	movne	r3, #1
 8004caa:	2300      	moveq	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	0e5b      	lsrs	r3, r3, #25
 8004cda:	f003 021f 	and.w	r2, r3, #31
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	bf14      	ite	ne
 8004cf0:	2301      	movne	r3, #1
 8004cf2:	2300      	moveq	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 020f 	and.w	r2, r3, #15
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	bf14      	ite	ne
 8004d1a:	2301      	movne	r3, #1
 8004d1c:	2300      	moveq	r3, #0
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	461a      	mov	r2, r3
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bf0c      	ite	eq
 8004d36:	2301      	moveq	r3, #1
 8004d38:	2300      	movne	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	0c1b      	lsrs	r3, r3, #16
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bf14      	ite	ne
 8004d70:	2301      	movne	r3, #1
 8004d72:	2300      	moveq	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d86:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bf14      	ite	ne
 8004d8e:	2301      	movne	r3, #1
 8004d90:	2300      	moveq	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004da4:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004db4:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bf14      	ite	ne
 8004dcc:	2301      	movne	r3, #1
 8004dce:	2300      	moveq	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bf14      	ite	ne
 8004dea:	2301      	movne	r3, #1
 8004dec:	2300      	moveq	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bf0c      	ite	eq
 8004e08:	2301      	moveq	r3, #1
 8004e0a:	2300      	movne	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e00b      	b.n	8004e50 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e3e:	2b10      	cmp	r3, #16
 8004e40:	d105      	bne.n	8004e4e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f86f 	bl	8004f28 <ETH_SetMACConfig>

    return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e000      	b.n	8004e50 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
  }
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004e72:	f003 f92b 	bl	80080cc <HAL_RCC_GetHCLKFreq>
 8004e76:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4a25      	ldr	r2, [pc, #148]	; (8004f10 <HAL_ETH_SetMDIOClockRange+0xb8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d908      	bls.n	8004e92 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4a24      	ldr	r2, [pc, #144]	; (8004f14 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d804      	bhi.n	8004e92 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	e034      	b.n	8004efc <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	4a1f      	ldr	r2, [pc, #124]	; (8004f14 <HAL_ETH_SetMDIOClockRange+0xbc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d908      	bls.n	8004eac <HAL_ETH_SetMDIOClockRange+0x54>
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d204      	bcs.n	8004eac <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	e027      	b.n	8004efc <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4a1a      	ldr	r2, [pc, #104]	; (8004f18 <HAL_ETH_SetMDIOClockRange+0xc0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d303      	bcc.n	8004ebc <HAL_ETH_SetMDIOClockRange+0x64>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4a19      	ldr	r2, [pc, #100]	; (8004f1c <HAL_ETH_SetMDIOClockRange+0xc4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d91e      	bls.n	8004efa <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4a17      	ldr	r2, [pc, #92]	; (8004f1c <HAL_ETH_SetMDIOClockRange+0xc4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d908      	bls.n	8004ed6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4a16      	ldr	r2, [pc, #88]	; (8004f20 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d804      	bhi.n	8004ed6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e012      	b.n	8004efc <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4a11      	ldr	r2, [pc, #68]	; (8004f20 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d908      	bls.n	8004ef0 <HAL_ETH_SetMDIOClockRange+0x98>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4a10      	ldr	r2, [pc, #64]	; (8004f24 <HAL_ETH_SetMDIOClockRange+0xcc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d804      	bhi.n	8004ef0 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	e005      	b.n	8004efc <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	e000      	b.n	8004efc <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004efa:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004f06:	bf00      	nop
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	01312cff 	.word	0x01312cff
 8004f14:	02160ebf 	.word	0x02160ebf
 8004f18:	03938700 	.word	0x03938700
 8004f1c:	05f5e0ff 	.word	0x05f5e0ff
 8004f20:	08f0d17f 	.word	0x08f0d17f
 8004f24:	0ee6b280 	.word	0x0ee6b280

08004f28 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004f3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	791b      	ldrb	r3, [r3, #4]
 8004f40:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004f42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	7b1b      	ldrb	r3, [r3, #12]
 8004f48:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004f4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	7b5b      	ldrb	r3, [r3, #13]
 8004f50:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004f52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	7b9b      	ldrb	r3, [r3, #14]
 8004f58:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004f5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	7bdb      	ldrb	r3, [r3, #15]
 8004f60:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f62:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	7c12      	ldrb	r2, [r2, #16]
 8004f68:	2a00      	cmp	r2, #0
 8004f6a:	d102      	bne.n	8004f72 <ETH_SetMACConfig+0x4a>
 8004f6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004f70:	e000      	b.n	8004f74 <ETH_SetMACConfig+0x4c>
 8004f72:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004f74:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	7c52      	ldrb	r2, [r2, #17]
 8004f7a:	2a00      	cmp	r2, #0
 8004f7c:	d102      	bne.n	8004f84 <ETH_SetMACConfig+0x5c>
 8004f7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f82:	e000      	b.n	8004f86 <ETH_SetMACConfig+0x5e>
 8004f84:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004f86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	7c9b      	ldrb	r3, [r3, #18]
 8004f8c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004f8e:	431a      	orrs	r2, r3
               macconf->Speed |
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004f94:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004f9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	7f1b      	ldrb	r3, [r3, #28]
 8004fa0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004fa2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	7f5b      	ldrb	r3, [r3, #29]
 8004fa8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004faa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	7f92      	ldrb	r2, [r2, #30]
 8004fb0:	2a00      	cmp	r2, #0
 8004fb2:	d102      	bne.n	8004fba <ETH_SetMACConfig+0x92>
 8004fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fb8:	e000      	b.n	8004fbc <ETH_SetMACConfig+0x94>
 8004fba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004fbc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	7fdb      	ldrb	r3, [r3, #31]
 8004fc2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004fc4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004fcc:	2a00      	cmp	r2, #0
 8004fce:	d102      	bne.n	8004fd6 <ETH_SetMACConfig+0xae>
 8004fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fd4:	e000      	b.n	8004fd8 <ETH_SetMACConfig+0xb0>
 8004fd6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004fd8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004fde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fe6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004fe8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b57      	ldr	r3, [pc, #348]	; (8005158 <ETH_SetMACConfig+0x230>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6812      	ldr	r2, [r2, #0]
 8005000:	68f9      	ldr	r1, [r7, #12]
 8005002:	430b      	orrs	r3, r1
 8005004:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005012:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005014:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800501c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800501e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005026:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005028:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005030:	2a00      	cmp	r2, #0
 8005032:	d102      	bne.n	800503a <ETH_SetMACConfig+0x112>
 8005034:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005038:	e000      	b.n	800503c <ETH_SetMACConfig+0x114>
 800503a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800503c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	4b43      	ldr	r3, [pc, #268]	; (800515c <ETH_SetMACConfig+0x234>)
 800504e:	4013      	ands	r3, r2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6812      	ldr	r2, [r2, #0]
 8005054:	68f9      	ldr	r1, [r7, #12]
 8005056:	430b      	orrs	r3, r1
 8005058:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005060:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	68f9      	ldr	r1, [r7, #12]
 800507e:	430b      	orrs	r3, r1
 8005080:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005088:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800508e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005096:	2a00      	cmp	r2, #0
 8005098:	d101      	bne.n	800509e <ETH_SetMACConfig+0x176>
 800509a:	2280      	movs	r2, #128	; 0x80
 800509c:	e000      	b.n	80050a0 <ETH_SetMACConfig+0x178>
 800509e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80050a0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050a6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050b2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80050b6:	4013      	ands	r3, r2
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6812      	ldr	r2, [r2, #0]
 80050bc:	68f9      	ldr	r1, [r7, #12]
 80050be:	430b      	orrs	r3, r1
 80050c0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80050c8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80050d0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050de:	f023 0103 	bic.w	r1, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80050f6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005112:	2a00      	cmp	r2, #0
 8005114:	d101      	bne.n	800511a <ETH_SetMACConfig+0x1f2>
 8005116:	2240      	movs	r2, #64	; 0x40
 8005118:	e000      	b.n	800511c <ETH_SetMACConfig+0x1f4>
 800511a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800511c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005124:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005126:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800512e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800513c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	430a      	orrs	r2, r1
 8005148:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800514c:	bf00      	nop
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	00048083 	.word	0x00048083
 800515c:	c0f88000 	.word	0xc0f88000

08005160 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8005178:	f023 0302 	bic.w	r3, r3, #2
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	6811      	ldr	r1, [r2, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	430b      	orrs	r3, r1
 8005186:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800518a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	791b      	ldrb	r3, [r3, #4]
 8005190:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005196:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	7b1b      	ldrb	r3, [r3, #12]
 800519c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 80051b0:	f023 0301 	bic.w	r3, r3, #1
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	68f9      	ldr	r1, [r7, #12]
 80051ba:	430b      	orrs	r3, r1
 80051bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051c0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	7b5b      	ldrb	r3, [r3, #13]
 80051c6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051d8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80051dc:	4b21      	ldr	r3, [pc, #132]	; (8005264 <ETH_SetDMAConfig+0x104>)
 80051de:	4013      	ands	r3, r2
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	68f9      	ldr	r1, [r7, #12]
 80051e6:	430b      	orrs	r3, r1
 80051e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051ec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	7d1b      	ldrb	r3, [r3, #20]
 80051f8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80051fa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	7f5b      	ldrb	r3, [r3, #29]
 8005200:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800520e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005212:	4b15      	ldr	r3, [pc, #84]	; (8005268 <ETH_SetDMAConfig+0x108>)
 8005214:	4013      	ands	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	68f9      	ldr	r1, [r7, #12]
 800521c:	430b      	orrs	r3, r1
 800521e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005222:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	7f1b      	ldrb	r3, [r3, #28]
 800522a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005244:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6812      	ldr	r2, [r2, #0]
 800524c:	68f9      	ldr	r1, [r7, #12]
 800524e:	430b      	orrs	r3, r1
 8005250:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005254:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005258:	bf00      	nop
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	fffec000 	.word	0xfffec000
 8005268:	ffc0efef 	.word	0xffc0efef

0800526c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b0a4      	sub	sp, #144	; 0x90
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800527a:	2300      	movs	r3, #0
 800527c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800527e:	2300      	movs	r3, #0
 8005280:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005284:	2300      	movs	r3, #0
 8005286:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005290:	2301      	movs	r3, #1
 8005292:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800529c:	2300      	movs	r3, #0
 800529e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80052a2:	2301      	movs	r3, #1
 80052a4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80052a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052ac:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80052b8:	2300      	movs	r3, #0
 80052ba:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80052be:	2300      	movs	r3, #0
 80052c0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80052c4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80052c8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80052ca:	2300      	movs	r3, #0
 80052cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80052d0:	2300      	movs	r3, #0
 80052d2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80052da:	2300      	movs	r3, #0
 80052dc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80052e0:	2300      	movs	r3, #0
 80052e2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80052e6:	2300      	movs	r3, #0
 80052e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80052ee:	2300      	movs	r3, #0
 80052f0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80052f8:	2300      	movs	r3, #0
 80052fa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80052fe:	2301      	movs	r3, #1
 8005300:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005304:	2320      	movs	r3, #32
 8005306:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005310:	2300      	movs	r3, #0
 8005312:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005316:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800531a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800531c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005320:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005322:	2300      	movs	r3, #0
 8005324:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005328:	2302      	movs	r3, #2
 800532a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800532e:	2300      	movs	r3, #0
 8005330:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005334:	2300      	movs	r3, #0
 8005336:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800533a:	2300      	movs	r3, #0
 800533c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005340:	2301      	movs	r3, #1
 8005342:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005346:	2300      	movs	r3, #0
 8005348:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800534a:	2301      	movs	r3, #1
 800534c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005350:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005354:	4619      	mov	r1, r3
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff fde6 	bl	8004f28 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800535c:	2301      	movs	r3, #1
 800535e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005360:	2301      	movs	r3, #1
 8005362:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005364:	2300      	movs	r3, #0
 8005366:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005368:	2300      	movs	r3, #0
 800536a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800536e:	2300      	movs	r3, #0
 8005370:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005372:	2300      	movs	r3, #0
 8005374:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005376:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800537a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800537c:	2300      	movs	r3, #0
 800537e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005380:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005384:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005386:	2300      	movs	r3, #0
 8005388:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800538c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005392:	f107 0308 	add.w	r3, r7, #8
 8005396:	4619      	mov	r1, r3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff fee1 	bl	8005160 <ETH_SetDMAConfig>
}
 800539e:	bf00      	nop
 80053a0:	3790      	adds	r7, #144	; 0x90
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e01d      	b.n	80053f0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68d9      	ldr	r1, [r3, #12]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4613      	mov	r3, r2
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	4413      	add	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	440b      	add	r3, r1
 80053c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2200      	movs	r2, #0
 80053d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2200      	movs	r2, #0
 80053d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2200      	movs	r2, #0
 80053dc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80053de:	68b9      	ldr	r1, [r7, #8]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	3206      	adds	r2, #6
 80053e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3301      	adds	r3, #1
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d9de      	bls.n	80053b4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005404:	461a      	mov	r2, r3
 8005406:	2303      	movs	r3, #3
 8005408:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005418:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005428:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	e023      	b.n	800548e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6919      	ldr	r1, [r3, #16]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4613      	mov	r3, r2
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	4413      	add	r3, r2
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	440b      	add	r3, r1
 8005456:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2200      	movs	r2, #0
 8005462:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2200      	movs	r2, #0
 8005468:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2200      	movs	r2, #0
 800546e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2200      	movs	r2, #0
 8005474:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2200      	movs	r2, #0
 800547a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	3212      	adds	r2, #18
 8005484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3301      	adds	r3, #1
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b03      	cmp	r3, #3
 8005492:	d9d8      	bls.n	8005446 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ba:	461a      	mov	r2, r3
 80054bc:	2303      	movs	r3, #3
 80054be:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691a      	ldr	r2, [r3, #16]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ce:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b08d      	sub	sp, #52	; 0x34
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3318      	adds	r3, #24
 8005502:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800551c:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005534:	d007      	beq.n	8005546 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	3304      	adds	r3, #4
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005546:	2302      	movs	r3, #2
 8005548:	e25a      	b.n	8005a00 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	d044      	beq.n	80055e0 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	0c1b      	lsrs	r3, r3, #16
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005562:	431a      	orrs	r2, r3
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005582:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b00      	cmp	r3, #0
 800558e:	d027      	beq.n	80055e0 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	b29a      	uxth	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	041b      	lsls	r3, r3, #16
 800559c:	431a      	orrs	r2, r3
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	431a      	orrs	r2, r3
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80055ce:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80055de:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d010      	beq.n	800560e <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80055f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	6992      	ldr	r2, [r2, #24]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	d105      	bne.n	8005626 <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	2b00      	cmp	r3, #0
 8005624:	d036      	beq.n	8005694 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005632:	f3bf 8f5f 	dmb	sy
}
 8005636:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005646:	3301      	adds	r3, #1
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564c:	2b03      	cmp	r3, #3
 800564e:	d902      	bls.n	8005656 <ETH_Prepare_Tx_Descriptors+0x164>
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005652:	3b04      	subs	r3, #4
 8005654:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800565a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800565e:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	3301      	adds	r3, #1
 8005664:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800566e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005672:	d10f      	bne.n	8005694 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800567c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 800567e:	f3bf 8f5f 	dmb	sy
}
 8005682:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8005690:	2302      	movs	r3, #2
 8005692:	e1b5      	b.n	8005a00 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	3301      	adds	r3, #1
 8005698:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80056ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	6852      	ldr	r2, [r2, #4]
 80056b4:	431a      	orrs	r2, r3
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d014      	beq.n	80056ec <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 80056da:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	6852      	ldr	r2, [r2, #4]
 80056e2:	0412      	lsls	r2, r2, #16
 80056e4:	431a      	orrs	r2, r3
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	609a      	str	r2, [r3, #8]
 80056ea:	e00a      	b.n	8005702 <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	2200      	movs	r2, #0
 80056f0:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 80056fa:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80056fe:	6a3a      	ldr	r2, [r7, #32]
 8005700:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0310 	and.w	r3, r3, #16
 800570a:	2b00      	cmp	r3, #0
 800570c:	d019      	beq.n	8005742 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	04db      	lsls	r3, r3, #19
 800571c:	431a      	orrs	r2, r3
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	0c9b      	lsrs	r3, r3, #18
 8005728:	049b      	lsls	r3, r3, #18
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	69d2      	ldr	r2, [r2, #28]
 800572e:	431a      	orrs	r2, r3
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	60da      	str	r2, [r3, #12]
 8005740:	e028      	b.n	8005794 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800574a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	6852      	ldr	r2, [r2, #4]
 8005752:	431a      	orrs	r2, r3
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	431a      	orrs	r2, r3
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	431a      	orrs	r2, r3
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ac:	431a      	orrs	r2, r3
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80057ca:	f3bf 8f5f 	dmb	sy
}
 80057ce:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80d9 	beq.w	800599c <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80057fc:	e0ce      	b.n	800599c <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	3301      	adds	r3, #1
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005812:	2b03      	cmp	r3, #3
 8005814:	d902      	bls.n	800581c <ETH_Prepare_Tx_Descriptors+0x32a>
 8005816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005818:	3b04      	subs	r3, #4
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005824:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800583a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800583e:	d007      	beq.n	8005850 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005844:	3304      	adds	r3, #4
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d029      	beq.n	80058a4 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800585c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800585e:	2300      	movs	r3, #0
 8005860:	62bb      	str	r3, [r7, #40]	; 0x28
 8005862:	e019      	b.n	8005898 <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8005864:	f3bf 8f5f 	dmb	sy
}
 8005868:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	3301      	adds	r3, #1
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587e:	2b03      	cmp	r3, #3
 8005880:	d902      	bls.n	8005888 <ETH_Prepare_Tx_Descriptors+0x396>
 8005882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005884:	3b04      	subs	r3, #4
 8005886:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800588c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005890:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	3301      	adds	r3, #1
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28
 8005898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	429a      	cmp	r2, r3
 800589e:	d3e1      	bcc.n	8005864 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 80058a0:	2302      	movs	r3, #2
 80058a2:	e0ad      	b.n	8005a00 <ETH_Prepare_Tx_Descriptors+0x50e>
    }

    descnbr += 1U;
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	3301      	adds	r3, #1
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	461a      	mov	r2, r3
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80058c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	6852      	ldr	r2, [r2, #4]
 80058ca:	431a      	orrs	r2, r3
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d014      	beq.n	8005902 <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 80058f0:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	6852      	ldr	r2, [r2, #4]
 80058f8:	0412      	lsls	r2, r2, #16
 80058fa:	431a      	orrs	r2, r3
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	609a      	str	r2, [r3, #8]
 8005900:	e00a      	b.n	8005918 <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	2200      	movs	r2, #0
 8005906:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005910:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005914:	6a3a      	ldr	r2, [r7, #32]
 8005916:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0310 	and.w	r3, r3, #16
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00f      	beq.n	8005944 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	0c9b      	lsrs	r3, r3, #18
 800592a:	049b      	lsls	r3, r3, #18
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	69d2      	ldr	r2, [r2, #28]
 8005930:	431a      	orrs	r2, r3
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	60da      	str	r2, [r3, #12]
 8005942:	e019      	b.n	8005978 <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800594c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	6852      	ldr	r2, [r2, #4]
 8005954:	431a      	orrs	r2, r3
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	431a      	orrs	r2, r3
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	3301      	adds	r3, #1
 800597c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800597e:	f3bf 8f5f 	dmb	sy
}
 8005982:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f47f af2c 	bne.w	80057fe <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d006      	beq.n	80059ba <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	609a      	str	r2, [r3, #8]
 80059b8:	e005      	b.n	80059c6 <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059d6:	6979      	ldr	r1, [r7, #20]
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	3304      	adds	r3, #4
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059e6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80059e8:	b672      	cpsid	i
}
 80059ea:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	4413      	add	r3, r2
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80059fa:	b662      	cpsie	i
}
 80059fc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3734      	adds	r7, #52	; 0x34
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e147      	b.n	8005cae <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fd f972 	bl	8002d1c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0210 	bic.w	r2, r2, #16
 8005a46:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a48:	f7fe f9de 	bl	8003e08 <HAL_GetTick>
 8005a4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005a4e:	e012      	b.n	8005a76 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005a50:	f7fe f9da 	bl	8003e08 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b0a      	cmp	r3, #10
 8005a5c:	d90b      	bls.n	8005a76 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a62:	f043 0201 	orr.w	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e11b      	b.n	8005cae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d0e5      	beq.n	8005a50 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699a      	ldr	r2, [r3, #24]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a94:	f7fe f9b8 	bl	8003e08 <HAL_GetTick>
 8005a98:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005a9a:	e012      	b.n	8005ac2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005a9c:	f7fe f9b4 	bl	8003e08 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b0a      	cmp	r3, #10
 8005aa8:	d90b      	bls.n	8005ac2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aae:	f043 0201 	orr.w	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2203      	movs	r2, #3
 8005aba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e0f5      	b.n	8005cae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0e5      	beq.n	8005a9c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0202 	orr.w	r2, r2, #2
 8005ade:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a74      	ldr	r2, [pc, #464]	; (8005cb8 <HAL_FDCAN_Init+0x2ac>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d103      	bne.n	8005af2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005aea:	4a74      	ldr	r2, [pc, #464]	; (8005cbc <HAL_FDCAN_Init+0x2b0>)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	7c1b      	ldrb	r3, [r3, #16]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d108      	bne.n	8005b0c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699a      	ldr	r2, [r3, #24]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b08:	619a      	str	r2, [r3, #24]
 8005b0a:	e007      	b.n	8005b1c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b1a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	7c5b      	ldrb	r3, [r3, #17]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d108      	bne.n	8005b36 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699a      	ldr	r2, [r3, #24]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b32:	619a      	str	r2, [r3, #24]
 8005b34:	e007      	b.n	8005b46 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699a      	ldr	r2, [r3, #24]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b44:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	7c9b      	ldrb	r3, [r3, #18]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d108      	bne.n	8005b60 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699a      	ldr	r2, [r3, #24]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b5c:	619a      	str	r2, [r3, #24]
 8005b5e:	e007      	b.n	8005b70 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b6e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	699a      	ldr	r2, [r3, #24]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005b94:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0210 	bic.w	r2, r2, #16
 8005ba4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d108      	bne.n	8005bc0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	699a      	ldr	r2, [r3, #24]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0204 	orr.w	r2, r2, #4
 8005bbc:	619a      	str	r2, [r3, #24]
 8005bbe:	e02c      	b.n	8005c1a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d028      	beq.n	8005c1a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d01c      	beq.n	8005c0a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	699a      	ldr	r2, [r3, #24]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005bde:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0210 	orr.w	r2, r2, #16
 8005bee:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	d110      	bne.n	8005c1a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0220 	orr.w	r2, r2, #32
 8005c06:	619a      	str	r2, [r3, #24]
 8005c08:	e007      	b.n	8005c1a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	699a      	ldr	r2, [r3, #24]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0220 	orr.w	r2, r2, #32
 8005c18:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c2a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005c32:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005c42:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005c44:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c4e:	d115      	bne.n	8005c7c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005c5e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	3b01      	subs	r3, #1
 8005c66:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005c68:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	3b01      	subs	r3, #1
 8005c72:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005c78:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005c7a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fdac 	bl	80067f0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	4000a400 	.word	0x4000a400
 8005cbc:	4000a500 	.word	0x4000a500

08005cc0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005cd0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d002      	beq.n	8005cde <HAL_FDCAN_ConfigFilter+0x1e>
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d13d      	bne.n	8005d5a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d119      	bne.n	8005d1a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005cf2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8005cfa:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	e01d      	b.n	8005d56 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	075a      	lsls	r2, r3, #29
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	079a      	lsls	r2, r3, #30
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	4413      	add	r3, r2
 8005d42:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	e006      	b.n	8005d68 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5e:	f043 0202 	orr.w	r2, r3, #2
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
  }
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d116      	bne.n	8005dbc <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d96:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	011a      	lsls	r2, r3, #4
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	431a      	orrs	r2, r3
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	431a      	orrs	r2, r3
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	431a      	orrs	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8005db8:	2300      	movs	r3, #0
 8005dba:	e006      	b.n	8005dca <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc0:	f043 0204 	orr.w	r2, r3, #4
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
  }
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b085      	sub	sp, #20
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d108      	bne.n	8005e00 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	0219      	lsls	r1, r3, #8
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e006      	b.n	8005e0e <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e04:	f043 0204 	orr.w	r2, r3, #4
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
  }
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d109      	bne.n	8005e42 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005e3c:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	e006      	b.n	8005e50 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e46:	f043 0204 	orr.w	r2, r3, #4
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
  }
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d110      	bne.n	8005e92 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0201 	bic.w	r2, r2, #1
 8005e86:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e006      	b.n	8005ea0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e96:	f043 0204 	orr.w	r2, r3, #4
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
  }
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d156      	bne.n	8005f72 <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005ed4:	e011      	b.n	8005efa <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b0a      	cmp	r3, #10
 8005eda:	d90b      	bls.n	8005ef4 <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee0:	f043 0201 	orr.w	r2, r3, #1
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2203      	movs	r2, #3
 8005eec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e045      	b.n	8005f80 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0e6      	beq.n	8005ed6 <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0210 	bic.w	r2, r2, #16
 8005f1a:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005f1c:	e011      	b.n	8005f42 <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b0a      	cmp	r3, #10
 8005f22:	d90b      	bls.n	8005f3c <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f28:	f043 0201 	orr.w	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2203      	movs	r2, #3
 8005f34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e021      	b.n	8005f80 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	f003 0308 	and.w	r3, r3, #8
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d0e6      	beq.n	8005f1e <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699a      	ldr	r2, [r3, #24]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0202 	orr.w	r2, r2, #2
 8005f5e:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e006      	b.n	8005f80 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f76:	f043 0208 	orr.w	r2, r3, #8
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
  }
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d12c      	bne.n	8005ffe <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d007      	beq.n	8005fc4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e023      	b.n	800600c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005fcc:	0c1b      	lsrs	r3, r3, #16
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 fc6a 	bl	80068b4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8005fec:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	409a      	lsls	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e006      	b.n	800600c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006002:	f043 0208 	orr.w	r2, r3, #8
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
  }
}
 800600c:	4618      	mov	r0, r3
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006014:	b480      	push	{r7}
 8006016:	b08b      	sub	sp, #44	; 0x2c
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800602c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800602e:	7efb      	ldrb	r3, [r7, #27]
 8006030:	2b02      	cmp	r3, #2
 8006032:	f040 80e8 	bne.w	8006206 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b40      	cmp	r3, #64	; 0x40
 800603a:	d137      	bne.n	80060ac <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	2b00      	cmp	r3, #0
 800604a:	d107      	bne.n	800605c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006050:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e0db      	b.n	8006214 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006064:	0e1b      	lsrs	r3, r3, #24
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b01      	cmp	r3, #1
 800606c:	d10a      	bne.n	8006084 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006076:	0a5b      	lsrs	r3, r3, #9
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006080:	2301      	movs	r3, #1
 8006082:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608c:	0a1b      	lsrs	r3, r3, #8
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	4613      	mov	r3, r2
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	4413      	add	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	440b      	add	r3, r1
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
 80060aa:	e036      	b.n	800611a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060b4:	f003 030f 	and.w	r3, r3, #15
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d107      	bne.n	80060cc <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e0a3      	b.n	8006214 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060d4:	0e1b      	lsrs	r3, r3, #24
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d10a      	bne.n	80060f4 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060e6:	0a1b      	lsrs	r3, r3, #8
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80060f0:	2301      	movs	r3, #1
 80060f2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060fc:	0a1b      	lsrs	r3, r3, #8
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	69fa      	ldr	r2, [r7, #28]
 8006104:	4413      	add	r3, r2
 8006106:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800610c:	69fa      	ldr	r2, [r7, #28]
 800610e:	4613      	mov	r3, r2
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	4413      	add	r3, r2
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	440b      	add	r3, r1
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d107      	bne.n	800613e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	0c9b      	lsrs	r3, r3, #18
 8006134:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	e005      	b.n	800614a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	3304      	adds	r3, #4
 8006166:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	b29a      	uxth	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	0c1b      	lsrs	r3, r3, #16
 8006178:	f003 020f 	and.w	r2, r3, #15
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	0e1b      	lsrs	r3, r3, #24
 800619e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	0fda      	lsrs	r2, r3, #31
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	3304      	adds	r3, #4
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80061ba:	2300      	movs	r3, #0
 80061bc:	623b      	str	r3, [r7, #32]
 80061be:	e00a      	b.n	80061d6 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	6a3b      	ldr	r3, [r7, #32]
 80061c4:	441a      	add	r2, r3
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	440b      	add	r3, r1
 80061cc:	7812      	ldrb	r2, [r2, #0]
 80061ce:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	3301      	adds	r3, #1
 80061d4:	623b      	str	r3, [r7, #32]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	4a11      	ldr	r2, [pc, #68]	; (8006220 <HAL_FDCAN_GetRxMessage+0x20c>)
 80061dc:	5cd3      	ldrb	r3, [r2, r3]
 80061de:	461a      	mov	r2, r3
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d3ec      	bcc.n	80061c0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b40      	cmp	r3, #64	; 0x40
 80061ea:	d105      	bne.n	80061f8 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80061f6:	e004      	b.n	8006202 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69fa      	ldr	r2, [r7, #28]
 80061fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	e006      	b.n	8006214 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800620a:	f043 0208 	orr.w	r2, r3, #8
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
  }
}
 8006214:	4618      	mov	r0, r3
 8006216:	372c      	adds	r7, #44	; 0x2c
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	08026f78 	.word	0x08026f78

08006224 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006234:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f003 0207 	and.w	r2, r3, #7
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	0a1b      	lsrs	r3, r3, #8
 8006244:	f003 0207 	and.w	r2, r3, #7
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f003 0218 	and.w	r2, r3, #24
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	f003 0201 	and.w	r2, r3, #1
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	099b      	lsrs	r3, r3, #6
 8006266:	f003 0201 	and.w	r2, r3, #1
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	09db      	lsrs	r3, r3, #7
 8006272:	f003 0201 	and.w	r2, r3, #1
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	0adb      	lsrs	r3, r3, #11
 800627e:	f003 0201 	and.w	r2, r3, #1
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	0b1b      	lsrs	r3, r3, #12
 800628a:	f003 0201 	and.w	r2, r3, #1
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	0b5b      	lsrs	r3, r3, #13
 8006296:	f003 0201 	and.w	r2, r3, #1
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	0b9b      	lsrs	r3, r3, #14
 80062a2:	f003 0201 	and.w	r2, r3, #1
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	625a      	str	r2, [r3, #36]	; 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	0c1b      	lsrs	r3, r3, #16
 80062ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Return function status */
  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_FDCAN_GetErrorCounters>:
  * @param  ErrorCounters pointer to an FDCAN_ErrorCountersTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetErrorCounters(const FDCAN_HandleTypeDef *hfdcan,
                                             FDCAN_ErrorCountersTypeDef *ErrorCounters)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t CountersReg;

  /* Read the error counters register */
  CountersReg = READ_REG(hfdcan->Instance->ECR);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	60fb      	str	r3, [r7, #12]

  /* Fill the error counters structure */
  ErrorCounters->TxErrorCnt = ((CountersReg & FDCAN_ECR_TEC) >> FDCAN_ECR_TEC_Pos);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	601a      	str	r2, [r3, #0]
  ErrorCounters->RxErrorCnt = ((CountersReg & FDCAN_ECR_REC) >> FDCAN_ECR_REC_Pos);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	0a1b      	lsrs	r3, r3, #8
 80062e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	605a      	str	r2, [r3, #4]
  ErrorCounters->RxErrorPassive = ((CountersReg & FDCAN_ECR_RP) >> FDCAN_ECR_RP_Pos);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	0bdb      	lsrs	r3, r3, #15
 80062ee:	f003 0201 	and.w	r2, r3, #1
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	609a      	str	r2, [r3, #8]
  ErrorCounters->ErrorLogging = ((CountersReg & FDCAN_ECR_CEL) >> FDCAN_ECR_CEL_Pos);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	0c1b      	lsrs	r3, r3, #16
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 800630e:	b480      	push	{r7}
 8006310:	b085      	sub	sp, #20
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8006324:	68fb      	ldr	r3, [r7, #12]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8006332:	b480      	push	{r7}
 8006334:	b087      	sub	sp, #28
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006344:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006346:	7dfb      	ldrb	r3, [r7, #23]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d003      	beq.n	8006354 <HAL_FDCAN_ActivateNotification+0x22>
 800634c:	7dfb      	ldrb	r3, [r7, #23]
 800634e:	2b02      	cmp	r3, #2
 8006350:	f040 80c8 	bne.w	80064e4 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635a:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	2b00      	cmp	r3, #0
 8006364:	d004      	beq.n	8006370 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d03b      	beq.n	80063e8 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006376:	2b00      	cmp	r3, #0
 8006378:	d004      	beq.n	8006384 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d031      	beq.n	80063e8 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800638a:	2b00      	cmp	r3, #0
 800638c:	d004      	beq.n	8006398 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d027      	beq.n	80063e8 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d004      	beq.n	80063ac <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f003 0308 	and.w	r3, r3, #8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d01d      	beq.n	80063e8 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d004      	beq.n	80063c0 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f003 0310 	and.w	r3, r3, #16
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d013      	beq.n	80063e8 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d004      	beq.n	80063d4 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d009      	beq.n	80063e8 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00c      	beq.n	80063f8 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d107      	bne.n	80063f8 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d004      	beq.n	800640c <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d13b      	bne.n	8006484 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006412:	2b00      	cmp	r3, #0
 8006414:	d004      	beq.n	8006420 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d131      	bne.n	8006484 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006426:	2b00      	cmp	r3, #0
 8006428:	d004      	beq.n	8006434 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d127      	bne.n	8006484 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800643a:	2b00      	cmp	r3, #0
 800643c:	d004      	beq.n	8006448 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d11d      	bne.n	8006484 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800644e:	2b00      	cmp	r3, #0
 8006450:	d004      	beq.n	800645c <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f003 0310 	and.w	r3, r3, #16
 8006458:	2b00      	cmp	r3, #0
 800645a:	d113      	bne.n	8006484 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006462:	2b00      	cmp	r3, #0
 8006464:	d004      	beq.n	8006470 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b00      	cmp	r3, #0
 800646e:	d109      	bne.n	8006484 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00c      	beq.n	8006494 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d007      	beq.n	8006494 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0202 	orr.w	r2, r2, #2
 8006492:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649a:	2b00      	cmp	r3, #0
 800649c:	d009      	beq.n	80064b2 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d009      	beq.n	80064d0 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	430a      	orrs	r2, r1
 80064de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e006      	b.n	80064f2 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e8:	f043 0202 	orr.w	r2, r3, #2
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
  }
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b08c      	sub	sp, #48	; 0x30
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800650c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006510:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800651a:	4013      	ands	r3, r2
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006532:	4013      	ands	r3, r2
 8006534:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800653c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006540:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654a:	4013      	ands	r3, r2
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006554:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8006558:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006560:	6a3a      	ldr	r2, [r7, #32]
 8006562:	4013      	ands	r3, r2
 8006564:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800656c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006570:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006578:	69fa      	ldr	r2, [r7, #28]
 800657a:	4013      	ands	r3, r2
 800657c:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006584:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658c:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00b      	beq.n	80065b0 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d006      	beq.n	80065b0 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2240      	movs	r2, #64	; 0x40
 80065a8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f916 	bl	80067dc <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d019      	beq.n	80065ee <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d014      	beq.n	80065ee <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80065cc:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4013      	ands	r3, r2
 80065da:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065e4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80065e6:	6939      	ldr	r1, [r7, #16]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f8d8 	bl	800679e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80065ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d007      	beq.n	8006604 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065fa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80065fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f8a2 	bl	8006748 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	2b00      	cmp	r3, #0
 8006608:	d007      	beq.n	800661a <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006610:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7fc fb59 	bl	8002ccc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006626:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f897 	bl	800675e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00c      	beq.n	8006654 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800664c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f890 	bl	8006774 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665a:	2b00      	cmp	r3, #0
 800665c:	d018      	beq.n	8006690 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006664:	2b00      	cmp	r3, #0
 8006666:	d013      	beq.n	8006690 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006670:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4013      	ands	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2280      	movs	r2, #128	; 0x80
 8006686:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006688:	68f9      	ldr	r1, [r7, #12]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f87c 	bl	8006788 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00c      	beq.n	80066b4 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d007      	beq.n	80066b4 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066ac:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f880 	bl	80067b4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00c      	beq.n	80066d8 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d007      	beq.n	80066d8 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80066d0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f878 	bl	80067c8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00f      	beq.n	8006702 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00a      	beq.n	8006702 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80066f4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d007      	beq.n	8006718 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006710:	69f9      	ldr	r1, [r7, #28]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7fc fa92 	bl	8002c3c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d009      	beq.n	8006732 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6a3a      	ldr	r2, [r7, #32]
 8006724:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	431a      	orrs	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fc fa8e 	bl	8002c5c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006740:	bf00      	nop
 8006742:	3730      	adds	r7, #48	; 0x30
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80067f8:	4b2c      	ldr	r3, [pc, #176]	; (80068ac <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80067fa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a2b      	ldr	r2, [pc, #172]	; (80068b0 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d103      	bne.n	800680e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800680c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800681c:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006824:	041a      	lsls	r2, r3, #16
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006842:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684a:	061a      	lsls	r2, r3, #24
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	e005      	b.n	8006890 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3304      	adds	r3, #4
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	429a      	cmp	r2, r3
 800689a:	d3f3      	bcc.n	8006884 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800689c:	bf00      	nop
 800689e:	bf00      	nop
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	4000ac00 	.word	0x4000ac00
 80068b0:	4000a800 	.word	0x4000a800

080068b4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b089      	sub	sp, #36	; 0x24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10a      	bne.n	80068e0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80068d2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80068da:	4313      	orrs	r3, r2
 80068dc:	61fb      	str	r3, [r7, #28]
 80068de:	e00a      	b.n	80068f6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80068e8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80068ee:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80068f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068f4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006900:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006906:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800690c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	4613      	mov	r3, r2
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	4413      	add	r3, r2
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	440b      	add	r3, r1
 8006928:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	69fa      	ldr	r2, [r7, #28]
 800692e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	3304      	adds	r3, #4
 8006934:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	3304      	adds	r3, #4
 8006940:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006942:	2300      	movs	r3, #0
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	e020      	b.n	800698a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	3303      	adds	r3, #3
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	4413      	add	r3, r2
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	3302      	adds	r3, #2
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	440b      	add	r3, r1
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006960:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	3301      	adds	r3, #1
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	440b      	add	r3, r1
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800696e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006970:	6879      	ldr	r1, [r7, #4]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	440a      	add	r2, r1
 8006976:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006978:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	3304      	adds	r3, #4
 8006982:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	3304      	adds	r3, #4
 8006988:	617b      	str	r3, [r7, #20]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	4a06      	ldr	r2, [pc, #24]	; (80069a8 <FDCAN_CopyMessageToRAM+0xf4>)
 8006990:	5cd3      	ldrb	r3, [r2, r3]
 8006992:	461a      	mov	r2, r3
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	4293      	cmp	r3, r2
 8006998:	d3d6      	bcc.n	8006948 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800699a:	bf00      	nop
 800699c:	bf00      	nop
 800699e:	3724      	adds	r7, #36	; 0x24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	08026f78 	.word	0x08026f78

080069ac <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b088      	sub	sp, #32
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80069b8:	4b32      	ldr	r3, [pc, #200]	; (8006a84 <HAL_FLASH_Program+0xd8>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d101      	bne.n	80069c4 <HAL_FLASH_Program+0x18>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e05a      	b.n	8006a7a <HAL_FLASH_Program+0xce>
 80069c4:	4b2f      	ldr	r3, [pc, #188]	; (8006a84 <HAL_FLASH_Program+0xd8>)
 80069c6:	2201      	movs	r2, #1
 80069c8:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80069ca:	4b2e      	ldr	r3, [pc, #184]	; (8006a84 <HAL_FLASH_Program+0xd8>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80069d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80069d4:	f000 f8a4 	bl	8006b20 <FLASH_WaitForLastOperation>
 80069d8:	4603      	mov	r3, r0
 80069da:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 80069dc:	7ffb      	ldrb	r3, [r7, #31]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d147      	bne.n	8006a72 <HAL_FLASH_Program+0xc6>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 80069e2:	4a28      	ldr	r2, [pc, #160]	; (8006a84 <HAL_FLASH_Program+0xd8>)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80069e8:	4b27      	ldr	r3, [pc, #156]	; (8006a88 <HAL_FLASH_Program+0xdc>)
 80069ea:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d104      	bne.n	8006a00 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	68b8      	ldr	r0, [r7, #8]
 80069fa:	f000 f8df 	bl	8006bbc <FLASH_Program_QuadWord>
 80069fe:	e01b      	b.n	8006a38 <HAL_FLASH_Program+0x8c>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4a22      	ldr	r2, [pc, #136]	; (8006a8c <HAL_FLASH_Program+0xe0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <HAL_FLASH_Program+0x64>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4a21      	ldr	r2, [pc, #132]	; (8006a90 <HAL_FLASH_Program+0xe4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d104      	bne.n	8006a1a <HAL_FLASH_Program+0x6e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 8006a10:	6879      	ldr	r1, [r7, #4]
 8006a12:	68b8      	ldr	r0, [r7, #8]
 8006a14:	f000 f90e 	bl	8006c34 <FLASH_Program_QuadWord_OBK>
 8006a18:	e00e      	b.n	8006a38 <HAL_FLASH_Program+0x8c>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a20:	4a1c      	ldr	r2, [pc, #112]	; (8006a94 <HAL_FLASH_Program+0xe8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d104      	bne.n	8006a30 <HAL_FLASH_Program+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	68b8      	ldr	r0, [r7, #8]
 8006a2a:	f000 f94f 	bl	8006ccc <FLASH_Program_HalfWord>
 8006a2e:	e003      	b.n	8006a38 <HAL_FLASH_Program+0x8c>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	68b8      	ldr	r0, [r7, #8]
 8006a34:	f000 f94a 	bl	8006ccc <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006a38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a3c:	f000 f870 	bl	8006b20 <FLASH_WaitForLastOperation>
 8006a40:	4603      	mov	r3, r0
 8006a42:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 4330 	bic.w	r3, r3, #2952790016	; 0xb0000000
 8006a4e:	f023 0304 	bic.w	r3, r3, #4
 8006a52:	43db      	mvns	r3, r3
 8006a54:	401a      	ands	r2, r3
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4a0c      	ldr	r2, [pc, #48]	; (8006a90 <HAL_FLASH_Program+0xe4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d107      	bne.n	8006a72 <HAL_FLASH_Program+0xc6>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8006a62:	4b0d      	ldr	r3, [pc, #52]	; (8006a98 <HAL_FLASH_Program+0xec>)
 8006a64:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f023 0204 	bic.w	r2, r3, #4
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006a72:	4b04      	ldr	r3, [pc, #16]	; (8006a84 <HAL_FLASH_Program+0xd8>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8006a78:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3720      	adds	r7, #32
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20000048 	.word	0x20000048
 8006a88:	40022028 	.word	0x40022028
 8006a8c:	10000002 	.word	0x10000002
 8006a90:	10000006 	.word	0x10000006
 8006a94:	40000002 	.word	0x40000002
 8006a98:	40022040 	.word	0x40022040

08006a9c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8006aa6:	4b0d      	ldr	r3, [pc, #52]	; (8006adc <HAL_FLASH_Unlock+0x40>)
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00d      	beq.n	8006ace <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8006ab2:	4b0a      	ldr	r3, [pc, #40]	; (8006adc <HAL_FLASH_Unlock+0x40>)
 8006ab4:	4a0a      	ldr	r2, [pc, #40]	; (8006ae0 <HAL_FLASH_Unlock+0x44>)
 8006ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8006ab8:	4b08      	ldr	r3, [pc, #32]	; (8006adc <HAL_FLASH_Unlock+0x40>)
 8006aba:	4a0a      	ldr	r2, [pc, #40]	; (8006ae4 <HAL_FLASH_Unlock+0x48>)
 8006abc:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8006abe:	4b07      	ldr	r3, [pc, #28]	; (8006adc <HAL_FLASH_Unlock+0x40>)
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8006ace:	79fb      	ldrb	r3, [r7, #7]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	40022000 	.word	0x40022000
 8006ae0:	45670123 	.word	0x45670123
 8006ae4:	cdef89ab 	.word	0xcdef89ab

08006ae8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 8006af2:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <HAL_FLASH_Lock+0x34>)
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af6:	4a09      	ldr	r2, [pc, #36]	; (8006b1c <HAL_FLASH_Lock+0x34>)
 8006af8:	f043 0301 	orr.w	r3, r3, #1
 8006afc:	6293      	str	r3, [r2, #40]	; 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 8006afe:	4b07      	ldr	r3, [pc, #28]	; (8006b1c <HAL_FLASH_Lock+0x34>)
 8006b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	40022000 	.word	0x40022000

08006b20 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 8006b28:	f7fd f96e 	bl	8003e08 <HAL_GetTick>
 8006b2c:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8006b2e:	4b20      	ldr	r3, [pc, #128]	; (8006bb0 <FLASH_WaitForLastOperation+0x90>)
 8006b30:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8006b32:	e010      	b.n	8006b56 <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3a:	d00c      	beq.n	8006b56 <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b3c:	f7fd f964 	bl	8003e08 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d302      	bcc.n	8006b52 <FLASH_WaitForLastOperation+0x32>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e027      	b.n	8006ba6 <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 030b 	and.w	r3, r3, #11
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e8      	bne.n	8006b34 <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 8006b62:	4b14      	ldr	r3, [pc, #80]	; (8006bb4 <FLASH_WaitForLastOperation+0x94>)
 8006b64:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
 8006b6e:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00c      	beq.n	8006b90 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8006b76:	4b10      	ldr	r3, [pc, #64]	; (8006bb8 <FLASH_WaitForLastOperation+0x98>)
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	4a0e      	ldr	r2, [pc, #56]	; (8006bb8 <FLASH_WaitForLastOperation+0x98>)
 8006b80:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f403 027e 	and.w	r2, r3, #16646144	; 0xfe0000
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e00a      	b.n	8006ba6 <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ba2:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	40022020 	.word	0x40022020
 8006bb4:	40022030 	.word	0x40022030
 8006bb8:	20000048 	.word	0x20000048

08006bbc <FLASH_Program_QuadWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b08b      	sub	sp, #44	; 0x2c
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8006bc6:	2304      	movs	r3, #4
 8006bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006bd4:	4b16      	ldr	r3, [pc, #88]	; (8006c30 <FLASH_Program_QuadWord+0x74>)
 8006bd6:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f043 0202 	orr.w	r2, r3, #2
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006be4:	f3ef 8310 	mrs	r3, PRIMASK
 8006be8:	613b      	str	r3, [r7, #16]
  return(result);
 8006bea:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006bec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006bee:	b672      	cpsid	i
}
 8006bf0:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	623b      	str	r3, [r7, #32]
    src_addr++;
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	3304      	adds	r3, #4
 8006c04:	61fb      	str	r3, [r7, #28]
    index--;
 8006c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 8006c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1ec      	bne.n	8006bf2 <FLASH_Program_QuadWord+0x36>
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f383 8810 	msr	PRIMASK, r3
}
 8006c22:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006c24:	bf00      	nop
 8006c26:	372c      	adds	r7, #44	; 0x2c
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	40022028 	.word	0x40022028

08006c34 <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b08b      	sub	sp, #44	; 0x2c
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8006c3e:	2304      	movs	r3, #4
 8006c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006c4c:	4b1c      	ldr	r3, [pc, #112]	; (8006cc0 <FLASH_Program_QuadWord_OBK+0x8c>)
 8006c4e:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8006c50:	4b1c      	ldr	r3, [pc, #112]	; (8006cc4 <FLASH_Program_QuadWord_OBK+0x90>)
 8006c52:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f043 0202 	orr.w	r2, r3, #2
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	4b18      	ldr	r3, [pc, #96]	; (8006cc8 <FLASH_Program_QuadWord_OBK+0x94>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006c72:	f3ef 8310 	mrs	r3, PRIMASK
 8006c76:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c78:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006c7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006c7c:	b672      	cpsid	i
}
 8006c7e:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	623b      	str	r3, [r7, #32]
    src_addr++;
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	3304      	adds	r3, #4
 8006c92:	61fb      	str	r3, [r7, #28]
    index--;
 8006c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 8006c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1ec      	bne.n	8006c80 <FLASH_Program_QuadWord_OBK+0x4c>
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f383 8810 	msr	PRIMASK, r3
}
 8006cb0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006cb2:	bf00      	nop
 8006cb4:	372c      	adds	r7, #44	; 0x2c
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40022028 	.word	0x40022028
 8006cc4:	40022040 	.word	0x40022040
 8006cc8:	20000048 	.word	0x20000048

08006ccc <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006cd6:	4b09      	ldr	r3, [pc, #36]	; (8006cfc <FLASH_Program_HalfWord+0x30>)
 8006cd8:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f043 0202 	orr.w	r2, r3, #2
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8812      	ldrh	r2, [r2, #0]
 8006cec:	b292      	uxth	r2, r2
 8006cee:	801a      	strh	r2, [r3, #0]
}
 8006cf0:	bf00      	nop
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	40022028 	.word	0x40022028

08006d00 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006d0a:	4b3a      	ldr	r3, [pc, #232]	; (8006df4 <HAL_FLASHEx_Erase+0xf4>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <HAL_FLASHEx_Erase+0x16>
 8006d12:	2302      	movs	r3, #2
 8006d14:	e06a      	b.n	8006dec <HAL_FLASHEx_Erase+0xec>
 8006d16:	4b37      	ldr	r3, [pc, #220]	; (8006df4 <HAL_FLASHEx_Erase+0xf4>)
 8006d18:	2201      	movs	r2, #1
 8006d1a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006d1c:	4b35      	ldr	r3, [pc, #212]	; (8006df4 <HAL_FLASHEx_Erase+0xf4>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006d22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d26:	f7ff fefb 	bl	8006b20 <FLASH_WaitForLastOperation>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d157      	bne.n	8006de4 <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a2e      	ldr	r2, [pc, #184]	; (8006df4 <HAL_FLASHEx_Erase+0xf4>)
 8006d3a:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006d3c:	4b2e      	ldr	r3, [pc, #184]	; (8006df8 <HAL_FLASHEx_Erase+0xf8>)
 8006d3e:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d48:	f248 0208 	movw	r2, #32776	; 0x8008
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d10b      	bne.n	8006d68 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 f853 	bl	8006e00 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d5e:	f7ff fedf 	bl	8006b20 <FLASH_WaitForLastOperation>
 8006d62:	4603      	mov	r3, r0
 8006d64:	75fb      	strb	r3, [r7, #23]
 8006d66:	e033      	b.n	8006dd0 <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a23      	ldr	r2, [pc, #140]	; (8006dfc <HAL_FLASHEx_Erase+0xfc>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d108      	bne.n	8006d84 <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 8006d72:	f000 f8b5 	bl	8006ee0 <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006d76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d7a:	f7ff fed1 	bl	8006b20 <FLASH_WaitForLastOperation>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	75fb      	strb	r3, [r7, #23]
 8006d82:	e025      	b.n	8006dd0 <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8a:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	613b      	str	r3, [r7, #16]
 8006d92:	e015      	b.n	8006dc0 <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6938      	ldr	r0, [r7, #16]
 8006d9c:	f000 f868 	bl	8006e70 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006da0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006da4:	f7ff febc 	bl	8006b20 <FLASH_WaitForLastOperation>
 8006da8:	4603      	mov	r3, r0
 8006daa:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	601a      	str	r2, [r3, #0]
          break;
 8006db8:	e00a      	b.n	8006dd0 <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	4413      	add	r3, r2
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d3e1      	bcc.n	8006d94 <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ddc:	43db      	mvns	r3, r3
 8006dde:	401a      	ands	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006de4:	4b03      	ldr	r3, [pc, #12]	; (8006df4 <HAL_FLASHEx_Erase+0xf4>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	701a      	strb	r2, [r3, #0]

  return status;
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	20000048 	.word	0x20000048
 8006df8:	40022028 	.word	0x40022028
 8006dfc:	80000008 	.word	0x80000008

08006e00 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006e08:	4b18      	ldr	r3, [pc, #96]	; (8006e6c <FLASH_MassErase+0x6c>)
 8006e0a:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d108      	bne.n	8006e28 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e1e:	f043 0320 	orr.w	r3, r3, #32
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 8006e26:	e01b      	b.n	8006e60 <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d009      	beq.n	8006e46 <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e3a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006e3e:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d007      	beq.n	8006e60 <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e58:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	6013      	str	r3, [r2, #0]
}
 8006e60:	bf00      	nop
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	40022028 	.word	0x40022028

08006e70 <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006e7a:	4b18      	ldr	r3, [pc, #96]	; (8006edc <FLASH_Erase_Sector+0x6c>)
 8006e7c:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d011      	beq.n	8006eac <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e90:	f423 53fe 	bic.w	r3, r3, #8128	; 0x1fc0
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	019b      	lsls	r3, r3, #6
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 8006eaa:	e010      	b.n	8006ece <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f423 52fe 	bic.w	r2, r3, #8128	; 0x1fc0
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	019b      	lsls	r3, r3, #6
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ec6:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	6013      	str	r3, [r2, #0]
}
 8006ece:	bf00      	nop
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	40022028 	.word	0x40022028

08006ee0 <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8006ee6:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <FLASH_OBKErase+0x24>)
 8006ee8:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f043 0208 	orr.w	r2, r3, #8
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	601a      	str	r2, [r3, #0]
}
 8006ef6:	bf00      	nop
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40022040 	.word	0x40022040

08006f08 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006f16:	e136      	b.n	8007186 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	fa01 f303 	lsl.w	r3, r1, r3
 8006f24:	4013      	ands	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 8128 	beq.w	8007180 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d003      	beq.n	8006f40 <HAL_GPIO_Init+0x38>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	2b12      	cmp	r3, #18
 8006f3e:	d125      	bne.n	8006f8c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	08da      	lsrs	r2, r3, #3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3208      	adds	r2, #8
 8006f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	220f      	movs	r2, #15
 8006f58:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5c:	43db      	mvns	r3, r3
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	4013      	ands	r3, r2
 8006f62:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	f003 020f 	and.w	r2, r3, #15
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f003 0307 	and.w	r3, r3, #7
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	fa02 f303 	lsl.w	r3, r2, r3
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	08da      	lsrs	r2, r3, #3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3208      	adds	r2, #8
 8006f86:	6979      	ldr	r1, [r7, #20]
 8006f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	2203      	movs	r2, #3
 8006f98:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9c:	43db      	mvns	r3, r3
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f003 0203 	and.w	r2, r3, #3
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d00b      	beq.n	8006fe0 <HAL_GPIO_Init+0xd8>
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d007      	beq.n	8006fe0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fd4:	2b11      	cmp	r3, #17
 8006fd6:	d003      	beq.n	8006fe0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2b12      	cmp	r3, #18
 8006fde:	d130      	bne.n	8007042 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	2203      	movs	r2, #3
 8006fec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff0:	43db      	mvns	r3, r3
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	fa02 f303 	lsl.w	r3, r2, r3
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	4313      	orrs	r3, r2
 8007008:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007016:	2201      	movs	r2, #1
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	fa02 f303 	lsl.w	r3, r2, r3
 800701e:	43db      	mvns	r3, r3
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4013      	ands	r3, r2
 8007024:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	091b      	lsrs	r3, r3, #4
 800702c:	f003 0201 	and.w	r2, r3, #1
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	fa02 f303 	lsl.w	r3, r2, r3
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b03      	cmp	r3, #3
 8007048:	d017      	beq.n	800707a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	2203      	movs	r2, #3
 8007056:	fa02 f303 	lsl.w	r3, r2, r3
 800705a:	43db      	mvns	r3, r3
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	4013      	ands	r3, r2
 8007060:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	fa02 f303 	lsl.w	r3, r2, r3
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d07c      	beq.n	8007180 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007086:	4a47      	ldr	r2, [pc, #284]	; (80071a4 <HAL_GPIO_Init+0x29c>)
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	089b      	lsrs	r3, r3, #2
 800708c:	3318      	adds	r3, #24
 800708e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007092:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	220f      	movs	r2, #15
 800709e:	fa02 f303 	lsl.w	r3, r2, r3
 80070a2:	43db      	mvns	r3, r3
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	4013      	ands	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	0a9a      	lsrs	r2, r3, #10
 80070ae:	4b3e      	ldr	r3, [pc, #248]	; (80071a8 <HAL_GPIO_Init+0x2a0>)
 80070b0:	4013      	ands	r3, r2
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	f002 0203 	and.w	r2, r2, #3
 80070b8:	00d2      	lsls	r2, r2, #3
 80070ba:	4093      	lsls	r3, r2
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80070c2:	4938      	ldr	r1, [pc, #224]	; (80071a4 <HAL_GPIO_Init+0x29c>)
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	089b      	lsrs	r3, r3, #2
 80070c8:	3318      	adds	r3, #24
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80070d0:	4b34      	ldr	r3, [pc, #208]	; (80071a4 <HAL_GPIO_Init+0x29c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	43db      	mvns	r3, r3
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	4013      	ands	r3, r2
 80070de:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80070f4:	4a2b      	ldr	r2, [pc, #172]	; (80071a4 <HAL_GPIO_Init+0x29c>)
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80070fa:	4b2a      	ldr	r3, [pc, #168]	; (80071a4 <HAL_GPIO_Init+0x29c>)
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	43db      	mvns	r3, r3
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	4013      	ands	r3, r2
 8007108:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4313      	orrs	r3, r2
 800711c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800711e:	4a21      	ldr	r2, [pc, #132]	; (80071a4 <HAL_GPIO_Init+0x29c>)
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8007124:	4b1f      	ldr	r3, [pc, #124]	; (80071a4 <HAL_GPIO_Init+0x29c>)
 8007126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800712a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	43db      	mvns	r3, r3
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	4013      	ands	r3, r2
 8007134:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d003      	beq.n	800714a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4313      	orrs	r3, r2
 8007148:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800714a:	4a16      	ldr	r2, [pc, #88]	; (80071a4 <HAL_GPIO_Init+0x29c>)
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8007152:	4b14      	ldr	r3, [pc, #80]	; (80071a4 <HAL_GPIO_Init+0x29c>)
 8007154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007158:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	43db      	mvns	r3, r3
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4013      	ands	r3, r2
 8007162:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4313      	orrs	r3, r2
 8007176:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8007178:	4a0a      	ldr	r2, [pc, #40]	; (80071a4 <HAL_GPIO_Init+0x29c>)
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	3301      	adds	r3, #1
 8007184:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	fa22 f303 	lsr.w	r3, r2, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	f47f aec1 	bne.w	8006f18 <HAL_GPIO_Init+0x10>
  }
}
 8007196:	bf00      	nop
 8007198:	bf00      	nop
 800719a:	371c      	adds	r7, #28
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	44022000 	.word	0x44022000
 80071a8:	002f7f7f 	.word	0x002f7f7f

080071ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	807b      	strh	r3, [r7, #2]
 80071b8:	4613      	mov	r3, r2
 80071ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80071bc:	787b      	ldrb	r3, [r7, #1]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80071c2:	887a      	ldrh	r2, [r7, #2]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80071c8:	e002      	b.n	80071d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80071ca:	887a      	ldrh	r2, [r7, #2]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80071ee:	887a      	ldrh	r2, [r7, #2]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4013      	ands	r3, r2
 80071f4:	041a      	lsls	r2, r3, #16
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	43d9      	mvns	r1, r3
 80071fa:	887b      	ldrh	r3, [r7, #2]
 80071fc:	400b      	ands	r3, r1
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	619a      	str	r2, [r3, #24]
}
 8007204:	bf00      	nop
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	4603      	mov	r3, r0
 8007218:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800721a:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	88fb      	ldrh	r3, [r7, #6]
 8007220:	4013      	ands	r3, r2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d006      	beq.n	8007234 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8007226:	4a0c      	ldr	r2, [pc, #48]	; (8007258 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007228:	88fb      	ldrh	r3, [r7, #6]
 800722a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800722c:	88fb      	ldrh	r3, [r7, #6]
 800722e:	4618      	mov	r0, r3
 8007230:	f7f9 fa8e 	bl	8000750 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8007234:	4b08      	ldr	r3, [pc, #32]	; (8007258 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007236:	691a      	ldr	r2, [r3, #16]
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	4013      	ands	r3, r2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d006      	beq.n	800724e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007240:	4a05      	ldr	r2, [pc, #20]	; (8007258 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007242:	88fb      	ldrh	r3, [r7, #6]
 8007244:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8007246:	88fb      	ldrh	r3, [r7, #6]
 8007248:	4618      	mov	r0, r3
 800724a:	f000 f807 	bl	800725c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	44022000 	.word	0x44022000

0800725c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
	...

08007274 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8007274:	b480      	push	{r7}
 8007276:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <HAL_ICACHE_Enable+0x1c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a04      	ldr	r2, [pc, #16]	; (8007290 <HAL_ICACHE_Enable+0x1c>)
 800727e:	f043 0301 	orr.w	r3, r3, #1
 8007282:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	40030400 	.word	0x40030400

08007294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d102      	bne.n	80072a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	f000 bc28 	b.w	8007af8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072a8:	4b94      	ldr	r3, [pc, #592]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 80072aa:	69db      	ldr	r3, [r3, #28]
 80072ac:	f003 0318 	and.w	r3, r3, #24
 80072b0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80072b2:	4b92      	ldr	r3, [pc, #584]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 80072b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0310 	and.w	r3, r3, #16
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d05b      	beq.n	8007380 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	2b08      	cmp	r3, #8
 80072cc:	d005      	beq.n	80072da <HAL_RCC_OscConfig+0x46>
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	2b18      	cmp	r3, #24
 80072d2:	d114      	bne.n	80072fe <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d111      	bne.n	80072fe <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d102      	bne.n	80072e8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	f000 bc08 	b.w	8007af8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80072e8:	4b84      	ldr	r3, [pc, #528]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	041b      	lsls	r3, r3, #16
 80072f6:	4981      	ldr	r1, [pc, #516]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80072fc:	e040      	b.n	8007380 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d023      	beq.n	800734e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007306:	4b7d      	ldr	r3, [pc, #500]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a7c      	ldr	r2, [pc, #496]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 800730c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007312:	f7fc fd79 	bl	8003e08 <HAL_GetTick>
 8007316:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007318:	e008      	b.n	800732c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800731a:	f7fc fd75 	bl	8003e08 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	2b02      	cmp	r3, #2
 8007326:	d901      	bls.n	800732c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e3e5      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800732c:	4b73      	ldr	r3, [pc, #460]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0f0      	beq.n	800731a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007338:	4b70      	ldr	r3, [pc, #448]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	041b      	lsls	r3, r3, #16
 8007346:	496d      	ldr	r1, [pc, #436]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007348:	4313      	orrs	r3, r2
 800734a:	618b      	str	r3, [r1, #24]
 800734c:	e018      	b.n	8007380 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800734e:	4b6b      	ldr	r3, [pc, #428]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a6a      	ldr	r2, [pc, #424]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800735a:	f7fc fd55 	bl	8003e08 <HAL_GetTick>
 800735e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8007360:	e008      	b.n	8007374 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8007362:	f7fc fd51 	bl	8003e08 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d901      	bls.n	8007374 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e3c1      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8007374:	4b61      	ldr	r3, [pc, #388]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1f0      	bne.n	8007362 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 80a0 	beq.w	80074ce <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	2b10      	cmp	r3, #16
 8007392:	d005      	beq.n	80073a0 <HAL_RCC_OscConfig+0x10c>
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	2b18      	cmp	r3, #24
 8007398:	d109      	bne.n	80073ae <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	2b03      	cmp	r3, #3
 800739e:	d106      	bne.n	80073ae <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f040 8092 	bne.w	80074ce <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e3a4      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b6:	d106      	bne.n	80073c6 <HAL_RCC_OscConfig+0x132>
 80073b8:	4b50      	ldr	r3, [pc, #320]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a4f      	ldr	r2, [pc, #316]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 80073be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	e058      	b.n	8007478 <HAL_RCC_OscConfig+0x1e4>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d112      	bne.n	80073f4 <HAL_RCC_OscConfig+0x160>
 80073ce:	4b4b      	ldr	r3, [pc, #300]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a4a      	ldr	r2, [pc, #296]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 80073d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	4b48      	ldr	r3, [pc, #288]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a47      	ldr	r2, [pc, #284]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 80073e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80073e4:	6013      	str	r3, [r2, #0]
 80073e6:	4b45      	ldr	r3, [pc, #276]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a44      	ldr	r2, [pc, #272]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 80073ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073f0:	6013      	str	r3, [r2, #0]
 80073f2:	e041      	b.n	8007478 <HAL_RCC_OscConfig+0x1e4>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073fc:	d112      	bne.n	8007424 <HAL_RCC_OscConfig+0x190>
 80073fe:	4b3f      	ldr	r3, [pc, #252]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a3e      	ldr	r2, [pc, #248]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007408:	6013      	str	r3, [r2, #0]
 800740a:	4b3c      	ldr	r3, [pc, #240]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a3b      	ldr	r2, [pc, #236]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007410:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	4b39      	ldr	r3, [pc, #228]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a38      	ldr	r2, [pc, #224]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 800741c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	e029      	b.n	8007478 <HAL_RCC_OscConfig+0x1e4>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800742c:	d112      	bne.n	8007454 <HAL_RCC_OscConfig+0x1c0>
 800742e:	4b33      	ldr	r3, [pc, #204]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a32      	ldr	r2, [pc, #200]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	4b30      	ldr	r3, [pc, #192]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a2f      	ldr	r2, [pc, #188]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007444:	6013      	str	r3, [r2, #0]
 8007446:	4b2d      	ldr	r3, [pc, #180]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a2c      	ldr	r2, [pc, #176]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 800744c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007450:	6013      	str	r3, [r2, #0]
 8007452:	e011      	b.n	8007478 <HAL_RCC_OscConfig+0x1e4>
 8007454:	4b29      	ldr	r3, [pc, #164]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a28      	ldr	r2, [pc, #160]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 800745a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800745e:	6013      	str	r3, [r2, #0]
 8007460:	4b26      	ldr	r3, [pc, #152]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a25      	ldr	r2, [pc, #148]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	4b23      	ldr	r3, [pc, #140]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a22      	ldr	r2, [pc, #136]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 8007472:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d013      	beq.n	80074a8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007480:	f7fc fcc2 	bl	8003e08 <HAL_GetTick>
 8007484:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007486:	e008      	b.n	800749a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007488:	f7fc fcbe 	bl	8003e08 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2b64      	cmp	r3, #100	; 0x64
 8007494:	d901      	bls.n	800749a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e32e      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800749a:	4b18      	ldr	r3, [pc, #96]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d0f0      	beq.n	8007488 <HAL_RCC_OscConfig+0x1f4>
 80074a6:	e012      	b.n	80074ce <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a8:	f7fc fcae 	bl	8003e08 <HAL_GetTick>
 80074ac:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074ae:	e008      	b.n	80074c2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80074b0:	f7fc fcaa 	bl	8003e08 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b64      	cmp	r3, #100	; 0x64
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e31a      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074c2:	4b0e      	ldr	r3, [pc, #56]	; (80074fc <HAL_RCC_OscConfig+0x268>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1f0      	bne.n	80074b0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 809a 	beq.w	8007610 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d005      	beq.n	80074ee <HAL_RCC_OscConfig+0x25a>
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	2b18      	cmp	r3, #24
 80074e6:	d149      	bne.n	800757c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d146      	bne.n	800757c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d104      	bne.n	8007500 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e2fe      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
 80074fa:	bf00      	nop
 80074fc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d11c      	bne.n	8007540 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8007506:	4b9a      	ldr	r3, [pc, #616]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0218 	and.w	r2, r3, #24
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	429a      	cmp	r2, r3
 8007514:	d014      	beq.n	8007540 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8007516:	4b96      	ldr	r3, [pc, #600]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f023 0218 	bic.w	r2, r3, #24
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	4993      	ldr	r1, [pc, #588]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007524:	4313      	orrs	r3, r2
 8007526:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8007528:	f000 fdd0 	bl	80080cc <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800752c:	4b91      	ldr	r3, [pc, #580]	; (8007774 <HAL_RCC_OscConfig+0x4e0>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4618      	mov	r0, r3
 8007532:	f7f9 fce1 	bl	8000ef8 <HAL_InitTick>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e2db      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007540:	f7fc fc62 	bl	8003e08 <HAL_GetTick>
 8007544:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007546:	e008      	b.n	800755a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007548:	f7fc fc5e 	bl	8003e08 <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	2b02      	cmp	r3, #2
 8007554:	d901      	bls.n	800755a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e2ce      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800755a:	4b85      	ldr	r3, [pc, #532]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b00      	cmp	r3, #0
 8007564:	d0f0      	beq.n	8007548 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8007566:	4b82      	ldr	r3, [pc, #520]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	041b      	lsls	r3, r3, #16
 8007574:	497e      	ldr	r1, [pc, #504]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007576:	4313      	orrs	r3, r2
 8007578:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800757a:	e049      	b.n	8007610 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d02c      	beq.n	80075de <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8007584:	4b7a      	ldr	r3, [pc, #488]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f023 0218 	bic.w	r2, r3, #24
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	4977      	ldr	r1, [pc, #476]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007592:	4313      	orrs	r3, r2
 8007594:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8007596:	4b76      	ldr	r3, [pc, #472]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a75      	ldr	r2, [pc, #468]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 800759c:	f043 0301 	orr.w	r3, r3, #1
 80075a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a2:	f7fc fc31 	bl	8003e08 <HAL_GetTick>
 80075a6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075a8:	e008      	b.n	80075bc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80075aa:	f7fc fc2d 	bl	8003e08 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d901      	bls.n	80075bc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e29d      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075bc:	4b6c      	ldr	r3, [pc, #432]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0f0      	beq.n	80075aa <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80075c8:	4b69      	ldr	r3, [pc, #420]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	041b      	lsls	r3, r3, #16
 80075d6:	4966      	ldr	r1, [pc, #408]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	610b      	str	r3, [r1, #16]
 80075dc:	e018      	b.n	8007610 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075de:	4b64      	ldr	r3, [pc, #400]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a63      	ldr	r2, [pc, #396]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 80075e4:	f023 0301 	bic.w	r3, r3, #1
 80075e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ea:	f7fc fc0d 	bl	8003e08 <HAL_GetTick>
 80075ee:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80075f0:	e008      	b.n	8007604 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80075f2:	f7fc fc09 	bl	8003e08 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d901      	bls.n	8007604 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e279      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007604:	4b5a      	ldr	r3, [pc, #360]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1f0      	bne.n	80075f2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0308 	and.w	r3, r3, #8
 8007618:	2b00      	cmp	r3, #0
 800761a:	d03c      	beq.n	8007696 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d01c      	beq.n	800765e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007624:	4b52      	ldr	r3, [pc, #328]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800762a:	4a51      	ldr	r2, [pc, #324]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 800762c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007630:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007634:	f7fc fbe8 	bl	8003e08 <HAL_GetTick>
 8007638:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800763c:	f7fc fbe4 	bl	8003e08 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b02      	cmp	r3, #2
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e254      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800764e:	4b48      	ldr	r3, [pc, #288]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0ef      	beq.n	800763c <HAL_RCC_OscConfig+0x3a8>
 800765c:	e01b      	b.n	8007696 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800765e:	4b44      	ldr	r3, [pc, #272]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007664:	4a42      	ldr	r2, [pc, #264]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007666:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800766a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800766e:	f7fc fbcb 	bl	8003e08 <HAL_GetTick>
 8007672:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007674:	e008      	b.n	8007688 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007676:	f7fc fbc7 	bl	8003e08 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d901      	bls.n	8007688 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e237      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007688:	4b39      	ldr	r3, [pc, #228]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 800768a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800768e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1ef      	bne.n	8007676 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0304 	and.w	r3, r3, #4
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 80d2 	beq.w	8007848 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80076a4:	4b34      	ldr	r3, [pc, #208]	; (8007778 <HAL_RCC_OscConfig+0x4e4>)
 80076a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d118      	bne.n	80076e2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80076b0:	4b31      	ldr	r3, [pc, #196]	; (8007778 <HAL_RCC_OscConfig+0x4e4>)
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	4a30      	ldr	r2, [pc, #192]	; (8007778 <HAL_RCC_OscConfig+0x4e4>)
 80076b6:	f043 0301 	orr.w	r3, r3, #1
 80076ba:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076bc:	f7fc fba4 	bl	8003e08 <HAL_GetTick>
 80076c0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80076c2:	e008      	b.n	80076d6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076c4:	f7fc fba0 	bl	8003e08 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e210      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80076d6:	4b28      	ldr	r3, [pc, #160]	; (8007778 <HAL_RCC_OscConfig+0x4e4>)
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0f0      	beq.n	80076c4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d108      	bne.n	80076fc <HAL_RCC_OscConfig+0x468>
 80076ea:	4b21      	ldr	r3, [pc, #132]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 80076ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076f0:	4a1f      	ldr	r2, [pc, #124]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 80076f2:	f043 0301 	orr.w	r3, r3, #1
 80076f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80076fa:	e074      	b.n	80077e6 <HAL_RCC_OscConfig+0x552>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d118      	bne.n	8007736 <HAL_RCC_OscConfig+0x4a2>
 8007704:	4b1a      	ldr	r3, [pc, #104]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007706:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800770a:	4a19      	ldr	r2, [pc, #100]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 800770c:	f023 0301 	bic.w	r3, r3, #1
 8007710:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007714:	4b16      	ldr	r3, [pc, #88]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007716:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800771a:	4a15      	ldr	r2, [pc, #84]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 800771c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007720:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007724:	4b12      	ldr	r3, [pc, #72]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007726:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800772a:	4a11      	ldr	r2, [pc, #68]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 800772c:	f023 0304 	bic.w	r3, r3, #4
 8007730:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007734:	e057      	b.n	80077e6 <HAL_RCC_OscConfig+0x552>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	2b05      	cmp	r3, #5
 800773c:	d11e      	bne.n	800777c <HAL_RCC_OscConfig+0x4e8>
 800773e:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007744:	4a0a      	ldr	r2, [pc, #40]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007746:	f043 0304 	orr.w	r3, r3, #4
 800774a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800774e:	4b08      	ldr	r3, [pc, #32]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007754:	4a06      	ldr	r2, [pc, #24]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800775a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800775e:	4b04      	ldr	r3, [pc, #16]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007764:	4a02      	ldr	r2, [pc, #8]	; (8007770 <HAL_RCC_OscConfig+0x4dc>)
 8007766:	f043 0301 	orr.w	r3, r3, #1
 800776a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800776e:	e03a      	b.n	80077e6 <HAL_RCC_OscConfig+0x552>
 8007770:	44020c00 	.word	0x44020c00
 8007774:	20000040 	.word	0x20000040
 8007778:	44020800 	.word	0x44020800
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	2b85      	cmp	r3, #133	; 0x85
 8007782:	d118      	bne.n	80077b6 <HAL_RCC_OscConfig+0x522>
 8007784:	4ba2      	ldr	r3, [pc, #648]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 8007786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800778a:	4aa1      	ldr	r2, [pc, #644]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 800778c:	f043 0304 	orr.w	r3, r3, #4
 8007790:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007794:	4b9e      	ldr	r3, [pc, #632]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 8007796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800779a:	4a9d      	ldr	r2, [pc, #628]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 800779c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80077a4:	4b9a      	ldr	r3, [pc, #616]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80077a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077aa:	4a99      	ldr	r2, [pc, #612]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80077ac:	f043 0301 	orr.w	r3, r3, #1
 80077b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80077b4:	e017      	b.n	80077e6 <HAL_RCC_OscConfig+0x552>
 80077b6:	4b96      	ldr	r3, [pc, #600]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80077b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077bc:	4a94      	ldr	r2, [pc, #592]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80077be:	f023 0301 	bic.w	r3, r3, #1
 80077c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80077c6:	4b92      	ldr	r3, [pc, #584]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80077c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077cc:	4a90      	ldr	r2, [pc, #576]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80077ce:	f023 0304 	bic.w	r3, r3, #4
 80077d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80077d6:	4b8e      	ldr	r3, [pc, #568]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80077d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077dc:	4a8c      	ldr	r2, [pc, #560]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80077de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d016      	beq.n	800781c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ee:	f7fc fb0b 	bl	8003e08 <HAL_GetTick>
 80077f2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077f4:	e00a      	b.n	800780c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077f6:	f7fc fb07 	bl	8003e08 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	f241 3288 	movw	r2, #5000	; 0x1388
 8007804:	4293      	cmp	r3, r2
 8007806:	d901      	bls.n	800780c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e175      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800780c:	4b80      	ldr	r3, [pc, #512]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 800780e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0ed      	beq.n	80077f6 <HAL_RCC_OscConfig+0x562>
 800781a:	e015      	b.n	8007848 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800781c:	f7fc faf4 	bl	8003e08 <HAL_GetTick>
 8007820:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007822:	e00a      	b.n	800783a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007824:	f7fc faf0 	bl	8003e08 <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007832:	4293      	cmp	r3, r2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e15e      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800783a:	4b75      	ldr	r3, [pc, #468]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 800783c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1ed      	bne.n	8007824 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0320 	and.w	r3, r3, #32
 8007850:	2b00      	cmp	r3, #0
 8007852:	d036      	beq.n	80078c2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007858:	2b00      	cmp	r3, #0
 800785a:	d019      	beq.n	8007890 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800785c:	4b6c      	ldr	r3, [pc, #432]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a6b      	ldr	r2, [pc, #428]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 8007862:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007866:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007868:	f7fc face 	bl	8003e08 <HAL_GetTick>
 800786c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800786e:	e008      	b.n	8007882 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8007870:	f7fc faca 	bl	8003e08 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b02      	cmp	r3, #2
 800787c:	d901      	bls.n	8007882 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e13a      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007882:	4b63      	ldr	r3, [pc, #396]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0f0      	beq.n	8007870 <HAL_RCC_OscConfig+0x5dc>
 800788e:	e018      	b.n	80078c2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007890:	4b5f      	ldr	r3, [pc, #380]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a5e      	ldr	r2, [pc, #376]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 8007896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800789a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800789c:	f7fc fab4 	bl	8003e08 <HAL_GetTick>
 80078a0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80078a2:	e008      	b.n	80078b6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80078a4:	f7fc fab0 	bl	8003e08 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e120      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80078b6:	4b56      	ldr	r3, [pc, #344]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1f0      	bne.n	80078a4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 8115 	beq.w	8007af6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	2b18      	cmp	r3, #24
 80078d0:	f000 80af 	beq.w	8007a32 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d8:	2b02      	cmp	r3, #2
 80078da:	f040 8086 	bne.w	80079ea <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80078de:	4b4c      	ldr	r3, [pc, #304]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a4b      	ldr	r2, [pc, #300]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80078e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ea:	f7fc fa8d 	bl	8003e08 <HAL_GetTick>
 80078ee:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80078f0:	e008      	b.n	8007904 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80078f2:	f7fc fa89 	bl	8003e08 <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d901      	bls.n	8007904 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e0f9      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007904:	4b42      	ldr	r3, [pc, #264]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1f0      	bne.n	80078f2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8007910:	4b3f      	ldr	r3, [pc, #252]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 8007912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007914:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007918:	f023 0303 	bic.w	r3, r3, #3
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007924:	0212      	lsls	r2, r2, #8
 8007926:	430a      	orrs	r2, r1
 8007928:	4939      	ldr	r1, [pc, #228]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 800792a:	4313      	orrs	r3, r2
 800792c:	628b      	str	r3, [r1, #40]	; 0x28
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007932:	3b01      	subs	r3, #1
 8007934:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	3b01      	subs	r3, #1
 800793e:	025b      	lsls	r3, r3, #9
 8007940:	b29b      	uxth	r3, r3
 8007942:	431a      	orrs	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007948:	3b01      	subs	r3, #1
 800794a:	041b      	lsls	r3, r3, #16
 800794c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007950:	431a      	orrs	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	3b01      	subs	r3, #1
 8007958:	061b      	lsls	r3, r3, #24
 800795a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800795e:	492c      	ldr	r1, [pc, #176]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 8007960:	4313      	orrs	r3, r2
 8007962:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8007964:	4b2a      	ldr	r3, [pc, #168]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 8007966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007968:	4a29      	ldr	r2, [pc, #164]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 800796a:	f023 0310 	bic.w	r3, r3, #16
 800796e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007974:	4a26      	ldr	r2, [pc, #152]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 8007976:	00db      	lsls	r3, r3, #3
 8007978:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800797a:	4b25      	ldr	r3, [pc, #148]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 800797c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797e:	4a24      	ldr	r2, [pc, #144]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 8007980:	f043 0310 	orr.w	r3, r3, #16
 8007984:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8007986:	4b22      	ldr	r3, [pc, #136]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 8007988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798a:	f023 020c 	bic.w	r2, r3, #12
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007992:	491f      	ldr	r1, [pc, #124]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 8007994:	4313      	orrs	r3, r2
 8007996:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8007998:	4b1d      	ldr	r3, [pc, #116]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 800799a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799c:	f023 0220 	bic.w	r2, r3, #32
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a4:	491a      	ldr	r1, [pc, #104]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80079aa:	4b19      	ldr	r3, [pc, #100]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80079ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ae:	4a18      	ldr	r2, [pc, #96]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80079b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079b4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80079b6:	4b16      	ldr	r3, [pc, #88]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a15      	ldr	r2, [pc, #84]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80079bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c2:	f7fc fa21 	bl	8003e08 <HAL_GetTick>
 80079c6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80079c8:	e008      	b.n	80079dc <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80079ca:	f7fc fa1d 	bl	8003e08 <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d901      	bls.n	80079dc <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e08d      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80079dc:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0f0      	beq.n	80079ca <HAL_RCC_OscConfig+0x736>
 80079e8:	e085      	b.n	8007af6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80079ea:	4b09      	ldr	r3, [pc, #36]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a08      	ldr	r2, [pc, #32]	; (8007a10 <HAL_RCC_OscConfig+0x77c>)
 80079f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f6:	f7fc fa07 	bl	8003e08 <HAL_GetTick>
 80079fa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80079fc:	e00a      	b.n	8007a14 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80079fe:	f7fc fa03 	bl	8003e08 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d903      	bls.n	8007a14 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e073      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
 8007a10:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007a14:	4b3a      	ldr	r3, [pc, #232]	; (8007b00 <HAL_RCC_OscConfig+0x86c>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1ee      	bne.n	80079fe <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007a20:	4b37      	ldr	r3, [pc, #220]	; (8007b00 <HAL_RCC_OscConfig+0x86c>)
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	4a36      	ldr	r2, [pc, #216]	; (8007b00 <HAL_RCC_OscConfig+0x86c>)
 8007a26:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007a2a:	f023 0303 	bic.w	r3, r3, #3
 8007a2e:	6293      	str	r3, [r2, #40]	; 0x28
 8007a30:	e061      	b.n	8007af6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007a32:	4b33      	ldr	r3, [pc, #204]	; (8007b00 <HAL_RCC_OscConfig+0x86c>)
 8007a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a36:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007a38:	4b31      	ldr	r3, [pc, #196]	; (8007b00 <HAL_RCC_OscConfig+0x86c>)
 8007a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d031      	beq.n	8007aaa <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f003 0203 	and.w	r2, r3, #3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d12a      	bne.n	8007aaa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	0a1b      	lsrs	r3, r3, #8
 8007a58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d122      	bne.n	8007aaa <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d11a      	bne.n	8007aaa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	0a5b      	lsrs	r3, r3, #9
 8007a78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a80:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d111      	bne.n	8007aaa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	0c1b      	lsrs	r3, r3, #16
 8007a8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a92:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d108      	bne.n	8007aaa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	0e1b      	lsrs	r3, r3, #24
 8007a9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d001      	beq.n	8007aae <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e024      	b.n	8007af8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007aae:	4b14      	ldr	r3, [pc, #80]	; (8007b00 <HAL_RCC_OscConfig+0x86c>)
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	08db      	lsrs	r3, r3, #3
 8007ab4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d01a      	beq.n	8007af6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8007ac0:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <HAL_RCC_OscConfig+0x86c>)
 8007ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac4:	4a0e      	ldr	r2, [pc, #56]	; (8007b00 <HAL_RCC_OscConfig+0x86c>)
 8007ac6:	f023 0310 	bic.w	r3, r3, #16
 8007aca:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007acc:	f7fc f99c 	bl	8003e08 <HAL_GetTick>
 8007ad0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8007ad2:	bf00      	nop
 8007ad4:	f7fc f998 	bl	8003e08 <HAL_GetTick>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d0f9      	beq.n	8007ad4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae4:	4a06      	ldr	r2, [pc, #24]	; (8007b00 <HAL_RCC_OscConfig+0x86c>)
 8007ae6:	00db      	lsls	r3, r3, #3
 8007ae8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8007aea:	4b05      	ldr	r3, [pc, #20]	; (8007b00 <HAL_RCC_OscConfig+0x86c>)
 8007aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aee:	4a04      	ldr	r2, [pc, #16]	; (8007b00 <HAL_RCC_OscConfig+0x86c>)
 8007af0:	f043 0310 	orr.w	r3, r3, #16
 8007af4:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3720      	adds	r7, #32
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	44020c00 	.word	0x44020c00

08007b04 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e19e      	b.n	8007e56 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b18:	4b83      	ldr	r3, [pc, #524]	; (8007d28 <HAL_RCC_ClockConfig+0x224>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 030f 	and.w	r3, r3, #15
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d910      	bls.n	8007b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b26:	4b80      	ldr	r3, [pc, #512]	; (8007d28 <HAL_RCC_ClockConfig+0x224>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f023 020f 	bic.w	r2, r3, #15
 8007b2e:	497e      	ldr	r1, [pc, #504]	; (8007d28 <HAL_RCC_ClockConfig+0x224>)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b36:	4b7c      	ldr	r3, [pc, #496]	; (8007d28 <HAL_RCC_ClockConfig+0x224>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 030f 	and.w	r3, r3, #15
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d001      	beq.n	8007b48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e186      	b.n	8007e56 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0310 	and.w	r3, r3, #16
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d012      	beq.n	8007b7a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	695a      	ldr	r2, [r3, #20]
 8007b58:	4b74      	ldr	r3, [pc, #464]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	0a1b      	lsrs	r3, r3, #8
 8007b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d909      	bls.n	8007b7a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8007b66:	4b71      	ldr	r3, [pc, #452]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	021b      	lsls	r3, r3, #8
 8007b74:	496d      	ldr	r1, [pc, #436]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0308 	and.w	r3, r3, #8
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d012      	beq.n	8007bac <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691a      	ldr	r2, [r3, #16]
 8007b8a:	4b68      	ldr	r3, [pc, #416]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	091b      	lsrs	r3, r3, #4
 8007b90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d909      	bls.n	8007bac <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8007b98:	4b64      	ldr	r3, [pc, #400]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	011b      	lsls	r3, r3, #4
 8007ba6:	4961      	ldr	r1, [pc, #388]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d010      	beq.n	8007bda <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	4b5b      	ldr	r3, [pc, #364]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d908      	bls.n	8007bda <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8007bc8:	4b58      	ldr	r3, [pc, #352]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	4955      	ldr	r1, [pc, #340]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d010      	beq.n	8007c08 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	4b50      	ldr	r3, [pc, #320]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	f003 030f 	and.w	r3, r3, #15
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d908      	bls.n	8007c08 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8007bf6:	4b4d      	ldr	r3, [pc, #308]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	f023 020f 	bic.w	r2, r3, #15
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	494a      	ldr	r1, [pc, #296]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 8093 	beq.w	8007d3c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d107      	bne.n	8007c2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007c1e:	4b43      	ldr	r3, [pc, #268]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d121      	bne.n	8007c6e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e113      	b.n	8007e56 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d107      	bne.n	8007c46 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c36:	4b3d      	ldr	r3, [pc, #244]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d115      	bne.n	8007c6e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e107      	b.n	8007e56 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d107      	bne.n	8007c5e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007c4e:	4b37      	ldr	r3, [pc, #220]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d109      	bne.n	8007c6e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e0fb      	b.n	8007e56 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c5e:	4b33      	ldr	r3, [pc, #204]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e0f3      	b.n	8007e56 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8007c6e:	4b2f      	ldr	r3, [pc, #188]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	f023 0203 	bic.w	r2, r3, #3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	492c      	ldr	r1, [pc, #176]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c80:	f7fc f8c2 	bl	8003e08 <HAL_GetTick>
 8007c84:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d112      	bne.n	8007cb4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c8e:	e00a      	b.n	8007ca6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007c90:	f7fc f8ba 	bl	8003e08 <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d901      	bls.n	8007ca6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e0d7      	b.n	8007e56 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ca6:	4b21      	ldr	r3, [pc, #132]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	f003 0318 	and.w	r3, r3, #24
 8007cae:	2b18      	cmp	r3, #24
 8007cb0:	d1ee      	bne.n	8007c90 <HAL_RCC_ClockConfig+0x18c>
 8007cb2:	e043      	b.n	8007d3c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d112      	bne.n	8007ce2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007cbc:	e00a      	b.n	8007cd4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007cbe:	f7fc f8a3 	bl	8003e08 <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d901      	bls.n	8007cd4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e0c0      	b.n	8007e56 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007cd4:	4b15      	ldr	r3, [pc, #84]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	f003 0318 	and.w	r3, r3, #24
 8007cdc:	2b10      	cmp	r3, #16
 8007cde:	d1ee      	bne.n	8007cbe <HAL_RCC_ClockConfig+0x1ba>
 8007ce0:	e02c      	b.n	8007d3c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d122      	bne.n	8007d30 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8007cea:	e00a      	b.n	8007d02 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007cec:	f7fc f88c 	bl	8003e08 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d901      	bls.n	8007d02 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e0a9      	b.n	8007e56 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8007d02:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <HAL_RCC_ClockConfig+0x228>)
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	f003 0318 	and.w	r3, r3, #24
 8007d0a:	2b08      	cmp	r3, #8
 8007d0c:	d1ee      	bne.n	8007cec <HAL_RCC_ClockConfig+0x1e8>
 8007d0e:	e015      	b.n	8007d3c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007d10:	f7fc f87a 	bl	8003e08 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d906      	bls.n	8007d30 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e097      	b.n	8007e56 <HAL_RCC_ClockConfig+0x352>
 8007d26:	bf00      	nop
 8007d28:	40022000 	.word	0x40022000
 8007d2c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d30:	4b4b      	ldr	r3, [pc, #300]	; (8007e60 <HAL_RCC_ClockConfig+0x35c>)
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	f003 0318 	and.w	r3, r3, #24
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1e9      	bne.n	8007d10 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d010      	beq.n	8007d6a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689a      	ldr	r2, [r3, #8]
 8007d4c:	4b44      	ldr	r3, [pc, #272]	; (8007e60 <HAL_RCC_ClockConfig+0x35c>)
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	f003 030f 	and.w	r3, r3, #15
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d208      	bcs.n	8007d6a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8007d58:	4b41      	ldr	r3, [pc, #260]	; (8007e60 <HAL_RCC_ClockConfig+0x35c>)
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	f023 020f 	bic.w	r2, r3, #15
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	493e      	ldr	r1, [pc, #248]	; (8007e60 <HAL_RCC_ClockConfig+0x35c>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d6a:	4b3e      	ldr	r3, [pc, #248]	; (8007e64 <HAL_RCC_ClockConfig+0x360>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 030f 	and.w	r3, r3, #15
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d210      	bcs.n	8007d9a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d78:	4b3a      	ldr	r3, [pc, #232]	; (8007e64 <HAL_RCC_ClockConfig+0x360>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f023 020f 	bic.w	r2, r3, #15
 8007d80:	4938      	ldr	r1, [pc, #224]	; (8007e64 <HAL_RCC_ClockConfig+0x360>)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d88:	4b36      	ldr	r3, [pc, #216]	; (8007e64 <HAL_RCC_ClockConfig+0x360>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 030f 	and.w	r3, r3, #15
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d001      	beq.n	8007d9a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e05d      	b.n	8007e56 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0304 	and.w	r3, r3, #4
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d010      	beq.n	8007dc8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	4b2d      	ldr	r3, [pc, #180]	; (8007e60 <HAL_RCC_ClockConfig+0x35c>)
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d208      	bcs.n	8007dc8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8007db6:	4b2a      	ldr	r3, [pc, #168]	; (8007e60 <HAL_RCC_ClockConfig+0x35c>)
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	4927      	ldr	r1, [pc, #156]	; (8007e60 <HAL_RCC_ClockConfig+0x35c>)
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0308 	and.w	r3, r3, #8
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d012      	beq.n	8007dfa <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	691a      	ldr	r2, [r3, #16]
 8007dd8:	4b21      	ldr	r3, [pc, #132]	; (8007e60 <HAL_RCC_ClockConfig+0x35c>)
 8007dda:	6a1b      	ldr	r3, [r3, #32]
 8007ddc:	091b      	lsrs	r3, r3, #4
 8007dde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d209      	bcs.n	8007dfa <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8007de6:	4b1e      	ldr	r3, [pc, #120]	; (8007e60 <HAL_RCC_ClockConfig+0x35c>)
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	011b      	lsls	r3, r3, #4
 8007df4:	491a      	ldr	r1, [pc, #104]	; (8007e60 <HAL_RCC_ClockConfig+0x35c>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0310 	and.w	r3, r3, #16
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d012      	beq.n	8007e2c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	695a      	ldr	r2, [r3, #20]
 8007e0a:	4b15      	ldr	r3, [pc, #84]	; (8007e60 <HAL_RCC_ClockConfig+0x35c>)
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	0a1b      	lsrs	r3, r3, #8
 8007e10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d209      	bcs.n	8007e2c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8007e18:	4b11      	ldr	r3, [pc, #68]	; (8007e60 <HAL_RCC_ClockConfig+0x35c>)
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	021b      	lsls	r3, r3, #8
 8007e26:	490e      	ldr	r1, [pc, #56]	; (8007e60 <HAL_RCC_ClockConfig+0x35c>)
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007e2c:	f000 f822 	bl	8007e74 <HAL_RCC_GetSysClockFreq>
 8007e30:	4602      	mov	r2, r0
 8007e32:	4b0b      	ldr	r3, [pc, #44]	; (8007e60 <HAL_RCC_ClockConfig+0x35c>)
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	f003 030f 	and.w	r3, r3, #15
 8007e3a:	490b      	ldr	r1, [pc, #44]	; (8007e68 <HAL_RCC_ClockConfig+0x364>)
 8007e3c:	5ccb      	ldrb	r3, [r1, r3]
 8007e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e42:	4a0a      	ldr	r2, [pc, #40]	; (8007e6c <HAL_RCC_ClockConfig+0x368>)
 8007e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007e46:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <HAL_RCC_ClockConfig+0x36c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7f9 f854 	bl	8000ef8 <HAL_InitTick>
 8007e50:	4603      	mov	r3, r0
 8007e52:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8007e54:	7afb      	ldrb	r3, [r7, #11]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	44020c00 	.word	0x44020c00
 8007e64:	40022000 	.word	0x40022000
 8007e68:	08026dec 	.word	0x08026dec
 8007e6c:	20000000 	.word	0x20000000
 8007e70:	20000040 	.word	0x20000040

08007e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b089      	sub	sp, #36	; 0x24
 8007e78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8007e7a:	4b8c      	ldr	r3, [pc, #560]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	f003 0318 	and.w	r3, r3, #24
 8007e82:	2b08      	cmp	r3, #8
 8007e84:	d102      	bne.n	8007e8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007e86:	4b8a      	ldr	r3, [pc, #552]	; (80080b0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8007e88:	61fb      	str	r3, [r7, #28]
 8007e8a:	e107      	b.n	800809c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e8c:	4b87      	ldr	r3, [pc, #540]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	f003 0318 	and.w	r3, r3, #24
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d112      	bne.n	8007ebe <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8007e98:	4b84      	ldr	r3, [pc, #528]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0320 	and.w	r3, r3, #32
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d009      	beq.n	8007eb8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ea4:	4b81      	ldr	r3, [pc, #516]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	08db      	lsrs	r3, r3, #3
 8007eaa:	f003 0303 	and.w	r3, r3, #3
 8007eae:	4a81      	ldr	r2, [pc, #516]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x240>)
 8007eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb4:	61fb      	str	r3, [r7, #28]
 8007eb6:	e0f1      	b.n	800809c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8007eb8:	4b7e      	ldr	r3, [pc, #504]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x240>)
 8007eba:	61fb      	str	r3, [r7, #28]
 8007ebc:	e0ee      	b.n	800809c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ebe:	4b7b      	ldr	r3, [pc, #492]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	f003 0318 	and.w	r3, r3, #24
 8007ec6:	2b10      	cmp	r3, #16
 8007ec8:	d102      	bne.n	8007ed0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007eca:	4b7b      	ldr	r3, [pc, #492]	; (80080b8 <HAL_RCC_GetSysClockFreq+0x244>)
 8007ecc:	61fb      	str	r3, [r7, #28]
 8007ece:	e0e5      	b.n	800809c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ed0:	4b76      	ldr	r3, [pc, #472]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	f003 0318 	and.w	r3, r3, #24
 8007ed8:	2b18      	cmp	r3, #24
 8007eda:	f040 80dd 	bne.w	8008098 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007ede:	4b73      	ldr	r3, [pc, #460]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8007ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee2:	f003 0303 	and.w	r3, r3, #3
 8007ee6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007ee8:	4b70      	ldr	r3, [pc, #448]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8007eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eec:	0a1b      	lsrs	r3, r3, #8
 8007eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ef2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007ef4:	4b6d      	ldr	r3, [pc, #436]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8007ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef8:	091b      	lsrs	r3, r3, #4
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8007f00:	4b6a      	ldr	r3, [pc, #424]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8007f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8007f04:	08db      	lsrs	r3, r3, #3
 8007f06:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	fb02 f303 	mul.w	r3, r2, r3
 8007f10:	ee07 3a90 	vmov	s15, r3
 8007f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f18:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 80b7 	beq.w	8008092 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d003      	beq.n	8007f32 <HAL_RCC_GetSysClockFreq+0xbe>
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	d056      	beq.n	8007fde <HAL_RCC_GetSysClockFreq+0x16a>
 8007f30:	e077      	b.n	8008022 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8007f32:	4b5e      	ldr	r3, [pc, #376]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d02d      	beq.n	8007f9a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f3e:	4b5b      	ldr	r3, [pc, #364]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	08db      	lsrs	r3, r3, #3
 8007f44:	f003 0303 	and.w	r3, r3, #3
 8007f48:	4a5a      	ldr	r2, [pc, #360]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x240>)
 8007f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f4e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	ee07 3a90 	vmov	s15, r3
 8007f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	ee07 3a90 	vmov	s15, r3
 8007f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f68:	4b50      	ldr	r3, [pc, #320]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8007f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f70:	ee07 3a90 	vmov	s15, r3
 8007f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f78:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f7c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80080bc <HAL_RCC_GetSysClockFreq+0x248>
 8007f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f94:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8007f98:	e065      	b.n	8008066 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	ee07 3a90 	vmov	s15, r3
 8007fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa4:	eddf 6a46 	vldr	s13, [pc, #280]	; 80080c0 <HAL_RCC_GetSysClockFreq+0x24c>
 8007fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fac:	4b3f      	ldr	r3, [pc, #252]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8007fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb4:	ee07 3a90 	vmov	s15, r3
 8007fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fbc:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fc0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80080bc <HAL_RCC_GetSysClockFreq+0x248>
 8007fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007fdc:	e043      	b.n	8008066 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	ee07 3a90 	vmov	s15, r3
 8007fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe8:	eddf 6a36 	vldr	s13, [pc, #216]	; 80080c4 <HAL_RCC_GetSysClockFreq+0x250>
 8007fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ff0:	4b2e      	ldr	r3, [pc, #184]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8007ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff8:	ee07 3a90 	vmov	s15, r3
 8007ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008000:	ed97 6a02 	vldr	s12, [r7, #8]
 8008004:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80080bc <HAL_RCC_GetSysClockFreq+0x248>
 8008008:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800800c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008014:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800801c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8008020:	e021      	b.n	8008066 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	ee07 3a90 	vmov	s15, r3
 8008028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802c:	eddf 6a26 	vldr	s13, [pc, #152]	; 80080c8 <HAL_RCC_GetSysClockFreq+0x254>
 8008030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008034:	4b1d      	ldr	r3, [pc, #116]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8008036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803c:	ee07 3a90 	vmov	s15, r3
 8008040:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008044:	ed97 6a02 	vldr	s12, [r7, #8]
 8008048:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80080bc <HAL_RCC_GetSysClockFreq+0x248>
 800804c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008050:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008058:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800805c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008060:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8008064:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8008066:	4b11      	ldr	r3, [pc, #68]	; (80080ac <HAL_RCC_GetSysClockFreq+0x238>)
 8008068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800806a:	0a5b      	lsrs	r3, r3, #9
 800806c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008070:	3301      	adds	r3, #1
 8008072:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	ee07 3a90 	vmov	s15, r3
 800807a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800807e:	edd7 6a06 	vldr	s13, [r7, #24]
 8008082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800808a:	ee17 3a90 	vmov	r3, s15
 800808e:	61fb      	str	r3, [r7, #28]
 8008090:	e004      	b.n	800809c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	61fb      	str	r3, [r7, #28]
 8008096:	e001      	b.n	800809c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8008098:	4b06      	ldr	r3, [pc, #24]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x240>)
 800809a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800809c:	69fb      	ldr	r3, [r7, #28]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3724      	adds	r7, #36	; 0x24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	44020c00 	.word	0x44020c00
 80080b0:	003d0900 	.word	0x003d0900
 80080b4:	03d09000 	.word	0x03d09000
 80080b8:	007a1200 	.word	0x007a1200
 80080bc:	46000000 	.word	0x46000000
 80080c0:	4c742400 	.word	0x4c742400
 80080c4:	4af42400 	.word	0x4af42400
 80080c8:	4a742400 	.word	0x4a742400

080080cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80080d0:	f7ff fed0 	bl	8007e74 <HAL_RCC_GetSysClockFreq>
 80080d4:	4602      	mov	r2, r0
 80080d6:	4b08      	ldr	r3, [pc, #32]	; (80080f8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80080d8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80080da:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80080de:	4907      	ldr	r1, [pc, #28]	; (80080fc <HAL_RCC_GetHCLKFreq+0x30>)
 80080e0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80080e2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80080e6:	fa22 f303 	lsr.w	r3, r2, r3
 80080ea:	4a05      	ldr	r2, [pc, #20]	; (8008100 <HAL_RCC_GetHCLKFreq+0x34>)
 80080ec:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80080ee:	4b04      	ldr	r3, [pc, #16]	; (8008100 <HAL_RCC_GetHCLKFreq+0x34>)
 80080f0:	681b      	ldr	r3, [r3, #0]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	44020c00 	.word	0x44020c00
 80080fc:	08026dec 	.word	0x08026dec
 8008100:	20000000 	.word	0x20000000

08008104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8008108:	f7ff ffe0 	bl	80080cc <HAL_RCC_GetHCLKFreq>
 800810c:	4602      	mov	r2, r0
 800810e:	4b06      	ldr	r3, [pc, #24]	; (8008128 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	091b      	lsrs	r3, r3, #4
 8008114:	f003 0307 	and.w	r3, r3, #7
 8008118:	4904      	ldr	r1, [pc, #16]	; (800812c <HAL_RCC_GetPCLK1Freq+0x28>)
 800811a:	5ccb      	ldrb	r3, [r1, r3]
 800811c:	f003 031f 	and.w	r3, r3, #31
 8008120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008124:	4618      	mov	r0, r3
 8008126:	bd80      	pop	{r7, pc}
 8008128:	44020c00 	.word	0x44020c00
 800812c:	08026dfc 	.word	0x08026dfc

08008130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8008134:	f7ff ffca 	bl	80080cc <HAL_RCC_GetHCLKFreq>
 8008138:	4602      	mov	r2, r0
 800813a:	4b06      	ldr	r3, [pc, #24]	; (8008154 <HAL_RCC_GetPCLK2Freq+0x24>)
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	0a1b      	lsrs	r3, r3, #8
 8008140:	f003 0307 	and.w	r3, r3, #7
 8008144:	4904      	ldr	r1, [pc, #16]	; (8008158 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008146:	5ccb      	ldrb	r3, [r1, r3]
 8008148:	f003 031f 	and.w	r3, r3, #31
 800814c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008150:	4618      	mov	r0, r3
 8008152:	bd80      	pop	{r7, pc}
 8008154:	44020c00 	.word	0x44020c00
 8008158:	08026dfc 	.word	0x08026dfc

0800815c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8008160:	f7ff ffb4 	bl	80080cc <HAL_RCC_GetHCLKFreq>
 8008164:	4602      	mov	r2, r0
 8008166:	4b06      	ldr	r3, [pc, #24]	; (8008180 <HAL_RCC_GetPCLK3Freq+0x24>)
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	0b1b      	lsrs	r3, r3, #12
 800816c:	f003 0307 	and.w	r3, r3, #7
 8008170:	4904      	ldr	r1, [pc, #16]	; (8008184 <HAL_RCC_GetPCLK3Freq+0x28>)
 8008172:	5ccb      	ldrb	r3, [r1, r3]
 8008174:	f003 031f 	and.w	r3, r3, #31
 8008178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800817c:	4618      	mov	r0, r3
 800817e:	bd80      	pop	{r7, pc}
 8008180:	44020c00 	.word	0x44020c00
 8008184:	08026dfc 	.word	0x08026dfc

08008188 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	221f      	movs	r2, #31
 8008196:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8008198:	4b15      	ldr	r3, [pc, #84]	; (80081f0 <HAL_RCC_GetClockConfig+0x68>)
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	f003 0203 	and.w	r2, r3, #3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 80081a4:	4b12      	ldr	r3, [pc, #72]	; (80081f0 <HAL_RCC_GetClockConfig+0x68>)
 80081a6:	6a1b      	ldr	r3, [r3, #32]
 80081a8:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f003 020f 	and.w	r2, r3, #15
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	091b      	lsrs	r3, r3, #4
 80081c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	0a1b      	lsrs	r3, r3, #8
 80081ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80081d6:	4b07      	ldr	r3, [pc, #28]	; (80081f4 <HAL_RCC_GetClockConfig+0x6c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 020f 	and.w	r2, r3, #15
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	601a      	str	r2, [r3, #0]
}
 80081e2:	bf00      	nop
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	44020c00 	.word	0x44020c00
 80081f4:	40022000 	.word	0x40022000

080081f8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80081f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081fc:	b0d8      	sub	sp, #352	; 0x160
 80081fe:	af00      	add	r7, sp, #0
 8008200:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008204:	2300      	movs	r3, #0
 8008206:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800820a:	2300      	movs	r3, #0
 800820c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008210:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008218:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 800821c:	2500      	movs	r5, #0
 800821e:	ea54 0305 	orrs.w	r3, r4, r5
 8008222:	d00b      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8008224:	4bcd      	ldr	r3, [pc, #820]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800822a:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 800822e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008234:	4ac9      	ldr	r2, [pc, #804]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008236:	430b      	orrs	r3, r1
 8008238:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800823c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008244:	f002 0801 	and.w	r8, r2, #1
 8008248:	f04f 0900 	mov.w	r9, #0
 800824c:	ea58 0309 	orrs.w	r3, r8, r9
 8008250:	d042      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8008252:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008258:	2b05      	cmp	r3, #5
 800825a:	d823      	bhi.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800825c:	a201      	add	r2, pc, #4	; (adr r2, 8008264 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800825e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008262:	bf00      	nop
 8008264:	080082ad 	.word	0x080082ad
 8008268:	0800827d 	.word	0x0800827d
 800826c:	08008291 	.word	0x08008291
 8008270:	080082ad 	.word	0x080082ad
 8008274:	080082ad 	.word	0x080082ad
 8008278:	080082ad 	.word	0x080082ad
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800827c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008280:	3308      	adds	r3, #8
 8008282:	4618      	mov	r0, r3
 8008284:	f004 feda 	bl	800d03c <RCCEx_PLL2_Config>
 8008288:	4603      	mov	r3, r0
 800828a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800828e:	e00e      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008290:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008294:	3330      	adds	r3, #48	; 0x30
 8008296:	4618      	mov	r0, r3
 8008298:	f004 ff68 	bl	800d16c <RCCEx_PLL3_Config>
 800829c:	4603      	mov	r3, r0
 800829e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80082a2:	e004      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80082aa:	e000      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80082ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10c      	bne.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80082b6:	4ba9      	ldr	r3, [pc, #676]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80082b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80082bc:	f023 0107 	bic.w	r1, r3, #7
 80082c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80082c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c6:	4aa5      	ldr	r2, [pc, #660]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80082c8:	430b      	orrs	r3, r1
 80082ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80082ce:	e003      	b.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80082d4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80082dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e0:	f002 0a02 	and.w	sl, r2, #2
 80082e4:	f04f 0b00 	mov.w	fp, #0
 80082e8:	ea5a 030b 	orrs.w	r3, sl, fp
 80082ec:	f000 8088 	beq.w	8008400 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80082f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80082f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082f6:	2b28      	cmp	r3, #40	; 0x28
 80082f8:	d868      	bhi.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80082fa:	a201      	add	r2, pc, #4	; (adr r2, 8008300 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80082fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008300:	080083d5 	.word	0x080083d5
 8008304:	080083cd 	.word	0x080083cd
 8008308:	080083cd 	.word	0x080083cd
 800830c:	080083cd 	.word	0x080083cd
 8008310:	080083cd 	.word	0x080083cd
 8008314:	080083cd 	.word	0x080083cd
 8008318:	080083cd 	.word	0x080083cd
 800831c:	080083cd 	.word	0x080083cd
 8008320:	080083a5 	.word	0x080083a5
 8008324:	080083cd 	.word	0x080083cd
 8008328:	080083cd 	.word	0x080083cd
 800832c:	080083cd 	.word	0x080083cd
 8008330:	080083cd 	.word	0x080083cd
 8008334:	080083cd 	.word	0x080083cd
 8008338:	080083cd 	.word	0x080083cd
 800833c:	080083cd 	.word	0x080083cd
 8008340:	080083b9 	.word	0x080083b9
 8008344:	080083cd 	.word	0x080083cd
 8008348:	080083cd 	.word	0x080083cd
 800834c:	080083cd 	.word	0x080083cd
 8008350:	080083cd 	.word	0x080083cd
 8008354:	080083cd 	.word	0x080083cd
 8008358:	080083cd 	.word	0x080083cd
 800835c:	080083cd 	.word	0x080083cd
 8008360:	080083d5 	.word	0x080083d5
 8008364:	080083cd 	.word	0x080083cd
 8008368:	080083cd 	.word	0x080083cd
 800836c:	080083cd 	.word	0x080083cd
 8008370:	080083cd 	.word	0x080083cd
 8008374:	080083cd 	.word	0x080083cd
 8008378:	080083cd 	.word	0x080083cd
 800837c:	080083cd 	.word	0x080083cd
 8008380:	080083d5 	.word	0x080083d5
 8008384:	080083cd 	.word	0x080083cd
 8008388:	080083cd 	.word	0x080083cd
 800838c:	080083cd 	.word	0x080083cd
 8008390:	080083cd 	.word	0x080083cd
 8008394:	080083cd 	.word	0x080083cd
 8008398:	080083cd 	.word	0x080083cd
 800839c:	080083cd 	.word	0x080083cd
 80083a0:	080083d5 	.word	0x080083d5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80083a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80083a8:	3308      	adds	r3, #8
 80083aa:	4618      	mov	r0, r3
 80083ac:	f004 fe46 	bl	800d03c <RCCEx_PLL2_Config>
 80083b0:	4603      	mov	r3, r0
 80083b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80083b6:	e00e      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80083b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80083bc:	3330      	adds	r3, #48	; 0x30
 80083be:	4618      	mov	r0, r3
 80083c0:	f004 fed4 	bl	800d16c <RCCEx_PLL3_Config>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80083ca:	e004      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80083d2:	e000      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80083d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10c      	bne.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80083de:	4b5f      	ldr	r3, [pc, #380]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80083e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80083e4:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80083e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80083ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ee:	4a5b      	ldr	r2, [pc, #364]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80083f0:	430b      	orrs	r3, r1
 80083f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80083f6:	e003      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80083fc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008400:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008408:	f002 0304 	and.w	r3, r2, #4
 800840c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008410:	2300      	movs	r3, #0
 8008412:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8008416:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800841a:	460b      	mov	r3, r1
 800841c:	4313      	orrs	r3, r2
 800841e:	d04e      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8008420:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008426:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800842a:	d02c      	beq.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800842c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008430:	d825      	bhi.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008436:	d028      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800843c:	d81f      	bhi.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800843e:	2bc0      	cmp	r3, #192	; 0xc0
 8008440:	d025      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8008442:	2bc0      	cmp	r3, #192	; 0xc0
 8008444:	d81b      	bhi.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008446:	2b80      	cmp	r3, #128	; 0x80
 8008448:	d00f      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x272>
 800844a:	2b80      	cmp	r3, #128	; 0x80
 800844c:	d817      	bhi.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800844e:	2b00      	cmp	r3, #0
 8008450:	d01f      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8008452:	2b40      	cmp	r3, #64	; 0x40
 8008454:	d113      	bne.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008456:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800845a:	3308      	adds	r3, #8
 800845c:	4618      	mov	r0, r3
 800845e:	f004 fded 	bl	800d03c <RCCEx_PLL2_Config>
 8008462:	4603      	mov	r3, r0
 8008464:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8008468:	e014      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800846a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800846e:	3330      	adds	r3, #48	; 0x30
 8008470:	4618      	mov	r0, r3
 8008472:	f004 fe7b 	bl	800d16c <RCCEx_PLL3_Config>
 8008476:	4603      	mov	r3, r0
 8008478:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800847c:	e00a      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008484:	e006      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8008486:	bf00      	nop
 8008488:	e004      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800848a:	bf00      	nop
 800848c:	e002      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800848e:	bf00      	nop
 8008490:	e000      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8008492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008494:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10c      	bne.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800849c:	4b2f      	ldr	r3, [pc, #188]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800849e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80084a2:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80084a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80084aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084ac:	4a2b      	ldr	r2, [pc, #172]	; (800855c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80084ae:	430b      	orrs	r3, r1
 80084b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80084b4:	e003      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80084ba:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80084be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	f002 0308 	and.w	r3, r2, #8
 80084ca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80084ce:	2300      	movs	r3, #0
 80084d0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80084d4:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 80084d8:	460b      	mov	r3, r1
 80084da:	4313      	orrs	r3, r2
 80084dc:	d056      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80084de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80084e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084e4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80084e8:	d031      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80084ea:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80084ee:	d82a      	bhi.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80084f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084f4:	d02d      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80084f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084fa:	d824      	bhi.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80084fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008500:	d029      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8008502:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008506:	d81e      	bhi.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800850c:	d011      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800850e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008512:	d818      	bhi.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008514:	2b00      	cmp	r3, #0
 8008516:	d023      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800851c:	d113      	bne.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800851e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008522:	3308      	adds	r3, #8
 8008524:	4618      	mov	r0, r3
 8008526:	f004 fd89 	bl	800d03c <RCCEx_PLL2_Config>
 800852a:	4603      	mov	r3, r0
 800852c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8008530:	e017      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008532:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008536:	3330      	adds	r3, #48	; 0x30
 8008538:	4618      	mov	r0, r3
 800853a:	f004 fe17 	bl	800d16c <RCCEx_PLL3_Config>
 800853e:	4603      	mov	r3, r0
 8008540:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8008544:	e00d      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800854c:	e009      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800854e:	bf00      	nop
 8008550:	e007      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8008552:	bf00      	nop
 8008554:	e005      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8008556:	bf00      	nop
 8008558:	e003      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800855a:	bf00      	nop
 800855c:	44020c00 	.word	0x44020c00
        break;
 8008560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008562:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10c      	bne.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800856a:	4bbb      	ldr	r3, [pc, #748]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800856c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008570:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8008574:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800857a:	4ab7      	ldr	r2, [pc, #732]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800857c:	430b      	orrs	r3, r1
 800857e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008582:	e003      	b.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008584:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008588:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800858c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	f002 0310 	and.w	r3, r2, #16
 8008598:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800859c:	2300      	movs	r3, #0
 800859e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80085a2:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80085a6:	460b      	mov	r3, r1
 80085a8:	4313      	orrs	r3, r2
 80085aa:	d053      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80085ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80085b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085b2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80085b6:	d031      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80085b8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80085bc:	d82a      	bhi.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80085be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085c2:	d02d      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80085c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085c8:	d824      	bhi.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80085ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085ce:	d029      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80085d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085d4:	d81e      	bhi.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80085d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085da:	d011      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80085dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085e0:	d818      	bhi.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d020      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80085e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ea:	d113      	bne.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80085ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80085f0:	3308      	adds	r3, #8
 80085f2:	4618      	mov	r0, r3
 80085f4:	f004 fd22 	bl	800d03c <RCCEx_PLL2_Config>
 80085f8:	4603      	mov	r3, r0
 80085fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80085fe:	e014      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008600:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008604:	3330      	adds	r3, #48	; 0x30
 8008606:	4618      	mov	r0, r3
 8008608:	f004 fdb0 	bl	800d16c <RCCEx_PLL3_Config>
 800860c:	4603      	mov	r3, r0
 800860e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8008612:	e00a      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800861a:	e006      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800861c:	bf00      	nop
 800861e:	e004      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008620:	bf00      	nop
 8008622:	e002      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008624:	bf00      	nop
 8008626:	e000      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800862a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10c      	bne.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008632:	4b89      	ldr	r3, [pc, #548]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008638:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800863c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008642:	4a85      	ldr	r2, [pc, #532]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008644:	430b      	orrs	r3, r1
 8008646:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800864a:	e003      	b.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800864c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008650:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008654:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	f002 0320 	and.w	r3, r2, #32
 8008660:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008664:	2300      	movs	r3, #0
 8008666:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800866a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800866e:	460b      	mov	r3, r1
 8008670:	4313      	orrs	r3, r2
 8008672:	d053      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8008674:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800867e:	d031      	beq.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8008680:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008684:	d82a      	bhi.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8008686:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800868a:	d02d      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800868c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008690:	d824      	bhi.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8008692:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008696:	d029      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8008698:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800869c:	d81e      	bhi.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800869e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086a2:	d011      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80086a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086a8:	d818      	bhi.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d020      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80086ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086b2:	d113      	bne.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80086b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80086b8:	3308      	adds	r3, #8
 80086ba:	4618      	mov	r0, r3
 80086bc:	f004 fcbe 	bl	800d03c <RCCEx_PLL2_Config>
 80086c0:	4603      	mov	r3, r0
 80086c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80086c6:	e014      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80086c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80086cc:	3330      	adds	r3, #48	; 0x30
 80086ce:	4618      	mov	r0, r3
 80086d0:	f004 fd4c 	bl	800d16c <RCCEx_PLL3_Config>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80086da:	e00a      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80086e2:	e006      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80086e4:	bf00      	nop
 80086e6:	e004      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80086e8:	bf00      	nop
 80086ea:	e002      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80086ec:	bf00      	nop
 80086ee:	e000      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80086f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10c      	bne.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80086fa:	4b57      	ldr	r3, [pc, #348]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80086fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008700:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8008704:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800870a:	4a53      	ldr	r2, [pc, #332]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800870c:	430b      	orrs	r3, r1
 800870e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008712:	e003      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008714:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008718:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800871c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008728:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800872c:	2300      	movs	r3, #0
 800872e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008732:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8008736:	460b      	mov	r3, r1
 8008738:	4313      	orrs	r3, r2
 800873a:	d053      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800873c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008742:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008746:	d031      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8008748:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800874c:	d82a      	bhi.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800874e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008752:	d02d      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8008754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008758:	d824      	bhi.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800875a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800875e:	d029      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008760:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008764:	d81e      	bhi.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008766:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800876a:	d011      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800876c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008770:	d818      	bhi.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d020      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008776:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800877a:	d113      	bne.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800877c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008780:	3308      	adds	r3, #8
 8008782:	4618      	mov	r0, r3
 8008784:	f004 fc5a 	bl	800d03c <RCCEx_PLL2_Config>
 8008788:	4603      	mov	r3, r0
 800878a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800878e:	e014      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008790:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008794:	3330      	adds	r3, #48	; 0x30
 8008796:	4618      	mov	r0, r3
 8008798:	f004 fce8 	bl	800d16c <RCCEx_PLL3_Config>
 800879c:	4603      	mov	r3, r0
 800879e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80087a2:	e00a      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80087aa:	e006      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80087ac:	bf00      	nop
 80087ae:	e004      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80087b0:	bf00      	nop
 80087b2:	e002      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80087b4:	bf00      	nop
 80087b6:	e000      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80087b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10c      	bne.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80087c2:	4b25      	ldr	r3, [pc, #148]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80087c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80087c8:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 80087cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80087d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087d2:	4a21      	ldr	r2, [pc, #132]	; (8008858 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80087d4:	430b      	orrs	r3, r1
 80087d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80087da:	e003      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80087e0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80087e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80087e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ec:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80087f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80087f4:	2300      	movs	r3, #0
 80087f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80087fa:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 80087fe:	460b      	mov	r3, r1
 8008800:	4313      	orrs	r3, r2
 8008802:	d055      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8008804:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800880a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800880e:	d033      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8008810:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008814:	d82c      	bhi.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008816:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800881a:	d02f      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x684>
 800881c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008820:	d826      	bhi.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008822:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008826:	d02b      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8008828:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800882c:	d820      	bhi.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800882e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008832:	d013      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008838:	d81a      	bhi.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800883a:	2b00      	cmp	r3, #0
 800883c:	d022      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800883e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008842:	d115      	bne.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008844:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008848:	3308      	adds	r3, #8
 800884a:	4618      	mov	r0, r3
 800884c:	f004 fbf6 	bl	800d03c <RCCEx_PLL2_Config>
 8008850:	4603      	mov	r3, r0
 8008852:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8008856:	e016      	b.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8008858:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800885c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008860:	3330      	adds	r3, #48	; 0x30
 8008862:	4618      	mov	r0, r3
 8008864:	f004 fc82 	bl	800d16c <RCCEx_PLL3_Config>
 8008868:	4603      	mov	r3, r0
 800886a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800886e:	e00a      	b.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008876:	e006      	b.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008878:	bf00      	nop
 800887a:	e004      	b.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800887c:	bf00      	nop
 800887e:	e002      	b.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008880:	bf00      	nop
 8008882:	e000      	b.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008886:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10c      	bne.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800888e:	4bbb      	ldr	r3, [pc, #748]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008890:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008894:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008898:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800889c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800889e:	4ab7      	ldr	r2, [pc, #732]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80088a0:	430b      	orrs	r3, r1
 80088a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80088a6:	e003      	b.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80088ac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80088b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80088bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80088c0:	2300      	movs	r3, #0
 80088c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80088c6:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80088ca:	460b      	mov	r3, r1
 80088cc:	4313      	orrs	r3, r2
 80088ce:	d053      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80088d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80088d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088d6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80088da:	d031      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80088dc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80088e0:	d82a      	bhi.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80088e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088e6:	d02d      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80088e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088ec:	d824      	bhi.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80088ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80088f2:	d029      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80088f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80088f8:	d81e      	bhi.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80088fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088fe:	d011      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8008900:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008904:	d818      	bhi.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008906:	2b00      	cmp	r3, #0
 8008908:	d020      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x754>
 800890a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800890e:	d113      	bne.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008910:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008914:	3308      	adds	r3, #8
 8008916:	4618      	mov	r0, r3
 8008918:	f004 fb90 	bl	800d03c <RCCEx_PLL2_Config>
 800891c:	4603      	mov	r3, r0
 800891e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8008922:	e014      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008924:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008928:	3330      	adds	r3, #48	; 0x30
 800892a:	4618      	mov	r0, r3
 800892c:	f004 fc1e 	bl	800d16c <RCCEx_PLL3_Config>
 8008930:	4603      	mov	r3, r0
 8008932:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8008936:	e00a      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800893e:	e006      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008940:	bf00      	nop
 8008942:	e004      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008944:	bf00      	nop
 8008946:	e002      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008948:	bf00      	nop
 800894a:	e000      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800894c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800894e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10c      	bne.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8008956:	4b89      	ldr	r3, [pc, #548]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008958:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800895c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008960:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008966:	4a85      	ldr	r2, [pc, #532]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008968:	430b      	orrs	r3, r1
 800896a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800896e:	e003      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008970:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008974:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8008978:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800897c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008980:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8008984:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008988:	2300      	movs	r3, #0
 800898a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800898e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008992:	460b      	mov	r3, r1
 8008994:	4313      	orrs	r3, r2
 8008996:	d055      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8008998:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800899c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089a0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80089a4:	d031      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x812>
 80089a6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80089aa:	d82a      	bhi.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80089ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089b0:	d02d      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x816>
 80089b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089b6:	d824      	bhi.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80089b8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80089bc:	d029      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80089be:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80089c2:	d81e      	bhi.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80089c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089c8:	d011      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80089ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089ce:	d818      	bhi.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d020      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80089d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089d8:	d113      	bne.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80089da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80089de:	3308      	adds	r3, #8
 80089e0:	4618      	mov	r0, r3
 80089e2:	f004 fb2b 	bl	800d03c <RCCEx_PLL2_Config>
 80089e6:	4603      	mov	r3, r0
 80089e8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80089ec:	e014      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80089ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80089f2:	3330      	adds	r3, #48	; 0x30
 80089f4:	4618      	mov	r0, r3
 80089f6:	f004 fbb9 	bl	800d16c <RCCEx_PLL3_Config>
 80089fa:	4603      	mov	r3, r0
 80089fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8008a00:	e00a      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008a08:	e006      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008a0a:	bf00      	nop
 8008a0c:	e004      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008a0e:	bf00      	nop
 8008a10:	e002      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008a12:	bf00      	nop
 8008a14:	e000      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a18:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10d      	bne.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8008a20:	4b56      	ldr	r3, [pc, #344]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008a22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008a26:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8008a2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a32:	4a52      	ldr	r2, [pc, #328]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008a34:	430b      	orrs	r3, r1
 8008a36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008a3a:	e003      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a3c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008a40:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8008a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008a50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008a54:	2300      	movs	r3, #0
 8008a56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008a5a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4313      	orrs	r3, r2
 8008a62:	d044      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8008a64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a6c:	2b05      	cmp	r3, #5
 8008a6e:	d823      	bhi.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8008a70:	a201      	add	r2, pc, #4	; (adr r2, 8008a78 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8008a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a76:	bf00      	nop
 8008a78:	08008ac1 	.word	0x08008ac1
 8008a7c:	08008a91 	.word	0x08008a91
 8008a80:	08008aa5 	.word	0x08008aa5
 8008a84:	08008ac1 	.word	0x08008ac1
 8008a88:	08008ac1 	.word	0x08008ac1
 8008a8c:	08008ac1 	.word	0x08008ac1
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a94:	3308      	adds	r3, #8
 8008a96:	4618      	mov	r0, r3
 8008a98:	f004 fad0 	bl	800d03c <RCCEx_PLL2_Config>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8008aa2:	e00e      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008aa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008aa8:	3330      	adds	r3, #48	; 0x30
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f004 fb5e 	bl	800d16c <RCCEx_PLL3_Config>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8008ab6:	e004      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008abe:	e000      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8008ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ac2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10d      	bne.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8008aca:	4b2c      	ldr	r3, [pc, #176]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008acc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008ad0:	f023 0107 	bic.w	r1, r3, #7
 8008ad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008adc:	4a27      	ldr	r2, [pc, #156]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008ade:	430b      	orrs	r3, r1
 8008ae0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8008ae4:	e003      	b.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008aea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8008aee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008afa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008afe:	2300      	movs	r3, #0
 8008b00:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008b04:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	d04f      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8008b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b16:	2b50      	cmp	r3, #80	; 0x50
 8008b18:	d029      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008b1a:	2b50      	cmp	r3, #80	; 0x50
 8008b1c:	d823      	bhi.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008b1e:	2b40      	cmp	r3, #64	; 0x40
 8008b20:	d027      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8008b22:	2b40      	cmp	r3, #64	; 0x40
 8008b24:	d81f      	bhi.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008b26:	2b30      	cmp	r3, #48	; 0x30
 8008b28:	d025      	beq.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8008b2a:	2b30      	cmp	r3, #48	; 0x30
 8008b2c:	d81b      	bhi.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008b2e:	2b20      	cmp	r3, #32
 8008b30:	d00f      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008b32:	2b20      	cmp	r3, #32
 8008b34:	d817      	bhi.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d022      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008b3a:	2b10      	cmp	r3, #16
 8008b3c:	d113      	bne.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b42:	3308      	adds	r3, #8
 8008b44:	4618      	mov	r0, r3
 8008b46:	f004 fa79 	bl	800d03c <RCCEx_PLL2_Config>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8008b50:	e017      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008b52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b56:	3330      	adds	r3, #48	; 0x30
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f004 fb07 	bl	800d16c <RCCEx_PLL3_Config>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8008b64:	e00d      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008b6c:	e009      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8008b6e:	bf00      	nop
 8008b70:	e007      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8008b72:	bf00      	nop
 8008b74:	e005      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8008b76:	bf00      	nop
 8008b78:	e003      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8008b7a:	bf00      	nop
 8008b7c:	44020c00 	.word	0x44020c00
        break;
 8008b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10d      	bne.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8008b8a:	4baf      	ldr	r3, [pc, #700]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008b8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008b90:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8008b94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b9c:	4aaa      	ldr	r2, [pc, #680]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008b9e:	430b      	orrs	r3, r1
 8008ba0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8008ba4:	e003      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008baa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008bba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008bc4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	d055      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8008bce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bd6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008bda:	d031      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8008bdc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008be0:	d82a      	bhi.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008be2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008be6:	d02d      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8008be8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bec:	d824      	bhi.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008bee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008bf2:	d029      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8008bf4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008bf8:	d81e      	bhi.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008bfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bfe:	d011      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8008c00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c04:	d818      	bhi.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d020      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8008c0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c0e:	d113      	bne.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c14:	3308      	adds	r3, #8
 8008c16:	4618      	mov	r0, r3
 8008c18:	f004 fa10 	bl	800d03c <RCCEx_PLL2_Config>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8008c22:	e014      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c28:	3330      	adds	r3, #48	; 0x30
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f004 fa9e 	bl	800d16c <RCCEx_PLL3_Config>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8008c36:	e00a      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008c3e:	e006      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008c40:	bf00      	nop
 8008c42:	e004      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008c44:	bf00      	nop
 8008c46:	e002      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008c48:	bf00      	nop
 8008c4a:	e000      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10d      	bne.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008c56:	4b7c      	ldr	r3, [pc, #496]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c5c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008c60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c68:	4a77      	ldr	r2, [pc, #476]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008c6a:	430b      	orrs	r3, r1
 8008c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008c70:	e003      	b.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008c76:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008c86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008c90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008c94:	460b      	mov	r3, r1
 8008c96:	4313      	orrs	r3, r2
 8008c98:	d03d      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8008c9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ca2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ca6:	d01b      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8008ca8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008cac:	d814      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8008cae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cb2:	d017      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8008cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cb8:	d80e      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d014      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8008cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cc2:	d109      	bne.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008cc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008cc8:	3330      	adds	r3, #48	; 0x30
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f004 fa4e 	bl	800d16c <RCCEx_PLL3_Config>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8008cd6:	e008      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008cde:	e004      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8008ce0:	bf00      	nop
 8008ce2:	e002      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8008ce4:	bf00      	nop
 8008ce6:	e000      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8008ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10d      	bne.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008cf2:	4b55      	ldr	r3, [pc, #340]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008cf4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008cf8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008cfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d04:	4a50      	ldr	r2, [pc, #320]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008d06:	430b      	orrs	r3, r1
 8008d08:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008d0c:	e003      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008d12:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008d16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008d22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d26:	2300      	movs	r3, #0
 8008d28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d2c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008d30:	460b      	mov	r3, r1
 8008d32:	4313      	orrs	r3, r2
 8008d34:	d03d      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8008d36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008d42:	d01b      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8008d44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008d48:	d814      	bhi.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8008d4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008d4e:	d017      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8008d50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008d54:	d80e      	bhi.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d014      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8008d5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d5e:	d109      	bne.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008d60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d64:	3330      	adds	r3, #48	; 0x30
 8008d66:	4618      	mov	r0, r3
 8008d68:	f004 fa00 	bl	800d16c <RCCEx_PLL3_Config>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8008d72:	e008      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008d7a:	e004      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8008d7c:	bf00      	nop
 8008d7e:	e002      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8008d80:	bf00      	nop
 8008d82:	e000      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8008d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10d      	bne.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008d8e:	4b2e      	ldr	r3, [pc, #184]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008d90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d94:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8008d98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008da0:	4a29      	ldr	r2, [pc, #164]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008da2:	430b      	orrs	r3, r1
 8008da4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008da8:	e003      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008daa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008dae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008db2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dba:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008dc8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008dcc:	460b      	mov	r3, r1
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	d040      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8008dd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008dda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008dde:	d01b      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8008de0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008de4:	d814      	bhi.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8008de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dea:	d017      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008dec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008df0:	d80e      	bhi.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d014      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dfa:	d109      	bne.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e00:	3330      	adds	r3, #48	; 0x30
 8008e02:	4618      	mov	r0, r3
 8008e04:	f004 f9b2 	bl	800d16c <RCCEx_PLL3_Config>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8008e0e:	e008      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008e16:	e004      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008e18:	bf00      	nop
 8008e1a:	e002      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008e1c:	bf00      	nop
 8008e1e:	e000      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d110      	bne.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008e2a:	4b07      	ldr	r3, [pc, #28]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008e2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008e30:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008e34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e3c:	4a02      	ldr	r2, [pc, #8]	; (8008e48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008e3e:	430b      	orrs	r3, r1
 8008e40:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008e44:	e006      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8008e46:	bf00      	nop
 8008e48:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e4c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008e50:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008e6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4313      	orrs	r3, r2
 8008e72:	d03d      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8008e74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008e80:	d01b      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8008e82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008e86:	d814      	bhi.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8008e88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e8c:	d017      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8008e8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e92:	d80e      	bhi.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d014      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8008e98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e9c:	d109      	bne.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008e9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ea2:	3330      	adds	r3, #48	; 0x30
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f004 f961 	bl	800d16c <RCCEx_PLL3_Config>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8008eb0:	e008      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008eb8:	e004      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8008eba:	bf00      	nop
 8008ebc:	e002      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8008ebe:	bf00      	nop
 8008ec0:	e000      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8008ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ec4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10d      	bne.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008ecc:	4bbe      	ldr	r3, [pc, #760]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008ece:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008ed2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008ed6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ede:	4aba      	ldr	r2, [pc, #744]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008ee0:	430b      	orrs	r3, r1
 8008ee2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008ee6:	e003      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008eec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8008ef0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008efc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f00:	2300      	movs	r3, #0
 8008f02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	d035      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8008f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f1c:	d015      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8008f1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f22:	d80e      	bhi.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d012      	beq.n	8008f4e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8008f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f2c:	d109      	bne.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008f2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f32:	3330      	adds	r3, #48	; 0x30
 8008f34:	4618      	mov	r0, r3
 8008f36:	f004 f919 	bl	800d16c <RCCEx_PLL3_Config>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8008f40:	e006      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008f48:	e002      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8008f4a:	bf00      	nop
 8008f4c:	e000      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8008f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f50:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10d      	bne.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8008f58:	4b9b      	ldr	r3, [pc, #620]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008f5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f5e:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8008f62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f6a:	4a97      	ldr	r2, [pc, #604]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008f6c:	430b      	orrs	r3, r1
 8008f6e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008f72:	e003      	b.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f74:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008f78:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f84:	2100      	movs	r1, #0
 8008f86:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f92:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008f96:	460b      	mov	r3, r1
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	d00e      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8008f9c:	4b8a      	ldr	r3, [pc, #552]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	4a89      	ldr	r2, [pc, #548]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008fa2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fa6:	61d3      	str	r3, [r2, #28]
 8008fa8:	4b87      	ldr	r3, [pc, #540]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008faa:	69d9      	ldr	r1, [r3, #28]
 8008fac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fb0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8008fb4:	4a84      	ldr	r2, [pc, #528]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008fb6:	430b      	orrs	r3, r1
 8008fb8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008fba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008fc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008fd0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	d055      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8008fda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008fe2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008fe6:	d031      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8008fe8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008fec:	d82a      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ff2:	d02d      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8008ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ff8:	d824      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ffe:	d029      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8009000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009004:	d81e      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8009006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800900a:	d011      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800900c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009010:	d818      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8009012:	2b00      	cmp	r3, #0
 8009014:	d020      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8009016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800901a:	d113      	bne.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800901c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009020:	3308      	adds	r3, #8
 8009022:	4618      	mov	r0, r3
 8009024:	f004 f80a 	bl	800d03c <RCCEx_PLL2_Config>
 8009028:	4603      	mov	r3, r0
 800902a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800902e:	e014      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009030:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009034:	3330      	adds	r3, #48	; 0x30
 8009036:	4618      	mov	r0, r3
 8009038:	f004 f898 	bl	800d16c <RCCEx_PLL3_Config>
 800903c:	4603      	mov	r3, r0
 800903e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8009042:	e00a      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800904a:	e006      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800904c:	bf00      	nop
 800904e:	e004      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8009050:	bf00      	nop
 8009052:	e002      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8009054:	bf00      	nop
 8009056:	e000      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8009058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800905a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10d      	bne.n	800907e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8009062:	4b59      	ldr	r3, [pc, #356]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009064:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009068:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800906c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009070:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009074:	4a54      	ldr	r2, [pc, #336]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009076:	430b      	orrs	r3, r1
 8009078:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800907c:	e003      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800907e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009082:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009086:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800908a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009092:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009096:	2300      	movs	r3, #0
 8009098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800909c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80090a0:	460b      	mov	r3, r1
 80090a2:	4313      	orrs	r3, r2
 80090a4:	d055      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80090a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80090aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80090ae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80090b2:	d031      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80090b4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80090b8:	d82a      	bhi.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80090ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090be:	d02d      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80090c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090c4:	d824      	bhi.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80090c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090ca:	d029      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80090cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090d0:	d81e      	bhi.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80090d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090d6:	d011      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80090d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090dc:	d818      	bhi.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d020      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80090e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090e6:	d113      	bne.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80090e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80090ec:	3308      	adds	r3, #8
 80090ee:	4618      	mov	r0, r3
 80090f0:	f003 ffa4 	bl	800d03c <RCCEx_PLL2_Config>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80090fa:	e014      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80090fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009100:	3330      	adds	r3, #48	; 0x30
 8009102:	4618      	mov	r0, r3
 8009104:	f004 f832 	bl	800d16c <RCCEx_PLL3_Config>
 8009108:	4603      	mov	r3, r0
 800910a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800910e:	e00a      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009116:	e006      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8009118:	bf00      	nop
 800911a:	e004      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800911c:	bf00      	nop
 800911e:	e002      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8009120:	bf00      	nop
 8009122:	e000      	b.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8009124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009126:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10d      	bne.n	800914a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800912e:	4b26      	ldr	r3, [pc, #152]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009130:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009134:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009138:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800913c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009140:	4a21      	ldr	r2, [pc, #132]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009142:	430b      	orrs	r3, r1
 8009144:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009148:	e003      	b.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800914a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800914e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8009152:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915a:	2100      	movs	r1, #0
 800915c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8009160:	f003 0320 	and.w	r3, r3, #32
 8009164:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009168:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800916c:	460b      	mov	r3, r1
 800916e:	4313      	orrs	r3, r2
 8009170:	d057      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8009172:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009176:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800917a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800917e:	d033      	beq.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8009180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009184:	d82c      	bhi.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8009186:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800918a:	d02f      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800918c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009190:	d826      	bhi.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8009192:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009196:	d02b      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8009198:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800919c:	d820      	bhi.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800919e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091a2:	d013      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80091a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091a8:	d81a      	bhi.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d022      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80091ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091b2:	d115      	bne.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80091b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091b8:	3308      	adds	r3, #8
 80091ba:	4618      	mov	r0, r3
 80091bc:	f003 ff3e 	bl	800d03c <RCCEx_PLL2_Config>
 80091c0:	4603      	mov	r3, r0
 80091c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80091c6:	e016      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80091c8:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80091cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091d0:	3330      	adds	r3, #48	; 0x30
 80091d2:	4618      	mov	r0, r3
 80091d4:	f003 ffca 	bl	800d16c <RCCEx_PLL3_Config>
 80091d8:	4603      	mov	r3, r0
 80091da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80091de:	e00a      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80091e6:	e006      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80091e8:	bf00      	nop
 80091ea:	e004      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80091ec:	bf00      	nop
 80091ee:	e002      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80091f0:	bf00      	nop
 80091f2:	e000      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80091f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10d      	bne.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80091fe:	4bbb      	ldr	r3, [pc, #748]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009200:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009204:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009208:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800920c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009210:	4ab6      	ldr	r2, [pc, #728]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009212:	430b      	orrs	r3, r1
 8009214:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009218:	e003      	b.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800921a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800921e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8009222:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	2100      	movs	r1, #0
 800922c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8009230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009238:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800923c:	460b      	mov	r3, r1
 800923e:	4313      	orrs	r3, r2
 8009240:	d055      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8009242:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800924a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800924e:	d031      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8009250:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009254:	d82a      	bhi.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8009256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800925a:	d02d      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800925c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009260:	d824      	bhi.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8009262:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009266:	d029      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8009268:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800926c:	d81e      	bhi.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800926e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009272:	d011      	beq.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8009274:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009278:	d818      	bhi.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800927a:	2b00      	cmp	r3, #0
 800927c:	d020      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800927e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009282:	d113      	bne.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009284:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009288:	3308      	adds	r3, #8
 800928a:	4618      	mov	r0, r3
 800928c:	f003 fed6 	bl	800d03c <RCCEx_PLL2_Config>
 8009290:	4603      	mov	r3, r0
 8009292:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8009296:	e014      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009298:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800929c:	3330      	adds	r3, #48	; 0x30
 800929e:	4618      	mov	r0, r3
 80092a0:	f003 ff64 	bl	800d16c <RCCEx_PLL3_Config>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80092aa:	e00a      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80092b2:	e006      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80092b4:	bf00      	nop
 80092b6:	e004      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80092b8:	bf00      	nop
 80092ba:	e002      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80092bc:	bf00      	nop
 80092be:	e000      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80092c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10d      	bne.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80092ca:	4b88      	ldr	r3, [pc, #544]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80092cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80092d0:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80092d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80092dc:	4a83      	ldr	r2, [pc, #524]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80092de:	430b      	orrs	r3, r1
 80092e0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80092e4:	e003      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80092ea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80092ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	2100      	movs	r1, #0
 80092f8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80092fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009300:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009304:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009308:	460b      	mov	r3, r1
 800930a:	4313      	orrs	r3, r2
 800930c:	d055      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800930e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009312:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009316:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800931a:	d031      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800931c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009320:	d82a      	bhi.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8009322:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009326:	d02d      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8009328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800932c:	d824      	bhi.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800932e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009332:	d029      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8009334:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009338:	d81e      	bhi.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800933a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800933e:	d011      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8009340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009344:	d818      	bhi.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8009346:	2b00      	cmp	r3, #0
 8009348:	d020      	beq.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800934a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800934e:	d113      	bne.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009350:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009354:	3308      	adds	r3, #8
 8009356:	4618      	mov	r0, r3
 8009358:	f003 fe70 	bl	800d03c <RCCEx_PLL2_Config>
 800935c:	4603      	mov	r3, r0
 800935e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8009362:	e014      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009364:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009368:	3330      	adds	r3, #48	; 0x30
 800936a:	4618      	mov	r0, r3
 800936c:	f003 fefe 	bl	800d16c <RCCEx_PLL3_Config>
 8009370:	4603      	mov	r3, r0
 8009372:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8009376:	e00a      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800937e:	e006      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8009380:	bf00      	nop
 8009382:	e004      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8009384:	bf00      	nop
 8009386:	e002      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8009388:	bf00      	nop
 800938a:	e000      	b.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800938c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800938e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10d      	bne.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8009396:	4b55      	ldr	r3, [pc, #340]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009398:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800939c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80093a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80093a8:	4a50      	ldr	r2, [pc, #320]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80093aa:	430b      	orrs	r3, r1
 80093ac:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80093b0:	e003      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80093b6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80093ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c2:	2100      	movs	r1, #0
 80093c4:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80093c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80093d0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80093d4:	460b      	mov	r3, r1
 80093d6:	4313      	orrs	r3, r2
 80093d8:	d055      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80093da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80093e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093e6:	d031      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80093e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093ec:	d82a      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80093ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093f2:	d02d      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80093f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093f8:	d824      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80093fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093fe:	d029      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8009400:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009404:	d81e      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8009406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800940a:	d011      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800940c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009410:	d818      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8009412:	2b00      	cmp	r3, #0
 8009414:	d020      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8009416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800941a:	d113      	bne.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800941c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009420:	3308      	adds	r3, #8
 8009422:	4618      	mov	r0, r3
 8009424:	f003 fe0a 	bl	800d03c <RCCEx_PLL2_Config>
 8009428:	4603      	mov	r3, r0
 800942a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800942e:	e014      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009430:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009434:	3330      	adds	r3, #48	; 0x30
 8009436:	4618      	mov	r0, r3
 8009438:	f003 fe98 	bl	800d16c <RCCEx_PLL3_Config>
 800943c:	4603      	mov	r3, r0
 800943e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8009442:	e00a      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800944a:	e006      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800944c:	bf00      	nop
 800944e:	e004      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8009450:	bf00      	nop
 8009452:	e002      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8009454:	bf00      	nop
 8009456:	e000      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8009458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800945a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10d      	bne.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8009462:	4b22      	ldr	r3, [pc, #136]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009464:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009468:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800946c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009470:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009474:	4a1d      	ldr	r2, [pc, #116]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009476:	430b      	orrs	r3, r1
 8009478:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800947c:	e003      	b.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800947e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009482:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009486:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800948a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009492:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009496:	2300      	movs	r3, #0
 8009498:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800949c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80094a0:	460b      	mov	r3, r1
 80094a2:	4313      	orrs	r3, r2
 80094a4:	d055      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80094a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80094ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094b2:	d035      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80094b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094b8:	d82e      	bhi.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80094ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80094be:	d031      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80094c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80094c4:	d828      	bhi.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80094c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094ca:	d01b      	beq.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80094cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094d0:	d822      	bhi.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d003      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80094d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094da:	d009      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80094dc:	e01c      	b.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094de:	4b03      	ldr	r3, [pc, #12]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80094e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e2:	4a02      	ldr	r2, [pc, #8]	; (80094ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80094e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094e8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80094ea:	e01c      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80094ec:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80094f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094f4:	3308      	adds	r3, #8
 80094f6:	4618      	mov	r0, r3
 80094f8:	f003 fda0 	bl	800d03c <RCCEx_PLL2_Config>
 80094fc:	4603      	mov	r3, r0
 80094fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009502:	e010      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009504:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009508:	3330      	adds	r3, #48	; 0x30
 800950a:	4618      	mov	r0, r3
 800950c:	f003 fe2e 	bl	800d16c <RCCEx_PLL3_Config>
 8009510:	4603      	mov	r3, r0
 8009512:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009516:	e006      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800951e:	e002      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8009520:	bf00      	nop
 8009522:	e000      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8009524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009526:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10d      	bne.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800952e:	4bc3      	ldr	r3, [pc, #780]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009534:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009538:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800953c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009540:	4abe      	ldr	r2, [pc, #760]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009542:	430b      	orrs	r3, r1
 8009544:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009548:	e003      	b.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800954a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800954e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8009552:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955a:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800955e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009562:	2300      	movs	r3, #0
 8009564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009568:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800956c:	460b      	mov	r3, r1
 800956e:	4313      	orrs	r3, r2
 8009570:	d051      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8009572:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009576:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800957a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800957e:	d033      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8009580:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009584:	d82c      	bhi.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8009586:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800958a:	d02d      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800958c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009590:	d826      	bhi.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8009592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009596:	d019      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8009598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800959c:	d820      	bhi.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d003      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80095a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80095a6:	d007      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80095a8:	e01a      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095aa:	4ba4      	ldr	r3, [pc, #656]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80095ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ae:	4aa3      	ldr	r2, [pc, #652]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80095b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095b4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80095b6:	e018      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80095b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80095bc:	3308      	adds	r3, #8
 80095be:	4618      	mov	r0, r3
 80095c0:	f003 fd3c 	bl	800d03c <RCCEx_PLL2_Config>
 80095c4:	4603      	mov	r3, r0
 80095c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80095ca:	e00e      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80095cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80095d0:	3330      	adds	r3, #48	; 0x30
 80095d2:	4618      	mov	r0, r3
 80095d4:	f003 fdca 	bl	800d16c <RCCEx_PLL3_Config>
 80095d8:	4603      	mov	r3, r0
 80095da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80095de:	e004      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80095e6:	e000      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80095e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10d      	bne.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80095f2:	4b92      	ldr	r3, [pc, #584]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80095f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80095f8:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 80095fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009600:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009604:	4a8d      	ldr	r2, [pc, #564]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009606:	430b      	orrs	r3, r1
 8009608:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800960c:	e003      	b.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800960e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009612:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009616:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009622:	67bb      	str	r3, [r7, #120]	; 0x78
 8009624:	2300      	movs	r3, #0
 8009626:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009628:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800962c:	460b      	mov	r3, r1
 800962e:	4313      	orrs	r3, r2
 8009630:	d032      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009632:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009636:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800963a:	2b05      	cmp	r3, #5
 800963c:	d80f      	bhi.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800963e:	2b03      	cmp	r3, #3
 8009640:	d211      	bcs.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8009642:	2b01      	cmp	r3, #1
 8009644:	d911      	bls.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8009646:	2b02      	cmp	r3, #2
 8009648:	d109      	bne.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800964a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800964e:	3308      	adds	r3, #8
 8009650:	4618      	mov	r0, r3
 8009652:	f003 fcf3 	bl	800d03c <RCCEx_PLL2_Config>
 8009656:	4603      	mov	r3, r0
 8009658:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800965c:	e006      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009664:	e002      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8009666:	bf00      	nop
 8009668:	e000      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800966a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800966c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10d      	bne.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009674:	4b71      	ldr	r3, [pc, #452]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009676:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800967a:	f023 0107 	bic.w	r1, r3, #7
 800967e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009682:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009686:	4a6d      	ldr	r2, [pc, #436]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009688:	430b      	orrs	r3, r1
 800968a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800968e:	e003      	b.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009690:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009694:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8009698:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a0:	2100      	movs	r1, #0
 80096a2:	6739      	str	r1, [r7, #112]	; 0x70
 80096a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096a8:	677b      	str	r3, [r7, #116]	; 0x74
 80096aa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80096ae:	460b      	mov	r3, r1
 80096b0:	4313      	orrs	r3, r2
 80096b2:	d024      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80096b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d005      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80096c0:	2b08      	cmp	r3, #8
 80096c2:	d005      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80096ca:	e002      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80096cc:	bf00      	nop
 80096ce:	e000      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80096d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10d      	bne.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80096da:	4b58      	ldr	r3, [pc, #352]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80096dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80096e0:	f023 0108 	bic.w	r1, r3, #8
 80096e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80096ec:	4a53      	ldr	r2, [pc, #332]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80096ee:	430b      	orrs	r3, r1
 80096f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80096f4:	e003      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80096fa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80096fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800970a:	66bb      	str	r3, [r7, #104]	; 0x68
 800970c:	2300      	movs	r3, #0
 800970e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009710:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009714:	460b      	mov	r3, r1
 8009716:	4313      	orrs	r3, r2
 8009718:	f000 80b9 	beq.w	800988e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800971c:	4b48      	ldr	r3, [pc, #288]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800971e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009720:	4a47      	ldr	r2, [pc, #284]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8009722:	f043 0301 	orr.w	r3, r3, #1
 8009726:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009728:	f7fa fb6e 	bl	8003e08 <HAL_GetTick>
 800972c:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009730:	e00b      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009732:	f7fa fb69 	bl	8003e08 <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	2b02      	cmp	r3, #2
 8009740:	d903      	bls.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8009742:	2303      	movs	r3, #3
 8009744:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009748:	e005      	b.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800974a:	4b3d      	ldr	r3, [pc, #244]	; (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0ed      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8009756:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800975a:	2b00      	cmp	r3, #0
 800975c:	f040 8093 	bne.w	8009886 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009760:	4b36      	ldr	r3, [pc, #216]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800976a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800976e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009772:	2b00      	cmp	r3, #0
 8009774:	d023      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8009776:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800977a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800977e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009782:	4293      	cmp	r3, r2
 8009784:	d01b      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009786:	4b2d      	ldr	r3, [pc, #180]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800978c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009790:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009794:	4b29      	ldr	r3, [pc, #164]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800979a:	4a28      	ldr	r2, [pc, #160]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800979c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80097a4:	4b25      	ldr	r3, [pc, #148]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80097a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097aa:	4a24      	ldr	r2, [pc, #144]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80097ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80097b4:	4a21      	ldr	r2, [pc, #132]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80097b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80097ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80097be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d019      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097ca:	f7fa fb1d 	bl	8003e08 <HAL_GetTick>
 80097ce:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097d2:	e00d      	b.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097d4:	f7fa fb18 	bl	8003e08 <HAL_GetTick>
 80097d8:	4602      	mov	r2, r0
 80097da:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80097de:	1ad2      	subs	r2, r2, r3
 80097e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d903      	bls.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80097e8:	2303      	movs	r3, #3
 80097ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 80097ee:	e006      	b.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097f0:	4b12      	ldr	r3, [pc, #72]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80097f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097f6:	f003 0302 	and.w	r3, r3, #2
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d0ea      	beq.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80097fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009802:	2b00      	cmp	r3, #0
 8009804:	d13a      	bne.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8009806:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800980a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800980e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009816:	d115      	bne.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8009818:	4b08      	ldr	r3, [pc, #32]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800981a:	69db      	ldr	r3, [r3, #28]
 800981c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009820:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009824:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009828:	091b      	lsrs	r3, r3, #4
 800982a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800982e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009832:	4a02      	ldr	r2, [pc, #8]	; (800983c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009834:	430b      	orrs	r3, r1
 8009836:	61d3      	str	r3, [r2, #28]
 8009838:	e00a      	b.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800983a:	bf00      	nop
 800983c:	44020c00 	.word	0x44020c00
 8009840:	44020800 	.word	0x44020800
 8009844:	4b9f      	ldr	r3, [pc, #636]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009846:	69db      	ldr	r3, [r3, #28]
 8009848:	4a9e      	ldr	r2, [pc, #632]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800984a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800984e:	61d3      	str	r3, [r2, #28]
 8009850:	4b9c      	ldr	r3, [pc, #624]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009856:	4a9b      	ldr	r2, [pc, #620]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800985c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009860:	4b98      	ldr	r3, [pc, #608]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009862:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8009866:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800986a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800986e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009872:	4a94      	ldr	r2, [pc, #592]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009874:	430b      	orrs	r3, r1
 8009876:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800987a:	e008      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800987c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009880:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8009884:	e003      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009886:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800988a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800988e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009896:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800989a:	663b      	str	r3, [r7, #96]	; 0x60
 800989c:	2300      	movs	r3, #0
 800989e:	667b      	str	r3, [r7, #100]	; 0x64
 80098a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80098a4:	460b      	mov	r3, r1
 80098a6:	4313      	orrs	r3, r2
 80098a8:	d035      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80098aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80098b2:	2b30      	cmp	r3, #48	; 0x30
 80098b4:	d014      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80098b6:	2b30      	cmp	r3, #48	; 0x30
 80098b8:	d80e      	bhi.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80098ba:	2b20      	cmp	r3, #32
 80098bc:	d012      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80098be:	2b20      	cmp	r3, #32
 80098c0:	d80a      	bhi.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d010      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80098c6:	2b10      	cmp	r3, #16
 80098c8:	d106      	bne.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098ca:	4b7e      	ldr	r3, [pc, #504]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80098cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ce:	4a7d      	ldr	r2, [pc, #500]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80098d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098d4:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80098d6:	e008      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80098de:	e004      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80098e0:	bf00      	nop
 80098e2:	e002      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80098e4:	bf00      	nop
 80098e6:	e000      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80098e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10d      	bne.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80098f2:	4b74      	ldr	r3, [pc, #464]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80098f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098f8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80098fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009900:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009904:	4a6f      	ldr	r2, [pc, #444]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009906:	430b      	orrs	r3, r1
 8009908:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800990c:	e003      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800990e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009912:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009916:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800991a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009922:	65bb      	str	r3, [r7, #88]	; 0x58
 8009924:	2300      	movs	r3, #0
 8009926:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009928:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800992c:	460b      	mov	r3, r1
 800992e:	4313      	orrs	r3, r2
 8009930:	d033      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8009932:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009936:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800993e:	2b40      	cmp	r3, #64	; 0x40
 8009940:	d007      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8009942:	e010      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009944:	4b5f      	ldr	r3, [pc, #380]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009948:	4a5e      	ldr	r2, [pc, #376]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800994a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800994e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8009950:	e00d      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009952:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009956:	3308      	adds	r3, #8
 8009958:	4618      	mov	r0, r3
 800995a:	f003 fb6f 	bl	800d03c <RCCEx_PLL2_Config>
 800995e:	4603      	mov	r3, r0
 8009960:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8009964:	e003      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800996c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800996e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10d      	bne.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8009976:	4b53      	ldr	r3, [pc, #332]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009978:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800997c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8009980:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009984:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009988:	4a4e      	ldr	r2, [pc, #312]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800998a:	430b      	orrs	r3, r1
 800998c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009990:	e003      	b.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009992:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009996:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800999a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80099a6:	653b      	str	r3, [r7, #80]	; 0x50
 80099a8:	2300      	movs	r3, #0
 80099aa:	657b      	str	r3, [r7, #84]	; 0x54
 80099ac:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80099b0:	460b      	mov	r3, r1
 80099b2:	4313      	orrs	r3, r2
 80099b4:	d033      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80099b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80099ba:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d002      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80099c2:	2b80      	cmp	r3, #128	; 0x80
 80099c4:	d007      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80099c6:	e010      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099c8:	4b3e      	ldr	r3, [pc, #248]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80099ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099cc:	4a3d      	ldr	r2, [pc, #244]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80099ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099d2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80099d4:	e00d      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80099d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80099da:	3308      	adds	r3, #8
 80099dc:	4618      	mov	r0, r3
 80099de:	f003 fb2d 	bl	800d03c <RCCEx_PLL2_Config>
 80099e2:	4603      	mov	r3, r0
 80099e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80099e8:	e003      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80099f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10d      	bne.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80099fa:	4b32      	ldr	r3, [pc, #200]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80099fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009a00:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009a04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a08:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8009a0c:	4a2d      	ldr	r2, [pc, #180]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009a0e:	430b      	orrs	r3, r1
 8009a10:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009a14:	e003      	b.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009a1a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009a1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8009a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a30:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009a34:	460b      	mov	r3, r1
 8009a36:	4313      	orrs	r3, r2
 8009a38:	d04a      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8009a3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d827      	bhi.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8009a46:	a201      	add	r2, pc, #4	; (adr r2, 8009a4c <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8009a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4c:	08009a61 	.word	0x08009a61
 8009a50:	08009a6f 	.word	0x08009a6f
 8009a54:	08009a83 	.word	0x08009a83
 8009a58:	08009a9f 	.word	0x08009a9f
 8009a5c:	08009a9f 	.word	0x08009a9f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a60:	4b18      	ldr	r3, [pc, #96]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a64:	4a17      	ldr	r2, [pc, #92]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a6a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009a6c:	e018      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009a6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a72:	3308      	adds	r3, #8
 8009a74:	4618      	mov	r0, r3
 8009a76:	f003 fae1 	bl	800d03c <RCCEx_PLL2_Config>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009a80:	e00e      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009a82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a86:	3330      	adds	r3, #48	; 0x30
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f003 fb6f 	bl	800d16c <RCCEx_PLL3_Config>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009a94:	e004      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009a9c:	e000      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8009a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aa0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10f      	bne.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009aa8:	4b06      	ldr	r3, [pc, #24]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009aae:	f023 0107 	bic.w	r1, r3, #7
 8009ab2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009aba:	4a02      	ldr	r2, [pc, #8]	; (8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009abc:	430b      	orrs	r3, r1
 8009abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ac2:	e005      	b.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8009ac4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009acc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009ad0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009adc:	643b      	str	r3, [r7, #64]	; 0x40
 8009ade:	2300      	movs	r3, #0
 8009ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8009ae2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	f000 8081 	beq.w	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8009aee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009af2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009af6:	2b20      	cmp	r3, #32
 8009af8:	d85f      	bhi.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8009afa:	a201      	add	r2, pc, #4	; (adr r2, 8009b00 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8009afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b00:	08009b85 	.word	0x08009b85
 8009b04:	08009bbb 	.word	0x08009bbb
 8009b08:	08009bbb 	.word	0x08009bbb
 8009b0c:	08009bbb 	.word	0x08009bbb
 8009b10:	08009bbb 	.word	0x08009bbb
 8009b14:	08009bbb 	.word	0x08009bbb
 8009b18:	08009bbb 	.word	0x08009bbb
 8009b1c:	08009bbb 	.word	0x08009bbb
 8009b20:	08009b93 	.word	0x08009b93
 8009b24:	08009bbb 	.word	0x08009bbb
 8009b28:	08009bbb 	.word	0x08009bbb
 8009b2c:	08009bbb 	.word	0x08009bbb
 8009b30:	08009bbb 	.word	0x08009bbb
 8009b34:	08009bbb 	.word	0x08009bbb
 8009b38:	08009bbb 	.word	0x08009bbb
 8009b3c:	08009bbb 	.word	0x08009bbb
 8009b40:	08009ba7 	.word	0x08009ba7
 8009b44:	08009bbb 	.word	0x08009bbb
 8009b48:	08009bbb 	.word	0x08009bbb
 8009b4c:	08009bbb 	.word	0x08009bbb
 8009b50:	08009bbb 	.word	0x08009bbb
 8009b54:	08009bbb 	.word	0x08009bbb
 8009b58:	08009bbb 	.word	0x08009bbb
 8009b5c:	08009bbb 	.word	0x08009bbb
 8009b60:	08009bc3 	.word	0x08009bc3
 8009b64:	08009bbb 	.word	0x08009bbb
 8009b68:	08009bbb 	.word	0x08009bbb
 8009b6c:	08009bbb 	.word	0x08009bbb
 8009b70:	08009bbb 	.word	0x08009bbb
 8009b74:	08009bbb 	.word	0x08009bbb
 8009b78:	08009bbb 	.word	0x08009bbb
 8009b7c:	08009bbb 	.word	0x08009bbb
 8009b80:	08009bc3 	.word	0x08009bc3
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b84:	4bab      	ldr	r3, [pc, #684]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b88:	4aaa      	ldr	r2, [pc, #680]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b8e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8009b90:	e018      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009b92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b96:	3308      	adds	r3, #8
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f003 fa4f 	bl	800d03c <RCCEx_PLL2_Config>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8009ba4:	e00e      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009ba6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009baa:	3330      	adds	r3, #48	; 0x30
 8009bac:	4618      	mov	r0, r3
 8009bae:	f003 fadd 	bl	800d16c <RCCEx_PLL3_Config>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8009bb8:	e004      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009bc0:	e000      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8009bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bc4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10d      	bne.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8009bcc:	4b99      	ldr	r3, [pc, #612]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009bd2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009bd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009bda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009bde:	4a95      	ldr	r2, [pc, #596]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009be0:	430b      	orrs	r3, r1
 8009be2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009be6:	e003      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009bec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009bfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bfe:	2300      	movs	r3, #0
 8009c00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c02:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009c06:	460b      	mov	r3, r1
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	d04e      	beq.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8009c0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c18:	d02e      	beq.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8009c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c1e:	d827      	bhi.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8009c20:	2bc0      	cmp	r3, #192	; 0xc0
 8009c22:	d02b      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8009c24:	2bc0      	cmp	r3, #192	; 0xc0
 8009c26:	d823      	bhi.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8009c28:	2b80      	cmp	r3, #128	; 0x80
 8009c2a:	d017      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8009c2c:	2b80      	cmp	r3, #128	; 0x80
 8009c2e:	d81f      	bhi.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d002      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8009c34:	2b40      	cmp	r3, #64	; 0x40
 8009c36:	d007      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8009c38:	e01a      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c3a:	4b7e      	ldr	r3, [pc, #504]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3e:	4a7d      	ldr	r2, [pc, #500]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c44:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8009c46:	e01a      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009c48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f003 f9f4 	bl	800d03c <RCCEx_PLL2_Config>
 8009c54:	4603      	mov	r3, r0
 8009c56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8009c5a:	e010      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009c5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c60:	3330      	adds	r3, #48	; 0x30
 8009c62:	4618      	mov	r0, r3
 8009c64:	f003 fa82 	bl	800d16c <RCCEx_PLL3_Config>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8009c6e:	e006      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009c76:	e002      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8009c78:	bf00      	nop
 8009c7a:	e000      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8009c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c7e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10d      	bne.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8009c86:	4b6b      	ldr	r3, [pc, #428]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c8c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009c98:	4a66      	ldr	r2, [pc, #408]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009c9a:	430b      	orrs	r3, r1
 8009c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ca0:	e003      	b.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009ca6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8009caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009cb6:	633b      	str	r3, [r7, #48]	; 0x30
 8009cb8:	2300      	movs	r3, #0
 8009cba:	637b      	str	r3, [r7, #52]	; 0x34
 8009cbc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	d055      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8009cc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009cca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009cce:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009cd2:	d031      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8009cd4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009cd8:	d82a      	bhi.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cde:	d02d      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8009ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ce4:	d824      	bhi.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009ce6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009cea:	d029      	beq.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8009cec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009cf0:	d81e      	bhi.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cf6:	d011      	beq.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8009cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cfc:	d818      	bhi.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d020      	beq.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8009d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d06:	d113      	bne.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009d08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d0c:	3308      	adds	r3, #8
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f003 f994 	bl	800d03c <RCCEx_PLL2_Config>
 8009d14:	4603      	mov	r3, r0
 8009d16:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8009d1a:	e014      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009d1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d20:	3330      	adds	r3, #48	; 0x30
 8009d22:	4618      	mov	r0, r3
 8009d24:	f003 fa22 	bl	800d16c <RCCEx_PLL3_Config>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8009d2e:	e00a      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009d36:	e006      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009d38:	bf00      	nop
 8009d3a:	e004      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009d3c:	bf00      	nop
 8009d3e:	e002      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009d40:	bf00      	nop
 8009d42:	e000      	b.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8009d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10d      	bne.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8009d4e:	4b39      	ldr	r3, [pc, #228]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d54:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8009d58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d5c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009d60:	4a34      	ldr	r2, [pc, #208]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009d62:	430b      	orrs	r3, r1
 8009d64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d68:	e003      	b.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009d6e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8009d72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d80:	2300      	movs	r3, #0
 8009d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d84:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	d058      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8009d8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009d96:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009d9a:	d031      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8009d9c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009da0:	d82a      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8009da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009da6:	d02d      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8009da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dac:	d824      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8009dae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009db2:	d029      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8009db4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009db8:	d81e      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8009dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dbe:	d011      	beq.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8009dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dc4:	d818      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d020      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8009dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dce:	d113      	bne.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009dd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f003 f930 	bl	800d03c <RCCEx_PLL2_Config>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8009de2:	e014      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009de4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009de8:	3330      	adds	r3, #48	; 0x30
 8009dea:	4618      	mov	r0, r3
 8009dec:	f003 f9be 	bl	800d16c <RCCEx_PLL3_Config>
 8009df0:	4603      	mov	r3, r0
 8009df2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8009df6:	e00a      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009dfe:	e006      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009e00:	bf00      	nop
 8009e02:	e004      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009e04:	bf00      	nop
 8009e06:	e002      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009e08:	bf00      	nop
 8009e0a:	e000      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d110      	bne.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8009e16:	4b07      	ldr	r3, [pc, #28]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e1c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009e20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e28:	4902      	ldr	r1, [pc, #8]	; (8009e34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8009e30:	e006      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8009e32:	bf00      	nop
 8009e34:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e38:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009e3c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009e40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e48:	2100      	movs	r1, #0
 8009e4a:	6239      	str	r1, [r7, #32]
 8009e4c:	f003 0301 	and.w	r3, r3, #1
 8009e50:	627b      	str	r3, [r7, #36]	; 0x24
 8009e52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009e56:	460b      	mov	r3, r1
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	d055      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8009e5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e64:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8009e68:	d031      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8009e6a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8009e6e:	d82a      	bhi.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8009e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e74:	d02d      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8009e76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e7a:	d824      	bhi.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8009e7c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8009e80:	d029      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8009e82:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8009e86:	d81e      	bhi.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8009e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e8c:	d011      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8009e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e92:	d818      	bhi.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d020      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8009e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e9c:	d113      	bne.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009e9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ea2:	3308      	adds	r3, #8
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f003 f8c9 	bl	800d03c <RCCEx_PLL2_Config>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009eb0:	e014      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009eb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009eb6:	3330      	adds	r3, #48	; 0x30
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f003 f957 	bl	800d16c <RCCEx_PLL3_Config>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009ec4:	e00a      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009ecc:	e006      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8009ece:	bf00      	nop
 8009ed0:	e004      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8009ed2:	bf00      	nop
 8009ed4:	e002      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8009ed6:	bf00      	nop
 8009ed8:	e000      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8009eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009edc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10d      	bne.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8009ee4:	4b88      	ldr	r3, [pc, #544]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009eea:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8009eee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ef2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ef6:	4984      	ldr	r1, [pc, #528]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8009efe:	e003      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f00:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009f04:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009f08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f10:	2100      	movs	r1, #0
 8009f12:	61b9      	str	r1, [r7, #24]
 8009f14:	f003 0302 	and.w	r3, r3, #2
 8009f18:	61fb      	str	r3, [r7, #28]
 8009f1a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4313      	orrs	r3, r2
 8009f22:	d03d      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8009f24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009f2c:	2b03      	cmp	r3, #3
 8009f2e:	d81c      	bhi.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8009f30:	a201      	add	r2, pc, #4	; (adr r2, 8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8009f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f36:	bf00      	nop
 8009f38:	08009f73 	.word	0x08009f73
 8009f3c:	08009f49 	.word	0x08009f49
 8009f40:	08009f57 	.word	0x08009f57
 8009f44:	08009f73 	.word	0x08009f73
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f48:	4b6f      	ldr	r3, [pc, #444]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4c:	4a6e      	ldr	r2, [pc, #440]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f52:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8009f54:	e00e      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009f56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f5a:	3308      	adds	r3, #8
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f003 f86d 	bl	800d03c <RCCEx_PLL2_Config>
 8009f62:	4603      	mov	r3, r0
 8009f64:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8009f68:	e004      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009f70:	e000      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8009f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f74:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10d      	bne.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8009f7c:	4b62      	ldr	r3, [pc, #392]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009f7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009f82:	f023 0203 	bic.w	r2, r3, #3
 8009f86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f8a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009f8e:	495e      	ldr	r1, [pc, #376]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009f90:	4313      	orrs	r3, r2
 8009f92:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8009f96:	e003      	b.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f98:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009f9c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	2100      	movs	r1, #0
 8009faa:	6139      	str	r1, [r7, #16]
 8009fac:	f003 0304 	and.w	r3, r3, #4
 8009fb0:	617b      	str	r3, [r7, #20]
 8009fb2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	d03a      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8009fbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009fc0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fc8:	d00e      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8009fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fce:	d815      	bhi.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d017      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8009fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fd8:	d110      	bne.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fda:	4b4b      	ldr	r3, [pc, #300]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fde:	4a4a      	ldr	r2, [pc, #296]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fe4:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8009fe6:	e00e      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009fe8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009fec:	3308      	adds	r3, #8
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f003 f824 	bl	800d03c <RCCEx_PLL2_Config>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8009ffa:	e004      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a002:	e000      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800a004:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a006:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d10d      	bne.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800a00e:	4b3e      	ldr	r3, [pc, #248]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a018:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a01c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a020:	4939      	ldr	r1, [pc, #228]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a022:	4313      	orrs	r3, r2
 800a024:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800a028:	e003      	b.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a02a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a02e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a032:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03a:	2100      	movs	r1, #0
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	f003 0310 	and.w	r3, r3, #16
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a048:	460b      	mov	r3, r1
 800a04a:	4313      	orrs	r3, r2
 800a04c:	d038      	beq.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800a04e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a052:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a056:	2b30      	cmp	r3, #48	; 0x30
 800a058:	d01b      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800a05a:	2b30      	cmp	r3, #48	; 0x30
 800a05c:	d815      	bhi.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800a05e:	2b10      	cmp	r3, #16
 800a060:	d002      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800a062:	2b20      	cmp	r3, #32
 800a064:	d007      	beq.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800a066:	e010      	b.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a068:	4b27      	ldr	r3, [pc, #156]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06c:	4a26      	ldr	r2, [pc, #152]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a06e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a072:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800a074:	e00e      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a076:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a07a:	3330      	adds	r3, #48	; 0x30
 800a07c:	4618      	mov	r0, r3
 800a07e:	f003 f875 	bl	800d16c <RCCEx_PLL3_Config>
 800a082:	4603      	mov	r3, r0
 800a084:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800a088:	e004      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a090:	e000      	b.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800a092:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a094:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10d      	bne.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800a09c:	4b1a      	ldr	r3, [pc, #104]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a09e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a0a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a0a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a0aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a0ae:	4916      	ldr	r1, [pc, #88]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a0b6:	e003      	b.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a0bc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a0c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	6039      	str	r1, [r7, #0]
 800a0cc:	f003 0308 	and.w	r3, r3, #8
 800a0d0:	607b      	str	r3, [r7, #4]
 800a0d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	d00c      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800a0dc:	4b0a      	ldr	r3, [pc, #40]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a0de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a0e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a0e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a0ea:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a0ee:	4906      	ldr	r1, [pc, #24]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 800a0f6:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800a100:	46bd      	mov	sp, r7
 800a102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a106:	bf00      	nop
 800a108:	44020c00 	.word	0x44020c00

0800a10c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b08b      	sub	sp, #44	; 0x2c
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a114:	4bad      	ldr	r3, [pc, #692]	; (800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a11c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a11e:	4bab      	ldr	r3, [pc, #684]	; (800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a122:	f003 0303 	and.w	r3, r3, #3
 800a126:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800a128:	4ba8      	ldr	r3, [pc, #672]	; (800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12c:	0a1b      	lsrs	r3, r3, #8
 800a12e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a132:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800a134:	4ba5      	ldr	r3, [pc, #660]	; (800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a138:	f003 0310 	and.w	r3, r3, #16
 800a13c:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a13e:	4ba3      	ldr	r3, [pc, #652]	; (800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a142:	08db      	lsrs	r3, r3, #3
 800a144:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	fb02 f303 	mul.w	r3, r2, r3
 800a14e:	ee07 3a90 	vmov	s15, r3
 800a152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a156:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f000 8126 	beq.w	800a3ae <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	2b03      	cmp	r3, #3
 800a166:	d053      	beq.n	800a210 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	2b03      	cmp	r3, #3
 800a16c:	d86f      	bhi.n	800a24e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	2b01      	cmp	r3, #1
 800a172:	d003      	beq.n	800a17c <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	2b02      	cmp	r3, #2
 800a178:	d02b      	beq.n	800a1d2 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800a17a:	e068      	b.n	800a24e <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a17c:	4b93      	ldr	r3, [pc, #588]	; (800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	08db      	lsrs	r3, r3, #3
 800a182:	f003 0303 	and.w	r3, r3, #3
 800a186:	4a92      	ldr	r2, [pc, #584]	; (800a3d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a188:	fa22 f303 	lsr.w	r3, r2, r3
 800a18c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	ee07 3a90 	vmov	s15, r3
 800a194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	ee07 3a90 	vmov	s15, r3
 800a19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	ee07 3a90 	vmov	s15, r3
 800a1ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1b0:	ed97 6a04 	vldr	s12, [r7, #16]
 800a1b4:	eddf 5a87 	vldr	s11, [pc, #540]	; 800a3d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a1b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a1d0:	e068      	b.n	800a2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	ee07 3a90 	vmov	s15, r3
 800a1d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1dc:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800a3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800a1e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1e4:	6a3b      	ldr	r3, [r7, #32]
 800a1e6:	ee07 3a90 	vmov	s15, r3
 800a1ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1ee:	ed97 6a04 	vldr	s12, [r7, #16]
 800a1f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a3d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a1f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a20a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a20e:	e049      	b.n	800a2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	ee07 3a90 	vmov	s15, r3
 800a216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a21a:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a3dc <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800a21e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	ee07 3a90 	vmov	s15, r3
 800a228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a22c:	ed97 6a04 	vldr	s12, [r7, #16]
 800a230:	eddf 5a68 	vldr	s11, [pc, #416]	; 800a3d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a23c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a244:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a248:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a24c:	e02a      	b.n	800a2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a24e:	4b5f      	ldr	r3, [pc, #380]	; (800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	08db      	lsrs	r3, r3, #3
 800a254:	f003 0303 	and.w	r3, r3, #3
 800a258:	4a5d      	ldr	r2, [pc, #372]	; (800a3d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a25a:	fa22 f303 	lsr.w	r3, r2, r3
 800a25e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	ee07 3a90 	vmov	s15, r3
 800a266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	ee07 3a90 	vmov	s15, r3
 800a270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a278:	6a3b      	ldr	r3, [r7, #32]
 800a27a:	ee07 3a90 	vmov	s15, r3
 800a27e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a282:	ed97 6a04 	vldr	s12, [r7, #16]
 800a286:	eddf 5a53 	vldr	s11, [pc, #332]	; 800a3d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a28a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a28e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a29a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a29e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a2a2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2a4:	4b49      	ldr	r3, [pc, #292]	; (800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2b0:	d121      	bne.n	800a2f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a2b2:	4b46      	ldr	r3, [pc, #280]	; (800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d017      	beq.n	800a2ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a2be:	4b43      	ldr	r3, [pc, #268]	; (800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c2:	0a5b      	lsrs	r3, r3, #9
 800a2c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2c8:	ee07 3a90 	vmov	s15, r3
 800a2cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800a2d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2d4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a2d8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a2dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2e4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	e006      	b.n	800a2fc <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	e002      	b.n	800a2fc <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2fc:	4b33      	ldr	r3, [pc, #204]	; (800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a304:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a308:	d121      	bne.n	800a34e <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a30a:	4b30      	ldr	r3, [pc, #192]	; (800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d017      	beq.n	800a346 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a316:	4b2d      	ldr	r3, [pc, #180]	; (800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a31a:	0c1b      	lsrs	r3, r3, #16
 800a31c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a320:	ee07 3a90 	vmov	s15, r3
 800a324:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a32c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a330:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a33c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	605a      	str	r2, [r3, #4]
 800a344:	e006      	b.n	800a354 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	605a      	str	r2, [r3, #4]
 800a34c:	e002      	b.n	800a354 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a354:	4b1d      	ldr	r3, [pc, #116]	; (800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a35c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a360:	d121      	bne.n	800a3a6 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a362:	4b1a      	ldr	r3, [pc, #104]	; (800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d017      	beq.n	800a39e <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a36e:	4b17      	ldr	r3, [pc, #92]	; (800a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a372:	0e1b      	lsrs	r3, r3, #24
 800a374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a378:	ee07 3a90 	vmov	s15, r3
 800a37c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800a380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a384:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a388:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a38c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a394:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a39c:	e010      	b.n	800a3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	609a      	str	r2, [r3, #8]
}
 800a3a4:	e00c      	b.n	800a3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	609a      	str	r2, [r3, #8]
}
 800a3ac:	e008      	b.n	800a3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	609a      	str	r2, [r3, #8]
}
 800a3c0:	bf00      	nop
 800a3c2:	372c      	adds	r7, #44	; 0x2c
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr
 800a3cc:	44020c00 	.word	0x44020c00
 800a3d0:	03d09000 	.word	0x03d09000
 800a3d4:	46000000 	.word	0x46000000
 800a3d8:	4a742400 	.word	0x4a742400
 800a3dc:	4af42400 	.word	0x4af42400

0800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b08b      	sub	sp, #44	; 0x2c
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a3e8:	4bad      	ldr	r3, [pc, #692]	; (800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a3ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3f0:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a3f2:	4bab      	ldr	r3, [pc, #684]	; (800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f6:	f003 0303 	and.w	r3, r3, #3
 800a3fa:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800a3fc:	4ba8      	ldr	r3, [pc, #672]	; (800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	0a1b      	lsrs	r3, r3, #8
 800a402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a406:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800a408:	4ba5      	ldr	r3, [pc, #660]	; (800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40c:	f003 0310 	and.w	r3, r3, #16
 800a410:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a412:	4ba3      	ldr	r3, [pc, #652]	; (800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a416:	08db      	lsrs	r3, r3, #3
 800a418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	fb02 f303 	mul.w	r3, r2, r3
 800a422:	ee07 3a90 	vmov	s15, r3
 800a426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a42a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	2b00      	cmp	r3, #0
 800a432:	f000 8126 	beq.w	800a682 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	2b03      	cmp	r3, #3
 800a43a:	d053      	beq.n	800a4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d86f      	bhi.n	800a522 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	2b01      	cmp	r3, #1
 800a446:	d003      	beq.n	800a450 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d02b      	beq.n	800a4a6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800a44e:	e068      	b.n	800a522 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a450:	4b93      	ldr	r3, [pc, #588]	; (800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	08db      	lsrs	r3, r3, #3
 800a456:	f003 0303 	and.w	r3, r3, #3
 800a45a:	4a92      	ldr	r2, [pc, #584]	; (800a6a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a45c:	fa22 f303 	lsr.w	r3, r2, r3
 800a460:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	ee07 3a90 	vmov	s15, r3
 800a468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	ee07 3a90 	vmov	s15, r3
 800a472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a47a:	6a3b      	ldr	r3, [r7, #32]
 800a47c:	ee07 3a90 	vmov	s15, r3
 800a480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a484:	ed97 6a04 	vldr	s12, [r7, #16]
 800a488:	eddf 5a87 	vldr	s11, [pc, #540]	; 800a6a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a48c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a494:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a49c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a4a4:	e068      	b.n	800a578 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	ee07 3a90 	vmov	s15, r3
 800a4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b0:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800a6ac <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800a4b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4b8:	6a3b      	ldr	r3, [r7, #32]
 800a4ba:	ee07 3a90 	vmov	s15, r3
 800a4be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4c2:	ed97 6a04 	vldr	s12, [r7, #16]
 800a4c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a6a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a4ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a4e2:	e049      	b.n	800a578 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	ee07 3a90 	vmov	s15, r3
 800a4ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ee:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a6b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800a4f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4f6:	6a3b      	ldr	r3, [r7, #32]
 800a4f8:	ee07 3a90 	vmov	s15, r3
 800a4fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a500:	ed97 6a04 	vldr	s12, [r7, #16]
 800a504:	eddf 5a68 	vldr	s11, [pc, #416]	; 800a6a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a50c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a510:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a51c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a520:	e02a      	b.n	800a578 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a522:	4b5f      	ldr	r3, [pc, #380]	; (800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	08db      	lsrs	r3, r3, #3
 800a528:	f003 0303 	and.w	r3, r3, #3
 800a52c:	4a5d      	ldr	r2, [pc, #372]	; (800a6a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a52e:	fa22 f303 	lsr.w	r3, r2, r3
 800a532:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	ee07 3a90 	vmov	s15, r3
 800a53a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	ee07 3a90 	vmov	s15, r3
 800a544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a548:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a54c:	6a3b      	ldr	r3, [r7, #32]
 800a54e:	ee07 3a90 	vmov	s15, r3
 800a552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a556:	ed97 6a04 	vldr	s12, [r7, #16]
 800a55a:	eddf 5a53 	vldr	s11, [pc, #332]	; 800a6a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a55e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a56a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a56e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a572:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a576:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a578:	4b49      	ldr	r3, [pc, #292]	; (800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a584:	d121      	bne.n	800a5ca <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800a586:	4b46      	ldr	r3, [pc, #280]	; (800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d017      	beq.n	800a5c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a592:	4b43      	ldr	r3, [pc, #268]	; (800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a596:	0a5b      	lsrs	r3, r3, #9
 800a598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a59c:	ee07 3a90 	vmov	s15, r3
 800a5a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800a5a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5a8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800a5ac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a5b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5b8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	601a      	str	r2, [r3, #0]
 800a5c0:	e006      	b.n	800a5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]
 800a5c8:	e002      	b.n	800a5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5d0:	4b33      	ldr	r3, [pc, #204]	; (800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5dc:	d121      	bne.n	800a622 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800a5de:	4b30      	ldr	r3, [pc, #192]	; (800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d017      	beq.n	800a61a <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a5ea:	4b2d      	ldr	r3, [pc, #180]	; (800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ee:	0c1b      	lsrs	r3, r3, #16
 800a5f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5f4:	ee07 3a90 	vmov	s15, r3
 800a5f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800a5fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a600:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800a604:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a60c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a610:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	605a      	str	r2, [r3, #4]
 800a618:	e006      	b.n	800a628 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	605a      	str	r2, [r3, #4]
 800a620:	e002      	b.n	800a628 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a628:	4b1d      	ldr	r3, [pc, #116]	; (800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a634:	d121      	bne.n	800a67a <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800a636:	4b1a      	ldr	r3, [pc, #104]	; (800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d017      	beq.n	800a672 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a642:	4b17      	ldr	r3, [pc, #92]	; (800a6a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a646:	0e1b      	lsrs	r3, r3, #24
 800a648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a64c:	ee07 3a90 	vmov	s15, r3
 800a650:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800a654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a658:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800a65c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a668:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a670:	e010      	b.n	800a694 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	609a      	str	r2, [r3, #8]
}
 800a678:	e00c      	b.n	800a694 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	609a      	str	r2, [r3, #8]
}
 800a680:	e008      	b.n	800a694 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	609a      	str	r2, [r3, #8]
}
 800a694:	bf00      	nop
 800a696:	372c      	adds	r7, #44	; 0x2c
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	44020c00 	.word	0x44020c00
 800a6a4:	03d09000 	.word	0x03d09000
 800a6a8:	46000000 	.word	0x46000000
 800a6ac:	4a742400 	.word	0x4a742400
 800a6b0:	4af42400 	.word	0x4af42400

0800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b08b      	sub	sp, #44	; 0x2c
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800a6bc:	4bad      	ldr	r3, [pc, #692]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6c4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800a6c6:	4bab      	ldr	r3, [pc, #684]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ca:	f003 0303 	and.w	r3, r3, #3
 800a6ce:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800a6d0:	4ba8      	ldr	r3, [pc, #672]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d4:	0a1b      	lsrs	r3, r3, #8
 800a6d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6da:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800a6dc:	4ba5      	ldr	r3, [pc, #660]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a6de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e0:	f003 0310 	and.w	r3, r3, #16
 800a6e4:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800a6e6:	4ba3      	ldr	r3, [pc, #652]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a6e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6ea:	08db      	lsrs	r3, r3, #3
 800a6ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6f0:	697a      	ldr	r2, [r7, #20]
 800a6f2:	fb02 f303 	mul.w	r3, r2, r3
 800a6f6:	ee07 3a90 	vmov	s15, r3
 800a6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6fe:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 8126 	beq.w	800a956 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	2b03      	cmp	r3, #3
 800a70e:	d053      	beq.n	800a7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	2b03      	cmp	r3, #3
 800a714:	d86f      	bhi.n	800a7f6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d003      	beq.n	800a724 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d02b      	beq.n	800a77a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800a722:	e068      	b.n	800a7f6 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a724:	4b93      	ldr	r3, [pc, #588]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	08db      	lsrs	r3, r3, #3
 800a72a:	f003 0303 	and.w	r3, r3, #3
 800a72e:	4a92      	ldr	r2, [pc, #584]	; (800a978 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a730:	fa22 f303 	lsr.w	r3, r2, r3
 800a734:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	ee07 3a90 	vmov	s15, r3
 800a73c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	ee07 3a90 	vmov	s15, r3
 800a746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a74a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	ee07 3a90 	vmov	s15, r3
 800a754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a758:	ed97 6a04 	vldr	s12, [r7, #16]
 800a75c:	eddf 5a87 	vldr	s11, [pc, #540]	; 800a97c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800a760:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a764:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a768:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a76c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a770:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a774:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a778:	e068      	b.n	800a84c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	ee07 3a90 	vmov	s15, r3
 800a780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a784:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800a980 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800a788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a78c:	6a3b      	ldr	r3, [r7, #32]
 800a78e:	ee07 3a90 	vmov	s15, r3
 800a792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a796:	ed97 6a04 	vldr	s12, [r7, #16]
 800a79a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a97c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800a79e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a7b6:	e049      	b.n	800a84c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	ee07 3a90 	vmov	s15, r3
 800a7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7c2:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a984 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800a7c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ca:	6a3b      	ldr	r3, [r7, #32]
 800a7cc:	ee07 3a90 	vmov	s15, r3
 800a7d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7d4:	ed97 6a04 	vldr	s12, [r7, #16]
 800a7d8:	eddf 5a68 	vldr	s11, [pc, #416]	; 800a97c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800a7dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a7f4:	e02a      	b.n	800a84c <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a7f6:	4b5f      	ldr	r3, [pc, #380]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	08db      	lsrs	r3, r3, #3
 800a7fc:	f003 0303 	and.w	r3, r3, #3
 800a800:	4a5d      	ldr	r2, [pc, #372]	; (800a978 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a802:	fa22 f303 	lsr.w	r3, r2, r3
 800a806:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	ee07 3a90 	vmov	s15, r3
 800a80e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	ee07 3a90 	vmov	s15, r3
 800a818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a81c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a820:	6a3b      	ldr	r3, [r7, #32]
 800a822:	ee07 3a90 	vmov	s15, r3
 800a826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a82a:	ed97 6a04 	vldr	s12, [r7, #16]
 800a82e:	eddf 5a53 	vldr	s11, [pc, #332]	; 800a97c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800a832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a83a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a83e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a842:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a846:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a84a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a84c:	4b49      	ldr	r3, [pc, #292]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a858:	d121      	bne.n	800a89e <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800a85a:	4b46      	ldr	r3, [pc, #280]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a862:	2b00      	cmp	r3, #0
 800a864:	d017      	beq.n	800a896 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a866:	4b43      	ldr	r3, [pc, #268]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a86a:	0a5b      	lsrs	r3, r3, #9
 800a86c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a870:	ee07 3a90 	vmov	s15, r3
 800a874:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800a878:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a87c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800a880:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a88c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	601a      	str	r2, [r3, #0]
 800a894:	e006      	b.n	800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	e002      	b.n	800a8a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8a4:	4b33      	ldr	r3, [pc, #204]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8b0:	d121      	bne.n	800a8f6 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800a8b2:	4b30      	ldr	r3, [pc, #192]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d017      	beq.n	800a8ee <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a8be:	4b2d      	ldr	r3, [pc, #180]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8c2:	0c1b      	lsrs	r3, r3, #16
 800a8c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8c8:	ee07 3a90 	vmov	s15, r3
 800a8cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800a8d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8d4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800a8d8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a8dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8e4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	605a      	str	r2, [r3, #4]
 800a8ec:	e006      	b.n	800a8fc <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	605a      	str	r2, [r3, #4]
 800a8f4:	e002      	b.n	800a8fc <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8fc:	4b1d      	ldr	r3, [pc, #116]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a908:	d121      	bne.n	800a94e <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a90a:	4b1a      	ldr	r3, [pc, #104]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a912:	2b00      	cmp	r3, #0
 800a914:	d017      	beq.n	800a946 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a916:	4b17      	ldr	r3, [pc, #92]	; (800a974 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800a918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a91a:	0e1b      	lsrs	r3, r3, #24
 800a91c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a920:	ee07 3a90 	vmov	s15, r3
 800a924:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800a928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a92c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800a930:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a93c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800a944:	e010      	b.n	800a968 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	609a      	str	r2, [r3, #8]
}
 800a94c:	e00c      	b.n	800a968 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	609a      	str	r2, [r3, #8]
}
 800a954:	e008      	b.n	800a968 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	609a      	str	r2, [r3, #8]
}
 800a968:	bf00      	nop
 800a96a:	372c      	adds	r7, #44	; 0x2c
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	44020c00 	.word	0x44020c00
 800a978:	03d09000 	.word	0x03d09000
 800a97c:	46000000 	.word	0x46000000
 800a980:	4a742400 	.word	0x4a742400
 800a984:	4af42400 	.word	0x4af42400

0800a988 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a988:	b590      	push	{r4, r7, lr}
 800a98a:	b08f      	sub	sp, #60	; 0x3c
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a992:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a996:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800a99a:	4321      	orrs	r1, r4
 800a99c:	d150      	bne.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a99e:	4b26      	ldr	r3, [pc, #152]	; (800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a9a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a9a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9a8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a9aa:	4b23      	ldr	r3, [pc, #140]	; (800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a9ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a9b0:	f003 0302 	and.w	r3, r3, #2
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d108      	bne.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9be:	d104      	bne.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a9c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a9c6:	f002 bb2a 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a9ca:	4b1b      	ldr	r3, [pc, #108]	; (800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a9cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a9d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9d8:	d108      	bne.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9e0:	d104      	bne.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800a9e2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a9e6:	637b      	str	r3, [r7, #52]	; 0x34
 800a9e8:	f002 bb19 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800a9ec:	4b12      	ldr	r3, [pc, #72]	; (800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9f8:	d119      	bne.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa00:	d115      	bne.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800aa02:	4b0d      	ldr	r3, [pc, #52]	; (800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800aa0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa0e:	d30a      	bcc.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800aa10:	4b09      	ldr	r3, [pc, #36]	; (800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800aa12:	69db      	ldr	r3, [r3, #28]
 800aa14:	0a1b      	lsrs	r3, r3, #8
 800aa16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa1a:	4a08      	ldr	r2, [pc, #32]	; (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800aa1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa20:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800aa22:	f002 bafc 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800aa26:	2300      	movs	r3, #0
 800aa28:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800aa2a:	f002 baf8 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	637b      	str	r3, [r7, #52]	; 0x34
 800aa32:	f002 baf4 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aa36:	bf00      	nop
 800aa38:	44020c00 	.word	0x44020c00
 800aa3c:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800aa40:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa44:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 800aa48:	ea50 0104 	orrs.w	r1, r0, r4
 800aa4c:	f001 8275 	beq.w	800bf3a <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800aa50:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa54:	2801      	cmp	r0, #1
 800aa56:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 800aa5a:	f082 82dd 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aa5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa62:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 800aa66:	ea50 0104 	orrs.w	r1, r0, r4
 800aa6a:	f001 816c 	beq.w	800bd46 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800aa6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa72:	2801      	cmp	r0, #1
 800aa74:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 800aa78:	f082 82ce 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aa7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa80:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 800aa84:	ea50 0104 	orrs.w	r1, r0, r4
 800aa88:	f001 8602 	beq.w	800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800aa8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa90:	2801      	cmp	r0, #1
 800aa92:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 800aa96:	f082 82bf 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aa9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa9e:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800aaa2:	ea50 0104 	orrs.w	r1, r0, r4
 800aaa6:	f001 854c 	beq.w	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800aaaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aaae:	2801      	cmp	r0, #1
 800aab0:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 800aab4:	f082 82b0 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aabc:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 800aac0:	ea50 0104 	orrs.w	r1, r0, r4
 800aac4:	f001 849e 	beq.w	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800aac8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aacc:	2801      	cmp	r0, #1
 800aace:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800aad2:	f082 82a1 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aad6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aada:	f1a1 0420 	sub.w	r4, r1, #32
 800aade:	ea50 0104 	orrs.w	r1, r0, r4
 800aae2:	f001 83e8 	beq.w	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800aae6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aaea:	2801      	cmp	r0, #1
 800aaec:	f171 0120 	sbcs.w	r1, r1, #32
 800aaf0:	f082 8292 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aaf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aaf8:	f1a1 0410 	sub.w	r4, r1, #16
 800aafc:	ea50 0104 	orrs.w	r1, r0, r4
 800ab00:	f002 8256 	beq.w	800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800ab04:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab08:	2801      	cmp	r0, #1
 800ab0a:	f171 0110 	sbcs.w	r1, r1, #16
 800ab0e:	f082 8283 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ab12:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab16:	f1a1 0408 	sub.w	r4, r1, #8
 800ab1a:	ea50 0104 	orrs.w	r1, r0, r4
 800ab1e:	f002 81cc 	beq.w	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800ab22:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab26:	2801      	cmp	r0, #1
 800ab28:	f171 0108 	sbcs.w	r1, r1, #8
 800ab2c:	f082 8274 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ab30:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab34:	1f0c      	subs	r4, r1, #4
 800ab36:	ea50 0104 	orrs.w	r1, r0, r4
 800ab3a:	f001 8648 	beq.w	800c7ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800ab3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab42:	2801      	cmp	r0, #1
 800ab44:	f171 0104 	sbcs.w	r1, r1, #4
 800ab48:	f082 8266 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ab4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab50:	1e8c      	subs	r4, r1, #2
 800ab52:	ea50 0104 	orrs.w	r1, r0, r4
 800ab56:	f002 8143 	beq.w	800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800ab5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab5e:	2801      	cmp	r0, #1
 800ab60:	f171 0102 	sbcs.w	r1, r1, #2
 800ab64:	f082 8258 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ab68:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab6c:	1e4c      	subs	r4, r1, #1
 800ab6e:	ea50 0104 	orrs.w	r1, r0, r4
 800ab72:	f002 80ce 	beq.w	800cd12 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800ab76:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab7a:	2801      	cmp	r0, #1
 800ab7c:	f171 0101 	sbcs.w	r1, r1, #1
 800ab80:	f082 824a 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ab84:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab88:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800ab8c:	4321      	orrs	r1, r4
 800ab8e:	f002 8059 	beq.w	800cc44 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800ab92:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab96:	4cd9      	ldr	r4, [pc, #868]	; (800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800ab98:	42a0      	cmp	r0, r4
 800ab9a:	f171 0100 	sbcs.w	r1, r1, #0
 800ab9e:	f082 823b 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aba2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aba6:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 800abaa:	4321      	orrs	r1, r4
 800abac:	f001 87d9 	beq.w	800cb62 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800abb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abb4:	4cd2      	ldr	r4, [pc, #840]	; (800af00 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800abb6:	42a0      	cmp	r0, r4
 800abb8:	f171 0100 	sbcs.w	r1, r1, #0
 800abbc:	f082 822c 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800abc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abc4:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800abc8:	4321      	orrs	r1, r4
 800abca:	f001 8751 	beq.w	800ca70 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800abce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abd2:	4ccc      	ldr	r4, [pc, #816]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800abd4:	42a0      	cmp	r0, r4
 800abd6:	f171 0100 	sbcs.w	r1, r1, #0
 800abda:	f082 821d 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800abde:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abe2:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 800abe6:	4321      	orrs	r1, r4
 800abe8:	f001 869a 	beq.w	800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800abec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abf0:	4cc5      	ldr	r4, [pc, #788]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800abf2:	42a0      	cmp	r0, r4
 800abf4:	f171 0100 	sbcs.w	r1, r1, #0
 800abf8:	f082 820e 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800abfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac00:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 800ac04:	4321      	orrs	r1, r4
 800ac06:	f001 8612 	beq.w	800c82e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800ac0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac0e:	4cbf      	ldr	r4, [pc, #764]	; (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800ac10:	42a0      	cmp	r0, r4
 800ac12:	f171 0100 	sbcs.w	r1, r1, #0
 800ac16:	f082 81ff 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac1e:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 800ac22:	4321      	orrs	r1, r4
 800ac24:	f002 817e 	beq.w	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800ac28:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac2c:	4cb8      	ldr	r4, [pc, #736]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ac2e:	42a0      	cmp	r0, r4
 800ac30:	f171 0100 	sbcs.w	r1, r1, #0
 800ac34:	f082 81f0 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac3c:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 800ac40:	4321      	orrs	r1, r4
 800ac42:	f000 829e 	beq.w	800b182 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800ac46:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac4a:	4cb2      	ldr	r4, [pc, #712]	; (800af14 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ac4c:	42a0      	cmp	r0, r4
 800ac4e:	f171 0100 	sbcs.w	r1, r1, #0
 800ac52:	f082 81e1 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac56:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac5a:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 800ac5e:	4321      	orrs	r1, r4
 800ac60:	f000 826d 	beq.w	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800ac64:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac68:	4cab      	ldr	r4, [pc, #684]	; (800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ac6a:	42a0      	cmp	r0, r4
 800ac6c:	f171 0100 	sbcs.w	r1, r1, #0
 800ac70:	f082 81d2 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac74:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac78:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 800ac7c:	4321      	orrs	r1, r4
 800ac7e:	f001 800d 	beq.w	800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800ac82:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac86:	4ca5      	ldr	r4, [pc, #660]	; (800af1c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800ac88:	42a0      	cmp	r0, r4
 800ac8a:	f171 0100 	sbcs.w	r1, r1, #0
 800ac8e:	f082 81c3 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ac92:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac96:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 800ac9a:	4321      	orrs	r1, r4
 800ac9c:	f000 81d0 	beq.w	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800aca0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aca4:	4c9e      	ldr	r4, [pc, #632]	; (800af20 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800aca6:	42a0      	cmp	r0, r4
 800aca8:	f171 0100 	sbcs.w	r1, r1, #0
 800acac:	f082 81b4 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800acb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800acb4:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 800acb8:	4321      	orrs	r1, r4
 800acba:	f000 8142 	beq.w	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800acbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800acc2:	4c98      	ldr	r4, [pc, #608]	; (800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800acc4:	42a0      	cmp	r0, r4
 800acc6:	f171 0100 	sbcs.w	r1, r1, #0
 800acca:	f082 81a5 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800acce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800acd2:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 800acd6:	4321      	orrs	r1, r4
 800acd8:	f001 824e 	beq.w	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800acdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ace0:	4c91      	ldr	r4, [pc, #580]	; (800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800ace2:	42a0      	cmp	r0, r4
 800ace4:	f171 0100 	sbcs.w	r1, r1, #0
 800ace8:	f082 8196 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800acec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800acf0:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 800acf4:	4321      	orrs	r1, r4
 800acf6:	f001 8197 	beq.w	800c028 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800acfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800acfe:	4c8b      	ldr	r4, [pc, #556]	; (800af2c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800ad00:	42a0      	cmp	r0, r4
 800ad02:	f171 0100 	sbcs.w	r1, r1, #0
 800ad06:	f082 8187 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ad0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad0e:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 800ad12:	4321      	orrs	r1, r4
 800ad14:	f001 8154 	beq.w	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800ad18:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad1c:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 800ad20:	f171 0100 	sbcs.w	r1, r1, #0
 800ad24:	f082 8178 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ad28:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad2c:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 800ad30:	4321      	orrs	r1, r4
 800ad32:	f001 80b7 	beq.w	800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800ad36:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad3a:	f248 0401 	movw	r4, #32769	; 0x8001
 800ad3e:	42a0      	cmp	r0, r4
 800ad40:	f171 0100 	sbcs.w	r1, r1, #0
 800ad44:	f082 8168 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ad48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad4c:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 800ad50:	4321      	orrs	r1, r4
 800ad52:	f001 8064 	beq.w	800be1e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800ad56:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad5a:	f244 0401 	movw	r4, #16385	; 0x4001
 800ad5e:	42a0      	cmp	r0, r4
 800ad60:	f171 0100 	sbcs.w	r1, r1, #0
 800ad64:	f082 8158 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ad68:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad6c:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 800ad70:	4321      	orrs	r1, r4
 800ad72:	f001 8011 	beq.w	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800ad76:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad7a:	f242 0401 	movw	r4, #8193	; 0x2001
 800ad7e:	42a0      	cmp	r0, r4
 800ad80:	f171 0100 	sbcs.w	r1, r1, #0
 800ad84:	f082 8148 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ad88:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad8c:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 800ad90:	4321      	orrs	r1, r4
 800ad92:	f000 871e 	beq.w	800bbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800ad96:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad9a:	f241 0401 	movw	r4, #4097	; 0x1001
 800ad9e:	42a0      	cmp	r0, r4
 800ada0:	f171 0100 	sbcs.w	r1, r1, #0
 800ada4:	f082 8138 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ada8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800adac:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 800adb0:	4321      	orrs	r1, r4
 800adb2:	f000 86a8 	beq.w	800bb06 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800adb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800adba:	f640 0401 	movw	r4, #2049	; 0x801
 800adbe:	42a0      	cmp	r0, r4
 800adc0:	f171 0100 	sbcs.w	r1, r1, #0
 800adc4:	f082 8128 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800adc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800adcc:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 800add0:	4321      	orrs	r1, r4
 800add2:	f000 8632 	beq.w	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800add6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800adda:	f240 4401 	movw	r4, #1025	; 0x401
 800adde:	42a0      	cmp	r0, r4
 800ade0:	f171 0100 	sbcs.w	r1, r1, #0
 800ade4:	f082 8118 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ade8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800adec:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 800adf0:	4321      	orrs	r1, r4
 800adf2:	f000 85b0 	beq.w	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800adf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800adfa:	f240 2401 	movw	r4, #513	; 0x201
 800adfe:	42a0      	cmp	r0, r4
 800ae00:	f171 0100 	sbcs.w	r1, r1, #0
 800ae04:	f082 8108 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ae08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae0c:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 800ae10:	4321      	orrs	r1, r4
 800ae12:	f000 8535 	beq.w	800b880 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800ae16:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae1a:	f240 1401 	movw	r4, #257	; 0x101
 800ae1e:	42a0      	cmp	r0, r4
 800ae20:	f171 0100 	sbcs.w	r1, r1, #0
 800ae24:	f082 80f8 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ae28:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae2c:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 800ae30:	4321      	orrs	r1, r4
 800ae32:	f000 84ba 	beq.w	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800ae36:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae3a:	2881      	cmp	r0, #129	; 0x81
 800ae3c:	f171 0100 	sbcs.w	r1, r1, #0
 800ae40:	f082 80ea 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ae44:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae48:	2821      	cmp	r0, #33	; 0x21
 800ae4a:	f171 0100 	sbcs.w	r1, r1, #0
 800ae4e:	d26f      	bcs.n	800af30 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ae50:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae54:	4301      	orrs	r1, r0
 800ae56:	f002 80df 	beq.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ae5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae5e:	1e42      	subs	r2, r0, #1
 800ae60:	f141 33ff 	adc.w	r3, r1, #4294967295
 800ae64:	2a20      	cmp	r2, #32
 800ae66:	f173 0100 	sbcs.w	r1, r3, #0
 800ae6a:	f082 80d5 	bcs.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ae6e:	2a1f      	cmp	r2, #31
 800ae70:	f202 80d2 	bhi.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ae74:	a101      	add	r1, pc, #4	; (adr r1, 800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800ae76:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ae7a:	bf00      	nop
 800ae7c:	0800b1dd 	.word	0x0800b1dd
 800ae80:	0800b2a9 	.word	0x0800b2a9
 800ae84:	0800d019 	.word	0x0800d019
 800ae88:	0800b369 	.word	0x0800b369
 800ae8c:	0800d019 	.word	0x0800d019
 800ae90:	0800d019 	.word	0x0800d019
 800ae94:	0800d019 	.word	0x0800d019
 800ae98:	0800b439 	.word	0x0800b439
 800ae9c:	0800d019 	.word	0x0800d019
 800aea0:	0800d019 	.word	0x0800d019
 800aea4:	0800d019 	.word	0x0800d019
 800aea8:	0800d019 	.word	0x0800d019
 800aeac:	0800d019 	.word	0x0800d019
 800aeb0:	0800d019 	.word	0x0800d019
 800aeb4:	0800d019 	.word	0x0800d019
 800aeb8:	0800b51b 	.word	0x0800b51b
 800aebc:	0800d019 	.word	0x0800d019
 800aec0:	0800d019 	.word	0x0800d019
 800aec4:	0800d019 	.word	0x0800d019
 800aec8:	0800d019 	.word	0x0800d019
 800aecc:	0800d019 	.word	0x0800d019
 800aed0:	0800d019 	.word	0x0800d019
 800aed4:	0800d019 	.word	0x0800d019
 800aed8:	0800d019 	.word	0x0800d019
 800aedc:	0800d019 	.word	0x0800d019
 800aee0:	0800d019 	.word	0x0800d019
 800aee4:	0800d019 	.word	0x0800d019
 800aee8:	0800d019 	.word	0x0800d019
 800aeec:	0800d019 	.word	0x0800d019
 800aef0:	0800d019 	.word	0x0800d019
 800aef4:	0800d019 	.word	0x0800d019
 800aef8:	0800b5f1 	.word	0x0800b5f1
 800aefc:	80000001 	.word	0x80000001
 800af00:	40000001 	.word	0x40000001
 800af04:	20000001 	.word	0x20000001
 800af08:	10000001 	.word	0x10000001
 800af0c:	08000001 	.word	0x08000001
 800af10:	04000001 	.word	0x04000001
 800af14:	00800001 	.word	0x00800001
 800af18:	00400001 	.word	0x00400001
 800af1c:	00200001 	.word	0x00200001
 800af20:	00100001 	.word	0x00100001
 800af24:	00080001 	.word	0x00080001
 800af28:	00040001 	.word	0x00040001
 800af2c:	00020001 	.word	0x00020001
 800af30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af34:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800af38:	430b      	orrs	r3, r1
 800af3a:	f000 83c4 	beq.w	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800af3e:	f002 b86b 	b.w	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800af42:	4ba1      	ldr	r3, [pc, #644]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800af44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800af48:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800af4c:	633b      	str	r3, [r7, #48]	; 0x30
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af54:	d036      	beq.n	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800af56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af5c:	d86b      	bhi.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800af5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af64:	d02b      	beq.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af6c:	d863      	bhi.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af74:	d01b      	beq.n	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800af76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af7c:	d85b      	bhi.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af80:	2b00      	cmp	r3, #0
 800af82:	d004      	beq.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800af84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af8a:	d008      	beq.n	800af9e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800af8c:	e053      	b.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af8e:	f107 0320 	add.w	r3, r7, #32
 800af92:	4618      	mov	r0, r3
 800af94:	f7ff f8ba 	bl	800a10c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800af98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800af9c:	e04e      	b.n	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af9e:	f107 0314 	add.w	r3, r7, #20
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7ff fa1c 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800afac:	e046      	b.n	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afae:	f107 0308 	add.w	r3, r7, #8
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7ff fb7e 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800afbc:	e03e      	b.n	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800afbe:	4b83      	ldr	r3, [pc, #524]	; (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800afc0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800afc2:	e03b      	b.n	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afc4:	4b80      	ldr	r3, [pc, #512]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800afc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800afca:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800afce:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afd0:	4b7d      	ldr	r3, [pc, #500]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 0302 	and.w	r3, r3, #2
 800afd8:	2b02      	cmp	r3, #2
 800afda:	d10c      	bne.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800afdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d109      	bne.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800afe2:	4b79      	ldr	r3, [pc, #484]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	08db      	lsrs	r3, r3, #3
 800afe8:	f003 0303 	and.w	r3, r3, #3
 800afec:	4a78      	ldr	r2, [pc, #480]	; (800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800afee:	fa22 f303 	lsr.w	r3, r2, r3
 800aff2:	637b      	str	r3, [r7, #52]	; 0x34
 800aff4:	e01e      	b.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aff6:	4b74      	ldr	r3, [pc, #464]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800affe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b002:	d106      	bne.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b00a:	d102      	bne.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b00c:	4b71      	ldr	r3, [pc, #452]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800b00e:	637b      	str	r3, [r7, #52]	; 0x34
 800b010:	e010      	b.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b012:	4b6d      	ldr	r3, [pc, #436]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b01a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b01e:	d106      	bne.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800b020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b022:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b026:	d102      	bne.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b028:	4b6b      	ldr	r3, [pc, #428]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800b02a:	637b      	str	r3, [r7, #52]	; 0x34
 800b02c:	e002      	b.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800b02e:	2300      	movs	r3, #0
 800b030:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800b032:	e003      	b.n	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800b034:	e002      	b.n	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800b036:	2300      	movs	r3, #0
 800b038:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b03a:	bf00      	nop
          }
        }
        break;
 800b03c:	f001 bfef 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b040:	4b61      	ldr	r3, [pc, #388]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b042:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b046:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800b04a:	633b      	str	r3, [r7, #48]	; 0x30
 800b04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b052:	d036      	beq.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800b054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b056:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b05a:	d86b      	bhi.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800b062:	d02b      	beq.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800b064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b066:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800b06a:	d863      	bhi.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800b06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b072:	d01b      	beq.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b07a:	d85b      	bhi.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800b07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d004      	beq.n	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b084:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b088:	d008      	beq.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800b08a:	e053      	b.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b08c:	f107 0320 	add.w	r3, r7, #32
 800b090:	4618      	mov	r0, r3
 800b092:	f7ff f83b 	bl	800a10c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b098:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b09a:	e04e      	b.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b09c:	f107 0314 	add.w	r3, r7, #20
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7ff f99d 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b0aa:	e046      	b.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0ac:	f107 0308 	add.w	r3, r7, #8
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7ff faff 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b0ba:	e03e      	b.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b0bc:	4b43      	ldr	r3, [pc, #268]	; (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b0be:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b0c0:	e03b      	b.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b0c2:	4b41      	ldr	r3, [pc, #260]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b0c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b0c8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b0cc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b0ce:	4b3e      	ldr	r3, [pc, #248]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f003 0302 	and.w	r3, r3, #2
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d10c      	bne.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800b0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d109      	bne.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b0e0:	4b39      	ldr	r3, [pc, #228]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	08db      	lsrs	r3, r3, #3
 800b0e6:	f003 0303 	and.w	r3, r3, #3
 800b0ea:	4a39      	ldr	r2, [pc, #228]	; (800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800b0ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b0f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b0f2:	e01e      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b0f4:	4b34      	ldr	r3, [pc, #208]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b0fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b100:	d106      	bne.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b108:	d102      	bne.n	800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b10a:	4b32      	ldr	r3, [pc, #200]	; (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800b10c:	637b      	str	r3, [r7, #52]	; 0x34
 800b10e:	e010      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b110:	4b2d      	ldr	r3, [pc, #180]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b11c:	d106      	bne.n	800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800b11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b124:	d102      	bne.n	800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b126:	4b2c      	ldr	r3, [pc, #176]	; (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800b128:	637b      	str	r3, [r7, #52]	; 0x34
 800b12a:	e002      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800b12c:	2300      	movs	r3, #0
 800b12e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800b130:	e003      	b.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800b132:	e002      	b.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800b134:	2300      	movs	r3, #0
 800b136:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b138:	bf00      	nop
          }
        }
        break;
 800b13a:	f001 bf70 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800b13e:	4b22      	ldr	r3, [pc, #136]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b140:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b148:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800b14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d108      	bne.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b150:	f107 0320 	add.w	r3, r7, #32
 800b154:	4618      	mov	r0, r3
 800b156:	f7fe ffd9 	bl	800a10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b15e:	f001 bf5e 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	2b40      	cmp	r3, #64	; 0x40
 800b166:	d108      	bne.n	800b17a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b168:	f107 0314 	add.w	r3, r7, #20
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7ff f937 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b176:	f001 bf52 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b17a:	2300      	movs	r3, #0
 800b17c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b17e:	f001 bf4e 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800b182:	4b11      	ldr	r3, [pc, #68]	; (800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b184:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b18c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800b18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b190:	2b00      	cmp	r3, #0
 800b192:	d108      	bne.n	800b1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b194:	f107 0320 	add.w	r3, r7, #32
 800b198:	4618      	mov	r0, r3
 800b19a:	f7fe ffb7 	bl	800a10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b1a2:	f001 bf3c 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a8:	2b80      	cmp	r3, #128	; 0x80
 800b1aa:	d108      	bne.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1ac:	f107 0314 	add.w	r3, r7, #20
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7ff f915 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1ba:	f001 bf30 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1c2:	f001 bf2c 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b1c6:	bf00      	nop
 800b1c8:	44020c00 	.word	0x44020c00
 800b1cc:	00bb8000 	.word	0x00bb8000
 800b1d0:	03d09000 	.word	0x03d09000
 800b1d4:	003d0900 	.word	0x003d0900
 800b1d8:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b1dc:	4b9d      	ldr	r3, [pc, #628]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b1de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b1e2:	f003 0307 	and.w	r3, r3, #7
 800b1e6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d104      	bne.n	800b1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b1ee:	f7fc ff9f 	bl	8008130 <HAL_RCC_GetPCLK2Freq>
 800b1f2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b1f4:	f001 bf13 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800b1f8:	4b96      	ldr	r3, [pc, #600]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b204:	d10a      	bne.n	800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800b206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d107      	bne.n	800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b20c:	f107 0314 	add.w	r3, r7, #20
 800b210:	4618      	mov	r0, r3
 800b212:	f7ff f8e5 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	637b      	str	r3, [r7, #52]	; 0x34
 800b21a:	e043      	b.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800b21c:	4b8d      	ldr	r3, [pc, #564]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b228:	d10a      	bne.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800b22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	d107      	bne.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b230:	f107 0308 	add.w	r3, r7, #8
 800b234:	4618      	mov	r0, r3
 800b236:	f7ff fa3d 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	637b      	str	r3, [r7, #52]	; 0x34
 800b23e:	e031      	b.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b240:	4b84      	ldr	r3, [pc, #528]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 0302 	and.w	r3, r3, #2
 800b248:	2b02      	cmp	r3, #2
 800b24a:	d10c      	bne.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24e:	2b03      	cmp	r3, #3
 800b250:	d109      	bne.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b252:	4b80      	ldr	r3, [pc, #512]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	08db      	lsrs	r3, r3, #3
 800b258:	f003 0303 	and.w	r3, r3, #3
 800b25c:	4a7e      	ldr	r2, [pc, #504]	; (800b458 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b25e:	fa22 f303 	lsr.w	r3, r2, r3
 800b262:	637b      	str	r3, [r7, #52]	; 0x34
 800b264:	e01e      	b.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800b266:	4b7b      	ldr	r3, [pc, #492]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b26e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b272:	d105      	bne.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800b274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b276:	2b04      	cmp	r3, #4
 800b278:	d102      	bne.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800b27a:	4b78      	ldr	r3, [pc, #480]	; (800b45c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b27c:	637b      	str	r3, [r7, #52]	; 0x34
 800b27e:	e011      	b.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b280:	4b74      	ldr	r3, [pc, #464]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b286:	f003 0302 	and.w	r3, r3, #2
 800b28a:	2b02      	cmp	r3, #2
 800b28c:	d106      	bne.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800b28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b290:	2b05      	cmp	r3, #5
 800b292:	d103      	bne.n	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800b294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b298:	637b      	str	r3, [r7, #52]	; 0x34
 800b29a:	e003      	b.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800b29c:	2300      	movs	r3, #0
 800b29e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b2a0:	f001 bebd 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b2a4:	f001 bebb 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b2a8:	4b6a      	ldr	r3, [pc, #424]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b2aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b2ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2b2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d104      	bne.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b2ba:	f7fc ff23 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 800b2be:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800b2c0:	f001 bead 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800b2c4:	4b63      	ldr	r3, [pc, #396]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2d0:	d10a      	bne.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d4:	2b08      	cmp	r3, #8
 800b2d6:	d107      	bne.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2d8:	f107 0314 	add.w	r3, r7, #20
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7ff f87f 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b2e6:	e03d      	b.n	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ea:	2b10      	cmp	r3, #16
 800b2ec:	d108      	bne.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2ee:	f107 0308 	add.w	r3, r7, #8
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7ff f9de 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b2fc:	f001 be8f 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b300:	4b54      	ldr	r3, [pc, #336]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f003 0302 	and.w	r3, r3, #2
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d10c      	bne.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800b30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30e:	2b18      	cmp	r3, #24
 800b310:	d109      	bne.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b312:	4b50      	ldr	r3, [pc, #320]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	08db      	lsrs	r3, r3, #3
 800b318:	f003 0303 	and.w	r3, r3, #3
 800b31c:	4a4e      	ldr	r2, [pc, #312]	; (800b458 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b31e:	fa22 f303 	lsr.w	r3, r2, r3
 800b322:	637b      	str	r3, [r7, #52]	; 0x34
 800b324:	e01e      	b.n	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800b326:	4b4b      	ldr	r3, [pc, #300]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b32e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b332:	d105      	bne.n	800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b336:	2b20      	cmp	r3, #32
 800b338:	d102      	bne.n	800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800b33a:	4b48      	ldr	r3, [pc, #288]	; (800b45c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b33c:	637b      	str	r3, [r7, #52]	; 0x34
 800b33e:	e011      	b.n	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b340:	4b44      	ldr	r3, [pc, #272]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b346:	f003 0302 	and.w	r3, r3, #2
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d106      	bne.n	800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800b34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b350:	2b28      	cmp	r3, #40	; 0x28
 800b352:	d103      	bne.n	800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800b354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b358:	637b      	str	r3, [r7, #52]	; 0x34
 800b35a:	e003      	b.n	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800b35c:	2300      	movs	r3, #0
 800b35e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b360:	f001 be5d 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b364:	f001 be5b 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b368:	4b3a      	ldr	r3, [pc, #232]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b36a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b36e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b372:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b376:	2b00      	cmp	r3, #0
 800b378:	d104      	bne.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b37a:	f7fc fec3 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 800b37e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800b380:	f001 be4d 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800b384:	4b33      	ldr	r3, [pc, #204]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b38c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b390:	d10a      	bne.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b394:	2b40      	cmp	r3, #64	; 0x40
 800b396:	d107      	bne.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b398:	f107 0314 	add.w	r3, r7, #20
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7ff f81f 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	637b      	str	r3, [r7, #52]	; 0x34
 800b3a6:	e045      	b.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800b3a8:	4b2a      	ldr	r3, [pc, #168]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3b4:	d10a      	bne.n	800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b8:	2b80      	cmp	r3, #128	; 0x80
 800b3ba:	d107      	bne.n	800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3bc:	f107 0308 	add.w	r3, r7, #8
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7ff f977 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	637b      	str	r3, [r7, #52]	; 0x34
 800b3ca:	e033      	b.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b3cc:	4b21      	ldr	r3, [pc, #132]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f003 0302 	and.w	r3, r3, #2
 800b3d4:	2b02      	cmp	r3, #2
 800b3d6:	d10c      	bne.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3da:	2bc0      	cmp	r3, #192	; 0xc0
 800b3dc:	d109      	bne.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b3de:	4b1d      	ldr	r3, [pc, #116]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	08db      	lsrs	r3, r3, #3
 800b3e4:	f003 0303 	and.w	r3, r3, #3
 800b3e8:	4a1b      	ldr	r2, [pc, #108]	; (800b458 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b3ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ee:	637b      	str	r3, [r7, #52]	; 0x34
 800b3f0:	e020      	b.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800b3f2:	4b18      	ldr	r3, [pc, #96]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b3fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3fe:	d106      	bne.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800b400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b406:	d102      	bne.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800b408:	4b14      	ldr	r3, [pc, #80]	; (800b45c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b40a:	637b      	str	r3, [r7, #52]	; 0x34
 800b40c:	e012      	b.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b40e:	4b11      	ldr	r3, [pc, #68]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b414:	f003 0302 	and.w	r3, r3, #2
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d107      	bne.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800b41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b422:	d103      	bne.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800b424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b428:	637b      	str	r3, [r7, #52]	; 0x34
 800b42a:	e003      	b.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800b42c:	2300      	movs	r3, #0
 800b42e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b430:	f001 bdf5 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b434:	f001 bdf3 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b438:	4b06      	ldr	r3, [pc, #24]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b43a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b43e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800b442:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b446:	2b00      	cmp	r3, #0
 800b448:	d10a      	bne.n	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b44a:	f7fc fe5b 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 800b44e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800b450:	f001 bde5 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b454:	44020c00 	.word	0x44020c00
 800b458:	03d09000 	.word	0x03d09000
 800b45c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800b460:	4ba0      	ldr	r3, [pc, #640]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b46c:	d10b      	bne.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b474:	d107      	bne.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b476:	f107 0314 	add.w	r3, r7, #20
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe ffb0 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b480:	69bb      	ldr	r3, [r7, #24]
 800b482:	637b      	str	r3, [r7, #52]	; 0x34
 800b484:	e047      	b.n	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800b486:	4b97      	ldr	r3, [pc, #604]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b48e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b492:	d10b      	bne.n	800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800b494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b49a:	d107      	bne.n	800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b49c:	f107 0308 	add.w	r3, r7, #8
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7ff f907 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b4aa:	e034      	b.n	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b4ac:	4b8d      	ldr	r3, [pc, #564]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 0302 	and.w	r3, r3, #2
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	d10d      	bne.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b4be:	d109      	bne.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b4c0:	4b88      	ldr	r3, [pc, #544]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	08db      	lsrs	r3, r3, #3
 800b4c6:	f003 0303 	and.w	r3, r3, #3
 800b4ca:	4a87      	ldr	r2, [pc, #540]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800b4cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b4d0:	637b      	str	r3, [r7, #52]	; 0x34
 800b4d2:	e020      	b.n	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800b4d4:	4b83      	ldr	r3, [pc, #524]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4e0:	d106      	bne.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4e8:	d102      	bne.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800b4ea:	4b80      	ldr	r3, [pc, #512]	; (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800b4ec:	637b      	str	r3, [r7, #52]	; 0x34
 800b4ee:	e012      	b.n	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b4f0:	4b7c      	ldr	r3, [pc, #496]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b4f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b4f6:	f003 0302 	and.w	r3, r3, #2
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	d107      	bne.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800b4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b500:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b504:	d103      	bne.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800b506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b50a:	637b      	str	r3, [r7, #52]	; 0x34
 800b50c:	e003      	b.n	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800b50e:	2300      	movs	r3, #0
 800b510:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b512:	f001 bd84 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b516:	f001 bd82 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b51a:	4b72      	ldr	r3, [pc, #456]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b51c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b520:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b524:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d104      	bne.n	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b52c:	f7fc fdea 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 800b530:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800b532:	f001 bd74 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800b536:	4b6b      	ldr	r3, [pc, #428]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b53e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b542:	d10b      	bne.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800b544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b54a:	d107      	bne.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b54c:	f107 0314 	add.w	r3, r7, #20
 800b550:	4618      	mov	r0, r3
 800b552:	f7fe ff45 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	637b      	str	r3, [r7, #52]	; 0x34
 800b55a:	e047      	b.n	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800b55c:	4b61      	ldr	r3, [pc, #388]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b568:	d10b      	bne.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800b56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b570:	d107      	bne.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b572:	f107 0308 	add.w	r3, r7, #8
 800b576:	4618      	mov	r0, r3
 800b578:	f7ff f89c 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	637b      	str	r3, [r7, #52]	; 0x34
 800b580:	e034      	b.n	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b582:	4b58      	ldr	r3, [pc, #352]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 0302 	and.w	r3, r3, #2
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	d10d      	bne.n	800b5aa <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800b58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b590:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b594:	d109      	bne.n	800b5aa <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b596:	4b53      	ldr	r3, [pc, #332]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	08db      	lsrs	r3, r3, #3
 800b59c:	f003 0303 	and.w	r3, r3, #3
 800b5a0:	4a51      	ldr	r2, [pc, #324]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800b5a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b5a6:	637b      	str	r3, [r7, #52]	; 0x34
 800b5a8:	e020      	b.n	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800b5aa:	4b4e      	ldr	r3, [pc, #312]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5b6:	d106      	bne.n	800b5c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800b5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5be:	d102      	bne.n	800b5c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800b5c0:	4b4a      	ldr	r3, [pc, #296]	; (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800b5c2:	637b      	str	r3, [r7, #52]	; 0x34
 800b5c4:	e012      	b.n	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b5c6:	4b47      	ldr	r3, [pc, #284]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b5c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b5cc:	f003 0302 	and.w	r3, r3, #2
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d107      	bne.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800b5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b5da:	d103      	bne.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800b5dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5e0:	637b      	str	r3, [r7, #52]	; 0x34
 800b5e2:	e003      	b.n	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5e8:	f001 bd19 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b5ec:	f001 bd17 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800b5f0:	4b3c      	ldr	r3, [pc, #240]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b5f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b5f6:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800b5fa:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800b5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d104      	bne.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b602:	f7fc fd7f 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 800b606:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800b608:	f001 bd09 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800b60c:	4b35      	ldr	r3, [pc, #212]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b618:	d10b      	bne.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800b61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b620:	d107      	bne.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b622:	f107 0314 	add.w	r3, r7, #20
 800b626:	4618      	mov	r0, r3
 800b628:	f7fe feda 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	637b      	str	r3, [r7, #52]	; 0x34
 800b630:	e047      	b.n	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800b632:	4b2c      	ldr	r3, [pc, #176]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b63a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b63e:	d10b      	bne.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800b640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b646:	d107      	bne.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b648:	f107 0308 	add.w	r3, r7, #8
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7ff f831 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	637b      	str	r3, [r7, #52]	; 0x34
 800b656:	e034      	b.n	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800b658:	4b22      	ldr	r3, [pc, #136]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f003 0302 	and.w	r3, r3, #2
 800b660:	2b02      	cmp	r3, #2
 800b662:	d10d      	bne.n	800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800b664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b666:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800b66a:	d109      	bne.n	800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b66c:	4b1d      	ldr	r3, [pc, #116]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	08db      	lsrs	r3, r3, #3
 800b672:	f003 0303 	and.w	r3, r3, #3
 800b676:	4a1c      	ldr	r2, [pc, #112]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800b678:	fa22 f303 	lsr.w	r3, r2, r3
 800b67c:	637b      	str	r3, [r7, #52]	; 0x34
 800b67e:	e020      	b.n	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800b680:	4b18      	ldr	r3, [pc, #96]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b68c:	d106      	bne.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800b68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b694:	d102      	bne.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800b696:	4b15      	ldr	r3, [pc, #84]	; (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800b698:	637b      	str	r3, [r7, #52]	; 0x34
 800b69a:	e012      	b.n	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800b69c:	4b11      	ldr	r3, [pc, #68]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b69e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b6a2:	f003 0302 	and.w	r3, r3, #2
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d107      	bne.n	800b6ba <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ac:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800b6b0:	d103      	bne.n	800b6ba <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800b6b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6b6:	637b      	str	r3, [r7, #52]	; 0x34
 800b6b8:	e003      	b.n	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6be:	f001 bcae 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b6c2:	f001 bcac 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800b6c6:	4b07      	ldr	r3, [pc, #28]	; (800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b6c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b6cc:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 800b6d0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d10b      	bne.n	800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b6d8:	f7fc fd14 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 800b6dc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800b6de:	f001 bc9e 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b6e2:	bf00      	nop
 800b6e4:	44020c00 	.word	0x44020c00
 800b6e8:	03d09000 	.word	0x03d09000
 800b6ec:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800b6f0:	4ba0      	ldr	r3, [pc, #640]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6fc:	d10b      	bne.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800b6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b700:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b704:	d107      	bne.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b706:	f107 0314 	add.w	r3, r7, #20
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fe fe68 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	637b      	str	r3, [r7, #52]	; 0x34
 800b714:	e047      	b.n	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800b716:	4b97      	ldr	r3, [pc, #604]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b71e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b722:	d10b      	bne.n	800b73c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800b724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b726:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b72a:	d107      	bne.n	800b73c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b72c:	f107 0308 	add.w	r3, r7, #8
 800b730:	4618      	mov	r0, r3
 800b732:	f7fe ffbf 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	637b      	str	r3, [r7, #52]	; 0x34
 800b73a:	e034      	b.n	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800b73c:	4b8d      	ldr	r3, [pc, #564]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f003 0302 	and.w	r3, r3, #2
 800b744:	2b02      	cmp	r3, #2
 800b746:	d10d      	bne.n	800b764 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800b748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b74e:	d109      	bne.n	800b764 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b750:	4b88      	ldr	r3, [pc, #544]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	08db      	lsrs	r3, r3, #3
 800b756:	f003 0303 	and.w	r3, r3, #3
 800b75a:	4a87      	ldr	r2, [pc, #540]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800b75c:	fa22 f303 	lsr.w	r3, r2, r3
 800b760:	637b      	str	r3, [r7, #52]	; 0x34
 800b762:	e020      	b.n	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800b764:	4b83      	ldr	r3, [pc, #524]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b76c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b770:	d106      	bne.n	800b780 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800b772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b778:	d102      	bne.n	800b780 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800b77a:	4b80      	ldr	r3, [pc, #512]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800b77c:	637b      	str	r3, [r7, #52]	; 0x34
 800b77e:	e012      	b.n	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800b780:	4b7c      	ldr	r3, [pc, #496]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b786:	f003 0302 	and.w	r3, r3, #2
 800b78a:	2b02      	cmp	r3, #2
 800b78c:	d107      	bne.n	800b79e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800b78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b790:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800b794:	d103      	bne.n	800b79e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800b796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b79a:	637b      	str	r3, [r7, #52]	; 0x34
 800b79c:	e003      	b.n	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7a2:	f001 bc3c 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b7a6:	f001 bc3a 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800b7aa:	4b72      	ldr	r3, [pc, #456]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b7ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b7b0:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b7b4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d104      	bne.n	800b7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b7bc:	f7fc fca2 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 800b7c0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800b7c2:	f001 bc2c 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800b7c6:	4b6b      	ldr	r3, [pc, #428]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7d2:	d10b      	bne.n	800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800b7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7da:	d107      	bne.n	800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7dc:	f107 0314 	add.w	r3, r7, #20
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7fe fdfd 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	637b      	str	r3, [r7, #52]	; 0x34
 800b7ea:	e047      	b.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800b7ec:	4b61      	ldr	r3, [pc, #388]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7f8:	d10b      	bne.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b800:	d107      	bne.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b802:	f107 0308 	add.w	r3, r7, #8
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe ff54 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	637b      	str	r3, [r7, #52]	; 0x34
 800b810:	e034      	b.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800b812:	4b58      	ldr	r3, [pc, #352]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 0302 	and.w	r3, r3, #2
 800b81a:	2b02      	cmp	r3, #2
 800b81c:	d10d      	bne.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800b81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b820:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b824:	d109      	bne.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b826:	4b53      	ldr	r3, [pc, #332]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	08db      	lsrs	r3, r3, #3
 800b82c:	f003 0303 	and.w	r3, r3, #3
 800b830:	4a51      	ldr	r2, [pc, #324]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800b832:	fa22 f303 	lsr.w	r3, r2, r3
 800b836:	637b      	str	r3, [r7, #52]	; 0x34
 800b838:	e020      	b.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800b83a:	4b4e      	ldr	r3, [pc, #312]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b846:	d106      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800b848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b84e:	d102      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800b850:	4b4a      	ldr	r3, [pc, #296]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800b852:	637b      	str	r3, [r7, #52]	; 0x34
 800b854:	e012      	b.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800b856:	4b47      	ldr	r3, [pc, #284]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b85c:	f003 0302 	and.w	r3, r3, #2
 800b860:	2b02      	cmp	r3, #2
 800b862:	d107      	bne.n	800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800b864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b866:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b86a:	d103      	bne.n	800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800b86c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b870:	637b      	str	r3, [r7, #52]	; 0x34
 800b872:	e003      	b.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800b874:	2300      	movs	r3, #0
 800b876:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b878:	f001 bbd1 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b87c:	f001 bbcf 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800b880:	4b3c      	ldr	r3, [pc, #240]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b886:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b88a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800b88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d104      	bne.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b892:	f7fc fc37 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 800b896:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800b898:	f001 bbc1 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800b89c:	4b35      	ldr	r3, [pc, #212]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8a8:	d10b      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b8b0:	d107      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8b2:	f107 0314 	add.w	r3, r7, #20
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fe fd92 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	637b      	str	r3, [r7, #52]	; 0x34
 800b8c0:	e047      	b.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800b8c2:	4b2c      	ldr	r3, [pc, #176]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8ce:	d10b      	bne.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800b8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8d6:	d107      	bne.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8d8:	f107 0308 	add.w	r3, r7, #8
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fe fee9 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b8e6:	e034      	b.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800b8e8:	4b22      	ldr	r3, [pc, #136]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f003 0302 	and.w	r3, r3, #2
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d10d      	bne.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b8fa:	d109      	bne.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b8fc:	4b1d      	ldr	r3, [pc, #116]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	08db      	lsrs	r3, r3, #3
 800b902:	f003 0303 	and.w	r3, r3, #3
 800b906:	4a1c      	ldr	r2, [pc, #112]	; (800b978 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800b908:	fa22 f303 	lsr.w	r3, r2, r3
 800b90c:	637b      	str	r3, [r7, #52]	; 0x34
 800b90e:	e020      	b.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800b910:	4b18      	ldr	r3, [pc, #96]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b91c:	d106      	bne.n	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800b91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b924:	d102      	bne.n	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800b926:	4b15      	ldr	r3, [pc, #84]	; (800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800b928:	637b      	str	r3, [r7, #52]	; 0x34
 800b92a:	e012      	b.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800b92c:	4b11      	ldr	r3, [pc, #68]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b92e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b932:	f003 0302 	and.w	r3, r3, #2
 800b936:	2b02      	cmp	r3, #2
 800b938:	d107      	bne.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800b93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b940:	d103      	bne.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800b942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b946:	637b      	str	r3, [r7, #52]	; 0x34
 800b948:	e003      	b.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800b94a:	2300      	movs	r3, #0
 800b94c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b94e:	f001 bb66 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b952:	f001 bb64 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800b956:	4b07      	ldr	r3, [pc, #28]	; (800b974 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800b958:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b95c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 800b960:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800b962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10b      	bne.n	800b980 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b968:	f7fc fbcc 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 800b96c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800b96e:	f001 bb56 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b972:	bf00      	nop
 800b974:	44020c00 	.word	0x44020c00
 800b978:	03d09000 	.word	0x03d09000
 800b97c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800b980:	4ba1      	ldr	r3, [pc, #644]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b98c:	d10b      	bne.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800b98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b994:	d107      	bne.n	800b9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b996:	f107 0314 	add.w	r3, r7, #20
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fe fd20 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	637b      	str	r3, [r7, #52]	; 0x34
 800b9a4:	e047      	b.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800b9a6:	4b98      	ldr	r3, [pc, #608]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9b2:	d10b      	bne.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800b9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9ba:	d107      	bne.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9bc:	f107 0308 	add.w	r3, r7, #8
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fe fe77 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	637b      	str	r3, [r7, #52]	; 0x34
 800b9ca:	e034      	b.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800b9cc:	4b8e      	ldr	r3, [pc, #568]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 0302 	and.w	r3, r3, #2
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d10d      	bne.n	800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800b9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9da:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800b9de:	d109      	bne.n	800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b9e0:	4b89      	ldr	r3, [pc, #548]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	08db      	lsrs	r3, r3, #3
 800b9e6:	f003 0303 	and.w	r3, r3, #3
 800b9ea:	4a88      	ldr	r2, [pc, #544]	; (800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800b9ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b9f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b9f2:	e020      	b.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800b9f4:	4b84      	ldr	r3, [pc, #528]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b9fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba00:	d106      	bne.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800ba02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba08:	d102      	bne.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800ba0a:	4b81      	ldr	r3, [pc, #516]	; (800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800ba0c:	637b      	str	r3, [r7, #52]	; 0x34
 800ba0e:	e012      	b.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800ba10:	4b7d      	ldr	r3, [pc, #500]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ba12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba16:	f003 0302 	and.w	r3, r3, #2
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d107      	bne.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba20:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800ba24:	d103      	bne.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800ba26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba2a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba2c:	e003      	b.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba32:	f001 baf4 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ba36:	f001 baf2 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800ba3a:	4b73      	ldr	r3, [pc, #460]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ba3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ba40:	f003 0307 	and.w	r3, r3, #7
 800ba44:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800ba46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d104      	bne.n	800ba56 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ba4c:	f7fc fb5a 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 800ba50:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800ba52:	f001 bae4 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800ba56:	4b6c      	ldr	r3, [pc, #432]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba62:	d10a      	bne.n	800ba7a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800ba64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d107      	bne.n	800ba7a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba6a:	f107 0314 	add.w	r3, r7, #20
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fe fcb6 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	637b      	str	r3, [r7, #52]	; 0x34
 800ba78:	e043      	b.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800ba7a:	4b63      	ldr	r3, [pc, #396]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba86:	d10a      	bne.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	d107      	bne.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba8e:	f107 0308 	add.w	r3, r7, #8
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fe fe0e 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba9c:	e031      	b.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800ba9e:	4b5a      	ldr	r3, [pc, #360]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f003 0302 	and.w	r3, r3, #2
 800baa6:	2b02      	cmp	r3, #2
 800baa8:	d10c      	bne.n	800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800baaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baac:	2b03      	cmp	r3, #3
 800baae:	d109      	bne.n	800bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bab0:	4b55      	ldr	r3, [pc, #340]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	08db      	lsrs	r3, r3, #3
 800bab6:	f003 0303 	and.w	r3, r3, #3
 800baba:	4a54      	ldr	r2, [pc, #336]	; (800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800babc:	fa22 f303 	lsr.w	r3, r2, r3
 800bac0:	637b      	str	r3, [r7, #52]	; 0x34
 800bac2:	e01e      	b.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800bac4:	4b50      	ldr	r3, [pc, #320]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bacc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bad0:	d105      	bne.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800bad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad4:	2b04      	cmp	r3, #4
 800bad6:	d102      	bne.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800bad8:	4b4d      	ldr	r3, [pc, #308]	; (800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800bada:	637b      	str	r3, [r7, #52]	; 0x34
 800badc:	e011      	b.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800bade:	4b4a      	ldr	r3, [pc, #296]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bae4:	f003 0302 	and.w	r3, r3, #2
 800bae8:	2b02      	cmp	r3, #2
 800baea:	d106      	bne.n	800bafa <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800baec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baee:	2b05      	cmp	r3, #5
 800baf0:	d103      	bne.n	800bafa <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800baf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800baf6:	637b      	str	r3, [r7, #52]	; 0x34
 800baf8:	e003      	b.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800bafa:	2300      	movs	r3, #0
 800bafc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bafe:	f001 ba8e 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bb02:	f001 ba8c 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800bb06:	4b40      	ldr	r3, [pc, #256]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bb08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800bb0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb10:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800bb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d104      	bne.n	800bb22 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bb18:	f7fc faf4 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 800bb1c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800bb1e:	f001 ba7e 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800bb22:	4b39      	ldr	r3, [pc, #228]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb2e:	d10a      	bne.n	800bb46 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800bb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb32:	2b10      	cmp	r3, #16
 800bb34:	d107      	bne.n	800bb46 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb36:	f107 0314 	add.w	r3, r7, #20
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fe fc50 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb40:	69bb      	ldr	r3, [r7, #24]
 800bb42:	637b      	str	r3, [r7, #52]	; 0x34
 800bb44:	e043      	b.n	800bbce <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800bb46:	4b30      	ldr	r3, [pc, #192]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb52:	d10a      	bne.n	800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800bb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb56:	2b20      	cmp	r3, #32
 800bb58:	d107      	bne.n	800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb5a:	f107 0308 	add.w	r3, r7, #8
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7fe fda8 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	637b      	str	r3, [r7, #52]	; 0x34
 800bb68:	e031      	b.n	800bbce <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800bb6a:	4b27      	ldr	r3, [pc, #156]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 0302 	and.w	r3, r3, #2
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d10c      	bne.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800bb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb78:	2b30      	cmp	r3, #48	; 0x30
 800bb7a:	d109      	bne.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bb7c:	4b22      	ldr	r3, [pc, #136]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	08db      	lsrs	r3, r3, #3
 800bb82:	f003 0303 	and.w	r3, r3, #3
 800bb86:	4a21      	ldr	r2, [pc, #132]	; (800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800bb88:	fa22 f303 	lsr.w	r3, r2, r3
 800bb8c:	637b      	str	r3, [r7, #52]	; 0x34
 800bb8e:	e01e      	b.n	800bbce <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800bb90:	4b1d      	ldr	r3, [pc, #116]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb9c:	d105      	bne.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba0:	2b40      	cmp	r3, #64	; 0x40
 800bba2:	d102      	bne.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800bba4:	4b1a      	ldr	r3, [pc, #104]	; (800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800bba6:	637b      	str	r3, [r7, #52]	; 0x34
 800bba8:	e011      	b.n	800bbce <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800bbaa:	4b17      	ldr	r3, [pc, #92]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bbac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bbb0:	f003 0302 	and.w	r3, r3, #2
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d106      	bne.n	800bbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800bbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbba:	2b50      	cmp	r3, #80	; 0x50
 800bbbc:	d103      	bne.n	800bbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800bbbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbc2:	637b      	str	r3, [r7, #52]	; 0x34
 800bbc4:	e003      	b.n	800bbce <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbca:	f001 ba28 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bbce:	f001 ba26 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800bbd2:	4b0d      	ldr	r3, [pc, #52]	; (800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bbd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bbd8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bbdc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800bbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d104      	bne.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800bbe4:	f7fc faba 	bl	800815c <HAL_RCC_GetPCLK3Freq>
 800bbe8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800bbea:	f001 ba18 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800bbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bbf4:	d10e      	bne.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbf6:	f107 0314 	add.w	r3, r7, #20
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fe fbf0 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc04:	f001 ba0b 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bc08:	44020c00 	.word	0x44020c00
 800bc0c:	03d09000 	.word	0x03d09000
 800bc10:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800bc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc1a:	d108      	bne.n	800bc2e <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc1c:	f107 0308 	add.w	r3, r7, #8
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7fe fd47 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc2a:	f001 b9f8 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800bc2e:	4ba4      	ldr	r3, [pc, #656]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f003 0302 	and.w	r3, r3, #2
 800bc36:	2b02      	cmp	r3, #2
 800bc38:	d10d      	bne.n	800bc56 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800bc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bc40:	d109      	bne.n	800bc56 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bc42:	4b9f      	ldr	r3, [pc, #636]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	08db      	lsrs	r3, r3, #3
 800bc48:	f003 0303 	and.w	r3, r3, #3
 800bc4c:	4a9d      	ldr	r2, [pc, #628]	; (800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800bc4e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc52:	637b      	str	r3, [r7, #52]	; 0x34
 800bc54:	e020      	b.n	800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800bc56:	4b9a      	ldr	r3, [pc, #616]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc62:	d106      	bne.n	800bc72 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800bc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bc6a:	d102      	bne.n	800bc72 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800bc6c:	4b96      	ldr	r3, [pc, #600]	; (800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800bc6e:	637b      	str	r3, [r7, #52]	; 0x34
 800bc70:	e012      	b.n	800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800bc72:	4b93      	ldr	r3, [pc, #588]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bc74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bc78:	f003 0302 	and.w	r3, r3, #2
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d107      	bne.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800bc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc82:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800bc86:	d103      	bne.n	800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800bc88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc8c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc8e:	e003      	b.n	800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800bc90:	2300      	movs	r3, #0
 800bc92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc94:	f001 b9c3 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bc98:	f001 b9c1 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800bc9c:	4b88      	ldr	r3, [pc, #544]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bc9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bca2:	f003 0307 	and.w	r3, r3, #7
 800bca6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800bca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d104      	bne.n	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800bcae:	f7fc fa0d 	bl	80080cc <HAL_RCC_GetHCLKFreq>
 800bcb2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800bcb4:	f001 b9b3 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d104      	bne.n	800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800bcbe:	f7fc f8d9 	bl	8007e74 <HAL_RCC_GetSysClockFreq>
 800bcc2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bcc4:	f001 b9ab 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcca:	2b02      	cmp	r3, #2
 800bccc:	d108      	bne.n	800bce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcce:	f107 0314 	add.w	r3, r7, #20
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fe fb84 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcdc:	f001 b99f 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800bce0:	4b77      	ldr	r3, [pc, #476]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcec:	d105      	bne.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800bcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf0:	2b03      	cmp	r3, #3
 800bcf2:	d102      	bne.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800bcf4:	4b75      	ldr	r3, [pc, #468]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800bcf6:	637b      	str	r3, [r7, #52]	; 0x34
 800bcf8:	e023      	b.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800bcfa:	4b71      	ldr	r3, [pc, #452]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f003 0302 	and.w	r3, r3, #2
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	d10c      	bne.n	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	2b04      	cmp	r3, #4
 800bd0a:	d109      	bne.n	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bd0c:	4b6c      	ldr	r3, [pc, #432]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	08db      	lsrs	r3, r3, #3
 800bd12:	f003 0303 	and.w	r3, r3, #3
 800bd16:	4a6b      	ldr	r2, [pc, #428]	; (800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800bd18:	fa22 f303 	lsr.w	r3, r2, r3
 800bd1c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd1e:	e010      	b.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800bd20:	4b67      	ldr	r3, [pc, #412]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd2c:	d105      	bne.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd30:	2b05      	cmp	r3, #5
 800bd32:	d102      	bne.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800bd34:	4b64      	ldr	r3, [pc, #400]	; (800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800bd36:	637b      	str	r3, [r7, #52]	; 0x34
 800bd38:	e003      	b.n	800bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd3e:	f001 b96e 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bd42:	f001 b96c 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800bd46:	4b5e      	ldr	r3, [pc, #376]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bd48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bd4c:	f003 0308 	and.w	r3, r3, #8
 800bd50:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800bd52:	4b5b      	ldr	r3, [pc, #364]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bd54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bd58:	f003 0302 	and.w	r3, r3, #2
 800bd5c:	2b02      	cmp	r3, #2
 800bd5e:	d106      	bne.n	800bd6e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800bd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d103      	bne.n	800bd6e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800bd66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd6a:	637b      	str	r3, [r7, #52]	; 0x34
 800bd6c:	e012      	b.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800bd6e:	4b54      	ldr	r3, [pc, #336]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bd70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bd74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd7c:	d106      	bne.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	2b08      	cmp	r3, #8
 800bd82:	d103      	bne.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800bd84:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800bd88:	637b      	str	r3, [r7, #52]	; 0x34
 800bd8a:	e003      	b.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800bd90:	f001 b945 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bd94:	f001 b943 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800bd98:	4b49      	ldr	r3, [pc, #292]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bd9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bd9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bda2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800bda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d104      	bne.n	800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bdaa:	f7fc f9ab 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 800bdae:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800bdb0:	f001 b935 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800bdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdba:	d108      	bne.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdbc:	f107 0308 	add.w	r3, r7, #8
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fe fc77 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bdca:	f001 b928 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800bdce:	4b3c      	ldr	r3, [pc, #240]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f003 0302 	and.w	r3, r3, #2
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	d10d      	bne.n	800bdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800bdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bde0:	d109      	bne.n	800bdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bde2:	4b37      	ldr	r3, [pc, #220]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	08db      	lsrs	r3, r3, #3
 800bde8:	f003 0303 	and.w	r3, r3, #3
 800bdec:	4a35      	ldr	r2, [pc, #212]	; (800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800bdee:	fa22 f303 	lsr.w	r3, r2, r3
 800bdf2:	637b      	str	r3, [r7, #52]	; 0x34
 800bdf4:	e011      	b.n	800be1a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800bdf6:	4b32      	ldr	r3, [pc, #200]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bdfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be02:	d106      	bne.n	800be12 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800be04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be0a:	d102      	bne.n	800be12 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800be0c:	4b2e      	ldr	r3, [pc, #184]	; (800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800be0e:	637b      	str	r3, [r7, #52]	; 0x34
 800be10:	e003      	b.n	800be1a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800be12:	2300      	movs	r3, #0
 800be14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be16:	f001 b902 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800be1a:	f001 b900 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800be1e:	4b28      	ldr	r3, [pc, #160]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800be20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800be24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800be28:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d104      	bne.n	800be3a <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800be30:	f7fc f968 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 800be34:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800be36:	f001 b8f2 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800be3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be40:	d108      	bne.n	800be54 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be42:	f107 0308 	add.w	r3, r7, #8
 800be46:	4618      	mov	r0, r3
 800be48:	f7fe fc34 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be50:	f001 b8e5 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800be54:	4b1a      	ldr	r3, [pc, #104]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f003 0302 	and.w	r3, r3, #2
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d10d      	bne.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800be60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800be66:	d109      	bne.n	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800be68:	4b15      	ldr	r3, [pc, #84]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	08db      	lsrs	r3, r3, #3
 800be6e:	f003 0303 	and.w	r3, r3, #3
 800be72:	4a14      	ldr	r2, [pc, #80]	; (800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800be74:	fa22 f303 	lsr.w	r3, r2, r3
 800be78:	637b      	str	r3, [r7, #52]	; 0x34
 800be7a:	e011      	b.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800be7c:	4b10      	ldr	r3, [pc, #64]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be88:	d106      	bne.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800be8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800be90:	d102      	bne.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800be92:	4b0d      	ldr	r3, [pc, #52]	; (800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800be94:	637b      	str	r3, [r7, #52]	; 0x34
 800be96:	e003      	b.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800be98:	2300      	movs	r3, #0
 800be9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800be9c:	f001 b8bf 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bea0:	f001 b8bd 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800bea4:	4b06      	ldr	r3, [pc, #24]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800bea6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800beaa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800beae:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800beb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10c      	bne.n	800bed0 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800beb6:	f7fc f951 	bl	800815c <HAL_RCC_GetPCLK3Freq>
 800beba:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800bebc:	f001 b8af 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bec0:	44020c00 	.word	0x44020c00
 800bec4:	03d09000 	.word	0x03d09000
 800bec8:	003d0900 	.word	0x003d0900
 800becc:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800bed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bed6:	d108      	bne.n	800beea <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bed8:	f107 0308 	add.w	r3, r7, #8
 800bedc:	4618      	mov	r0, r3
 800bede:	f7fe fbe9 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bee6:	f001 b89a 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800beea:	4b9f      	ldr	r3, [pc, #636]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f003 0302 	and.w	r3, r3, #2
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d10d      	bne.n	800bf12 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800bef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800befc:	d109      	bne.n	800bf12 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800befe:	4b9a      	ldr	r3, [pc, #616]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	08db      	lsrs	r3, r3, #3
 800bf04:	f003 0303 	and.w	r3, r3, #3
 800bf08:	4a98      	ldr	r2, [pc, #608]	; (800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800bf0a:	fa22 f303 	lsr.w	r3, r2, r3
 800bf0e:	637b      	str	r3, [r7, #52]	; 0x34
 800bf10:	e011      	b.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800bf12:	4b95      	ldr	r3, [pc, #596]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf1e:	d106      	bne.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800bf20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf26:	d102      	bne.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800bf28:	4b91      	ldr	r3, [pc, #580]	; (800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800bf2a:	637b      	str	r3, [r7, #52]	; 0x34
 800bf2c:	e003      	b.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf32:	f001 b874 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bf36:	f001 b872 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800bf3a:	4b8b      	ldr	r3, [pc, #556]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bf40:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800bf44:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800bf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d104      	bne.n	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800bf4c:	f7fc f906 	bl	800815c <HAL_RCC_GetPCLK3Freq>
 800bf50:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800bf52:	f001 b864 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800bf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf5c:	d108      	bne.n	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf5e:	f107 0308 	add.w	r3, r7, #8
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7fe fba6 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf6c:	f001 b857 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800bf70:	4b7d      	ldr	r3, [pc, #500]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f003 0302 	and.w	r3, r3, #2
 800bf78:	2b02      	cmp	r3, #2
 800bf7a:	d10d      	bne.n	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf82:	d109      	bne.n	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bf84:	4b78      	ldr	r3, [pc, #480]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	08db      	lsrs	r3, r3, #3
 800bf8a:	f003 0303 	and.w	r3, r3, #3
 800bf8e:	4a77      	ldr	r2, [pc, #476]	; (800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800bf90:	fa22 f303 	lsr.w	r3, r2, r3
 800bf94:	637b      	str	r3, [r7, #52]	; 0x34
 800bf96:	e011      	b.n	800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800bf98:	4b73      	ldr	r3, [pc, #460]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bfa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfa4:	d106      	bne.n	800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800bfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bfac:	d102      	bne.n	800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800bfae:	4b70      	ldr	r3, [pc, #448]	; (800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800bfb0:	637b      	str	r3, [r7, #52]	; 0x34
 800bfb2:	e003      	b.n	800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bfb8:	f001 b831 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bfbc:	f001 b82f 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800bfc0:	4b69      	ldr	r3, [pc, #420]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bfc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bfc6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800bfca:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800bfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d104      	bne.n	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bfd2:	f7fc f897 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 800bfd6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800bfd8:	f001 b821 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800bfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bfe2:	d108      	bne.n	800bff6 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfe4:	f107 0308 	add.w	r3, r7, #8
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fe fb63 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bff2:	f001 b814 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800bff6:	4b5c      	ldr	r3, [pc, #368]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f003 0302 	and.w	r3, r3, #2
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d10e      	bne.n	800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800c002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c004:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c008:	d10a      	bne.n	800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c00a:	4b57      	ldr	r3, [pc, #348]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	08db      	lsrs	r3, r3, #3
 800c010:	f003 0303 	and.w	r3, r3, #3
 800c014:	4a55      	ldr	r2, [pc, #340]	; (800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800c016:	fa22 f303 	lsr.w	r3, r2, r3
 800c01a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c01c:	f000 bfff 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800c020:	2300      	movs	r3, #0
 800c022:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c024:	f000 bffb 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c028:	4b4f      	ldr	r3, [pc, #316]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c02a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c02e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c032:	633b      	str	r3, [r7, #48]	; 0x30
 800c034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c036:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c03a:	d056      	beq.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800c03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c042:	f200 808b 	bhi.w	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800c046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c04c:	d03e      	beq.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800c04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c054:	f200 8082 	bhi.w	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800c058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c05e:	d027      	beq.n	800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800c060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c066:	d879      	bhi.n	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c06e:	d017      	beq.n	800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800c070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c076:	d871      	bhi.n	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800c078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d004      	beq.n	800c088 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800c07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c084:	d004      	beq.n	800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800c086:	e069      	b.n	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c088:	f7fc f868 	bl	800815c <HAL_RCC_GetPCLK3Freq>
 800c08c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c08e:	e068      	b.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c090:	f107 0314 	add.w	r3, r7, #20
 800c094:	4618      	mov	r0, r3
 800c096:	f7fe f9a3 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c09e:	e060      	b.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0a0:	f107 0308 	add.w	r3, r7, #8
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fe fb05 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c0ae:	e058      	b.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c0b0:	4b2d      	ldr	r3, [pc, #180]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c0b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0b6:	f003 0302 	and.w	r3, r3, #2
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	d103      	bne.n	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800c0be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0c2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c0c4:	e04d      	b.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c0ca:	e04a      	b.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c0cc:	4b26      	ldr	r3, [pc, #152]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c0ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0da:	d103      	bne.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800c0dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c0e0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c0e2:	e03e      	b.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c0e8:	e03b      	b.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c0ea:	4b1f      	ldr	r3, [pc, #124]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c0ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c0f0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c0f4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0f6:	4b1c      	ldr	r3, [pc, #112]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f003 0302 	and.w	r3, r3, #2
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d10c      	bne.n	800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800c102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c104:	2b00      	cmp	r3, #0
 800c106:	d109      	bne.n	800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c108:	4b17      	ldr	r3, [pc, #92]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	08db      	lsrs	r3, r3, #3
 800c10e:	f003 0303 	and.w	r3, r3, #3
 800c112:	4a16      	ldr	r2, [pc, #88]	; (800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800c114:	fa22 f303 	lsr.w	r3, r2, r3
 800c118:	637b      	str	r3, [r7, #52]	; 0x34
 800c11a:	e01e      	b.n	800c15a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c11c:	4b12      	ldr	r3, [pc, #72]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c128:	d106      	bne.n	800c138 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800c12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c130:	d102      	bne.n	800c138 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c132:	4b0f      	ldr	r3, [pc, #60]	; (800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800c134:	637b      	str	r3, [r7, #52]	; 0x34
 800c136:	e010      	b.n	800c15a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c138:	4b0b      	ldr	r3, [pc, #44]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c144:	d106      	bne.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800c146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c14c:	d102      	bne.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c14e:	4b09      	ldr	r3, [pc, #36]	; (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800c150:	637b      	str	r3, [r7, #52]	; 0x34
 800c152:	e002      	b.n	800c15a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c154:	2300      	movs	r3, #0
 800c156:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c158:	e003      	b.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800c15a:	e002      	b.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800c15c:	2300      	movs	r3, #0
 800c15e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c160:	bf00      	nop
          }
        }
        break;
 800c162:	f000 bf5c 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c166:	bf00      	nop
 800c168:	44020c00 	.word	0x44020c00
 800c16c:	03d09000 	.word	0x03d09000
 800c170:	003d0900 	.word	0x003d0900
 800c174:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800c178:	4b9e      	ldr	r3, [pc, #632]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c17a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c17e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c182:	633b      	str	r3, [r7, #48]	; 0x30
 800c184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c186:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c18a:	d056      	beq.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800c18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c192:	f200 808b 	bhi.w	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c19c:	d03e      	beq.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800c19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1a4:	f200 8082 	bhi.w	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c1ae:	d027      	beq.n	800c200 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800c1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c1b6:	d879      	bhi.n	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1be:	d017      	beq.n	800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1c6:	d871      	bhi.n	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d004      	beq.n	800c1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800c1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1d4:	d004      	beq.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800c1d6:	e069      	b.n	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800c1d8:	f7fb ff94 	bl	8008104 <HAL_RCC_GetPCLK1Freq>
 800c1dc:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c1de:	e068      	b.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1e0:	f107 0314 	add.w	r3, r7, #20
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7fe f8fb 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c1ee:	e060      	b.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1f0:	f107 0308 	add.w	r3, r7, #8
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fe fa5d 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c1fe:	e058      	b.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c200:	4b7c      	ldr	r3, [pc, #496]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c206:	f003 0302 	and.w	r3, r3, #2
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d103      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800c20e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c212:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c214:	e04d      	b.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800c216:	2300      	movs	r3, #0
 800c218:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c21a:	e04a      	b.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c21c:	4b75      	ldr	r3, [pc, #468]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c21e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c226:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c22a:	d103      	bne.n	800c234 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800c22c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c230:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c232:	e03e      	b.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800c234:	2300      	movs	r3, #0
 800c236:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c238:	e03b      	b.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c23a:	4b6e      	ldr	r3, [pc, #440]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c23c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c240:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c244:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c246:	4b6b      	ldr	r3, [pc, #428]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f003 0302 	and.w	r3, r3, #2
 800c24e:	2b02      	cmp	r3, #2
 800c250:	d10c      	bne.n	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800c252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c254:	2b00      	cmp	r3, #0
 800c256:	d109      	bne.n	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c258:	4b66      	ldr	r3, [pc, #408]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	08db      	lsrs	r3, r3, #3
 800c25e:	f003 0303 	and.w	r3, r3, #3
 800c262:	4a65      	ldr	r2, [pc, #404]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800c264:	fa22 f303 	lsr.w	r3, r2, r3
 800c268:	637b      	str	r3, [r7, #52]	; 0x34
 800c26a:	e01e      	b.n	800c2aa <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c26c:	4b61      	ldr	r3, [pc, #388]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c278:	d106      	bne.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800c27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c280:	d102      	bne.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c282:	4b5e      	ldr	r3, [pc, #376]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800c284:	637b      	str	r3, [r7, #52]	; 0x34
 800c286:	e010      	b.n	800c2aa <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c288:	4b5a      	ldr	r3, [pc, #360]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c290:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c294:	d106      	bne.n	800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800c296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c29c:	d102      	bne.n	800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c29e:	4b58      	ldr	r3, [pc, #352]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800c2a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c2a2:	e002      	b.n	800c2aa <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c2a8:	e003      	b.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800c2aa:	e002      	b.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c2b0:	bf00      	nop
          }
        }
        break;
 800c2b2:	f000 beb4 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800c2b6:	4b4f      	ldr	r3, [pc, #316]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c2b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c2bc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c2c0:	633b      	str	r3, [r7, #48]	; 0x30
 800c2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c2c8:	d056      	beq.n	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c2d0:	f200 808b 	bhi.w	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c2da:	d03e      	beq.n	800c35a <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800c2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c2e2:	f200 8082 	bhi.w	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c2ec:	d027      	beq.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800c2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c2f4:	d879      	bhi.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2fc:	d017      	beq.n	800c32e <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c304:	d871      	bhi.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d004      	beq.n	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800c30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c312:	d004      	beq.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800c314:	e069      	b.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c316:	f7fb ff21 	bl	800815c <HAL_RCC_GetPCLK3Freq>
 800c31a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c31c:	e068      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c31e:	f107 0314 	add.w	r3, r7, #20
 800c322:	4618      	mov	r0, r3
 800c324:	f7fe f85c 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c32c:	e060      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c32e:	f107 0308 	add.w	r3, r7, #8
 800c332:	4618      	mov	r0, r3
 800c334:	f7fe f9be 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c33c:	e058      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c33e:	4b2d      	ldr	r3, [pc, #180]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c344:	f003 0302 	and.w	r3, r3, #2
 800c348:	2b02      	cmp	r3, #2
 800c34a:	d103      	bne.n	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800c34c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c350:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c352:	e04d      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800c354:	2300      	movs	r3, #0
 800c356:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c358:	e04a      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c35a:	4b26      	ldr	r3, [pc, #152]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c35c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c368:	d103      	bne.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800c36a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c36e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c370:	e03e      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800c372:	2300      	movs	r3, #0
 800c374:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c376:	e03b      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c378:	4b1e      	ldr	r3, [pc, #120]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c37a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c37e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c382:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c384:	4b1b      	ldr	r3, [pc, #108]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f003 0302 	and.w	r3, r3, #2
 800c38c:	2b02      	cmp	r3, #2
 800c38e:	d10c      	bne.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800c390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c392:	2b00      	cmp	r3, #0
 800c394:	d109      	bne.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c396:	4b17      	ldr	r3, [pc, #92]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	08db      	lsrs	r3, r3, #3
 800c39c:	f003 0303 	and.w	r3, r3, #3
 800c3a0:	4a15      	ldr	r2, [pc, #84]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800c3a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c3a6:	637b      	str	r3, [r7, #52]	; 0x34
 800c3a8:	e01e      	b.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3aa:	4b12      	ldr	r3, [pc, #72]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3b6:	d106      	bne.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800c3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3be:	d102      	bne.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c3c0:	4b0e      	ldr	r3, [pc, #56]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800c3c2:	637b      	str	r3, [r7, #52]	; 0x34
 800c3c4:	e010      	b.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3c6:	4b0b      	ldr	r3, [pc, #44]	; (800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3d2:	d106      	bne.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800c3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3da:	d102      	bne.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c3dc:	4b08      	ldr	r3, [pc, #32]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800c3de:	637b      	str	r3, [r7, #52]	; 0x34
 800c3e0:	e002      	b.n	800c3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c3e6:	e003      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800c3e8:	e002      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c3ee:	bf00      	nop
          }
        }
        break;
 800c3f0:	f000 be15 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c3f4:	44020c00 	.word	0x44020c00
 800c3f8:	03d09000 	.word	0x03d09000
 800c3fc:	003d0900 	.word	0x003d0900
 800c400:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800c404:	4b9e      	ldr	r3, [pc, #632]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c406:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c40a:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800c40e:	633b      	str	r3, [r7, #48]	; 0x30
 800c410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c412:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800c416:	d056      	beq.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800c418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800c41e:	f200 808b 	bhi.w	800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c424:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c428:	d03e      	beq.n	800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800c42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c430:	f200 8082 	bhi.w	800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c436:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c43a:	d027      	beq.n	800c48c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800c43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c442:	d879      	bhi.n	800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c44a:	d017      	beq.n	800c47c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800c44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c452:	d871      	bhi.n	800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c456:	2b00      	cmp	r3, #0
 800c458:	d004      	beq.n	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c460:	d004      	beq.n	800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800c462:	e069      	b.n	800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c464:	f7fb fe7a 	bl	800815c <HAL_RCC_GetPCLK3Freq>
 800c468:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c46a:	e068      	b.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c46c:	f107 0314 	add.w	r3, r7, #20
 800c470:	4618      	mov	r0, r3
 800c472:	f7fd ffb5 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c47a:	e060      	b.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c47c:	f107 0308 	add.w	r3, r7, #8
 800c480:	4618      	mov	r0, r3
 800c482:	f7fe f917 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c48a:	e058      	b.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c48c:	4b7c      	ldr	r3, [pc, #496]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c48e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c492:	f003 0302 	and.w	r3, r3, #2
 800c496:	2b02      	cmp	r3, #2
 800c498:	d103      	bne.n	800c4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800c49a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c49e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c4a0:	e04d      	b.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c4a6:	e04a      	b.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c4a8:	4b75      	ldr	r3, [pc, #468]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c4aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c4ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4b6:	d103      	bne.n	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800c4b8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c4bc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c4be:	e03e      	b.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c4c4:	e03b      	b.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c4c6:	4b6e      	ldr	r3, [pc, #440]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c4c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c4cc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c4d0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c4d2:	4b6b      	ldr	r3, [pc, #428]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f003 0302 	and.w	r3, r3, #2
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	d10c      	bne.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800c4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d109      	bne.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c4e4:	4b66      	ldr	r3, [pc, #408]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	08db      	lsrs	r3, r3, #3
 800c4ea:	f003 0303 	and.w	r3, r3, #3
 800c4ee:	4a65      	ldr	r2, [pc, #404]	; (800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800c4f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c4f4:	637b      	str	r3, [r7, #52]	; 0x34
 800c4f6:	e01e      	b.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4f8:	4b61      	ldr	r3, [pc, #388]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c504:	d106      	bne.n	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800c506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c50c:	d102      	bne.n	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c50e:	4b5e      	ldr	r3, [pc, #376]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800c510:	637b      	str	r3, [r7, #52]	; 0x34
 800c512:	e010      	b.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c514:	4b5a      	ldr	r3, [pc, #360]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c51c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c520:	d106      	bne.n	800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800c522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c528:	d102      	bne.n	800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c52a:	4b58      	ldr	r3, [pc, #352]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800c52c:	637b      	str	r3, [r7, #52]	; 0x34
 800c52e:	e002      	b.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c530:	2300      	movs	r3, #0
 800c532:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c534:	e003      	b.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800c536:	e002      	b.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800c538:	2300      	movs	r3, #0
 800c53a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c53c:	bf00      	nop
          }
        }
        break;
 800c53e:	f000 bd6e 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800c542:	4b4f      	ldr	r3, [pc, #316]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c544:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c548:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c54c:	633b      	str	r3, [r7, #48]	; 0x30
 800c54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c550:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c554:	d056      	beq.n	800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800c556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c558:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c55c:	f200 808b 	bhi.w	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c562:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c566:	d03e      	beq.n	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800c568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c56e:	f200 8082 	bhi.w	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c574:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c578:	d027      	beq.n	800c5ca <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c580:	d879      	bhi.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c588:	d017      	beq.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800c58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c590:	d871      	bhi.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800c592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c594:	2b00      	cmp	r3, #0
 800c596:	d004      	beq.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800c598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c59e:	d004      	beq.n	800c5aa <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800c5a0:	e069      	b.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c5a2:	f7fb fddb 	bl	800815c <HAL_RCC_GetPCLK3Freq>
 800c5a6:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c5a8:	e068      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5aa:	f107 0314 	add.w	r3, r7, #20
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fd ff16 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c5b8:	e060      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5ba:	f107 0308 	add.w	r3, r7, #8
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7fe f878 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c5c8:	e058      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c5ca:	4b2d      	ldr	r3, [pc, #180]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c5cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c5d0:	f003 0302 	and.w	r3, r3, #2
 800c5d4:	2b02      	cmp	r3, #2
 800c5d6:	d103      	bne.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800c5d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5dc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c5de:	e04d      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c5e4:	e04a      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c5e6:	4b26      	ldr	r3, [pc, #152]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c5e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c5ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5f4:	d103      	bne.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800c5f6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c5fa:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c5fc:	e03e      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c602:	e03b      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c604:	4b1e      	ldr	r3, [pc, #120]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c60a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c60e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c610:	4b1b      	ldr	r3, [pc, #108]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f003 0302 	and.w	r3, r3, #2
 800c618:	2b02      	cmp	r3, #2
 800c61a:	d10c      	bne.n	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800c61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d109      	bne.n	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c622:	4b17      	ldr	r3, [pc, #92]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	08db      	lsrs	r3, r3, #3
 800c628:	f003 0303 	and.w	r3, r3, #3
 800c62c:	4a15      	ldr	r2, [pc, #84]	; (800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800c62e:	fa22 f303 	lsr.w	r3, r2, r3
 800c632:	637b      	str	r3, [r7, #52]	; 0x34
 800c634:	e01e      	b.n	800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c636:	4b12      	ldr	r3, [pc, #72]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c63e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c642:	d106      	bne.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800c644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c64a:	d102      	bne.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c64c:	4b0e      	ldr	r3, [pc, #56]	; (800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800c64e:	637b      	str	r3, [r7, #52]	; 0x34
 800c650:	e010      	b.n	800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c652:	4b0b      	ldr	r3, [pc, #44]	; (800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c65a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c65e:	d106      	bne.n	800c66e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800c660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c666:	d102      	bne.n	800c66e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c668:	4b08      	ldr	r3, [pc, #32]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800c66a:	637b      	str	r3, [r7, #52]	; 0x34
 800c66c:	e002      	b.n	800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c66e:	2300      	movs	r3, #0
 800c670:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c672:	e003      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800c674:	e002      	b.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800c676:	2300      	movs	r3, #0
 800c678:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c67a:	bf00      	nop
          }
        }
        break;
 800c67c:	f000 bccf 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c680:	44020c00 	.word	0x44020c00
 800c684:	03d09000 	.word	0x03d09000
 800c688:	003d0900 	.word	0x003d0900
 800c68c:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800c690:	4b9e      	ldr	r3, [pc, #632]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c692:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c696:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c69a:	633b      	str	r3, [r7, #48]	; 0x30
 800c69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6a2:	d056      	beq.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800c6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6aa:	f200 808b 	bhi.w	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800c6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6b4:	d03e      	beq.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800c6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6bc:	f200 8082 	bhi.w	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6c6:	d027      	beq.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6ce:	d879      	bhi.n	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800c6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6d6:	d017      	beq.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800c6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6de:	d871      	bhi.n	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800c6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d004      	beq.n	800c6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800c6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6ec:	d004      	beq.n	800c6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800c6ee:	e069      	b.n	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c6f0:	f7fb fd34 	bl	800815c <HAL_RCC_GetPCLK3Freq>
 800c6f4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c6f6:	e068      	b.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6f8:	f107 0314 	add.w	r3, r7, #20
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7fd fe6f 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c706:	e060      	b.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c708:	f107 0308 	add.w	r3, r7, #8
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7fd ffd1 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c716:	e058      	b.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c718:	4b7c      	ldr	r3, [pc, #496]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c71a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c71e:	f003 0302 	and.w	r3, r3, #2
 800c722:	2b02      	cmp	r3, #2
 800c724:	d103      	bne.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800c726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c72a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c72c:	e04d      	b.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c732:	e04a      	b.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c734:	4b75      	ldr	r3, [pc, #468]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c73a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c73e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c742:	d103      	bne.n	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800c744:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c748:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c74a:	e03e      	b.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c750:	e03b      	b.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c752:	4b6e      	ldr	r3, [pc, #440]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c758:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c75c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c75e:	4b6b      	ldr	r3, [pc, #428]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f003 0302 	and.w	r3, r3, #2
 800c766:	2b02      	cmp	r3, #2
 800c768:	d10c      	bne.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800c76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d109      	bne.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c770:	4b66      	ldr	r3, [pc, #408]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	08db      	lsrs	r3, r3, #3
 800c776:	f003 0303 	and.w	r3, r3, #3
 800c77a:	4a65      	ldr	r2, [pc, #404]	; (800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800c77c:	fa22 f303 	lsr.w	r3, r2, r3
 800c780:	637b      	str	r3, [r7, #52]	; 0x34
 800c782:	e01e      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c784:	4b61      	ldr	r3, [pc, #388]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c78c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c790:	d106      	bne.n	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800c792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c798:	d102      	bne.n	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c79a:	4b5e      	ldr	r3, [pc, #376]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800c79c:	637b      	str	r3, [r7, #52]	; 0x34
 800c79e:	e010      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c7a0:	4b5a      	ldr	r3, [pc, #360]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7ac:	d106      	bne.n	800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800c7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7b4:	d102      	bne.n	800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c7b6:	4b58      	ldr	r3, [pc, #352]	; (800c918 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800c7b8:	637b      	str	r3, [r7, #52]	; 0x34
 800c7ba:	e002      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c7c0:	e003      	b.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800c7c2:	e002      	b.n	800c7ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c7c8:	bf00      	nop
          }
        }
        break;
 800c7ca:	f000 bc28 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c7ce:	4b4f      	ldr	r3, [pc, #316]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c7d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c7d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7d8:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800c7da:	4b4c      	ldr	r3, [pc, #304]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7e6:	d106      	bne.n	800c7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800c7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d103      	bne.n	800c7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800c7ee:	4b4a      	ldr	r3, [pc, #296]	; (800c918 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800c7f0:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800c7f2:	f000 bc14 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7fc:	d108      	bne.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7fe:	f107 0320 	add.w	r3, r7, #32
 800c802:	4618      	mov	r0, r3
 800c804:	f7fd fc82 	bl	800a10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c80c:	f000 bc07 	b.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800c810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c816:	d107      	bne.n	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c818:	f107 0314 	add.w	r3, r7, #20
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7fd fddf 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c826:	e3fa      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800c828:	2300      	movs	r3, #0
 800c82a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c82c:	e3f7      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c82e:	4b37      	ldr	r3, [pc, #220]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c834:	f003 0307 	and.w	r3, r3, #7
 800c838:	633b      	str	r3, [r7, #48]	; 0x30
 800c83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83c:	2b04      	cmp	r3, #4
 800c83e:	d861      	bhi.n	800c904 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800c840:	a201      	add	r2, pc, #4	; (adr r2, 800c848 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800c842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c846:	bf00      	nop
 800c848:	0800c85d 	.word	0x0800c85d
 800c84c:	0800c86d 	.word	0x0800c86d
 800c850:	0800c87d 	.word	0x0800c87d
 800c854:	0800c88d 	.word	0x0800c88d
 800c858:	0800c893 	.word	0x0800c893
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c85c:	f107 0320 	add.w	r3, r7, #32
 800c860:	4618      	mov	r0, r3
 800c862:	f7fd fc53 	bl	800a10c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c868:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c86a:	e04e      	b.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c86c:	f107 0314 	add.w	r3, r7, #20
 800c870:	4618      	mov	r0, r3
 800c872:	f7fd fdb5 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c87a:	e046      	b.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c87c:	f107 0308 	add.w	r3, r7, #8
 800c880:	4618      	mov	r0, r3
 800c882:	f7fd ff17 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c88a:	e03e      	b.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800c88c:	4b23      	ldr	r3, [pc, #140]	; (800c91c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800c88e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c890:	e03b      	b.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c892:	4b1e      	ldr	r3, [pc, #120]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c894:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c898:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c89c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c89e:	4b1b      	ldr	r3, [pc, #108]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f003 0302 	and.w	r3, r3, #2
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d10c      	bne.n	800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800c8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d109      	bne.n	800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c8b0:	4b16      	ldr	r3, [pc, #88]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	08db      	lsrs	r3, r3, #3
 800c8b6:	f003 0303 	and.w	r3, r3, #3
 800c8ba:	4a15      	ldr	r2, [pc, #84]	; (800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800c8bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c8c0:	637b      	str	r3, [r7, #52]	; 0x34
 800c8c2:	e01e      	b.n	800c902 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8c4:	4b11      	ldr	r3, [pc, #68]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c8cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8d0:	d106      	bne.n	800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800c8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8d8:	d102      	bne.n	800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c8da:	4b0e      	ldr	r3, [pc, #56]	; (800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800c8dc:	637b      	str	r3, [r7, #52]	; 0x34
 800c8de:	e010      	b.n	800c902 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8e0:	4b0a      	ldr	r3, [pc, #40]	; (800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8ec:	d106      	bne.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800c8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8f4:	d102      	bne.n	800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c8f6:	4b08      	ldr	r3, [pc, #32]	; (800c918 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800c8f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c8fa:	e002      	b.n	800c902 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c900:	e003      	b.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800c902:	e002      	b.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800c904:	2300      	movs	r3, #0
 800c906:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c908:	bf00      	nop
          }
        }
        break;
 800c90a:	e388      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c90c:	44020c00 	.word	0x44020c00
 800c910:	03d09000 	.word	0x03d09000
 800c914:	003d0900 	.word	0x003d0900
 800c918:	007a1200 	.word	0x007a1200
 800c91c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c920:	4ba9      	ldr	r3, [pc, #676]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c92a:	633b      	str	r3, [r7, #48]	; 0x30
 800c92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92e:	2b20      	cmp	r3, #32
 800c930:	f200 809a 	bhi.w	800ca68 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800c934:	a201      	add	r2, pc, #4	; (adr r2, 800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800c936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c93a:	bf00      	nop
 800c93c:	0800c9c1 	.word	0x0800c9c1
 800c940:	0800ca69 	.word	0x0800ca69
 800c944:	0800ca69 	.word	0x0800ca69
 800c948:	0800ca69 	.word	0x0800ca69
 800c94c:	0800ca69 	.word	0x0800ca69
 800c950:	0800ca69 	.word	0x0800ca69
 800c954:	0800ca69 	.word	0x0800ca69
 800c958:	0800ca69 	.word	0x0800ca69
 800c95c:	0800c9d1 	.word	0x0800c9d1
 800c960:	0800ca69 	.word	0x0800ca69
 800c964:	0800ca69 	.word	0x0800ca69
 800c968:	0800ca69 	.word	0x0800ca69
 800c96c:	0800ca69 	.word	0x0800ca69
 800c970:	0800ca69 	.word	0x0800ca69
 800c974:	0800ca69 	.word	0x0800ca69
 800c978:	0800ca69 	.word	0x0800ca69
 800c97c:	0800c9e1 	.word	0x0800c9e1
 800c980:	0800ca69 	.word	0x0800ca69
 800c984:	0800ca69 	.word	0x0800ca69
 800c988:	0800ca69 	.word	0x0800ca69
 800c98c:	0800ca69 	.word	0x0800ca69
 800c990:	0800ca69 	.word	0x0800ca69
 800c994:	0800ca69 	.word	0x0800ca69
 800c998:	0800ca69 	.word	0x0800ca69
 800c99c:	0800c9f1 	.word	0x0800c9f1
 800c9a0:	0800ca69 	.word	0x0800ca69
 800c9a4:	0800ca69 	.word	0x0800ca69
 800c9a8:	0800ca69 	.word	0x0800ca69
 800c9ac:	0800ca69 	.word	0x0800ca69
 800c9b0:	0800ca69 	.word	0x0800ca69
 800c9b4:	0800ca69 	.word	0x0800ca69
 800c9b8:	0800ca69 	.word	0x0800ca69
 800c9bc:	0800c9f7 	.word	0x0800c9f7
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9c0:	f107 0320 	add.w	r3, r7, #32
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fd fba1 	bl	800a10c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c9ce:	e04e      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9d0:	f107 0314 	add.w	r3, r7, #20
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7fd fd03 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c9de:	e046      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9e0:	f107 0308 	add.w	r3, r7, #8
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fd fe65 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c9ee:	e03e      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800c9f0:	4b76      	ldr	r3, [pc, #472]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800c9f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c9f4:	e03b      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9f6:	4b74      	ldr	r3, [pc, #464]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800c9f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c9fc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ca00:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca02:	4b71      	ldr	r3, [pc, #452]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f003 0302 	and.w	r3, r3, #2
 800ca0a:	2b02      	cmp	r3, #2
 800ca0c:	d10c      	bne.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800ca0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d109      	bne.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ca14:	4b6c      	ldr	r3, [pc, #432]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	08db      	lsrs	r3, r3, #3
 800ca1a:	f003 0303 	and.w	r3, r3, #3
 800ca1e:	4a6c      	ldr	r2, [pc, #432]	; (800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800ca20:	fa22 f303 	lsr.w	r3, r2, r3
 800ca24:	637b      	str	r3, [r7, #52]	; 0x34
 800ca26:	e01e      	b.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca28:	4b67      	ldr	r3, [pc, #412]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca34:	d106      	bne.n	800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800ca36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca3c:	d102      	bne.n	800ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ca3e:	4b65      	ldr	r3, [pc, #404]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800ca40:	637b      	str	r3, [r7, #52]	; 0x34
 800ca42:	e010      	b.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca44:	4b60      	ldr	r3, [pc, #384]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca50:	d106      	bne.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800ca52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca58:	d102      	bne.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ca5a:	4b5f      	ldr	r3, [pc, #380]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800ca5c:	637b      	str	r3, [r7, #52]	; 0x34
 800ca5e:	e002      	b.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ca60:	2300      	movs	r3, #0
 800ca62:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800ca64:	e003      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800ca66:	e002      	b.n	800ca6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ca6c:	bf00      	nop
          }
        }
        break;
 800ca6e:	e2d6      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800ca70:	4b55      	ldr	r3, [pc, #340]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ca72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ca76:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ca7a:	633b      	str	r3, [r7, #48]	; 0x30
 800ca7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca82:	d031      	beq.n	800cae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800ca84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca8a:	d866      	bhi.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800ca8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8e:	2bc0      	cmp	r3, #192	; 0xc0
 800ca90:	d027      	beq.n	800cae2 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800ca92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca94:	2bc0      	cmp	r3, #192	; 0xc0
 800ca96:	d860      	bhi.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800ca98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9a:	2b80      	cmp	r3, #128	; 0x80
 800ca9c:	d019      	beq.n	800cad2 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa0:	2b80      	cmp	r3, #128	; 0x80
 800caa2:	d85a      	bhi.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800caa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d003      	beq.n	800cab2 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800caaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caac:	2b40      	cmp	r3, #64	; 0x40
 800caae:	d008      	beq.n	800cac2 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800cab0:	e053      	b.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cab2:	f107 0320 	add.w	r3, r7, #32
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fd fb28 	bl	800a10c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800cabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cabe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cac0:	e04e      	b.n	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cac2:	f107 0314 	add.w	r3, r7, #20
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7fd fc8a 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cad0:	e046      	b.n	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cad2:	f107 0308 	add.w	r3, r7, #8
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7fd fdec 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cae0:	e03e      	b.n	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800cae2:	4b3a      	ldr	r3, [pc, #232]	; (800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800cae4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cae6:	e03b      	b.n	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cae8:	4b37      	ldr	r3, [pc, #220]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800caea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800caee:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800caf2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800caf4:	4b34      	ldr	r3, [pc, #208]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f003 0302 	and.w	r3, r3, #2
 800cafc:	2b02      	cmp	r3, #2
 800cafe:	d10c      	bne.n	800cb1a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800cb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d109      	bne.n	800cb1a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cb06:	4b30      	ldr	r3, [pc, #192]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	08db      	lsrs	r3, r3, #3
 800cb0c:	f003 0303 	and.w	r3, r3, #3
 800cb10:	4a2f      	ldr	r2, [pc, #188]	; (800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800cb12:	fa22 f303 	lsr.w	r3, r2, r3
 800cb16:	637b      	str	r3, [r7, #52]	; 0x34
 800cb18:	e01e      	b.n	800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb1a:	4b2b      	ldr	r3, [pc, #172]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb26:	d106      	bne.n	800cb36 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800cb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb2e:	d102      	bne.n	800cb36 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cb30:	4b28      	ldr	r3, [pc, #160]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800cb32:	637b      	str	r3, [r7, #52]	; 0x34
 800cb34:	e010      	b.n	800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb36:	4b24      	ldr	r3, [pc, #144]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb42:	d106      	bne.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800cb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb4a:	d102      	bne.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cb4c:	4b22      	ldr	r3, [pc, #136]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800cb4e:	637b      	str	r3, [r7, #52]	; 0x34
 800cb50:	e002      	b.n	800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800cb52:	2300      	movs	r3, #0
 800cb54:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800cb56:	e003      	b.n	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800cb58:	e002      	b.n	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cb5e:	bf00      	nop
          }
        }
        break;
 800cb60:	e25d      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800cb62:	4b19      	ldr	r3, [pc, #100]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cb64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cb68:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800cb6c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d103      	bne.n	800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800cb74:	f7fb fadc 	bl	8008130 <HAL_RCC_GetPCLK2Freq>
 800cb78:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800cb7a:	e250      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800cb7c:	4b12      	ldr	r3, [pc, #72]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb88:	d10b      	bne.n	800cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb90:	d107      	bne.n	800cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb92:	f107 0314 	add.w	r3, r7, #20
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7fd fc22 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cb9c:	69bb      	ldr	r3, [r7, #24]
 800cb9e:	637b      	str	r3, [r7, #52]	; 0x34
 800cba0:	e04f      	b.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800cba2:	4b09      	ldr	r3, [pc, #36]	; (800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbae:	d115      	bne.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbb6:	d111      	bne.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbb8:	f107 0308 	add.w	r3, r7, #8
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f7fd fd79 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	637b      	str	r3, [r7, #52]	; 0x34
 800cbc6:	e03c      	b.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800cbc8:	44020c00 	.word	0x44020c00
 800cbcc:	00bb8000 	.word	0x00bb8000
 800cbd0:	03d09000 	.word	0x03d09000
 800cbd4:	003d0900 	.word	0x003d0900
 800cbd8:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800cbdc:	4b94      	ldr	r3, [pc, #592]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f003 0302 	and.w	r3, r3, #2
 800cbe4:	2b02      	cmp	r3, #2
 800cbe6:	d10d      	bne.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800cbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cbee:	d109      	bne.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cbf0:	4b8f      	ldr	r3, [pc, #572]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	08db      	lsrs	r3, r3, #3
 800cbf6:	f003 0303 	and.w	r3, r3, #3
 800cbfa:	4a8e      	ldr	r2, [pc, #568]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800cbfc:	fa22 f303 	lsr.w	r3, r2, r3
 800cc00:	637b      	str	r3, [r7, #52]	; 0x34
 800cc02:	e01e      	b.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800cc04:	4b8a      	ldr	r3, [pc, #552]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cc0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc10:	d106      	bne.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800cc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc18:	d102      	bne.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800cc1a:	4b87      	ldr	r3, [pc, #540]	; (800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800cc1c:	637b      	str	r3, [r7, #52]	; 0x34
 800cc1e:	e010      	b.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800cc20:	4b83      	ldr	r3, [pc, #524]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc2c:	d106      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800cc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc30:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800cc34:	d102      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800cc36:	4b81      	ldr	r3, [pc, #516]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800cc38:	637b      	str	r3, [r7, #52]	; 0x34
 800cc3a:	e002      	b.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cc40:	e1ed      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cc42:	e1ec      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800cc44:	4b7a      	ldr	r3, [pc, #488]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cc46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cc4a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cc4e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800cc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d103      	bne.n	800cc5e <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800cc56:	f7fb fa81 	bl	800815c <HAL_RCC_GetPCLK3Freq>
 800cc5a:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800cc5c:	e1df      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800cc5e:	4b74      	ldr	r3, [pc, #464]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc6a:	d10b      	bne.n	800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc72:	d107      	bne.n	800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc74:	f107 0314 	add.w	r3, r7, #20
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7fd fbb1 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	637b      	str	r3, [r7, #52]	; 0x34
 800cc82:	e045      	b.n	800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800cc84:	4b6a      	ldr	r3, [pc, #424]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc90:	d10b      	bne.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800cc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc98:	d107      	bne.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc9a:	f107 0308 	add.w	r3, r7, #8
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7fd fd08 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	637b      	str	r3, [r7, #52]	; 0x34
 800cca8:	e032      	b.n	800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800ccaa:	4b61      	ldr	r3, [pc, #388]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f003 0302 	and.w	r3, r3, #2
 800ccb2:	2b02      	cmp	r3, #2
 800ccb4:	d10d      	bne.n	800ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800ccb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ccbc:	d109      	bne.n	800ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ccbe:	4b5c      	ldr	r3, [pc, #368]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	08db      	lsrs	r3, r3, #3
 800ccc4:	f003 0303 	and.w	r3, r3, #3
 800ccc8:	4a5a      	ldr	r2, [pc, #360]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800ccca:	fa22 f303 	lsr.w	r3, r2, r3
 800ccce:	637b      	str	r3, [r7, #52]	; 0x34
 800ccd0:	e01e      	b.n	800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800ccd2:	4b57      	ldr	r3, [pc, #348]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ccda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccde:	d106      	bne.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800cce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cce6:	d102      	bne.n	800ccee <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800cce8:	4b53      	ldr	r3, [pc, #332]	; (800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800ccea:	637b      	str	r3, [r7, #52]	; 0x34
 800ccec:	e010      	b.n	800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800ccee:	4b50      	ldr	r3, [pc, #320]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccfa:	d106      	bne.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfe:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800cd02:	d102      	bne.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800cd04:	4b4d      	ldr	r3, [pc, #308]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800cd06:	637b      	str	r3, [r7, #52]	; 0x34
 800cd08:	e002      	b.n	800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cd0e:	e186      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cd10:	e185      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cd12:	4b47      	ldr	r3, [pc, #284]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cd14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cd18:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800cd1c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800cd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d103      	bne.n	800cd2c <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800cd24:	f7fb fa04 	bl	8008130 <HAL_RCC_GetPCLK2Freq>
 800cd28:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800cd2a:	e178      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800cd2c:	4b40      	ldr	r3, [pc, #256]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd38:	d10b      	bne.n	800cd52 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800cd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd40:	d107      	bne.n	800cd52 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd42:	f107 0314 	add.w	r3, r7, #20
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fd fb4a 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	637b      	str	r3, [r7, #52]	; 0x34
 800cd50:	e045      	b.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800cd52:	4b37      	ldr	r3, [pc, #220]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd5e:	d10b      	bne.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800cd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd66:	d107      	bne.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd68:	f107 0308 	add.w	r3, r7, #8
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f7fd fca1 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	637b      	str	r3, [r7, #52]	; 0x34
 800cd76:	e032      	b.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800cd78:	4b2d      	ldr	r3, [pc, #180]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f003 0302 	and.w	r3, r3, #2
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	d10d      	bne.n	800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800cd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd86:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800cd8a:	d109      	bne.n	800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cd8c:	4b28      	ldr	r3, [pc, #160]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	08db      	lsrs	r3, r3, #3
 800cd92:	f003 0303 	and.w	r3, r3, #3
 800cd96:	4a27      	ldr	r2, [pc, #156]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800cd98:	fa22 f303 	lsr.w	r3, r2, r3
 800cd9c:	637b      	str	r3, [r7, #52]	; 0x34
 800cd9e:	e01e      	b.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800cda0:	4b23      	ldr	r3, [pc, #140]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cda8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdac:	d106      	bne.n	800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800cdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdb4:	d102      	bne.n	800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800cdb6:	4b20      	ldr	r3, [pc, #128]	; (800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800cdb8:	637b      	str	r3, [r7, #52]	; 0x34
 800cdba:	e010      	b.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800cdbc:	4b1c      	ldr	r3, [pc, #112]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdc8:	d106      	bne.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800cdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdcc:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800cdd0:	d102      	bne.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800cdd2:	4b1a      	ldr	r3, [pc, #104]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800cdd4:	637b      	str	r3, [r7, #52]	; 0x34
 800cdd6:	e002      	b.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cddc:	e11f      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cdde:	e11e      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800cde0:	4b13      	ldr	r3, [pc, #76]	; (800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800cde2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cde6:	f003 0303 	and.w	r3, r3, #3
 800cdea:	633b      	str	r3, [r7, #48]	; 0x30
 800cdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	d85f      	bhi.n	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800cdf2:	a201      	add	r2, pc, #4	; (adr r2, 800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800cdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf8:	0800ce09 	.word	0x0800ce09
 800cdfc:	0800ce11 	.word	0x0800ce11
 800ce00:	0800ce21 	.word	0x0800ce21
 800ce04:	0800ce41 	.word	0x0800ce41

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800ce08:	f7fb f960 	bl	80080cc <HAL_RCC_GetHCLKFreq>
 800ce0c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800ce0e:	e053      	b.n	800ceb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce10:	f107 0320 	add.w	r3, r7, #32
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7fd f979 	bl	800a10c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ce1e:	e04b      	b.n	800ceb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce20:	f107 0314 	add.w	r3, r7, #20
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fd fadb 	bl	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ce2e:	e043      	b.n	800ceb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800ce30:	44020c00 	.word	0x44020c00
 800ce34:	03d09000 	.word	0x03d09000
 800ce38:	003d0900 	.word	0x003d0900
 800ce3c:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce40:	4b79      	ldr	r3, [pc, #484]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ce42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ce46:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ce4a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce4c:	4b76      	ldr	r3, [pc, #472]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f003 0302 	and.w	r3, r3, #2
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d10c      	bne.n	800ce72 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800ce58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d109      	bne.n	800ce72 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ce5e:	4b72      	ldr	r3, [pc, #456]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	08db      	lsrs	r3, r3, #3
 800ce64:	f003 0303 	and.w	r3, r3, #3
 800ce68:	4a70      	ldr	r2, [pc, #448]	; (800d02c <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800ce6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ce6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ce70:	e01e      	b.n	800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce72:	4b6d      	ldr	r3, [pc, #436]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce7e:	d106      	bne.n	800ce8e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800ce80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce86:	d102      	bne.n	800ce8e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ce88:	4b69      	ldr	r3, [pc, #420]	; (800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800ce8a:	637b      	str	r3, [r7, #52]	; 0x34
 800ce8c:	e010      	b.n	800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce8e:	4b66      	ldr	r3, [pc, #408]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce9a:	d106      	bne.n	800ceaa <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800ce9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cea2:	d102      	bne.n	800ceaa <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cea4:	4b63      	ldr	r3, [pc, #396]	; (800d034 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800cea6:	637b      	str	r3, [r7, #52]	; 0x34
 800cea8:	e002      	b.n	800ceb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800ceae:	e003      	b.n	800ceb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800ceb0:	e002      	b.n	800ceb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ceb6:	bf00      	nop
          }
        }
        break;
 800ceb8:	e0b1      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800ceba:	4b5b      	ldr	r3, [pc, #364]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cec0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cec4:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800cec6:	4b58      	ldr	r3, [pc, #352]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cecc:	f003 0302 	and.w	r3, r3, #2
 800ced0:	2b02      	cmp	r3, #2
 800ced2:	d106      	bne.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800ced4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d103      	bne.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800ceda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cede:	637b      	str	r3, [r7, #52]	; 0x34
 800cee0:	e01f      	b.n	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800cee2:	4b51      	ldr	r3, [pc, #324]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ceec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cef0:	d106      	bne.n	800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800cef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef4:	2b40      	cmp	r3, #64	; 0x40
 800cef6:	d103      	bne.n	800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800cef8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cefc:	637b      	str	r3, [r7, #52]	; 0x34
 800cefe:	e010      	b.n	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800cf00:	4b49      	ldr	r3, [pc, #292]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf0c:	d106      	bne.n	800cf1c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf10:	2b80      	cmp	r3, #128	; 0x80
 800cf12:	d103      	bne.n	800cf1c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800cf14:	f248 0312 	movw	r3, #32786	; 0x8012
 800cf18:	637b      	str	r3, [r7, #52]	; 0x34
 800cf1a:	e002      	b.n	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800cf20:	e07d      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cf22:	e07c      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800cf24:	4b40      	ldr	r3, [pc, #256]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cf26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cf2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cf2e:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800cf30:	4b3d      	ldr	r3, [pc, #244]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cf38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf3c:	d105      	bne.n	800cf4a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d102      	bne.n	800cf4a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800cf44:	4b3c      	ldr	r3, [pc, #240]	; (800d038 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800cf46:	637b      	str	r3, [r7, #52]	; 0x34
 800cf48:	e031      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800cf4a:	4b37      	ldr	r3, [pc, #220]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf56:	d10a      	bne.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800cf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5a:	2b10      	cmp	r3, #16
 800cf5c:	d107      	bne.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf5e:	f107 0320 	add.w	r3, r7, #32
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fd f8d2 	bl	800a10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6a:	637b      	str	r3, [r7, #52]	; 0x34
 800cf6c:	e01f      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800cf6e:	4b2e      	ldr	r3, [pc, #184]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cf70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cf74:	f003 0302 	and.w	r3, r3, #2
 800cf78:	2b02      	cmp	r3, #2
 800cf7a:	d106      	bne.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7e:	2b20      	cmp	r3, #32
 800cf80:	d103      	bne.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800cf82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf86:	637b      	str	r3, [r7, #52]	; 0x34
 800cf88:	e011      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800cf8a:	4b27      	ldr	r3, [pc, #156]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cf8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cf90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf98:	d106      	bne.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800cf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9c:	2b30      	cmp	r3, #48	; 0x30
 800cf9e:	d103      	bne.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800cfa0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cfa4:	637b      	str	r3, [r7, #52]	; 0x34
 800cfa6:	e002      	b.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800cfac:	e037      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cfae:	e036      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800cfb0:	4b1d      	ldr	r3, [pc, #116]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cfb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cfb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cfba:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800cfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfbe:	2b10      	cmp	r3, #16
 800cfc0:	d107      	bne.n	800cfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cfc2:	f107 0320 	add.w	r3, r7, #32
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fd f8a0 	bl	800a10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfce:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800cfd0:	e025      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800cfd2:	4b15      	ldr	r3, [pc, #84]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfde:	d10a      	bne.n	800cff6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800cfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe2:	2b20      	cmp	r3, #32
 800cfe4:	d107      	bne.n	800cff6 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfe6:	f107 0308 	add.w	r3, r7, #8
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7fd fb62 	bl	800a6b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	637b      	str	r3, [r7, #52]	; 0x34
 800cff4:	e00f      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800cff6:	4b0c      	ldr	r3, [pc, #48]	; (800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d002:	d105      	bne.n	800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800d004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d006:	2b30      	cmp	r3, #48	; 0x30
 800d008:	d102      	bne.n	800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800d00a:	4b0b      	ldr	r3, [pc, #44]	; (800d038 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800d00c:	637b      	str	r3, [r7, #52]	; 0x34
 800d00e:	e002      	b.n	800d016 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800d010:	2300      	movs	r3, #0
 800d012:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 800d014:	e003      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d016:	e002      	b.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800d018:	2300      	movs	r3, #0
 800d01a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d01c:	bf00      	nop
    }
  }

  return (frequency);
 800d01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d020:	4618      	mov	r0, r3
 800d022:	373c      	adds	r7, #60	; 0x3c
 800d024:	46bd      	mov	sp, r7
 800d026:	bd90      	pop	{r4, r7, pc}
 800d028:	44020c00 	.word	0x44020c00
 800d02c:	03d09000 	.word	0x03d09000
 800d030:	003d0900 	.word	0x003d0900
 800d034:	007a1200 	.word	0x007a1200
 800d038:	02dc6c00 	.word	0x02dc6c00

0800d03c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800d044:	4b48      	ldr	r3, [pc, #288]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a47      	ldr	r2, [pc, #284]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d04a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d04e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d050:	f7f6 feda 	bl	8003e08 <HAL_GetTick>
 800d054:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d056:	e008      	b.n	800d06a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d058:	f7f6 fed6 	bl	8003e08 <HAL_GetTick>
 800d05c:	4602      	mov	r2, r0
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	1ad3      	subs	r3, r2, r3
 800d062:	2b02      	cmp	r3, #2
 800d064:	d901      	bls.n	800d06a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d066:	2303      	movs	r3, #3
 800d068:	e07a      	b.n	800d160 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d06a:	4b3f      	ldr	r3, [pc, #252]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d072:	2b00      	cmp	r3, #0
 800d074:	d1f0      	bne.n	800d058 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800d076:	4b3c      	ldr	r3, [pc, #240]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d07e:	f023 0303 	bic.w	r3, r3, #3
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	6811      	ldr	r1, [r2, #0]
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	6852      	ldr	r2, [r2, #4]
 800d08a:	0212      	lsls	r2, r2, #8
 800d08c:	430a      	orrs	r2, r1
 800d08e:	4936      	ldr	r1, [pc, #216]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d090:	4313      	orrs	r3, r2
 800d092:	62cb      	str	r3, [r1, #44]	; 0x2c
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	689b      	ldr	r3, [r3, #8]
 800d098:	3b01      	subs	r3, #1
 800d09a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	68db      	ldr	r3, [r3, #12]
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	025b      	lsls	r3, r3, #9
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	431a      	orrs	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	691b      	ldr	r3, [r3, #16]
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	041b      	lsls	r3, r3, #16
 800d0b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d0b6:	431a      	orrs	r2, r3
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	695b      	ldr	r3, [r3, #20]
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	061b      	lsls	r3, r3, #24
 800d0c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d0c4:	4928      	ldr	r1, [pc, #160]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800d0ca:	4b27      	ldr	r3, [pc, #156]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ce:	f023 020c 	bic.w	r2, r3, #12
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	699b      	ldr	r3, [r3, #24]
 800d0d6:	4924      	ldr	r1, [pc, #144]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800d0dc:	4b22      	ldr	r3, [pc, #136]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e0:	f023 0220 	bic.w	r2, r3, #32
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	69db      	ldr	r3, [r3, #28]
 800d0e8:	491f      	ldr	r1, [pc, #124]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800d0ee:	4b1e      	ldr	r3, [pc, #120]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f6:	491c      	ldr	r1, [pc, #112]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d0f8:	4313      	orrs	r3, r2
 800d0fa:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800d0fc:	4b1a      	ldr	r3, [pc, #104]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d100:	4a19      	ldr	r2, [pc, #100]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d102:	f023 0310 	bic.w	r3, r3, #16
 800d106:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800d108:	4b17      	ldr	r3, [pc, #92]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d10c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d110:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	6a12      	ldr	r2, [r2, #32]
 800d118:	00d2      	lsls	r2, r2, #3
 800d11a:	4913      	ldr	r1, [pc, #76]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d11c:	4313      	orrs	r3, r2
 800d11e:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800d120:	4b11      	ldr	r3, [pc, #68]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d124:	4a10      	ldr	r2, [pc, #64]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d126:	f043 0310 	orr.w	r3, r3, #16
 800d12a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800d12c:	4b0e      	ldr	r3, [pc, #56]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a0d      	ldr	r2, [pc, #52]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d132:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d136:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d138:	f7f6 fe66 	bl	8003e08 <HAL_GetTick>
 800d13c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d13e:	e008      	b.n	800d152 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d140:	f7f6 fe62 	bl	8003e08 <HAL_GetTick>
 800d144:	4602      	mov	r2, r0
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	1ad3      	subs	r3, r2, r3
 800d14a:	2b02      	cmp	r3, #2
 800d14c:	d901      	bls.n	800d152 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800d14e:	2303      	movs	r3, #3
 800d150:	e006      	b.n	800d160 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d152:	4b05      	ldr	r3, [pc, #20]	; (800d168 <RCCEx_PLL2_Config+0x12c>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d0f0      	beq.n	800d140 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800d15e:	2300      	movs	r3, #0

}
 800d160:	4618      	mov	r0, r3
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	44020c00 	.word	0x44020c00

0800d16c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800d174:	4b48      	ldr	r3, [pc, #288]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a47      	ldr	r2, [pc, #284]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d17a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d17e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d180:	f7f6 fe42 	bl	8003e08 <HAL_GetTick>
 800d184:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d186:	e008      	b.n	800d19a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d188:	f7f6 fe3e 	bl	8003e08 <HAL_GetTick>
 800d18c:	4602      	mov	r2, r0
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	1ad3      	subs	r3, r2, r3
 800d192:	2b02      	cmp	r3, #2
 800d194:	d901      	bls.n	800d19a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d196:	2303      	movs	r3, #3
 800d198:	e07a      	b.n	800d290 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d19a:	4b3f      	ldr	r3, [pc, #252]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1f0      	bne.n	800d188 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800d1a6:	4b3c      	ldr	r3, [pc, #240]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d1ae:	f023 0303 	bic.w	r3, r3, #3
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	6811      	ldr	r1, [r2, #0]
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	6852      	ldr	r2, [r2, #4]
 800d1ba:	0212      	lsls	r2, r2, #8
 800d1bc:	430a      	orrs	r2, r1
 800d1be:	4936      	ldr	r1, [pc, #216]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	630b      	str	r3, [r1, #48]	; 0x30
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	3b01      	subs	r3, #1
 800d1ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	3b01      	subs	r3, #1
 800d1d4:	025b      	lsls	r3, r3, #9
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	431a      	orrs	r2, r3
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	691b      	ldr	r3, [r3, #16]
 800d1de:	3b01      	subs	r3, #1
 800d1e0:	041b      	lsls	r3, r3, #16
 800d1e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d1e6:	431a      	orrs	r2, r3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	695b      	ldr	r3, [r3, #20]
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	061b      	lsls	r3, r3, #24
 800d1f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d1f4:	4928      	ldr	r1, [pc, #160]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d1fa:	4b27      	ldr	r3, [pc, #156]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1fe:	f023 020c 	bic.w	r2, r3, #12
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	699b      	ldr	r3, [r3, #24]
 800d206:	4924      	ldr	r1, [pc, #144]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d208:	4313      	orrs	r3, r2
 800d20a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800d20c:	4b22      	ldr	r3, [pc, #136]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d210:	f023 0220 	bic.w	r2, r3, #32
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	69db      	ldr	r3, [r3, #28]
 800d218:	491f      	ldr	r1, [pc, #124]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d21a:	4313      	orrs	r3, r2
 800d21c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800d21e:	4b1e      	ldr	r3, [pc, #120]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d226:	491c      	ldr	r1, [pc, #112]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d228:	4313      	orrs	r3, r2
 800d22a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800d22c:	4b1a      	ldr	r3, [pc, #104]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d230:	4a19      	ldr	r2, [pc, #100]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d232:	f023 0310 	bic.w	r3, r3, #16
 800d236:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800d238:	4b17      	ldr	r3, [pc, #92]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d23a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d23c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d240:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	6a12      	ldr	r2, [r2, #32]
 800d248:	00d2      	lsls	r2, r2, #3
 800d24a:	4913      	ldr	r1, [pc, #76]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d24c:	4313      	orrs	r3, r2
 800d24e:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800d250:	4b11      	ldr	r3, [pc, #68]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d254:	4a10      	ldr	r2, [pc, #64]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d256:	f043 0310 	orr.w	r3, r3, #16
 800d25a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800d25c:	4b0e      	ldr	r3, [pc, #56]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a0d      	ldr	r2, [pc, #52]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d266:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d268:	f7f6 fdce 	bl	8003e08 <HAL_GetTick>
 800d26c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d26e:	e008      	b.n	800d282 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d270:	f7f6 fdca 	bl	8003e08 <HAL_GetTick>
 800d274:	4602      	mov	r2, r0
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	1ad3      	subs	r3, r2, r3
 800d27a:	2b02      	cmp	r3, #2
 800d27c:	d901      	bls.n	800d282 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800d27e:	2303      	movs	r3, #3
 800d280:	e006      	b.n	800d290 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d282:	4b05      	ldr	r3, [pc, #20]	; (800d298 <RCCEx_PLL3_Config+0x12c>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d0f0      	beq.n	800d270 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800d28e:	2300      	movs	r3, #0
}
 800d290:	4618      	mov	r0, r3
 800d292:	3710      	adds	r7, #16
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	44020c00 	.word	0x44020c00

0800d29c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b087      	sub	sp, #28
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	60f8      	str	r0, [r7, #12]
 800d2a4:	60b9      	str	r1, [r7, #8]
 800d2a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800d2a8:	4b07      	ldr	r3, [pc, #28]	; (800d2c8 <HAL_RTCEx_BKUPWrite+0x2c>)
 800d2aa:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	697a      	ldr	r2, [r7, #20]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	617b      	str	r3, [r7, #20]

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	601a      	str	r2, [r3, #0]
}
 800d2bc:	bf00      	nop
 800d2be:	371c      	adds	r7, #28
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr
 800d2c8:	44007d00 	.word	0x44007d00

0800d2cc <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b085      	sub	sp, #20
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800d2d6:	4b07      	ldr	r3, [pc, #28]	; (800d2f4 <HAL_RTCEx_BKUPRead+0x28>)
 800d2d8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	68fa      	ldr	r2, [r7, #12]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	60fb      	str	r3, [r7, #12]

  /* Read the data from the specified register */
  return (*(__IO uint32_t *)tmp);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3714      	adds	r7, #20
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr
 800d2f4:	44007d00 	.word	0x44007d00

0800d2f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d101      	bne.n	800d30a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d306:	2301      	movs	r3, #1
 800d308:	e049      	b.n	800d39e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d310:	b2db      	uxtb	r3, r3
 800d312:	2b00      	cmp	r3, #0
 800d314:	d106      	bne.n	800d324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2200      	movs	r2, #0
 800d31a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 f841 	bl	800d3a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2202      	movs	r2, #2
 800d328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	3304      	adds	r3, #4
 800d334:	4619      	mov	r1, r3
 800d336:	4610      	mov	r0, r2
 800d338:	f000 fa60 	bl	800d7fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2201      	movs	r2, #1
 800d340:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2201      	movs	r2, #1
 800d348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2201      	movs	r2, #1
 800d350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2201      	movs	r2, #1
 800d358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2201      	movs	r2, #1
 800d370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2201      	movs	r2, #1
 800d380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2201      	movs	r2, #1
 800d388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2201      	movs	r2, #1
 800d398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d39c:	2300      	movs	r3, #0
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3708      	adds	r7, #8
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d3a6:	b480      	push	{r7}
 800d3a8:	b083      	sub	sp, #12
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d3ae:	bf00      	nop
 800d3b0:	370c      	adds	r7, #12
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr
	...

0800d3bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b085      	sub	sp, #20
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d001      	beq.n	800d3d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e07c      	b.n	800d4ce <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2202      	movs	r2, #2
 800d3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	68da      	ldr	r2, [r3, #12]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f042 0201 	orr.w	r2, r2, #1
 800d3ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a3a      	ldr	r2, [pc, #232]	; (800d4dc <HAL_TIM_Base_Start_IT+0x120>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d04a      	beq.n	800d48c <HAL_TIM_Base_Start_IT+0xd0>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4a39      	ldr	r2, [pc, #228]	; (800d4e0 <HAL_TIM_Base_Start_IT+0x124>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d045      	beq.n	800d48c <HAL_TIM_Base_Start_IT+0xd0>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d408:	d040      	beq.n	800d48c <HAL_TIM_Base_Start_IT+0xd0>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d412:	d03b      	beq.n	800d48c <HAL_TIM_Base_Start_IT+0xd0>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a32      	ldr	r2, [pc, #200]	; (800d4e4 <HAL_TIM_Base_Start_IT+0x128>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d036      	beq.n	800d48c <HAL_TIM_Base_Start_IT+0xd0>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4a31      	ldr	r2, [pc, #196]	; (800d4e8 <HAL_TIM_Base_Start_IT+0x12c>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d031      	beq.n	800d48c <HAL_TIM_Base_Start_IT+0xd0>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a2f      	ldr	r2, [pc, #188]	; (800d4ec <HAL_TIM_Base_Start_IT+0x130>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d02c      	beq.n	800d48c <HAL_TIM_Base_Start_IT+0xd0>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a2e      	ldr	r2, [pc, #184]	; (800d4f0 <HAL_TIM_Base_Start_IT+0x134>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d027      	beq.n	800d48c <HAL_TIM_Base_Start_IT+0xd0>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a2c      	ldr	r2, [pc, #176]	; (800d4f4 <HAL_TIM_Base_Start_IT+0x138>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d022      	beq.n	800d48c <HAL_TIM_Base_Start_IT+0xd0>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4a2b      	ldr	r2, [pc, #172]	; (800d4f8 <HAL_TIM_Base_Start_IT+0x13c>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d01d      	beq.n	800d48c <HAL_TIM_Base_Start_IT+0xd0>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a29      	ldr	r2, [pc, #164]	; (800d4fc <HAL_TIM_Base_Start_IT+0x140>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d018      	beq.n	800d48c <HAL_TIM_Base_Start_IT+0xd0>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4a28      	ldr	r2, [pc, #160]	; (800d500 <HAL_TIM_Base_Start_IT+0x144>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d013      	beq.n	800d48c <HAL_TIM_Base_Start_IT+0xd0>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a26      	ldr	r2, [pc, #152]	; (800d504 <HAL_TIM_Base_Start_IT+0x148>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d00e      	beq.n	800d48c <HAL_TIM_Base_Start_IT+0xd0>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	4a25      	ldr	r2, [pc, #148]	; (800d508 <HAL_TIM_Base_Start_IT+0x14c>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d009      	beq.n	800d48c <HAL_TIM_Base_Start_IT+0xd0>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4a23      	ldr	r2, [pc, #140]	; (800d50c <HAL_TIM_Base_Start_IT+0x150>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d004      	beq.n	800d48c <HAL_TIM_Base_Start_IT+0xd0>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a22      	ldr	r2, [pc, #136]	; (800d510 <HAL_TIM_Base_Start_IT+0x154>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	d115      	bne.n	800d4b8 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	689a      	ldr	r2, [r3, #8]
 800d492:	4b20      	ldr	r3, [pc, #128]	; (800d514 <HAL_TIM_Base_Start_IT+0x158>)
 800d494:	4013      	ands	r3, r2
 800d496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2b06      	cmp	r3, #6
 800d49c:	d015      	beq.n	800d4ca <HAL_TIM_Base_Start_IT+0x10e>
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4a4:	d011      	beq.n	800d4ca <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f042 0201 	orr.w	r2, r2, #1
 800d4b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4b6:	e008      	b.n	800d4ca <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f042 0201 	orr.w	r2, r2, #1
 800d4c6:	601a      	str	r2, [r3, #0]
 800d4c8:	e000      	b.n	800d4cc <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d4cc:	2300      	movs	r3, #0
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3714      	adds	r7, #20
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	40012c00 	.word	0x40012c00
 800d4e0:	50012c00 	.word	0x50012c00
 800d4e4:	40000400 	.word	0x40000400
 800d4e8:	50000400 	.word	0x50000400
 800d4ec:	40000800 	.word	0x40000800
 800d4f0:	50000800 	.word	0x50000800
 800d4f4:	40000c00 	.word	0x40000c00
 800d4f8:	50000c00 	.word	0x50000c00
 800d4fc:	40013400 	.word	0x40013400
 800d500:	50013400 	.word	0x50013400
 800d504:	40001800 	.word	0x40001800
 800d508:	50001800 	.word	0x50001800
 800d50c:	40014000 	.word	0x40014000
 800d510:	50014000 	.word	0x50014000
 800d514:	00010007 	.word	0x00010007

0800d518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	68db      	ldr	r3, [r3, #12]
 800d526:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	691b      	ldr	r3, [r3, #16]
 800d52e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	f003 0302 	and.w	r3, r3, #2
 800d536:	2b00      	cmp	r3, #0
 800d538:	d020      	beq.n	800d57c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f003 0302 	and.w	r3, r3, #2
 800d540:	2b00      	cmp	r3, #0
 800d542:	d01b      	beq.n	800d57c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f06f 0202 	mvn.w	r2, #2
 800d54c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2201      	movs	r2, #1
 800d552:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	699b      	ldr	r3, [r3, #24]
 800d55a:	f003 0303 	and.w	r3, r3, #3
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d003      	beq.n	800d56a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 f92c 	bl	800d7c0 <HAL_TIM_IC_CaptureCallback>
 800d568:	e005      	b.n	800d576 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 f91e 	bl	800d7ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 f92f 	bl	800d7d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2200      	movs	r2, #0
 800d57a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	f003 0304 	and.w	r3, r3, #4
 800d582:	2b00      	cmp	r3, #0
 800d584:	d020      	beq.n	800d5c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f003 0304 	and.w	r3, r3, #4
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d01b      	beq.n	800d5c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f06f 0204 	mvn.w	r2, #4
 800d598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2202      	movs	r2, #2
 800d59e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	699b      	ldr	r3, [r3, #24]
 800d5a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d003      	beq.n	800d5b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 f906 	bl	800d7c0 <HAL_TIM_IC_CaptureCallback>
 800d5b4:	e005      	b.n	800d5c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 f8f8 	bl	800d7ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 f909 	bl	800d7d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	f003 0308 	and.w	r3, r3, #8
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d020      	beq.n	800d614 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f003 0308 	and.w	r3, r3, #8
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d01b      	beq.n	800d614 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f06f 0208 	mvn.w	r2, #8
 800d5e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2204      	movs	r2, #4
 800d5ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	69db      	ldr	r3, [r3, #28]
 800d5f2:	f003 0303 	and.w	r3, r3, #3
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d003      	beq.n	800d602 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 f8e0 	bl	800d7c0 <HAL_TIM_IC_CaptureCallback>
 800d600:	e005      	b.n	800d60e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 f8d2 	bl	800d7ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f8e3 	bl	800d7d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	f003 0310 	and.w	r3, r3, #16
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d020      	beq.n	800d660 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f003 0310 	and.w	r3, r3, #16
 800d624:	2b00      	cmp	r3, #0
 800d626:	d01b      	beq.n	800d660 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f06f 0210 	mvn.w	r2, #16
 800d630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2208      	movs	r2, #8
 800d636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	69db      	ldr	r3, [r3, #28]
 800d63e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d642:	2b00      	cmp	r3, #0
 800d644:	d003      	beq.n	800d64e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 f8ba 	bl	800d7c0 <HAL_TIM_IC_CaptureCallback>
 800d64c:	e005      	b.n	800d65a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 f8ac 	bl	800d7ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f000 f8bd 	bl	800d7d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	f003 0301 	and.w	r3, r3, #1
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00c      	beq.n	800d684 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f003 0301 	and.w	r3, r3, #1
 800d670:	2b00      	cmp	r3, #0
 800d672:	d007      	beq.n	800d684 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f06f 0201 	mvn.w	r2, #1
 800d67c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f7f3 fa9a 	bl	8000bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00c      	beq.n	800d6a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d694:	2b00      	cmp	r3, #0
 800d696:	d007      	beq.n	800d6a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d6a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 f9d2 	bl	800da4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d00c      	beq.n	800d6cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d007      	beq.n	800d6cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d6c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 f9ca 	bl	800da60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00c      	beq.n	800d6f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d007      	beq.n	800d6f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d6e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 f87c 	bl	800d7e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	f003 0320 	and.w	r3, r3, #32
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d00c      	beq.n	800d714 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f003 0320 	and.w	r3, r3, #32
 800d700:	2b00      	cmp	r3, #0
 800d702:	d007      	beq.n	800d714 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f06f 0220 	mvn.w	r2, #32
 800d70c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 f992 	bl	800da38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00c      	beq.n	800d738 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d724:	2b00      	cmp	r3, #0
 800d726:	d007      	beq.n	800d738 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800d730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f000 f99e 	bl	800da74 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00c      	beq.n	800d75c <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d007      	beq.n	800d75c <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800d754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 f996 	bl	800da88 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00c      	beq.n	800d780 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d007      	beq.n	800d780 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800d778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 f98e 	bl	800da9c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00c      	beq.n	800d7a4 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d790:	2b00      	cmp	r3, #0
 800d792:	d007      	beq.n	800d7a4 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800d79c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 f986 	bl	800dab0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d7a4:	bf00      	nop
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d7b4:	bf00      	nop
 800d7b6:	370c      	adds	r7, #12
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d7c8:	bf00      	nop
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d7dc:	bf00      	nop
 800d7de:	370c      	adds	r7, #12
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr

0800d7e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d7f0:	bf00      	nop
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b085      	sub	sp, #20
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	4a74      	ldr	r2, [pc, #464]	; (800d9e0 <TIM_Base_SetConfig+0x1e4>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d02b      	beq.n	800d86c <TIM_Base_SetConfig+0x70>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	4a73      	ldr	r2, [pc, #460]	; (800d9e4 <TIM_Base_SetConfig+0x1e8>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d027      	beq.n	800d86c <TIM_Base_SetConfig+0x70>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d822:	d023      	beq.n	800d86c <TIM_Base_SetConfig+0x70>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d82a:	d01f      	beq.n	800d86c <TIM_Base_SetConfig+0x70>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	4a6e      	ldr	r2, [pc, #440]	; (800d9e8 <TIM_Base_SetConfig+0x1ec>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d01b      	beq.n	800d86c <TIM_Base_SetConfig+0x70>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	4a6d      	ldr	r2, [pc, #436]	; (800d9ec <TIM_Base_SetConfig+0x1f0>)
 800d838:	4293      	cmp	r3, r2
 800d83a:	d017      	beq.n	800d86c <TIM_Base_SetConfig+0x70>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	4a6c      	ldr	r2, [pc, #432]	; (800d9f0 <TIM_Base_SetConfig+0x1f4>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d013      	beq.n	800d86c <TIM_Base_SetConfig+0x70>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	4a6b      	ldr	r2, [pc, #428]	; (800d9f4 <TIM_Base_SetConfig+0x1f8>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d00f      	beq.n	800d86c <TIM_Base_SetConfig+0x70>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	4a6a      	ldr	r2, [pc, #424]	; (800d9f8 <TIM_Base_SetConfig+0x1fc>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d00b      	beq.n	800d86c <TIM_Base_SetConfig+0x70>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4a69      	ldr	r2, [pc, #420]	; (800d9fc <TIM_Base_SetConfig+0x200>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d007      	beq.n	800d86c <TIM_Base_SetConfig+0x70>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	4a68      	ldr	r2, [pc, #416]	; (800da00 <TIM_Base_SetConfig+0x204>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d003      	beq.n	800d86c <TIM_Base_SetConfig+0x70>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4a67      	ldr	r2, [pc, #412]	; (800da04 <TIM_Base_SetConfig+0x208>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d108      	bne.n	800d87e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	68fa      	ldr	r2, [r7, #12]
 800d87a:	4313      	orrs	r3, r2
 800d87c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	4a57      	ldr	r2, [pc, #348]	; (800d9e0 <TIM_Base_SetConfig+0x1e4>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d05b      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	4a56      	ldr	r2, [pc, #344]	; (800d9e4 <TIM_Base_SetConfig+0x1e8>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d057      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d894:	d053      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d89c:	d04f      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	4a51      	ldr	r2, [pc, #324]	; (800d9e8 <TIM_Base_SetConfig+0x1ec>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d04b      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4a50      	ldr	r2, [pc, #320]	; (800d9ec <TIM_Base_SetConfig+0x1f0>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d047      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	4a4f      	ldr	r2, [pc, #316]	; (800d9f0 <TIM_Base_SetConfig+0x1f4>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d043      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	4a4e      	ldr	r2, [pc, #312]	; (800d9f4 <TIM_Base_SetConfig+0x1f8>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d03f      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	4a4d      	ldr	r2, [pc, #308]	; (800d9f8 <TIM_Base_SetConfig+0x1fc>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d03b      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	4a4c      	ldr	r2, [pc, #304]	; (800d9fc <TIM_Base_SetConfig+0x200>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d037      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	4a4b      	ldr	r2, [pc, #300]	; (800da00 <TIM_Base_SetConfig+0x204>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d033      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	4a4a      	ldr	r2, [pc, #296]	; (800da04 <TIM_Base_SetConfig+0x208>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d02f      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	4a49      	ldr	r2, [pc, #292]	; (800da08 <TIM_Base_SetConfig+0x20c>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d02b      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	4a48      	ldr	r2, [pc, #288]	; (800da0c <TIM_Base_SetConfig+0x210>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d027      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	4a47      	ldr	r2, [pc, #284]	; (800da10 <TIM_Base_SetConfig+0x214>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d023      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	4a46      	ldr	r2, [pc, #280]	; (800da14 <TIM_Base_SetConfig+0x218>)
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d01f      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	4a45      	ldr	r2, [pc, #276]	; (800da18 <TIM_Base_SetConfig+0x21c>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d01b      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	4a44      	ldr	r2, [pc, #272]	; (800da1c <TIM_Base_SetConfig+0x220>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d017      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	4a43      	ldr	r2, [pc, #268]	; (800da20 <TIM_Base_SetConfig+0x224>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d013      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	4a42      	ldr	r2, [pc, #264]	; (800da24 <TIM_Base_SetConfig+0x228>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d00f      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4a41      	ldr	r2, [pc, #260]	; (800da28 <TIM_Base_SetConfig+0x22c>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d00b      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4a40      	ldr	r2, [pc, #256]	; (800da2c <TIM_Base_SetConfig+0x230>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d007      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	4a3f      	ldr	r2, [pc, #252]	; (800da30 <TIM_Base_SetConfig+0x234>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d003      	beq.n	800d93e <TIM_Base_SetConfig+0x142>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	4a3e      	ldr	r2, [pc, #248]	; (800da34 <TIM_Base_SetConfig+0x238>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d108      	bne.n	800d950 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	68db      	ldr	r3, [r3, #12]
 800d94a:	68fa      	ldr	r2, [r7, #12]
 800d94c:	4313      	orrs	r3, r2
 800d94e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	695b      	ldr	r3, [r3, #20]
 800d95a:	4313      	orrs	r3, r2
 800d95c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	68fa      	ldr	r2, [r7, #12]
 800d962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	689a      	ldr	r2, [r3, #8]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	4a1a      	ldr	r2, [pc, #104]	; (800d9e0 <TIM_Base_SetConfig+0x1e4>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d023      	beq.n	800d9c4 <TIM_Base_SetConfig+0x1c8>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	4a19      	ldr	r2, [pc, #100]	; (800d9e4 <TIM_Base_SetConfig+0x1e8>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d01f      	beq.n	800d9c4 <TIM_Base_SetConfig+0x1c8>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	4a1e      	ldr	r2, [pc, #120]	; (800da00 <TIM_Base_SetConfig+0x204>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d01b      	beq.n	800d9c4 <TIM_Base_SetConfig+0x1c8>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	4a1d      	ldr	r2, [pc, #116]	; (800da04 <TIM_Base_SetConfig+0x208>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d017      	beq.n	800d9c4 <TIM_Base_SetConfig+0x1c8>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	4a22      	ldr	r2, [pc, #136]	; (800da20 <TIM_Base_SetConfig+0x224>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d013      	beq.n	800d9c4 <TIM_Base_SetConfig+0x1c8>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	4a21      	ldr	r2, [pc, #132]	; (800da24 <TIM_Base_SetConfig+0x228>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d00f      	beq.n	800d9c4 <TIM_Base_SetConfig+0x1c8>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	4a20      	ldr	r2, [pc, #128]	; (800da28 <TIM_Base_SetConfig+0x22c>)
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d00b      	beq.n	800d9c4 <TIM_Base_SetConfig+0x1c8>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	4a1f      	ldr	r2, [pc, #124]	; (800da2c <TIM_Base_SetConfig+0x230>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d007      	beq.n	800d9c4 <TIM_Base_SetConfig+0x1c8>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	4a1e      	ldr	r2, [pc, #120]	; (800da30 <TIM_Base_SetConfig+0x234>)
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d003      	beq.n	800d9c4 <TIM_Base_SetConfig+0x1c8>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	4a1d      	ldr	r2, [pc, #116]	; (800da34 <TIM_Base_SetConfig+0x238>)
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d103      	bne.n	800d9cc <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	691a      	ldr	r2, [r3, #16]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	615a      	str	r2, [r3, #20]
}
 800d9d2:	bf00      	nop
 800d9d4:	3714      	adds	r7, #20
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop
 800d9e0:	40012c00 	.word	0x40012c00
 800d9e4:	50012c00 	.word	0x50012c00
 800d9e8:	40000400 	.word	0x40000400
 800d9ec:	50000400 	.word	0x50000400
 800d9f0:	40000800 	.word	0x40000800
 800d9f4:	50000800 	.word	0x50000800
 800d9f8:	40000c00 	.word	0x40000c00
 800d9fc:	50000c00 	.word	0x50000c00
 800da00:	40013400 	.word	0x40013400
 800da04:	50013400 	.word	0x50013400
 800da08:	40001800 	.word	0x40001800
 800da0c:	50001800 	.word	0x50001800
 800da10:	40001c00 	.word	0x40001c00
 800da14:	50001c00 	.word	0x50001c00
 800da18:	40002000 	.word	0x40002000
 800da1c:	50002000 	.word	0x50002000
 800da20:	40014000 	.word	0x40014000
 800da24:	50014000 	.word	0x50014000
 800da28:	40014400 	.word	0x40014400
 800da2c:	50014400 	.word	0x50014400
 800da30:	40014800 	.word	0x40014800
 800da34:	50014800 	.word	0x50014800

0800da38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800da38:	b480      	push	{r7}
 800da3a:	b083      	sub	sp, #12
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da40:	bf00      	nop
 800da42:	370c      	adds	r7, #12
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr

0800da4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b083      	sub	sp, #12
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da54:	bf00      	nop
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800da60:	b480      	push	{r7}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800da68:	bf00      	nop
 800da6a:	370c      	adds	r7, #12
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800da7c:	bf00      	nop
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800da90:	bf00      	nop
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800daa4:	bf00      	nop
 800daa6:	370c      	adds	r7, #12
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr

0800dab0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b083      	sub	sp, #12
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800dab8:	bf00      	nop
 800daba:	370c      	adds	r7, #12
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr

0800dac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d101      	bne.n	800dad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dad2:	2301      	movs	r3, #1
 800dad4:	e042      	b.n	800db5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d106      	bne.n	800daee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f7f3 f89b 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2224      	movs	r2, #36	; 0x24
 800daf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f022 0201 	bic.w	r2, r2, #1
 800db04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d002      	beq.n	800db14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 fe0a 	bl	800e728 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 fc19 	bl	800e34c <UART_SetConfig>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d101      	bne.n	800db24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800db20:	2301      	movs	r3, #1
 800db22:	e01b      	b.n	800db5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	685a      	ldr	r2, [r3, #4]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	689a      	ldr	r2, [r3, #8]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800db42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f042 0201 	orr.w	r2, r2, #1
 800db52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f000 fe89 	bl	800e86c <UART_CheckIdleState>
 800db5a:	4603      	mov	r3, r0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b08a      	sub	sp, #40	; 0x28
 800db68:	af02      	add	r7, sp, #8
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	603b      	str	r3, [r7, #0]
 800db70:	4613      	mov	r3, r2
 800db72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db7a:	2b20      	cmp	r3, #32
 800db7c:	f040 808b 	bne.w	800dc96 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d002      	beq.n	800db8c <HAL_UART_Transmit+0x28>
 800db86:	88fb      	ldrh	r3, [r7, #6]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d101      	bne.n	800db90 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800db8c:	2301      	movs	r3, #1
 800db8e:	e083      	b.n	800dc98 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db9a:	2b80      	cmp	r3, #128	; 0x80
 800db9c:	d107      	bne.n	800dbae <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	689a      	ldr	r2, [r3, #8]
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dbac:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2221      	movs	r2, #33	; 0x21
 800dbba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dbbe:	f7f6 f923 	bl	8003e08 <HAL_GetTick>
 800dbc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	88fa      	ldrh	r2, [r7, #6]
 800dbc8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	88fa      	ldrh	r2, [r7, #6]
 800dbd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbdc:	d108      	bne.n	800dbf0 <HAL_UART_Transmit+0x8c>
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	691b      	ldr	r3, [r3, #16]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d104      	bne.n	800dbf0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	61bb      	str	r3, [r7, #24]
 800dbee:	e003      	b.n	800dbf8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dbf8:	e030      	b.n	800dc5c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	9300      	str	r3, [sp, #0]
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	2200      	movs	r2, #0
 800dc02:	2180      	movs	r1, #128	; 0x80
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f000 fedb 	bl	800e9c0 <UART_WaitOnFlagUntilTimeout>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d005      	beq.n	800dc1c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2220      	movs	r2, #32
 800dc14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800dc18:	2303      	movs	r3, #3
 800dc1a:	e03d      	b.n	800dc98 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d10b      	bne.n	800dc3a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	881b      	ldrh	r3, [r3, #0]
 800dc26:	461a      	mov	r2, r3
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	3302      	adds	r3, #2
 800dc36:	61bb      	str	r3, [r7, #24]
 800dc38:	e007      	b.n	800dc4a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	781a      	ldrb	r2, [r3, #0]
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	3301      	adds	r3, #1
 800dc48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	3b01      	subs	r3, #1
 800dc54:	b29a      	uxth	r2, r3
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d1c8      	bne.n	800dbfa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	9300      	str	r3, [sp, #0]
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	2140      	movs	r1, #64	; 0x40
 800dc72:	68f8      	ldr	r0, [r7, #12]
 800dc74:	f000 fea4 	bl	800e9c0 <UART_WaitOnFlagUntilTimeout>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d005      	beq.n	800dc8a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2220      	movs	r2, #32
 800dc82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800dc86:	2303      	movs	r3, #3
 800dc88:	e006      	b.n	800dc98 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2220      	movs	r2, #32
 800dc8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800dc92:	2300      	movs	r3, #0
 800dc94:	e000      	b.n	800dc98 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800dc96:	2302      	movs	r3, #2
  }
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3720      	adds	r7, #32
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b08a      	sub	sp, #40	; 0x28
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60f8      	str	r0, [r7, #12]
 800dca8:	60b9      	str	r1, [r7, #8]
 800dcaa:	4613      	mov	r3, r2
 800dcac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dcb4:	2b20      	cmp	r3, #32
 800dcb6:	d14b      	bne.n	800dd50 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d002      	beq.n	800dcc4 <HAL_UART_Receive_IT+0x24>
 800dcbe:	88fb      	ldrh	r3, [r7, #6]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d101      	bne.n	800dcc8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	e044      	b.n	800dd52 <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2200      	movs	r2, #0
 800dccc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	689b      	ldr	r3, [r3, #8]
 800dcd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcd8:	2b40      	cmp	r3, #64	; 0x40
 800dcda:	d107      	bne.n	800dcec <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	689a      	ldr	r2, [r3, #8]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dcea:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a1a      	ldr	r2, [pc, #104]	; (800dd5c <HAL_UART_Receive_IT+0xbc>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d024      	beq.n	800dd40 <HAL_UART_Receive_IT+0xa0>
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4a19      	ldr	r2, [pc, #100]	; (800dd60 <HAL_UART_Receive_IT+0xc0>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d01f      	beq.n	800dd40 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d018      	beq.n	800dd40 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	e853 3f00 	ldrex	r3, [r3]
 800dd1a:	613b      	str	r3, [r7, #16]
   return(result);
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dd22:	627b      	str	r3, [r7, #36]	; 0x24
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	461a      	mov	r2, r3
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd2c:	623b      	str	r3, [r7, #32]
 800dd2e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd30:	69f9      	ldr	r1, [r7, #28]
 800dd32:	6a3a      	ldr	r2, [r7, #32]
 800dd34:	e841 2300 	strex	r3, r2, [r1]
 800dd38:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd3a:	69bb      	ldr	r3, [r7, #24]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d1e6      	bne.n	800dd0e <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dd40:	88fb      	ldrh	r3, [r7, #6]
 800dd42:	461a      	mov	r2, r3
 800dd44:	68b9      	ldr	r1, [r7, #8]
 800dd46:	68f8      	ldr	r0, [r7, #12]
 800dd48:	f000 fea2 	bl	800ea90 <UART_Start_Receive_IT>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	e000      	b.n	800dd52 <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800dd50:	2302      	movs	r3, #2
  }
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3728      	adds	r7, #40	; 0x28
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	44002400 	.word	0x44002400
 800dd60:	54002400 	.word	0x54002400

0800dd64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b0ae      	sub	sp, #184	; 0xb8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	69db      	ldr	r3, [r3, #28]
 800dd72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dd8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dd8e:	f640 030f 	movw	r3, #2063	; 0x80f
 800dd92:	4013      	ands	r3, r2
 800dd94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 800dd98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d11b      	bne.n	800ddd8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dda0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dda4:	f003 0320 	and.w	r3, r3, #32
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d015      	beq.n	800ddd8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ddac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ddb0:	f003 0320 	and.w	r3, r3, #32
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d105      	bne.n	800ddc4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ddb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ddbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d009      	beq.n	800ddd8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f000 8293 	beq.w	800e2f4 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	4798      	blx	r3
      }
      return;
 800ddd6:	e28d      	b.n	800e2f4 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ddd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	f000 80fd 	beq.w	800dfdc <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dde2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800dde6:	4b7a      	ldr	r3, [pc, #488]	; (800dfd0 <HAL_UART_IRQHandler+0x26c>)
 800dde8:	4013      	ands	r3, r2
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d106      	bne.n	800ddfc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ddee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ddf2:	4b78      	ldr	r3, [pc, #480]	; (800dfd4 <HAL_UART_IRQHandler+0x270>)
 800ddf4:	4013      	ands	r3, r2
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	f000 80f0 	beq.w	800dfdc <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ddfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de00:	f003 0301 	and.w	r3, r3, #1
 800de04:	2b00      	cmp	r3, #0
 800de06:	d011      	beq.n	800de2c <HAL_UART_IRQHandler+0xc8>
 800de08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800de0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de10:	2b00      	cmp	r3, #0
 800de12:	d00b      	beq.n	800de2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2201      	movs	r2, #1
 800de1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de22:	f043 0201 	orr.w	r2, r3, #1
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de30:	f003 0302 	and.w	r3, r3, #2
 800de34:	2b00      	cmp	r3, #0
 800de36:	d011      	beq.n	800de5c <HAL_UART_IRQHandler+0xf8>
 800de38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800de3c:	f003 0301 	and.w	r3, r3, #1
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00b      	beq.n	800de5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2202      	movs	r2, #2
 800de4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de52:	f043 0204 	orr.w	r2, r3, #4
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de60:	f003 0304 	and.w	r3, r3, #4
 800de64:	2b00      	cmp	r3, #0
 800de66:	d011      	beq.n	800de8c <HAL_UART_IRQHandler+0x128>
 800de68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800de6c:	f003 0301 	and.w	r3, r3, #1
 800de70:	2b00      	cmp	r3, #0
 800de72:	d00b      	beq.n	800de8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2204      	movs	r2, #4
 800de7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de82:	f043 0202 	orr.w	r2, r3, #2
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800de8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de90:	f003 0308 	and.w	r3, r3, #8
 800de94:	2b00      	cmp	r3, #0
 800de96:	d017      	beq.n	800dec8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800de98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800de9c:	f003 0320 	and.w	r3, r3, #32
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d105      	bne.n	800deb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dea4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800dea8:	4b49      	ldr	r3, [pc, #292]	; (800dfd0 <HAL_UART_IRQHandler+0x26c>)
 800deaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00b      	beq.n	800dec8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2208      	movs	r2, #8
 800deb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800debe:	f043 0208 	orr.w	r2, r3, #8
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dec8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800decc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d012      	beq.n	800defa <HAL_UART_IRQHandler+0x196>
 800ded4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ded8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d00c      	beq.n	800defa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dee8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800def0:	f043 0220 	orr.w	r2, r3, #32
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df00:	2b00      	cmp	r3, #0
 800df02:	f000 81f9 	beq.w	800e2f8 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800df06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800df0a:	f003 0320 	and.w	r3, r3, #32
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d013      	beq.n	800df3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800df12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800df16:	f003 0320 	and.w	r3, r3, #32
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d105      	bne.n	800df2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800df1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800df22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df26:	2b00      	cmp	r3, #0
 800df28:	d007      	beq.n	800df3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d003      	beq.n	800df3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	689b      	ldr	r3, [r3, #8]
 800df4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df4e:	2b40      	cmp	r3, #64	; 0x40
 800df50:	d005      	beq.n	800df5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800df52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800df56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d02e      	beq.n	800dfbc <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f000 feb8 	bl	800ecd4 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df6e:	2b40      	cmp	r3, #64	; 0x40
 800df70:	d120      	bne.n	800dfb4 <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d017      	beq.n	800dfac <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df82:	4a15      	ldr	r2, [pc, #84]	; (800dfd8 <HAL_UART_IRQHandler+0x274>)
 800df84:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7f6 f8dd 	bl	800414c <HAL_DMA_Abort_IT>
 800df92:	4603      	mov	r3, r0
 800df94:	2b00      	cmp	r3, #0
 800df96:	d019      	beq.n	800dfcc <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800dfa6:	4610      	mov	r0, r2
 800dfa8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfaa:	e00f      	b.n	800dfcc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 f9b7 	bl	800e320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfb2:	e00b      	b.n	800dfcc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 f9b3 	bl	800e320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfba:	e007      	b.n	800dfcc <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f000 f9af 	bl	800e320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800dfca:	e195      	b.n	800e2f8 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfcc:	bf00      	nop
    return;
 800dfce:	e193      	b.n	800e2f8 <HAL_UART_IRQHandler+0x594>
 800dfd0:	10000001 	.word	0x10000001
 800dfd4:	04000120 	.word	0x04000120
 800dfd8:	0800eda1 	.word	0x0800eda1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	f040 8129 	bne.w	800e238 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dfe6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dfea:	f003 0310 	and.w	r3, r3, #16
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	f000 8122 	beq.w	800e238 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dff4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dff8:	f003 0310 	and.w	r3, r3, #16
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	f000 811b 	beq.w	800e238 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2210      	movs	r2, #16
 800e008:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	689b      	ldr	r3, [r3, #8]
 800e010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e014:	2b40      	cmp	r3, #64	; 0x40
 800e016:	f040 8091 	bne.w	800e13c <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e024:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800e028:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	f000 8165 	beq.w	800e2fc <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e038:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800e03c:	429a      	cmp	r2, r3
 800e03e:	f080 815d 	bcs.w	800e2fc <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800e048:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e054:	2b81      	cmp	r3, #129	; 0x81
 800e056:	d060      	beq.n	800e11a <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e05e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e060:	e853 3f00 	ldrex	r3, [r3]
 800e064:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e06c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	461a      	mov	r2, r3
 800e076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e07a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e07e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e080:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e082:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e086:	e841 2300 	strex	r3, r2, [r1]
 800e08a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e08c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d1e2      	bne.n	800e058 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	3308      	adds	r3, #8
 800e098:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e09a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e09c:	e853 3f00 	ldrex	r3, [r3]
 800e0a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e0a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0a4:	f023 0301 	bic.w	r3, r3, #1
 800e0a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	3308      	adds	r3, #8
 800e0b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e0b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e0b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e0bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e0be:	e841 2300 	strex	r3, r2, [r1]
 800e0c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e0c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d1e3      	bne.n	800e092 <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2220      	movs	r2, #32
 800e0ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0e0:	e853 3f00 	ldrex	r3, [r3]
 800e0e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e0e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0e8:	f023 0310 	bic.w	r3, r3, #16
 800e0ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e0fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800e0fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e100:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e102:	e841 2300 	strex	r3, r2, [r1]
 800e106:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d1e4      	bne.n	800e0d8 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e114:	4618      	mov	r0, r3
 800e116:	f7f5 ff9d 	bl	8004054 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2202      	movs	r2, #2
 800e11e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	1ad3      	subs	r3, r2, r3
 800e130:	b29b      	uxth	r3, r3
 800e132:	4619      	mov	r1, r3
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f000 f8fd 	bl	800e334 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e13a:	e0df      	b.n	800e2fc <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e148:	b29b      	uxth	r3, r3
 800e14a:	1ad3      	subs	r3, r2, r3
 800e14c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e156:	b29b      	uxth	r3, r3
 800e158:	2b00      	cmp	r3, #0
 800e15a:	f000 80d1 	beq.w	800e300 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800e15e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800e162:	2b00      	cmp	r3, #0
 800e164:	f000 80cc 	beq.w	800e300 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e170:	e853 3f00 	ldrex	r3, [r3]
 800e174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e178:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e17c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	461a      	mov	r2, r3
 800e186:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e18a:	647b      	str	r3, [r7, #68]	; 0x44
 800e18c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e18e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e192:	e841 2300 	strex	r3, r2, [r1]
 800e196:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d1e4      	bne.n	800e168 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	3308      	adds	r3, #8
 800e1a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a8:	e853 3f00 	ldrex	r3, [r3]
 800e1ac:	623b      	str	r3, [r7, #32]
   return(result);
 800e1ae:	6a3b      	ldr	r3, [r7, #32]
 800e1b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e1b4:	f023 0301 	bic.w	r3, r3, #1
 800e1b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	3308      	adds	r3, #8
 800e1c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e1c6:	633a      	str	r2, [r7, #48]	; 0x30
 800e1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1ce:	e841 2300 	strex	r3, r2, [r1]
 800e1d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d1e1      	bne.n	800e19e <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2220      	movs	r2, #32
 800e1de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	e853 3f00 	ldrex	r3, [r3]
 800e1fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f023 0310 	bic.w	r3, r3, #16
 800e202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	461a      	mov	r2, r3
 800e20c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e210:	61fb      	str	r3, [r7, #28]
 800e212:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e214:	69b9      	ldr	r1, [r7, #24]
 800e216:	69fa      	ldr	r2, [r7, #28]
 800e218:	e841 2300 	strex	r3, r2, [r1]
 800e21c:	617b      	str	r3, [r7, #20]
   return(result);
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d1e4      	bne.n	800e1ee <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2202      	movs	r2, #2
 800e228:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e22a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800e22e:	4619      	mov	r1, r3
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 f87f 	bl	800e334 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e236:	e063      	b.n	800e300 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e238:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e23c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e240:	2b00      	cmp	r3, #0
 800e242:	d00e      	beq.n	800e262 <HAL_UART_IRQHandler+0x4fe>
 800e244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d008      	beq.n	800e262 <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e258:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f001 fb1a 	bl	800f894 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e260:	e051      	b.n	800e306 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d014      	beq.n	800e298 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e26e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e276:	2b00      	cmp	r3, #0
 800e278:	d105      	bne.n	800e286 <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e27a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e27e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e282:	2b00      	cmp	r3, #0
 800e284:	d008      	beq.n	800e298 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d03a      	beq.n	800e304 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	4798      	blx	r3
    }
    return;
 800e296:	e035      	b.n	800e304 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e298:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e29c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d009      	beq.n	800e2b8 <HAL_UART_IRQHandler+0x554>
 800e2a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e2a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d003      	beq.n	800e2b8 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f000 fd8b 	bl	800edcc <UART_EndTransmit_IT>
    return;
 800e2b6:	e026      	b.n	800e306 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e2b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e2bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d009      	beq.n	800e2d8 <HAL_UART_IRQHandler+0x574>
 800e2c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e2c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d003      	beq.n	800e2d8 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f001 faf3 	bl	800f8bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e2d6:	e016      	b.n	800e306 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e2d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e2dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d010      	beq.n	800e306 <HAL_UART_IRQHandler+0x5a2>
 800e2e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	da0c      	bge.n	800e306 <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f001 fadb 	bl	800f8a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e2f2:	e008      	b.n	800e306 <HAL_UART_IRQHandler+0x5a2>
      return;
 800e2f4:	bf00      	nop
 800e2f6:	e006      	b.n	800e306 <HAL_UART_IRQHandler+0x5a2>
    return;
 800e2f8:	bf00      	nop
 800e2fa:	e004      	b.n	800e306 <HAL_UART_IRQHandler+0x5a2>
      return;
 800e2fc:	bf00      	nop
 800e2fe:	e002      	b.n	800e306 <HAL_UART_IRQHandler+0x5a2>
      return;
 800e300:	bf00      	nop
 800e302:	e000      	b.n	800e306 <HAL_UART_IRQHandler+0x5a2>
    return;
 800e304:	bf00      	nop
  }
}
 800e306:	37b8      	adds	r7, #184	; 0xb8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e314:	bf00      	nop
 800e316:	370c      	adds	r7, #12
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr

0800e320 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e320:	b480      	push	{r7}
 800e322:	b083      	sub	sp, #12
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e328:	bf00      	nop
 800e32a:	370c      	adds	r7, #12
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr

0800e334 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	460b      	mov	r3, r1
 800e33e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e340:	bf00      	nop
 800e342:	370c      	adds	r7, #12
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e34c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e350:	b094      	sub	sp, #80	; 0x50
 800e352:	af00      	add	r7, sp, #0
 800e354:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e356:	2300      	movs	r3, #0
 800e358:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800e35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	4b78      	ldr	r3, [pc, #480]	; (800e544 <UART_SetConfig+0x1f8>)
 800e362:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e366:	689a      	ldr	r2, [r3, #8]
 800e368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36a:	691b      	ldr	r3, [r3, #16]
 800e36c:	431a      	orrs	r2, r3
 800e36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e370:	695b      	ldr	r3, [r3, #20]
 800e372:	431a      	orrs	r2, r3
 800e374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e376:	69db      	ldr	r3, [r3, #28]
 800e378:	4313      	orrs	r3, r2
 800e37a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4971      	ldr	r1, [pc, #452]	; (800e548 <UART_SetConfig+0x1fc>)
 800e384:	4019      	ands	r1, r3
 800e386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e38c:	430b      	orrs	r3, r1
 800e38e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39c:	68d9      	ldr	r1, [r3, #12]
 800e39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	ea40 0301 	orr.w	r3, r0, r1
 800e3a6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3aa:	699b      	ldr	r3, [r3, #24]
 800e3ac:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b0:	681a      	ldr	r2, [r3, #0]
 800e3b2:	4b64      	ldr	r3, [pc, #400]	; (800e544 <UART_SetConfig+0x1f8>)
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d009      	beq.n	800e3cc <UART_SetConfig+0x80>
 800e3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	4b63      	ldr	r3, [pc, #396]	; (800e54c <UART_SetConfig+0x200>)
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d004      	beq.n	800e3cc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c4:	6a1a      	ldr	r2, [r3, #32]
 800e3c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3c8:	4313      	orrs	r3, r2
 800e3ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	689b      	ldr	r3, [r3, #8]
 800e3d2:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800e3d6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800e3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3e0:	430b      	orrs	r3, r1
 800e3e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ea:	f023 000f 	bic.w	r0, r3, #15
 800e3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	ea40 0301 	orr.w	r3, r0, r1
 800e3fa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	4b53      	ldr	r3, [pc, #332]	; (800e550 <UART_SetConfig+0x204>)
 800e402:	429a      	cmp	r2, r3
 800e404:	d102      	bne.n	800e40c <UART_SetConfig+0xc0>
 800e406:	2301      	movs	r3, #1
 800e408:	64bb      	str	r3, [r7, #72]	; 0x48
 800e40a:	e066      	b.n	800e4da <UART_SetConfig+0x18e>
 800e40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	4b50      	ldr	r3, [pc, #320]	; (800e554 <UART_SetConfig+0x208>)
 800e412:	429a      	cmp	r2, r3
 800e414:	d102      	bne.n	800e41c <UART_SetConfig+0xd0>
 800e416:	2302      	movs	r3, #2
 800e418:	64bb      	str	r3, [r7, #72]	; 0x48
 800e41a:	e05e      	b.n	800e4da <UART_SetConfig+0x18e>
 800e41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41e:	681a      	ldr	r2, [r3, #0]
 800e420:	4b4d      	ldr	r3, [pc, #308]	; (800e558 <UART_SetConfig+0x20c>)
 800e422:	429a      	cmp	r2, r3
 800e424:	d102      	bne.n	800e42c <UART_SetConfig+0xe0>
 800e426:	2304      	movs	r3, #4
 800e428:	64bb      	str	r3, [r7, #72]	; 0x48
 800e42a:	e056      	b.n	800e4da <UART_SetConfig+0x18e>
 800e42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42e:	681a      	ldr	r2, [r3, #0]
 800e430:	4b4a      	ldr	r3, [pc, #296]	; (800e55c <UART_SetConfig+0x210>)
 800e432:	429a      	cmp	r2, r3
 800e434:	d102      	bne.n	800e43c <UART_SetConfig+0xf0>
 800e436:	2308      	movs	r3, #8
 800e438:	64bb      	str	r3, [r7, #72]	; 0x48
 800e43a:	e04e      	b.n	800e4da <UART_SetConfig+0x18e>
 800e43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	4b47      	ldr	r3, [pc, #284]	; (800e560 <UART_SetConfig+0x214>)
 800e442:	429a      	cmp	r2, r3
 800e444:	d102      	bne.n	800e44c <UART_SetConfig+0x100>
 800e446:	2310      	movs	r3, #16
 800e448:	64bb      	str	r3, [r7, #72]	; 0x48
 800e44a:	e046      	b.n	800e4da <UART_SetConfig+0x18e>
 800e44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	4b44      	ldr	r3, [pc, #272]	; (800e564 <UART_SetConfig+0x218>)
 800e452:	429a      	cmp	r2, r3
 800e454:	d102      	bne.n	800e45c <UART_SetConfig+0x110>
 800e456:	2320      	movs	r3, #32
 800e458:	64bb      	str	r3, [r7, #72]	; 0x48
 800e45a:	e03e      	b.n	800e4da <UART_SetConfig+0x18e>
 800e45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45e:	681a      	ldr	r2, [r3, #0]
 800e460:	4b41      	ldr	r3, [pc, #260]	; (800e568 <UART_SetConfig+0x21c>)
 800e462:	429a      	cmp	r2, r3
 800e464:	d102      	bne.n	800e46c <UART_SetConfig+0x120>
 800e466:	2340      	movs	r3, #64	; 0x40
 800e468:	64bb      	str	r3, [r7, #72]	; 0x48
 800e46a:	e036      	b.n	800e4da <UART_SetConfig+0x18e>
 800e46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	4b3e      	ldr	r3, [pc, #248]	; (800e56c <UART_SetConfig+0x220>)
 800e472:	429a      	cmp	r2, r3
 800e474:	d102      	bne.n	800e47c <UART_SetConfig+0x130>
 800e476:	2380      	movs	r3, #128	; 0x80
 800e478:	64bb      	str	r3, [r7, #72]	; 0x48
 800e47a:	e02e      	b.n	800e4da <UART_SetConfig+0x18e>
 800e47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47e:	681a      	ldr	r2, [r3, #0]
 800e480:	4b3b      	ldr	r3, [pc, #236]	; (800e570 <UART_SetConfig+0x224>)
 800e482:	429a      	cmp	r2, r3
 800e484:	d103      	bne.n	800e48e <UART_SetConfig+0x142>
 800e486:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e48a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e48c:	e025      	b.n	800e4da <UART_SetConfig+0x18e>
 800e48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	4b38      	ldr	r3, [pc, #224]	; (800e574 <UART_SetConfig+0x228>)
 800e494:	429a      	cmp	r2, r3
 800e496:	d103      	bne.n	800e4a0 <UART_SetConfig+0x154>
 800e498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e49c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e49e:	e01c      	b.n	800e4da <UART_SetConfig+0x18e>
 800e4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	4b34      	ldr	r3, [pc, #208]	; (800e578 <UART_SetConfig+0x22c>)
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d103      	bne.n	800e4b2 <UART_SetConfig+0x166>
 800e4aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4b0:	e013      	b.n	800e4da <UART_SetConfig+0x18e>
 800e4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	4b31      	ldr	r3, [pc, #196]	; (800e57c <UART_SetConfig+0x230>)
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d103      	bne.n	800e4c4 <UART_SetConfig+0x178>
 800e4bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4c2:	e00a      	b.n	800e4da <UART_SetConfig+0x18e>
 800e4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	4b1e      	ldr	r3, [pc, #120]	; (800e544 <UART_SetConfig+0x1f8>)
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d103      	bne.n	800e4d6 <UART_SetConfig+0x18a>
 800e4ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4d4:	e001      	b.n	800e4da <UART_SetConfig+0x18e>
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4dc:	681a      	ldr	r2, [r3, #0]
 800e4de:	4b19      	ldr	r3, [pc, #100]	; (800e544 <UART_SetConfig+0x1f8>)
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d005      	beq.n	800e4f0 <UART_SetConfig+0x1a4>
 800e4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e6:	681a      	ldr	r2, [r3, #0]
 800e4e8:	4b18      	ldr	r3, [pc, #96]	; (800e54c <UART_SetConfig+0x200>)
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	f040 8094 	bne.w	800e618 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e4f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	623b      	str	r3, [r7, #32]
 800e4f6:	627a      	str	r2, [r7, #36]	; 0x24
 800e4f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e4fc:	f7fc fa44 	bl	800a988 <HAL_RCCEx_GetPeriphCLKFreq>
 800e500:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800e502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e504:	2b00      	cmp	r3, #0
 800e506:	f000 80f7 	beq.w	800e6f8 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e50e:	4a1c      	ldr	r2, [pc, #112]	; (800e580 <UART_SetConfig+0x234>)
 800e510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e514:	461a      	mov	r2, r3
 800e516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e518:	fbb3 f3f2 	udiv	r3, r3, r2
 800e51c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e520:	685a      	ldr	r2, [r3, #4]
 800e522:	4613      	mov	r3, r2
 800e524:	005b      	lsls	r3, r3, #1
 800e526:	4413      	add	r3, r2
 800e528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d305      	bcc.n	800e53a <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e536:	429a      	cmp	r2, r3
 800e538:	d924      	bls.n	800e584 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800e53a:	2301      	movs	r3, #1
 800e53c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e540:	e069      	b.n	800e616 <UART_SetConfig+0x2ca>
 800e542:	bf00      	nop
 800e544:	44002400 	.word	0x44002400
 800e548:	cfff69f3 	.word	0xcfff69f3
 800e54c:	54002400 	.word	0x54002400
 800e550:	40013800 	.word	0x40013800
 800e554:	40004400 	.word	0x40004400
 800e558:	40004800 	.word	0x40004800
 800e55c:	40004c00 	.word	0x40004c00
 800e560:	40005000 	.word	0x40005000
 800e564:	40006400 	.word	0x40006400
 800e568:	40007800 	.word	0x40007800
 800e56c:	40007c00 	.word	0x40007c00
 800e570:	40008000 	.word	0x40008000
 800e574:	40006800 	.word	0x40006800
 800e578:	40006c00 	.word	0x40006c00
 800e57c:	40008400 	.word	0x40008400
 800e580:	08026f88 	.word	0x08026f88
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e586:	2200      	movs	r2, #0
 800e588:	61bb      	str	r3, [r7, #24]
 800e58a:	61fa      	str	r2, [r7, #28]
 800e58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e590:	4a64      	ldr	r2, [pc, #400]	; (800e724 <UART_SetConfig+0x3d8>)
 800e592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e596:	b29b      	uxth	r3, r3
 800e598:	2200      	movs	r2, #0
 800e59a:	613b      	str	r3, [r7, #16]
 800e59c:	617a      	str	r2, [r7, #20]
 800e59e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e5a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e5a6:	f7f1 fe85 	bl	80002b4 <__aeabi_uldivmod>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	f04f 0200 	mov.w	r2, #0
 800e5b6:	f04f 0300 	mov.w	r3, #0
 800e5ba:	020b      	lsls	r3, r1, #8
 800e5bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e5c0:	0202      	lsls	r2, r0, #8
 800e5c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5c4:	6849      	ldr	r1, [r1, #4]
 800e5c6:	0849      	lsrs	r1, r1, #1
 800e5c8:	2000      	movs	r0, #0
 800e5ca:	460c      	mov	r4, r1
 800e5cc:	4605      	mov	r5, r0
 800e5ce:	eb12 0804 	adds.w	r8, r2, r4
 800e5d2:	eb43 0905 	adc.w	r9, r3, r5
 800e5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	60bb      	str	r3, [r7, #8]
 800e5de:	60fa      	str	r2, [r7, #12]
 800e5e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e5e4:	4640      	mov	r0, r8
 800e5e6:	4649      	mov	r1, r9
 800e5e8:	f7f1 fe64 	bl	80002b4 <__aeabi_uldivmod>
 800e5ec:	4602      	mov	r2, r0
 800e5ee:	460b      	mov	r3, r1
 800e5f0:	4613      	mov	r3, r2
 800e5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e5fa:	d308      	bcc.n	800e60e <UART_SetConfig+0x2c2>
 800e5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e602:	d204      	bcs.n	800e60e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800e604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e60a:	60da      	str	r2, [r3, #12]
 800e60c:	e003      	b.n	800e616 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800e60e:	2301      	movs	r3, #1
 800e610:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800e614:	e070      	b.n	800e6f8 <UART_SetConfig+0x3ac>
 800e616:	e06f      	b.n	800e6f8 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e61a:	69db      	ldr	r3, [r3, #28]
 800e61c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e620:	d13c      	bne.n	800e69c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e624:	2200      	movs	r2, #0
 800e626:	603b      	str	r3, [r7, #0]
 800e628:	607a      	str	r2, [r7, #4]
 800e62a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e62e:	f7fc f9ab 	bl	800a988 <HAL_RCCEx_GetPeriphCLKFreq>
 800e632:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e636:	2b00      	cmp	r3, #0
 800e638:	d05e      	beq.n	800e6f8 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e63e:	4a39      	ldr	r2, [pc, #228]	; (800e724 <UART_SetConfig+0x3d8>)
 800e640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e644:	461a      	mov	r2, r3
 800e646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e648:	fbb3 f3f2 	udiv	r3, r3, r2
 800e64c:	005a      	lsls	r2, r3, #1
 800e64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	085b      	lsrs	r3, r3, #1
 800e654:	441a      	add	r2, r3
 800e656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e65e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e662:	2b0f      	cmp	r3, #15
 800e664:	d916      	bls.n	800e694 <UART_SetConfig+0x348>
 800e666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e66c:	d212      	bcs.n	800e694 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e670:	b29b      	uxth	r3, r3
 800e672:	f023 030f 	bic.w	r3, r3, #15
 800e676:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e67a:	085b      	lsrs	r3, r3, #1
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	f003 0307 	and.w	r3, r3, #7
 800e682:	b29a      	uxth	r2, r3
 800e684:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e686:	4313      	orrs	r3, r2
 800e688:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800e68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e690:	60da      	str	r2, [r3, #12]
 800e692:	e031      	b.n	800e6f8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800e694:	2301      	movs	r3, #1
 800e696:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e69a:	e02d      	b.n	800e6f8 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e69c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e69e:	2200      	movs	r2, #0
 800e6a0:	469a      	mov	sl, r3
 800e6a2:	4693      	mov	fp, r2
 800e6a4:	4650      	mov	r0, sl
 800e6a6:	4659      	mov	r1, fp
 800e6a8:	f7fc f96e 	bl	800a988 <HAL_RCCEx_GetPeriphCLKFreq>
 800e6ac:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800e6ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d021      	beq.n	800e6f8 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b8:	4a1a      	ldr	r2, [pc, #104]	; (800e724 <UART_SetConfig+0x3d8>)
 800e6ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6be:	461a      	mov	r2, r3
 800e6c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6c2:	fbb3 f2f2 	udiv	r2, r3, r2
 800e6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c8:	685b      	ldr	r3, [r3, #4]
 800e6ca:	085b      	lsrs	r3, r3, #1
 800e6cc:	441a      	add	r2, r3
 800e6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6da:	2b0f      	cmp	r3, #15
 800e6dc:	d909      	bls.n	800e6f2 <UART_SetConfig+0x3a6>
 800e6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6e4:	d205      	bcs.n	800e6f2 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e6e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6e8:	b29a      	uxth	r2, r3
 800e6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	60da      	str	r2, [r3, #12]
 800e6f0:	e002      	b.n	800e6f8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e702:	2201      	movs	r2, #1
 800e704:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70a:	2200      	movs	r2, #0
 800e70c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e710:	2200      	movs	r2, #0
 800e712:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e714:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3750      	adds	r7, #80	; 0x50
 800e71c:	46bd      	mov	sp, r7
 800e71e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e722:	bf00      	nop
 800e724:	08026f88 	.word	0x08026f88

0800e728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e728:	b480      	push	{r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e734:	f003 0308 	and.w	r3, r3, #8
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d00a      	beq.n	800e752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	430a      	orrs	r2, r1
 800e750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e756:	f003 0301 	and.w	r3, r3, #1
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d00a      	beq.n	800e774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	430a      	orrs	r2, r1
 800e772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e778:	f003 0302 	and.w	r3, r3, #2
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d00a      	beq.n	800e796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	685b      	ldr	r3, [r3, #4]
 800e786:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	430a      	orrs	r2, r1
 800e794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e79a:	f003 0304 	and.w	r3, r3, #4
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d00a      	beq.n	800e7b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	430a      	orrs	r2, r1
 800e7b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7bc:	f003 0310 	and.w	r3, r3, #16
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d00a      	beq.n	800e7da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	689b      	ldr	r3, [r3, #8]
 800e7ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	430a      	orrs	r2, r1
 800e7d8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7de:	f003 0320 	and.w	r3, r3, #32
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d00a      	beq.n	800e7fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	430a      	orrs	r2, r1
 800e7fa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e804:	2b00      	cmp	r3, #0
 800e806:	d01a      	beq.n	800e83e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	430a      	orrs	r2, r1
 800e81c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e826:	d10a      	bne.n	800e83e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	430a      	orrs	r2, r1
 800e83c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e846:	2b00      	cmp	r3, #0
 800e848:	d00a      	beq.n	800e860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	430a      	orrs	r2, r1
 800e85e:	605a      	str	r2, [r3, #4]
  }
}
 800e860:	bf00      	nop
 800e862:	370c      	adds	r7, #12
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b098      	sub	sp, #96	; 0x60
 800e870:	af02      	add	r7, sp, #8
 800e872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e87c:	f7f5 fac4 	bl	8003e08 <HAL_GetTick>
 800e880:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f003 0308 	and.w	r3, r3, #8
 800e88c:	2b08      	cmp	r3, #8
 800e88e:	d12f      	bne.n	800e8f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e894:	9300      	str	r3, [sp, #0]
 800e896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e898:	2200      	movs	r2, #0
 800e89a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 f88e 	bl	800e9c0 <UART_WaitOnFlagUntilTimeout>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d022      	beq.n	800e8f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b2:	e853 3f00 	ldrex	r3, [r3]
 800e8b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8be:	653b      	str	r3, [r7, #80]	; 0x50
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8c8:	647b      	str	r3, [r7, #68]	; 0x44
 800e8ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e8ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e8d0:	e841 2300 	strex	r3, r2, [r1]
 800e8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d1e6      	bne.n	800e8aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2220      	movs	r2, #32
 800e8e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e8ec:	2303      	movs	r3, #3
 800e8ee:	e063      	b.n	800e9b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f003 0304 	and.w	r3, r3, #4
 800e8fa:	2b04      	cmp	r3, #4
 800e8fc:	d149      	bne.n	800e992 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e8fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e906:	2200      	movs	r2, #0
 800e908:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f000 f857 	bl	800e9c0 <UART_WaitOnFlagUntilTimeout>
 800e912:	4603      	mov	r3, r0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d03c      	beq.n	800e992 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e920:	e853 3f00 	ldrex	r3, [r3]
 800e924:	623b      	str	r3, [r7, #32]
   return(result);
 800e926:	6a3b      	ldr	r3, [r7, #32]
 800e928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e92c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	461a      	mov	r2, r3
 800e934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e936:	633b      	str	r3, [r7, #48]	; 0x30
 800e938:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e93a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e93c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e93e:	e841 2300 	strex	r3, r2, [r1]
 800e942:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e946:	2b00      	cmp	r3, #0
 800e948:	d1e6      	bne.n	800e918 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	3308      	adds	r3, #8
 800e950:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	e853 3f00 	ldrex	r3, [r3]
 800e958:	60fb      	str	r3, [r7, #12]
   return(result);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f023 0301 	bic.w	r3, r3, #1
 800e960:	64bb      	str	r3, [r7, #72]	; 0x48
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	3308      	adds	r3, #8
 800e968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e96a:	61fa      	str	r2, [r7, #28]
 800e96c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e96e:	69b9      	ldr	r1, [r7, #24]
 800e970:	69fa      	ldr	r2, [r7, #28]
 800e972:	e841 2300 	strex	r3, r2, [r1]
 800e976:	617b      	str	r3, [r7, #20]
   return(result);
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d1e5      	bne.n	800e94a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2220      	movs	r2, #32
 800e982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e98e:	2303      	movs	r3, #3
 800e990:	e012      	b.n	800e9b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2220      	movs	r2, #32
 800e996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2220      	movs	r2, #32
 800e99e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e9b6:	2300      	movs	r3, #0
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3758      	adds	r7, #88	; 0x58
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b084      	sub	sp, #16
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	60b9      	str	r1, [r7, #8]
 800e9ca:	603b      	str	r3, [r7, #0]
 800e9cc:	4613      	mov	r3, r2
 800e9ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9d0:	e049      	b.n	800ea66 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e9d2:	69bb      	ldr	r3, [r7, #24]
 800e9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d8:	d045      	beq.n	800ea66 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9da:	f7f5 fa15 	bl	8003e08 <HAL_GetTick>
 800e9de:	4602      	mov	r2, r0
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	1ad3      	subs	r3, r2, r3
 800e9e4:	69ba      	ldr	r2, [r7, #24]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d302      	bcc.n	800e9f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d101      	bne.n	800e9f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e9f0:	2303      	movs	r3, #3
 800e9f2:	e048      	b.n	800ea86 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f003 0304 	and.w	r3, r3, #4
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d031      	beq.n	800ea66 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	69db      	ldr	r3, [r3, #28]
 800ea08:	f003 0308 	and.w	r3, r3, #8
 800ea0c:	2b08      	cmp	r3, #8
 800ea0e:	d110      	bne.n	800ea32 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	2208      	movs	r2, #8
 800ea16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ea18:	68f8      	ldr	r0, [r7, #12]
 800ea1a:	f000 f95b 	bl	800ecd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2208      	movs	r2, #8
 800ea22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ea2e:	2301      	movs	r3, #1
 800ea30:	e029      	b.n	800ea86 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	69db      	ldr	r3, [r3, #28]
 800ea38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea40:	d111      	bne.n	800ea66 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ea4c:	68f8      	ldr	r0, [r7, #12]
 800ea4e:	f000 f941 	bl	800ecd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2220      	movs	r2, #32
 800ea56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ea62:	2303      	movs	r3, #3
 800ea64:	e00f      	b.n	800ea86 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	69da      	ldr	r2, [r3, #28]
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	4013      	ands	r3, r2
 800ea70:	68ba      	ldr	r2, [r7, #8]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	bf0c      	ite	eq
 800ea76:	2301      	moveq	r3, #1
 800ea78:	2300      	movne	r3, #0
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	79fb      	ldrb	r3, [r7, #7]
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d0a6      	beq.n	800e9d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ea84:	2300      	movs	r3, #0
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3710      	adds	r7, #16
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
	...

0800ea90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b0a3      	sub	sp, #140	; 0x8c
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	60f8      	str	r0, [r7, #12]
 800ea98:	60b9      	str	r1, [r7, #8]
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	68ba      	ldr	r2, [r7, #8]
 800eaa2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	88fa      	ldrh	r2, [r7, #6]
 800eaa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	88fa      	ldrh	r2, [r7, #6]
 800eab0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2200      	movs	r2, #0
 800eab8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eac2:	d10e      	bne.n	800eae2 <UART_Start_Receive_IT+0x52>
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	691b      	ldr	r3, [r3, #16]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d105      	bne.n	800ead8 <UART_Start_Receive_IT+0x48>
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ead2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ead6:	e02d      	b.n	800eb34 <UART_Start_Receive_IT+0xa4>
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	22ff      	movs	r2, #255	; 0xff
 800eadc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eae0:	e028      	b.n	800eb34 <UART_Start_Receive_IT+0xa4>
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	689b      	ldr	r3, [r3, #8]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d10d      	bne.n	800eb06 <UART_Start_Receive_IT+0x76>
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	691b      	ldr	r3, [r3, #16]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d104      	bne.n	800eafc <UART_Start_Receive_IT+0x6c>
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	22ff      	movs	r2, #255	; 0xff
 800eaf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eafa:	e01b      	b.n	800eb34 <UART_Start_Receive_IT+0xa4>
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	227f      	movs	r2, #127	; 0x7f
 800eb00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eb04:	e016      	b.n	800eb34 <UART_Start_Receive_IT+0xa4>
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	689b      	ldr	r3, [r3, #8]
 800eb0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb0e:	d10d      	bne.n	800eb2c <UART_Start_Receive_IT+0x9c>
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	691b      	ldr	r3, [r3, #16]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d104      	bne.n	800eb22 <UART_Start_Receive_IT+0x92>
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	227f      	movs	r2, #127	; 0x7f
 800eb1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eb20:	e008      	b.n	800eb34 <UART_Start_Receive_IT+0xa4>
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	223f      	movs	r2, #63	; 0x3f
 800eb26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800eb2a:	e003      	b.n	800eb34 <UART_Start_Receive_IT+0xa4>
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2200      	movs	r2, #0
 800eb38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2222      	movs	r2, #34	; 0x22
 800eb40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	3308      	adds	r3, #8
 800eb4a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb4e:	e853 3f00 	ldrex	r3, [r3]
 800eb52:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800eb54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb56:	f043 0301 	orr.w	r3, r3, #1
 800eb5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	3308      	adds	r3, #8
 800eb64:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800eb68:	673a      	str	r2, [r7, #112]	; 0x70
 800eb6a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb6c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800eb6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800eb70:	e841 2300 	strex	r3, r2, [r1]
 800eb74:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800eb76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d1e3      	bne.n	800eb44 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb84:	d14f      	bne.n	800ec26 <UART_Start_Receive_IT+0x196>
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800eb8c:	88fa      	ldrh	r2, [r7, #6]
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d349      	bcc.n	800ec26 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	689b      	ldr	r3, [r3, #8]
 800eb96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb9a:	d107      	bne.n	800ebac <UART_Start_Receive_IT+0x11c>
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	691b      	ldr	r3, [r3, #16]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d103      	bne.n	800ebac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	4a47      	ldr	r2, [pc, #284]	; (800ecc4 <UART_Start_Receive_IT+0x234>)
 800eba8:	675a      	str	r2, [r3, #116]	; 0x74
 800ebaa:	e002      	b.n	800ebb2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	4a46      	ldr	r2, [pc, #280]	; (800ecc8 <UART_Start_Receive_IT+0x238>)
 800ebb0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	691b      	ldr	r3, [r3, #16]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d01a      	beq.n	800ebf0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebc2:	e853 3f00 	ldrex	r3, [r3]
 800ebc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ebc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ebce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ebdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ebde:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ebe2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ebe4:	e841 2300 	strex	r3, r2, [r1]
 800ebe8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ebea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1e4      	bne.n	800ebba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	3308      	adds	r3, #8
 800ebf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebfa:	e853 3f00 	ldrex	r3, [r3]
 800ebfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ec00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ec06:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	3308      	adds	r3, #8
 800ec0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ec10:	64ba      	str	r2, [r7, #72]	; 0x48
 800ec12:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec18:	e841 2300 	strex	r3, r2, [r1]
 800ec1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ec1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d1e5      	bne.n	800ebf0 <UART_Start_Receive_IT+0x160>
 800ec24:	e046      	b.n	800ecb4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec2e:	d107      	bne.n	800ec40 <UART_Start_Receive_IT+0x1b0>
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	691b      	ldr	r3, [r3, #16]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d103      	bne.n	800ec40 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	4a24      	ldr	r2, [pc, #144]	; (800eccc <UART_Start_Receive_IT+0x23c>)
 800ec3c:	675a      	str	r2, [r3, #116]	; 0x74
 800ec3e:	e002      	b.n	800ec46 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	4a23      	ldr	r2, [pc, #140]	; (800ecd0 <UART_Start_Receive_IT+0x240>)
 800ec44:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	691b      	ldr	r3, [r3, #16]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d019      	beq.n	800ec82 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec56:	e853 3f00 	ldrex	r3, [r3]
 800ec5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ec62:	677b      	str	r3, [r7, #116]	; 0x74
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	461a      	mov	r2, r3
 800ec6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec6c:	637b      	str	r3, [r7, #52]	; 0x34
 800ec6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec74:	e841 2300 	strex	r3, r2, [r1]
 800ec78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ec7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d1e6      	bne.n	800ec4e <UART_Start_Receive_IT+0x1be>
 800ec80:	e018      	b.n	800ecb4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	e853 3f00 	ldrex	r3, [r3]
 800ec8e:	613b      	str	r3, [r7, #16]
   return(result);
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	f043 0320 	orr.w	r3, r3, #32
 800ec96:	67bb      	str	r3, [r7, #120]	; 0x78
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eca0:	623b      	str	r3, [r7, #32]
 800eca2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eca4:	69f9      	ldr	r1, [r7, #28]
 800eca6:	6a3a      	ldr	r2, [r7, #32]
 800eca8:	e841 2300 	strex	r3, r2, [r1]
 800ecac:	61bb      	str	r3, [r7, #24]
   return(result);
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d1e6      	bne.n	800ec82 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ecb4:	2300      	movs	r3, #0
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	378c      	adds	r7, #140	; 0x8c
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc0:	4770      	bx	lr
 800ecc2:	bf00      	nop
 800ecc4:	0800f51d 	.word	0x0800f51d
 800ecc8:	0800f1ad 	.word	0x0800f1ad
 800eccc:	0800efe9 	.word	0x0800efe9
 800ecd0:	0800ee25 	.word	0x0800ee25

0800ecd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b095      	sub	sp, #84	; 0x54
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ece2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ece4:	e853 3f00 	ldrex	r3, [r3]
 800ece8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ecea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ecf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecfa:	643b      	str	r3, [r7, #64]	; 0x40
 800ecfc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ed00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ed02:	e841 2300 	strex	r3, r2, [r1]
 800ed06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ed08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d1e6      	bne.n	800ecdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	3308      	adds	r3, #8
 800ed14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed16:	6a3b      	ldr	r3, [r7, #32]
 800ed18:	e853 3f00 	ldrex	r3, [r3]
 800ed1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed1e:	69fb      	ldr	r3, [r7, #28]
 800ed20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ed24:	f023 0301 	bic.w	r3, r3, #1
 800ed28:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	3308      	adds	r3, #8
 800ed30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed32:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ed34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed3a:	e841 2300 	strex	r3, r2, [r1]
 800ed3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d1e3      	bne.n	800ed0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d118      	bne.n	800ed80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	e853 3f00 	ldrex	r3, [r3]
 800ed5a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	f023 0310 	bic.w	r3, r3, #16
 800ed62:	647b      	str	r3, [r7, #68]	; 0x44
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	461a      	mov	r2, r3
 800ed6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed6c:	61bb      	str	r3, [r7, #24]
 800ed6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed70:	6979      	ldr	r1, [r7, #20]
 800ed72:	69ba      	ldr	r2, [r7, #24]
 800ed74:	e841 2300 	strex	r3, r2, [r1]
 800ed78:	613b      	str	r3, [r7, #16]
   return(result);
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d1e6      	bne.n	800ed4e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2220      	movs	r2, #32
 800ed84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2200      	movs	r2, #0
 800ed92:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ed94:	bf00      	nop
 800ed96:	3754      	adds	r7, #84	; 0x54
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr

0800eda0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b084      	sub	sp, #16
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	2200      	movs	r2, #0
 800edb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2200      	movs	r2, #0
 800edba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800edbe:	68f8      	ldr	r0, [r7, #12]
 800edc0:	f7ff faae 	bl	800e320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800edc4:	bf00      	nop
 800edc6:	3710      	adds	r7, #16
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b088      	sub	sp, #32
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	e853 3f00 	ldrex	r3, [r3]
 800ede0:	60bb      	str	r3, [r7, #8]
   return(result);
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ede8:	61fb      	str	r3, [r7, #28]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	461a      	mov	r2, r3
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	61bb      	str	r3, [r7, #24]
 800edf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edf6:	6979      	ldr	r1, [r7, #20]
 800edf8:	69ba      	ldr	r2, [r7, #24]
 800edfa:	e841 2300 	strex	r3, r2, [r1]
 800edfe:	613b      	str	r3, [r7, #16]
   return(result);
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d1e6      	bne.n	800edd4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2220      	movs	r2, #32
 800ee0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2200      	movs	r2, #0
 800ee12:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f7ff fa79 	bl	800e30c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee1a:	bf00      	nop
 800ee1c:	3720      	adds	r7, #32
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
	...

0800ee24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b09c      	sub	sp, #112	; 0x70
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ee32:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee3c:	2b22      	cmp	r3, #34	; 0x22
 800ee3e:	f040 80c3 	bne.w	800efc8 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee48:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ee4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ee50:	b2d9      	uxtb	r1, r3
 800ee52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ee56:	b2da      	uxtb	r2, r3
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee5c:	400a      	ands	r2, r1
 800ee5e:	b2d2      	uxtb	r2, r2
 800ee60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee66:	1c5a      	adds	r2, r3, #1
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ee72:	b29b      	uxth	r3, r3
 800ee74:	3b01      	subs	r3, #1
 800ee76:	b29a      	uxth	r2, r3
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	f040 80a6 	bne.w	800efd8 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee94:	e853 3f00 	ldrex	r3, [r3]
 800ee98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ee9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eea0:	66bb      	str	r3, [r7, #104]	; 0x68
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	461a      	mov	r2, r3
 800eea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eeaa:	65bb      	str	r3, [r7, #88]	; 0x58
 800eeac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eeb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eeb2:	e841 2300 	strex	r3, r2, [r1]
 800eeb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eeb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d1e6      	bne.n	800ee8c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	3308      	adds	r3, #8
 800eec4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec8:	e853 3f00 	ldrex	r3, [r3]
 800eecc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eed0:	f023 0301 	bic.w	r3, r3, #1
 800eed4:	667b      	str	r3, [r7, #100]	; 0x64
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	3308      	adds	r3, #8
 800eedc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800eede:	647a      	str	r2, [r7, #68]	; 0x44
 800eee0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eee6:	e841 2300 	strex	r3, r2, [r1]
 800eeea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eeec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d1e5      	bne.n	800eebe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2220      	movs	r2, #32
 800eef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2200      	movs	r2, #0
 800eefe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2200      	movs	r2, #0
 800ef04:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a35      	ldr	r2, [pc, #212]	; (800efe0 <UART_RxISR_8BIT+0x1bc>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d024      	beq.n	800ef5a <UART_RxISR_8BIT+0x136>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4a33      	ldr	r2, [pc, #204]	; (800efe4 <UART_RxISR_8BIT+0x1c0>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d01f      	beq.n	800ef5a <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d018      	beq.n	800ef5a <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef30:	e853 3f00 	ldrex	r3, [r3]
 800ef34:	623b      	str	r3, [r7, #32]
   return(result);
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ef3c:	663b      	str	r3, [r7, #96]	; 0x60
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	461a      	mov	r2, r3
 800ef44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef46:	633b      	str	r3, [r7, #48]	; 0x30
 800ef48:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef4e:	e841 2300 	strex	r3, r2, [r1]
 800ef52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ef54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d1e6      	bne.n	800ef28 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d12e      	bne.n	800efc0 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2200      	movs	r2, #0
 800ef66:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	e853 3f00 	ldrex	r3, [r3]
 800ef74:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f023 0310 	bic.w	r3, r3, #16
 800ef7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	461a      	mov	r2, r3
 800ef84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef86:	61fb      	str	r3, [r7, #28]
 800ef88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef8a:	69b9      	ldr	r1, [r7, #24]
 800ef8c:	69fa      	ldr	r2, [r7, #28]
 800ef8e:	e841 2300 	strex	r3, r2, [r1]
 800ef92:	617b      	str	r3, [r7, #20]
   return(result);
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d1e6      	bne.n	800ef68 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	69db      	ldr	r3, [r3, #28]
 800efa0:	f003 0310 	and.w	r3, r3, #16
 800efa4:	2b10      	cmp	r3, #16
 800efa6:	d103      	bne.n	800efb0 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2210      	movs	r2, #16
 800efae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800efb6:	4619      	mov	r1, r3
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f7ff f9bb 	bl	800e334 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800efbe:	e00b      	b.n	800efd8 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7f4 fdeb 	bl	8003b9c <HAL_UART_RxCpltCallback>
}
 800efc6:	e007      	b.n	800efd8 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	699a      	ldr	r2, [r3, #24]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f042 0208 	orr.w	r2, r2, #8
 800efd6:	619a      	str	r2, [r3, #24]
}
 800efd8:	bf00      	nop
 800efda:	3770      	adds	r7, #112	; 0x70
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}
 800efe0:	44002400 	.word	0x44002400
 800efe4:	54002400 	.word	0x54002400

0800efe8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b09c      	sub	sp, #112	; 0x70
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eff6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f000:	2b22      	cmp	r3, #34	; 0x22
 800f002:	f040 80c3 	bne.w	800f18c <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f00c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f014:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f016:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800f01a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f01e:	4013      	ands	r3, r2
 800f020:	b29a      	uxth	r2, r3
 800f022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f024:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f02a:	1c9a      	adds	r2, r3, #2
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f036:	b29b      	uxth	r3, r3
 800f038:	3b01      	subs	r3, #1
 800f03a:	b29a      	uxth	r2, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f048:	b29b      	uxth	r3, r3
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	f040 80a6 	bne.w	800f19c <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f058:	e853 3f00 	ldrex	r3, [r3]
 800f05c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f05e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f060:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f064:	667b      	str	r3, [r7, #100]	; 0x64
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	461a      	mov	r2, r3
 800f06c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f06e:	657b      	str	r3, [r7, #84]	; 0x54
 800f070:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f072:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f074:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f076:	e841 2300 	strex	r3, r2, [r1]
 800f07a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f07c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d1e6      	bne.n	800f050 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	3308      	adds	r3, #8
 800f088:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f08c:	e853 3f00 	ldrex	r3, [r3]
 800f090:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f094:	f023 0301 	bic.w	r3, r3, #1
 800f098:	663b      	str	r3, [r7, #96]	; 0x60
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	3308      	adds	r3, #8
 800f0a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f0a2:	643a      	str	r2, [r7, #64]	; 0x40
 800f0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f0a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f0aa:	e841 2300 	strex	r3, r2, [r1]
 800f0ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d1e5      	bne.n	800f082 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2220      	movs	r2, #32
 800f0ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	4a35      	ldr	r2, [pc, #212]	; (800f1a4 <UART_RxISR_16BIT+0x1bc>)
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	d024      	beq.n	800f11e <UART_RxISR_16BIT+0x136>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4a33      	ldr	r2, [pc, #204]	; (800f1a8 <UART_RxISR_16BIT+0x1c0>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d01f      	beq.n	800f11e <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d018      	beq.n	800f11e <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0f2:	6a3b      	ldr	r3, [r7, #32]
 800f0f4:	e853 3f00 	ldrex	r3, [r3]
 800f0f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f100:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	461a      	mov	r2, r3
 800f108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f10a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f10c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f10e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f112:	e841 2300 	strex	r3, r2, [r1]
 800f116:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d1e6      	bne.n	800f0ec <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f122:	2b01      	cmp	r3, #1
 800f124:	d12e      	bne.n	800f184 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2200      	movs	r2, #0
 800f12a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	e853 3f00 	ldrex	r3, [r3]
 800f138:	60bb      	str	r3, [r7, #8]
   return(result);
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	f023 0310 	bic.w	r3, r3, #16
 800f140:	65bb      	str	r3, [r7, #88]	; 0x58
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	461a      	mov	r2, r3
 800f148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f14a:	61bb      	str	r3, [r7, #24]
 800f14c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f14e:	6979      	ldr	r1, [r7, #20]
 800f150:	69ba      	ldr	r2, [r7, #24]
 800f152:	e841 2300 	strex	r3, r2, [r1]
 800f156:	613b      	str	r3, [r7, #16]
   return(result);
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d1e6      	bne.n	800f12c <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	69db      	ldr	r3, [r3, #28]
 800f164:	f003 0310 	and.w	r3, r3, #16
 800f168:	2b10      	cmp	r3, #16
 800f16a:	d103      	bne.n	800f174 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2210      	movs	r2, #16
 800f172:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f17a:	4619      	mov	r1, r3
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f7ff f8d9 	bl	800e334 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f182:	e00b      	b.n	800f19c <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f7f4 fd09 	bl	8003b9c <HAL_UART_RxCpltCallback>
}
 800f18a:	e007      	b.n	800f19c <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	699a      	ldr	r2, [r3, #24]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f042 0208 	orr.w	r2, r2, #8
 800f19a:	619a      	str	r2, [r3, #24]
}
 800f19c:	bf00      	nop
 800f19e:	3770      	adds	r7, #112	; 0x70
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}
 800f1a4:	44002400 	.word	0x44002400
 800f1a8:	54002400 	.word	0x54002400

0800f1ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b0ac      	sub	sp, #176	; 0xb0
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f1ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	69db      	ldr	r3, [r3, #28]
 800f1c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	689b      	ldr	r3, [r3, #8]
 800f1d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f1e2:	2b22      	cmp	r3, #34	; 0x22
 800f1e4:	f040 8187 	bne.w	800f4f6 <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f1ee:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f1f2:	e12a      	b.n	800f44a <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1fa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f1fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f202:	b2d9      	uxtb	r1, r3
 800f204:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800f208:	b2da      	uxtb	r2, r3
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f20e:	400a      	ands	r2, r1
 800f210:	b2d2      	uxtb	r2, r2
 800f212:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f218:	1c5a      	adds	r2, r3, #1
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f224:	b29b      	uxth	r3, r3
 800f226:	3b01      	subs	r3, #1
 800f228:	b29a      	uxth	r2, r3
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	69db      	ldr	r3, [r3, #28]
 800f236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f23a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f23e:	f003 0307 	and.w	r3, r3, #7
 800f242:	2b00      	cmp	r3, #0
 800f244:	d053      	beq.n	800f2ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f24a:	f003 0301 	and.w	r3, r3, #1
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d011      	beq.n	800f276 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d00b      	beq.n	800f276 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	2201      	movs	r2, #1
 800f264:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f26c:	f043 0201 	orr.w	r2, r3, #1
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f27a:	f003 0302 	and.w	r3, r3, #2
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d011      	beq.n	800f2a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f286:	f003 0301 	and.w	r3, r3, #1
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d00b      	beq.n	800f2a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	2202      	movs	r2, #2
 800f294:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f29c:	f043 0204 	orr.w	r2, r3, #4
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f2a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f2aa:	f003 0304 	and.w	r3, r3, #4
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d011      	beq.n	800f2d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f2b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f2b6:	f003 0301 	and.w	r3, r3, #1
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00b      	beq.n	800f2d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2204      	movs	r2, #4
 800f2c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2cc:	f043 0202 	orr.w	r2, r3, #2
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d006      	beq.n	800f2ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f7ff f81d 	bl	800e320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2f4:	b29b      	uxth	r3, r3
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	f040 80a7 	bne.w	800f44a <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f304:	e853 3f00 	ldrex	r3, [r3]
 800f308:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800f30a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f30c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	461a      	mov	r2, r3
 800f31a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f31e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f320:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f322:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f324:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f326:	e841 2300 	strex	r3, r2, [r1]
 800f32a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800f32c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d1e4      	bne.n	800f2fc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	3308      	adds	r3, #8
 800f338:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f33a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f33c:	e853 3f00 	ldrex	r3, [r3]
 800f340:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f348:	f023 0301 	bic.w	r3, r3, #1
 800f34c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	3308      	adds	r3, #8
 800f356:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f35a:	66ba      	str	r2, [r7, #104]	; 0x68
 800f35c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f35e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f360:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f362:	e841 2300 	strex	r3, r2, [r1]
 800f366:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d1e1      	bne.n	800f332 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2220      	movs	r2, #32
 800f372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2200      	movs	r2, #0
 800f37a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2200      	movs	r2, #0
 800f380:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	4a62      	ldr	r2, [pc, #392]	; (800f510 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800f388:	4293      	cmp	r3, r2
 800f38a:	d026      	beq.n	800f3da <UART_RxISR_8BIT_FIFOEN+0x22e>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	4a60      	ldr	r2, [pc, #384]	; (800f514 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d021      	beq.n	800f3da <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d01a      	beq.n	800f3da <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3ac:	e853 3f00 	ldrex	r3, [r3]
 800f3b0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f3b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f3b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	461a      	mov	r2, r3
 800f3c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f3c6:	657b      	str	r3, [r7, #84]	; 0x54
 800f3c8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f3cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f3ce:	e841 2300 	strex	r3, r2, [r1]
 800f3d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f3d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d1e4      	bne.n	800f3a4 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	d130      	bne.n	800f444 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3f0:	e853 3f00 	ldrex	r3, [r3]
 800f3f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f8:	f023 0310 	bic.w	r3, r3, #16
 800f3fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	461a      	mov	r2, r3
 800f406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f40a:	643b      	str	r3, [r7, #64]	; 0x40
 800f40c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f40e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f412:	e841 2300 	strex	r3, r2, [r1]
 800f416:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d1e4      	bne.n	800f3e8 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	69db      	ldr	r3, [r3, #28]
 800f424:	f003 0310 	and.w	r3, r3, #16
 800f428:	2b10      	cmp	r3, #16
 800f42a:	d103      	bne.n	800f434 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2210      	movs	r2, #16
 800f432:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f43a:	4619      	mov	r1, r3
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f7fe ff79 	bl	800e334 <HAL_UARTEx_RxEventCallback>
 800f442:	e002      	b.n	800f44a <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f7f4 fba9 	bl	8003b9c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f44a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d006      	beq.n	800f460 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 800f452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f456:	f003 0320 	and.w	r3, r3, #32
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	f47f aeca 	bne.w	800f1f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f466:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f46a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d049      	beq.n	800f506 <UART_RxISR_8BIT_FIFOEN+0x35a>
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f478:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d242      	bcs.n	800f506 <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	3308      	adds	r3, #8
 800f486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f488:	6a3b      	ldr	r3, [r7, #32]
 800f48a:	e853 3f00 	ldrex	r3, [r3]
 800f48e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f490:	69fb      	ldr	r3, [r7, #28]
 800f492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f496:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	3308      	adds	r3, #8
 800f4a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f4a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f4a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f4aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4ac:	e841 2300 	strex	r3, r2, [r1]
 800f4b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d1e3      	bne.n	800f480 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4a17      	ldr	r2, [pc, #92]	; (800f518 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800f4bc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	e853 3f00 	ldrex	r3, [r3]
 800f4ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	f043 0320 	orr.w	r3, r3, #32
 800f4d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f4e0:	61bb      	str	r3, [r7, #24]
 800f4e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4e4:	6979      	ldr	r1, [r7, #20]
 800f4e6:	69ba      	ldr	r2, [r7, #24]
 800f4e8:	e841 2300 	strex	r3, r2, [r1]
 800f4ec:	613b      	str	r3, [r7, #16]
   return(result);
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d1e4      	bne.n	800f4be <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f4f4:	e007      	b.n	800f506 <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	699a      	ldr	r2, [r3, #24]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	f042 0208 	orr.w	r2, r2, #8
 800f504:	619a      	str	r2, [r3, #24]
}
 800f506:	bf00      	nop
 800f508:	37b0      	adds	r7, #176	; 0xb0
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	44002400 	.word	0x44002400
 800f514:	54002400 	.word	0x54002400
 800f518:	0800ee25 	.word	0x0800ee25

0800f51c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b0ae      	sub	sp, #184	; 0xb8
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f52a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	69db      	ldr	r3, [r3, #28]
 800f534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	689b      	ldr	r3, [r3, #8]
 800f548:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f552:	2b22      	cmp	r3, #34	; 0x22
 800f554:	f040 818b 	bne.w	800f86e <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f55e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f562:	e12e      	b.n	800f7c2 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f56a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f576:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800f57a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800f57e:	4013      	ands	r3, r2
 800f580:	b29a      	uxth	r2, r3
 800f582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f586:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f58c:	1c9a      	adds	r2, r3, #2
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f598:	b29b      	uxth	r3, r3
 800f59a:	3b01      	subs	r3, #1
 800f59c:	b29a      	uxth	r2, r3
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	69db      	ldr	r3, [r3, #28]
 800f5aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f5ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f5b2:	f003 0307 	and.w	r3, r3, #7
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d053      	beq.n	800f662 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f5ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f5be:	f003 0301 	and.w	r3, r3, #1
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d011      	beq.n	800f5ea <UART_RxISR_16BIT_FIFOEN+0xce>
 800f5c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f5ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d00b      	beq.n	800f5ea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2201      	movs	r2, #1
 800f5d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5e0:	f043 0201 	orr.w	r2, r3, #1
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f5ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f5ee:	f003 0302 	and.w	r3, r3, #2
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d011      	beq.n	800f61a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f5f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f5fa:	f003 0301 	and.w	r3, r3, #1
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d00b      	beq.n	800f61a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	2202      	movs	r2, #2
 800f608:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f610:	f043 0204 	orr.w	r2, r3, #4
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f61a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f61e:	f003 0304 	and.w	r3, r3, #4
 800f622:	2b00      	cmp	r3, #0
 800f624:	d011      	beq.n	800f64a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f626:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f62a:	f003 0301 	and.w	r3, r3, #1
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d00b      	beq.n	800f64a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	2204      	movs	r2, #4
 800f638:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f640:	f043 0202 	orr.w	r2, r3, #2
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f650:	2b00      	cmp	r3, #0
 800f652:	d006      	beq.n	800f662 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f7fe fe63 	bl	800e320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2200      	movs	r2, #0
 800f65e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f668:	b29b      	uxth	r3, r3
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	f040 80a9 	bne.w	800f7c2 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f678:	e853 3f00 	ldrex	r3, [r3]
 800f67c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f67e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f684:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	461a      	mov	r2, r3
 800f68e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f692:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f696:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f698:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f69a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f69e:	e841 2300 	strex	r3, r2, [r1]
 800f6a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f6a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d1e2      	bne.n	800f670 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	3308      	adds	r3, #8
 800f6b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6b4:	e853 3f00 	ldrex	r3, [r3]
 800f6b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f6ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f6c0:	f023 0301 	bic.w	r3, r3, #1
 800f6c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	3308      	adds	r3, #8
 800f6ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f6d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f6d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f6d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f6da:	e841 2300 	strex	r3, r2, [r1]
 800f6de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f6e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d1e1      	bne.n	800f6aa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2220      	movs	r2, #32
 800f6ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	4a62      	ldr	r2, [pc, #392]	; (800f888 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d026      	beq.n	800f752 <UART_RxISR_16BIT_FIFOEN+0x236>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	4a60      	ldr	r2, [pc, #384]	; (800f88c <UART_RxISR_16BIT_FIFOEN+0x370>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d021      	beq.n	800f752 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d01a      	beq.n	800f752 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f724:	e853 3f00 	ldrex	r3, [r3]
 800f728:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f72a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f72c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f730:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	461a      	mov	r2, r3
 800f73a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f73e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f740:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f742:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f744:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f746:	e841 2300 	strex	r3, r2, [r1]
 800f74a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f74c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d1e4      	bne.n	800f71c <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f756:	2b01      	cmp	r3, #1
 800f758:	d130      	bne.n	800f7bc <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2200      	movs	r2, #0
 800f75e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f768:	e853 3f00 	ldrex	r3, [r3]
 800f76c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f770:	f023 0310 	bic.w	r3, r3, #16
 800f774:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	461a      	mov	r2, r3
 800f77e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f782:	647b      	str	r3, [r7, #68]	; 0x44
 800f784:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f786:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f78a:	e841 2300 	strex	r3, r2, [r1]
 800f78e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f792:	2b00      	cmp	r3, #0
 800f794:	d1e4      	bne.n	800f760 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	69db      	ldr	r3, [r3, #28]
 800f79c:	f003 0310 	and.w	r3, r3, #16
 800f7a0:	2b10      	cmp	r3, #16
 800f7a2:	d103      	bne.n	800f7ac <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2210      	movs	r2, #16
 800f7aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f7fe fdbd 	bl	800e334 <HAL_UARTEx_RxEventCallback>
 800f7ba:	e002      	b.n	800f7c2 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f7f4 f9ed 	bl	8003b9c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f7c2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d006      	beq.n	800f7d8 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800f7ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f7ce:	f003 0320 	and.w	r3, r3, #32
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	f47f aec6 	bne.w	800f564 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f7de:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f7e2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d049      	beq.n	800f87e <UART_RxISR_16BIT_FIFOEN+0x362>
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f7f0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d242      	bcs.n	800f87e <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	3308      	adds	r3, #8
 800f7fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f802:	e853 3f00 	ldrex	r3, [r3]
 800f806:	623b      	str	r3, [r7, #32]
   return(result);
 800f808:	6a3b      	ldr	r3, [r7, #32]
 800f80a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f80e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	3308      	adds	r3, #8
 800f818:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f81c:	633a      	str	r2, [r7, #48]	; 0x30
 800f81e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f820:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f824:	e841 2300 	strex	r3, r2, [r1]
 800f828:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d1e3      	bne.n	800f7f8 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	4a17      	ldr	r2, [pc, #92]	; (800f890 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800f834:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	e853 3f00 	ldrex	r3, [r3]
 800f842:	60fb      	str	r3, [r7, #12]
   return(result);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f043 0320 	orr.w	r3, r3, #32
 800f84a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	461a      	mov	r2, r3
 800f854:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f858:	61fb      	str	r3, [r7, #28]
 800f85a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f85c:	69b9      	ldr	r1, [r7, #24]
 800f85e:	69fa      	ldr	r2, [r7, #28]
 800f860:	e841 2300 	strex	r3, r2, [r1]
 800f864:	617b      	str	r3, [r7, #20]
   return(result);
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d1e4      	bne.n	800f836 <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f86c:	e007      	b.n	800f87e <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	699a      	ldr	r2, [r3, #24]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	f042 0208 	orr.w	r2, r2, #8
 800f87c:	619a      	str	r2, [r3, #24]
}
 800f87e:	bf00      	nop
 800f880:	37b8      	adds	r7, #184	; 0xb8
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	44002400 	.word	0x44002400
 800f88c:	54002400 	.word	0x54002400
 800f890:	0800efe9 	.word	0x0800efe9

0800f894 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f894:	b480      	push	{r7}
 800f896:	b083      	sub	sp, #12
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f89c:	bf00      	nop
 800f89e:	370c      	adds	r7, #12
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a6:	4770      	bx	lr

0800f8a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f8a8:	b480      	push	{r7}
 800f8aa:	b083      	sub	sp, #12
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f8b0:	bf00      	nop
 800f8b2:	370c      	adds	r7, #12
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr

0800f8bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f8bc:	b480      	push	{r7}
 800f8be:	b083      	sub	sp, #12
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f8c4:	bf00      	nop
 800f8c6:	370c      	adds	r7, #12
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ce:	4770      	bx	lr

0800f8d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b085      	sub	sp, #20
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d101      	bne.n	800f8e6 <HAL_UARTEx_DisableFifoMode+0x16>
 800f8e2:	2302      	movs	r3, #2
 800f8e4:	e027      	b.n	800f936 <HAL_UARTEx_DisableFifoMode+0x66>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2224      	movs	r2, #36	; 0x24
 800f8f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	681a      	ldr	r2, [r3, #0]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f022 0201 	bic.w	r2, r2, #1
 800f90c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f914:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2200      	movs	r2, #0
 800f91a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	68fa      	ldr	r2, [r7, #12]
 800f922:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2220      	movs	r2, #32
 800f928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f934:	2300      	movs	r3, #0
}
 800f936:	4618      	mov	r0, r3
 800f938:	3714      	adds	r7, #20
 800f93a:	46bd      	mov	sp, r7
 800f93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f940:	4770      	bx	lr

0800f942 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f942:	b580      	push	{r7, lr}
 800f944:	b084      	sub	sp, #16
 800f946:	af00      	add	r7, sp, #0
 800f948:	6078      	str	r0, [r7, #4]
 800f94a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f952:	2b01      	cmp	r3, #1
 800f954:	d101      	bne.n	800f95a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f956:	2302      	movs	r3, #2
 800f958:	e02d      	b.n	800f9b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2201      	movs	r2, #1
 800f95e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2224      	movs	r2, #36	; 0x24
 800f966:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	f022 0201 	bic.w	r2, r2, #1
 800f980:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	689b      	ldr	r3, [r3, #8]
 800f988:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	683a      	ldr	r2, [r7, #0]
 800f992:	430a      	orrs	r2, r1
 800f994:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f000 f850 	bl	800fa3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	68fa      	ldr	r2, [r7, #12]
 800f9a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2220      	movs	r2, #32
 800f9a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f9b4:	2300      	movs	r3, #0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3710      	adds	r7, #16
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b084      	sub	sp, #16
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
 800f9c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d101      	bne.n	800f9d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f9d2:	2302      	movs	r3, #2
 800f9d4:	e02d      	b.n	800fa32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2201      	movs	r2, #1
 800f9da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2224      	movs	r2, #36	; 0x24
 800f9e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	681a      	ldr	r2, [r3, #0]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	f022 0201 	bic.w	r2, r2, #1
 800f9fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	683a      	ldr	r2, [r7, #0]
 800fa0e:	430a      	orrs	r2, r1
 800fa10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f000 f812 	bl	800fa3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	68fa      	ldr	r2, [r7, #12]
 800fa1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2220      	movs	r2, #32
 800fa24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
	...

0800fa3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b085      	sub	sp, #20
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d108      	bne.n	800fa5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2201      	movs	r2, #1
 800fa50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2201      	movs	r2, #1
 800fa58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fa5c:	e031      	b.n	800fac2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fa5e:	2308      	movs	r3, #8
 800fa60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fa62:	2308      	movs	r3, #8
 800fa64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	689b      	ldr	r3, [r3, #8]
 800fa6c:	0e5b      	lsrs	r3, r3, #25
 800fa6e:	b2db      	uxtb	r3, r3
 800fa70:	f003 0307 	and.w	r3, r3, #7
 800fa74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	689b      	ldr	r3, [r3, #8]
 800fa7c:	0f5b      	lsrs	r3, r3, #29
 800fa7e:	b2db      	uxtb	r3, r3
 800fa80:	f003 0307 	and.w	r3, r3, #7
 800fa84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fa86:	7bbb      	ldrb	r3, [r7, #14]
 800fa88:	7b3a      	ldrb	r2, [r7, #12]
 800fa8a:	4911      	ldr	r1, [pc, #68]	; (800fad0 <UARTEx_SetNbDataToProcess+0x94>)
 800fa8c:	5c8a      	ldrb	r2, [r1, r2]
 800fa8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fa92:	7b3a      	ldrb	r2, [r7, #12]
 800fa94:	490f      	ldr	r1, [pc, #60]	; (800fad4 <UARTEx_SetNbDataToProcess+0x98>)
 800fa96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fa98:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa9c:	b29a      	uxth	r2, r3
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800faa4:	7bfb      	ldrb	r3, [r7, #15]
 800faa6:	7b7a      	ldrb	r2, [r7, #13]
 800faa8:	4909      	ldr	r1, [pc, #36]	; (800fad0 <UARTEx_SetNbDataToProcess+0x94>)
 800faaa:	5c8a      	ldrb	r2, [r1, r2]
 800faac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fab0:	7b7a      	ldrb	r2, [r7, #13]
 800fab2:	4908      	ldr	r1, [pc, #32]	; (800fad4 <UARTEx_SetNbDataToProcess+0x98>)
 800fab4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fab6:	fb93 f3f2 	sdiv	r3, r3, r2
 800faba:	b29a      	uxth	r2, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fac2:	bf00      	nop
 800fac4:	3714      	adds	r7, #20
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr
 800face:	bf00      	nop
 800fad0:	08026fa0 	.word	0x08026fa0
 800fad4:	08026fa8 	.word	0x08026fa8

0800fad8 <qbufferCreateBySize>:

  return ret;
}

BOOL qbufferCreateBySize(qbuffer_t *p_node, uint8_t *p_buf, uint32_t size, uint32_t length)
{
 800fad8:	b480      	push	{r7}
 800fada:	b087      	sub	sp, #28
 800fadc:	af00      	add	r7, sp, #0
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	60b9      	str	r1, [r7, #8]
 800fae2:	607a      	str	r2, [r7, #4]
 800fae4:	603b      	str	r3, [r7, #0]
  BOOL ret = TRUE;
 800fae6:	2301      	movs	r3, #1
 800fae8:	617b      	str	r3, [r7, #20]

  p_node->in    = 0;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	2200      	movs	r2, #0
 800faee:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2200      	movs	r2, #0
 800faf4:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	683a      	ldr	r2, [r7, #0]
 800fafa:	609a      	str	r2, [r3, #8]
  p_node->size  = size;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	687a      	ldr	r2, [r7, #4]
 800fb00:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	68ba      	ldr	r2, [r7, #8]
 800fb06:	611a      	str	r2, [r3, #16]

  return ret;
 800fb08:	697b      	ldr	r3, [r7, #20]
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	371c      	adds	r7, #28
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb14:	4770      	bx	lr

0800fb16 <qbufferWrite>:

BOOL qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800fb16:	b480      	push	{r7}
 800fb18:	b08b      	sub	sp, #44	; 0x2c
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	60f8      	str	r0, [r7, #12]
 800fb1e:	60b9      	str	r1, [r7, #8]
 800fb20:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800fb22:	2301      	movs	r3, #1
 800fb24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t next_in;


  for (int i=0; i<length; i++)
 800fb26:	2300      	movs	r3, #0
 800fb28:	623b      	str	r3, [r7, #32]
 800fb2a:	e042      	b.n	800fbb2 <qbufferWrite+0x9c>
  {
    next_in = (p_node->in + 1) % p_node->len;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	3301      	adds	r3, #1
 800fb32:	68fa      	ldr	r2, [r7, #12]
 800fb34:	6892      	ldr	r2, [r2, #8]
 800fb36:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb3a:	fb01 f202 	mul.w	r2, r1, r2
 800fb3e:	1a9b      	subs	r3, r3, r2
 800fb40:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	69ba      	ldr	r2, [r7, #24]
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d02c      	beq.n	800fba6 <qbufferWrite+0x90>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	691b      	ldr	r3, [r3, #16]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d024      	beq.n	800fb9e <qbufferWrite+0x88>
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d021      	beq.n	800fb9e <qbufferWrite+0x88>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	691a      	ldr	r2, [r3, #16]
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	68f9      	ldr	r1, [r7, #12]
 800fb64:	68c9      	ldr	r1, [r1, #12]
 800fb66:	fb01 f303 	mul.w	r3, r1, r3
 800fb6a:	4413      	add	r3, r2
 800fb6c:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 800fb6e:	2300      	movs	r3, #0
 800fb70:	61fb      	str	r3, [r7, #28]
 800fb72:	e00a      	b.n	800fb8a <qbufferWrite+0x74>
        {
          p_buf[i] = p_data[i];
 800fb74:	69fb      	ldr	r3, [r7, #28]
 800fb76:	68ba      	ldr	r2, [r7, #8]
 800fb78:	441a      	add	r2, r3
 800fb7a:	69fb      	ldr	r3, [r7, #28]
 800fb7c:	6979      	ldr	r1, [r7, #20]
 800fb7e:	440b      	add	r3, r1
 800fb80:	7812      	ldrb	r2, [r2, #0]
 800fb82:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 800fb84:	69fb      	ldr	r3, [r7, #28]
 800fb86:	3301      	adds	r3, #1
 800fb88:	61fb      	str	r3, [r7, #28]
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	68da      	ldr	r2, [r3, #12]
 800fb8e:	69fb      	ldr	r3, [r7, #28]
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d8ef      	bhi.n	800fb74 <qbufferWrite+0x5e>
        }
        p_data += p_node->size;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	68db      	ldr	r3, [r3, #12]
 800fb98:	68ba      	ldr	r2, [r7, #8]
 800fb9a:	4413      	add	r3, r2
 800fb9c:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	69ba      	ldr	r2, [r7, #24]
 800fba2:	601a      	str	r2, [r3, #0]
 800fba4:	e002      	b.n	800fbac <qbufferWrite+0x96>
    }
    else
    {
      ret = FALSE;
 800fba6:	2300      	movs	r3, #0
 800fba8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800fbaa:	e006      	b.n	800fbba <qbufferWrite+0xa4>
  for (int i=0; i<length; i++)
 800fbac:	6a3b      	ldr	r3, [r7, #32]
 800fbae:	3301      	adds	r3, #1
 800fbb0:	623b      	str	r3, [r7, #32]
 800fbb2:	6a3b      	ldr	r3, [r7, #32]
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d8b8      	bhi.n	800fb2c <qbufferWrite+0x16>
    }
  }

  return ret;
 800fbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	372c      	adds	r7, #44	; 0x2c
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr

0800fbc8 <qbufferRead>:

BOOL qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b089      	sub	sp, #36	; 0x24
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	60b9      	str	r1, [r7, #8]
 800fbd2:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	61fb      	str	r3, [r7, #28]


  for (int i=0; i<length; i++)
 800fbd8:	2300      	movs	r3, #0
 800fbda:	61bb      	str	r3, [r7, #24]
 800fbdc:	e041      	b.n	800fc62 <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	691b      	ldr	r3, [r3, #16]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d024      	beq.n	800fc30 <qbufferRead+0x68>
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d021      	beq.n	800fc30 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	691a      	ldr	r2, [r3, #16]
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	685b      	ldr	r3, [r3, #4]
 800fbf4:	68f9      	ldr	r1, [r7, #12]
 800fbf6:	68c9      	ldr	r1, [r1, #12]
 800fbf8:	fb01 f303 	mul.w	r3, r1, r3
 800fbfc:	4413      	add	r3, r2
 800fbfe:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 800fc00:	2300      	movs	r3, #0
 800fc02:	617b      	str	r3, [r7, #20]
 800fc04:	e00a      	b.n	800fc1c <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	693a      	ldr	r2, [r7, #16]
 800fc0a:	441a      	add	r2, r3
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	68b9      	ldr	r1, [r7, #8]
 800fc10:	440b      	add	r3, r1
 800fc12:	7812      	ldrb	r2, [r2, #0]
 800fc14:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	617b      	str	r3, [r7, #20]
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	68da      	ldr	r2, [r3, #12]
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d8ef      	bhi.n	800fc06 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	68db      	ldr	r3, [r3, #12]
 800fc2a:	68ba      	ldr	r2, [r7, #8]
 800fc2c:	4413      	add	r3, r2
 800fc2e:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	685a      	ldr	r2, [r3, #4]
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d00c      	beq.n	800fc56 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	685b      	ldr	r3, [r3, #4]
 800fc40:	3301      	adds	r3, #1
 800fc42:	68fa      	ldr	r2, [r7, #12]
 800fc44:	6892      	ldr	r2, [r2, #8]
 800fc46:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc4a:	fb01 f202 	mul.w	r2, r1, r2
 800fc4e:	1a9a      	subs	r2, r3, r2
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	605a      	str	r2, [r3, #4]
 800fc54:	e002      	b.n	800fc5c <qbufferRead+0x94>
    }
    else
    {
      ret = FALSE;
 800fc56:	2300      	movs	r3, #0
 800fc58:	61fb      	str	r3, [r7, #28]
      break;
 800fc5a:	e006      	b.n	800fc6a <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 800fc5c:	69bb      	ldr	r3, [r7, #24]
 800fc5e:	3301      	adds	r3, #1
 800fc60:	61bb      	str	r3, [r7, #24]
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	687a      	ldr	r2, [r7, #4]
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d8b9      	bhi.n	800fbde <qbufferRead+0x16>
    }
  }

  return ret;
 800fc6a:	69fb      	ldr	r3, [r7, #28]
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3724      	adds	r7, #36	; 0x24
 800fc70:	46bd      	mov	sp, r7
 800fc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc76:	4770      	bx	lr

0800fc78 <qbufferPeekWrite>:

uint8_t *qbufferPeekWrite(qbuffer_t *p_node)
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b083      	sub	sp, #12
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  return &p_node->p_buf[p_node->in*p_node->size];
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	691a      	ldr	r2, [r3, #16]
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	6879      	ldr	r1, [r7, #4]
 800fc8a:	68c9      	ldr	r1, [r1, #12]
 800fc8c:	fb01 f303 	mul.w	r3, r1, r3
 800fc90:	4413      	add	r3, r2
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	370c      	adds	r7, #12
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr

0800fc9e <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800fc9e:	b480      	push	{r7}
 800fca0:	b085      	sub	sp, #20
 800fca2:	af00      	add	r7, sp, #0
 800fca4:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681a      	ldr	r2, [r3, #0]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	1ad3      	subs	r3, r2, r3
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	6892      	ldr	r2, [r2, #8]
 800fcb4:	fbb3 f1f2 	udiv	r1, r3, r2
 800fcb8:	fb01 f202 	mul.w	r2, r1, r2
 800fcbc:	1a9b      	subs	r3, r3, r2
 800fcbe:	60fb      	str	r3, [r7, #12]

  return ret;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3714      	adds	r7, #20
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr
	...

0800fcd0 <svCLI_Init>:
// extern variables

// Functions
// svCLI_Init must be called before using CLI
void svCLI_Init(SVCLI_GET_CHAR_FUNC funcGetChar, SVCLI_PUT_CHAR_FUNC funcPutChar, SVCLI_COMMIT_FUNC funcCommit)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b085      	sub	sp, #20
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	60b9      	str	r1, [r7, #8]
 800fcda:	607a      	str	r2, [r7, #4]
  svGetChar = funcGetChar;
 800fcdc:	4a18      	ldr	r2, [pc, #96]	; (800fd40 <svCLI_Init+0x70>)
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	6013      	str	r3, [r2, #0]
  svPutChar = funcPutChar;
 800fce2:	4a18      	ldr	r2, [pc, #96]	; (800fd44 <svCLI_Init+0x74>)
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	6013      	str	r3, [r2, #0]
  svCommit = funcCommit;
 800fce8:	4a17      	ldr	r2, [pc, #92]	; (800fd48 <svCLI_Init+0x78>)
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6013      	str	r3, [r2, #0]
  szCLIString[0] = 0;
 800fcee:	4b17      	ldr	r3, [pc, #92]	; (800fd4c <svCLI_Init+0x7c>)
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	701a      	strb	r2, [r3, #0]
#pragma section=".Table4CLI"
  sCLITableBegin = (SVCLI_t*)__section_begin(".Table4CLI");
  sCLITablEnd = (SVCLI_t*)__section_end(".Table4CLI");

#elif defined ( __GNUC__ )
  sCLITableBegin = (SVCLI_t*)Table4CLI_start;
 800fcf4:	4b16      	ldr	r3, [pc, #88]	; (800fd50 <svCLI_Init+0x80>)
 800fcf6:	4a17      	ldr	r2, [pc, #92]	; (800fd54 <svCLI_Init+0x84>)
 800fcf8:	601a      	str	r2, [r3, #0]
  sCLITablEnd = (SVCLI_t*)Table4CLI_end;
 800fcfa:	4b17      	ldr	r3, [pc, #92]	; (800fd58 <svCLI_Init+0x88>)
 800fcfc:	4a17      	ldr	r2, [pc, #92]	; (800fd5c <svCLI_Init+0x8c>)
 800fcfe:	601a      	str	r2, [r3, #0]
#endif

  if (s_bPwdOK) {
 800fd00:	4b17      	ldr	r3, [pc, #92]	; (800fd60 <svCLI_Init+0x90>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d00d      	beq.n	800fd24 <svCLI_Init+0x54>
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800fd08:	4b16      	ldr	r3, [pc, #88]	; (800fd64 <svCLI_Init+0x94>)
 800fd0a:	4a17      	ldr	r2, [pc, #92]	; (800fd68 <svCLI_Init+0x98>)
 800fd0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd10:	6018      	str	r0, [r3, #0]
 800fd12:	3304      	adds	r3, #4
 800fd14:	8019      	strh	r1, [r3, #0]
 800fd16:	3302      	adds	r3, #2
 800fd18:	0c0a      	lsrs	r2, r1, #16
 800fd1a:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800fd1c:	4b13      	ldr	r3, [pc, #76]	; (800fd6c <svCLI_Init+0x9c>)
 800fd1e:	2206      	movs	r2, #6
 800fd20:	601a      	str	r2, [r3, #0]
  }
  else {
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
  }
}
 800fd22:	e007      	b.n	800fd34 <svCLI_Init+0x64>
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
 800fd24:	4b0f      	ldr	r3, [pc, #60]	; (800fd64 <svCLI_Init+0x94>)
 800fd26:	4a12      	ldr	r2, [pc, #72]	; (800fd70 <svCLI_Init+0xa0>)
 800fd28:	ca07      	ldmia	r2, {r0, r1, r2}
 800fd2a:	c303      	stmia	r3!, {r0, r1}
 800fd2c:	801a      	strh	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
 800fd2e:	4b0f      	ldr	r3, [pc, #60]	; (800fd6c <svCLI_Init+0x9c>)
 800fd30:	2209      	movs	r2, #9
 800fd32:	601a      	str	r2, [r3, #0]
}
 800fd34:	bf00      	nop
 800fd36:	3714      	adds	r7, #20
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr
 800fd40:	200059d4 	.word	0x200059d4
 800fd44:	200059d8 	.word	0x200059d8
 800fd48:	200059dc 	.word	0x200059dc
 800fd4c:	200057c0 	.word	0x200057c0
 800fd50:	200059cc 	.word	0x200059cc
 800fd54:	08023454 	.word	0x08023454
 800fd58:	200059d0 	.word	0x200059d0
 800fd5c:	08023484 	.word	0x08023484
 800fd60:	20000064 	.word	0x20000064
 800fd64:	20000068 	.word	0x20000068
 800fd68:	080237a8 	.word	0x080237a8
 800fd6c:	20000074 	.word	0x20000074
 800fd70:	080237b0 	.word	0x080237b0

0800fd74 <svCLI_Printf>:

static int svCLI_Printf(char* fmt,...)
{
 800fd74:	b40f      	push	{r0, r1, r2, r3}
 800fd76:	b580      	push	{r7, lr}
 800fd78:	b084      	sub	sp, #16
 800fd7a:	af00      	add	r7, sp, #0
static char msg[256];
  va_list ap;
  int len;

  va_start(ap, fmt);
 800fd7c:	f107 031c 	add.w	r3, r7, #28
 800fd80:	607b      	str	r3, [r7, #4]
  len = vsprintf(msg, fmt, ap);
 800fd82:	687a      	ldr	r2, [r7, #4]
 800fd84:	69b9      	ldr	r1, [r7, #24]
 800fd86:	480f      	ldr	r0, [pc, #60]	; (800fdc4 <svCLI_Printf+0x50>)
 800fd88:	f012 fb7e 	bl	8022488 <vsiprintf>
 800fd8c:	60b8      	str	r0, [r7, #8]
  va_end(ap);
  for (int i=0;i<len;i++) {
 800fd8e:	2300      	movs	r3, #0
 800fd90:	60fb      	str	r3, [r7, #12]
 800fd92:	e00a      	b.n	800fdaa <svCLI_Printf+0x36>
    svPutChar(msg[i]);
 800fd94:	4b0c      	ldr	r3, [pc, #48]	; (800fdc8 <svCLI_Printf+0x54>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	490a      	ldr	r1, [pc, #40]	; (800fdc4 <svCLI_Printf+0x50>)
 800fd9a:	68fa      	ldr	r2, [r7, #12]
 800fd9c:	440a      	add	r2, r1
 800fd9e:	7812      	ldrb	r2, [r2, #0]
 800fda0:	4610      	mov	r0, r2
 800fda2:	4798      	blx	r3
  for (int i=0;i<len;i++) {
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	3301      	adds	r3, #1
 800fda8:	60fb      	str	r3, [r7, #12]
 800fdaa:	68fa      	ldr	r2, [r7, #12]
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	dbf0      	blt.n	800fd94 <svCLI_Printf+0x20>
  }
  return len;
 800fdb2:	68bb      	ldr	r3, [r7, #8]
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3710      	adds	r7, #16
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fdbe:	b004      	add	sp, #16
 800fdc0:	4770      	bx	lr
 800fdc2:	bf00      	nop
 800fdc4:	200059ec 	.word	0x200059ec
 800fdc8:	200059d8 	.word	0x200059d8

0800fdcc <svCLI_ShowHelp>:

void svCLI_ShowHelp(void)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b084      	sub	sp, #16
 800fdd0:	af00      	add	r7, sp, #0
  if (svPutChar) {
 800fdd2:	4b2d      	ldr	r3, [pc, #180]	; (800fe88 <svCLI_ShowHelp+0xbc>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d04a      	beq.n	800fe70 <svCLI_ShowHelp+0xa4>
    if (sCLITableBegin != sCLITablEnd) {
 800fdda:	4b2c      	ldr	r3, [pc, #176]	; (800fe8c <svCLI_ShowHelp+0xc0>)
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	4b2c      	ldr	r3, [pc, #176]	; (800fe90 <svCLI_ShowHelp+0xc4>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d03e      	beq.n	800fe64 <svCLI_ShowHelp+0x98>
      for (unsigned int s=0;s<80;s++) svPutChar('=');
 800fde6:	2300      	movs	r3, #0
 800fde8:	60fb      	str	r3, [r7, #12]
 800fdea:	e006      	b.n	800fdfa <svCLI_ShowHelp+0x2e>
 800fdec:	4b26      	ldr	r3, [pc, #152]	; (800fe88 <svCLI_ShowHelp+0xbc>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	203d      	movs	r0, #61	; 0x3d
 800fdf2:	4798      	blx	r3
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	60fb      	str	r3, [r7, #12]
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2b4f      	cmp	r3, #79	; 0x4f
 800fdfe:	d9f5      	bls.n	800fdec <svCLI_ShowHelp+0x20>
      svCLI_Printf("\r\n");
 800fe00:	4824      	ldr	r0, [pc, #144]	; (800fe94 <svCLI_ShowHelp+0xc8>)
 800fe02:	f7ff ffb7 	bl	800fd74 <svCLI_Printf>
      SVCLI_t* pCLIEntry;
      int nCount = 1;
 800fe06:	2301      	movs	r3, #1
 800fe08:	607b      	str	r3, [r7, #4]
      for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800fe0a:	4b20      	ldr	r3, [pc, #128]	; (800fe8c <svCLI_ShowHelp+0xc0>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	60bb      	str	r3, [r7, #8]
 800fe10:	e012      	b.n	800fe38 <svCLI_ShowHelp+0x6c>
        svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 800fe12:	6879      	ldr	r1, [r7, #4]
 800fe14:	1c4b      	adds	r3, r1, #1
 800fe16:	607b      	str	r3, [r7, #4]
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	681a      	ldr	r2, [r3, #0]
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d002      	beq.n	800fe2a <svCLI_ShowHelp+0x5e>
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	685b      	ldr	r3, [r3, #4]
 800fe28:	e000      	b.n	800fe2c <svCLI_ShowHelp+0x60>
 800fe2a:	4b1b      	ldr	r3, [pc, #108]	; (800fe98 <svCLI_ShowHelp+0xcc>)
 800fe2c:	481b      	ldr	r0, [pc, #108]	; (800fe9c <svCLI_ShowHelp+0xd0>)
 800fe2e:	f7ff ffa1 	bl	800fd74 <svCLI_Printf>
      for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	330c      	adds	r3, #12
 800fe36:	60bb      	str	r3, [r7, #8]
 800fe38:	4b15      	ldr	r3, [pc, #84]	; (800fe90 <svCLI_ShowHelp+0xc4>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	68ba      	ldr	r2, [r7, #8]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d3e7      	bcc.n	800fe12 <svCLI_ShowHelp+0x46>
      }
      svCLI_Printf(AES_RESET);
 800fe42:	4817      	ldr	r0, [pc, #92]	; (800fea0 <svCLI_ShowHelp+0xd4>)
 800fe44:	f7ff ff96 	bl	800fd74 <svCLI_Printf>
      for (unsigned int s=0;s<80;s++) svPutChar('=');
 800fe48:	2300      	movs	r3, #0
 800fe4a:	603b      	str	r3, [r7, #0]
 800fe4c:	e006      	b.n	800fe5c <svCLI_ShowHelp+0x90>
 800fe4e:	4b0e      	ldr	r3, [pc, #56]	; (800fe88 <svCLI_ShowHelp+0xbc>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	203d      	movs	r0, #61	; 0x3d
 800fe54:	4798      	blx	r3
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	3301      	adds	r3, #1
 800fe5a:	603b      	str	r3, [r7, #0]
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	2b4f      	cmp	r3, #79	; 0x4f
 800fe60:	d9f5      	bls.n	800fe4e <svCLI_ShowHelp+0x82>
 800fe62:	e002      	b.n	800fe6a <svCLI_ShowHelp+0x9e>
    }
    else {  // No CLI Entry
      svCLI_Printf("No CLI Entries !!!");
 800fe64:	480f      	ldr	r0, [pc, #60]	; (800fea4 <svCLI_ShowHelp+0xd8>)
 800fe66:	f7ff ff85 	bl	800fd74 <svCLI_Printf>
    }
    svCLI_Printf("\r\n");
 800fe6a:	480a      	ldr	r0, [pc, #40]	; (800fe94 <svCLI_ShowHelp+0xc8>)
 800fe6c:	f7ff ff82 	bl	800fd74 <svCLI_Printf>
  }
  if (svCommit) {
 800fe70:	4b0d      	ldr	r3, [pc, #52]	; (800fea8 <svCLI_ShowHelp+0xdc>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d002      	beq.n	800fe7e <svCLI_ShowHelp+0xb2>
    svCommit();
 800fe78:	4b0b      	ldr	r3, [pc, #44]	; (800fea8 <svCLI_ShowHelp+0xdc>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	4798      	blx	r3
  }
}
 800fe7e:	bf00      	nop
 800fe80:	3710      	adds	r7, #16
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	200059d8 	.word	0x200059d8
 800fe8c:	200059cc 	.word	0x200059cc
 800fe90:	200059d0 	.word	0x200059d0
 800fe94:	080237bc 	.word	0x080237bc
 800fe98:	080237c0 	.word	0x080237c0
 800fe9c:	080237c4 	.word	0x080237c4
 800fea0:	080237e4 	.word	0x080237e4
 800fea4:	080237ec 	.word	0x080237ec
 800fea8:	200059dc 	.word	0x200059dc

0800feac <svCLI_KeepLoop>:

// FOR CAN SVCLI
BOOL svCLI_KeepLoop(void)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	af00      	add	r7, sp, #0
  if (Uart_Available(_DEF_UART1) == 0)
 800feb0:	2000      	movs	r0, #0
 800feb2:	f7f3 fe5d 	bl	8003b70 <Uart_Available>
 800feb6:	4603      	mov	r3, r0
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d101      	bne.n	800fec0 <svCLI_KeepLoop+0x14>
  {
    return TRUE;
 800febc:	2301      	movs	r3, #1
 800febe:	e000      	b.n	800fec2 <svCLI_KeepLoop+0x16>
  }
  else
  {
    return FALSE;
 800fec0:	2300      	movs	r3, #0
  }
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	bd80      	pop	{r7, pc}

0800fec6 <_strlenOffspace>:

// String length after stripped off space[0x20]
static int _strlenOffspace(const char* szString)
{
 800fec6:	b480      	push	{r7}
 800fec8:	b085      	sub	sp, #20
 800feca:	af00      	add	r7, sp, #0
 800fecc:	6078      	str	r0, [r7, #4]
  int nCount = 0;
 800fece:	2300      	movs	r3, #0
 800fed0:	60fb      	str	r3, [r7, #12]
  if ((szString == NULL) || (*szString == 0))
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d003      	beq.n	800fee0 <_strlenOffspace+0x1a>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d104      	bne.n	800feea <_strlenOffspace+0x24>
    return 0;
 800fee0:	2300      	movs	r3, #0
 800fee2:	e017      	b.n	800ff14 <_strlenOffspace+0x4e>
  // Strip off first spaces
  while (*szString == ' ') szString++;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	3301      	adds	r3, #1
 800fee8:	607b      	str	r3, [r7, #4]
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	2b20      	cmp	r3, #32
 800fef0:	d0f8      	beq.n	800fee4 <_strlenOffspace+0x1e>
  // Count
  while (*szString) {
 800fef2:	e008      	b.n	800ff06 <_strlenOffspace+0x40>
    if (*szString++ != ' ') {
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	1c5a      	adds	r2, r3, #1
 800fef8:	607a      	str	r2, [r7, #4]
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	2b20      	cmp	r3, #32
 800fefe:	d007      	beq.n	800ff10 <_strlenOffspace+0x4a>
      nCount++;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	3301      	adds	r3, #1
 800ff04:	60fb      	str	r3, [r7, #12]
  while (*szString) {
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d1f2      	bne.n	800fef4 <_strlenOffspace+0x2e>
 800ff0e:	e000      	b.n	800ff12 <_strlenOffspace+0x4c>
    }
    else
      break;
 800ff10:	bf00      	nop
  }
  return nCount;
 800ff12:	68fb      	ldr	r3, [r7, #12]
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3714      	adds	r7, #20
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr

0800ff20 <_toLower>:

static char _toLower(char c)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b083      	sub	sp, #12
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	4603      	mov	r3, r0
 800ff28:	71fb      	strb	r3, [r7, #7]
  if ((c >= 'A') && (c <= 'Z')) {
 800ff2a:	79fb      	ldrb	r3, [r7, #7]
 800ff2c:	2b40      	cmp	r3, #64	; 0x40
 800ff2e:	d905      	bls.n	800ff3c <_toLower+0x1c>
 800ff30:	79fb      	ldrb	r3, [r7, #7]
 800ff32:	2b5a      	cmp	r3, #90	; 0x5a
 800ff34:	d802      	bhi.n	800ff3c <_toLower+0x1c>
    c = (c - 'A') + 'a';
 800ff36:	79fb      	ldrb	r3, [r7, #7]
 800ff38:	3320      	adds	r3, #32
 800ff3a:	71fb      	strb	r3, [r7, #7]
  }
  return c;
 800ff3c:	79fb      	ldrb	r3, [r7, #7]
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	370c      	adds	r7, #12
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr

0800ff4a <_isPrintable>:

static int _isPrintable(char c)
{
 800ff4a:	b480      	push	{r7}
 800ff4c:	b083      	sub	sp, #12
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	4603      	mov	r3, r0
 800ff52:	71fb      	strb	r3, [r7, #7]
  if ((' ' <= c) && (c <= '~'))
 800ff54:	79fb      	ldrb	r3, [r7, #7]
 800ff56:	2b1f      	cmp	r3, #31
 800ff58:	d904      	bls.n	800ff64 <_isPrintable+0x1a>
 800ff5a:	79fb      	ldrb	r3, [r7, #7]
 800ff5c:	2b7e      	cmp	r3, #126	; 0x7e
 800ff5e:	d801      	bhi.n	800ff64 <_isPrintable+0x1a>
    return 1;
 800ff60:	2301      	movs	r3, #1
 800ff62:	e000      	b.n	800ff66 <_isPrintable+0x1c>
  return 0;
 800ff64:	2300      	movs	r3, #0
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	370c      	adds	r7, #12
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff70:	4770      	bx	lr

0800ff72 <_isHex>:

static int _isHex(char c)
{
 800ff72:	b480      	push	{r7}
 800ff74:	b083      	sub	sp, #12
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	4603      	mov	r3, r0
 800ff7a:	71fb      	strb	r3, [r7, #7]
  if (((c >= '0') && (c <= '9')) ||       \
 800ff7c:	79fb      	ldrb	r3, [r7, #7]
 800ff7e:	2b2f      	cmp	r3, #47	; 0x2f
 800ff80:	d902      	bls.n	800ff88 <_isHex+0x16>
 800ff82:	79fb      	ldrb	r3, [r7, #7]
 800ff84:	2b39      	cmp	r3, #57	; 0x39
 800ff86:	d90b      	bls.n	800ffa0 <_isHex+0x2e>
 800ff88:	79fb      	ldrb	r3, [r7, #7]
 800ff8a:	2b40      	cmp	r3, #64	; 0x40
 800ff8c:	d902      	bls.n	800ff94 <_isHex+0x22>
      ((c >= 'A') && (c <= 'F')) ||   \
 800ff8e:	79fb      	ldrb	r3, [r7, #7]
 800ff90:	2b46      	cmp	r3, #70	; 0x46
 800ff92:	d905      	bls.n	800ffa0 <_isHex+0x2e>
 800ff94:	79fb      	ldrb	r3, [r7, #7]
 800ff96:	2b60      	cmp	r3, #96	; 0x60
 800ff98:	d904      	bls.n	800ffa4 <_isHex+0x32>
      ((c >= 'a') && (c <= 'f')))
 800ff9a:	79fb      	ldrb	r3, [r7, #7]
 800ff9c:	2b66      	cmp	r3, #102	; 0x66
 800ff9e:	d801      	bhi.n	800ffa4 <_isHex+0x32>
    return 1;
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	e000      	b.n	800ffa6 <_isHex+0x34>
  return 0;
 800ffa4:	2300      	movs	r3, #0
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	370c      	adds	r7, #12
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr

0800ffb2 <_fromHex>:

static int _fromHex(char c) 
{
 800ffb2:	b480      	push	{r7}
 800ffb4:	b085      	sub	sp, #20
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	4603      	mov	r3, r0
 800ffba:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	60fb      	str	r3, [r7, #12]

  if ((c >= '0') && (c <= '9')) {
 800ffc0:	79fb      	ldrb	r3, [r7, #7]
 800ffc2:	2b2f      	cmp	r3, #47	; 0x2f
 800ffc4:	d906      	bls.n	800ffd4 <_fromHex+0x22>
 800ffc6:	79fb      	ldrb	r3, [r7, #7]
 800ffc8:	2b39      	cmp	r3, #57	; 0x39
 800ffca:	d803      	bhi.n	800ffd4 <_fromHex+0x22>
    ret = (c - '0');
 800ffcc:	79fb      	ldrb	r3, [r7, #7]
 800ffce:	3b30      	subs	r3, #48	; 0x30
 800ffd0:	60fb      	str	r3, [r7, #12]
 800ffd2:	e012      	b.n	800fffa <_fromHex+0x48>
  } 
  else if ((c >= 'a') && (c <= 'f')) {
 800ffd4:	79fb      	ldrb	r3, [r7, #7]
 800ffd6:	2b60      	cmp	r3, #96	; 0x60
 800ffd8:	d906      	bls.n	800ffe8 <_fromHex+0x36>
 800ffda:	79fb      	ldrb	r3, [r7, #7]
 800ffdc:	2b66      	cmp	r3, #102	; 0x66
 800ffde:	d803      	bhi.n	800ffe8 <_fromHex+0x36>
    ret = (c - 'a' + 0x0a);
 800ffe0:	79fb      	ldrb	r3, [r7, #7]
 800ffe2:	3b57      	subs	r3, #87	; 0x57
 800ffe4:	60fb      	str	r3, [r7, #12]
 800ffe6:	e008      	b.n	800fffa <_fromHex+0x48>
  } 
  else if ((c >= 'A') && (c <= 'F')) {
 800ffe8:	79fb      	ldrb	r3, [r7, #7]
 800ffea:	2b40      	cmp	r3, #64	; 0x40
 800ffec:	d905      	bls.n	800fffa <_fromHex+0x48>
 800ffee:	79fb      	ldrb	r3, [r7, #7]
 800fff0:	2b46      	cmp	r3, #70	; 0x46
 800fff2:	d802      	bhi.n	800fffa <_fromHex+0x48>
    ret = (c - 'A' + 0x0A);
 800fff4:	79fb      	ldrb	r3, [r7, #7]
 800fff6:	3b37      	subs	r3, #55	; 0x37
 800fff8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800fffa:	68fb      	ldr	r3, [r7, #12]
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3714      	adds	r7, #20
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	4770      	bx	lr

08010008 <_strNoCaseCmp>:

static int _strNoCaseCmp(const char *s1, const char *s2, int nLenghth)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b086      	sub	sp, #24
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	607a      	str	r2, [r7, #4]
  char c1, c2;

  if (nLenghth == 0)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d101      	bne.n	801001e <_strNoCaseCmp+0x16>
    return 0;
 801001a:	2300      	movs	r3, #0
 801001c:	e026      	b.n	801006c <_strNoCaseCmp+0x64>
  do {
    if ((c1 = _toLower(*s1++)) != (c2 = _toLower(*s2++))) {
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	1c5a      	adds	r2, r3, #1
 8010022:	60fa      	str	r2, [r7, #12]
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	4618      	mov	r0, r3
 8010028:	f7ff ff7a 	bl	800ff20 <_toLower>
 801002c:	4603      	mov	r3, r0
 801002e:	75fb      	strb	r3, [r7, #23]
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	1c5a      	adds	r2, r3, #1
 8010034:	60ba      	str	r2, [r7, #8]
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	4618      	mov	r0, r3
 801003a:	f7ff ff71 	bl	800ff20 <_toLower>
 801003e:	4603      	mov	r3, r0
 8010040:	75bb      	strb	r3, [r7, #22]
 8010042:	7dfa      	ldrb	r2, [r7, #23]
 8010044:	7dbb      	ldrb	r3, [r7, #22]
 8010046:	429a      	cmp	r2, r3
 8010048:	d009      	beq.n	801005e <_strNoCaseCmp+0x56>
      if ((c1 == 0) || (c2 == 0))
 801004a:	7dfb      	ldrb	r3, [r7, #23]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d00c      	beq.n	801006a <_strNoCaseCmp+0x62>
 8010050:	7dbb      	ldrb	r3, [r7, #22]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d009      	beq.n	801006a <_strNoCaseCmp+0x62>
          break;
      return ((unsigned char)c1 - (unsigned char)c2);
 8010056:	7dfa      	ldrb	r2, [r7, #23]
 8010058:	7dbb      	ldrb	r3, [r7, #22]
 801005a:	1ad3      	subs	r3, r2, r3
 801005c:	e006      	b.n	801006c <_strNoCaseCmp+0x64>
    }
  } while (--nLenghth != 0);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	3b01      	subs	r3, #1
 8010062:	607b      	str	r3, [r7, #4]
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d1d9      	bne.n	801001e <_strNoCaseCmp+0x16>
  return 0;
 801006a:	2300      	movs	r3, #0
}
 801006c:	4618      	mov	r0, r3
 801006e:	3718      	adds	r7, #24
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}

08010074 <_svMemCpy>:

static void _svMemCpy(char* dst, char *src, int nLength)
{
 8010074:	b480      	push	{r7}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
 801007a:	60f8      	str	r0, [r7, #12]
 801007c:	60b9      	str	r1, [r7, #8]
 801007e:	607a      	str	r2, [r7, #4]
  while (nLength--) {
 8010080:	e007      	b.n	8010092 <_svMemCpy+0x1e>
    *dst++=*src++;
 8010082:	68ba      	ldr	r2, [r7, #8]
 8010084:	1c53      	adds	r3, r2, #1
 8010086:	60bb      	str	r3, [r7, #8]
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	1c59      	adds	r1, r3, #1
 801008c:	60f9      	str	r1, [r7, #12]
 801008e:	7812      	ldrb	r2, [r2, #0]
 8010090:	701a      	strb	r2, [r3, #0]
  while (nLength--) {
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	1e5a      	subs	r2, r3, #1
 8010096:	607a      	str	r2, [r7, #4]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d1f2      	bne.n	8010082 <_svMemCpy+0xe>
  }
}
 801009c:	bf00      	nop
 801009e:	bf00      	nop
 80100a0:	3714      	adds	r7, #20
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr
	...

080100ac <_svClearLine>:

static void _svClearLine(void)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b082      	sub	sp, #8
 80100b0:	af00      	add	r7, sp, #0
  svPutChar('\r');
 80100b2:	4b16      	ldr	r3, [pc, #88]	; (801010c <_svClearLine+0x60>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	200d      	movs	r0, #13
 80100b8:	4798      	blx	r3
  // Remove Strings
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 80100ba:	2300      	movs	r3, #0
 80100bc:	607b      	str	r3, [r7, #4]
 80100be:	e006      	b.n	80100ce <_svClearLine+0x22>
    svPutChar(' ');
 80100c0:	4b12      	ldr	r3, [pc, #72]	; (801010c <_svClearLine+0x60>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	2020      	movs	r0, #32
 80100c6:	4798      	blx	r3
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	3301      	adds	r3, #1
 80100cc:	607b      	str	r3, [r7, #4]
 80100ce:	4b10      	ldr	r3, [pc, #64]	; (8010110 <_svClearLine+0x64>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	4a10      	ldr	r2, [pc, #64]	; (8010114 <_svClearLine+0x68>)
 80100d4:	6812      	ldr	r2, [r2, #0]
 80100d6:	441a      	add	r2, r3
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d8f0      	bhi.n	80100c0 <_svClearLine+0x14>
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 80100de:	2300      	movs	r3, #0
 80100e0:	603b      	str	r3, [r7, #0]
 80100e2:	e006      	b.n	80100f2 <_svClearLine+0x46>
    svPutChar('\b');
 80100e4:	4b09      	ldr	r3, [pc, #36]	; (801010c <_svClearLine+0x60>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	2008      	movs	r0, #8
 80100ea:	4798      	blx	r3
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	3301      	adds	r3, #1
 80100f0:	603b      	str	r3, [r7, #0]
 80100f2:	4b07      	ldr	r3, [pc, #28]	; (8010110 <_svClearLine+0x64>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	4a07      	ldr	r2, [pc, #28]	; (8010114 <_svClearLine+0x68>)
 80100f8:	6812      	ldr	r2, [r2, #0]
 80100fa:	441a      	add	r2, r3
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d8f0      	bhi.n	80100e4 <_svClearLine+0x38>
}
 8010102:	bf00      	nop
 8010104:	bf00      	nop
 8010106:	3708      	adds	r7, #8
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}
 801010c:	200059d8 	.word	0x200059d8
 8010110:	200059c8 	.word	0x200059c8
 8010114:	20000074 	.word	0x20000074

08010118 <svCLIHandleHistory>:

static void svCLIHandleHistory(CLI_HISTORY_CMD_e eHistoryCmd)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b084      	sub	sp, #16
 801011c:	af00      	add	r7, sp, #0
 801011e:	4603      	mov	r3, r0
 8010120:	71fb      	strb	r3, [r7, #7]
  switch (eHistoryCmd) {
 8010122:	79fb      	ldrb	r3, [r7, #7]
 8010124:	2b02      	cmp	r3, #2
 8010126:	d03f      	beq.n	80101a8 <svCLIHandleHistory+0x90>
 8010128:	2b02      	cmp	r3, #2
 801012a:	dc6f      	bgt.n	801020c <svCLIHandleHistory+0xf4>
 801012c:	2b00      	cmp	r3, #0
 801012e:	d002      	beq.n	8010136 <svCLIHandleHistory+0x1e>
 8010130:	2b01      	cmp	r3, #1
 8010132:	d052      	beq.n	80101da <svCLIHandleHistory+0xc2>
      if (snCLIHistoryPos >= snCLIHistoryCount)
        snCLIHistoryPos = 0;
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
      break;
    default:
      break;
 8010134:	e06a      	b.n	801020c <svCLIHandleHistory+0xf4>
      if (snCLIHistoryCount == MAX_CLI_HISTORY_BUFF_MAX) {  // Full
 8010136:	4b38      	ldr	r3, [pc, #224]	; (8010218 <svCLIHandleHistory+0x100>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	2b03      	cmp	r3, #3
 801013c:	d11c      	bne.n	8010178 <svCLIHandleHistory+0x60>
        for (int i=1;i<snCLIHistoryCount;i++) {
 801013e:	2301      	movs	r3, #1
 8010140:	60fb      	str	r3, [r7, #12]
 8010142:	e00f      	b.n	8010164 <svCLIHandleHistory+0x4c>
          _svMemCpy(&szCLIHistoryBuffer[i-1][0],&szCLIHistoryBuffer[i][0],MAX_CLI_CHARS);
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	3b01      	subs	r3, #1
 8010148:	01db      	lsls	r3, r3, #7
 801014a:	4a34      	ldr	r2, [pc, #208]	; (801021c <svCLIHandleHistory+0x104>)
 801014c:	1898      	adds	r0, r3, r2
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	01db      	lsls	r3, r3, #7
 8010152:	4a32      	ldr	r2, [pc, #200]	; (801021c <svCLIHandleHistory+0x104>)
 8010154:	4413      	add	r3, r2
 8010156:	2280      	movs	r2, #128	; 0x80
 8010158:	4619      	mov	r1, r3
 801015a:	f7ff ff8b 	bl	8010074 <_svMemCpy>
        for (int i=1;i<snCLIHistoryCount;i++) {
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	3301      	adds	r3, #1
 8010162:	60fb      	str	r3, [r7, #12]
 8010164:	4b2c      	ldr	r3, [pc, #176]	; (8010218 <svCLIHandleHistory+0x100>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	68fa      	ldr	r2, [r7, #12]
 801016a:	429a      	cmp	r2, r3
 801016c:	dbea      	blt.n	8010144 <svCLIHandleHistory+0x2c>
        snCLIHistoryCount--;
 801016e:	4b2a      	ldr	r3, [pc, #168]	; (8010218 <svCLIHandleHistory+0x100>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	3b01      	subs	r3, #1
 8010174:	4a28      	ldr	r2, [pc, #160]	; (8010218 <svCLIHandleHistory+0x100>)
 8010176:	6013      	str	r3, [r2, #0]
      _svMemCpy(&szCLIHistoryBuffer[snCLIHistoryCount][0], &szCLIString[0],MAX_CLI_CHARS);
 8010178:	4b27      	ldr	r3, [pc, #156]	; (8010218 <svCLIHandleHistory+0x100>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	01db      	lsls	r3, r3, #7
 801017e:	4a27      	ldr	r2, [pc, #156]	; (801021c <svCLIHandleHistory+0x104>)
 8010180:	4413      	add	r3, r2
 8010182:	2280      	movs	r2, #128	; 0x80
 8010184:	4926      	ldr	r1, [pc, #152]	; (8010220 <svCLIHandleHistory+0x108>)
 8010186:	4618      	mov	r0, r3
 8010188:	f7ff ff74 	bl	8010074 <_svMemCpy>
      if (snCLIHistoryCount < MAX_CLI_HISTORY_BUFF_MAX)
 801018c:	4b22      	ldr	r3, [pc, #136]	; (8010218 <svCLIHandleHistory+0x100>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	2b02      	cmp	r3, #2
 8010192:	dc04      	bgt.n	801019e <svCLIHandleHistory+0x86>
        snCLIHistoryCount++;
 8010194:	4b20      	ldr	r3, [pc, #128]	; (8010218 <svCLIHandleHistory+0x100>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	3301      	adds	r3, #1
 801019a:	4a1f      	ldr	r2, [pc, #124]	; (8010218 <svCLIHandleHistory+0x100>)
 801019c:	6013      	str	r3, [r2, #0]
      snCLIHistoryPos = snCLIHistoryCount;
 801019e:	4b1e      	ldr	r3, [pc, #120]	; (8010218 <svCLIHandleHistory+0x100>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	4a20      	ldr	r2, [pc, #128]	; (8010224 <svCLIHandleHistory+0x10c>)
 80101a4:	6013      	str	r3, [r2, #0]
      break;
 80101a6:	e032      	b.n	801020e <svCLIHandleHistory+0xf6>
      snCLIHistoryPos--;
 80101a8:	4b1e      	ldr	r3, [pc, #120]	; (8010224 <svCLIHandleHistory+0x10c>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	3b01      	subs	r3, #1
 80101ae:	4a1d      	ldr	r2, [pc, #116]	; (8010224 <svCLIHandleHistory+0x10c>)
 80101b0:	6013      	str	r3, [r2, #0]
      if (snCLIHistoryPos < 0)
 80101b2:	4b1c      	ldr	r3, [pc, #112]	; (8010224 <svCLIHandleHistory+0x10c>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	da04      	bge.n	80101c4 <svCLIHandleHistory+0xac>
        snCLIHistoryPos = snCLIHistoryCount - 1;
 80101ba:	4b17      	ldr	r3, [pc, #92]	; (8010218 <svCLIHandleHistory+0x100>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	3b01      	subs	r3, #1
 80101c0:	4a18      	ldr	r2, [pc, #96]	; (8010224 <svCLIHandleHistory+0x10c>)
 80101c2:	6013      	str	r3, [r2, #0]
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 80101c4:	4b17      	ldr	r3, [pc, #92]	; (8010224 <svCLIHandleHistory+0x10c>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	01db      	lsls	r3, r3, #7
 80101ca:	4a14      	ldr	r2, [pc, #80]	; (801021c <svCLIHandleHistory+0x104>)
 80101cc:	4413      	add	r3, r2
 80101ce:	2280      	movs	r2, #128	; 0x80
 80101d0:	4619      	mov	r1, r3
 80101d2:	4813      	ldr	r0, [pc, #76]	; (8010220 <svCLIHandleHistory+0x108>)
 80101d4:	f7ff ff4e 	bl	8010074 <_svMemCpy>
      break;
 80101d8:	e019      	b.n	801020e <svCLIHandleHistory+0xf6>
      snCLIHistoryPos++;
 80101da:	4b12      	ldr	r3, [pc, #72]	; (8010224 <svCLIHandleHistory+0x10c>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	3301      	adds	r3, #1
 80101e0:	4a10      	ldr	r2, [pc, #64]	; (8010224 <svCLIHandleHistory+0x10c>)
 80101e2:	6013      	str	r3, [r2, #0]
      if (snCLIHistoryPos >= snCLIHistoryCount)
 80101e4:	4b0f      	ldr	r3, [pc, #60]	; (8010224 <svCLIHandleHistory+0x10c>)
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	4b0b      	ldr	r3, [pc, #44]	; (8010218 <svCLIHandleHistory+0x100>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	db02      	blt.n	80101f6 <svCLIHandleHistory+0xde>
        snCLIHistoryPos = 0;
 80101f0:	4b0c      	ldr	r3, [pc, #48]	; (8010224 <svCLIHandleHistory+0x10c>)
 80101f2:	2200      	movs	r2, #0
 80101f4:	601a      	str	r2, [r3, #0]
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 80101f6:	4b0b      	ldr	r3, [pc, #44]	; (8010224 <svCLIHandleHistory+0x10c>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	01db      	lsls	r3, r3, #7
 80101fc:	4a07      	ldr	r2, [pc, #28]	; (801021c <svCLIHandleHistory+0x104>)
 80101fe:	4413      	add	r3, r2
 8010200:	2280      	movs	r2, #128	; 0x80
 8010202:	4619      	mov	r1, r3
 8010204:	4806      	ldr	r0, [pc, #24]	; (8010220 <svCLIHandleHistory+0x108>)
 8010206:	f7ff ff35 	bl	8010074 <_svMemCpy>
      break;
 801020a:	e000      	b.n	801020e <svCLIHandleHistory+0xf6>
      break;
 801020c:	bf00      	nop
  }
}
 801020e:	bf00      	nop
 8010210:	3710      	adds	r7, #16
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
 8010216:	bf00      	nop
 8010218:	200059c0 	.word	0x200059c0
 801021c:	20005840 	.word	0x20005840
 8010220:	200057c0 	.word	0x200057c0
 8010224:	200059c4 	.word	0x200059c4

08010228 <svCLI_Search>:

static SVCLI_t* svCLI_Search(char **line)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b086      	sub	sp, #24
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
  SVCLI_t* pCLIEntry;
  char* pCurrent = *line;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	613b      	str	r3, [r7, #16]
  // strip off leading spaces
  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 8010236:	e002      	b.n	801023e <svCLI_Search+0x16>
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	3301      	adds	r3, #1
 801023c:	613b      	str	r3, [r7, #16]
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d003      	beq.n	801024e <svCLI_Search+0x26>
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	2b20      	cmp	r3, #32
 801024c:	d0f4      	beq.n	8010238 <svCLI_Search+0x10>
  for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 801024e:	4b22      	ldr	r3, [pc, #136]	; (80102d8 <svCLI_Search+0xb0>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	617b      	str	r3, [r7, #20]
 8010254:	e035      	b.n	80102c2 <svCLI_Search+0x9a>
    int nCmdLength = _strlenOffspace(pCLIEntry->szCmd);
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	4618      	mov	r0, r3
 801025c:	f7ff fe33 	bl	800fec6 <_strlenOffspace>
 8010260:	60f8      	str	r0, [r7, #12]
    int nArgLength = _strlenOffspace(pCurrent);
 8010262:	6938      	ldr	r0, [r7, #16]
 8010264:	f7ff fe2f 	bl	800fec6 <_strlenOffspace>
 8010268:	60b8      	str	r0, [r7, #8]
    pCurrent[nArgLength] = 0; // NULL termination just after command for comparing
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	693a      	ldr	r2, [r7, #16]
 801026e:	4413      	add	r3, r2
 8010270:	2200      	movs	r2, #0
 8010272:	701a      	strb	r2, [r3, #0]
    if (nCmdLength >= nArgLength) {
 8010274:	68fa      	ldr	r2, [r7, #12]
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	429a      	cmp	r2, r3
 801027a:	db1f      	blt.n	80102bc <svCLI_Search+0x94>
      if (_strNoCaseCmp(pCurrent, pCLIEntry->szCmd, nCmdLength) == 0) { // Partial Command OK !!
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	68fa      	ldr	r2, [r7, #12]
 8010282:	4619      	mov	r1, r3
 8010284:	6938      	ldr	r0, [r7, #16]
 8010286:	f7ff febf 	bl	8010008 <_strNoCaseCmp>
 801028a:	4603      	mov	r3, r0
 801028c:	2b00      	cmp	r3, #0
 801028e:	d115      	bne.n	80102bc <svCLI_Search+0x94>
        pCurrent += (nArgLength + 1);
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	3301      	adds	r3, #1
 8010294:	693a      	ldr	r2, [r7, #16]
 8010296:	4413      	add	r3, r2
 8010298:	613b      	str	r3, [r7, #16]
        // strip off trailing spaces
        while (*pCurrent && *pCurrent == ' ') pCurrent++;
 801029a:	e002      	b.n	80102a2 <svCLI_Search+0x7a>
 801029c:	693b      	ldr	r3, [r7, #16]
 801029e:	3301      	adds	r3, #1
 80102a0:	613b      	str	r3, [r7, #16]
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d003      	beq.n	80102b2 <svCLI_Search+0x8a>
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	2b20      	cmp	r3, #32
 80102b0:	d0f4      	beq.n	801029c <svCLI_Search+0x74>
        *line = pCurrent;   // remove command & return
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	693a      	ldr	r2, [r7, #16]
 80102b6:	601a      	str	r2, [r3, #0]

        return pCLIEntry;
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	e008      	b.n	80102ce <svCLI_Search+0xa6>
  for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	330c      	adds	r3, #12
 80102c0:	617b      	str	r3, [r7, #20]
 80102c2:	4b06      	ldr	r3, [pc, #24]	; (80102dc <svCLI_Search+0xb4>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	697a      	ldr	r2, [r7, #20]
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d3c4      	bcc.n	8010256 <svCLI_Search+0x2e>
      }
    }
  }
  return NULL;
 80102cc:	2300      	movs	r3, #0
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3718      	adds	r7, #24
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	200059cc 	.word	0x200059cc
 80102dc:	200059d0 	.word	0x200059d0

080102e0 <svCLI_ParseNumber>:

int svCLI_ParseNumber(char *s, unsigned int *val, char **res, char *delimiter)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b08a      	sub	sp, #40	; 0x28
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	60f8      	str	r0, [r7, #12]
 80102e8:	60b9      	str	r1, [r7, #8]
 80102ea:	607a      	str	r2, [r7, #4]
 80102ec:	603b      	str	r3, [r7, #0]
  int first = 1;
 80102ee:	2301      	movs	r3, #1
 80102f0:	627b      	str	r3, [r7, #36]	; 0x24
  int radix = 10;
 80102f2:	230a      	movs	r3, #10
 80102f4:	623b      	str	r3, [r7, #32]
  char c;
  unsigned long result = 0;
 80102f6:	2300      	movs	r3, #0
 80102f8:	61fb      	str	r3, [r7, #28]
  int digit;
    // strip off leading spaces
    while (*s == ' ') s++;
 80102fa:	e002      	b.n	8010302 <svCLI_ParseNumber+0x22>
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	3301      	adds	r3, #1
 8010300:	60fb      	str	r3, [r7, #12]
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	781b      	ldrb	r3, [r3, #0]
 8010306:	2b20      	cmp	r3, #32
 8010308:	d0f8      	beq.n	80102fc <svCLI_ParseNumber+0x1c>
    if (*s == 0)
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	781b      	ldrb	r3, [r3, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d14d      	bne.n	80103ae <svCLI_ParseNumber+0xce>
      return 0;
 8010312:	2300      	movs	r3, #0
 8010314:	e05b      	b.n	80103ce <svCLI_ParseNumber+0xee>
    while (*s) {
      if (first && (s[0] == '0') && (_toLower(s[1]) == 'x')) {
 8010316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010318:	2b00      	cmp	r3, #0
 801031a:	d011      	beq.n	8010340 <svCLI_ParseNumber+0x60>
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	2b30      	cmp	r3, #48	; 0x30
 8010322:	d10d      	bne.n	8010340 <svCLI_ParseNumber+0x60>
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	3301      	adds	r3, #1
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	4618      	mov	r0, r3
 801032c:	f7ff fdf8 	bl	800ff20 <_toLower>
 8010330:	4603      	mov	r3, r0
 8010332:	2b78      	cmp	r3, #120	; 0x78
 8010334:	d104      	bne.n	8010340 <svCLI_ParseNumber+0x60>
        radix = 16;
 8010336:	2310      	movs	r3, #16
 8010338:	623b      	str	r3, [r7, #32]
        s += 2;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	3302      	adds	r3, #2
 801033e:	60fb      	str	r3, [r7, #12]
      }
      first = 0;
 8010340:	2300      	movs	r3, #0
 8010342:	627b      	str	r3, [r7, #36]	; 0x24
      c = *s++;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	1c5a      	adds	r2, r3, #1
 8010348:	60fa      	str	r2, [r7, #12]
 801034a:	781b      	ldrb	r3, [r3, #0]
 801034c:	75fb      	strb	r3, [r7, #23]
      if (_isHex(c) && ((digit = _fromHex(c)) < radix)) {
 801034e:	7dfb      	ldrb	r3, [r7, #23]
 8010350:	4618      	mov	r0, r3
 8010352:	f7ff fe0e 	bl	800ff72 <_isHex>
 8010356:	4603      	mov	r3, r0
 8010358:	2b00      	cmp	r3, #0
 801035a:	d010      	beq.n	801037e <svCLI_ParseNumber+0x9e>
 801035c:	7dfb      	ldrb	r3, [r7, #23]
 801035e:	4618      	mov	r0, r3
 8010360:	f7ff fe27 	bl	800ffb2 <_fromHex>
 8010364:	6138      	str	r0, [r7, #16]
 8010366:	693a      	ldr	r2, [r7, #16]
 8010368:	6a3b      	ldr	r3, [r7, #32]
 801036a:	429a      	cmp	r2, r3
 801036c:	da07      	bge.n	801037e <svCLI_ParseNumber+0x9e>
        // Valid digit
        result = (result * radix) + digit;
 801036e:	6a3b      	ldr	r3, [r7, #32]
 8010370:	69fa      	ldr	r2, [r7, #28]
 8010372:	fb03 f202 	mul.w	r2, r3, r2
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	4413      	add	r3, r2
 801037a:	61fb      	str	r3, [r7, #28]
 801037c:	e017      	b.n	80103ae <svCLI_ParseNumber+0xce>
      } 
      else {
        if (delimiter != (char *)0) {
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d012      	beq.n	80103aa <svCLI_ParseNumber+0xca>
          // See if this character is one of the delimiters
          char *dp = delimiter;
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	61bb      	str	r3, [r7, #24]
          while (*dp && (c != *dp)) dp++;
 8010388:	e002      	b.n	8010390 <svCLI_ParseNumber+0xb0>
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	3301      	adds	r3, #1
 801038e:	61bb      	str	r3, [r7, #24]
 8010390:	69bb      	ldr	r3, [r7, #24]
 8010392:	781b      	ldrb	r3, [r3, #0]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d004      	beq.n	80103a2 <svCLI_ParseNumber+0xc2>
 8010398:	69bb      	ldr	r3, [r7, #24]
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	7dfa      	ldrb	r2, [r7, #23]
 801039e:	429a      	cmp	r2, r3
 80103a0:	d1f3      	bne.n	801038a <svCLI_ParseNumber+0xaa>
          if (*dp) break;  // Found a good delimiter
 80103a2:	69bb      	ldr	r3, [r7, #24]
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d106      	bne.n	80103b8 <svCLI_ParseNumber+0xd8>
        }
        return 0;  // invalid number
 80103aa:	2300      	movs	r3, #0
 80103ac:	e00f      	b.n	80103ce <svCLI_ParseNumber+0xee>
    while (*s) {
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d1af      	bne.n	8010316 <svCLI_ParseNumber+0x36>
 80103b6:	e000      	b.n	80103ba <svCLI_ParseNumber+0xda>
          if (*dp) break;  // Found a good delimiter
 80103b8:	bf00      	nop
      }
    }
    *val = result;
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	69fa      	ldr	r2, [r7, #28]
 80103be:	601a      	str	r2, [r3, #0]
    if (res != (char **)0) {
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d002      	beq.n	80103cc <svCLI_ParseNumber+0xec>
      *res = s;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	68fa      	ldr	r2, [r7, #12]
 80103ca:	601a      	str	r2, [r3, #0]
    }
    return 1;
 80103cc:	2301      	movs	r3, #1
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3728      	adds	r7, #40	; 0x28
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}
	...

080103d8 <svCLI_ParsenExecute>:

static void svCLI_ParsenExecute()
{
 80103d8:	b590      	push	{r4, r7, lr}
 80103da:	b089      	sub	sp, #36	; 0x24
 80103dc:	af00      	add	r7, sp, #0
  if (s_bPwdOK == FALSE) {  // Input Password
 80103de:	4b3a      	ldr	r3, [pc, #232]	; (80104c8 <svCLI_ParsenExecute+0xf0>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d120      	bne.n	8010428 <svCLI_ParsenExecute+0x50>
    if (strcmp(szCLIString, DEFAULT_PASSWORD) == 0) {
 80103e6:	4939      	ldr	r1, [pc, #228]	; (80104cc <svCLI_ParsenExecute+0xf4>)
 80103e8:	4839      	ldr	r0, [pc, #228]	; (80104d0 <svCLI_ParsenExecute+0xf8>)
 80103ea:	f7ef ff51 	bl	8000290 <strcmp>
 80103ee:	4603      	mov	r3, r0
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d115      	bne.n	8010420 <svCLI_ParsenExecute+0x48>
      s_bPwdOK = TRUE;
 80103f4:	4b34      	ldr	r3, [pc, #208]	; (80104c8 <svCLI_ParsenExecute+0xf0>)
 80103f6:	2201      	movs	r2, #1
 80103f8:	601a      	str	r2, [r3, #0]
      svCLI_Printf("Welcome !!\r\n");
 80103fa:	4836      	ldr	r0, [pc, #216]	; (80104d4 <svCLI_ParsenExecute+0xfc>)
 80103fc:	f7ff fcba 	bl	800fd74 <svCLI_Printf>
      strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 8010400:	4b35      	ldr	r3, [pc, #212]	; (80104d8 <svCLI_ParsenExecute+0x100>)
 8010402:	4a36      	ldr	r2, [pc, #216]	; (80104dc <svCLI_ParsenExecute+0x104>)
 8010404:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010408:	6018      	str	r0, [r3, #0]
 801040a:	3304      	adds	r3, #4
 801040c:	8019      	strh	r1, [r3, #0]
 801040e:	3302      	adds	r3, #2
 8010410:	0c0a      	lsrs	r2, r1, #16
 8010412:	701a      	strb	r2, [r3, #0]
      snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 8010414:	4b32      	ldr	r3, [pc, #200]	; (80104e0 <svCLI_ParsenExecute+0x108>)
 8010416:	2206      	movs	r2, #6
 8010418:	601a      	str	r2, [r3, #0]
      svCLI_ShowHelp();
 801041a:	f7ff fcd7 	bl	800fdcc <svCLI_ShowHelp>
    }
    else {
      svCLI_Printf("Invalid Password !!\r\n");
    }
    return;
 801041e:	e04f      	b.n	80104c0 <svCLI_ParsenExecute+0xe8>
      svCLI_Printf("Invalid Password !!\r\n");
 8010420:	4830      	ldr	r0, [pc, #192]	; (80104e4 <svCLI_ParsenExecute+0x10c>)
 8010422:	f7ff fca7 	bl	800fd74 <svCLI_Printf>
    return;
 8010426:	e04b      	b.n	80104c0 <svCLI_ParsenExecute+0xe8>
  }
  SVCLI_t* pCLIEntry;
  if (sCLITableBegin == sCLITablEnd) {
 8010428:	4b2f      	ldr	r3, [pc, #188]	; (80104e8 <svCLI_ParsenExecute+0x110>)
 801042a:	681a      	ldr	r2, [r3, #0]
 801042c:	4b2f      	ldr	r3, [pc, #188]	; (80104ec <svCLI_ParsenExecute+0x114>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	429a      	cmp	r2, r3
 8010432:	d103      	bne.n	801043c <svCLI_ParsenExecute+0x64>
    svCLI_Printf("No CLI Entries !!!\r\n");
 8010434:	482e      	ldr	r0, [pc, #184]	; (80104f0 <svCLI_ParsenExecute+0x118>)
 8010436:	f7ff fc9d 	bl	800fd74 <svCLI_Printf>
    return;
 801043a:	e041      	b.n	80104c0 <svCLI_ParsenExecute+0xe8>
  }
  char* pLine = szCLIString;
 801043c:	4b24      	ldr	r3, [pc, #144]	; (80104d0 <svCLI_ParsenExecute+0xf8>)
 801043e:	613b      	str	r3, [r7, #16]
  pCLIEntry = svCLI_Search(&pLine);
 8010440:	f107 0310 	add.w	r3, r7, #16
 8010444:	4618      	mov	r0, r3
 8010446:	f7ff feef 	bl	8010228 <svCLI_Search>
 801044a:	61b8      	str	r0, [r7, #24]
  if (pCLIEntry) {
 801044c:	69bb      	ldr	r3, [r7, #24]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d033      	beq.n	80104ba <svCLI_ParsenExecute+0xe2>
    // Parse more for CLI function
    unsigned int nFirst, nSecond, nCount;
    nCount = 0;
 8010452:	2300      	movs	r3, #0
 8010454:	61fb      	str	r3, [r7, #28]
    nFirst = 0;
 8010456:	2300      	movs	r3, #0
 8010458:	60fb      	str	r3, [r7, #12]
    nSecond = 0;
 801045a:	2300      	movs	r3, #0
 801045c:	60bb      	str	r3, [r7, #8]
    char* pParseLine = pLine;
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	617b      	str	r3, [r7, #20]
    char delim[3] = ", ";
 8010462:	4a24      	ldr	r2, [pc, #144]	; (80104f4 <svCLI_ParsenExecute+0x11c>)
 8010464:	1d3b      	adds	r3, r7, #4
 8010466:	6812      	ldr	r2, [r2, #0]
 8010468:	4611      	mov	r1, r2
 801046a:	8019      	strh	r1, [r3, #0]
 801046c:	3302      	adds	r3, #2
 801046e:	0c12      	lsrs	r2, r2, #16
 8010470:	701a      	strb	r2, [r3, #0]
    if (svCLI_ParseNumber(pLine, &nFirst, &pLine, delim)) {
 8010472:	6938      	ldr	r0, [r7, #16]
 8010474:	1d3b      	adds	r3, r7, #4
 8010476:	f107 0210 	add.w	r2, r7, #16
 801047a:	f107 010c 	add.w	r1, r7, #12
 801047e:	f7ff ff2f 	bl	80102e0 <svCLI_ParseNumber>
 8010482:	4603      	mov	r3, r0
 8010484:	2b00      	cmp	r3, #0
 8010486:	d010      	beq.n	80104aa <svCLI_ParsenExecute+0xd2>
      nCount++;
 8010488:	69fb      	ldr	r3, [r7, #28]
 801048a:	3301      	adds	r3, #1
 801048c:	61fb      	str	r3, [r7, #28]
      if (svCLI_ParseNumber(pLine, &nSecond, &pLine, delim)) {
 801048e:	6938      	ldr	r0, [r7, #16]
 8010490:	1d3b      	adds	r3, r7, #4
 8010492:	f107 0210 	add.w	r2, r7, #16
 8010496:	f107 0108 	add.w	r1, r7, #8
 801049a:	f7ff ff21 	bl	80102e0 <svCLI_ParseNumber>
 801049e:	4603      	mov	r3, r0
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d002      	beq.n	80104aa <svCLI_ParsenExecute+0xd2>
        nCount++;
 80104a4:	69fb      	ldr	r3, [r7, #28]
 80104a6:	3301      	adds	r3, #1
 80104a8:	61fb      	str	r3, [r7, #28]
      }
    }
    pCLIEntry->func(pParseLine,nCount,nFirst,nSecond);
 80104aa:	69bb      	ldr	r3, [r7, #24]
 80104ac:	689c      	ldr	r4, [r3, #8]
 80104ae:	68fa      	ldr	r2, [r7, #12]
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	69f9      	ldr	r1, [r7, #28]
 80104b4:	6978      	ldr	r0, [r7, #20]
 80104b6:	47a0      	blx	r4
 80104b8:	e002      	b.n	80104c0 <svCLI_ParsenExecute+0xe8>
  }
  else {
    svCLI_Printf("CLI command Not Found !! - Press Help\r\n");
 80104ba:	480f      	ldr	r0, [pc, #60]	; (80104f8 <svCLI_ParsenExecute+0x120>)
 80104bc:	f7ff fc5a 	bl	800fd74 <svCLI_Printf>
  }
}
 80104c0:	3724      	adds	r7, #36	; 0x24
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd90      	pop	{r4, r7, pc}
 80104c6:	bf00      	nop
 80104c8:	20000064 	.word	0x20000064
 80104cc:	08023800 	.word	0x08023800
 80104d0:	200057c0 	.word	0x200057c0
 80104d4:	0802380c 	.word	0x0802380c
 80104d8:	20000068 	.word	0x20000068
 80104dc:	080237a8 	.word	0x080237a8
 80104e0:	20000074 	.word	0x20000074
 80104e4:	0802381c 	.word	0x0802381c
 80104e8:	200059cc 	.word	0x200059cc
 80104ec:	200059d0 	.word	0x200059d0
 80104f0:	08023834 	.word	0x08023834
 80104f4:	08023874 	.word	0x08023874
 80104f8:	0802384c 	.word	0x0802384c

080104fc <svCLI_SetBypassFtn>:

// hellosmk 210225 added
void svCLI_SetBypassFtn(SVCLI_BYPASS_FUNC pfnBypass, char* szPrompt, char szExit, BOOL bEnter)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b086      	sub	sp, #24
 8010500:	af00      	add	r7, sp, #0
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	60b9      	str	r1, [r7, #8]
 8010506:	603b      	str	r3, [r7, #0]
 8010508:	4613      	mov	r3, r2
 801050a:	71fb      	strb	r3, [r7, #7]
  if ((pfnBypass == NULL) || (szPrompt == NULL) || (szExit == NULL)) {
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d005      	beq.n	801051e <svCLI_SetBypassFtn+0x22>
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d002      	beq.n	801051e <svCLI_SetBypassFtn+0x22>
 8010518:	79fb      	ldrb	r3, [r7, #7]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d136      	bne.n	801058c <svCLI_SetBypassFtn+0x90>
    if (svBypass == NULL) {
 801051e:	4b28      	ldr	r3, [pc, #160]	; (80105c0 <svCLI_SetBypassFtn+0xc4>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d048      	beq.n	80105b8 <svCLI_SetBypassFtn+0xbc>
      // Nothing to do..
      return;
    }
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 8010526:	4b27      	ldr	r3, [pc, #156]	; (80105c4 <svCLI_SetBypassFtn+0xc8>)
 8010528:	4a27      	ldr	r2, [pc, #156]	; (80105c8 <svCLI_SetBypassFtn+0xcc>)
 801052a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801052e:	6018      	str	r0, [r3, #0]
 8010530:	3304      	adds	r3, #4
 8010532:	8019      	strh	r1, [r3, #0]
 8010534:	3302      	adds	r3, #2
 8010536:	0c0a      	lsrs	r2, r1, #16
 8010538:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 801053a:	4b24      	ldr	r3, [pc, #144]	; (80105cc <svCLI_SetBypassFtn+0xd0>)
 801053c:	2206      	movs	r2, #6
 801053e:	601a      	str	r2, [r3, #0]
    svBypass = NULL;
 8010540:	4b1f      	ldr	r3, [pc, #124]	; (80105c0 <svCLI_SetBypassFtn+0xc4>)
 8010542:	2200      	movs	r2, #0
 8010544:	601a      	str	r2, [r3, #0]

    svExit = NULL;
 8010546:	4b22      	ldr	r3, [pc, #136]	; (80105d0 <svCLI_SetBypassFtn+0xd4>)
 8010548:	2200      	movs	r2, #0
 801054a:	701a      	strb	r2, [r3, #0]
    sbEnter = FALSE;
 801054c:	4b21      	ldr	r3, [pc, #132]	; (80105d4 <svCLI_SetBypassFtn+0xd8>)
 801054e:	2200      	movs	r2, #0
 8010550:	601a      	str	r2, [r3, #0]

    scntCLIString = 0;  // Clean Up Char
 8010552:	4b21      	ldr	r3, [pc, #132]	; (80105d8 <svCLI_SetBypassFtn+0xdc>)
 8010554:	2200      	movs	r2, #0
 8010556:	601a      	str	r2, [r3, #0]
    // clean up line string
    for (int i=0;i<MAX_CLI_CHARS;i++) {
 8010558:	2300      	movs	r3, #0
 801055a:	617b      	str	r3, [r7, #20]
 801055c:	e007      	b.n	801056e <svCLI_SetBypassFtn+0x72>
      szCLIString[i] = '\0';
 801055e:	4a1f      	ldr	r2, [pc, #124]	; (80105dc <svCLI_SetBypassFtn+0xe0>)
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	4413      	add	r3, r2
 8010564:	2200      	movs	r2, #0
 8010566:	701a      	strb	r2, [r3, #0]
    for (int i=0;i<MAX_CLI_CHARS;i++) {
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	3301      	adds	r3, #1
 801056c:	617b      	str	r3, [r7, #20]
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	2b7f      	cmp	r3, #127	; 0x7f
 8010572:	ddf4      	ble.n	801055e <svCLI_SetBypassFtn+0x62>
    }
    svCLI_Printf("\r\nExit Bypass Mode\r\n%s", szCLI_PROMPT);
 8010574:	4913      	ldr	r1, [pc, #76]	; (80105c4 <svCLI_SetBypassFtn+0xc8>)
 8010576:	481a      	ldr	r0, [pc, #104]	; (80105e0 <svCLI_SetBypassFtn+0xe4>)
 8010578:	f7ff fbfc 	bl	800fd74 <svCLI_Printf>

    if (svCommit) {
 801057c:	4b19      	ldr	r3, [pc, #100]	; (80105e4 <svCLI_SetBypassFtn+0xe8>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d01a      	beq.n	80105ba <svCLI_SetBypassFtn+0xbe>
      svCommit();
 8010584:	4b17      	ldr	r3, [pc, #92]	; (80105e4 <svCLI_SetBypassFtn+0xe8>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	4798      	blx	r3
    if (svCommit) {
 801058a:	e016      	b.n	80105ba <svCLI_SetBypassFtn+0xbe>
    }
  }
  else {
    strncpy(szCLI_PROMPT, szPrompt, sizeof(szCLI_PROMPT) - 1);
 801058c:	2209      	movs	r2, #9
 801058e:	68b9      	ldr	r1, [r7, #8]
 8010590:	480c      	ldr	r0, [pc, #48]	; (80105c4 <svCLI_SetBypassFtn+0xc8>)
 8010592:	f011 ffb5 	bl	8022500 <strncpy>
    snCLI_PROMPT_LENGTH = strlen(szCLI_PROMPT);
 8010596:	480b      	ldr	r0, [pc, #44]	; (80105c4 <svCLI_SetBypassFtn+0xc8>)
 8010598:	f7ef fe84 	bl	80002a4 <strlen>
 801059c:	4603      	mov	r3, r0
 801059e:	461a      	mov	r2, r3
 80105a0:	4b0a      	ldr	r3, [pc, #40]	; (80105cc <svCLI_SetBypassFtn+0xd0>)
 80105a2:	601a      	str	r2, [r3, #0]
    svBypass = pfnBypass;
 80105a4:	4a06      	ldr	r2, [pc, #24]	; (80105c0 <svCLI_SetBypassFtn+0xc4>)
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	6013      	str	r3, [r2, #0]
    svExit = szExit;
 80105aa:	4a09      	ldr	r2, [pc, #36]	; (80105d0 <svCLI_SetBypassFtn+0xd4>)
 80105ac:	79fb      	ldrb	r3, [r7, #7]
 80105ae:	7013      	strb	r3, [r2, #0]
    sbEnter = bEnter;
 80105b0:	4a08      	ldr	r2, [pc, #32]	; (80105d4 <svCLI_SetBypassFtn+0xd8>)
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	6013      	str	r3, [r2, #0]
 80105b6:	e000      	b.n	80105ba <svCLI_SetBypassFtn+0xbe>
      return;
 80105b8:	bf00      	nop
  }
}
 80105ba:	3718      	adds	r7, #24
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}
 80105c0:	200059e0 	.word	0x200059e0
 80105c4:	20000068 	.word	0x20000068
 80105c8:	080237a8 	.word	0x080237a8
 80105cc:	20000074 	.word	0x20000074
 80105d0:	200059e4 	.word	0x200059e4
 80105d4:	200059e8 	.word	0x200059e8
 80105d8:	200059c8 	.word	0x200059c8
 80105dc:	200057c0 	.word	0x200057c0
 80105e0:	08023878 	.word	0x08023878
 80105e4:	200059dc 	.word	0x200059dc

080105e8 <svCLI_Handler>:

void svCLI_Handler(void)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b084      	sub	sp, #16
 80105ec:	af00      	add	r7, sp, #0
  if (sbFirst) {
    svCLI_Printf("\r\n%s", szCLI_PROMPT);
    sbFirst = 0;
  }
#endif
  if (svGetChar) {
 80105ee:	4b92      	ldr	r3, [pc, #584]	; (8010838 <svCLI_Handler+0x250>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	f000 8114 	beq.w	8010820 <svCLI_Handler+0x238>
    char bSkipPrompt = 0;
 80105f8:	2300      	movs	r3, #0
 80105fa:	73fb      	strb	r3, [r7, #15]
    char szChar = svGetChar();
 80105fc:	4b8e      	ldr	r3, [pc, #568]	; (8010838 <svCLI_Handler+0x250>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	4798      	blx	r3
 8010602:	4603      	mov	r3, r0
 8010604:	71fb      	strb	r3, [r7, #7]
    if ((szChar != 0) && (szChar != '\n')) {
 8010606:	79fb      	ldrb	r3, [r7, #7]
 8010608:	2b00      	cmp	r3, #0
 801060a:	f000 8109 	beq.w	8010820 <svCLI_Handler+0x238>
 801060e:	79fb      	ldrb	r3, [r7, #7]
 8010610:	2b0a      	cmp	r3, #10
 8010612:	f000 8105 	beq.w	8010820 <svCLI_Handler+0x238>
      if (szChar == '\r') {
 8010616:	79fb      	ldrb	r3, [r7, #7]
 8010618:	2b0d      	cmp	r3, #13
 801061a:	d154      	bne.n	80106c6 <svCLI_Handler+0xde>
        sbInEsc = 0;
 801061c:	4b87      	ldr	r3, [pc, #540]	; (801083c <svCLI_Handler+0x254>)
 801061e:	2200      	movs	r2, #0
 8010620:	701a      	strb	r2, [r3, #0]
        svCLI_Printf("\r\n");
 8010622:	4887      	ldr	r0, [pc, #540]	; (8010840 <svCLI_Handler+0x258>)
 8010624:	f7ff fba6 	bl	800fd74 <svCLI_Printf>
        if (scntCLIString > 0) {
 8010628:	4b86      	ldr	r3, [pc, #536]	; (8010844 <svCLI_Handler+0x25c>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d031      	beq.n	8010694 <svCLI_Handler+0xac>
          // Parse and Execute
          szCLIString[scntCLIString] = '\0';  // NULL Termination
 8010630:	4b84      	ldr	r3, [pc, #528]	; (8010844 <svCLI_Handler+0x25c>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	4a84      	ldr	r2, [pc, #528]	; (8010848 <svCLI_Handler+0x260>)
 8010636:	2100      	movs	r1, #0
 8010638:	54d1      	strb	r1, [r2, r3]
          // Save to history Buffer
          svCLIHandleHistory(CLI_HISTORY_ADD);
 801063a:	2000      	movs	r0, #0
 801063c:	f7ff fd6c 	bl	8010118 <svCLIHandleHistory>
          // Call Parser
          if (svBypass) { // hellosmk 210225 added
 8010640:	4b82      	ldr	r3, [pc, #520]	; (801084c <svCLI_Handler+0x264>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d011      	beq.n	801066c <svCLI_Handler+0x84>
            bSkipPrompt = 1;
 8010648:	2301      	movs	r3, #1
 801064a:	73fb      	strb	r3, [r7, #15]
            szCLIString[scntCLIString] = '\r';
 801064c:	4b7d      	ldr	r3, [pc, #500]	; (8010844 <svCLI_Handler+0x25c>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	4a7d      	ldr	r2, [pc, #500]	; (8010848 <svCLI_Handler+0x260>)
 8010652:	210d      	movs	r1, #13
 8010654:	54d1      	strb	r1, [r2, r3]
            szCLIString[scntCLIString+1] = '\0';
 8010656:	4b7b      	ldr	r3, [pc, #492]	; (8010844 <svCLI_Handler+0x25c>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	3301      	adds	r3, #1
 801065c:	4a7a      	ldr	r2, [pc, #488]	; (8010848 <svCLI_Handler+0x260>)
 801065e:	2100      	movs	r1, #0
 8010660:	54d1      	strb	r1, [r2, r3]
            svBypass(szCLIString);
 8010662:	4b7a      	ldr	r3, [pc, #488]	; (801084c <svCLI_Handler+0x264>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	4878      	ldr	r0, [pc, #480]	; (8010848 <svCLI_Handler+0x260>)
 8010668:	4798      	blx	r3
 801066a:	e001      	b.n	8010670 <svCLI_Handler+0x88>
          }
          else {
            svCLI_ParsenExecute();
 801066c:	f7ff feb4 	bl	80103d8 <svCLI_ParsenExecute>
          }
          scntCLIString = 0;  // Clean Up Char
 8010670:	4b74      	ldr	r3, [pc, #464]	; (8010844 <svCLI_Handler+0x25c>)
 8010672:	2200      	movs	r2, #0
 8010674:	601a      	str	r2, [r3, #0]
          // clean up line string
          for (int i=0;i<MAX_CLI_CHARS;i++) {
 8010676:	2300      	movs	r3, #0
 8010678:	60bb      	str	r3, [r7, #8]
 801067a:	e007      	b.n	801068c <svCLI_Handler+0xa4>
            szCLIString[i] = '\0';
 801067c:	4a72      	ldr	r2, [pc, #456]	; (8010848 <svCLI_Handler+0x260>)
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	4413      	add	r3, r2
 8010682:	2200      	movs	r2, #0
 8010684:	701a      	strb	r2, [r3, #0]
          for (int i=0;i<MAX_CLI_CHARS;i++) {
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	3301      	adds	r3, #1
 801068a:	60bb      	str	r3, [r7, #8]
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	2b7f      	cmp	r3, #127	; 0x7f
 8010690:	ddf4      	ble.n	801067c <svCLI_Handler+0x94>
 8010692:	e010      	b.n	80106b6 <svCLI_Handler+0xce>
          }
        }
        else if (sbEnter && svBypass) {
 8010694:	4b6e      	ldr	r3, [pc, #440]	; (8010850 <svCLI_Handler+0x268>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00c      	beq.n	80106b6 <svCLI_Handler+0xce>
 801069c:	4b6b      	ldr	r3, [pc, #428]	; (801084c <svCLI_Handler+0x264>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d008      	beq.n	80106b6 <svCLI_Handler+0xce>
          const char cszRet[2] = {'\n',0};
 80106a4:	230a      	movs	r3, #10
 80106a6:	80bb      	strh	r3, [r7, #4]
          svBypass((char*)cszRet);
 80106a8:	4b68      	ldr	r3, [pc, #416]	; (801084c <svCLI_Handler+0x264>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	1d3a      	adds	r2, r7, #4
 80106ae:	4610      	mov	r0, r2
 80106b0:	4798      	blx	r3
          bSkipPrompt = 1;
 80106b2:	2301      	movs	r3, #1
 80106b4:	73fb      	strb	r3, [r7, #15]
        }

        if (bSkipPrompt == 0) {
 80106b6:	7bfb      	ldrb	r3, [r7, #15]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	f040 80b1 	bne.w	8010820 <svCLI_Handler+0x238>
          svCLI_Printf(szCLI_PROMPT);
 80106be:	4865      	ldr	r0, [pc, #404]	; (8010854 <svCLI_Handler+0x26c>)
 80106c0:	f7ff fb58 	bl	800fd74 <svCLI_Printf>
 80106c4:	e0ac      	b.n	8010820 <svCLI_Handler+0x238>
        }
      }
      else if (svBypass && (szChar == svExit)) {
 80106c6:	4b61      	ldr	r3, [pc, #388]	; (801084c <svCLI_Handler+0x264>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d019      	beq.n	8010702 <svCLI_Handler+0x11a>
 80106ce:	4b62      	ldr	r3, [pc, #392]	; (8010858 <svCLI_Handler+0x270>)
 80106d0:	781b      	ldrb	r3, [r3, #0]
 80106d2:	79fa      	ldrb	r2, [r7, #7]
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d114      	bne.n	8010702 <svCLI_Handler+0x11a>
        // Exit Bypass mode
        if (0x11 == svExit) {
 80106d8:	4b5f      	ldr	r3, [pc, #380]	; (8010858 <svCLI_Handler+0x270>)
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	2b11      	cmp	r3, #17
 80106de:	d102      	bne.n	80106e6 <svCLI_Handler+0xfe>
          svCLI_Printf("^Q");
 80106e0:	485e      	ldr	r0, [pc, #376]	; (801085c <svCLI_Handler+0x274>)
 80106e2:	f7ff fb47 	bl	800fd74 <svCLI_Printf>
        }
        svBypass(NULL); // Notify Exit !!
 80106e6:	4b59      	ldr	r3, [pc, #356]	; (801084c <svCLI_Handler+0x264>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	2000      	movs	r0, #0
 80106ec:	4798      	blx	r3
        svCLI_SetBypassFtn(NULL,NULL,NULL,FALSE);
 80106ee:	2300      	movs	r3, #0
 80106f0:	2200      	movs	r2, #0
 80106f2:	2100      	movs	r1, #0
 80106f4:	2000      	movs	r0, #0
 80106f6:	f7ff ff01 	bl	80104fc <svCLI_SetBypassFtn>
        sbInEsc = 0;
 80106fa:	4b50      	ldr	r3, [pc, #320]	; (801083c <svCLI_Handler+0x254>)
 80106fc:	2200      	movs	r2, #0
 80106fe:	701a      	strb	r2, [r3, #0]
 8010700:	e08e      	b.n	8010820 <svCLI_Handler+0x238>
      }
      else if (svBypass && (szChar == 0X1A)) {    // Ctrl+Z
 8010702:	4b52      	ldr	r3, [pc, #328]	; (801084c <svCLI_Handler+0x264>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d014      	beq.n	8010734 <svCLI_Handler+0x14c>
 801070a:	79fb      	ldrb	r3, [r7, #7]
 801070c:	2b1a      	cmp	r3, #26
 801070e:	d111      	bne.n	8010734 <svCLI_Handler+0x14c>
        bSkipPrompt = 1;
 8010710:	2301      	movs	r3, #1
 8010712:	73fb      	strb	r3, [r7, #15]
        szCLIString[scntCLIString] = 0X1A;  //Ctrl+z
 8010714:	4b4b      	ldr	r3, [pc, #300]	; (8010844 <svCLI_Handler+0x25c>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	4a4b      	ldr	r2, [pc, #300]	; (8010848 <svCLI_Handler+0x260>)
 801071a:	211a      	movs	r1, #26
 801071c:	54d1      	strb	r1, [r2, r3]
        szCLIString[scntCLIString+1] = '\0';  // NULL Termination
 801071e:	4b49      	ldr	r3, [pc, #292]	; (8010844 <svCLI_Handler+0x25c>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	3301      	adds	r3, #1
 8010724:	4a48      	ldr	r2, [pc, #288]	; (8010848 <svCLI_Handler+0x260>)
 8010726:	2100      	movs	r1, #0
 8010728:	54d1      	strb	r1, [r2, r3]
        svBypass(szCLIString);
 801072a:	4b48      	ldr	r3, [pc, #288]	; (801084c <svCLI_Handler+0x264>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	4846      	ldr	r0, [pc, #280]	; (8010848 <svCLI_Handler+0x260>)
 8010730:	4798      	blx	r3
 8010732:	e075      	b.n	8010820 <svCLI_Handler+0x238>
      }
      else {
        if (szChar == '\b') { // Back space
 8010734:	79fb      	ldrb	r3, [r7, #7]
 8010736:	2b08      	cmp	r3, #8
 8010738:	d118      	bne.n	801076c <svCLI_Handler+0x184>
          sbInEsc = 0;
 801073a:	4b40      	ldr	r3, [pc, #256]	; (801083c <svCLI_Handler+0x254>)
 801073c:	2200      	movs	r2, #0
 801073e:	701a      	strb	r2, [r3, #0]
          if (scntCLIString > 0) {
 8010740:	4b40      	ldr	r3, [pc, #256]	; (8010844 <svCLI_Handler+0x25c>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d06b      	beq.n	8010820 <svCLI_Handler+0x238>
            _svClearLine();
 8010748:	f7ff fcb0 	bl	80100ac <_svClearLine>
            scntCLIString--;
 801074c:	4b3d      	ldr	r3, [pc, #244]	; (8010844 <svCLI_Handler+0x25c>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	3b01      	subs	r3, #1
 8010752:	4a3c      	ldr	r2, [pc, #240]	; (8010844 <svCLI_Handler+0x25c>)
 8010754:	6013      	str	r3, [r2, #0]
            szCLIString[scntCLIString] = '\0';  // NULL Termination
 8010756:	4b3b      	ldr	r3, [pc, #236]	; (8010844 <svCLI_Handler+0x25c>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	4a3b      	ldr	r2, [pc, #236]	; (8010848 <svCLI_Handler+0x260>)
 801075c:	2100      	movs	r1, #0
 801075e:	54d1      	strb	r1, [r2, r3]
            svCLI_Printf("%s%s", szCLI_PROMPT, szCLIString);
 8010760:	4a39      	ldr	r2, [pc, #228]	; (8010848 <svCLI_Handler+0x260>)
 8010762:	493c      	ldr	r1, [pc, #240]	; (8010854 <svCLI_Handler+0x26c>)
 8010764:	483e      	ldr	r0, [pc, #248]	; (8010860 <svCLI_Handler+0x278>)
 8010766:	f7ff fb05 	bl	800fd74 <svCLI_Printf>
 801076a:	e059      	b.n	8010820 <svCLI_Handler+0x238>
          }
        }
        else if (szChar == '[') { // ESC sequence started
 801076c:	79fb      	ldrb	r3, [r7, #7]
 801076e:	2b5b      	cmp	r3, #91	; 0x5b
 8010770:	d103      	bne.n	801077a <svCLI_Handler+0x192>
          sbInEsc = 1;
 8010772:	4b32      	ldr	r3, [pc, #200]	; (801083c <svCLI_Handler+0x254>)
 8010774:	2201      	movs	r2, #1
 8010776:	701a      	strb	r2, [r3, #0]
 8010778:	e052      	b.n	8010820 <svCLI_Handler+0x238>
        }
        else if (_isPrintable(szChar)) {
 801077a:	79fb      	ldrb	r3, [r7, #7]
 801077c:	4618      	mov	r0, r3
 801077e:	f7ff fbe4 	bl	800ff4a <_isPrintable>
 8010782:	4603      	mov	r3, r0
 8010784:	2b00      	cmp	r3, #0
 8010786:	d04b      	beq.n	8010820 <svCLI_Handler+0x238>
          if (sbInEsc) {
 8010788:	4b2c      	ldr	r3, [pc, #176]	; (801083c <svCLI_Handler+0x254>)
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d036      	beq.n	80107fe <svCLI_Handler+0x216>
            sbInEsc = 0;
 8010790:	4b2a      	ldr	r3, [pc, #168]	; (801083c <svCLI_Handler+0x254>)
 8010792:	2200      	movs	r2, #0
 8010794:	701a      	strb	r2, [r3, #0]
            if (snCLIHistoryCount > 0) {
 8010796:	4b33      	ldr	r3, [pc, #204]	; (8010864 <svCLI_Handler+0x27c>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	2b00      	cmp	r3, #0
 801079c:	dd27      	ble.n	80107ee <svCLI_Handler+0x206>
              switch (szChar) {
 801079e:	79fb      	ldrb	r3, [r7, #7]
 80107a0:	2b41      	cmp	r3, #65	; 0x41
 80107a2:	d002      	beq.n	80107aa <svCLI_Handler+0x1c2>
 80107a4:	2b42      	cmp	r3, #66	; 0x42
 80107a6:	d011      	beq.n	80107cc <svCLI_Handler+0x1e4>
                  // echo back
                  scntCLIString = svCLI_Printf("%s", szCLIString);
                  // echo back
                  break;
                default:  // Do Nothing
                  break;
 80107a8:	e021      	b.n	80107ee <svCLI_Handler+0x206>
                  svCLIHandleHistory(CLI_HISTORY_PREV);
 80107aa:	2002      	movs	r0, #2
 80107ac:	f7ff fcb4 	bl	8010118 <svCLIHandleHistory>
                  _svClearLine();
 80107b0:	f7ff fc7c 	bl	80100ac <_svClearLine>
                  svCLI_Printf(szCLI_PROMPT);
 80107b4:	4827      	ldr	r0, [pc, #156]	; (8010854 <svCLI_Handler+0x26c>)
 80107b6:	f7ff fadd 	bl	800fd74 <svCLI_Printf>
                  scntCLIString = svCLI_Printf("%s", szCLIString);
 80107ba:	4923      	ldr	r1, [pc, #140]	; (8010848 <svCLI_Handler+0x260>)
 80107bc:	482a      	ldr	r0, [pc, #168]	; (8010868 <svCLI_Handler+0x280>)
 80107be:	f7ff fad9 	bl	800fd74 <svCLI_Printf>
 80107c2:	4603      	mov	r3, r0
 80107c4:	461a      	mov	r2, r3
 80107c6:	4b1f      	ldr	r3, [pc, #124]	; (8010844 <svCLI_Handler+0x25c>)
 80107c8:	601a      	str	r2, [r3, #0]
                  break;
 80107ca:	e010      	b.n	80107ee <svCLI_Handler+0x206>
                  svCLIHandleHistory(CLI_HISTORY_NEXT);
 80107cc:	2001      	movs	r0, #1
 80107ce:	f7ff fca3 	bl	8010118 <svCLIHandleHistory>
                  _svClearLine();
 80107d2:	f7ff fc6b 	bl	80100ac <_svClearLine>
                  svCLI_Printf(szCLI_PROMPT);
 80107d6:	481f      	ldr	r0, [pc, #124]	; (8010854 <svCLI_Handler+0x26c>)
 80107d8:	f7ff facc 	bl	800fd74 <svCLI_Printf>
                  scntCLIString = svCLI_Printf("%s", szCLIString);
 80107dc:	491a      	ldr	r1, [pc, #104]	; (8010848 <svCLI_Handler+0x260>)
 80107de:	4822      	ldr	r0, [pc, #136]	; (8010868 <svCLI_Handler+0x280>)
 80107e0:	f7ff fac8 	bl	800fd74 <svCLI_Printf>
 80107e4:	4603      	mov	r3, r0
 80107e6:	461a      	mov	r2, r3
 80107e8:	4b16      	ldr	r3, [pc, #88]	; (8010844 <svCLI_Handler+0x25c>)
 80107ea:	601a      	str	r2, [r3, #0]
                  break;
 80107ec:	bf00      	nop
              }
            }
            if (svCommit) {
 80107ee:	4b1f      	ldr	r3, [pc, #124]	; (801086c <svCLI_Handler+0x284>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d01c      	beq.n	8010830 <svCLI_Handler+0x248>
              svCommit();
 80107f6:	4b1d      	ldr	r3, [pc, #116]	; (801086c <svCLI_Handler+0x284>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	4798      	blx	r3
            }
            return;
 80107fc:	e018      	b.n	8010830 <svCLI_Handler+0x248>
          }
          if (scntCLIString < (MAX_CLI_CHARS-1)) {
 80107fe:	4b11      	ldr	r3, [pc, #68]	; (8010844 <svCLI_Handler+0x25c>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	2b7e      	cmp	r3, #126	; 0x7e
 8010804:	d80c      	bhi.n	8010820 <svCLI_Handler+0x238>
            // echo back
            svPutChar(szChar);
 8010806:	4b1a      	ldr	r3, [pc, #104]	; (8010870 <svCLI_Handler+0x288>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	79fa      	ldrb	r2, [r7, #7]
 801080c:	4610      	mov	r0, r2
 801080e:	4798      	blx	r3
            szCLIString[scntCLIString++] = szChar;
 8010810:	4b0c      	ldr	r3, [pc, #48]	; (8010844 <svCLI_Handler+0x25c>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	1c5a      	adds	r2, r3, #1
 8010816:	490b      	ldr	r1, [pc, #44]	; (8010844 <svCLI_Handler+0x25c>)
 8010818:	600a      	str	r2, [r1, #0]
 801081a:	490b      	ldr	r1, [pc, #44]	; (8010848 <svCLI_Handler+0x260>)
 801081c:	79fa      	ldrb	r2, [r7, #7]
 801081e:	54ca      	strb	r2, [r1, r3]
          }
        }
      }
    }
  }
  if (svCommit) {
 8010820:	4b12      	ldr	r3, [pc, #72]	; (801086c <svCLI_Handler+0x284>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d004      	beq.n	8010832 <svCLI_Handler+0x24a>
    svCommit();
 8010828:	4b10      	ldr	r3, [pc, #64]	; (801086c <svCLI_Handler+0x284>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	4798      	blx	r3
 801082e:	e000      	b.n	8010832 <svCLI_Handler+0x24a>
            return;
 8010830:	bf00      	nop
  }
}
 8010832:	3710      	adds	r7, #16
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}
 8010838:	200059d4 	.word	0x200059d4
 801083c:	20005aec 	.word	0x20005aec
 8010840:	080237bc 	.word	0x080237bc
 8010844:	200059c8 	.word	0x200059c8
 8010848:	200057c0 	.word	0x200057c0
 801084c:	200059e0 	.word	0x200059e0
 8010850:	200059e8 	.word	0x200059e8
 8010854:	20000068 	.word	0x20000068
 8010858:	200059e4 	.word	0x200059e4
 801085c:	08023890 	.word	0x08023890
 8010860:	08023894 	.word	0x08023894
 8010864:	200059c0 	.word	0x200059c0
 8010868:	0802389c 	.word	0x0802389c
 801086c:	200059dc 	.word	0x200059dc
 8010870:	200059d8 	.word	0x200059d8

08010874 <CLI_Help>:
// for CLI
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (HELP,"Help","Help : Show menu",CLI_Help);

static void CLI_Help(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b084      	sub	sp, #16
 8010878:	af00      	add	r7, sp, #0
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	607a      	str	r2, [r7, #4]
 8010880:	603b      	str	r3, [r7, #0]
  svCLI_ShowHelp();
 8010882:	f7ff faa3 	bl	800fdcc <svCLI_ShowHelp>
}
 8010886:	bf00      	nop
 8010888:	3710      	adds	r7, #16
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}

0801088e <svRingBuffer_GetCount>:
{
	return rb->size;
}

unsigned int svRingBuffer_GetCount(const svRingBuffer_t *rb)
{
 801088e:	b480      	push	{r7}
 8010890:	b085      	sub	sp, #20
 8010892:	af00      	add	r7, sp, #0
 8010894:	6078      	str	r0, [r7, #4]
	unsigned char *h, *t;
	// use temporal value to avoid corruption in between context-switching / Interrupt 
	h = rb->head;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	685b      	ldr	r3, [r3, #4]
 801089a:	60fb      	str	r3, [r7, #12]
	t = rb->tail;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	689b      	ldr	r3, [r3, #8]
 80108a0:	60bb      	str	r3, [r7, #8]
	if (h >= t)
 80108a2:	68fa      	ldr	r2, [r7, #12]
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d303      	bcc.n	80108b2 <svRingBuffer_GetCount+0x24>
	  return (h - t);
 80108aa:	68fa      	ldr	r2, [r7, #12]
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	1ad3      	subs	r3, r2, r3
 80108b0:	e009      	b.n	80108c6 <svRingBuffer_GetCount+0x38>
	else
	  return (unsigned int)(rb->bufend - t + h - rb->buf);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	68da      	ldr	r2, [r3, #12]
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	1ad3      	subs	r3, r2, r3
 80108ba:	461a      	mov	r2, r3
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	441a      	add	r2, r3
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	1ad3      	subs	r3, r2, r3
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3714      	adds	r7, #20
 80108ca:	46bd      	mov	sp, r7
 80108cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d0:	4770      	bx	lr

080108d2 <svRingBuffer_Reset>:

void svRingBuffer_Reset(svRingBuffer_t *rb)
{
 80108d2:	b480      	push	{r7}
 80108d4:	b083      	sub	sp, #12
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
	rb->head = rb->tail = rb->buf;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	609a      	str	r2, [r3, #8]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	689a      	ldr	r2, [r3, #8]
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	605a      	str	r2, [r3, #4]
	rb->fOverflow = 0;		// Clear Flag
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2200      	movs	r2, #0
 80108ee:	615a      	str	r2, [r3, #20]
	rb->fTurnAround = 0;	// Clear Flag
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2200      	movs	r2, #0
 80108f4:	619a      	str	r2, [r3, #24]
}
 80108f6:	bf00      	nop
 80108f8:	370c      	adds	r7, #12
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr

08010902 <svRingBuffer_Push>:
{
	rb->fOverflow = 0;
}

int svRingBuffer_Push(svRingBuffer_t *rb, unsigned char data)
{
 8010902:	b480      	push	{r7}
 8010904:	b085      	sub	sp, #20
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
 801090a:	460b      	mov	r3, r1
 801090c:	70fb      	strb	r3, [r7, #3]
	int nRet;
	nRet = 0;
 801090e:	2300      	movs	r3, #0
 8010910:	60fb      	str	r3, [r7, #12]
	*(rb->head) = data;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	78fa      	ldrb	r2, [r7, #3]
 8010918:	701a      	strb	r2, [r3, #0]
	rb->head++;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	685b      	ldr	r3, [r3, #4]
 801091e:	1c5a      	adds	r2, r3, #1
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	605a      	str	r2, [r3, #4]
	if (rb->head == rb->bufend) {	// Wrap around
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	685a      	ldr	r2, [r3, #4]
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	68db      	ldr	r3, [r3, #12]
 801092c:	429a      	cmp	r2, r3
 801092e:	d109      	bne.n	8010944 <svRingBuffer_Push+0x42>
	  rb->head = rb->buf;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681a      	ldr	r2, [r3, #0]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	605a      	str	r2, [r3, #4]
		rb->fTurnAround = 1;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2201      	movs	r2, #1
 801093c:	619a      	str	r2, [r3, #24]
		nRet = -1;
 801093e:	f04f 33ff 	mov.w	r3, #4294967295
 8010942:	60fb      	str	r3, [r7, #12]
		// return -1;	// -- hellosmk 210512 to check overflow
	}
	if (rb->head == rb->tail) {		// Over flowed
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	685a      	ldr	r2, [r3, #4]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	689b      	ldr	r3, [r3, #8]
 801094c:	429a      	cmp	r2, r3
 801094e:	d105      	bne.n	801095c <svRingBuffer_Push+0x5a>
	  rb->fOverflow = 1;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2201      	movs	r2, #1
 8010954:	615a      	str	r2, [r3, #20]
		nRet = -2;
 8010956:	f06f 0301 	mvn.w	r3, #1
 801095a:	60fb      	str	r3, [r7, #12]
	}
	return nRet;
 801095c:	68fb      	ldr	r3, [r7, #12]
}
 801095e:	4618      	mov	r0, r3
 8010960:	3714      	adds	r7, #20
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr

0801096a <svRingBuffer_Pop>:

unsigned char svRingBuffer_Pop(svRingBuffer_t *rb)
{
 801096a:	b480      	push	{r7}
 801096c:	b085      	sub	sp, #20
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
	unsigned char byData;
	byData = *(rb->tail);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	689b      	ldr	r3, [r3, #8]
 8010976:	781b      	ldrb	r3, [r3, #0]
 8010978:	73fb      	strb	r3, [r7, #15]
	rb->tail++;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	689b      	ldr	r3, [r3, #8]
 801097e:	1c5a      	adds	r2, r3, #1
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	609a      	str	r2, [r3, #8]
	if (rb->tail == rb->bufend)	// Wrap around
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	689a      	ldr	r2, [r3, #8]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	429a      	cmp	r2, r3
 801098e:	d103      	bne.n	8010998 <svRingBuffer_Pop+0x2e>
	  rb->tail = rb->buf;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681a      	ldr	r2, [r3, #0]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	609a      	str	r2, [r3, #8]
	return byData;
 8010998:	7bfb      	ldrb	r3, [r7, #15]
}
 801099a:	4618      	mov	r0, r3
 801099c:	3714      	adds	r7, #20
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr
	...

080109a8 <__NVIC_SetPriority>:
{
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	4603      	mov	r3, r0
 80109b0:	6039      	str	r1, [r7, #0]
 80109b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80109b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	db0a      	blt.n	80109d2 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	b2da      	uxtb	r2, r3
 80109c0:	490c      	ldr	r1, [pc, #48]	; (80109f4 <__NVIC_SetPriority+0x4c>)
 80109c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80109c6:	0112      	lsls	r2, r2, #4
 80109c8:	b2d2      	uxtb	r2, r2
 80109ca:	440b      	add	r3, r1
 80109cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80109d0:	e00a      	b.n	80109e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	b2da      	uxtb	r2, r3
 80109d6:	4908      	ldr	r1, [pc, #32]	; (80109f8 <__NVIC_SetPriority+0x50>)
 80109d8:	88fb      	ldrh	r3, [r7, #6]
 80109da:	f003 030f 	and.w	r3, r3, #15
 80109de:	3b04      	subs	r3, #4
 80109e0:	0112      	lsls	r2, r2, #4
 80109e2:	b2d2      	uxtb	r2, r2
 80109e4:	440b      	add	r3, r1
 80109e6:	761a      	strb	r2, [r3, #24]
}
 80109e8:	bf00      	nop
 80109ea:	370c      	adds	r7, #12
 80109ec:	46bd      	mov	sp, r7
 80109ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f2:	4770      	bx	lr
 80109f4:	e000e100 	.word	0xe000e100
 80109f8:	e000ed00 	.word	0xe000ed00

080109fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80109fc:	b580      	push	{r7, lr}
 80109fe:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8010a00:	4b05      	ldr	r3, [pc, #20]	; (8010a18 <SysTick_Handler+0x1c>)
 8010a02:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010a04:	f002 fcc2 	bl	801338c <xTaskGetSchedulerState>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	2b01      	cmp	r3, #1
 8010a0c:	d001      	beq.n	8010a12 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010a0e:	f003 fa29 	bl	8013e64 <xPortSysTickHandler>
  }
}
 8010a12:	bf00      	nop
 8010a14:	bd80      	pop	{r7, pc}
 8010a16:	bf00      	nop
 8010a18:	e000e010 	.word	0xe000e010

08010a1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8010a20:	2100      	movs	r1, #0
 8010a22:	f06f 0004 	mvn.w	r0, #4
 8010a26:	f7ff ffbf 	bl	80109a8 <__NVIC_SetPriority>
#endif
}
 8010a2a:	bf00      	nop
 8010a2c:	bd80      	pop	{r7, pc}

08010a2e <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8010a2e:	b580      	push	{r7, lr}
 8010a30:	b086      	sub	sp, #24
 8010a32:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8010a34:	2300      	movs	r3, #0
 8010a36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a38:	f3ef 8305 	mrs	r3, IPSR
 8010a3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8010a3e:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d002      	beq.n	8010a4a <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8010a44:	2301      	movs	r3, #1
 8010a46:	617b      	str	r3, [r7, #20]
 8010a48:	e013      	b.n	8010a72 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8010a4a:	f002 fc9f 	bl	801338c <xTaskGetSchedulerState>
 8010a4e:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8010a50:	693b      	ldr	r3, [r7, #16]
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	d00d      	beq.n	8010a72 <IRQ_Context+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8010a56:	f3ef 8310 	mrs	r3, PRIMASK
 8010a5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8010a5c:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d105      	bne.n	8010a6e <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010a62:	f3ef 8311 	mrs	r3, BASEPRI
 8010a66:	607b      	str	r3, [r7, #4]
  return(result);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d001      	beq.n	8010a72 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8010a6e:	2301      	movs	r3, #1
 8010a70:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8010a72:	697b      	ldr	r3, [r7, #20]
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	3718      	adds	r7, #24
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	bd80      	pop	{r7, pc}

08010a7c <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8010a82:	f7ff ffd4 	bl	8010a2e <IRQ_Context>
 8010a86:	4603      	mov	r3, r0
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d003      	beq.n	8010a94 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8010a8c:	f06f 0305 	mvn.w	r3, #5
 8010a90:	607b      	str	r3, [r7, #4]
 8010a92:	e012      	b.n	8010aba <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8010a94:	f002 fc7a 	bl	801338c <xTaskGetSchedulerState>
 8010a98:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	d109      	bne.n	8010ab4 <osKernelInitialize+0x38>
 8010aa0:	4b08      	ldr	r3, [pc, #32]	; (8010ac4 <osKernelInitialize+0x48>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d105      	bne.n	8010ab4 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010aa8:	4b06      	ldr	r3, [pc, #24]	; (8010ac4 <osKernelInitialize+0x48>)
 8010aaa:	2201      	movs	r2, #1
 8010aac:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010aae:	2300      	movs	r3, #0
 8010ab0:	607b      	str	r3, [r7, #4]
 8010ab2:	e002      	b.n	8010aba <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8010ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ab8:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8010aba:	687b      	ldr	r3, [r7, #4]
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3708      	adds	r7, #8
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	20005af0 	.word	0x20005af0

08010ac8 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b082      	sub	sp, #8
 8010acc:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8010ace:	f7ff ffae 	bl	8010a2e <IRQ_Context>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d003      	beq.n	8010ae0 <osKernelStart+0x18>
    stat = osErrorISR;
 8010ad8:	f06f 0305 	mvn.w	r3, #5
 8010adc:	607b      	str	r3, [r7, #4]
 8010ade:	e016      	b.n	8010b0e <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8010ae0:	f002 fc54 	bl	801338c <xTaskGetSchedulerState>
 8010ae4:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	2b01      	cmp	r3, #1
 8010aea:	d10d      	bne.n	8010b08 <osKernelStart+0x40>
 8010aec:	4b0a      	ldr	r3, [pc, #40]	; (8010b18 <osKernelStart+0x50>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d109      	bne.n	8010b08 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010af4:	f7ff ff92 	bl	8010a1c <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8010af8:	4b07      	ldr	r3, [pc, #28]	; (8010b18 <osKernelStart+0x50>)
 8010afa:	2202      	movs	r2, #2
 8010afc:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010afe:	f001 feed 	bl	80128dc <vTaskStartScheduler>
      stat = osOK;
 8010b02:	2300      	movs	r3, #0
 8010b04:	607b      	str	r3, [r7, #4]
 8010b06:	e002      	b.n	8010b0e <osKernelStart+0x46>
    } else {
      stat = osError;
 8010b08:	f04f 33ff 	mov.w	r3, #4294967295
 8010b0c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8010b0e:	687b      	ldr	r3, [r7, #4]
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3708      	adds	r7, #8
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	20005af0 	.word	0x20005af0

08010b1c <osKernelGetTickCount>:
}

/*
  Get the RTOS kernel tick count.
*/
uint32_t osKernelGetTickCount (void) {
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b082      	sub	sp, #8
 8010b20:	af00      	add	r7, sp, #0
  TickType_t ticks;

  if (IRQ_Context() != 0U) {
 8010b22:	f7ff ff84 	bl	8010a2e <IRQ_Context>
 8010b26:	4603      	mov	r3, r0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d003      	beq.n	8010b34 <osKernelGetTickCount+0x18>
    ticks = xTaskGetTickCountFromISR();
 8010b2c:	f002 f83a 	bl	8012ba4 <xTaskGetTickCountFromISR>
 8010b30:	6078      	str	r0, [r7, #4]
 8010b32:	e002      	b.n	8010b3a <osKernelGetTickCount+0x1e>
  } else {
    ticks = xTaskGetTickCount();
 8010b34:	f002 f826 	bl	8012b84 <xTaskGetTickCount>
 8010b38:	6078      	str	r0, [r7, #4]
  }

  /* Return kernel tick count */
  return (ticks);
 8010b3a:	687b      	ldr	r3, [r7, #4]
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3708      	adds	r7, #8
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b08e      	sub	sp, #56	; 0x38
 8010b48:	af04      	add	r7, sp, #16
 8010b4a:	60f8      	str	r0, [r7, #12]
 8010b4c:	60b9      	str	r1, [r7, #8]
 8010b4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010b50:	2300      	movs	r3, #0
 8010b52:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8010b54:	f7ff ff6b 	bl	8010a2e <IRQ_Context>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d17f      	bne.n	8010c5e <osThreadNew+0x11a>
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d07c      	beq.n	8010c5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8010b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010b6a:	2318      	movs	r3, #24
 8010b6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010b72:	f04f 33ff 	mov.w	r3, #4294967295
 8010b76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d045      	beq.n	8010c0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d002      	beq.n	8010b8c <osThreadNew+0x48>
        name = attr->name;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	699b      	ldr	r3, [r3, #24]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d002      	beq.n	8010b9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	699b      	ldr	r3, [r3, #24]
 8010b98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010b9a:	69fb      	ldr	r3, [r7, #28]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d008      	beq.n	8010bb2 <osThreadNew+0x6e>
 8010ba0:	69fb      	ldr	r3, [r7, #28]
 8010ba2:	2b38      	cmp	r3, #56	; 0x38
 8010ba4:	d805      	bhi.n	8010bb2 <osThreadNew+0x6e>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	f003 0301 	and.w	r3, r3, #1
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d001      	beq.n	8010bb6 <osThreadNew+0x72>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	e054      	b.n	8010c60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	695b      	ldr	r3, [r3, #20]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d003      	beq.n	8010bc6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	695b      	ldr	r3, [r3, #20]
 8010bc2:	089b      	lsrs	r3, r3, #2
 8010bc4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	689b      	ldr	r3, [r3, #8]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d00e      	beq.n	8010bec <osThreadNew+0xa8>
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	68db      	ldr	r3, [r3, #12]
 8010bd2:	2b5b      	cmp	r3, #91	; 0x5b
 8010bd4:	d90a      	bls.n	8010bec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d006      	beq.n	8010bec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	695b      	ldr	r3, [r3, #20]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d002      	beq.n	8010bec <osThreadNew+0xa8>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8010be6:	2301      	movs	r3, #1
 8010be8:	61bb      	str	r3, [r7, #24]
 8010bea:	e010      	b.n	8010c0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	689b      	ldr	r3, [r3, #8]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d10c      	bne.n	8010c0e <osThreadNew+0xca>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d108      	bne.n	8010c0e <osThreadNew+0xca>
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	691b      	ldr	r3, [r3, #16]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d104      	bne.n	8010c0e <osThreadNew+0xca>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8010c04:	2300      	movs	r3, #0
 8010c06:	61bb      	str	r3, [r7, #24]
 8010c08:	e001      	b.n	8010c0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010c0e:	69bb      	ldr	r3, [r7, #24]
 8010c10:	2b01      	cmp	r3, #1
 8010c12:	d110      	bne.n	8010c36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010c18:	687a      	ldr	r2, [r7, #4]
 8010c1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010c1c:	9202      	str	r2, [sp, #8]
 8010c1e:	9301      	str	r3, [sp, #4]
 8010c20:	69fb      	ldr	r3, [r7, #28]
 8010c22:	9300      	str	r3, [sp, #0]
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	6a3a      	ldr	r2, [r7, #32]
 8010c28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c2a:	68f8      	ldr	r0, [r7, #12]
 8010c2c:	f001 fc8e 	bl	801254c <xTaskCreateStatic>
 8010c30:	4603      	mov	r3, r0
 8010c32:	617b      	str	r3, [r7, #20]
 8010c34:	e013      	b.n	8010c5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010c36:	69bb      	ldr	r3, [r7, #24]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d110      	bne.n	8010c5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8010c3c:	6a3b      	ldr	r3, [r7, #32]
 8010c3e:	b29a      	uxth	r2, r3
 8010c40:	f107 0314 	add.w	r3, r7, #20
 8010c44:	9301      	str	r3, [sp, #4]
 8010c46:	69fb      	ldr	r3, [r7, #28]
 8010c48:	9300      	str	r3, [sp, #0]
 8010c4a:	68bb      	ldr	r3, [r7, #8]
 8010c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c4e:	68f8      	ldr	r0, [r7, #12]
 8010c50:	f001 fcc6 	bl	80125e0 <xTaskCreate>
 8010c54:	4603      	mov	r3, r0
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d001      	beq.n	8010c5e <osThreadNew+0x11a>
            hTask = NULL;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8010c5e:	697b      	ldr	r3, [r7, #20]
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3728      	adds	r7, #40	; 0x28
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}

08010c68 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8010c70:	f7ff fedd 	bl	8010a2e <IRQ_Context>
 8010c74:	4603      	mov	r3, r0
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d003      	beq.n	8010c82 <osDelay+0x1a>
    stat = osErrorISR;
 8010c7a:	f06f 0305 	mvn.w	r3, #5
 8010c7e:	60fb      	str	r3, [r7, #12]
 8010c80:	e007      	b.n	8010c92 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8010c82:	2300      	movs	r3, #0
 8010c84:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d002      	beq.n	8010c92 <osDelay+0x2a>
      vTaskDelay(ticks);
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f001 fe01 	bl	8012894 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8010c92:	68fb      	ldr	r3, [r7, #12]
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3710      	adds	r7, #16
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <osMutexNew>:

  Limitations:
  - Priority inherit protocol is used by default, osMutexPrioInherit attribute is ignored.
  - Robust mutex is not supported, NULL is returned if used.
*/
osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b086      	sub	sp, #24
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  uint32_t type;
  uint32_t rmtx;
  int32_t  mem;

  hMutex = NULL;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() == 0U) {
 8010ca8:	f7ff fec1 	bl	8010a2e <IRQ_Context>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d174      	bne.n	8010d9c <osMutexNew+0x100>
    if (attr != NULL) {
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d003      	beq.n	8010cc0 <osMutexNew+0x24>
      type = attr->attr_bits;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	685b      	ldr	r3, [r3, #4]
 8010cbc:	613b      	str	r3, [r7, #16]
 8010cbe:	e001      	b.n	8010cc4 <osMutexNew+0x28>
    } else {
      type = 0U;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	613b      	str	r3, [r7, #16]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010cc4:	693b      	ldr	r3, [r7, #16]
 8010cc6:	f003 0301 	and.w	r3, r3, #1
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d002      	beq.n	8010cd4 <osMutexNew+0x38>
      rmtx = 1U;
 8010cce:	2301      	movs	r3, #1
 8010cd0:	60fb      	str	r3, [r7, #12]
 8010cd2:	e001      	b.n	8010cd8 <osMutexNew+0x3c>
    } else {
      rmtx = 0U;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	60fb      	str	r3, [r7, #12]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8010cd8:	693b      	ldr	r3, [r7, #16]
 8010cda:	f003 0308 	and.w	r3, r3, #8
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d15c      	bne.n	8010d9c <osMutexNew+0x100>
      mem = -1;
 8010ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ce6:	60bb      	str	r3, [r7, #8]

      if (attr != NULL) {
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d015      	beq.n	8010d1a <osMutexNew+0x7e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	689b      	ldr	r3, [r3, #8]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d006      	beq.n	8010d04 <osMutexNew+0x68>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	2b4f      	cmp	r3, #79	; 0x4f
 8010cfc:	d902      	bls.n	8010d04 <osMutexNew+0x68>
          /* The memory for control block is provided, use static object */
          mem = 1;
 8010cfe:	2301      	movs	r3, #1
 8010d00:	60bb      	str	r3, [r7, #8]
 8010d02:	e00c      	b.n	8010d1e <osMutexNew+0x82>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	689b      	ldr	r3, [r3, #8]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d108      	bne.n	8010d1e <osMutexNew+0x82>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	68db      	ldr	r3, [r3, #12]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d104      	bne.n	8010d1e <osMutexNew+0x82>
            /* Control block will be allocated from the dynamic pool */
            mem = 0;
 8010d14:	2300      	movs	r3, #0
 8010d16:	60bb      	str	r3, [r7, #8]
 8010d18:	e001      	b.n	8010d1e <osMutexNew+0x82>
          }
        }
      }
      else {
        mem = 0;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	60bb      	str	r3, [r7, #8]
      }

      if (mem == 1) {
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d112      	bne.n	8010d4a <osMutexNew+0xae>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d007      	beq.n	8010d3a <osMutexNew+0x9e>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	689b      	ldr	r3, [r3, #8]
 8010d2e:	4619      	mov	r1, r3
 8010d30:	2004      	movs	r0, #4
 8010d32:	f000 fd7b 	bl	801182c <xQueueCreateMutexStatic>
 8010d36:	6178      	str	r0, [r7, #20]
 8010d38:	e016      	b.n	8010d68 <osMutexNew+0xcc>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	689b      	ldr	r3, [r3, #8]
 8010d3e:	4619      	mov	r1, r3
 8010d40:	2001      	movs	r0, #1
 8010d42:	f000 fd73 	bl	801182c <xQueueCreateMutexStatic>
 8010d46:	6178      	str	r0, [r7, #20]
 8010d48:	e00e      	b.n	8010d68 <osMutexNew+0xcc>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d10b      	bne.n	8010d68 <osMutexNew+0xcc>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d004      	beq.n	8010d60 <osMutexNew+0xc4>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8010d56:	2004      	movs	r0, #4
 8010d58:	f000 fd50 	bl	80117fc <xQueueCreateMutex>
 8010d5c:	6178      	str	r0, [r7, #20]
 8010d5e:	e003      	b.n	8010d68 <osMutexNew+0xcc>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8010d60:	2001      	movs	r0, #1
 8010d62:	f000 fd4b 	bl	80117fc <xQueueCreateMutex>
 8010d66:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d00c      	beq.n	8010d88 <osMutexNew+0xec>
        if ((attr != NULL) && (attr->name != NULL)) {
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d009      	beq.n	8010d88 <osMutexNew+0xec>
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d005      	beq.n	8010d88 <osMutexNew+0xec>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hMutex, attr->name);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	4619      	mov	r1, r3
 8010d82:	6978      	ldr	r0, [r7, #20]
 8010d84:	f001 fb3c 	bl	8012400 <vQueueAddToRegistry>
        }
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d006      	beq.n	8010d9c <osMutexNew+0x100>
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d003      	beq.n	8010d9c <osMutexNew+0x100>
        /* Set LSB as 'recursive mutex flag' */
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	f043 0301 	orr.w	r3, r3, #1
 8010d9a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return mutex ID */
  return ((osMutexId_t)hMutex);
 8010d9c:	697b      	ldr	r3, [r7, #20]
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3718      	adds	r7, #24
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}

08010da6 <osMutexAcquire>:

/*
  Acquire a Mutex or timeout if it is locked.
*/
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010da6:	b580      	push	{r7, lr}
 8010da8:	b086      	sub	sp, #24
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]
 8010dae:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f023 0301 	bic.w	r3, r3, #1
 8010db6:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f003 0301 	and.w	r3, r3, #1
 8010dbe:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
 8010dc4:	f7ff fe33 	bl	8010a2e <IRQ_Context>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d003      	beq.n	8010dd6 <osMutexAcquire+0x30>
    stat = osErrorISR;
 8010dce:	f06f 0305 	mvn.w	r3, #5
 8010dd2:	617b      	str	r3, [r7, #20]
 8010dd4:	e02c      	b.n	8010e30 <osMutexAcquire+0x8a>
  }
  else if (hMutex == NULL) {
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d103      	bne.n	8010de4 <osMutexAcquire+0x3e>
    stat = osErrorParameter;
 8010ddc:	f06f 0303 	mvn.w	r3, #3
 8010de0:	617b      	str	r3, [r7, #20]
 8010de2:	e025      	b.n	8010e30 <osMutexAcquire+0x8a>
  }
  else {
    if (rmtx != 0U) {
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d011      	beq.n	8010e0e <osMutexAcquire+0x68>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8010dea:	6839      	ldr	r1, [r7, #0]
 8010dec:	6938      	ldr	r0, [r7, #16]
 8010dee:	f000 fd64 	bl	80118ba <xQueueTakeMutexRecursive>
 8010df2:	4603      	mov	r3, r0
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	d01b      	beq.n	8010e30 <osMutexAcquire+0x8a>
        if (timeout != 0U) {
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d003      	beq.n	8010e06 <osMutexAcquire+0x60>
          stat = osErrorTimeout;
 8010dfe:	f06f 0301 	mvn.w	r3, #1
 8010e02:	617b      	str	r3, [r7, #20]
 8010e04:	e014      	b.n	8010e30 <osMutexAcquire+0x8a>
        } else {
          stat = osErrorResource;
 8010e06:	f06f 0302 	mvn.w	r3, #2
 8010e0a:	617b      	str	r3, [r7, #20]
 8010e0c:	e010      	b.n	8010e30 <osMutexAcquire+0x8a>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8010e0e:	6839      	ldr	r1, [r7, #0]
 8010e10:	6938      	ldr	r0, [r7, #16]
 8010e12:	f001 f844 	bl	8011e9e <xQueueSemaphoreTake>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b01      	cmp	r3, #1
 8010e1a:	d009      	beq.n	8010e30 <osMutexAcquire+0x8a>
        if (timeout != 0U) {
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d003      	beq.n	8010e2a <osMutexAcquire+0x84>
          stat = osErrorTimeout;
 8010e22:	f06f 0301 	mvn.w	r3, #1
 8010e26:	617b      	str	r3, [r7, #20]
 8010e28:	e002      	b.n	8010e30 <osMutexAcquire+0x8a>
        } else {
          stat = osErrorResource;
 8010e2a:	f06f 0302 	mvn.w	r3, #2
 8010e2e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 8010e30:	697b      	ldr	r3, [r7, #20]
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3718      	adds	r7, #24
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}

08010e3a <osMutexRelease>:

/*
  Release a Mutex that was acquired by osMutexAcquire.
*/
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010e3a:	b580      	push	{r7, lr}
 8010e3c:	b086      	sub	sp, #24
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f023 0301 	bic.w	r3, r3, #1
 8010e48:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f003 0301 	and.w	r3, r3, #1
 8010e50:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8010e52:	2300      	movs	r3, #0
 8010e54:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
 8010e56:	f7ff fdea 	bl	8010a2e <IRQ_Context>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d003      	beq.n	8010e68 <osMutexRelease+0x2e>
    stat = osErrorISR;
 8010e60:	f06f 0305 	mvn.w	r3, #5
 8010e64:	617b      	str	r3, [r7, #20]
 8010e66:	e01f      	b.n	8010ea8 <osMutexRelease+0x6e>
  }
  else if (hMutex == NULL) {
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d103      	bne.n	8010e76 <osMutexRelease+0x3c>
    stat = osErrorParameter;
 8010e6e:	f06f 0303 	mvn.w	r3, #3
 8010e72:	617b      	str	r3, [r7, #20]
 8010e74:	e018      	b.n	8010ea8 <osMutexRelease+0x6e>
  }
  else {
    if (rmtx != 0U) {
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d009      	beq.n	8010e90 <osMutexRelease+0x56>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8010e7c:	6938      	ldr	r0, [r7, #16]
 8010e7e:	f000 fcf0 	bl	8011862 <xQueueGiveMutexRecursive>
 8010e82:	4603      	mov	r3, r0
 8010e84:	2b01      	cmp	r3, #1
 8010e86:	d00f      	beq.n	8010ea8 <osMutexRelease+0x6e>
        stat = osErrorResource;
 8010e88:	f06f 0302 	mvn.w	r3, #2
 8010e8c:	617b      	str	r3, [r7, #20]
 8010e8e:	e00b      	b.n	8010ea8 <osMutexRelease+0x6e>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8010e90:	2300      	movs	r3, #0
 8010e92:	2200      	movs	r2, #0
 8010e94:	2100      	movs	r1, #0
 8010e96:	6938      	ldr	r0, [r7, #16]
 8010e98:	f000 fd8d 	bl	80119b6 <xQueueGenericSend>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	2b01      	cmp	r3, #1
 8010ea0:	d002      	beq.n	8010ea8 <osMutexRelease+0x6e>
        stat = osErrorResource;
 8010ea2:	f06f 0302 	mvn.w	r3, #2
 8010ea6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 8010ea8:	697b      	ldr	r3, [r7, #20]
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3718      	adds	r7, #24
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}

08010eb2 <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010eb2:	b580      	push	{r7, lr}
 8010eb4:	b088      	sub	sp, #32
 8010eb6:	af02      	add	r7, sp, #8
 8010eb8:	60f8      	str	r0, [r7, #12]
 8010eba:	60b9      	str	r1, [r7, #8]
 8010ebc:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
 8010ec2:	f7ff fdb4 	bl	8010a2e <IRQ_Context>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d175      	bne.n	8010fb8 <osSemaphoreNew+0x106>
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d072      	beq.n	8010fb8 <osSemaphoreNew+0x106>
 8010ed2:	68ba      	ldr	r2, [r7, #8]
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d86e      	bhi.n	8010fb8 <osSemaphoreNew+0x106>
    mem = -1;
 8010eda:	f04f 33ff 	mov.w	r3, #4294967295
 8010ede:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d015      	beq.n	8010f12 <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	689b      	ldr	r3, [r3, #8]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d006      	beq.n	8010efc <osSemaphoreNew+0x4a>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	68db      	ldr	r3, [r3, #12]
 8010ef2:	2b4f      	cmp	r3, #79	; 0x4f
 8010ef4:	d902      	bls.n	8010efc <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	613b      	str	r3, [r7, #16]
 8010efa:	e00c      	b.n	8010f16 <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	689b      	ldr	r3, [r3, #8]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d108      	bne.n	8010f16 <osSemaphoreNew+0x64>
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	68db      	ldr	r3, [r3, #12]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d104      	bne.n	8010f16 <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	613b      	str	r3, [r7, #16]
 8010f10:	e001      	b.n	8010f16 <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
 8010f12:	2300      	movs	r3, #0
 8010f14:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f1c:	d04c      	beq.n	8010fb8 <osSemaphoreNew+0x106>
      if (max_count == 1U) {
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d128      	bne.n	8010f76 <osSemaphoreNew+0xc4>
        if (mem == 1) {
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d10a      	bne.n	8010f40 <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	689b      	ldr	r3, [r3, #8]
 8010f2e:	2203      	movs	r2, #3
 8010f30:	9200      	str	r2, [sp, #0]
 8010f32:	2200      	movs	r2, #0
 8010f34:	2100      	movs	r1, #0
 8010f36:	2001      	movs	r0, #1
 8010f38:	f000 fb93 	bl	8011662 <xQueueGenericCreateStatic>
 8010f3c:	6178      	str	r0, [r7, #20]
 8010f3e:	e005      	b.n	8010f4c <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8010f40:	2203      	movs	r2, #3
 8010f42:	2100      	movs	r1, #0
 8010f44:	2001      	movs	r0, #1
 8010f46:	f000 fbd2 	bl	80116ee <xQueueGenericCreate>
 8010f4a:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d022      	beq.n	8010f98 <osSemaphoreNew+0xe6>
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d01f      	beq.n	8010f98 <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010f58:	2300      	movs	r3, #0
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	2100      	movs	r1, #0
 8010f5e:	6978      	ldr	r0, [r7, #20]
 8010f60:	f000 fd29 	bl	80119b6 <xQueueGenericSend>
 8010f64:	4603      	mov	r3, r0
 8010f66:	2b01      	cmp	r3, #1
 8010f68:	d016      	beq.n	8010f98 <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
 8010f6a:	6978      	ldr	r0, [r7, #20]
 8010f6c:	f001 f905 	bl	801217a <vQueueDelete>
            hSemaphore = NULL;
 8010f70:	2300      	movs	r3, #0
 8010f72:	617b      	str	r3, [r7, #20]
 8010f74:	e010      	b.n	8010f98 <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	2b01      	cmp	r3, #1
 8010f7a:	d108      	bne.n	8010f8e <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	689b      	ldr	r3, [r3, #8]
 8010f80:	461a      	mov	r2, r3
 8010f82:	68b9      	ldr	r1, [r7, #8]
 8010f84:	68f8      	ldr	r0, [r7, #12]
 8010f86:	f000 fcc6 	bl	8011916 <xQueueCreateCountingSemaphoreStatic>
 8010f8a:	6178      	str	r0, [r7, #20]
 8010f8c:	e004      	b.n	8010f98 <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010f8e:	68b9      	ldr	r1, [r7, #8]
 8010f90:	68f8      	ldr	r0, [r7, #12]
 8010f92:	f000 fcea 	bl	801196a <xQueueCreateCountingSemaphore>
 8010f96:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d00c      	beq.n	8010fb8 <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d009      	beq.n	8010fb8 <osSemaphoreNew+0x106>
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d005      	beq.n	8010fb8 <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	6978      	ldr	r0, [r7, #20]
 8010fb4:	f001 fa24 	bl	8012400 <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
 8010fb8:	697b      	ldr	r3, [r7, #20]
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3718      	adds	r7, #24
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
	...

08010fc4 <osSemaphoreAcquire>:

/*
  Acquire a Semaphore token or timeout if no tokens are available.
*/
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b086      	sub	sp, #24
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d103      	bne.n	8010fe4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010fdc:	f06f 0303 	mvn.w	r3, #3
 8010fe0:	617b      	str	r3, [r7, #20]
 8010fe2:	e034      	b.n	801104e <osSemaphoreAcquire+0x8a>
  }
  else if (IRQ_Context() != 0U) {
 8010fe4:	f7ff fd23 	bl	8010a2e <IRQ_Context>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d01e      	beq.n	801102c <osSemaphoreAcquire+0x68>
    if (timeout != 0U) {
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d003      	beq.n	8010ffc <osSemaphoreAcquire+0x38>
      stat = osErrorParameter;
 8010ff4:	f06f 0303 	mvn.w	r3, #3
 8010ff8:	617b      	str	r3, [r7, #20]
 8010ffa:	e028      	b.n	801104e <osSemaphoreAcquire+0x8a>
    }
    else {
      yield = pdFALSE;
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011000:	f107 030c 	add.w	r3, r7, #12
 8011004:	461a      	mov	r2, r3
 8011006:	2100      	movs	r1, #0
 8011008:	6938      	ldr	r0, [r7, #16]
 801100a:	f001 f81f 	bl	801204c <xQueueReceiveFromISR>
 801100e:	4603      	mov	r3, r0
 8011010:	2b01      	cmp	r3, #1
 8011012:	d003      	beq.n	801101c <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
 8011014:	f06f 0302 	mvn.w	r3, #2
 8011018:	617b      	str	r3, [r7, #20]
 801101a:	e018      	b.n	801104e <osSemaphoreAcquire+0x8a>
      } else {
        portYIELD_FROM_ISR (yield);
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d015      	beq.n	801104e <osSemaphoreAcquire+0x8a>
 8011022:	4b0d      	ldr	r3, [pc, #52]	; (8011058 <osSemaphoreAcquire+0x94>)
 8011024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011028:	601a      	str	r2, [r3, #0]
 801102a:	e010      	b.n	801104e <osSemaphoreAcquire+0x8a>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801102c:	6839      	ldr	r1, [r7, #0]
 801102e:	6938      	ldr	r0, [r7, #16]
 8011030:	f000 ff35 	bl	8011e9e <xQueueSemaphoreTake>
 8011034:	4603      	mov	r3, r0
 8011036:	2b01      	cmp	r3, #1
 8011038:	d009      	beq.n	801104e <osSemaphoreAcquire+0x8a>
      if (timeout != 0U) {
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d003      	beq.n	8011048 <osSemaphoreAcquire+0x84>
        stat = osErrorTimeout;
 8011040:	f06f 0301 	mvn.w	r3, #1
 8011044:	617b      	str	r3, [r7, #20]
 8011046:	e002      	b.n	801104e <osSemaphoreAcquire+0x8a>
      } else {
        stat = osErrorResource;
 8011048:	f06f 0302 	mvn.w	r3, #2
 801104c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 801104e:	697b      	ldr	r3, [r7, #20]
}
 8011050:	4618      	mov	r0, r3
 8011052:	3718      	adds	r7, #24
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}
 8011058:	e000ed04 	.word	0xe000ed04

0801105c <osSemaphoreRelease>:

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801105c:	b580      	push	{r7, lr}
 801105e:	b086      	sub	sp, #24
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011068:	2300      	movs	r3, #0
 801106a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d103      	bne.n	801107a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011072:	f06f 0303 	mvn.w	r3, #3
 8011076:	617b      	str	r3, [r7, #20]
 8011078:	e027      	b.n	80110ca <osSemaphoreRelease+0x6e>
  }
  else if (IRQ_Context() != 0U) {
 801107a:	f7ff fcd8 	bl	8010a2e <IRQ_Context>
 801107e:	4603      	mov	r3, r0
 8011080:	2b00      	cmp	r3, #0
 8011082:	d016      	beq.n	80110b2 <osSemaphoreRelease+0x56>
    yield = pdFALSE;
 8011084:	2300      	movs	r3, #0
 8011086:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011088:	f107 030c 	add.w	r3, r7, #12
 801108c:	4619      	mov	r1, r3
 801108e:	6938      	ldr	r0, [r7, #16]
 8011090:	f000 fdda 	bl	8011c48 <xQueueGiveFromISR>
 8011094:	4603      	mov	r3, r0
 8011096:	2b01      	cmp	r3, #1
 8011098:	d003      	beq.n	80110a2 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 801109a:	f06f 0302 	mvn.w	r3, #2
 801109e:	617b      	str	r3, [r7, #20]
 80110a0:	e013      	b.n	80110ca <osSemaphoreRelease+0x6e>
    } else {
      portYIELD_FROM_ISR (yield);
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d010      	beq.n	80110ca <osSemaphoreRelease+0x6e>
 80110a8:	4b0a      	ldr	r3, [pc, #40]	; (80110d4 <osSemaphoreRelease+0x78>)
 80110aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110ae:	601a      	str	r2, [r3, #0]
 80110b0:	e00b      	b.n	80110ca <osSemaphoreRelease+0x6e>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80110b2:	2300      	movs	r3, #0
 80110b4:	2200      	movs	r2, #0
 80110b6:	2100      	movs	r1, #0
 80110b8:	6938      	ldr	r0, [r7, #16]
 80110ba:	f000 fc7c 	bl	80119b6 <xQueueGenericSend>
 80110be:	4603      	mov	r3, r0
 80110c0:	2b01      	cmp	r3, #1
 80110c2:	d002      	beq.n	80110ca <osSemaphoreRelease+0x6e>
      stat = osErrorResource;
 80110c4:	f06f 0302 	mvn.w	r3, #2
 80110c8:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
 80110ca:	697b      	ldr	r3, [r7, #20]
}
 80110cc:	4618      	mov	r0, r3
 80110ce:	3718      	adds	r7, #24
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	e000ed04 	.word	0xe000ed04

080110d8 <osSemaphoreDelete>:
}

/*
  Delete a Semaphore object.
*/
osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80110d8:	b580      	push	{r7, lr}
 80110da:	b084      	sub	sp, #16
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	60bb      	str	r3, [r7, #8]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IRQ_Context() != 0U) {
 80110e4:	f7ff fca3 	bl	8010a2e <IRQ_Context>
 80110e8:	4603      	mov	r3, r0
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d003      	beq.n	80110f6 <osSemaphoreDelete+0x1e>
    stat = osErrorISR;
 80110ee:	f06f 0305 	mvn.w	r3, #5
 80110f2:	60fb      	str	r3, [r7, #12]
 80110f4:	e00e      	b.n	8011114 <osSemaphoreDelete+0x3c>
  }
  else if (hSemaphore == NULL) {
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d103      	bne.n	8011104 <osSemaphoreDelete+0x2c>
    stat = osErrorParameter;
 80110fc:	f06f 0303 	mvn.w	r3, #3
 8011100:	60fb      	str	r3, [r7, #12]
 8011102:	e007      	b.n	8011114 <osSemaphoreDelete+0x3c>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8011104:	68b8      	ldr	r0, [r7, #8]
 8011106:	f001 f9bf 	bl	8012488 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 801110a:	2300      	movs	r3, #0
 801110c:	60fb      	str	r3, [r7, #12]
    vSemaphoreDelete (hSemaphore);
 801110e:	68b8      	ldr	r0, [r7, #8]
 8011110:	f001 f833 	bl	801217a <vQueueDelete>
#else
  stat = osError;
#endif

  /* Return execution status */
  return (stat);
 8011114:	68fb      	ldr	r3, [r7, #12]
}
 8011116:	4618      	mov	r0, r3
 8011118:	3710      	adds	r7, #16
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}

0801111e <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801111e:	b580      	push	{r7, lr}
 8011120:	b088      	sub	sp, #32
 8011122:	af02      	add	r7, sp, #8
 8011124:	60f8      	str	r0, [r7, #12]
 8011126:	60b9      	str	r1, [r7, #8]
 8011128:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 801112a:	2300      	movs	r3, #0
 801112c:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 801112e:	f7ff fc7e 	bl	8010a2e <IRQ_Context>
 8011132:	4603      	mov	r3, r0
 8011134:	2b00      	cmp	r3, #0
 8011136:	d15f      	bne.n	80111f8 <osMessageQueueNew+0xda>
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d05c      	beq.n	80111f8 <osMessageQueueNew+0xda>
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d059      	beq.n	80111f8 <osMessageQueueNew+0xda>
    mem = -1;
 8011144:	f04f 33ff 	mov.w	r3, #4294967295
 8011148:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d029      	beq.n	80111a4 <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	689b      	ldr	r3, [r3, #8]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d012      	beq.n	801117e <osMessageQueueNew+0x60>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	68db      	ldr	r3, [r3, #12]
 801115c:	2b4f      	cmp	r3, #79	; 0x4f
 801115e:	d90e      	bls.n	801117e <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011164:	2b00      	cmp	r3, #0
 8011166:	d00a      	beq.n	801117e <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	695a      	ldr	r2, [r3, #20]
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	68b9      	ldr	r1, [r7, #8]
 8011170:	fb01 f303 	mul.w	r3, r1, r3
 8011174:	429a      	cmp	r2, r3
 8011176:	d302      	bcc.n	801117e <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 8011178:	2301      	movs	r3, #1
 801117a:	613b      	str	r3, [r7, #16]
 801117c:	e014      	b.n	80111a8 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	689b      	ldr	r3, [r3, #8]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d110      	bne.n	80111a8 <osMessageQueueNew+0x8a>
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d10c      	bne.n	80111a8 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011192:	2b00      	cmp	r3, #0
 8011194:	d108      	bne.n	80111a8 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	695b      	ldr	r3, [r3, #20]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d104      	bne.n	80111a8 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 801119e:	2300      	movs	r3, #0
 80111a0:	613b      	str	r3, [r7, #16]
 80111a2:	e001      	b.n	80111a8 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 80111a4:	2300      	movs	r3, #0
 80111a6:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	2b01      	cmp	r3, #1
 80111ac:	d10b      	bne.n	80111c6 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	691a      	ldr	r2, [r3, #16]
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	689b      	ldr	r3, [r3, #8]
 80111b6:	2100      	movs	r1, #0
 80111b8:	9100      	str	r1, [sp, #0]
 80111ba:	68b9      	ldr	r1, [r7, #8]
 80111bc:	68f8      	ldr	r0, [r7, #12]
 80111be:	f000 fa50 	bl	8011662 <xQueueGenericCreateStatic>
 80111c2:	6178      	str	r0, [r7, #20]
 80111c4:	e008      	b.n	80111d8 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d105      	bne.n	80111d8 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80111cc:	2200      	movs	r2, #0
 80111ce:	68b9      	ldr	r1, [r7, #8]
 80111d0:	68f8      	ldr	r0, [r7, #12]
 80111d2:	f000 fa8c 	bl	80116ee <xQueueGenericCreate>
 80111d6:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d00c      	beq.n	80111f8 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d009      	beq.n	80111f8 <osMessageQueueNew+0xda>
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d005      	beq.n	80111f8 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	4619      	mov	r1, r3
 80111f2:	6978      	ldr	r0, [r7, #20]
 80111f4:	f001 f904 	bl	8012400 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 80111f8:	697b      	ldr	r3, [r7, #20]
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3718      	adds	r7, #24
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}
	...

08011204 <osMessageQueuePut>:
  Put a Message into a Queue or timeout if Queue is full.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011204:	b580      	push	{r7, lr}
 8011206:	b088      	sub	sp, #32
 8011208:	af00      	add	r7, sp, #0
 801120a:	60f8      	str	r0, [r7, #12]
 801120c:	60b9      	str	r1, [r7, #8]
 801120e:	603b      	str	r3, [r7, #0]
 8011210:	4613      	mov	r3, r2
 8011212:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011218:	2300      	movs	r3, #0
 801121a:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 801121c:	f7ff fc07 	bl	8010a2e <IRQ_Context>
 8011220:	4603      	mov	r3, r0
 8011222:	2b00      	cmp	r3, #0
 8011224:	d024      	beq.n	8011270 <osMessageQueuePut+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011226:	69bb      	ldr	r3, [r7, #24]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d005      	beq.n	8011238 <osMessageQueuePut+0x34>
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d002      	beq.n	8011238 <osMessageQueuePut+0x34>
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d003      	beq.n	8011240 <osMessageQueuePut+0x3c>
      stat = osErrorParameter;
 8011238:	f06f 0303 	mvn.w	r3, #3
 801123c:	61fb      	str	r3, [r7, #28]
 801123e:	e034      	b.n	80112aa <osMessageQueuePut+0xa6>
    }
    else {
      yield = pdFALSE;
 8011240:	2300      	movs	r3, #0
 8011242:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8011244:	f107 0214 	add.w	r2, r7, #20
 8011248:	2300      	movs	r3, #0
 801124a:	68b9      	ldr	r1, [r7, #8]
 801124c:	69b8      	ldr	r0, [r7, #24]
 801124e:	f000 fc7b 	bl	8011b48 <xQueueGenericSendFromISR>
 8011252:	4603      	mov	r3, r0
 8011254:	2b01      	cmp	r3, #1
 8011256:	d003      	beq.n	8011260 <osMessageQueuePut+0x5c>
        stat = osErrorResource;
 8011258:	f06f 0302 	mvn.w	r3, #2
 801125c:	61fb      	str	r3, [r7, #28]
 801125e:	e024      	b.n	80112aa <osMessageQueuePut+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d021      	beq.n	80112aa <osMessageQueuePut+0xa6>
 8011266:	4b13      	ldr	r3, [pc, #76]	; (80112b4 <osMessageQueuePut+0xb0>)
 8011268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801126c:	601a      	str	r2, [r3, #0]
 801126e:	e01c      	b.n	80112aa <osMessageQueuePut+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011270:	69bb      	ldr	r3, [r7, #24]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d002      	beq.n	801127c <osMessageQueuePut+0x78>
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d103      	bne.n	8011284 <osMessageQueuePut+0x80>
      stat = osErrorParameter;
 801127c:	f06f 0303 	mvn.w	r3, #3
 8011280:	61fb      	str	r3, [r7, #28]
 8011282:	e012      	b.n	80112aa <osMessageQueuePut+0xa6>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011284:	2300      	movs	r3, #0
 8011286:	683a      	ldr	r2, [r7, #0]
 8011288:	68b9      	ldr	r1, [r7, #8]
 801128a:	69b8      	ldr	r0, [r7, #24]
 801128c:	f000 fb93 	bl	80119b6 <xQueueGenericSend>
 8011290:	4603      	mov	r3, r0
 8011292:	2b01      	cmp	r3, #1
 8011294:	d009      	beq.n	80112aa <osMessageQueuePut+0xa6>
        if (timeout != 0U) {
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d003      	beq.n	80112a4 <osMessageQueuePut+0xa0>
          stat = osErrorTimeout;
 801129c:	f06f 0301 	mvn.w	r3, #1
 80112a0:	61fb      	str	r3, [r7, #28]
 80112a2:	e002      	b.n	80112aa <osMessageQueuePut+0xa6>
        } else {
          stat = osErrorResource;
 80112a4:	f06f 0302 	mvn.w	r3, #2
 80112a8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 80112aa:	69fb      	ldr	r3, [r7, #28]
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	3720      	adds	r7, #32
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}
 80112b4:	e000ed04 	.word	0xe000ed04

080112b8 <osMessageQueueGet>:
  Get a Message from a Queue or timeout if Queue is empty.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b088      	sub	sp, #32
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	607a      	str	r2, [r7, #4]
 80112c4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80112ca:	2300      	movs	r3, #0
 80112cc:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 80112ce:	f7ff fbae 	bl	8010a2e <IRQ_Context>
 80112d2:	4603      	mov	r3, r0
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d024      	beq.n	8011322 <osMessageQueueGet+0x6a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80112d8:	69bb      	ldr	r3, [r7, #24]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d005      	beq.n	80112ea <osMessageQueueGet+0x32>
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d002      	beq.n	80112ea <osMessageQueueGet+0x32>
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d003      	beq.n	80112f2 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 80112ea:	f06f 0303 	mvn.w	r3, #3
 80112ee:	61fb      	str	r3, [r7, #28]
 80112f0:	e033      	b.n	801135a <osMessageQueueGet+0xa2>
    }
    else {
      yield = pdFALSE;
 80112f2:	2300      	movs	r3, #0
 80112f4:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80112f6:	f107 0314 	add.w	r3, r7, #20
 80112fa:	461a      	mov	r2, r3
 80112fc:	68b9      	ldr	r1, [r7, #8]
 80112fe:	69b8      	ldr	r0, [r7, #24]
 8011300:	f000 fea4 	bl	801204c <xQueueReceiveFromISR>
 8011304:	4603      	mov	r3, r0
 8011306:	2b01      	cmp	r3, #1
 8011308:	d003      	beq.n	8011312 <osMessageQueueGet+0x5a>
        stat = osErrorResource;
 801130a:	f06f 0302 	mvn.w	r3, #2
 801130e:	61fb      	str	r3, [r7, #28]
 8011310:	e023      	b.n	801135a <osMessageQueueGet+0xa2>
      } else {
        portYIELD_FROM_ISR (yield);
 8011312:	697b      	ldr	r3, [r7, #20]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d020      	beq.n	801135a <osMessageQueueGet+0xa2>
 8011318:	4b12      	ldr	r3, [pc, #72]	; (8011364 <osMessageQueueGet+0xac>)
 801131a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801131e:	601a      	str	r2, [r3, #0]
 8011320:	e01b      	b.n	801135a <osMessageQueueGet+0xa2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011322:	69bb      	ldr	r3, [r7, #24]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d002      	beq.n	801132e <osMessageQueueGet+0x76>
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d103      	bne.n	8011336 <osMessageQueueGet+0x7e>
      stat = osErrorParameter;
 801132e:	f06f 0303 	mvn.w	r3, #3
 8011332:	61fb      	str	r3, [r7, #28]
 8011334:	e011      	b.n	801135a <osMessageQueueGet+0xa2>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011336:	683a      	ldr	r2, [r7, #0]
 8011338:	68b9      	ldr	r1, [r7, #8]
 801133a:	69b8      	ldr	r0, [r7, #24]
 801133c:	f000 fcf6 	bl	8011d2c <xQueueReceive>
 8011340:	4603      	mov	r3, r0
 8011342:	2b01      	cmp	r3, #1
 8011344:	d009      	beq.n	801135a <osMessageQueueGet+0xa2>
        if (timeout != 0U) {
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d003      	beq.n	8011354 <osMessageQueueGet+0x9c>
          stat = osErrorTimeout;
 801134c:	f06f 0301 	mvn.w	r3, #1
 8011350:	61fb      	str	r3, [r7, #28]
 8011352:	e002      	b.n	801135a <osMessageQueueGet+0xa2>
        } else {
          stat = osErrorResource;
 8011354:	f06f 0302 	mvn.w	r3, #2
 8011358:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 801135a:	69fb      	ldr	r3, [r7, #28]
}
 801135c:	4618      	mov	r0, r3
 801135e:	3720      	adds	r7, #32
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	e000ed04 	.word	0xe000ed04

08011368 <osMessageQueueGetCount>:
}

/*
  Get number of queued messages in a Message Queue.
*/
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8011368:	b580      	push	{r7, lr}
 801136a:	b084      	sub	sp, #16
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	60bb      	str	r3, [r7, #8]
  UBaseType_t count;

  if (hQueue == NULL) {
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d102      	bne.n	8011380 <osMessageQueueGetCount+0x18>
    count = 0U;
 801137a:	2300      	movs	r3, #0
 801137c:	60fb      	str	r3, [r7, #12]
 801137e:	e00d      	b.n	801139c <osMessageQueueGetCount+0x34>
  }
  else if (IRQ_Context() != 0U) {
 8011380:	f7ff fb55 	bl	8010a2e <IRQ_Context>
 8011384:	4603      	mov	r3, r0
 8011386:	2b00      	cmp	r3, #0
 8011388:	d004      	beq.n	8011394 <osMessageQueueGetCount+0x2c>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 801138a:	68b8      	ldr	r0, [r7, #8]
 801138c:	f000 fee1 	bl	8012152 <uxQueueMessagesWaitingFromISR>
 8011390:	60f8      	str	r0, [r7, #12]
 8011392:	e003      	b.n	801139c <osMessageQueueGetCount+0x34>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8011394:	68b8      	ldr	r0, [r7, #8]
 8011396:	f000 fec6 	bl	8012126 <uxQueueMessagesWaiting>
 801139a:	60f8      	str	r0, [r7, #12]
  }

  /* Return number of queued messages */
  return ((uint32_t)count);
 801139c:	68fb      	ldr	r3, [r7, #12]
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3710      	adds	r7, #16
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}

080113a6 <osMessageQueueDelete>:
}

/*
  Delete a Message Queue object.
*/
osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80113a6:	b580      	push	{r7, lr}
 80113a8:	b084      	sub	sp, #16
 80113aa:	af00      	add	r7, sp, #0
 80113ac:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	60bb      	str	r3, [r7, #8]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IRQ_Context() != 0U) {
 80113b2:	f7ff fb3c 	bl	8010a2e <IRQ_Context>
 80113b6:	4603      	mov	r3, r0
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d003      	beq.n	80113c4 <osMessageQueueDelete+0x1e>
    stat = osErrorISR;
 80113bc:	f06f 0305 	mvn.w	r3, #5
 80113c0:	60fb      	str	r3, [r7, #12]
 80113c2:	e00e      	b.n	80113e2 <osMessageQueueDelete+0x3c>
  }
  else if (hQueue == NULL) {
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d103      	bne.n	80113d2 <osMessageQueueDelete+0x2c>
    stat = osErrorParameter;
 80113ca:	f06f 0303 	mvn.w	r3, #3
 80113ce:	60fb      	str	r3, [r7, #12]
 80113d0:	e007      	b.n	80113e2 <osMessageQueueDelete+0x3c>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80113d2:	68b8      	ldr	r0, [r7, #8]
 80113d4:	f001 f858 	bl	8012488 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80113d8:	2300      	movs	r3, #0
 80113da:	60fb      	str	r3, [r7, #12]
    vQueueDelete (hQueue);
 80113dc:	68b8      	ldr	r0, [r7, #8]
 80113de:	f000 fecc 	bl	801217a <vQueueDelete>
#else
  stat = osError;
#endif

  /* Return execution status */
  return (stat);
 80113e2:	68fb      	ldr	r3, [r7, #12]
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	3710      	adds	r7, #16
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}

080113ec <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80113ec:	b480      	push	{r7}
 80113ee:	b085      	sub	sp, #20
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	60f8      	str	r0, [r7, #12]
 80113f4:	60b9      	str	r1, [r7, #8]
 80113f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	4a07      	ldr	r2, [pc, #28]	; (8011418 <vApplicationGetIdleTaskMemory+0x2c>)
 80113fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	4a06      	ldr	r2, [pc, #24]	; (801141c <vApplicationGetIdleTaskMemory+0x30>)
 8011402:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f44f 7200 	mov.w	r2, #512	; 0x200
 801140a:	601a      	str	r2, [r3, #0]
}
 801140c:	bf00      	nop
 801140e:	3714      	adds	r7, #20
 8011410:	46bd      	mov	sp, r7
 8011412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011416:	4770      	bx	lr
 8011418:	20005af4 	.word	0x20005af4
 801141c:	20005b50 	.word	0x20005b50

08011420 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011420:	b480      	push	{r7}
 8011422:	b085      	sub	sp, #20
 8011424:	af00      	add	r7, sp, #0
 8011426:	60f8      	str	r0, [r7, #12]
 8011428:	60b9      	str	r1, [r7, #8]
 801142a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	4a07      	ldr	r2, [pc, #28]	; (801144c <vApplicationGetTimerTaskMemory+0x2c>)
 8011430:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	4a06      	ldr	r2, [pc, #24]	; (8011450 <vApplicationGetTimerTaskMemory+0x30>)
 8011436:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801143e:	601a      	str	r2, [r3, #0]
}
 8011440:	bf00      	nop
 8011442:	3714      	adds	r7, #20
 8011444:	46bd      	mov	sp, r7
 8011446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144a:	4770      	bx	lr
 801144c:	20006350 	.word	0x20006350
 8011450:	200063ac 	.word	0x200063ac

08011454 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011454:	b480      	push	{r7}
 8011456:	b083      	sub	sp, #12
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f103 0208 	add.w	r2, r3, #8
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	f04f 32ff 	mov.w	r2, #4294967295
 801146c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	f103 0208 	add.w	r2, r3, #8
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f103 0208 	add.w	r2, r3, #8
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	2200      	movs	r2, #0
 8011486:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011488:	bf00      	nop
 801148a:	370c      	adds	r7, #12
 801148c:	46bd      	mov	sp, r7
 801148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011492:	4770      	bx	lr

08011494 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011494:	b480      	push	{r7}
 8011496:	b083      	sub	sp, #12
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	2200      	movs	r2, #0
 80114a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80114a2:	bf00      	nop
 80114a4:	370c      	adds	r7, #12
 80114a6:	46bd      	mov	sp, r7
 80114a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ac:	4770      	bx	lr

080114ae <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80114ae:	b480      	push	{r7}
 80114b0:	b085      	sub	sp, #20
 80114b2:	af00      	add	r7, sp, #0
 80114b4:	6078      	str	r0, [r7, #4]
 80114b6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114c4:	d103      	bne.n	80114ce <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	691b      	ldr	r3, [r3, #16]
 80114ca:	60fb      	str	r3, [r7, #12]
 80114cc:	e00c      	b.n	80114e8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	3308      	adds	r3, #8
 80114d2:	60fb      	str	r3, [r7, #12]
 80114d4:	e002      	b.n	80114dc <vListInsert+0x2e>
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	685b      	ldr	r3, [r3, #4]
 80114da:	60fb      	str	r3, [r7, #12]
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	68ba      	ldr	r2, [r7, #8]
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d2f6      	bcs.n	80114d6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	685a      	ldr	r2, [r3, #4]
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	685b      	ldr	r3, [r3, #4]
 80114f4:	683a      	ldr	r2, [r7, #0]
 80114f6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	68fa      	ldr	r2, [r7, #12]
 80114fc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	683a      	ldr	r2, [r7, #0]
 8011502:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	1c5a      	adds	r2, r3, #1
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	601a      	str	r2, [r3, #0]
}
 8011514:	bf00      	nop
 8011516:	3714      	adds	r7, #20
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr

08011520 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011520:	b480      	push	{r7}
 8011522:	b085      	sub	sp, #20
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	691b      	ldr	r3, [r3, #16]
 801152c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	687a      	ldr	r2, [r7, #4]
 8011534:	6892      	ldr	r2, [r2, #8]
 8011536:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	689b      	ldr	r3, [r3, #8]
 801153c:	687a      	ldr	r2, [r7, #4]
 801153e:	6852      	ldr	r2, [r2, #4]
 8011540:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	685b      	ldr	r3, [r3, #4]
 8011546:	687a      	ldr	r2, [r7, #4]
 8011548:	429a      	cmp	r2, r3
 801154a:	d103      	bne.n	8011554 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	689a      	ldr	r2, [r3, #8]
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2200      	movs	r2, #0
 8011558:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	1e5a      	subs	r2, r3, #1
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	681b      	ldr	r3, [r3, #0]
}
 8011568:	4618      	mov	r0, r3
 801156a:	3714      	adds	r7, #20
 801156c:	46bd      	mov	sp, r7
 801156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011572:	4770      	bx	lr

08011574 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b084      	sub	sp, #16
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
 801157c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 801157e:	2301      	movs	r3, #1
 8011580:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d102      	bne.n	8011592 <xQueueGenericReset+0x1e>
 801158c:	f002 fd7c 	bl	8014088 <ulSetInterruptMask>
 8011590:	e7fe      	b.n	8011590 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d057      	beq.n	8011648 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 801159c:	2b00      	cmp	r3, #0
 801159e:	d053      	beq.n	8011648 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115a8:	2100      	movs	r1, #0
 80115aa:	fba3 2302 	umull	r2, r3, r3, r2
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d000      	beq.n	80115b4 <xQueueGenericReset+0x40>
 80115b2:	2101      	movs	r1, #1
 80115b4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d146      	bne.n	8011648 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 80115ba:	f002 fc27 	bl	8013e0c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	681a      	ldr	r2, [r3, #0]
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115c6:	68b9      	ldr	r1, [r7, #8]
 80115c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80115ca:	fb01 f303 	mul.w	r3, r1, r3
 80115ce:	441a      	add	r2, r3
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	2200      	movs	r2, #0
 80115d8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	681a      	ldr	r2, [r3, #0]
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115ea:	3b01      	subs	r3, #1
 80115ec:	68b9      	ldr	r1, [r7, #8]
 80115ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80115f0:	fb01 f303 	mul.w	r3, r1, r3
 80115f4:	441a      	add	r2, r3
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	22ff      	movs	r2, #255	; 0xff
 80115fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	22ff      	movs	r2, #255	; 0xff
 8011606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d10e      	bne.n	801162e <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	691b      	ldr	r3, [r3, #16]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d014      	beq.n	8011642 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	3310      	adds	r3, #16
 801161c:	4618      	mov	r0, r3
 801161e:	f001 fc9d 	bl	8012f5c <xTaskRemoveFromEventList>
 8011622:	4603      	mov	r3, r0
 8011624:	2b00      	cmp	r3, #0
 8011626:	d00c      	beq.n	8011642 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8011628:	f002 fbde 	bl	8013de8 <vPortYield>
 801162c:	e009      	b.n	8011642 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	3310      	adds	r3, #16
 8011632:	4618      	mov	r0, r3
 8011634:	f7ff ff0e 	bl	8011454 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	3324      	adds	r3, #36	; 0x24
 801163c:	4618      	mov	r0, r3
 801163e:	f7ff ff09 	bl	8011454 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8011642:	f002 fbf5 	bl	8013e30 <vPortExitCritical>
 8011646:	e001      	b.n	801164c <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8011648:	2300      	movs	r3, #0
 801164a:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d102      	bne.n	8011658 <xQueueGenericReset+0xe4>
 8011652:	f002 fd19 	bl	8014088 <ulSetInterruptMask>
 8011656:	e7fe      	b.n	8011656 <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8011658:	68fb      	ldr	r3, [r7, #12]
}
 801165a:	4618      	mov	r0, r3
 801165c:	3710      	adds	r7, #16
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}

08011662 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8011662:	b580      	push	{r7, lr}
 8011664:	b088      	sub	sp, #32
 8011666:	af02      	add	r7, sp, #8
 8011668:	60f8      	str	r0, [r7, #12]
 801166a:	60b9      	str	r1, [r7, #8]
 801166c:	607a      	str	r2, [r7, #4]
 801166e:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8011670:	2300      	movs	r3, #0
 8011672:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d102      	bne.n	8011680 <xQueueGenericCreateStatic+0x1e>
 801167a:	f002 fd05 	bl	8014088 <ulSetInterruptMask>
 801167e:	e7fe      	b.n	801167e <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d028      	beq.n	80116d8 <xQueueGenericCreateStatic+0x76>
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d025      	beq.n	80116d8 <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d002      	beq.n	8011698 <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d01f      	beq.n	80116d8 <xQueueGenericCreateStatic+0x76>
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d102      	bne.n	80116a4 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d119      	bne.n	80116d8 <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80116a4:	2350      	movs	r3, #80	; 0x50
 80116a6:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	2b50      	cmp	r3, #80	; 0x50
 80116ac:	d002      	beq.n	80116b4 <xQueueGenericCreateStatic+0x52>
 80116ae:	f002 fceb 	bl	8014088 <ulSetInterruptMask>
 80116b2:	e7fe      	b.n	80116b2 <xQueueGenericCreateStatic+0x50>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 80116b4:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	2201      	movs	r2, #1
 80116be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80116c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	9300      	str	r3, [sp, #0]
 80116ca:	4613      	mov	r3, r2
 80116cc:	687a      	ldr	r2, [r7, #4]
 80116ce:	68b9      	ldr	r1, [r7, #8]
 80116d0:	68f8      	ldr	r0, [r7, #12]
 80116d2:	f000 f856 	bl	8011782 <prvInitialiseNewQueue>
 80116d6:	e005      	b.n	80116e4 <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d102      	bne.n	80116e4 <xQueueGenericCreateStatic+0x82>
 80116de:	f002 fcd3 	bl	8014088 <ulSetInterruptMask>
 80116e2:	e7fe      	b.n	80116e2 <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80116e4:	697b      	ldr	r3, [r7, #20]
    }
 80116e6:	4618      	mov	r0, r3
 80116e8:	3718      	adds	r7, #24
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}

080116ee <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80116ee:	b580      	push	{r7, lr}
 80116f0:	b08a      	sub	sp, #40	; 0x28
 80116f2:	af02      	add	r7, sp, #8
 80116f4:	60f8      	str	r0, [r7, #12]
 80116f6:	60b9      	str	r1, [r7, #8]
 80116f8:	4613      	mov	r3, r2
 80116fa:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80116fc:	2300      	movs	r3, #0
 80116fe:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d032      	beq.n	801176c <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8011706:	2100      	movs	r1, #0
 8011708:	68ba      	ldr	r2, [r7, #8]
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	fba3 2302 	umull	r2, r3, r3, r2
 8011710:	2b00      	cmp	r3, #0
 8011712:	d000      	beq.n	8011716 <xQueueGenericCreate+0x28>
 8011714:	2101      	movs	r1, #1
 8011716:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8011718:	2b00      	cmp	r3, #0
 801171a:	d127      	bne.n	801176c <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	68ba      	ldr	r2, [r7, #8]
 8011720:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8011724:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8011728:	d820      	bhi.n	801176c <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	68ba      	ldr	r2, [r7, #8]
 801172e:	fb02 f303 	mul.w	r3, r2, r3
 8011732:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011734:	69bb      	ldr	r3, [r7, #24]
 8011736:	3350      	adds	r3, #80	; 0x50
 8011738:	4618      	mov	r0, r3
 801173a:	f002 fd05 	bl	8014148 <pvPortMalloc>
 801173e:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8011740:	69fb      	ldr	r3, [r7, #28]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d018      	beq.n	8011778 <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011746:	69fb      	ldr	r3, [r7, #28]
 8011748:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	3350      	adds	r3, #80	; 0x50
 801174e:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011750:	69fb      	ldr	r3, [r7, #28]
 8011752:	2200      	movs	r2, #0
 8011754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011758:	79fa      	ldrb	r2, [r7, #7]
 801175a:	69fb      	ldr	r3, [r7, #28]
 801175c:	9300      	str	r3, [sp, #0]
 801175e:	4613      	mov	r3, r2
 8011760:	697a      	ldr	r2, [r7, #20]
 8011762:	68b9      	ldr	r1, [r7, #8]
 8011764:	68f8      	ldr	r0, [r7, #12]
 8011766:	f000 f80c 	bl	8011782 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 801176a:	e005      	b.n	8011778 <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 801176c:	69fb      	ldr	r3, [r7, #28]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d102      	bne.n	8011778 <xQueueGenericCreate+0x8a>
 8011772:	f002 fc89 	bl	8014088 <ulSetInterruptMask>
 8011776:	e7fe      	b.n	8011776 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8011778:	69fb      	ldr	r3, [r7, #28]
    }
 801177a:	4618      	mov	r0, r3
 801177c:	3720      	adds	r7, #32
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}

08011782 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8011782:	b580      	push	{r7, lr}
 8011784:	b084      	sub	sp, #16
 8011786:	af00      	add	r7, sp, #0
 8011788:	60f8      	str	r0, [r7, #12]
 801178a:	60b9      	str	r1, [r7, #8]
 801178c:	607a      	str	r2, [r7, #4]
 801178e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d103      	bne.n	801179e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011796:	69bb      	ldr	r3, [r7, #24]
 8011798:	69ba      	ldr	r2, [r7, #24]
 801179a:	601a      	str	r2, [r3, #0]
 801179c:	e002      	b.n	80117a4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801179e:	69bb      	ldr	r3, [r7, #24]
 80117a0:	687a      	ldr	r2, [r7, #4]
 80117a2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80117a4:	69bb      	ldr	r3, [r7, #24]
 80117a6:	68fa      	ldr	r2, [r7, #12]
 80117a8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80117aa:	69bb      	ldr	r3, [r7, #24]
 80117ac:	68ba      	ldr	r2, [r7, #8]
 80117ae:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80117b0:	2101      	movs	r1, #1
 80117b2:	69b8      	ldr	r0, [r7, #24]
 80117b4:	f7ff fede 	bl	8011574 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80117b8:	69bb      	ldr	r3, [r7, #24]
 80117ba:	78fa      	ldrb	r2, [r7, #3]
 80117bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80117c0:	bf00      	nop
 80117c2:	3710      	adds	r7, #16
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}

080117c8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b082      	sub	sp, #8
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d00e      	beq.n	80117f4 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2200      	movs	r2, #0
 80117da:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2200      	movs	r2, #0
 80117e0:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2200      	movs	r2, #0
 80117e6:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80117e8:	2300      	movs	r3, #0
 80117ea:	2200      	movs	r2, #0
 80117ec:	2100      	movs	r1, #0
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f000 f8e1 	bl	80119b6 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80117f4:	bf00      	nop
 80117f6:	3708      	adds	r7, #8
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}

080117fc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b086      	sub	sp, #24
 8011800:	af00      	add	r7, sp, #0
 8011802:	4603      	mov	r3, r0
 8011804:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011806:	2301      	movs	r3, #1
 8011808:	617b      	str	r3, [r7, #20]
 801180a:	2300      	movs	r3, #0
 801180c:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801180e:	79fb      	ldrb	r3, [r7, #7]
 8011810:	461a      	mov	r2, r3
 8011812:	6939      	ldr	r1, [r7, #16]
 8011814:	6978      	ldr	r0, [r7, #20]
 8011816:	f7ff ff6a 	bl	80116ee <xQueueGenericCreate>
 801181a:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801181c:	68f8      	ldr	r0, [r7, #12]
 801181e:	f7ff ffd3 	bl	80117c8 <prvInitialiseMutex>

        return xNewQueue;
 8011822:	68fb      	ldr	r3, [r7, #12]
    }
 8011824:	4618      	mov	r0, r3
 8011826:	3718      	adds	r7, #24
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}

0801182c <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
 801182c:	b580      	push	{r7, lr}
 801182e:	b088      	sub	sp, #32
 8011830:	af02      	add	r7, sp, #8
 8011832:	4603      	mov	r3, r0
 8011834:	6039      	str	r1, [r7, #0]
 8011836:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011838:	2301      	movs	r3, #1
 801183a:	617b      	str	r3, [r7, #20]
 801183c:	2300      	movs	r3, #0
 801183e:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011840:	79fb      	ldrb	r3, [r7, #7]
 8011842:	9300      	str	r3, [sp, #0]
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	2200      	movs	r2, #0
 8011848:	6939      	ldr	r1, [r7, #16]
 801184a:	6978      	ldr	r0, [r7, #20]
 801184c:	f7ff ff09 	bl	8011662 <xQueueGenericCreateStatic>
 8011850:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011852:	68f8      	ldr	r0, [r7, #12]
 8011854:	f7ff ffb8 	bl	80117c8 <prvInitialiseMutex>

        return xNewQueue;
 8011858:	68fb      	ldr	r3, [r7, #12]
    }
 801185a:	4618      	mov	r0, r3
 801185c:	3718      	adds	r7, #24
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}

08011862 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 8011862:	b590      	push	{r4, r7, lr}
 8011864:	b085      	sub	sp, #20
 8011866:	af00      	add	r7, sp, #0
 8011868:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	60bb      	str	r3, [r7, #8]

        configASSERT( pxMutex );
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d102      	bne.n	801187a <xQueueGiveMutexRecursive+0x18>
 8011874:	f002 fc08 	bl	8014088 <ulSetInterruptMask>
 8011878:	e7fe      	b.n	8011878 <xQueueGiveMutexRecursive+0x16>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	689c      	ldr	r4, [r3, #8]
 801187e:	f001 fd75 	bl	801336c <xTaskGetCurrentTaskHandle>
 8011882:	4603      	mov	r3, r0
 8011884:	429c      	cmp	r4, r3
 8011886:	d111      	bne.n	80118ac <xQueueGiveMutexRecursive+0x4a>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	68db      	ldr	r3, [r3, #12]
 801188c:	1e5a      	subs	r2, r3, #1
 801188e:	68bb      	ldr	r3, [r7, #8]
 8011890:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	68db      	ldr	r3, [r3, #12]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d105      	bne.n	80118a6 <xQueueGiveMutexRecursive+0x44>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801189a:	2300      	movs	r3, #0
 801189c:	2200      	movs	r2, #0
 801189e:	2100      	movs	r1, #0
 80118a0:	68b8      	ldr	r0, [r7, #8]
 80118a2:	f000 f888 	bl	80119b6 <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 80118a6:	2301      	movs	r3, #1
 80118a8:	60fb      	str	r3, [r7, #12]
 80118aa:	e001      	b.n	80118b0 <xQueueGiveMutexRecursive+0x4e>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 80118ac:	2300      	movs	r3, #0
 80118ae:	60fb      	str	r3, [r7, #12]

            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        return xReturn;
 80118b0:	68fb      	ldr	r3, [r7, #12]
    }
 80118b2:	4618      	mov	r0, r3
 80118b4:	3714      	adds	r7, #20
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd90      	pop	{r4, r7, pc}

080118ba <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 80118ba:	b590      	push	{r4, r7, lr}
 80118bc:	b085      	sub	sp, #20
 80118be:	af00      	add	r7, sp, #0
 80118c0:	6078      	str	r0, [r7, #4]
 80118c2:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	60bb      	str	r3, [r7, #8]

        configASSERT( pxMutex );
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d102      	bne.n	80118d4 <xQueueTakeMutexRecursive+0x1a>
 80118ce:	f002 fbdb 	bl	8014088 <ulSetInterruptMask>
 80118d2:	e7fe      	b.n	80118d2 <xQueueTakeMutexRecursive+0x18>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	689c      	ldr	r4, [r3, #8]
 80118d8:	f001 fd48 	bl	801336c <xTaskGetCurrentTaskHandle>
 80118dc:	4603      	mov	r3, r0
 80118de:	429c      	cmp	r4, r3
 80118e0:	d107      	bne.n	80118f2 <xQueueTakeMutexRecursive+0x38>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	68db      	ldr	r3, [r3, #12]
 80118e6:	1c5a      	adds	r2, r3, #1
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 80118ec:	2301      	movs	r3, #1
 80118ee:	60fb      	str	r3, [r7, #12]
 80118f0:	e00c      	b.n	801190c <xQueueTakeMutexRecursive+0x52>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80118f2:	6839      	ldr	r1, [r7, #0]
 80118f4:	68b8      	ldr	r0, [r7, #8]
 80118f6:	f000 fad2 	bl	8011e9e <xQueueSemaphoreTake>
 80118fa:	60f8      	str	r0, [r7, #12]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d004      	beq.n	801190c <xQueueTakeMutexRecursive+0x52>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	68db      	ldr	r3, [r3, #12]
 8011906:	1c5a      	adds	r2, r3, #1
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	60da      	str	r2, [r3, #12]
            {
                traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
            }
        }

        return xReturn;
 801190c:	68fb      	ldr	r3, [r7, #12]
    }
 801190e:	4618      	mov	r0, r3
 8011910:	3714      	adds	r7, #20
 8011912:	46bd      	mov	sp, r7
 8011914:	bd90      	pop	{r4, r7, pc}

08011916 <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
 8011916:	b580      	push	{r7, lr}
 8011918:	b088      	sub	sp, #32
 801191a:	af02      	add	r7, sp, #8
 801191c:	60f8      	str	r0, [r7, #12]
 801191e:	60b9      	str	r1, [r7, #8]
 8011920:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 8011922:	2300      	movs	r3, #0
 8011924:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d013      	beq.n	8011954 <xQueueCreateCountingSemaphoreStatic+0x3e>
 801192c:	68ba      	ldr	r2, [r7, #8]
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	429a      	cmp	r2, r3
 8011932:	d80f      	bhi.n	8011954 <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011934:	2302      	movs	r3, #2
 8011936:	9300      	str	r3, [sp, #0]
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2200      	movs	r2, #0
 801193c:	2100      	movs	r1, #0
 801193e:	68f8      	ldr	r0, [r7, #12]
 8011940:	f7ff fe8f 	bl	8011662 <xQueueGenericCreateStatic>
 8011944:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d009      	beq.n	8011960 <xQueueCreateCountingSemaphoreStatic+0x4a>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801194c:	697b      	ldr	r3, [r7, #20]
 801194e:	68ba      	ldr	r2, [r7, #8]
 8011950:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8011952:	e005      	b.n	8011960 <xQueueCreateCountingSemaphoreStatic+0x4a>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d102      	bne.n	8011960 <xQueueCreateCountingSemaphoreStatic+0x4a>
 801195a:	f002 fb95 	bl	8014088 <ulSetInterruptMask>
 801195e:	e7fe      	b.n	801195e <xQueueCreateCountingSemaphoreStatic+0x48>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 8011960:	697b      	ldr	r3, [r7, #20]
    }
 8011962:	4618      	mov	r0, r3
 8011964:	3718      	adds	r7, #24
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}

0801196a <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 801196a:	b580      	push	{r7, lr}
 801196c:	b084      	sub	sp, #16
 801196e:	af00      	add	r7, sp, #0
 8011970:	6078      	str	r0, [r7, #4]
 8011972:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8011974:	2300      	movs	r3, #0
 8011976:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d010      	beq.n	80119a0 <xQueueCreateCountingSemaphore+0x36>
 801197e:	683a      	ldr	r2, [r7, #0]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	429a      	cmp	r2, r3
 8011984:	d80c      	bhi.n	80119a0 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011986:	2202      	movs	r2, #2
 8011988:	2100      	movs	r1, #0
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f7ff feaf 	bl	80116ee <xQueueGenericCreate>
 8011990:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d009      	beq.n	80119ac <xQueueCreateCountingSemaphore+0x42>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	683a      	ldr	r2, [r7, #0]
 801199c:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 801199e:	e005      	b.n	80119ac <xQueueCreateCountingSemaphore+0x42>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d102      	bne.n	80119ac <xQueueCreateCountingSemaphore+0x42>
 80119a6:	f002 fb6f 	bl	8014088 <ulSetInterruptMask>
 80119aa:	e7fe      	b.n	80119aa <xQueueCreateCountingSemaphore+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 80119ac:	68fb      	ldr	r3, [r7, #12]
    }
 80119ae:	4618      	mov	r0, r3
 80119b0:	3710      	adds	r7, #16
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}

080119b6 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80119b6:	b580      	push	{r7, lr}
 80119b8:	b08a      	sub	sp, #40	; 0x28
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	60f8      	str	r0, [r7, #12]
 80119be:	60b9      	str	r1, [r7, #8]
 80119c0:	607a      	str	r2, [r7, #4]
 80119c2:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80119c4:	2300      	movs	r3, #0
 80119c6:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80119cc:	6a3b      	ldr	r3, [r7, #32]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d102      	bne.n	80119d8 <xQueueGenericSend+0x22>
 80119d2:	f002 fb59 	bl	8014088 <ulSetInterruptMask>
 80119d6:	e7fe      	b.n	80119d6 <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d103      	bne.n	80119e6 <xQueueGenericSend+0x30>
 80119de:	6a3b      	ldr	r3, [r7, #32]
 80119e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d101      	bne.n	80119ea <xQueueGenericSend+0x34>
 80119e6:	2301      	movs	r3, #1
 80119e8:	e000      	b.n	80119ec <xQueueGenericSend+0x36>
 80119ea:	2300      	movs	r3, #0
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d102      	bne.n	80119f6 <xQueueGenericSend+0x40>
 80119f0:	f002 fb4a 	bl	8014088 <ulSetInterruptMask>
 80119f4:	e7fe      	b.n	80119f4 <xQueueGenericSend+0x3e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	2b02      	cmp	r3, #2
 80119fa:	d103      	bne.n	8011a04 <xQueueGenericSend+0x4e>
 80119fc:	6a3b      	ldr	r3, [r7, #32]
 80119fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	d101      	bne.n	8011a08 <xQueueGenericSend+0x52>
 8011a04:	2301      	movs	r3, #1
 8011a06:	e000      	b.n	8011a0a <xQueueGenericSend+0x54>
 8011a08:	2300      	movs	r3, #0
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d102      	bne.n	8011a14 <xQueueGenericSend+0x5e>
 8011a0e:	f002 fb3b 	bl	8014088 <ulSetInterruptMask>
 8011a12:	e7fe      	b.n	8011a12 <xQueueGenericSend+0x5c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a14:	f001 fcba 	bl	801338c <xTaskGetSchedulerState>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d102      	bne.n	8011a24 <xQueueGenericSend+0x6e>
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d101      	bne.n	8011a28 <xQueueGenericSend+0x72>
 8011a24:	2301      	movs	r3, #1
 8011a26:	e000      	b.n	8011a2a <xQueueGenericSend+0x74>
 8011a28:	2300      	movs	r3, #0
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d102      	bne.n	8011a34 <xQueueGenericSend+0x7e>
 8011a2e:	f002 fb2b 	bl	8014088 <ulSetInterruptMask>
 8011a32:	e7fe      	b.n	8011a32 <xQueueGenericSend+0x7c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8011a34:	f002 f9ea 	bl	8013e0c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011a38:	6a3b      	ldr	r3, [r7, #32]
 8011a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a3c:	6a3b      	ldr	r3, [r7, #32]
 8011a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d302      	bcc.n	8011a4a <xQueueGenericSend+0x94>
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	2b02      	cmp	r3, #2
 8011a48:	d11d      	bne.n	8011a86 <xQueueGenericSend+0xd0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011a4a:	683a      	ldr	r2, [r7, #0]
 8011a4c:	68b9      	ldr	r1, [r7, #8]
 8011a4e:	6a38      	ldr	r0, [r7, #32]
 8011a50:	f000 fbc6 	bl	80121e0 <prvCopyDataToQueue>
 8011a54:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a56:	6a3b      	ldr	r3, [r7, #32]
 8011a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d00a      	beq.n	8011a74 <xQueueGenericSend+0xbe>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a5e:	6a3b      	ldr	r3, [r7, #32]
 8011a60:	3324      	adds	r3, #36	; 0x24
 8011a62:	4618      	mov	r0, r3
 8011a64:	f001 fa7a 	bl	8012f5c <xTaskRemoveFromEventList>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d007      	beq.n	8011a7e <xQueueGenericSend+0xc8>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8011a6e:	f002 f9bb 	bl	8013de8 <vPortYield>
 8011a72:	e004      	b.n	8011a7e <xQueueGenericSend+0xc8>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8011a74:	69fb      	ldr	r3, [r7, #28]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d001      	beq.n	8011a7e <xQueueGenericSend+0xc8>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8011a7a:	f002 f9b5 	bl	8013de8 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8011a7e:	f002 f9d7 	bl	8013e30 <vPortExitCritical>
                return pdPASS;
 8011a82:	2301      	movs	r3, #1
 8011a84:	e05c      	b.n	8011b40 <xQueueGenericSend+0x18a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d103      	bne.n	8011a94 <xQueueGenericSend+0xde>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8011a8c:	f002 f9d0 	bl	8013e30 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8011a90:	2300      	movs	r3, #0
 8011a92:	e055      	b.n	8011b40 <xQueueGenericSend+0x18a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8011a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d106      	bne.n	8011aa8 <xQueueGenericSend+0xf2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8011a9a:	f107 0314 	add.w	r3, r7, #20
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f001 fb2a 	bl	80130f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8011aa8:	f002 f9c2 	bl	8013e30 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8011aac:	f000 ff70 	bl	8012990 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8011ab0:	f002 f9ac 	bl	8013e0c <vPortEnterCritical>
 8011ab4:	6a3b      	ldr	r3, [r7, #32]
 8011ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011aba:	b25b      	sxtb	r3, r3
 8011abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ac0:	d103      	bne.n	8011aca <xQueueGenericSend+0x114>
 8011ac2:	6a3b      	ldr	r3, [r7, #32]
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011aca:	6a3b      	ldr	r3, [r7, #32]
 8011acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ad0:	b25b      	sxtb	r3, r3
 8011ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ad6:	d103      	bne.n	8011ae0 <xQueueGenericSend+0x12a>
 8011ad8:	6a3b      	ldr	r3, [r7, #32]
 8011ada:	2200      	movs	r2, #0
 8011adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011ae0:	f002 f9a6 	bl	8013e30 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011ae4:	1d3a      	adds	r2, r7, #4
 8011ae6:	f107 0314 	add.w	r3, r7, #20
 8011aea:	4611      	mov	r1, r2
 8011aec:	4618      	mov	r0, r3
 8011aee:	f001 fb19 	bl	8013124 <xTaskCheckForTimeOut>
 8011af2:	4603      	mov	r3, r0
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d11d      	bne.n	8011b34 <xQueueGenericSend+0x17e>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011af8:	6a38      	ldr	r0, [r7, #32]
 8011afa:	f000 fc69 	bl	80123d0 <prvIsQueueFull>
 8011afe:	4603      	mov	r3, r0
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d011      	beq.n	8011b28 <xQueueGenericSend+0x172>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011b04:	6a3b      	ldr	r3, [r7, #32]
 8011b06:	3310      	adds	r3, #16
 8011b08:	687a      	ldr	r2, [r7, #4]
 8011b0a:	4611      	mov	r1, r2
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f001 f9cb 	bl	8012ea8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8011b12:	6a38      	ldr	r0, [r7, #32]
 8011b14:	f000 fbf4 	bl	8012300 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8011b18:	f000 ff48 	bl	80129ac <xTaskResumeAll>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d188      	bne.n	8011a34 <xQueueGenericSend+0x7e>
                {
                    portYIELD_WITHIN_API();
 8011b22:	f002 f961 	bl	8013de8 <vPortYield>
 8011b26:	e785      	b.n	8011a34 <xQueueGenericSend+0x7e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8011b28:	6a38      	ldr	r0, [r7, #32]
 8011b2a:	f000 fbe9 	bl	8012300 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8011b2e:	f000 ff3d 	bl	80129ac <xTaskResumeAll>
 8011b32:	e77f      	b.n	8011a34 <xQueueGenericSend+0x7e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8011b34:	6a38      	ldr	r0, [r7, #32]
 8011b36:	f000 fbe3 	bl	8012300 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8011b3a:	f000 ff37 	bl	80129ac <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8011b3e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3728      	adds	r7, #40	; 0x28
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b08a      	sub	sp, #40	; 0x28
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	60f8      	str	r0, [r7, #12]
 8011b50:	60b9      	str	r1, [r7, #8]
 8011b52:	607a      	str	r2, [r7, #4]
 8011b54:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8011b5a:	6a3b      	ldr	r3, [r7, #32]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d102      	bne.n	8011b66 <xQueueGenericSendFromISR+0x1e>
 8011b60:	f002 fa92 	bl	8014088 <ulSetInterruptMask>
 8011b64:	e7fe      	b.n	8011b64 <xQueueGenericSendFromISR+0x1c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d103      	bne.n	8011b74 <xQueueGenericSendFromISR+0x2c>
 8011b6c:	6a3b      	ldr	r3, [r7, #32]
 8011b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d101      	bne.n	8011b78 <xQueueGenericSendFromISR+0x30>
 8011b74:	2301      	movs	r3, #1
 8011b76:	e000      	b.n	8011b7a <xQueueGenericSendFromISR+0x32>
 8011b78:	2300      	movs	r3, #0
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d102      	bne.n	8011b84 <xQueueGenericSendFromISR+0x3c>
 8011b7e:	f002 fa83 	bl	8014088 <ulSetInterruptMask>
 8011b82:	e7fe      	b.n	8011b82 <xQueueGenericSendFromISR+0x3a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011b84:	683b      	ldr	r3, [r7, #0]
 8011b86:	2b02      	cmp	r3, #2
 8011b88:	d103      	bne.n	8011b92 <xQueueGenericSendFromISR+0x4a>
 8011b8a:	6a3b      	ldr	r3, [r7, #32]
 8011b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b8e:	2b01      	cmp	r3, #1
 8011b90:	d101      	bne.n	8011b96 <xQueueGenericSendFromISR+0x4e>
 8011b92:	2301      	movs	r3, #1
 8011b94:	e000      	b.n	8011b98 <xQueueGenericSendFromISR+0x50>
 8011b96:	2300      	movs	r3, #0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d102      	bne.n	8011ba2 <xQueueGenericSendFromISR+0x5a>
 8011b9c:	f002 fa74 	bl	8014088 <ulSetInterruptMask>
 8011ba0:	e7fe      	b.n	8011ba0 <xQueueGenericSendFromISR+0x58>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011ba2:	f002 fa71 	bl	8014088 <ulSetInterruptMask>
 8011ba6:	61f8      	str	r0, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011ba8:	6a3b      	ldr	r3, [r7, #32]
 8011baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011bac:	6a3b      	ldr	r3, [r7, #32]
 8011bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	d302      	bcc.n	8011bba <xQueueGenericSendFromISR+0x72>
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	2b02      	cmp	r3, #2
 8011bb8:	d13c      	bne.n	8011c34 <xQueueGenericSendFromISR+0xec>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8011bba:	6a3b      	ldr	r3, [r7, #32]
 8011bbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011bc0:	76fb      	strb	r3, [r7, #27]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011bc2:	6a3b      	ldr	r3, [r7, #32]
 8011bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bc6:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011bc8:	683a      	ldr	r2, [r7, #0]
 8011bca:	68b9      	ldr	r1, [r7, #8]
 8011bcc:	6a38      	ldr	r0, [r7, #32]
 8011bce:	f000 fb07 	bl	80121e0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8011bd2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bda:	d112      	bne.n	8011c02 <xQueueGenericSendFromISR+0xba>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011bdc:	6a3b      	ldr	r3, [r7, #32]
 8011bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d024      	beq.n	8011c2e <xQueueGenericSendFromISR+0xe6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011be4:	6a3b      	ldr	r3, [r7, #32]
 8011be6:	3324      	adds	r3, #36	; 0x24
 8011be8:	4618      	mov	r0, r3
 8011bea:	f001 f9b7 	bl	8012f5c <xTaskRemoveFromEventList>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d01c      	beq.n	8011c2e <xQueueGenericSendFromISR+0xe6>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d019      	beq.n	8011c2e <xQueueGenericSendFromISR+0xe6>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2201      	movs	r2, #1
 8011bfe:	601a      	str	r2, [r3, #0]
 8011c00:	e015      	b.n	8011c2e <xQueueGenericSendFromISR+0xe6>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8011c02:	f000 ffe1 	bl	8012bc8 <uxTaskGetNumberOfTasks>
 8011c06:	6138      	str	r0, [r7, #16]
 8011c08:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011c0c:	693a      	ldr	r2, [r7, #16]
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d90d      	bls.n	8011c2e <xQueueGenericSendFromISR+0xe6>
 8011c12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011c16:	2b7f      	cmp	r3, #127	; 0x7f
 8011c18:	d102      	bne.n	8011c20 <xQueueGenericSendFromISR+0xd8>
 8011c1a:	f002 fa35 	bl	8014088 <ulSetInterruptMask>
 8011c1e:	e7fe      	b.n	8011c1e <xQueueGenericSendFromISR+0xd6>
 8011c20:	7efb      	ldrb	r3, [r7, #27]
 8011c22:	3301      	adds	r3, #1
 8011c24:	b2db      	uxtb	r3, r3
 8011c26:	b25a      	sxtb	r2, r3
 8011c28:	6a3b      	ldr	r3, [r7, #32]
 8011c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8011c2e:	2301      	movs	r3, #1
 8011c30:	627b      	str	r3, [r7, #36]	; 0x24
        {
 8011c32:	e001      	b.n	8011c38 <xQueueGenericSendFromISR+0xf0>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8011c34:	2300      	movs	r3, #0
 8011c36:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8011c38:	69f8      	ldr	r0, [r7, #28]
 8011c3a:	f002 fa32 	bl	80140a2 <vClearInterruptMask>

    return xReturn;
 8011c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011c40:	4618      	mov	r0, r3
 8011c42:	3728      	adds	r7, #40	; 0x28
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}

08011c48 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b088      	sub	sp, #32
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	61bb      	str	r3, [r7, #24]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8011c56:	69bb      	ldr	r3, [r7, #24]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d102      	bne.n	8011c62 <xQueueGiveFromISR+0x1a>
 8011c5c:	f002 fa14 	bl	8014088 <ulSetInterruptMask>
 8011c60:	e7fe      	b.n	8011c60 <xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8011c62:	69bb      	ldr	r3, [r7, #24]
 8011c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d002      	beq.n	8011c70 <xQueueGiveFromISR+0x28>
 8011c6a:	f002 fa0d 	bl	8014088 <ulSetInterruptMask>
 8011c6e:	e7fe      	b.n	8011c6e <xQueueGiveFromISR+0x26>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011c70:	69bb      	ldr	r3, [r7, #24]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d103      	bne.n	8011c80 <xQueueGiveFromISR+0x38>
 8011c78:	69bb      	ldr	r3, [r7, #24]
 8011c7a:	689b      	ldr	r3, [r3, #8]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d101      	bne.n	8011c84 <xQueueGiveFromISR+0x3c>
 8011c80:	2301      	movs	r3, #1
 8011c82:	e000      	b.n	8011c86 <xQueueGiveFromISR+0x3e>
 8011c84:	2300      	movs	r3, #0
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d102      	bne.n	8011c90 <xQueueGiveFromISR+0x48>
 8011c8a:	f002 f9fd 	bl	8014088 <ulSetInterruptMask>
 8011c8e:	e7fe      	b.n	8011c8e <xQueueGiveFromISR+0x46>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011c90:	f002 f9fa 	bl	8014088 <ulSetInterruptMask>
 8011c94:	6178      	str	r0, [r7, #20]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011c96:	69bb      	ldr	r3, [r7, #24]
 8011c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c9a:	613b      	str	r3, [r7, #16]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8011c9c:	69bb      	ldr	r3, [r7, #24]
 8011c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ca0:	693a      	ldr	r2, [r7, #16]
 8011ca2:	429a      	cmp	r2, r3
 8011ca4:	d238      	bcs.n	8011d18 <xQueueGiveFromISR+0xd0>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8011ca6:	69bb      	ldr	r3, [r7, #24]
 8011ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011cac:	73fb      	strb	r3, [r7, #15]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	1c5a      	adds	r2, r3, #1
 8011cb2:	69bb      	ldr	r3, [r7, #24]
 8011cb4:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8011cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cbe:	d112      	bne.n	8011ce6 <xQueueGiveFromISR+0x9e>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011cc0:	69bb      	ldr	r3, [r7, #24]
 8011cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d024      	beq.n	8011d12 <xQueueGiveFromISR+0xca>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011cc8:	69bb      	ldr	r3, [r7, #24]
 8011cca:	3324      	adds	r3, #36	; 0x24
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f001 f945 	bl	8012f5c <xTaskRemoveFromEventList>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d01c      	beq.n	8011d12 <xQueueGiveFromISR+0xca>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d019      	beq.n	8011d12 <xQueueGiveFromISR+0xca>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	2201      	movs	r2, #1
 8011ce2:	601a      	str	r2, [r3, #0]
 8011ce4:	e015      	b.n	8011d12 <xQueueGiveFromISR+0xca>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8011ce6:	f000 ff6f 	bl	8012bc8 <uxTaskGetNumberOfTasks>
 8011cea:	60b8      	str	r0, [r7, #8]
 8011cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cf0:	68ba      	ldr	r2, [r7, #8]
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d90d      	bls.n	8011d12 <xQueueGiveFromISR+0xca>
 8011cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8011cfc:	d102      	bne.n	8011d04 <xQueueGiveFromISR+0xbc>
 8011cfe:	f002 f9c3 	bl	8014088 <ulSetInterruptMask>
 8011d02:	e7fe      	b.n	8011d02 <xQueueGiveFromISR+0xba>
 8011d04:	7bfb      	ldrb	r3, [r7, #15]
 8011d06:	3301      	adds	r3, #1
 8011d08:	b2db      	uxtb	r3, r3
 8011d0a:	b25a      	sxtb	r2, r3
 8011d0c:	69bb      	ldr	r3, [r7, #24]
 8011d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8011d12:	2301      	movs	r3, #1
 8011d14:	61fb      	str	r3, [r7, #28]
 8011d16:	e001      	b.n	8011d1c <xQueueGiveFromISR+0xd4>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8011d18:	2300      	movs	r3, #0
 8011d1a:	61fb      	str	r3, [r7, #28]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8011d1c:	6978      	ldr	r0, [r7, #20]
 8011d1e:	f002 f9c0 	bl	80140a2 <vClearInterruptMask>

    return xReturn;
 8011d22:	69fb      	ldr	r3, [r7, #28]
}
 8011d24:	4618      	mov	r0, r3
 8011d26:	3720      	adds	r7, #32
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}

08011d2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b08a      	sub	sp, #40	; 0x28
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	60f8      	str	r0, [r7, #12]
 8011d34:	60b9      	str	r1, [r7, #8]
 8011d36:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8011d38:	2300      	movs	r3, #0
 8011d3a:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8011d40:	6a3b      	ldr	r3, [r7, #32]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d102      	bne.n	8011d4c <xQueueReceive+0x20>
 8011d46:	f002 f99f 	bl	8014088 <ulSetInterruptMask>
 8011d4a:	e7fe      	b.n	8011d4a <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d103      	bne.n	8011d5a <xQueueReceive+0x2e>
 8011d52:	6a3b      	ldr	r3, [r7, #32]
 8011d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d101      	bne.n	8011d5e <xQueueReceive+0x32>
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	e000      	b.n	8011d60 <xQueueReceive+0x34>
 8011d5e:	2300      	movs	r3, #0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d102      	bne.n	8011d6a <xQueueReceive+0x3e>
 8011d64:	f002 f990 	bl	8014088 <ulSetInterruptMask>
 8011d68:	e7fe      	b.n	8011d68 <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011d6a:	f001 fb0f 	bl	801338c <xTaskGetSchedulerState>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d102      	bne.n	8011d7a <xQueueReceive+0x4e>
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d101      	bne.n	8011d7e <xQueueReceive+0x52>
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	e000      	b.n	8011d80 <xQueueReceive+0x54>
 8011d7e:	2300      	movs	r3, #0
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d102      	bne.n	8011d8a <xQueueReceive+0x5e>
 8011d84:	f002 f980 	bl	8014088 <ulSetInterruptMask>
 8011d88:	e7fe      	b.n	8011d88 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8011d8a:	f002 f83f 	bl	8013e0c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d8e:	6a3b      	ldr	r3, [r7, #32]
 8011d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d92:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011d94:	69fb      	ldr	r3, [r7, #28]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d019      	beq.n	8011dce <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011d9a:	68b9      	ldr	r1, [r7, #8]
 8011d9c:	6a38      	ldr	r0, [r7, #32]
 8011d9e:	f000 fa89 	bl	80122b4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011da2:	69fb      	ldr	r3, [r7, #28]
 8011da4:	1e5a      	subs	r2, r3, #1
 8011da6:	6a3b      	ldr	r3, [r7, #32]
 8011da8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011daa:	6a3b      	ldr	r3, [r7, #32]
 8011dac:	691b      	ldr	r3, [r3, #16]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d009      	beq.n	8011dc6 <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011db2:	6a3b      	ldr	r3, [r7, #32]
 8011db4:	3310      	adds	r3, #16
 8011db6:	4618      	mov	r0, r3
 8011db8:	f001 f8d0 	bl	8012f5c <xTaskRemoveFromEventList>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d001      	beq.n	8011dc6 <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8011dc2:	f002 f811 	bl	8013de8 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8011dc6:	f002 f833 	bl	8013e30 <vPortExitCritical>
                return pdPASS;
 8011dca:	2301      	movs	r3, #1
 8011dcc:	e063      	b.n	8011e96 <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d103      	bne.n	8011ddc <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8011dd4:	f002 f82c 	bl	8013e30 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	e05c      	b.n	8011e96 <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8011ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d106      	bne.n	8011df0 <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8011de2:	f107 0314 	add.w	r3, r7, #20
 8011de6:	4618      	mov	r0, r3
 8011de8:	f001 f986 	bl	80130f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8011dec:	2301      	movs	r3, #1
 8011dee:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8011df0:	f002 f81e 	bl	8013e30 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8011df4:	f000 fdcc 	bl	8012990 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8011df8:	f002 f808 	bl	8013e0c <vPortEnterCritical>
 8011dfc:	6a3b      	ldr	r3, [r7, #32]
 8011dfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e02:	b25b      	sxtb	r3, r3
 8011e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e08:	d103      	bne.n	8011e12 <xQueueReceive+0xe6>
 8011e0a:	6a3b      	ldr	r3, [r7, #32]
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e12:	6a3b      	ldr	r3, [r7, #32]
 8011e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e18:	b25b      	sxtb	r3, r3
 8011e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e1e:	d103      	bne.n	8011e28 <xQueueReceive+0xfc>
 8011e20:	6a3b      	ldr	r3, [r7, #32]
 8011e22:	2200      	movs	r2, #0
 8011e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e28:	f002 f802 	bl	8013e30 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011e2c:	1d3a      	adds	r2, r7, #4
 8011e2e:	f107 0314 	add.w	r3, r7, #20
 8011e32:	4611      	mov	r1, r2
 8011e34:	4618      	mov	r0, r3
 8011e36:	f001 f975 	bl	8013124 <xTaskCheckForTimeOut>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d11d      	bne.n	8011e7c <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e40:	6a38      	ldr	r0, [r7, #32]
 8011e42:	f000 faaf 	bl	80123a4 <prvIsQueueEmpty>
 8011e46:	4603      	mov	r3, r0
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d011      	beq.n	8011e70 <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011e4c:	6a3b      	ldr	r3, [r7, #32]
 8011e4e:	3324      	adds	r3, #36	; 0x24
 8011e50:	687a      	ldr	r2, [r7, #4]
 8011e52:	4611      	mov	r1, r2
 8011e54:	4618      	mov	r0, r3
 8011e56:	f001 f827 	bl	8012ea8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8011e5a:	6a38      	ldr	r0, [r7, #32]
 8011e5c:	f000 fa50 	bl	8012300 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8011e60:	f000 fda4 	bl	80129ac <xTaskResumeAll>
 8011e64:	4603      	mov	r3, r0
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d18f      	bne.n	8011d8a <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 8011e6a:	f001 ffbd 	bl	8013de8 <vPortYield>
 8011e6e:	e78c      	b.n	8011d8a <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8011e70:	6a38      	ldr	r0, [r7, #32]
 8011e72:	f000 fa45 	bl	8012300 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8011e76:	f000 fd99 	bl	80129ac <xTaskResumeAll>
 8011e7a:	e786      	b.n	8011d8a <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8011e7c:	6a38      	ldr	r0, [r7, #32]
 8011e7e:	f000 fa3f 	bl	8012300 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8011e82:	f000 fd93 	bl	80129ac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e86:	6a38      	ldr	r0, [r7, #32]
 8011e88:	f000 fa8c 	bl	80123a4 <prvIsQueueEmpty>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	f43f af7b 	beq.w	8011d8a <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8011e94:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3728      	adds	r7, #40	; 0x28
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}

08011e9e <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8011e9e:	b580      	push	{r7, lr}
 8011ea0:	b08a      	sub	sp, #40	; 0x28
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	6078      	str	r0, [r7, #4]
 8011ea6:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8011eb4:	69fb      	ldr	r3, [r7, #28]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d102      	bne.n	8011ec0 <xQueueSemaphoreTake+0x22>
 8011eba:	f002 f8e5 	bl	8014088 <ulSetInterruptMask>
 8011ebe:	e7fe      	b.n	8011ebe <xQueueSemaphoreTake+0x20>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8011ec0:	69fb      	ldr	r3, [r7, #28]
 8011ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d002      	beq.n	8011ece <xQueueSemaphoreTake+0x30>
 8011ec8:	f002 f8de 	bl	8014088 <ulSetInterruptMask>
 8011ecc:	e7fe      	b.n	8011ecc <xQueueSemaphoreTake+0x2e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011ece:	f001 fa5d 	bl	801338c <xTaskGetSchedulerState>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d102      	bne.n	8011ede <xQueueSemaphoreTake+0x40>
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d101      	bne.n	8011ee2 <xQueueSemaphoreTake+0x44>
 8011ede:	2301      	movs	r3, #1
 8011ee0:	e000      	b.n	8011ee4 <xQueueSemaphoreTake+0x46>
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d102      	bne.n	8011eee <xQueueSemaphoreTake+0x50>
 8011ee8:	f002 f8ce 	bl	8014088 <ulSetInterruptMask>
 8011eec:	e7fe      	b.n	8011eec <xQueueSemaphoreTake+0x4e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8011eee:	f001 ff8d 	bl	8013e0c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011ef2:	69fb      	ldr	r3, [r7, #28]
 8011ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ef6:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011ef8:	69bb      	ldr	r3, [r7, #24]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d01e      	beq.n	8011f3c <xQueueSemaphoreTake+0x9e>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011efe:	69bb      	ldr	r3, [r7, #24]
 8011f00:	1e5a      	subs	r2, r3, #1
 8011f02:	69fb      	ldr	r3, [r7, #28]
 8011f04:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011f06:	69fb      	ldr	r3, [r7, #28]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d104      	bne.n	8011f18 <xQueueSemaphoreTake+0x7a>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011f0e:	f001 fc0b 	bl	8013728 <pvTaskIncrementMutexHeldCount>
 8011f12:	4602      	mov	r2, r0
 8011f14:	69fb      	ldr	r3, [r7, #28]
 8011f16:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f18:	69fb      	ldr	r3, [r7, #28]
 8011f1a:	691b      	ldr	r3, [r3, #16]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d009      	beq.n	8011f34 <xQueueSemaphoreTake+0x96>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f20:	69fb      	ldr	r3, [r7, #28]
 8011f22:	3310      	adds	r3, #16
 8011f24:	4618      	mov	r0, r3
 8011f26:	f001 f819 	bl	8012f5c <xTaskRemoveFromEventList>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d001      	beq.n	8011f34 <xQueueSemaphoreTake+0x96>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8011f30:	f001 ff5a 	bl	8013de8 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8011f34:	f001 ff7c 	bl	8013e30 <vPortExitCritical>
                return pdPASS;
 8011f38:	2301      	movs	r3, #1
 8011f3a:	e083      	b.n	8012044 <xQueueSemaphoreTake+0x1a6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d103      	bne.n	8011f4a <xQueueSemaphoreTake+0xac>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8011f42:	f001 ff75 	bl	8013e30 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8011f46:	2300      	movs	r3, #0
 8011f48:	e07c      	b.n	8012044 <xQueueSemaphoreTake+0x1a6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8011f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d106      	bne.n	8011f5e <xQueueSemaphoreTake+0xc0>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8011f50:	f107 030c 	add.w	r3, r7, #12
 8011f54:	4618      	mov	r0, r3
 8011f56:	f001 f8cf 	bl	80130f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8011f5e:	f001 ff67 	bl	8013e30 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8011f62:	f000 fd15 	bl	8012990 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8011f66:	f001 ff51 	bl	8013e0c <vPortEnterCritical>
 8011f6a:	69fb      	ldr	r3, [r7, #28]
 8011f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f70:	b25b      	sxtb	r3, r3
 8011f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f76:	d103      	bne.n	8011f80 <xQueueSemaphoreTake+0xe2>
 8011f78:	69fb      	ldr	r3, [r7, #28]
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011f80:	69fb      	ldr	r3, [r7, #28]
 8011f82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f86:	b25b      	sxtb	r3, r3
 8011f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f8c:	d103      	bne.n	8011f96 <xQueueSemaphoreTake+0xf8>
 8011f8e:	69fb      	ldr	r3, [r7, #28]
 8011f90:	2200      	movs	r2, #0
 8011f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011f96:	f001 ff4b 	bl	8013e30 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011f9a:	463a      	mov	r2, r7
 8011f9c:	f107 030c 	add.w	r3, r7, #12
 8011fa0:	4611      	mov	r1, r2
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f001 f8be 	bl	8013124 <xTaskCheckForTimeOut>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d12c      	bne.n	8012008 <xQueueSemaphoreTake+0x16a>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011fae:	69f8      	ldr	r0, [r7, #28]
 8011fb0:	f000 f9f8 	bl	80123a4 <prvIsQueueEmpty>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d020      	beq.n	8011ffc <xQueueSemaphoreTake+0x15e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011fba:	69fb      	ldr	r3, [r7, #28]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d109      	bne.n	8011fd6 <xQueueSemaphoreTake+0x138>
                    {
                        taskENTER_CRITICAL();
 8011fc2:	f001 ff23 	bl	8013e0c <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011fc6:	69fb      	ldr	r3, [r7, #28]
 8011fc8:	689b      	ldr	r3, [r3, #8]
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f001 f9fc 	bl	80133c8 <xTaskPriorityInherit>
 8011fd0:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 8011fd2:	f001 ff2d 	bl	8013e30 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011fd6:	69fb      	ldr	r3, [r7, #28]
 8011fd8:	3324      	adds	r3, #36	; 0x24
 8011fda:	683a      	ldr	r2, [r7, #0]
 8011fdc:	4611      	mov	r1, r2
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f000 ff62 	bl	8012ea8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8011fe4:	69f8      	ldr	r0, [r7, #28]
 8011fe6:	f000 f98b 	bl	8012300 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8011fea:	f000 fcdf 	bl	80129ac <xTaskResumeAll>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	f47f af7c 	bne.w	8011eee <xQueueSemaphoreTake+0x50>
                {
                    portYIELD_WITHIN_API();
 8011ff6:	f001 fef7 	bl	8013de8 <vPortYield>
 8011ffa:	e778      	b.n	8011eee <xQueueSemaphoreTake+0x50>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8011ffc:	69f8      	ldr	r0, [r7, #28]
 8011ffe:	f000 f97f 	bl	8012300 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8012002:	f000 fcd3 	bl	80129ac <xTaskResumeAll>
 8012006:	e772      	b.n	8011eee <xQueueSemaphoreTake+0x50>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8012008:	69f8      	ldr	r0, [r7, #28]
 801200a:	f000 f979 	bl	8012300 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 801200e:	f000 fccd 	bl	80129ac <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012012:	69f8      	ldr	r0, [r7, #28]
 8012014:	f000 f9c6 	bl	80123a4 <prvIsQueueEmpty>
 8012018:	4603      	mov	r3, r0
 801201a:	2b00      	cmp	r3, #0
 801201c:	f43f af67 	beq.w	8011eee <xQueueSemaphoreTake+0x50>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8012020:	6a3b      	ldr	r3, [r7, #32]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d00d      	beq.n	8012042 <xQueueSemaphoreTake+0x1a4>
                    {
                        taskENTER_CRITICAL();
 8012026:	f001 fef1 	bl	8013e0c <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801202a:	69f8      	ldr	r0, [r7, #28]
 801202c:	f000 f8c0 	bl	80121b0 <prvGetDisinheritPriorityAfterTimeout>
 8012030:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012032:	69fb      	ldr	r3, [r7, #28]
 8012034:	689b      	ldr	r3, [r3, #8]
 8012036:	6979      	ldr	r1, [r7, #20]
 8012038:	4618      	mov	r0, r3
 801203a:	f001 fadb 	bl	80135f4 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 801203e:	f001 fef7 	bl	8013e30 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8012042:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8012044:	4618      	mov	r0, r3
 8012046:	3728      	adds	r7, #40	; 0x28
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}

0801204c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b08a      	sub	sp, #40	; 0x28
 8012050:	af00      	add	r7, sp, #0
 8012052:	60f8      	str	r0, [r7, #12]
 8012054:	60b9      	str	r1, [r7, #8]
 8012056:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 801205c:	6a3b      	ldr	r3, [r7, #32]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d102      	bne.n	8012068 <xQueueReceiveFromISR+0x1c>
 8012062:	f002 f811 	bl	8014088 <ulSetInterruptMask>
 8012066:	e7fe      	b.n	8012066 <xQueueReceiveFromISR+0x1a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d103      	bne.n	8012076 <xQueueReceiveFromISR+0x2a>
 801206e:	6a3b      	ldr	r3, [r7, #32]
 8012070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012072:	2b00      	cmp	r3, #0
 8012074:	d101      	bne.n	801207a <xQueueReceiveFromISR+0x2e>
 8012076:	2301      	movs	r3, #1
 8012078:	e000      	b.n	801207c <xQueueReceiveFromISR+0x30>
 801207a:	2300      	movs	r3, #0
 801207c:	2b00      	cmp	r3, #0
 801207e:	d102      	bne.n	8012086 <xQueueReceiveFromISR+0x3a>
 8012080:	f002 f802 	bl	8014088 <ulSetInterruptMask>
 8012084:	e7fe      	b.n	8012084 <xQueueReceiveFromISR+0x38>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012086:	f001 ffff 	bl	8014088 <ulSetInterruptMask>
 801208a:	61f8      	str	r0, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801208c:	6a3b      	ldr	r3, [r7, #32]
 801208e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012090:	61bb      	str	r3, [r7, #24]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012092:	69bb      	ldr	r3, [r7, #24]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d03c      	beq.n	8012112 <xQueueReceiveFromISR+0xc6>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8012098:	6a3b      	ldr	r3, [r7, #32]
 801209a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801209e:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80120a0:	68b9      	ldr	r1, [r7, #8]
 80120a2:	6a38      	ldr	r0, [r7, #32]
 80120a4:	f000 f906 	bl	80122b4 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80120a8:	69bb      	ldr	r3, [r7, #24]
 80120aa:	1e5a      	subs	r2, r3, #1
 80120ac:	6a3b      	ldr	r3, [r7, #32]
 80120ae:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80120b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80120b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120b8:	d112      	bne.n	80120e0 <xQueueReceiveFromISR+0x94>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80120ba:	6a3b      	ldr	r3, [r7, #32]
 80120bc:	691b      	ldr	r3, [r3, #16]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d024      	beq.n	801210c <xQueueReceiveFromISR+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80120c2:	6a3b      	ldr	r3, [r7, #32]
 80120c4:	3310      	adds	r3, #16
 80120c6:	4618      	mov	r0, r3
 80120c8:	f000 ff48 	bl	8012f5c <xTaskRemoveFromEventList>
 80120cc:	4603      	mov	r3, r0
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d01c      	beq.n	801210c <xQueueReceiveFromISR+0xc0>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d019      	beq.n	801210c <xQueueReceiveFromISR+0xc0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2201      	movs	r2, #1
 80120dc:	601a      	str	r2, [r3, #0]
 80120de:	e015      	b.n	801210c <xQueueReceiveFromISR+0xc0>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 80120e0:	f000 fd72 	bl	8012bc8 <uxTaskGetNumberOfTasks>
 80120e4:	6138      	str	r0, [r7, #16]
 80120e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80120ea:	693a      	ldr	r2, [r7, #16]
 80120ec:	429a      	cmp	r2, r3
 80120ee:	d90d      	bls.n	801210c <xQueueReceiveFromISR+0xc0>
 80120f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80120f4:	2b7f      	cmp	r3, #127	; 0x7f
 80120f6:	d102      	bne.n	80120fe <xQueueReceiveFromISR+0xb2>
 80120f8:	f001 ffc6 	bl	8014088 <ulSetInterruptMask>
 80120fc:	e7fe      	b.n	80120fc <xQueueReceiveFromISR+0xb0>
 80120fe:	7dfb      	ldrb	r3, [r7, #23]
 8012100:	3301      	adds	r3, #1
 8012102:	b2db      	uxtb	r3, r3
 8012104:	b25a      	sxtb	r2, r3
 8012106:	6a3b      	ldr	r3, [r7, #32]
 8012108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 801210c:	2301      	movs	r3, #1
 801210e:	627b      	str	r3, [r7, #36]	; 0x24
 8012110:	e001      	b.n	8012116 <xQueueReceiveFromISR+0xca>
        }
        else
        {
            xReturn = pdFAIL;
 8012112:	2300      	movs	r3, #0
 8012114:	627b      	str	r3, [r7, #36]	; 0x24
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8012116:	69f8      	ldr	r0, [r7, #28]
 8012118:	f001 ffc3 	bl	80140a2 <vClearInterruptMask>

    return xReturn;
 801211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801211e:	4618      	mov	r0, r3
 8012120:	3728      	adds	r7, #40	; 0x28
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}

08012126 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8012126:	b580      	push	{r7, lr}
 8012128:	b084      	sub	sp, #16
 801212a:	af00      	add	r7, sp, #0
 801212c:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d102      	bne.n	801213a <uxQueueMessagesWaiting+0x14>
 8012134:	f001 ffa8 	bl	8014088 <ulSetInterruptMask>
 8012138:	e7fe      	b.n	8012138 <uxQueueMessagesWaiting+0x12>

    taskENTER_CRITICAL();
 801213a:	f001 fe67 	bl	8013e0c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012142:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8012144:	f001 fe74 	bl	8013e30 <vPortExitCritical>

    return uxReturn;
 8012148:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801214a:	4618      	mov	r0, r3
 801214c:	3710      	adds	r7, #16
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}

08012152 <uxQueueMessagesWaitingFromISR>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8012152:	b580      	push	{r7, lr}
 8012154:	b084      	sub	sp, #16
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d102      	bne.n	801216a <uxQueueMessagesWaitingFromISR+0x18>
 8012164:	f001 ff90 	bl	8014088 <ulSetInterruptMask>
 8012168:	e7fe      	b.n	8012168 <uxQueueMessagesWaitingFromISR+0x16>
    uxReturn = pxQueue->uxMessagesWaiting;
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801216e:	60bb      	str	r3, [r7, #8]

    return uxReturn;
 8012170:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012172:	4618      	mov	r0, r3
 8012174:	3710      	adds	r7, #16
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}

0801217a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801217a:	b580      	push	{r7, lr}
 801217c:	b084      	sub	sp, #16
 801217e:	af00      	add	r7, sp, #0
 8012180:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d102      	bne.n	8012192 <vQueueDelete+0x18>
 801218c:	f001 ff7c 	bl	8014088 <ulSetInterruptMask>
 8012190:	e7fe      	b.n	8012190 <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8012192:	68f8      	ldr	r0, [r7, #12]
 8012194:	f000 f978 	bl	8012488 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d102      	bne.n	80121a8 <vQueueDelete+0x2e>
        {
            vPortFree( pxQueue );
 80121a2:	68f8      	ldr	r0, [r7, #12]
 80121a4:	f002 f87a 	bl	801429c <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80121a8:	bf00      	nop
 80121aa:	3710      	adds	r7, #16
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80121b0:	b480      	push	{r7}
 80121b2:	b085      	sub	sp, #20
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d006      	beq.n	80121ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80121ca:	60fb      	str	r3, [r7, #12]
 80121cc:	e001      	b.n	80121d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80121ce:	2300      	movs	r3, #0
 80121d0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80121d2:	68fb      	ldr	r3, [r7, #12]
    }
 80121d4:	4618      	mov	r0, r3
 80121d6:	3714      	adds	r7, #20
 80121d8:	46bd      	mov	sp, r7
 80121da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121de:	4770      	bx	lr

080121e0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b086      	sub	sp, #24
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	60f8      	str	r0, [r7, #12]
 80121e8:	60b9      	str	r1, [r7, #8]
 80121ea:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80121ec:	2300      	movs	r3, #0
 80121ee:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121f4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d10d      	bne.n	801221a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d14d      	bne.n	80122a2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	689b      	ldr	r3, [r3, #8]
 801220a:	4618      	mov	r0, r3
 801220c:	f001 f96c 	bl	80134e8 <xTaskPriorityDisinherit>
 8012210:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	2200      	movs	r2, #0
 8012216:	609a      	str	r2, [r3, #8]
 8012218:	e043      	b.n	80122a2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d119      	bne.n	8012254 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	6858      	ldr	r0, [r3, #4]
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012228:	461a      	mov	r2, r3
 801222a:	68b9      	ldr	r1, [r7, #8]
 801222c:	f010 f9f9 	bl	8022622 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	685a      	ldr	r2, [r3, #4]
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012238:	441a      	add	r2, r3
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	685a      	ldr	r2, [r3, #4]
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	689b      	ldr	r3, [r3, #8]
 8012246:	429a      	cmp	r2, r3
 8012248:	d32b      	bcc.n	80122a2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	681a      	ldr	r2, [r3, #0]
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	605a      	str	r2, [r3, #4]
 8012252:	e026      	b.n	80122a2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	68d8      	ldr	r0, [r3, #12]
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801225c:	461a      	mov	r2, r3
 801225e:	68b9      	ldr	r1, [r7, #8]
 8012260:	f010 f9df 	bl	8022622 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	68da      	ldr	r2, [r3, #12]
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801226c:	425b      	negs	r3, r3
 801226e:	441a      	add	r2, r3
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	68da      	ldr	r2, [r3, #12]
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	429a      	cmp	r2, r3
 801227e:	d207      	bcs.n	8012290 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	689a      	ldr	r2, [r3, #8]
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012288:	425b      	negs	r3, r3
 801228a:	441a      	add	r2, r3
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2b02      	cmp	r3, #2
 8012294:	d105      	bne.n	80122a2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012296:	693b      	ldr	r3, [r7, #16]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d002      	beq.n	80122a2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	3b01      	subs	r3, #1
 80122a0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80122a2:	693b      	ldr	r3, [r7, #16]
 80122a4:	1c5a      	adds	r2, r3, #1
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80122aa:	697b      	ldr	r3, [r7, #20]
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3718      	adds	r7, #24
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
 80122bc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d018      	beq.n	80122f8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	68da      	ldr	r2, [r3, #12]
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122ce:	441a      	add	r2, r3
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	68da      	ldr	r2, [r3, #12]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	689b      	ldr	r3, [r3, #8]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d303      	bcc.n	80122e8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681a      	ldr	r2, [r3, #0]
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	68d9      	ldr	r1, [r3, #12]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122f0:	461a      	mov	r2, r3
 80122f2:	6838      	ldr	r0, [r7, #0]
 80122f4:	f010 f995 	bl	8022622 <memcpy>
    }
}
 80122f8:	bf00      	nop
 80122fa:	3708      	adds	r7, #8
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b084      	sub	sp, #16
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8012308:	f001 fd80 	bl	8013e0c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012312:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8012314:	e011      	b.n	801233a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801231a:	2b00      	cmp	r3, #0
 801231c:	d012      	beq.n	8012344 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	3324      	adds	r3, #36	; 0x24
 8012322:	4618      	mov	r0, r3
 8012324:	f000 fe1a 	bl	8012f5c <xTaskRemoveFromEventList>
 8012328:	4603      	mov	r3, r0
 801232a:	2b00      	cmp	r3, #0
 801232c:	d001      	beq.n	8012332 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 801232e:	f000 ff4f 	bl	80131d0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8012332:	7bfb      	ldrb	r3, [r7, #15]
 8012334:	3b01      	subs	r3, #1
 8012336:	b2db      	uxtb	r3, r3
 8012338:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 801233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801233e:	2b00      	cmp	r3, #0
 8012340:	dce9      	bgt.n	8012316 <prvUnlockQueue+0x16>
 8012342:	e000      	b.n	8012346 <prvUnlockQueue+0x46>
                    break;
 8012344:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	22ff      	movs	r2, #255	; 0xff
 801234a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 801234e:	f001 fd6f 	bl	8013e30 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8012352:	f001 fd5b 	bl	8013e0c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801235c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 801235e:	e011      	b.n	8012384 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	691b      	ldr	r3, [r3, #16]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d012      	beq.n	801238e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	3310      	adds	r3, #16
 801236c:	4618      	mov	r0, r3
 801236e:	f000 fdf5 	bl	8012f5c <xTaskRemoveFromEventList>
 8012372:	4603      	mov	r3, r0
 8012374:	2b00      	cmp	r3, #0
 8012376:	d001      	beq.n	801237c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8012378:	f000 ff2a 	bl	80131d0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 801237c:	7bbb      	ldrb	r3, [r7, #14]
 801237e:	3b01      	subs	r3, #1
 8012380:	b2db      	uxtb	r3, r3
 8012382:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8012384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012388:	2b00      	cmp	r3, #0
 801238a:	dce9      	bgt.n	8012360 <prvUnlockQueue+0x60>
 801238c:	e000      	b.n	8012390 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 801238e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	22ff      	movs	r2, #255	; 0xff
 8012394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8012398:	f001 fd4a 	bl	8013e30 <vPortExitCritical>
}
 801239c:	bf00      	nop
 801239e:	3710      	adds	r7, #16
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b084      	sub	sp, #16
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80123ac:	f001 fd2e 	bl	8013e0c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d102      	bne.n	80123be <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80123b8:	2301      	movs	r3, #1
 80123ba:	60fb      	str	r3, [r7, #12]
 80123bc:	e001      	b.n	80123c2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80123be:	2300      	movs	r3, #0
 80123c0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80123c2:	f001 fd35 	bl	8013e30 <vPortExitCritical>

    return xReturn;
 80123c6:	68fb      	ldr	r3, [r7, #12]
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3710      	adds	r7, #16
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}

080123d0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b084      	sub	sp, #16
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80123d8:	f001 fd18 	bl	8013e0c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123e4:	429a      	cmp	r2, r3
 80123e6:	d102      	bne.n	80123ee <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80123e8:	2301      	movs	r3, #1
 80123ea:	60fb      	str	r3, [r7, #12]
 80123ec:	e001      	b.n	80123f2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80123ee:	2300      	movs	r3, #0
 80123f0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80123f2:	f001 fd1d 	bl	8013e30 <vPortExitCritical>

    return xReturn;
 80123f6:	68fb      	ldr	r3, [r7, #12]
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3710      	adds	r7, #16
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}

08012400 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8012400:	b580      	push	{r7, lr}
 8012402:	b084      	sub	sp, #16
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 801240a:	2300      	movs	r3, #0
 801240c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d102      	bne.n	801241a <vQueueAddToRegistry+0x1a>
 8012414:	f001 fe38 	bl	8014088 <ulSetInterruptMask>
 8012418:	e7fe      	b.n	8012418 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d024      	beq.n	801246a <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012420:	2300      	movs	r3, #0
 8012422:	60fb      	str	r3, [r7, #12]
 8012424:	e01e      	b.n	8012464 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8012426:	4a17      	ldr	r2, [pc, #92]	; (8012484 <vQueueAddToRegistry+0x84>)
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	00db      	lsls	r3, r3, #3
 801242c:	4413      	add	r3, r2
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	687a      	ldr	r2, [r7, #4]
 8012432:	429a      	cmp	r2, r3
 8012434:	d105      	bne.n	8012442 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	00db      	lsls	r3, r3, #3
 801243a:	4a12      	ldr	r2, [pc, #72]	; (8012484 <vQueueAddToRegistry+0x84>)
 801243c:	4413      	add	r3, r2
 801243e:	60bb      	str	r3, [r7, #8]
                    break;
 8012440:	e013      	b.n	801246a <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d10a      	bne.n	801245e <vQueueAddToRegistry+0x5e>
 8012448:	4a0e      	ldr	r2, [pc, #56]	; (8012484 <vQueueAddToRegistry+0x84>)
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d104      	bne.n	801245e <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	00db      	lsls	r3, r3, #3
 8012458:	4a0a      	ldr	r2, [pc, #40]	; (8012484 <vQueueAddToRegistry+0x84>)
 801245a:	4413      	add	r3, r2
 801245c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	3301      	adds	r3, #1
 8012462:	60fb      	str	r3, [r7, #12]
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	2b07      	cmp	r3, #7
 8012468:	d9dd      	bls.n	8012426 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d005      	beq.n	801247c <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	683a      	ldr	r2, [r7, #0]
 8012474:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	687a      	ldr	r2, [r7, #4]
 801247a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 801247c:	bf00      	nop
 801247e:	3710      	adds	r7, #16
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}
 8012484:	200073ac 	.word	0x200073ac

08012488 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8012488:	b580      	push	{r7, lr}
 801248a:	b084      	sub	sp, #16
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d102      	bne.n	801249c <vQueueUnregisterQueue+0x14>
 8012496:	f001 fdf7 	bl	8014088 <ulSetInterruptMask>
 801249a:	e7fe      	b.n	801249a <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801249c:	2300      	movs	r3, #0
 801249e:	60fb      	str	r3, [r7, #12]
 80124a0:	e016      	b.n	80124d0 <vQueueUnregisterQueue+0x48>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 80124a2:	4a0f      	ldr	r2, [pc, #60]	; (80124e0 <vQueueUnregisterQueue+0x58>)
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	00db      	lsls	r3, r3, #3
 80124a8:	4413      	add	r3, r2
 80124aa:	685b      	ldr	r3, [r3, #4]
 80124ac:	687a      	ldr	r2, [r7, #4]
 80124ae:	429a      	cmp	r2, r3
 80124b0:	d10b      	bne.n	80124ca <vQueueUnregisterQueue+0x42>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 80124b2:	4a0b      	ldr	r2, [pc, #44]	; (80124e0 <vQueueUnregisterQueue+0x58>)
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	2100      	movs	r1, #0
 80124b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80124bc:	4a08      	ldr	r2, [pc, #32]	; (80124e0 <vQueueUnregisterQueue+0x58>)
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	00db      	lsls	r3, r3, #3
 80124c2:	4413      	add	r3, r2
 80124c4:	2200      	movs	r2, #0
 80124c6:	605a      	str	r2, [r3, #4]
                break;
 80124c8:	e006      	b.n	80124d8 <vQueueUnregisterQueue+0x50>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	3301      	adds	r3, #1
 80124ce:	60fb      	str	r3, [r7, #12]
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	2b07      	cmp	r3, #7
 80124d4:	d9e5      	bls.n	80124a2 <vQueueUnregisterQueue+0x1a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80124d6:	bf00      	nop
 80124d8:	bf00      	nop
 80124da:	3710      	adds	r7, #16
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}
 80124e0:	200073ac 	.word	0x200073ac

080124e4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b086      	sub	sp, #24
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	60f8      	str	r0, [r7, #12]
 80124ec:	60b9      	str	r1, [r7, #8]
 80124ee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80124f4:	f001 fc8a 	bl	8013e0c <vPortEnterCritical>
 80124f8:	697b      	ldr	r3, [r7, #20]
 80124fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80124fe:	b25b      	sxtb	r3, r3
 8012500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012504:	d103      	bne.n	801250e <vQueueWaitForMessageRestricted+0x2a>
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	2200      	movs	r2, #0
 801250a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801250e:	697b      	ldr	r3, [r7, #20]
 8012510:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012514:	b25b      	sxtb	r3, r3
 8012516:	f1b3 3fff 	cmp.w	r3, #4294967295
 801251a:	d103      	bne.n	8012524 <vQueueWaitForMessageRestricted+0x40>
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	2200      	movs	r2, #0
 8012520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012524:	f001 fc84 	bl	8013e30 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012528:	697b      	ldr	r3, [r7, #20]
 801252a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801252c:	2b00      	cmp	r3, #0
 801252e:	d106      	bne.n	801253e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012530:	697b      	ldr	r3, [r7, #20]
 8012532:	3324      	adds	r3, #36	; 0x24
 8012534:	687a      	ldr	r2, [r7, #4]
 8012536:	68b9      	ldr	r1, [r7, #8]
 8012538:	4618      	mov	r0, r3
 801253a:	f000 fcd1 	bl	8012ee0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 801253e:	6978      	ldr	r0, [r7, #20]
 8012540:	f7ff fede 	bl	8012300 <prvUnlockQueue>
    }
 8012544:	bf00      	nop
 8012546:	3718      	adds	r7, #24
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}

0801254c <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 801254c:	b580      	push	{r7, lr}
 801254e:	b08c      	sub	sp, #48	; 0x30
 8012550:	af04      	add	r7, sp, #16
 8012552:	60f8      	str	r0, [r7, #12]
 8012554:	60b9      	str	r1, [r7, #8]
 8012556:	607a      	str	r2, [r7, #4]
 8012558:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 801255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801255c:	2b00      	cmp	r3, #0
 801255e:	d102      	bne.n	8012566 <xTaskCreateStatic+0x1a>
 8012560:	f001 fd92 	bl	8014088 <ulSetInterruptMask>
 8012564:	e7fe      	b.n	8012564 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 8012566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012568:	2b00      	cmp	r3, #0
 801256a:	d102      	bne.n	8012572 <xTaskCreateStatic+0x26>
 801256c:	f001 fd8c 	bl	8014088 <ulSetInterruptMask>
 8012570:	e7fe      	b.n	8012570 <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8012572:	235c      	movs	r3, #92	; 0x5c
 8012574:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	2b5c      	cmp	r3, #92	; 0x5c
 801257a:	d002      	beq.n	8012582 <xTaskCreateStatic+0x36>
 801257c:	f001 fd84 	bl	8014088 <ulSetInterruptMask>
 8012580:	e7fe      	b.n	8012580 <xTaskCreateStatic+0x34>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012582:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012586:	2b00      	cmp	r3, #0
 8012588:	d023      	beq.n	80125d2 <xTaskCreateStatic+0x86>
 801258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801258c:	2b00      	cmp	r3, #0
 801258e:	d020      	beq.n	80125d2 <xTaskCreateStatic+0x86>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012592:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8012594:	225c      	movs	r2, #92	; 0x5c
 8012596:	2100      	movs	r1, #0
 8012598:	69f8      	ldr	r0, [r7, #28]
 801259a:	f00f ffa9 	bl	80224f0 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801259e:	69fb      	ldr	r3, [r7, #28]
 80125a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80125a2:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80125a4:	69fb      	ldr	r3, [r7, #28]
 80125a6:	2202      	movs	r2, #2
 80125a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80125ac:	2300      	movs	r3, #0
 80125ae:	9303      	str	r3, [sp, #12]
 80125b0:	69fb      	ldr	r3, [r7, #28]
 80125b2:	9302      	str	r3, [sp, #8]
 80125b4:	f107 0318 	add.w	r3, r7, #24
 80125b8:	9301      	str	r3, [sp, #4]
 80125ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125bc:	9300      	str	r3, [sp, #0]
 80125be:	683b      	ldr	r3, [r7, #0]
 80125c0:	687a      	ldr	r2, [r7, #4]
 80125c2:	68b9      	ldr	r1, [r7, #8]
 80125c4:	68f8      	ldr	r0, [r7, #12]
 80125c6:	f000 f855 	bl	8012674 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80125ca:	69f8      	ldr	r0, [r7, #28]
 80125cc:	f000 f8d2 	bl	8012774 <prvAddNewTaskToReadyList>
 80125d0:	e001      	b.n	80125d6 <xTaskCreateStatic+0x8a>
        }
        else
        {
            xReturn = NULL;
 80125d2:	2300      	movs	r3, #0
 80125d4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80125d6:	69bb      	ldr	r3, [r7, #24]
    }
 80125d8:	4618      	mov	r0, r3
 80125da:	3720      	adds	r7, #32
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}

080125e0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b08c      	sub	sp, #48	; 0x30
 80125e4:	af04      	add	r7, sp, #16
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	60b9      	str	r1, [r7, #8]
 80125ea:	603b      	str	r3, [r7, #0]
 80125ec:	4613      	mov	r3, r2
 80125ee:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80125f0:	88fb      	ldrh	r3, [r7, #6]
 80125f2:	009b      	lsls	r3, r3, #2
 80125f4:	4618      	mov	r0, r3
 80125f6:	f001 fda7 	bl	8014148 <pvPortMalloc>
 80125fa:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80125fc:	697b      	ldr	r3, [r7, #20]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d013      	beq.n	801262a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012602:	205c      	movs	r0, #92	; 0x5c
 8012604:	f001 fda0 	bl	8014148 <pvPortMalloc>
 8012608:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 801260a:	69fb      	ldr	r3, [r7, #28]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d008      	beq.n	8012622 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8012610:	225c      	movs	r2, #92	; 0x5c
 8012612:	2100      	movs	r1, #0
 8012614:	69f8      	ldr	r0, [r7, #28]
 8012616:	f00f ff6b 	bl	80224f0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 801261a:	69fb      	ldr	r3, [r7, #28]
 801261c:	697a      	ldr	r2, [r7, #20]
 801261e:	631a      	str	r2, [r3, #48]	; 0x30
 8012620:	e005      	b.n	801262e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8012622:	6978      	ldr	r0, [r7, #20]
 8012624:	f001 fe3a 	bl	801429c <vPortFree>
 8012628:	e001      	b.n	801262e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 801262a:	2300      	movs	r3, #0
 801262c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 801262e:	69fb      	ldr	r3, [r7, #28]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d017      	beq.n	8012664 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012634:	69fb      	ldr	r3, [r7, #28]
 8012636:	2200      	movs	r2, #0
 8012638:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801263c:	88fa      	ldrh	r2, [r7, #6]
 801263e:	2300      	movs	r3, #0
 8012640:	9303      	str	r3, [sp, #12]
 8012642:	69fb      	ldr	r3, [r7, #28]
 8012644:	9302      	str	r3, [sp, #8]
 8012646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012648:	9301      	str	r3, [sp, #4]
 801264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801264c:	9300      	str	r3, [sp, #0]
 801264e:	683b      	ldr	r3, [r7, #0]
 8012650:	68b9      	ldr	r1, [r7, #8]
 8012652:	68f8      	ldr	r0, [r7, #12]
 8012654:	f000 f80e 	bl	8012674 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8012658:	69f8      	ldr	r0, [r7, #28]
 801265a:	f000 f88b 	bl	8012774 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 801265e:	2301      	movs	r3, #1
 8012660:	61bb      	str	r3, [r7, #24]
 8012662:	e002      	b.n	801266a <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012664:	f04f 33ff 	mov.w	r3, #4294967295
 8012668:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 801266a:	69bb      	ldr	r3, [r7, #24]
    }
 801266c:	4618      	mov	r0, r3
 801266e:	3720      	adds	r7, #32
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}

08012674 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b086      	sub	sp, #24
 8012678:	af00      	add	r7, sp, #0
 801267a:	60f8      	str	r0, [r7, #12]
 801267c:	60b9      	str	r1, [r7, #8]
 801267e:	607a      	str	r2, [r7, #4]
 8012680:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012684:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	009b      	lsls	r3, r3, #2
 801268a:	461a      	mov	r2, r3
 801268c:	21a5      	movs	r1, #165	; 0xa5
 801268e:	f00f ff2f 	bl	80224f0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801269c:	3b01      	subs	r3, #1
 801269e:	009b      	lsls	r3, r3, #2
 80126a0:	4413      	add	r3, r2
 80126a2:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80126a4:	693b      	ldr	r3, [r7, #16]
 80126a6:	f023 0307 	bic.w	r3, r3, #7
 80126aa:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80126ac:	693b      	ldr	r3, [r7, #16]
 80126ae:	f003 0307 	and.w	r3, r3, #7
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d002      	beq.n	80126bc <prvInitialiseNewTask+0x48>
 80126b6:	f001 fce7 	bl	8014088 <ulSetInterruptMask>
 80126ba:	e7fe      	b.n	80126ba <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80126bc:	68bb      	ldr	r3, [r7, #8]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d01e      	beq.n	8012700 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80126c2:	2300      	movs	r3, #0
 80126c4:	617b      	str	r3, [r7, #20]
 80126c6:	e012      	b.n	80126ee <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80126c8:	68ba      	ldr	r2, [r7, #8]
 80126ca:	697b      	ldr	r3, [r7, #20]
 80126cc:	4413      	add	r3, r2
 80126ce:	7819      	ldrb	r1, [r3, #0]
 80126d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	4413      	add	r3, r2
 80126d6:	3334      	adds	r3, #52	; 0x34
 80126d8:	460a      	mov	r2, r1
 80126da:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80126dc:	68ba      	ldr	r2, [r7, #8]
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	4413      	add	r3, r2
 80126e2:	781b      	ldrb	r3, [r3, #0]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d006      	beq.n	80126f6 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	3301      	adds	r3, #1
 80126ec:	617b      	str	r3, [r7, #20]
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	2b0f      	cmp	r3, #15
 80126f2:	d9e9      	bls.n	80126c8 <prvInitialiseNewTask+0x54>
 80126f4:	e000      	b.n	80126f8 <prvInitialiseNewTask+0x84>
            {
                break;
 80126f6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80126f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126fa:	2200      	movs	r2, #0
 80126fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8012700:	6a3b      	ldr	r3, [r7, #32]
 8012702:	2b37      	cmp	r3, #55	; 0x37
 8012704:	d902      	bls.n	801270c <prvInitialiseNewTask+0x98>
 8012706:	f001 fcbf 	bl	8014088 <ulSetInterruptMask>
 801270a:	e7fe      	b.n	801270a <prvInitialiseNewTask+0x96>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801270c:	6a3b      	ldr	r3, [r7, #32]
 801270e:	2b37      	cmp	r3, #55	; 0x37
 8012710:	d901      	bls.n	8012716 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012712:	2337      	movs	r3, #55	; 0x37
 8012714:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8012716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012718:	6a3a      	ldr	r2, [r7, #32]
 801271a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 801271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801271e:	6a3a      	ldr	r2, [r7, #32]
 8012720:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012724:	3304      	adds	r3, #4
 8012726:	4618      	mov	r0, r3
 8012728:	f7fe feb4 	bl	8011494 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801272e:	3318      	adds	r3, #24
 8012730:	4618      	mov	r0, r3
 8012732:	f7fe feaf 	bl	8011494 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801273a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801273c:	6a3b      	ldr	r3, [r7, #32]
 801273e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012744:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801274a:	625a      	str	r2, [r3, #36]	; 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 801274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801274e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	68fa      	ldr	r2, [r7, #12]
 8012754:	6938      	ldr	r0, [r7, #16]
 8012756:	f001 fbb5 	bl	8013ec4 <pxPortInitialiseStack>
 801275a:	4602      	mov	r2, r0
 801275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801275e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8012760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012762:	2b00      	cmp	r3, #0
 8012764:	d002      	beq.n	801276c <prvInitialiseNewTask+0xf8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801276a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 801276c:	bf00      	nop
 801276e:	3718      	adds	r7, #24
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}

08012774 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b084      	sub	sp, #16
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 801277c:	f001 fb46 	bl	8013e0c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8012780:	4b3e      	ldr	r3, [pc, #248]	; (801287c <prvAddNewTaskToReadyList+0x108>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	3301      	adds	r3, #1
 8012786:	4a3d      	ldr	r2, [pc, #244]	; (801287c <prvAddNewTaskToReadyList+0x108>)
 8012788:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 801278a:	4b3d      	ldr	r3, [pc, #244]	; (8012880 <prvAddNewTaskToReadyList+0x10c>)
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d109      	bne.n	80127a6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8012792:	4a3b      	ldr	r2, [pc, #236]	; (8012880 <prvAddNewTaskToReadyList+0x10c>)
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012798:	4b38      	ldr	r3, [pc, #224]	; (801287c <prvAddNewTaskToReadyList+0x108>)
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	2b01      	cmp	r3, #1
 801279e:	d110      	bne.n	80127c2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80127a0:	f000 fd32 	bl	8013208 <prvInitialiseTaskLists>
 80127a4:	e00d      	b.n	80127c2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80127a6:	4b37      	ldr	r3, [pc, #220]	; (8012884 <prvAddNewTaskToReadyList+0x110>)
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d109      	bne.n	80127c2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80127ae:	4b34      	ldr	r3, [pc, #208]	; (8012880 <prvAddNewTaskToReadyList+0x10c>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d802      	bhi.n	80127c2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80127bc:	4a30      	ldr	r2, [pc, #192]	; (8012880 <prvAddNewTaskToReadyList+0x10c>)
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80127c2:	4b31      	ldr	r3, [pc, #196]	; (8012888 <prvAddNewTaskToReadyList+0x114>)
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	3301      	adds	r3, #1
 80127c8:	4a2f      	ldr	r2, [pc, #188]	; (8012888 <prvAddNewTaskToReadyList+0x114>)
 80127ca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80127cc:	4b2e      	ldr	r3, [pc, #184]	; (8012888 <prvAddNewTaskToReadyList+0x114>)
 80127ce:	681a      	ldr	r2, [r3, #0]
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127d8:	4b2c      	ldr	r3, [pc, #176]	; (801288c <prvAddNewTaskToReadyList+0x118>)
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	429a      	cmp	r2, r3
 80127de:	d903      	bls.n	80127e8 <prvAddNewTaskToReadyList+0x74>
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127e4:	4a29      	ldr	r2, [pc, #164]	; (801288c <prvAddNewTaskToReadyList+0x118>)
 80127e6:	6013      	str	r3, [r2, #0]
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127ec:	4928      	ldr	r1, [pc, #160]	; (8012890 <prvAddNewTaskToReadyList+0x11c>)
 80127ee:	4613      	mov	r3, r2
 80127f0:	009b      	lsls	r3, r3, #2
 80127f2:	4413      	add	r3, r2
 80127f4:	009b      	lsls	r3, r3, #2
 80127f6:	440b      	add	r3, r1
 80127f8:	3304      	adds	r3, #4
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	60fb      	str	r3, [r7, #12]
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	68fa      	ldr	r2, [r7, #12]
 8012802:	609a      	str	r2, [r3, #8]
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	689a      	ldr	r2, [r3, #8]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	60da      	str	r2, [r3, #12]
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	689b      	ldr	r3, [r3, #8]
 8012810:	687a      	ldr	r2, [r7, #4]
 8012812:	3204      	adds	r2, #4
 8012814:	605a      	str	r2, [r3, #4]
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	1d1a      	adds	r2, r3, #4
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	609a      	str	r2, [r3, #8]
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012822:	4613      	mov	r3, r2
 8012824:	009b      	lsls	r3, r3, #2
 8012826:	4413      	add	r3, r2
 8012828:	009b      	lsls	r3, r3, #2
 801282a:	4a19      	ldr	r2, [pc, #100]	; (8012890 <prvAddNewTaskToReadyList+0x11c>)
 801282c:	441a      	add	r2, r3
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	615a      	str	r2, [r3, #20]
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012836:	4916      	ldr	r1, [pc, #88]	; (8012890 <prvAddNewTaskToReadyList+0x11c>)
 8012838:	4613      	mov	r3, r2
 801283a:	009b      	lsls	r3, r3, #2
 801283c:	4413      	add	r3, r2
 801283e:	009b      	lsls	r3, r3, #2
 8012840:	440b      	add	r3, r1
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	1c59      	adds	r1, r3, #1
 8012846:	4812      	ldr	r0, [pc, #72]	; (8012890 <prvAddNewTaskToReadyList+0x11c>)
 8012848:	4613      	mov	r3, r2
 801284a:	009b      	lsls	r3, r3, #2
 801284c:	4413      	add	r3, r2
 801284e:	009b      	lsls	r3, r3, #2
 8012850:	4403      	add	r3, r0
 8012852:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8012854:	f001 faec 	bl	8013e30 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8012858:	4b0a      	ldr	r3, [pc, #40]	; (8012884 <prvAddNewTaskToReadyList+0x110>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d008      	beq.n	8012872 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012860:	4b07      	ldr	r3, [pc, #28]	; (8012880 <prvAddNewTaskToReadyList+0x10c>)
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801286a:	429a      	cmp	r2, r3
 801286c:	d201      	bcs.n	8012872 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 801286e:	f001 fabb 	bl	8013de8 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8012872:	bf00      	nop
 8012874:	3710      	adds	r7, #16
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}
 801287a:	bf00      	nop
 801287c:	200078c0 	.word	0x200078c0
 8012880:	200073ec 	.word	0x200073ec
 8012884:	200078cc 	.word	0x200078cc
 8012888:	200078dc 	.word	0x200078dc
 801288c:	200078c8 	.word	0x200078c8
 8012890:	200073f0 	.word	0x200073f0

08012894 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8012894:	b580      	push	{r7, lr}
 8012896:	b084      	sub	sp, #16
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 801289c:	2300      	movs	r3, #0
 801289e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d00f      	beq.n	80128c6 <vTaskDelay+0x32>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80128a6:	4b0c      	ldr	r3, [pc, #48]	; (80128d8 <vTaskDelay+0x44>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d002      	beq.n	80128b4 <vTaskDelay+0x20>
 80128ae:	f001 fbeb 	bl	8014088 <ulSetInterruptMask>
 80128b2:	e7fe      	b.n	80128b2 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 80128b4:	f000 f86c 	bl	8012990 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80128b8:	2100      	movs	r1, #0
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f000 ff48 	bl	8013750 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80128c0:	f000 f874 	bl	80129ac <xTaskResumeAll>
 80128c4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d101      	bne.n	80128d0 <vTaskDelay+0x3c>
        {
            portYIELD_WITHIN_API();
 80128cc:	f001 fa8c 	bl	8013de8 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80128d0:	bf00      	nop
 80128d2:	3710      	adds	r7, #16
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd80      	pop	{r7, pc}
 80128d8:	200078e8 	.word	0x200078e8

080128dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b088      	sub	sp, #32
 80128e0:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 80128e2:	2300      	movs	r3, #0
 80128e4:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 80128e6:	2300      	movs	r3, #0
 80128e8:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80128ea:	463a      	mov	r2, r7
 80128ec:	1d39      	adds	r1, r7, #4
 80128ee:	f107 0308 	add.w	r3, r7, #8
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7fe fd7a 	bl	80113ec <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 80128f8:	6839      	ldr	r1, [r7, #0]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	68ba      	ldr	r2, [r7, #8]
 80128fe:	9202      	str	r2, [sp, #8]
 8012900:	9301      	str	r3, [sp, #4]
 8012902:	2300      	movs	r3, #0
 8012904:	9300      	str	r3, [sp, #0]
 8012906:	2300      	movs	r3, #0
 8012908:	460a      	mov	r2, r1
 801290a:	491a      	ldr	r1, [pc, #104]	; (8012974 <vTaskStartScheduler+0x98>)
 801290c:	481a      	ldr	r0, [pc, #104]	; (8012978 <vTaskStartScheduler+0x9c>)
 801290e:	f7ff fe1d 	bl	801254c <xTaskCreateStatic>
 8012912:	4603      	mov	r3, r0
 8012914:	4a19      	ldr	r2, [pc, #100]	; (801297c <vTaskStartScheduler+0xa0>)
 8012916:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8012918:	4b18      	ldr	r3, [pc, #96]	; (801297c <vTaskStartScheduler+0xa0>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d002      	beq.n	8012926 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8012920:	2301      	movs	r3, #1
 8012922:	60fb      	str	r3, [r7, #12]
 8012924:	e001      	b.n	801292a <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8012926:	2300      	movs	r3, #0
 8012928:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	2b01      	cmp	r3, #1
 801292e:	d102      	bne.n	8012936 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8012930:	f000 ff7c 	bl	801382c <xTimerCreateTimerTask>
 8012934:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	2b01      	cmp	r3, #1
 801293a:	d10e      	bne.n	801295a <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 801293c:	f001 fba4 	bl	8014088 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8012940:	4b0f      	ldr	r3, [pc, #60]	; (8012980 <vTaskStartScheduler+0xa4>)
 8012942:	f04f 32ff 	mov.w	r2, #4294967295
 8012946:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8012948:	4b0e      	ldr	r3, [pc, #56]	; (8012984 <vTaskStartScheduler+0xa8>)
 801294a:	2201      	movs	r2, #1
 801294c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801294e:	4b0e      	ldr	r3, [pc, #56]	; (8012988 <vTaskStartScheduler+0xac>)
 8012950:	2200      	movs	r2, #0
 8012952:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8012954:	f001 fb40 	bl	8013fd8 <xPortStartScheduler>
 8012958:	e006      	b.n	8012968 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012960:	d102      	bne.n	8012968 <vTaskStartScheduler+0x8c>
 8012962:	f001 fb91 	bl	8014088 <ulSetInterruptMask>
 8012966:	e7fe      	b.n	8012966 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8012968:	4b08      	ldr	r3, [pc, #32]	; (801298c <vTaskStartScheduler+0xb0>)
 801296a:	681b      	ldr	r3, [r3, #0]
}
 801296c:	bf00      	nop
 801296e:	3710      	adds	r7, #16
 8012970:	46bd      	mov	sp, r7
 8012972:	bd80      	pop	{r7, pc}
 8012974:	080238bc 	.word	0x080238bc
 8012978:	080131e9 	.word	0x080131e9
 801297c:	200078e4 	.word	0x200078e4
 8012980:	200078e0 	.word	0x200078e0
 8012984:	200078cc 	.word	0x200078cc
 8012988:	200078c4 	.word	0x200078c4
 801298c:	20000078 	.word	0x20000078

08012990 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012990:	b480      	push	{r7}
 8012992:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8012994:	4b04      	ldr	r3, [pc, #16]	; (80129a8 <vTaskSuspendAll+0x18>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	3301      	adds	r3, #1
 801299a:	4a03      	ldr	r2, [pc, #12]	; (80129a8 <vTaskSuspendAll+0x18>)
 801299c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 801299e:	bf00      	nop
 80129a0:	46bd      	mov	sp, r7
 80129a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a6:	4770      	bx	lr
 80129a8:	200078e8 	.word	0x200078e8

080129ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b086      	sub	sp, #24
 80129b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80129b2:	2300      	movs	r3, #0
 80129b4:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80129b6:	2300      	movs	r3, #0
 80129b8:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80129ba:	4b6a      	ldr	r3, [pc, #424]	; (8012b64 <xTaskResumeAll+0x1b8>)
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d102      	bne.n	80129c8 <xTaskResumeAll+0x1c>
 80129c2:	f001 fb61 	bl	8014088 <ulSetInterruptMask>
 80129c6:	e7fe      	b.n	80129c6 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80129c8:	f001 fa20 	bl	8013e0c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80129cc:	4b65      	ldr	r3, [pc, #404]	; (8012b64 <xTaskResumeAll+0x1b8>)
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	3b01      	subs	r3, #1
 80129d2:	4a64      	ldr	r2, [pc, #400]	; (8012b64 <xTaskResumeAll+0x1b8>)
 80129d4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80129d6:	4b63      	ldr	r3, [pc, #396]	; (8012b64 <xTaskResumeAll+0x1b8>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f040 80bb 	bne.w	8012b56 <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80129e0:	4b61      	ldr	r3, [pc, #388]	; (8012b68 <xTaskResumeAll+0x1bc>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	f000 80b6 	beq.w	8012b56 <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80129ea:	e08b      	b.n	8012b04 <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129ec:	4b5f      	ldr	r3, [pc, #380]	; (8012b6c <xTaskResumeAll+0x1c0>)
 80129ee:	68db      	ldr	r3, [r3, #12]
 80129f0:	68db      	ldr	r3, [r3, #12]
 80129f2:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129f8:	60bb      	str	r3, [r7, #8]
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	69db      	ldr	r3, [r3, #28]
 80129fe:	697a      	ldr	r2, [r7, #20]
 8012a00:	6a12      	ldr	r2, [r2, #32]
 8012a02:	609a      	str	r2, [r3, #8]
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	6a1b      	ldr	r3, [r3, #32]
 8012a08:	697a      	ldr	r2, [r7, #20]
 8012a0a:	69d2      	ldr	r2, [r2, #28]
 8012a0c:	605a      	str	r2, [r3, #4]
 8012a0e:	68bb      	ldr	r3, [r7, #8]
 8012a10:	685a      	ldr	r2, [r3, #4]
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	3318      	adds	r3, #24
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d103      	bne.n	8012a22 <xTaskResumeAll+0x76>
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	6a1a      	ldr	r2, [r3, #32]
 8012a1e:	68bb      	ldr	r3, [r7, #8]
 8012a20:	605a      	str	r2, [r3, #4]
 8012a22:	697b      	ldr	r3, [r7, #20]
 8012a24:	2200      	movs	r2, #0
 8012a26:	629a      	str	r2, [r3, #40]	; 0x28
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	1e5a      	subs	r2, r3, #1
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8012a32:	697b      	ldr	r3, [r7, #20]
 8012a34:	695b      	ldr	r3, [r3, #20]
 8012a36:	607b      	str	r3, [r7, #4]
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	689b      	ldr	r3, [r3, #8]
 8012a3c:	697a      	ldr	r2, [r7, #20]
 8012a3e:	68d2      	ldr	r2, [r2, #12]
 8012a40:	609a      	str	r2, [r3, #8]
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	68db      	ldr	r3, [r3, #12]
 8012a46:	697a      	ldr	r2, [r7, #20]
 8012a48:	6892      	ldr	r2, [r2, #8]
 8012a4a:	605a      	str	r2, [r3, #4]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	685a      	ldr	r2, [r3, #4]
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	3304      	adds	r3, #4
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d103      	bne.n	8012a60 <xTaskResumeAll+0xb4>
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	68da      	ldr	r2, [r3, #12]
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	605a      	str	r2, [r3, #4]
 8012a60:	697b      	ldr	r3, [r7, #20]
 8012a62:	2200      	movs	r2, #0
 8012a64:	615a      	str	r2, [r3, #20]
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	1e5a      	subs	r2, r3, #1
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8012a70:	697b      	ldr	r3, [r7, #20]
 8012a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a74:	4b3e      	ldr	r3, [pc, #248]	; (8012b70 <xTaskResumeAll+0x1c4>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d903      	bls.n	8012a84 <xTaskResumeAll+0xd8>
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a80:	4a3b      	ldr	r2, [pc, #236]	; (8012b70 <xTaskResumeAll+0x1c4>)
 8012a82:	6013      	str	r3, [r2, #0]
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a88:	493a      	ldr	r1, [pc, #232]	; (8012b74 <xTaskResumeAll+0x1c8>)
 8012a8a:	4613      	mov	r3, r2
 8012a8c:	009b      	lsls	r3, r3, #2
 8012a8e:	4413      	add	r3, r2
 8012a90:	009b      	lsls	r3, r3, #2
 8012a92:	440b      	add	r3, r1
 8012a94:	3304      	adds	r3, #4
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	603b      	str	r3, [r7, #0]
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	683a      	ldr	r2, [r7, #0]
 8012a9e:	609a      	str	r2, [r3, #8]
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	689a      	ldr	r2, [r3, #8]
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	60da      	str	r2, [r3, #12]
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	689b      	ldr	r3, [r3, #8]
 8012aac:	697a      	ldr	r2, [r7, #20]
 8012aae:	3204      	adds	r2, #4
 8012ab0:	605a      	str	r2, [r3, #4]
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	1d1a      	adds	r2, r3, #4
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	609a      	str	r2, [r3, #8]
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012abe:	4613      	mov	r3, r2
 8012ac0:	009b      	lsls	r3, r3, #2
 8012ac2:	4413      	add	r3, r2
 8012ac4:	009b      	lsls	r3, r3, #2
 8012ac6:	4a2b      	ldr	r2, [pc, #172]	; (8012b74 <xTaskResumeAll+0x1c8>)
 8012ac8:	441a      	add	r2, r3
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	615a      	str	r2, [r3, #20]
 8012ace:	697b      	ldr	r3, [r7, #20]
 8012ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ad2:	4928      	ldr	r1, [pc, #160]	; (8012b74 <xTaskResumeAll+0x1c8>)
 8012ad4:	4613      	mov	r3, r2
 8012ad6:	009b      	lsls	r3, r3, #2
 8012ad8:	4413      	add	r3, r2
 8012ada:	009b      	lsls	r3, r3, #2
 8012adc:	440b      	add	r3, r1
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	1c59      	adds	r1, r3, #1
 8012ae2:	4824      	ldr	r0, [pc, #144]	; (8012b74 <xTaskResumeAll+0x1c8>)
 8012ae4:	4613      	mov	r3, r2
 8012ae6:	009b      	lsls	r3, r3, #2
 8012ae8:	4413      	add	r3, r2
 8012aea:	009b      	lsls	r3, r3, #2
 8012aec:	4403      	add	r3, r0
 8012aee:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012af4:	4b20      	ldr	r3, [pc, #128]	; (8012b78 <xTaskResumeAll+0x1cc>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d302      	bcc.n	8012b04 <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 8012afe:	4b1f      	ldr	r3, [pc, #124]	; (8012b7c <xTaskResumeAll+0x1d0>)
 8012b00:	2201      	movs	r2, #1
 8012b02:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012b04:	4b19      	ldr	r3, [pc, #100]	; (8012b6c <xTaskResumeAll+0x1c0>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	f47f af6f 	bne.w	80129ec <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8012b0e:	697b      	ldr	r3, [r7, #20]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d001      	beq.n	8012b18 <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8012b14:	f000 fc0e 	bl	8013334 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012b18:	4b19      	ldr	r3, [pc, #100]	; (8012b80 <xTaskResumeAll+0x1d4>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d010      	beq.n	8012b46 <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8012b24:	f000 f85c 	bl	8012be0 <xTaskIncrementTick>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d002      	beq.n	8012b34 <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 8012b2e:	4b13      	ldr	r3, [pc, #76]	; (8012b7c <xTaskResumeAll+0x1d0>)
 8012b30:	2201      	movs	r2, #1
 8012b32:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	3b01      	subs	r3, #1
 8012b38:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d1f1      	bne.n	8012b24 <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 8012b40:	4b0f      	ldr	r3, [pc, #60]	; (8012b80 <xTaskResumeAll+0x1d4>)
 8012b42:	2200      	movs	r2, #0
 8012b44:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8012b46:	4b0d      	ldr	r3, [pc, #52]	; (8012b7c <xTaskResumeAll+0x1d0>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d003      	beq.n	8012b56 <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8012b4e:	2301      	movs	r3, #1
 8012b50:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8012b52:	f001 f949 	bl	8013de8 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8012b56:	f001 f96b 	bl	8013e30 <vPortExitCritical>

    return xAlreadyYielded;
 8012b5a:	693b      	ldr	r3, [r7, #16]
}
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	3718      	adds	r7, #24
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}
 8012b64:	200078e8 	.word	0x200078e8
 8012b68:	200078c0 	.word	0x200078c0
 8012b6c:	20007880 	.word	0x20007880
 8012b70:	200078c8 	.word	0x200078c8
 8012b74:	200073f0 	.word	0x200073f0
 8012b78:	200073ec 	.word	0x200073ec
 8012b7c:	200078d4 	.word	0x200078d4
 8012b80:	200078d0 	.word	0x200078d0

08012b84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012b84:	b480      	push	{r7}
 8012b86:	b083      	sub	sp, #12
 8012b88:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8012b8a:	4b05      	ldr	r3, [pc, #20]	; (8012ba0 <xTaskGetTickCount+0x1c>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8012b90:	687b      	ldr	r3, [r7, #4]
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	370c      	adds	r7, #12
 8012b96:	46bd      	mov	sp, r7
 8012b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9c:	4770      	bx	lr
 8012b9e:	bf00      	nop
 8012ba0:	200078c4 	.word	0x200078c4

08012ba4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	b083      	sub	sp, #12
 8012ba8:	af00      	add	r7, sp, #0
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012baa:	2300      	movs	r3, #0
 8012bac:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8012bae:	4b05      	ldr	r3, [pc, #20]	; (8012bc4 <xTaskGetTickCountFromISR+0x20>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8012bb4:	683b      	ldr	r3, [r7, #0]
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	370c      	adds	r7, #12
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc0:	4770      	bx	lr
 8012bc2:	bf00      	nop
 8012bc4:	200078c4 	.word	0x200078c4

08012bc8 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8012bc8:	b480      	push	{r7}
 8012bca:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8012bcc:	4b03      	ldr	r3, [pc, #12]	; (8012bdc <uxTaskGetNumberOfTasks+0x14>)
 8012bce:	681b      	ldr	r3, [r3, #0]
}
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd8:	4770      	bx	lr
 8012bda:	bf00      	nop
 8012bdc:	200078c0 	.word	0x200078c0

08012be0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b088      	sub	sp, #32
 8012be4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8012be6:	2300      	movs	r3, #0
 8012be8:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012bea:	4b7a      	ldr	r3, [pc, #488]	; (8012dd4 <xTaskIncrementTick+0x1f4>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	f040 80e5 	bne.w	8012dbe <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012bf4:	4b78      	ldr	r3, [pc, #480]	; (8012dd8 <xTaskIncrementTick+0x1f8>)
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8012bfc:	4a76      	ldr	r2, [pc, #472]	; (8012dd8 <xTaskIncrementTick+0x1f8>)
 8012bfe:	69bb      	ldr	r3, [r7, #24]
 8012c00:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012c02:	69bb      	ldr	r3, [r7, #24]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d118      	bne.n	8012c3a <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 8012c08:	4b74      	ldr	r3, [pc, #464]	; (8012ddc <xTaskIncrementTick+0x1fc>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d002      	beq.n	8012c18 <xTaskIncrementTick+0x38>
 8012c12:	f001 fa39 	bl	8014088 <ulSetInterruptMask>
 8012c16:	e7fe      	b.n	8012c16 <xTaskIncrementTick+0x36>
 8012c18:	4b70      	ldr	r3, [pc, #448]	; (8012ddc <xTaskIncrementTick+0x1fc>)
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	617b      	str	r3, [r7, #20]
 8012c1e:	4b70      	ldr	r3, [pc, #448]	; (8012de0 <xTaskIncrementTick+0x200>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	4a6e      	ldr	r2, [pc, #440]	; (8012ddc <xTaskIncrementTick+0x1fc>)
 8012c24:	6013      	str	r3, [r2, #0]
 8012c26:	4a6e      	ldr	r2, [pc, #440]	; (8012de0 <xTaskIncrementTick+0x200>)
 8012c28:	697b      	ldr	r3, [r7, #20]
 8012c2a:	6013      	str	r3, [r2, #0]
 8012c2c:	4b6d      	ldr	r3, [pc, #436]	; (8012de4 <xTaskIncrementTick+0x204>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	3301      	adds	r3, #1
 8012c32:	4a6c      	ldr	r2, [pc, #432]	; (8012de4 <xTaskIncrementTick+0x204>)
 8012c34:	6013      	str	r3, [r2, #0]
 8012c36:	f000 fb7d 	bl	8013334 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8012c3a:	4b6b      	ldr	r3, [pc, #428]	; (8012de8 <xTaskIncrementTick+0x208>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	69ba      	ldr	r2, [r7, #24]
 8012c40:	429a      	cmp	r2, r3
 8012c42:	f0c0 80a7 	bcc.w	8012d94 <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012c46:	4b65      	ldr	r3, [pc, #404]	; (8012ddc <xTaskIncrementTick+0x1fc>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d104      	bne.n	8012c5a <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c50:	4b65      	ldr	r3, [pc, #404]	; (8012de8 <xTaskIncrementTick+0x208>)
 8012c52:	f04f 32ff 	mov.w	r2, #4294967295
 8012c56:	601a      	str	r2, [r3, #0]
                    break;
 8012c58:	e09c      	b.n	8012d94 <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c5a:	4b60      	ldr	r3, [pc, #384]	; (8012ddc <xTaskIncrementTick+0x1fc>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	68db      	ldr	r3, [r3, #12]
 8012c60:	68db      	ldr	r3, [r3, #12]
 8012c62:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012c64:	693b      	ldr	r3, [r7, #16]
 8012c66:	685b      	ldr	r3, [r3, #4]
 8012c68:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8012c6a:	69ba      	ldr	r2, [r7, #24]
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	d203      	bcs.n	8012c7a <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8012c72:	4a5d      	ldr	r2, [pc, #372]	; (8012de8 <xTaskIncrementTick+0x208>)
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8012c78:	e08c      	b.n	8012d94 <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8012c7a:	693b      	ldr	r3, [r7, #16]
 8012c7c:	695b      	ldr	r3, [r3, #20]
 8012c7e:	60bb      	str	r3, [r7, #8]
 8012c80:	693b      	ldr	r3, [r7, #16]
 8012c82:	689b      	ldr	r3, [r3, #8]
 8012c84:	693a      	ldr	r2, [r7, #16]
 8012c86:	68d2      	ldr	r2, [r2, #12]
 8012c88:	609a      	str	r2, [r3, #8]
 8012c8a:	693b      	ldr	r3, [r7, #16]
 8012c8c:	68db      	ldr	r3, [r3, #12]
 8012c8e:	693a      	ldr	r2, [r7, #16]
 8012c90:	6892      	ldr	r2, [r2, #8]
 8012c92:	605a      	str	r2, [r3, #4]
 8012c94:	68bb      	ldr	r3, [r7, #8]
 8012c96:	685a      	ldr	r2, [r3, #4]
 8012c98:	693b      	ldr	r3, [r7, #16]
 8012c9a:	3304      	adds	r3, #4
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	d103      	bne.n	8012ca8 <xTaskIncrementTick+0xc8>
 8012ca0:	693b      	ldr	r3, [r7, #16]
 8012ca2:	68da      	ldr	r2, [r3, #12]
 8012ca4:	68bb      	ldr	r3, [r7, #8]
 8012ca6:	605a      	str	r2, [r3, #4]
 8012ca8:	693b      	ldr	r3, [r7, #16]
 8012caa:	2200      	movs	r2, #0
 8012cac:	615a      	str	r2, [r3, #20]
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	1e5a      	subs	r2, r3, #1
 8012cb4:	68bb      	ldr	r3, [r7, #8]
 8012cb6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d01e      	beq.n	8012cfe <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8012cc0:	693b      	ldr	r3, [r7, #16]
 8012cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cc4:	607b      	str	r3, [r7, #4]
 8012cc6:	693b      	ldr	r3, [r7, #16]
 8012cc8:	69db      	ldr	r3, [r3, #28]
 8012cca:	693a      	ldr	r2, [r7, #16]
 8012ccc:	6a12      	ldr	r2, [r2, #32]
 8012cce:	609a      	str	r2, [r3, #8]
 8012cd0:	693b      	ldr	r3, [r7, #16]
 8012cd2:	6a1b      	ldr	r3, [r3, #32]
 8012cd4:	693a      	ldr	r2, [r7, #16]
 8012cd6:	69d2      	ldr	r2, [r2, #28]
 8012cd8:	605a      	str	r2, [r3, #4]
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	685a      	ldr	r2, [r3, #4]
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	3318      	adds	r3, #24
 8012ce2:	429a      	cmp	r2, r3
 8012ce4:	d103      	bne.n	8012cee <xTaskIncrementTick+0x10e>
 8012ce6:	693b      	ldr	r3, [r7, #16]
 8012ce8:	6a1a      	ldr	r2, [r3, #32]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	605a      	str	r2, [r3, #4]
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	629a      	str	r2, [r3, #40]	; 0x28
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	1e5a      	subs	r2, r3, #1
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d02:	4b3a      	ldr	r3, [pc, #232]	; (8012dec <xTaskIncrementTick+0x20c>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	429a      	cmp	r2, r3
 8012d08:	d903      	bls.n	8012d12 <xTaskIncrementTick+0x132>
 8012d0a:	693b      	ldr	r3, [r7, #16]
 8012d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d0e:	4a37      	ldr	r2, [pc, #220]	; (8012dec <xTaskIncrementTick+0x20c>)
 8012d10:	6013      	str	r3, [r2, #0]
 8012d12:	693b      	ldr	r3, [r7, #16]
 8012d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d16:	4936      	ldr	r1, [pc, #216]	; (8012df0 <xTaskIncrementTick+0x210>)
 8012d18:	4613      	mov	r3, r2
 8012d1a:	009b      	lsls	r3, r3, #2
 8012d1c:	4413      	add	r3, r2
 8012d1e:	009b      	lsls	r3, r3, #2
 8012d20:	440b      	add	r3, r1
 8012d22:	3304      	adds	r3, #4
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	603b      	str	r3, [r7, #0]
 8012d28:	693b      	ldr	r3, [r7, #16]
 8012d2a:	683a      	ldr	r2, [r7, #0]
 8012d2c:	609a      	str	r2, [r3, #8]
 8012d2e:	683b      	ldr	r3, [r7, #0]
 8012d30:	689a      	ldr	r2, [r3, #8]
 8012d32:	693b      	ldr	r3, [r7, #16]
 8012d34:	60da      	str	r2, [r3, #12]
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	689b      	ldr	r3, [r3, #8]
 8012d3a:	693a      	ldr	r2, [r7, #16]
 8012d3c:	3204      	adds	r2, #4
 8012d3e:	605a      	str	r2, [r3, #4]
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	1d1a      	adds	r2, r3, #4
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	609a      	str	r2, [r3, #8]
 8012d48:	693b      	ldr	r3, [r7, #16]
 8012d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d4c:	4613      	mov	r3, r2
 8012d4e:	009b      	lsls	r3, r3, #2
 8012d50:	4413      	add	r3, r2
 8012d52:	009b      	lsls	r3, r3, #2
 8012d54:	4a26      	ldr	r2, [pc, #152]	; (8012df0 <xTaskIncrementTick+0x210>)
 8012d56:	441a      	add	r2, r3
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	615a      	str	r2, [r3, #20]
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d60:	4923      	ldr	r1, [pc, #140]	; (8012df0 <xTaskIncrementTick+0x210>)
 8012d62:	4613      	mov	r3, r2
 8012d64:	009b      	lsls	r3, r3, #2
 8012d66:	4413      	add	r3, r2
 8012d68:	009b      	lsls	r3, r3, #2
 8012d6a:	440b      	add	r3, r1
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	1c59      	adds	r1, r3, #1
 8012d70:	481f      	ldr	r0, [pc, #124]	; (8012df0 <xTaskIncrementTick+0x210>)
 8012d72:	4613      	mov	r3, r2
 8012d74:	009b      	lsls	r3, r3, #2
 8012d76:	4413      	add	r3, r2
 8012d78:	009b      	lsls	r3, r3, #2
 8012d7a:	4403      	add	r3, r0
 8012d7c:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012d7e:	693b      	ldr	r3, [r7, #16]
 8012d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d82:	4b1c      	ldr	r3, [pc, #112]	; (8012df4 <xTaskIncrementTick+0x214>)
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d88:	429a      	cmp	r2, r3
 8012d8a:	f67f af5c 	bls.w	8012c46 <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 8012d8e:	2301      	movs	r3, #1
 8012d90:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012d92:	e758      	b.n	8012c46 <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012d94:	4b17      	ldr	r3, [pc, #92]	; (8012df4 <xTaskIncrementTick+0x214>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d9a:	4915      	ldr	r1, [pc, #84]	; (8012df0 <xTaskIncrementTick+0x210>)
 8012d9c:	4613      	mov	r3, r2
 8012d9e:	009b      	lsls	r3, r3, #2
 8012da0:	4413      	add	r3, r2
 8012da2:	009b      	lsls	r3, r3, #2
 8012da4:	440b      	add	r3, r1
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	2b01      	cmp	r3, #1
 8012daa:	d901      	bls.n	8012db0 <xTaskIncrementTick+0x1d0>
            {
                xSwitchRequired = pdTRUE;
 8012dac:	2301      	movs	r3, #1
 8012dae:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8012db0:	4b11      	ldr	r3, [pc, #68]	; (8012df8 <xTaskIncrementTick+0x218>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d007      	beq.n	8012dc8 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8012db8:	2301      	movs	r3, #1
 8012dba:	61fb      	str	r3, [r7, #28]
 8012dbc:	e004      	b.n	8012dc8 <xTaskIncrementTick+0x1e8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8012dbe:	4b0f      	ldr	r3, [pc, #60]	; (8012dfc <xTaskIncrementTick+0x21c>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	4a0d      	ldr	r2, [pc, #52]	; (8012dfc <xTaskIncrementTick+0x21c>)
 8012dc6:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8012dc8:	69fb      	ldr	r3, [r7, #28]
}
 8012dca:	4618      	mov	r0, r3
 8012dcc:	3720      	adds	r7, #32
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	bd80      	pop	{r7, pc}
 8012dd2:	bf00      	nop
 8012dd4:	200078e8 	.word	0x200078e8
 8012dd8:	200078c4 	.word	0x200078c4
 8012ddc:	20007878 	.word	0x20007878
 8012de0:	2000787c 	.word	0x2000787c
 8012de4:	200078d8 	.word	0x200078d8
 8012de8:	200078e0 	.word	0x200078e0
 8012dec:	200078c8 	.word	0x200078c8
 8012df0:	200073f0 	.word	0x200073f0
 8012df4:	200073ec 	.word	0x200073ec
 8012df8:	200078d4 	.word	0x200078d4
 8012dfc:	200078d0 	.word	0x200078d0

08012e00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b082      	sub	sp, #8
 8012e04:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012e06:	4b23      	ldr	r3, [pc, #140]	; (8012e94 <vTaskSwitchContext+0x94>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d003      	beq.n	8012e16 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8012e0e:	4b22      	ldr	r3, [pc, #136]	; (8012e98 <vTaskSwitchContext+0x98>)
 8012e10:	2201      	movs	r2, #1
 8012e12:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8012e14:	e039      	b.n	8012e8a <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 8012e16:	4b20      	ldr	r3, [pc, #128]	; (8012e98 <vTaskSwitchContext+0x98>)
 8012e18:	2200      	movs	r2, #0
 8012e1a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e1c:	4b1f      	ldr	r3, [pc, #124]	; (8012e9c <vTaskSwitchContext+0x9c>)
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	607b      	str	r3, [r7, #4]
 8012e22:	e008      	b.n	8012e36 <vTaskSwitchContext+0x36>
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d102      	bne.n	8012e30 <vTaskSwitchContext+0x30>
 8012e2a:	f001 f92d 	bl	8014088 <ulSetInterruptMask>
 8012e2e:	e7fe      	b.n	8012e2e <vTaskSwitchContext+0x2e>
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	3b01      	subs	r3, #1
 8012e34:	607b      	str	r3, [r7, #4]
 8012e36:	491a      	ldr	r1, [pc, #104]	; (8012ea0 <vTaskSwitchContext+0xa0>)
 8012e38:	687a      	ldr	r2, [r7, #4]
 8012e3a:	4613      	mov	r3, r2
 8012e3c:	009b      	lsls	r3, r3, #2
 8012e3e:	4413      	add	r3, r2
 8012e40:	009b      	lsls	r3, r3, #2
 8012e42:	440b      	add	r3, r1
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d0ec      	beq.n	8012e24 <vTaskSwitchContext+0x24>
 8012e4a:	687a      	ldr	r2, [r7, #4]
 8012e4c:	4613      	mov	r3, r2
 8012e4e:	009b      	lsls	r3, r3, #2
 8012e50:	4413      	add	r3, r2
 8012e52:	009b      	lsls	r3, r3, #2
 8012e54:	4a12      	ldr	r2, [pc, #72]	; (8012ea0 <vTaskSwitchContext+0xa0>)
 8012e56:	4413      	add	r3, r2
 8012e58:	603b      	str	r3, [r7, #0]
 8012e5a:	683b      	ldr	r3, [r7, #0]
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	685a      	ldr	r2, [r3, #4]
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	605a      	str	r2, [r3, #4]
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	685a      	ldr	r2, [r3, #4]
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	3308      	adds	r3, #8
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	d104      	bne.n	8012e7a <vTaskSwitchContext+0x7a>
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	685a      	ldr	r2, [r3, #4]
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	605a      	str	r2, [r3, #4]
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	685b      	ldr	r3, [r3, #4]
 8012e7e:	68db      	ldr	r3, [r3, #12]
 8012e80:	4a08      	ldr	r2, [pc, #32]	; (8012ea4 <vTaskSwitchContext+0xa4>)
 8012e82:	6013      	str	r3, [r2, #0]
 8012e84:	4a05      	ldr	r2, [pc, #20]	; (8012e9c <vTaskSwitchContext+0x9c>)
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	6013      	str	r3, [r2, #0]
}
 8012e8a:	bf00      	nop
 8012e8c:	3708      	adds	r7, #8
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}
 8012e92:	bf00      	nop
 8012e94:	200078e8 	.word	0x200078e8
 8012e98:	200078d4 	.word	0x200078d4
 8012e9c:	200078c8 	.word	0x200078c8
 8012ea0:	200073f0 	.word	0x200073f0
 8012ea4:	200073ec 	.word	0x200073ec

08012ea8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b082      	sub	sp, #8
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d102      	bne.n	8012ebe <vTaskPlaceOnEventList+0x16>
 8012eb8:	f001 f8e6 	bl	8014088 <ulSetInterruptMask>
 8012ebc:	e7fe      	b.n	8012ebc <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012ebe:	4b07      	ldr	r3, [pc, #28]	; (8012edc <vTaskPlaceOnEventList+0x34>)
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	3318      	adds	r3, #24
 8012ec4:	4619      	mov	r1, r3
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f7fe faf1 	bl	80114ae <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012ecc:	2101      	movs	r1, #1
 8012ece:	6838      	ldr	r0, [r7, #0]
 8012ed0:	f000 fc3e 	bl	8013750 <prvAddCurrentTaskToDelayedList>
}
 8012ed4:	bf00      	nop
 8012ed6:	3708      	adds	r7, #8
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}
 8012edc:	200073ec 	.word	0x200073ec

08012ee0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b086      	sub	sp, #24
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	60f8      	str	r0, [r7, #12]
 8012ee8:	60b9      	str	r1, [r7, #8]
 8012eea:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d102      	bne.n	8012ef8 <vTaskPlaceOnEventListRestricted+0x18>
 8012ef2:	f001 f8c9 	bl	8014088 <ulSetInterruptMask>
 8012ef6:	e7fe      	b.n	8012ef6 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	617b      	str	r3, [r7, #20]
 8012efe:	4b16      	ldr	r3, [pc, #88]	; (8012f58 <vTaskPlaceOnEventListRestricted+0x78>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	697a      	ldr	r2, [r7, #20]
 8012f04:	61da      	str	r2, [r3, #28]
 8012f06:	4b14      	ldr	r3, [pc, #80]	; (8012f58 <vTaskPlaceOnEventListRestricted+0x78>)
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	697a      	ldr	r2, [r7, #20]
 8012f0c:	6892      	ldr	r2, [r2, #8]
 8012f0e:	621a      	str	r2, [r3, #32]
 8012f10:	4b11      	ldr	r3, [pc, #68]	; (8012f58 <vTaskPlaceOnEventListRestricted+0x78>)
 8012f12:	681a      	ldr	r2, [r3, #0]
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	689b      	ldr	r3, [r3, #8]
 8012f18:	3218      	adds	r2, #24
 8012f1a:	605a      	str	r2, [r3, #4]
 8012f1c:	4b0e      	ldr	r3, [pc, #56]	; (8012f58 <vTaskPlaceOnEventListRestricted+0x78>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	f103 0218 	add.w	r2, r3, #24
 8012f24:	697b      	ldr	r3, [r7, #20]
 8012f26:	609a      	str	r2, [r3, #8]
 8012f28:	4b0b      	ldr	r3, [pc, #44]	; (8012f58 <vTaskPlaceOnEventListRestricted+0x78>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	68fa      	ldr	r2, [r7, #12]
 8012f2e:	629a      	str	r2, [r3, #40]	; 0x28
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	1c5a      	adds	r2, r3, #1
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d002      	beq.n	8012f46 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 8012f40:	f04f 33ff 	mov.w	r3, #4294967295
 8012f44:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012f46:	6879      	ldr	r1, [r7, #4]
 8012f48:	68b8      	ldr	r0, [r7, #8]
 8012f4a:	f000 fc01 	bl	8013750 <prvAddCurrentTaskToDelayedList>
    }
 8012f4e:	bf00      	nop
 8012f50:	3718      	adds	r7, #24
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}
 8012f56:	bf00      	nop
 8012f58:	200073ec 	.word	0x200073ec

08012f5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b088      	sub	sp, #32
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	68db      	ldr	r3, [r3, #12]
 8012f68:	68db      	ldr	r3, [r3, #12]
 8012f6a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8012f6c:	69bb      	ldr	r3, [r7, #24]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d102      	bne.n	8012f78 <xTaskRemoveFromEventList+0x1c>
 8012f72:	f001 f889 	bl	8014088 <ulSetInterruptMask>
 8012f76:	e7fe      	b.n	8012f76 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8012f78:	69bb      	ldr	r3, [r7, #24]
 8012f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f7c:	617b      	str	r3, [r7, #20]
 8012f7e:	69bb      	ldr	r3, [r7, #24]
 8012f80:	69db      	ldr	r3, [r3, #28]
 8012f82:	69ba      	ldr	r2, [r7, #24]
 8012f84:	6a12      	ldr	r2, [r2, #32]
 8012f86:	609a      	str	r2, [r3, #8]
 8012f88:	69bb      	ldr	r3, [r7, #24]
 8012f8a:	6a1b      	ldr	r3, [r3, #32]
 8012f8c:	69ba      	ldr	r2, [r7, #24]
 8012f8e:	69d2      	ldr	r2, [r2, #28]
 8012f90:	605a      	str	r2, [r3, #4]
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	685a      	ldr	r2, [r3, #4]
 8012f96:	69bb      	ldr	r3, [r7, #24]
 8012f98:	3318      	adds	r3, #24
 8012f9a:	429a      	cmp	r2, r3
 8012f9c:	d103      	bne.n	8012fa6 <xTaskRemoveFromEventList+0x4a>
 8012f9e:	69bb      	ldr	r3, [r7, #24]
 8012fa0:	6a1a      	ldr	r2, [r3, #32]
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	605a      	str	r2, [r3, #4]
 8012fa6:	69bb      	ldr	r3, [r7, #24]
 8012fa8:	2200      	movs	r2, #0
 8012faa:	629a      	str	r2, [r3, #40]	; 0x28
 8012fac:	697b      	ldr	r3, [r7, #20]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	1e5a      	subs	r2, r3, #1
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012fb6:	4b4a      	ldr	r3, [pc, #296]	; (80130e0 <xTaskRemoveFromEventList+0x184>)
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d15f      	bne.n	801307e <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8012fbe:	69bb      	ldr	r3, [r7, #24]
 8012fc0:	695b      	ldr	r3, [r3, #20]
 8012fc2:	60fb      	str	r3, [r7, #12]
 8012fc4:	69bb      	ldr	r3, [r7, #24]
 8012fc6:	689b      	ldr	r3, [r3, #8]
 8012fc8:	69ba      	ldr	r2, [r7, #24]
 8012fca:	68d2      	ldr	r2, [r2, #12]
 8012fcc:	609a      	str	r2, [r3, #8]
 8012fce:	69bb      	ldr	r3, [r7, #24]
 8012fd0:	68db      	ldr	r3, [r3, #12]
 8012fd2:	69ba      	ldr	r2, [r7, #24]
 8012fd4:	6892      	ldr	r2, [r2, #8]
 8012fd6:	605a      	str	r2, [r3, #4]
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	685a      	ldr	r2, [r3, #4]
 8012fdc:	69bb      	ldr	r3, [r7, #24]
 8012fde:	3304      	adds	r3, #4
 8012fe0:	429a      	cmp	r2, r3
 8012fe2:	d103      	bne.n	8012fec <xTaskRemoveFromEventList+0x90>
 8012fe4:	69bb      	ldr	r3, [r7, #24]
 8012fe6:	68da      	ldr	r2, [r3, #12]
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	605a      	str	r2, [r3, #4]
 8012fec:	69bb      	ldr	r3, [r7, #24]
 8012fee:	2200      	movs	r2, #0
 8012ff0:	615a      	str	r2, [r3, #20]
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	1e5a      	subs	r2, r3, #1
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8012ffc:	69bb      	ldr	r3, [r7, #24]
 8012ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013000:	4b38      	ldr	r3, [pc, #224]	; (80130e4 <xTaskRemoveFromEventList+0x188>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	429a      	cmp	r2, r3
 8013006:	d903      	bls.n	8013010 <xTaskRemoveFromEventList+0xb4>
 8013008:	69bb      	ldr	r3, [r7, #24]
 801300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801300c:	4a35      	ldr	r2, [pc, #212]	; (80130e4 <xTaskRemoveFromEventList+0x188>)
 801300e:	6013      	str	r3, [r2, #0]
 8013010:	69bb      	ldr	r3, [r7, #24]
 8013012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013014:	4934      	ldr	r1, [pc, #208]	; (80130e8 <xTaskRemoveFromEventList+0x18c>)
 8013016:	4613      	mov	r3, r2
 8013018:	009b      	lsls	r3, r3, #2
 801301a:	4413      	add	r3, r2
 801301c:	009b      	lsls	r3, r3, #2
 801301e:	440b      	add	r3, r1
 8013020:	3304      	adds	r3, #4
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	60bb      	str	r3, [r7, #8]
 8013026:	69bb      	ldr	r3, [r7, #24]
 8013028:	68ba      	ldr	r2, [r7, #8]
 801302a:	609a      	str	r2, [r3, #8]
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	689a      	ldr	r2, [r3, #8]
 8013030:	69bb      	ldr	r3, [r7, #24]
 8013032:	60da      	str	r2, [r3, #12]
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	689b      	ldr	r3, [r3, #8]
 8013038:	69ba      	ldr	r2, [r7, #24]
 801303a:	3204      	adds	r2, #4
 801303c:	605a      	str	r2, [r3, #4]
 801303e:	69bb      	ldr	r3, [r7, #24]
 8013040:	1d1a      	adds	r2, r3, #4
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	609a      	str	r2, [r3, #8]
 8013046:	69bb      	ldr	r3, [r7, #24]
 8013048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801304a:	4613      	mov	r3, r2
 801304c:	009b      	lsls	r3, r3, #2
 801304e:	4413      	add	r3, r2
 8013050:	009b      	lsls	r3, r3, #2
 8013052:	4a25      	ldr	r2, [pc, #148]	; (80130e8 <xTaskRemoveFromEventList+0x18c>)
 8013054:	441a      	add	r2, r3
 8013056:	69bb      	ldr	r3, [r7, #24]
 8013058:	615a      	str	r2, [r3, #20]
 801305a:	69bb      	ldr	r3, [r7, #24]
 801305c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801305e:	4922      	ldr	r1, [pc, #136]	; (80130e8 <xTaskRemoveFromEventList+0x18c>)
 8013060:	4613      	mov	r3, r2
 8013062:	009b      	lsls	r3, r3, #2
 8013064:	4413      	add	r3, r2
 8013066:	009b      	lsls	r3, r3, #2
 8013068:	440b      	add	r3, r1
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	1c59      	adds	r1, r3, #1
 801306e:	481e      	ldr	r0, [pc, #120]	; (80130e8 <xTaskRemoveFromEventList+0x18c>)
 8013070:	4613      	mov	r3, r2
 8013072:	009b      	lsls	r3, r3, #2
 8013074:	4413      	add	r3, r2
 8013076:	009b      	lsls	r3, r3, #2
 8013078:	4403      	add	r3, r0
 801307a:	6019      	str	r1, [r3, #0]
 801307c:	e01b      	b.n	80130b6 <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801307e:	4b1b      	ldr	r3, [pc, #108]	; (80130ec <xTaskRemoveFromEventList+0x190>)
 8013080:	685b      	ldr	r3, [r3, #4]
 8013082:	613b      	str	r3, [r7, #16]
 8013084:	69bb      	ldr	r3, [r7, #24]
 8013086:	693a      	ldr	r2, [r7, #16]
 8013088:	61da      	str	r2, [r3, #28]
 801308a:	693b      	ldr	r3, [r7, #16]
 801308c:	689a      	ldr	r2, [r3, #8]
 801308e:	69bb      	ldr	r3, [r7, #24]
 8013090:	621a      	str	r2, [r3, #32]
 8013092:	693b      	ldr	r3, [r7, #16]
 8013094:	689b      	ldr	r3, [r3, #8]
 8013096:	69ba      	ldr	r2, [r7, #24]
 8013098:	3218      	adds	r2, #24
 801309a:	605a      	str	r2, [r3, #4]
 801309c:	69bb      	ldr	r3, [r7, #24]
 801309e:	f103 0218 	add.w	r2, r3, #24
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	609a      	str	r2, [r3, #8]
 80130a6:	69bb      	ldr	r3, [r7, #24]
 80130a8:	4a10      	ldr	r2, [pc, #64]	; (80130ec <xTaskRemoveFromEventList+0x190>)
 80130aa:	629a      	str	r2, [r3, #40]	; 0x28
 80130ac:	4b0f      	ldr	r3, [pc, #60]	; (80130ec <xTaskRemoveFromEventList+0x190>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	3301      	adds	r3, #1
 80130b2:	4a0e      	ldr	r2, [pc, #56]	; (80130ec <xTaskRemoveFromEventList+0x190>)
 80130b4:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80130b6:	69bb      	ldr	r3, [r7, #24]
 80130b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130ba:	4b0d      	ldr	r3, [pc, #52]	; (80130f0 <xTaskRemoveFromEventList+0x194>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130c0:	429a      	cmp	r2, r3
 80130c2:	d905      	bls.n	80130d0 <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80130c4:	2301      	movs	r3, #1
 80130c6:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80130c8:	4b0a      	ldr	r3, [pc, #40]	; (80130f4 <xTaskRemoveFromEventList+0x198>)
 80130ca:	2201      	movs	r2, #1
 80130cc:	601a      	str	r2, [r3, #0]
 80130ce:	e001      	b.n	80130d4 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 80130d0:	2300      	movs	r3, #0
 80130d2:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80130d4:	69fb      	ldr	r3, [r7, #28]
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3720      	adds	r7, #32
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
 80130de:	bf00      	nop
 80130e0:	200078e8 	.word	0x200078e8
 80130e4:	200078c8 	.word	0x200078c8
 80130e8:	200073f0 	.word	0x200073f0
 80130ec:	20007880 	.word	0x20007880
 80130f0:	200073ec 	.word	0x200073ec
 80130f4:	200078d4 	.word	0x200078d4

080130f8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80130f8:	b480      	push	{r7}
 80130fa:	b083      	sub	sp, #12
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013100:	4b06      	ldr	r3, [pc, #24]	; (801311c <vTaskInternalSetTimeOutState+0x24>)
 8013102:	681a      	ldr	r2, [r3, #0]
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8013108:	4b05      	ldr	r3, [pc, #20]	; (8013120 <vTaskInternalSetTimeOutState+0x28>)
 801310a:	681a      	ldr	r2, [r3, #0]
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	605a      	str	r2, [r3, #4]
}
 8013110:	bf00      	nop
 8013112:	370c      	adds	r7, #12
 8013114:	46bd      	mov	sp, r7
 8013116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311a:	4770      	bx	lr
 801311c:	200078d8 	.word	0x200078d8
 8013120:	200078c4 	.word	0x200078c4

08013124 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b086      	sub	sp, #24
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
 801312c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d102      	bne.n	801313a <xTaskCheckForTimeOut+0x16>
 8013134:	f000 ffa8 	bl	8014088 <ulSetInterruptMask>
 8013138:	e7fe      	b.n	8013138 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d102      	bne.n	8013146 <xTaskCheckForTimeOut+0x22>
 8013140:	f000 ffa2 	bl	8014088 <ulSetInterruptMask>
 8013144:	e7fe      	b.n	8013144 <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 8013146:	f000 fe61 	bl	8013e0c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 801314a:	4b1f      	ldr	r3, [pc, #124]	; (80131c8 <xTaskCheckForTimeOut+0xa4>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	685b      	ldr	r3, [r3, #4]
 8013154:	693a      	ldr	r2, [r7, #16]
 8013156:	1ad3      	subs	r3, r2, r3
 8013158:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013162:	d102      	bne.n	801316a <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8013164:	2300      	movs	r3, #0
 8013166:	617b      	str	r3, [r7, #20]
 8013168:	e026      	b.n	80131b8 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681a      	ldr	r2, [r3, #0]
 801316e:	4b17      	ldr	r3, [pc, #92]	; (80131cc <xTaskCheckForTimeOut+0xa8>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	429a      	cmp	r2, r3
 8013174:	d00a      	beq.n	801318c <xTaskCheckForTimeOut+0x68>
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	685b      	ldr	r3, [r3, #4]
 801317a:	693a      	ldr	r2, [r7, #16]
 801317c:	429a      	cmp	r2, r3
 801317e:	d305      	bcc.n	801318c <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8013180:	2301      	movs	r3, #1
 8013182:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	2200      	movs	r2, #0
 8013188:	601a      	str	r2, [r3, #0]
 801318a:	e015      	b.n	80131b8 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	68fa      	ldr	r2, [r7, #12]
 8013192:	429a      	cmp	r2, r3
 8013194:	d20b      	bcs.n	80131ae <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	681a      	ldr	r2, [r3, #0]
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	1ad2      	subs	r2, r2, r3
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80131a2:	6878      	ldr	r0, [r7, #4]
 80131a4:	f7ff ffa8 	bl	80130f8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80131a8:	2300      	movs	r3, #0
 80131aa:	617b      	str	r3, [r7, #20]
 80131ac:	e004      	b.n	80131b8 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	2200      	movs	r2, #0
 80131b2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80131b4:	2301      	movs	r3, #1
 80131b6:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80131b8:	f000 fe3a 	bl	8013e30 <vPortExitCritical>

    return xReturn;
 80131bc:	697b      	ldr	r3, [r7, #20]
}
 80131be:	4618      	mov	r0, r3
 80131c0:	3718      	adds	r7, #24
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
 80131c6:	bf00      	nop
 80131c8:	200078c4 	.word	0x200078c4
 80131cc:	200078d8 	.word	0x200078d8

080131d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80131d0:	b480      	push	{r7}
 80131d2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80131d4:	4b03      	ldr	r3, [pc, #12]	; (80131e4 <vTaskMissedYield+0x14>)
 80131d6:	2201      	movs	r2, #1
 80131d8:	601a      	str	r2, [r3, #0]
}
 80131da:	bf00      	nop
 80131dc:	46bd      	mov	sp, r7
 80131de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e2:	4770      	bx	lr
 80131e4:	200078d4 	.word	0x200078d4

080131e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b082      	sub	sp, #8
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80131f0:	f000 f84a 	bl	8013288 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80131f4:	4b03      	ldr	r3, [pc, #12]	; (8013204 <prvIdleTask+0x1c>)
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	2b01      	cmp	r3, #1
 80131fa:	d9f9      	bls.n	80131f0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80131fc:	f000 fdf4 	bl	8013de8 <vPortYield>
        prvCheckTasksWaitingTermination();
 8013200:	e7f6      	b.n	80131f0 <prvIdleTask+0x8>
 8013202:	bf00      	nop
 8013204:	200073f0 	.word	0x200073f0

08013208 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b082      	sub	sp, #8
 801320c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801320e:	2300      	movs	r3, #0
 8013210:	607b      	str	r3, [r7, #4]
 8013212:	e00c      	b.n	801322e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013214:	687a      	ldr	r2, [r7, #4]
 8013216:	4613      	mov	r3, r2
 8013218:	009b      	lsls	r3, r3, #2
 801321a:	4413      	add	r3, r2
 801321c:	009b      	lsls	r3, r3, #2
 801321e:	4a12      	ldr	r2, [pc, #72]	; (8013268 <prvInitialiseTaskLists+0x60>)
 8013220:	4413      	add	r3, r2
 8013222:	4618      	mov	r0, r3
 8013224:	f7fe f916 	bl	8011454 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	3301      	adds	r3, #1
 801322c:	607b      	str	r3, [r7, #4]
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	2b37      	cmp	r3, #55	; 0x37
 8013232:	d9ef      	bls.n	8013214 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8013234:	480d      	ldr	r0, [pc, #52]	; (801326c <prvInitialiseTaskLists+0x64>)
 8013236:	f7fe f90d 	bl	8011454 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 801323a:	480d      	ldr	r0, [pc, #52]	; (8013270 <prvInitialiseTaskLists+0x68>)
 801323c:	f7fe f90a 	bl	8011454 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8013240:	480c      	ldr	r0, [pc, #48]	; (8013274 <prvInitialiseTaskLists+0x6c>)
 8013242:	f7fe f907 	bl	8011454 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8013246:	480c      	ldr	r0, [pc, #48]	; (8013278 <prvInitialiseTaskLists+0x70>)
 8013248:	f7fe f904 	bl	8011454 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 801324c:	480b      	ldr	r0, [pc, #44]	; (801327c <prvInitialiseTaskLists+0x74>)
 801324e:	f7fe f901 	bl	8011454 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8013252:	4b0b      	ldr	r3, [pc, #44]	; (8013280 <prvInitialiseTaskLists+0x78>)
 8013254:	4a05      	ldr	r2, [pc, #20]	; (801326c <prvInitialiseTaskLists+0x64>)
 8013256:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013258:	4b0a      	ldr	r3, [pc, #40]	; (8013284 <prvInitialiseTaskLists+0x7c>)
 801325a:	4a05      	ldr	r2, [pc, #20]	; (8013270 <prvInitialiseTaskLists+0x68>)
 801325c:	601a      	str	r2, [r3, #0]
}
 801325e:	bf00      	nop
 8013260:	3708      	adds	r7, #8
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}
 8013266:	bf00      	nop
 8013268:	200073f0 	.word	0x200073f0
 801326c:	20007850 	.word	0x20007850
 8013270:	20007864 	.word	0x20007864
 8013274:	20007880 	.word	0x20007880
 8013278:	20007894 	.word	0x20007894
 801327c:	200078ac 	.word	0x200078ac
 8013280:	20007878 	.word	0x20007878
 8013284:	2000787c 	.word	0x2000787c

08013288 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b082      	sub	sp, #8
 801328c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801328e:	e019      	b.n	80132c4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8013290:	f000 fdbc 	bl	8013e0c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013294:	4b10      	ldr	r3, [pc, #64]	; (80132d8 <prvCheckTasksWaitingTermination+0x50>)
 8013296:	68db      	ldr	r3, [r3, #12]
 8013298:	68db      	ldr	r3, [r3, #12]
 801329a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	3304      	adds	r3, #4
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7fe f93d 	bl	8011520 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80132a6:	4b0d      	ldr	r3, [pc, #52]	; (80132dc <prvCheckTasksWaitingTermination+0x54>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	3b01      	subs	r3, #1
 80132ac:	4a0b      	ldr	r2, [pc, #44]	; (80132dc <prvCheckTasksWaitingTermination+0x54>)
 80132ae:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80132b0:	4b0b      	ldr	r3, [pc, #44]	; (80132e0 <prvCheckTasksWaitingTermination+0x58>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	3b01      	subs	r3, #1
 80132b6:	4a0a      	ldr	r2, [pc, #40]	; (80132e0 <prvCheckTasksWaitingTermination+0x58>)
 80132b8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80132ba:	f000 fdb9 	bl	8013e30 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f000 f810 	bl	80132e4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80132c4:	4b06      	ldr	r3, [pc, #24]	; (80132e0 <prvCheckTasksWaitingTermination+0x58>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d1e1      	bne.n	8013290 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80132cc:	bf00      	nop
 80132ce:	bf00      	nop
 80132d0:	3708      	adds	r7, #8
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}
 80132d6:	bf00      	nop
 80132d8:	20007894 	.word	0x20007894
 80132dc:	200078c0 	.word	0x200078c0
 80132e0:	200078a8 	.word	0x200078a8

080132e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b082      	sub	sp, #8
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d108      	bne.n	8013308 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132fa:	4618      	mov	r0, r3
 80132fc:	f000 ffce 	bl	801429c <vPortFree>
                vPortFree( pxTCB );
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	f000 ffcb 	bl	801429c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8013306:	e010      	b.n	801332a <prvDeleteTCB+0x46>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801330e:	2b01      	cmp	r3, #1
 8013310:	d103      	bne.n	801331a <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f000 ffc2 	bl	801429c <vPortFree>
    }
 8013318:	e007      	b.n	801332a <prvDeleteTCB+0x46>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013320:	2b02      	cmp	r3, #2
 8013322:	d002      	beq.n	801332a <prvDeleteTCB+0x46>
 8013324:	f000 feb0 	bl	8014088 <ulSetInterruptMask>
 8013328:	e7fe      	b.n	8013328 <prvDeleteTCB+0x44>
    }
 801332a:	bf00      	nop
 801332c:	3708      	adds	r7, #8
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
	...

08013334 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013334:	b480      	push	{r7}
 8013336:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013338:	4b0a      	ldr	r3, [pc, #40]	; (8013364 <prvResetNextTaskUnblockTime+0x30>)
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d104      	bne.n	801334c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8013342:	4b09      	ldr	r3, [pc, #36]	; (8013368 <prvResetNextTaskUnblockTime+0x34>)
 8013344:	f04f 32ff 	mov.w	r2, #4294967295
 8013348:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 801334a:	e005      	b.n	8013358 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 801334c:	4b05      	ldr	r3, [pc, #20]	; (8013364 <prvResetNextTaskUnblockTime+0x30>)
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	68db      	ldr	r3, [r3, #12]
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	4a04      	ldr	r2, [pc, #16]	; (8013368 <prvResetNextTaskUnblockTime+0x34>)
 8013356:	6013      	str	r3, [r2, #0]
}
 8013358:	bf00      	nop
 801335a:	46bd      	mov	sp, r7
 801335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013360:	4770      	bx	lr
 8013362:	bf00      	nop
 8013364:	20007878 	.word	0x20007878
 8013368:	200078e0 	.word	0x200078e0

0801336c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 801336c:	b480      	push	{r7}
 801336e:	b083      	sub	sp, #12
 8013370:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8013372:	4b05      	ldr	r3, [pc, #20]	; (8013388 <xTaskGetCurrentTaskHandle+0x1c>)
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	607b      	str	r3, [r7, #4]

        return xReturn;
 8013378:	687b      	ldr	r3, [r7, #4]
    }
 801337a:	4618      	mov	r0, r3
 801337c:	370c      	adds	r7, #12
 801337e:	46bd      	mov	sp, r7
 8013380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013384:	4770      	bx	lr
 8013386:	bf00      	nop
 8013388:	200073ec 	.word	0x200073ec

0801338c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 801338c:	b480      	push	{r7}
 801338e:	b083      	sub	sp, #12
 8013390:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8013392:	4b0b      	ldr	r3, [pc, #44]	; (80133c0 <xTaskGetSchedulerState+0x34>)
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d102      	bne.n	80133a0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 801339a:	2301      	movs	r3, #1
 801339c:	607b      	str	r3, [r7, #4]
 801339e:	e008      	b.n	80133b2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133a0:	4b08      	ldr	r3, [pc, #32]	; (80133c4 <xTaskGetSchedulerState+0x38>)
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d102      	bne.n	80133ae <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80133a8:	2302      	movs	r3, #2
 80133aa:	607b      	str	r3, [r7, #4]
 80133ac:	e001      	b.n	80133b2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80133ae:	2300      	movs	r3, #0
 80133b0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80133b2:	687b      	ldr	r3, [r7, #4]
    }
 80133b4:	4618      	mov	r0, r3
 80133b6:	370c      	adds	r7, #12
 80133b8:	46bd      	mov	sp, r7
 80133ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133be:	4770      	bx	lr
 80133c0:	200078cc 	.word	0x200078cc
 80133c4:	200078e8 	.word	0x200078e8

080133c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b086      	sub	sp, #24
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80133d4:	2300      	movs	r3, #0
 80133d6:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d079      	beq.n	80134d2 <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133e2:	4b3e      	ldr	r3, [pc, #248]	; (80134dc <xTaskPriorityInherit+0x114>)
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d269      	bcs.n	80134c0 <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	699b      	ldr	r3, [r3, #24]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	db06      	blt.n	8013402 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80133f4:	4b39      	ldr	r3, [pc, #228]	; (80134dc <xTaskPriorityInherit+0x114>)
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013402:	693b      	ldr	r3, [r7, #16]
 8013404:	6959      	ldr	r1, [r3, #20]
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801340a:	4613      	mov	r3, r2
 801340c:	009b      	lsls	r3, r3, #2
 801340e:	4413      	add	r3, r2
 8013410:	009b      	lsls	r3, r3, #2
 8013412:	4a33      	ldr	r2, [pc, #204]	; (80134e0 <xTaskPriorityInherit+0x118>)
 8013414:	4413      	add	r3, r2
 8013416:	4299      	cmp	r1, r3
 8013418:	d14a      	bne.n	80134b0 <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801341a:	693b      	ldr	r3, [r7, #16]
 801341c:	3304      	adds	r3, #4
 801341e:	4618      	mov	r0, r3
 8013420:	f7fe f87e 	bl	8011520 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013424:	4b2d      	ldr	r3, [pc, #180]	; (80134dc <xTaskPriorityInherit+0x114>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801342a:	693b      	ldr	r3, [r7, #16]
 801342c:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 801342e:	693b      	ldr	r3, [r7, #16]
 8013430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013432:	4b2c      	ldr	r3, [pc, #176]	; (80134e4 <xTaskPriorityInherit+0x11c>)
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	429a      	cmp	r2, r3
 8013438:	d903      	bls.n	8013442 <xTaskPriorityInherit+0x7a>
 801343a:	693b      	ldr	r3, [r7, #16]
 801343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801343e:	4a29      	ldr	r2, [pc, #164]	; (80134e4 <xTaskPriorityInherit+0x11c>)
 8013440:	6013      	str	r3, [r2, #0]
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013446:	4926      	ldr	r1, [pc, #152]	; (80134e0 <xTaskPriorityInherit+0x118>)
 8013448:	4613      	mov	r3, r2
 801344a:	009b      	lsls	r3, r3, #2
 801344c:	4413      	add	r3, r2
 801344e:	009b      	lsls	r3, r3, #2
 8013450:	440b      	add	r3, r1
 8013452:	3304      	adds	r3, #4
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	60fb      	str	r3, [r7, #12]
 8013458:	693b      	ldr	r3, [r7, #16]
 801345a:	68fa      	ldr	r2, [r7, #12]
 801345c:	609a      	str	r2, [r3, #8]
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	689a      	ldr	r2, [r3, #8]
 8013462:	693b      	ldr	r3, [r7, #16]
 8013464:	60da      	str	r2, [r3, #12]
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	689b      	ldr	r3, [r3, #8]
 801346a:	693a      	ldr	r2, [r7, #16]
 801346c:	3204      	adds	r2, #4
 801346e:	605a      	str	r2, [r3, #4]
 8013470:	693b      	ldr	r3, [r7, #16]
 8013472:	1d1a      	adds	r2, r3, #4
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	609a      	str	r2, [r3, #8]
 8013478:	693b      	ldr	r3, [r7, #16]
 801347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801347c:	4613      	mov	r3, r2
 801347e:	009b      	lsls	r3, r3, #2
 8013480:	4413      	add	r3, r2
 8013482:	009b      	lsls	r3, r3, #2
 8013484:	4a16      	ldr	r2, [pc, #88]	; (80134e0 <xTaskPriorityInherit+0x118>)
 8013486:	441a      	add	r2, r3
 8013488:	693b      	ldr	r3, [r7, #16]
 801348a:	615a      	str	r2, [r3, #20]
 801348c:	693b      	ldr	r3, [r7, #16]
 801348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013490:	4913      	ldr	r1, [pc, #76]	; (80134e0 <xTaskPriorityInherit+0x118>)
 8013492:	4613      	mov	r3, r2
 8013494:	009b      	lsls	r3, r3, #2
 8013496:	4413      	add	r3, r2
 8013498:	009b      	lsls	r3, r3, #2
 801349a:	440b      	add	r3, r1
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	1c59      	adds	r1, r3, #1
 80134a0:	480f      	ldr	r0, [pc, #60]	; (80134e0 <xTaskPriorityInherit+0x118>)
 80134a2:	4613      	mov	r3, r2
 80134a4:	009b      	lsls	r3, r3, #2
 80134a6:	4413      	add	r3, r2
 80134a8:	009b      	lsls	r3, r3, #2
 80134aa:	4403      	add	r3, r0
 80134ac:	6019      	str	r1, [r3, #0]
 80134ae:	e004      	b.n	80134ba <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80134b0:	4b0a      	ldr	r3, [pc, #40]	; (80134dc <xTaskPriorityInherit+0x114>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80134ba:	2301      	movs	r3, #1
 80134bc:	617b      	str	r3, [r7, #20]
 80134be:	e008      	b.n	80134d2 <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80134c0:	693b      	ldr	r3, [r7, #16]
 80134c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80134c4:	4b05      	ldr	r3, [pc, #20]	; (80134dc <xTaskPriorityInherit+0x114>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134ca:	429a      	cmp	r2, r3
 80134cc:	d201      	bcs.n	80134d2 <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80134ce:	2301      	movs	r3, #1
 80134d0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80134d2:	697b      	ldr	r3, [r7, #20]
    }
 80134d4:	4618      	mov	r0, r3
 80134d6:	3718      	adds	r7, #24
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}
 80134dc:	200073ec 	.word	0x200073ec
 80134e0:	200073f0 	.word	0x200073f0
 80134e4:	200078c8 	.word	0x200078c8

080134e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b086      	sub	sp, #24
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80134f4:	2300      	movs	r3, #0
 80134f6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d06e      	beq.n	80135dc <xTaskPriorityDisinherit+0xf4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80134fe:	4b3a      	ldr	r3, [pc, #232]	; (80135e8 <xTaskPriorityDisinherit+0x100>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	693a      	ldr	r2, [r7, #16]
 8013504:	429a      	cmp	r2, r3
 8013506:	d002      	beq.n	801350e <xTaskPriorityDisinherit+0x26>
 8013508:	f000 fdbe 	bl	8014088 <ulSetInterruptMask>
 801350c:	e7fe      	b.n	801350c <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013512:	2b00      	cmp	r3, #0
 8013514:	d102      	bne.n	801351c <xTaskPriorityDisinherit+0x34>
 8013516:	f000 fdb7 	bl	8014088 <ulSetInterruptMask>
 801351a:	e7fe      	b.n	801351a <xTaskPriorityDisinherit+0x32>
            ( pxTCB->uxMutexesHeld )--;
 801351c:	693b      	ldr	r3, [r7, #16]
 801351e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013520:	1e5a      	subs	r2, r3, #1
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013526:	693b      	ldr	r3, [r7, #16]
 8013528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801352e:	429a      	cmp	r2, r3
 8013530:	d054      	beq.n	80135dc <xTaskPriorityDisinherit+0xf4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013532:	693b      	ldr	r3, [r7, #16]
 8013534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013536:	2b00      	cmp	r3, #0
 8013538:	d150      	bne.n	80135dc <xTaskPriorityDisinherit+0xf4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801353a:	693b      	ldr	r3, [r7, #16]
 801353c:	3304      	adds	r3, #4
 801353e:	4618      	mov	r0, r3
 8013540:	f7fd ffee 	bl	8011520 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013544:	693b      	ldr	r3, [r7, #16]
 8013546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013548:	693b      	ldr	r3, [r7, #16]
 801354a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801354c:	693b      	ldr	r3, [r7, #16]
 801354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013550:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801355c:	4b23      	ldr	r3, [pc, #140]	; (80135ec <xTaskPriorityDisinherit+0x104>)
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	429a      	cmp	r2, r3
 8013562:	d903      	bls.n	801356c <xTaskPriorityDisinherit+0x84>
 8013564:	693b      	ldr	r3, [r7, #16]
 8013566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013568:	4a20      	ldr	r2, [pc, #128]	; (80135ec <xTaskPriorityDisinherit+0x104>)
 801356a:	6013      	str	r3, [r2, #0]
 801356c:	693b      	ldr	r3, [r7, #16]
 801356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013570:	491f      	ldr	r1, [pc, #124]	; (80135f0 <xTaskPriorityDisinherit+0x108>)
 8013572:	4613      	mov	r3, r2
 8013574:	009b      	lsls	r3, r3, #2
 8013576:	4413      	add	r3, r2
 8013578:	009b      	lsls	r3, r3, #2
 801357a:	440b      	add	r3, r1
 801357c:	3304      	adds	r3, #4
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	60fb      	str	r3, [r7, #12]
 8013582:	693b      	ldr	r3, [r7, #16]
 8013584:	68fa      	ldr	r2, [r7, #12]
 8013586:	609a      	str	r2, [r3, #8]
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	689a      	ldr	r2, [r3, #8]
 801358c:	693b      	ldr	r3, [r7, #16]
 801358e:	60da      	str	r2, [r3, #12]
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	689b      	ldr	r3, [r3, #8]
 8013594:	693a      	ldr	r2, [r7, #16]
 8013596:	3204      	adds	r2, #4
 8013598:	605a      	str	r2, [r3, #4]
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	1d1a      	adds	r2, r3, #4
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	609a      	str	r2, [r3, #8]
 80135a2:	693b      	ldr	r3, [r7, #16]
 80135a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135a6:	4613      	mov	r3, r2
 80135a8:	009b      	lsls	r3, r3, #2
 80135aa:	4413      	add	r3, r2
 80135ac:	009b      	lsls	r3, r3, #2
 80135ae:	4a10      	ldr	r2, [pc, #64]	; (80135f0 <xTaskPriorityDisinherit+0x108>)
 80135b0:	441a      	add	r2, r3
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	615a      	str	r2, [r3, #20]
 80135b6:	693b      	ldr	r3, [r7, #16]
 80135b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135ba:	490d      	ldr	r1, [pc, #52]	; (80135f0 <xTaskPriorityDisinherit+0x108>)
 80135bc:	4613      	mov	r3, r2
 80135be:	009b      	lsls	r3, r3, #2
 80135c0:	4413      	add	r3, r2
 80135c2:	009b      	lsls	r3, r3, #2
 80135c4:	440b      	add	r3, r1
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	1c59      	adds	r1, r3, #1
 80135ca:	4809      	ldr	r0, [pc, #36]	; (80135f0 <xTaskPriorityDisinherit+0x108>)
 80135cc:	4613      	mov	r3, r2
 80135ce:	009b      	lsls	r3, r3, #2
 80135d0:	4413      	add	r3, r2
 80135d2:	009b      	lsls	r3, r3, #2
 80135d4:	4403      	add	r3, r0
 80135d6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80135d8:	2301      	movs	r3, #1
 80135da:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80135dc:	697b      	ldr	r3, [r7, #20]
    }
 80135de:	4618      	mov	r0, r3
 80135e0:	3718      	adds	r7, #24
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}
 80135e6:	bf00      	nop
 80135e8:	200073ec 	.word	0x200073ec
 80135ec:	200078c8 	.word	0x200078c8
 80135f0:	200073f0 	.word	0x200073f0

080135f4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b088      	sub	sp, #32
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013602:	2301      	movs	r3, #1
 8013604:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	2b00      	cmp	r3, #0
 801360a:	f000 8083 	beq.w	8013714 <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 801360e:	69bb      	ldr	r3, [r7, #24]
 8013610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013612:	2b00      	cmp	r3, #0
 8013614:	d102      	bne.n	801361c <vTaskPriorityDisinheritAfterTimeout+0x28>
 8013616:	f000 fd37 	bl	8014088 <ulSetInterruptMask>
 801361a:	e7fe      	b.n	801361a <vTaskPriorityDisinheritAfterTimeout+0x26>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801361c:	69bb      	ldr	r3, [r7, #24]
 801361e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013620:	683a      	ldr	r2, [r7, #0]
 8013622:	429a      	cmp	r2, r3
 8013624:	d902      	bls.n	801362c <vTaskPriorityDisinheritAfterTimeout+0x38>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013626:	683b      	ldr	r3, [r7, #0]
 8013628:	61fb      	str	r3, [r7, #28]
 801362a:	e002      	b.n	8013632 <vTaskPriorityDisinheritAfterTimeout+0x3e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 801362c:	69bb      	ldr	r3, [r7, #24]
 801362e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013630:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8013632:	69bb      	ldr	r3, [r7, #24]
 8013634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013636:	69fa      	ldr	r2, [r7, #28]
 8013638:	429a      	cmp	r2, r3
 801363a:	d06b      	beq.n	8013714 <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801363c:	69bb      	ldr	r3, [r7, #24]
 801363e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013640:	697a      	ldr	r2, [r7, #20]
 8013642:	429a      	cmp	r2, r3
 8013644:	d166      	bne.n	8013714 <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8013646:	4b35      	ldr	r3, [pc, #212]	; (801371c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	69ba      	ldr	r2, [r7, #24]
 801364c:	429a      	cmp	r2, r3
 801364e:	d102      	bne.n	8013656 <vTaskPriorityDisinheritAfterTimeout+0x62>
 8013650:	f000 fd1a 	bl	8014088 <ulSetInterruptMask>
 8013654:	e7fe      	b.n	8013654 <vTaskPriorityDisinheritAfterTimeout+0x60>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013656:	69bb      	ldr	r3, [r7, #24]
 8013658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801365a:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 801365c:	69bb      	ldr	r3, [r7, #24]
 801365e:	69fa      	ldr	r2, [r7, #28]
 8013660:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013662:	69bb      	ldr	r3, [r7, #24]
 8013664:	699b      	ldr	r3, [r3, #24]
 8013666:	2b00      	cmp	r3, #0
 8013668:	db04      	blt.n	8013674 <vTaskPriorityDisinheritAfterTimeout+0x80>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801366a:	69fb      	ldr	r3, [r7, #28]
 801366c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013670:	69bb      	ldr	r3, [r7, #24]
 8013672:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013674:	69bb      	ldr	r3, [r7, #24]
 8013676:	6959      	ldr	r1, [r3, #20]
 8013678:	693a      	ldr	r2, [r7, #16]
 801367a:	4613      	mov	r3, r2
 801367c:	009b      	lsls	r3, r3, #2
 801367e:	4413      	add	r3, r2
 8013680:	009b      	lsls	r3, r3, #2
 8013682:	4a27      	ldr	r2, [pc, #156]	; (8013720 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013684:	4413      	add	r3, r2
 8013686:	4299      	cmp	r1, r3
 8013688:	d144      	bne.n	8013714 <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801368a:	69bb      	ldr	r3, [r7, #24]
 801368c:	3304      	adds	r3, #4
 801368e:	4618      	mov	r0, r3
 8013690:	f7fd ff46 	bl	8011520 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8013694:	69bb      	ldr	r3, [r7, #24]
 8013696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013698:	4b22      	ldr	r3, [pc, #136]	; (8013724 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	429a      	cmp	r2, r3
 801369e:	d903      	bls.n	80136a8 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 80136a0:	69bb      	ldr	r3, [r7, #24]
 80136a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136a4:	4a1f      	ldr	r2, [pc, #124]	; (8013724 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80136a6:	6013      	str	r3, [r2, #0]
 80136a8:	69bb      	ldr	r3, [r7, #24]
 80136aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136ac:	491c      	ldr	r1, [pc, #112]	; (8013720 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80136ae:	4613      	mov	r3, r2
 80136b0:	009b      	lsls	r3, r3, #2
 80136b2:	4413      	add	r3, r2
 80136b4:	009b      	lsls	r3, r3, #2
 80136b6:	440b      	add	r3, r1
 80136b8:	3304      	adds	r3, #4
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	60fb      	str	r3, [r7, #12]
 80136be:	69bb      	ldr	r3, [r7, #24]
 80136c0:	68fa      	ldr	r2, [r7, #12]
 80136c2:	609a      	str	r2, [r3, #8]
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	689a      	ldr	r2, [r3, #8]
 80136c8:	69bb      	ldr	r3, [r7, #24]
 80136ca:	60da      	str	r2, [r3, #12]
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	689b      	ldr	r3, [r3, #8]
 80136d0:	69ba      	ldr	r2, [r7, #24]
 80136d2:	3204      	adds	r2, #4
 80136d4:	605a      	str	r2, [r3, #4]
 80136d6:	69bb      	ldr	r3, [r7, #24]
 80136d8:	1d1a      	adds	r2, r3, #4
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	609a      	str	r2, [r3, #8]
 80136de:	69bb      	ldr	r3, [r7, #24]
 80136e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136e2:	4613      	mov	r3, r2
 80136e4:	009b      	lsls	r3, r3, #2
 80136e6:	4413      	add	r3, r2
 80136e8:	009b      	lsls	r3, r3, #2
 80136ea:	4a0d      	ldr	r2, [pc, #52]	; (8013720 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80136ec:	441a      	add	r2, r3
 80136ee:	69bb      	ldr	r3, [r7, #24]
 80136f0:	615a      	str	r2, [r3, #20]
 80136f2:	69bb      	ldr	r3, [r7, #24]
 80136f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136f6:	490a      	ldr	r1, [pc, #40]	; (8013720 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80136f8:	4613      	mov	r3, r2
 80136fa:	009b      	lsls	r3, r3, #2
 80136fc:	4413      	add	r3, r2
 80136fe:	009b      	lsls	r3, r3, #2
 8013700:	440b      	add	r3, r1
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	1c59      	adds	r1, r3, #1
 8013706:	4806      	ldr	r0, [pc, #24]	; (8013720 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013708:	4613      	mov	r3, r2
 801370a:	009b      	lsls	r3, r3, #2
 801370c:	4413      	add	r3, r2
 801370e:	009b      	lsls	r3, r3, #2
 8013710:	4403      	add	r3, r0
 8013712:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8013714:	bf00      	nop
 8013716:	3720      	adds	r7, #32
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}
 801371c:	200073ec 	.word	0x200073ec
 8013720:	200073f0 	.word	0x200073f0
 8013724:	200078c8 	.word	0x200078c8

08013728 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8013728:	b480      	push	{r7}
 801372a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 801372c:	4b07      	ldr	r3, [pc, #28]	; (801374c <pvTaskIncrementMutexHeldCount+0x24>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d004      	beq.n	801373e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8013734:	4b05      	ldr	r3, [pc, #20]	; (801374c <pvTaskIncrementMutexHeldCount+0x24>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801373a:	3201      	adds	r2, #1
 801373c:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 801373e:	4b03      	ldr	r3, [pc, #12]	; (801374c <pvTaskIncrementMutexHeldCount+0x24>)
 8013740:	681b      	ldr	r3, [r3, #0]
    }
 8013742:	4618      	mov	r0, r3
 8013744:	46bd      	mov	sp, r7
 8013746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374a:	4770      	bx	lr
 801374c:	200073ec 	.word	0x200073ec

08013750 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b086      	sub	sp, #24
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 801375a:	4b2e      	ldr	r3, [pc, #184]	; (8013814 <prvAddCurrentTaskToDelayedList+0xc4>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013760:	4b2d      	ldr	r3, [pc, #180]	; (8013818 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	3304      	adds	r3, #4
 8013766:	4618      	mov	r0, r3
 8013768:	f7fd feda 	bl	8011520 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013772:	d124      	bne.n	80137be <prvAddCurrentTaskToDelayedList+0x6e>
 8013774:	683b      	ldr	r3, [r7, #0]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d021      	beq.n	80137be <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801377a:	4b28      	ldr	r3, [pc, #160]	; (801381c <prvAddCurrentTaskToDelayedList+0xcc>)
 801377c:	685b      	ldr	r3, [r3, #4]
 801377e:	613b      	str	r3, [r7, #16]
 8013780:	4b25      	ldr	r3, [pc, #148]	; (8013818 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	693a      	ldr	r2, [r7, #16]
 8013786:	609a      	str	r2, [r3, #8]
 8013788:	4b23      	ldr	r3, [pc, #140]	; (8013818 <prvAddCurrentTaskToDelayedList+0xc8>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	693a      	ldr	r2, [r7, #16]
 801378e:	6892      	ldr	r2, [r2, #8]
 8013790:	60da      	str	r2, [r3, #12]
 8013792:	4b21      	ldr	r3, [pc, #132]	; (8013818 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013794:	681a      	ldr	r2, [r3, #0]
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	689b      	ldr	r3, [r3, #8]
 801379a:	3204      	adds	r2, #4
 801379c:	605a      	str	r2, [r3, #4]
 801379e:	4b1e      	ldr	r3, [pc, #120]	; (8013818 <prvAddCurrentTaskToDelayedList+0xc8>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	1d1a      	adds	r2, r3, #4
 80137a4:	693b      	ldr	r3, [r7, #16]
 80137a6:	609a      	str	r2, [r3, #8]
 80137a8:	4b1b      	ldr	r3, [pc, #108]	; (8013818 <prvAddCurrentTaskToDelayedList+0xc8>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	4a1b      	ldr	r2, [pc, #108]	; (801381c <prvAddCurrentTaskToDelayedList+0xcc>)
 80137ae:	615a      	str	r2, [r3, #20]
 80137b0:	4b1a      	ldr	r3, [pc, #104]	; (801381c <prvAddCurrentTaskToDelayedList+0xcc>)
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	3301      	adds	r3, #1
 80137b6:	4a19      	ldr	r2, [pc, #100]	; (801381c <prvAddCurrentTaskToDelayedList+0xcc>)
 80137b8:	6013      	str	r3, [r2, #0]
 80137ba:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80137bc:	e026      	b.n	801380c <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80137be:	697a      	ldr	r2, [r7, #20]
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	4413      	add	r3, r2
 80137c4:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80137c6:	4b14      	ldr	r3, [pc, #80]	; (8013818 <prvAddCurrentTaskToDelayedList+0xc8>)
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	68fa      	ldr	r2, [r7, #12]
 80137cc:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80137ce:	68fa      	ldr	r2, [r7, #12]
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d209      	bcs.n	80137ea <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80137d6:	4b12      	ldr	r3, [pc, #72]	; (8013820 <prvAddCurrentTaskToDelayedList+0xd0>)
 80137d8:	681a      	ldr	r2, [r3, #0]
 80137da:	4b0f      	ldr	r3, [pc, #60]	; (8013818 <prvAddCurrentTaskToDelayedList+0xc8>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	3304      	adds	r3, #4
 80137e0:	4619      	mov	r1, r3
 80137e2:	4610      	mov	r0, r2
 80137e4:	f7fd fe63 	bl	80114ae <vListInsert>
}
 80137e8:	e010      	b.n	801380c <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80137ea:	4b0e      	ldr	r3, [pc, #56]	; (8013824 <prvAddCurrentTaskToDelayedList+0xd4>)
 80137ec:	681a      	ldr	r2, [r3, #0]
 80137ee:	4b0a      	ldr	r3, [pc, #40]	; (8013818 <prvAddCurrentTaskToDelayedList+0xc8>)
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	3304      	adds	r3, #4
 80137f4:	4619      	mov	r1, r3
 80137f6:	4610      	mov	r0, r2
 80137f8:	f7fd fe59 	bl	80114ae <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80137fc:	4b0a      	ldr	r3, [pc, #40]	; (8013828 <prvAddCurrentTaskToDelayedList+0xd8>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	68fa      	ldr	r2, [r7, #12]
 8013802:	429a      	cmp	r2, r3
 8013804:	d202      	bcs.n	801380c <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8013806:	4a08      	ldr	r2, [pc, #32]	; (8013828 <prvAddCurrentTaskToDelayedList+0xd8>)
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	6013      	str	r3, [r2, #0]
}
 801380c:	bf00      	nop
 801380e:	3718      	adds	r7, #24
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}
 8013814:	200078c4 	.word	0x200078c4
 8013818:	200073ec 	.word	0x200073ec
 801381c:	200078ac 	.word	0x200078ac
 8013820:	2000787c 	.word	0x2000787c
 8013824:	20007878 	.word	0x20007878
 8013828:	200078e0 	.word	0x200078e0

0801382c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 801382c:	b580      	push	{r7, lr}
 801382e:	b088      	sub	sp, #32
 8013830:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8013832:	2300      	movs	r3, #0
 8013834:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8013836:	f000 fa59 	bl	8013cec <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 801383a:	4b18      	ldr	r3, [pc, #96]	; (801389c <xTimerCreateTimerTask+0x70>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d020      	beq.n	8013884 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8013842:	2300      	movs	r3, #0
 8013844:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 8013846:	2300      	movs	r3, #0
 8013848:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801384a:	463a      	mov	r2, r7
 801384c:	1d39      	adds	r1, r7, #4
 801384e:	f107 0308 	add.w	r3, r7, #8
 8013852:	4618      	mov	r0, r3
 8013854:	f7fd fde4 	bl	8011420 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8013858:	6839      	ldr	r1, [r7, #0]
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	68ba      	ldr	r2, [r7, #8]
 801385e:	9202      	str	r2, [sp, #8]
 8013860:	9301      	str	r3, [sp, #4]
 8013862:	2318      	movs	r3, #24
 8013864:	9300      	str	r3, [sp, #0]
 8013866:	2300      	movs	r3, #0
 8013868:	460a      	mov	r2, r1
 801386a:	490d      	ldr	r1, [pc, #52]	; (80138a0 <xTimerCreateTimerTask+0x74>)
 801386c:	480d      	ldr	r0, [pc, #52]	; (80138a4 <xTimerCreateTimerTask+0x78>)
 801386e:	f7fe fe6d 	bl	801254c <xTaskCreateStatic>
 8013872:	4603      	mov	r3, r0
 8013874:	4a0c      	ldr	r2, [pc, #48]	; (80138a8 <xTimerCreateTimerTask+0x7c>)
 8013876:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8013878:	4b0b      	ldr	r3, [pc, #44]	; (80138a8 <xTimerCreateTimerTask+0x7c>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d001      	beq.n	8013884 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8013880:	2301      	movs	r3, #1
 8013882:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d102      	bne.n	8013890 <xTimerCreateTimerTask+0x64>
 801388a:	f000 fbfd 	bl	8014088 <ulSetInterruptMask>
 801388e:	e7fe      	b.n	801388e <xTimerCreateTimerTask+0x62>
        return xReturn;
 8013890:	68fb      	ldr	r3, [r7, #12]
    }
 8013892:	4618      	mov	r0, r3
 8013894:	3710      	adds	r7, #16
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}
 801389a:	bf00      	nop
 801389c:	2000791c 	.word	0x2000791c
 80138a0:	080238c4 	.word	0x080238c4
 80138a4:	08013951 	.word	0x08013951
 80138a8:	20007920 	.word	0x20007920

080138ac <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b084      	sub	sp, #16
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	60f8      	str	r0, [r7, #12]
 80138b4:	60b9      	str	r1, [r7, #8]
 80138b6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80138b8:	e008      	b.n	80138cc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	699b      	ldr	r3, [r3, #24]
 80138be:	68ba      	ldr	r2, [r7, #8]
 80138c0:	4413      	add	r3, r2
 80138c2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	6a1b      	ldr	r3, [r3, #32]
 80138c8:	68f8      	ldr	r0, [r7, #12]
 80138ca:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	699a      	ldr	r2, [r3, #24]
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	18d1      	adds	r1, r2, r3
 80138d4:	68bb      	ldr	r3, [r7, #8]
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	68f8      	ldr	r0, [r7, #12]
 80138da:	f000 f8d5 	bl	8013a88 <prvInsertTimerInActiveList>
 80138de:	4603      	mov	r3, r0
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d1ea      	bne.n	80138ba <prvReloadTimer+0xe>
        }
    }
 80138e4:	bf00      	nop
 80138e6:	bf00      	nop
 80138e8:	3710      	adds	r7, #16
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bd80      	pop	{r7, pc}
	...

080138f0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b084      	sub	sp, #16
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
 80138f8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80138fa:	4b14      	ldr	r3, [pc, #80]	; (801394c <prvProcessExpiredTimer+0x5c>)
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	68db      	ldr	r3, [r3, #12]
 8013900:	68db      	ldr	r3, [r3, #12]
 8013902:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	3304      	adds	r3, #4
 8013908:	4618      	mov	r0, r3
 801390a:	f7fd fe09 	bl	8011520 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013914:	f003 0304 	and.w	r3, r3, #4
 8013918:	2b00      	cmp	r3, #0
 801391a:	d005      	beq.n	8013928 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 801391c:	683a      	ldr	r2, [r7, #0]
 801391e:	6879      	ldr	r1, [r7, #4]
 8013920:	68f8      	ldr	r0, [r7, #12]
 8013922:	f7ff ffc3 	bl	80138ac <prvReloadTimer>
 8013926:	e008      	b.n	801393a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801392e:	f023 0301 	bic.w	r3, r3, #1
 8013932:	b2da      	uxtb	r2, r3
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	6a1b      	ldr	r3, [r3, #32]
 801393e:	68f8      	ldr	r0, [r7, #12]
 8013940:	4798      	blx	r3
    }
 8013942:	bf00      	nop
 8013944:	3710      	adds	r7, #16
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}
 801394a:	bf00      	nop
 801394c:	20007914 	.word	0x20007914

08013950 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8013950:	b580      	push	{r7, lr}
 8013952:	b084      	sub	sp, #16
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013958:	f107 0308 	add.w	r3, r7, #8
 801395c:	4618      	mov	r0, r3
 801395e:	f000 f84f 	bl	8013a00 <prvGetNextExpireTime>
 8013962:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	4619      	mov	r1, r3
 8013968:	68f8      	ldr	r0, [r7, #12]
 801396a:	f000 f803 	bl	8013974 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 801396e:	f000 f8cd 	bl	8013b0c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013972:	e7f1      	b.n	8013958 <prvTimerTask+0x8>

08013974 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8013974:	b580      	push	{r7, lr}
 8013976:	b084      	sub	sp, #16
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 801397e:	f7ff f807 	bl	8012990 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013982:	f107 0308 	add.w	r3, r7, #8
 8013986:	4618      	mov	r0, r3
 8013988:	f000 f85e 	bl	8013a48 <prvSampleTimeNow>
 801398c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 801398e:	68bb      	ldr	r3, [r7, #8]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d12a      	bne.n	80139ea <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013994:	683b      	ldr	r3, [r7, #0]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d10a      	bne.n	80139b0 <prvProcessTimerOrBlockTask+0x3c>
 801399a:	687a      	ldr	r2, [r7, #4]
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	429a      	cmp	r2, r3
 80139a0:	d806      	bhi.n	80139b0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80139a2:	f7ff f803 	bl	80129ac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80139a6:	68f9      	ldr	r1, [r7, #12]
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f7ff ffa1 	bl	80138f0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80139ae:	e01e      	b.n	80139ee <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 80139b0:	683b      	ldr	r3, [r7, #0]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d008      	beq.n	80139c8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80139b6:	4b10      	ldr	r3, [pc, #64]	; (80139f8 <prvProcessTimerOrBlockTask+0x84>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d101      	bne.n	80139c4 <prvProcessTimerOrBlockTask+0x50>
 80139c0:	2301      	movs	r3, #1
 80139c2:	e000      	b.n	80139c6 <prvProcessTimerOrBlockTask+0x52>
 80139c4:	2300      	movs	r3, #0
 80139c6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80139c8:	4b0c      	ldr	r3, [pc, #48]	; (80139fc <prvProcessTimerOrBlockTask+0x88>)
 80139ca:	6818      	ldr	r0, [r3, #0]
 80139cc:	687a      	ldr	r2, [r7, #4]
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	1ad3      	subs	r3, r2, r3
 80139d2:	683a      	ldr	r2, [r7, #0]
 80139d4:	4619      	mov	r1, r3
 80139d6:	f7fe fd85 	bl	80124e4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80139da:	f7fe ffe7 	bl	80129ac <xTaskResumeAll>
 80139de:	4603      	mov	r3, r0
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d104      	bne.n	80139ee <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 80139e4:	f000 fa00 	bl	8013de8 <vPortYield>
    }
 80139e8:	e001      	b.n	80139ee <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 80139ea:	f7fe ffdf 	bl	80129ac <xTaskResumeAll>
    }
 80139ee:	bf00      	nop
 80139f0:	3710      	adds	r7, #16
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
 80139f6:	bf00      	nop
 80139f8:	20007918 	.word	0x20007918
 80139fc:	2000791c 	.word	0x2000791c

08013a00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8013a00:	b480      	push	{r7}
 8013a02:	b085      	sub	sp, #20
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013a08:	4b0e      	ldr	r3, [pc, #56]	; (8013a44 <prvGetNextExpireTime+0x44>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d101      	bne.n	8013a16 <prvGetNextExpireTime+0x16>
 8013a12:	2201      	movs	r2, #1
 8013a14:	e000      	b.n	8013a18 <prvGetNextExpireTime+0x18>
 8013a16:	2200      	movs	r2, #0
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d105      	bne.n	8013a30 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013a24:	4b07      	ldr	r3, [pc, #28]	; (8013a44 <prvGetNextExpireTime+0x44>)
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	68db      	ldr	r3, [r3, #12]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	60fb      	str	r3, [r7, #12]
 8013a2e:	e001      	b.n	8013a34 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8013a30:	2300      	movs	r3, #0
 8013a32:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8013a34:	68fb      	ldr	r3, [r7, #12]
    }
 8013a36:	4618      	mov	r0, r3
 8013a38:	3714      	adds	r7, #20
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a40:	4770      	bx	lr
 8013a42:	bf00      	nop
 8013a44:	20007914 	.word	0x20007914

08013a48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b084      	sub	sp, #16
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8013a50:	f7ff f898 	bl	8012b84 <xTaskGetTickCount>
 8013a54:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8013a56:	4b0b      	ldr	r3, [pc, #44]	; (8013a84 <prvSampleTimeNow+0x3c>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	68fa      	ldr	r2, [r7, #12]
 8013a5c:	429a      	cmp	r2, r3
 8013a5e:	d205      	bcs.n	8013a6c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8013a60:	f000 f91e 	bl	8013ca0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2201      	movs	r2, #1
 8013a68:	601a      	str	r2, [r3, #0]
 8013a6a:	e002      	b.n	8013a72 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2200      	movs	r2, #0
 8013a70:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8013a72:	4a04      	ldr	r2, [pc, #16]	; (8013a84 <prvSampleTimeNow+0x3c>)
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8013a78:	68fb      	ldr	r3, [r7, #12]
    }
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3710      	adds	r7, #16
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}
 8013a82:	bf00      	nop
 8013a84:	20007924 	.word	0x20007924

08013a88 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b086      	sub	sp, #24
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	60f8      	str	r0, [r7, #12]
 8013a90:	60b9      	str	r1, [r7, #8]
 8013a92:	607a      	str	r2, [r7, #4]
 8013a94:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8013a96:	2300      	movs	r3, #0
 8013a98:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	68ba      	ldr	r2, [r7, #8]
 8013a9e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	68fa      	ldr	r2, [r7, #12]
 8013aa4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8013aa6:	68ba      	ldr	r2, [r7, #8]
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	429a      	cmp	r2, r3
 8013aac:	d812      	bhi.n	8013ad4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013aae:	687a      	ldr	r2, [r7, #4]
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	1ad2      	subs	r2, r2, r3
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	699b      	ldr	r3, [r3, #24]
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d302      	bcc.n	8013ac2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8013abc:	2301      	movs	r3, #1
 8013abe:	617b      	str	r3, [r7, #20]
 8013ac0:	e01b      	b.n	8013afa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013ac2:	4b10      	ldr	r3, [pc, #64]	; (8013b04 <prvInsertTimerInActiveList+0x7c>)
 8013ac4:	681a      	ldr	r2, [r3, #0]
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	3304      	adds	r3, #4
 8013aca:	4619      	mov	r1, r3
 8013acc:	4610      	mov	r0, r2
 8013ace:	f7fd fcee 	bl	80114ae <vListInsert>
 8013ad2:	e012      	b.n	8013afa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013ad4:	687a      	ldr	r2, [r7, #4]
 8013ad6:	683b      	ldr	r3, [r7, #0]
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	d206      	bcs.n	8013aea <prvInsertTimerInActiveList+0x62>
 8013adc:	68ba      	ldr	r2, [r7, #8]
 8013ade:	683b      	ldr	r3, [r7, #0]
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	d302      	bcc.n	8013aea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	617b      	str	r3, [r7, #20]
 8013ae8:	e007      	b.n	8013afa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013aea:	4b07      	ldr	r3, [pc, #28]	; (8013b08 <prvInsertTimerInActiveList+0x80>)
 8013aec:	681a      	ldr	r2, [r3, #0]
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	3304      	adds	r3, #4
 8013af2:	4619      	mov	r1, r3
 8013af4:	4610      	mov	r0, r2
 8013af6:	f7fd fcda 	bl	80114ae <vListInsert>
            }
        }

        return xProcessTimerNow;
 8013afa:	697b      	ldr	r3, [r7, #20]
    }
 8013afc:	4618      	mov	r0, r3
 8013afe:	3718      	adds	r7, #24
 8013b00:	46bd      	mov	sp, r7
 8013b02:	bd80      	pop	{r7, pc}
 8013b04:	20007918 	.word	0x20007918
 8013b08:	20007914 	.word	0x20007914

08013b0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b088      	sub	sp, #32
 8013b10:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013b12:	e0b2      	b.n	8013c7a <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	da10      	bge.n	8013b3c <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013b1a:	1d3b      	adds	r3, r7, #4
 8013b1c:	3304      	adds	r3, #4
 8013b1e:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8013b20:	69fb      	ldr	r3, [r7, #28]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d102      	bne.n	8013b2c <prvProcessReceivedCommands+0x20>
 8013b26:	f000 faaf 	bl	8014088 <ulSetInterruptMask>
 8013b2a:	e7fe      	b.n	8013b2a <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013b2c:	69fb      	ldr	r3, [r7, #28]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	69fa      	ldr	r2, [r7, #28]
 8013b32:	6850      	ldr	r0, [r2, #4]
 8013b34:	69fa      	ldr	r2, [r7, #28]
 8013b36:	6892      	ldr	r2, [r2, #8]
 8013b38:	4611      	mov	r1, r2
 8013b3a:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	f2c0 809b 	blt.w	8013c7a <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013b48:	69bb      	ldr	r3, [r7, #24]
 8013b4a:	695b      	ldr	r3, [r3, #20]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d004      	beq.n	8013b5a <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013b50:	69bb      	ldr	r3, [r7, #24]
 8013b52:	3304      	adds	r3, #4
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7fd fce3 	bl	8011520 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013b5a:	463b      	mov	r3, r7
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7ff ff73 	bl	8013a48 <prvSampleTimeNow>
 8013b62:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	3b01      	subs	r3, #1
 8013b68:	2b08      	cmp	r3, #8
 8013b6a:	f200 8085 	bhi.w	8013c78 <prvProcessReceivedCommands+0x16c>
 8013b6e:	a201      	add	r2, pc, #4	; (adr r2, 8013b74 <prvProcessReceivedCommands+0x68>)
 8013b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b74:	08013b99 	.word	0x08013b99
 8013b78:	08013b99 	.word	0x08013b99
 8013b7c:	08013c01 	.word	0x08013c01
 8013b80:	08013c15 	.word	0x08013c15
 8013b84:	08013c4f 	.word	0x08013c4f
 8013b88:	08013b99 	.word	0x08013b99
 8013b8c:	08013b99 	.word	0x08013b99
 8013b90:	08013c01 	.word	0x08013c01
 8013b94:	08013c15 	.word	0x08013c15
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013b98:	69bb      	ldr	r3, [r7, #24]
 8013b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b9e:	f043 0301 	orr.w	r3, r3, #1
 8013ba2:	b2da      	uxtb	r2, r3
 8013ba4:	69bb      	ldr	r3, [r7, #24]
 8013ba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013baa:	68ba      	ldr	r2, [r7, #8]
 8013bac:	69bb      	ldr	r3, [r7, #24]
 8013bae:	699b      	ldr	r3, [r3, #24]
 8013bb0:	18d1      	adds	r1, r2, r3
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	697a      	ldr	r2, [r7, #20]
 8013bb6:	69b8      	ldr	r0, [r7, #24]
 8013bb8:	f7ff ff66 	bl	8013a88 <prvInsertTimerInActiveList>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d05b      	beq.n	8013c7a <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013bc2:	69bb      	ldr	r3, [r7, #24]
 8013bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013bc8:	f003 0304 	and.w	r3, r3, #4
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d009      	beq.n	8013be4 <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8013bd0:	68ba      	ldr	r2, [r7, #8]
 8013bd2:	69bb      	ldr	r3, [r7, #24]
 8013bd4:	699b      	ldr	r3, [r3, #24]
 8013bd6:	4413      	add	r3, r2
 8013bd8:	697a      	ldr	r2, [r7, #20]
 8013bda:	4619      	mov	r1, r3
 8013bdc:	69b8      	ldr	r0, [r7, #24]
 8013bde:	f7ff fe65 	bl	80138ac <prvReloadTimer>
 8013be2:	e008      	b.n	8013bf6 <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8013be4:	69bb      	ldr	r3, [r7, #24]
 8013be6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013bea:	f023 0301 	bic.w	r3, r3, #1
 8013bee:	b2da      	uxtb	r2, r3
 8013bf0:	69bb      	ldr	r3, [r7, #24]
 8013bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013bf6:	69bb      	ldr	r3, [r7, #24]
 8013bf8:	6a1b      	ldr	r3, [r3, #32]
 8013bfa:	69b8      	ldr	r0, [r7, #24]
 8013bfc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8013bfe:	e03c      	b.n	8013c7a <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8013c00:	69bb      	ldr	r3, [r7, #24]
 8013c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c06:	f023 0301 	bic.w	r3, r3, #1
 8013c0a:	b2da      	uxtb	r2, r3
 8013c0c:	69bb      	ldr	r3, [r7, #24]
 8013c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8013c12:	e032      	b.n	8013c7a <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013c14:	69bb      	ldr	r3, [r7, #24]
 8013c16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c1a:	f043 0301 	orr.w	r3, r3, #1
 8013c1e:	b2da      	uxtb	r2, r3
 8013c20:	69bb      	ldr	r3, [r7, #24]
 8013c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013c26:	68ba      	ldr	r2, [r7, #8]
 8013c28:	69bb      	ldr	r3, [r7, #24]
 8013c2a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013c2c:	69bb      	ldr	r3, [r7, #24]
 8013c2e:	699b      	ldr	r3, [r3, #24]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d102      	bne.n	8013c3a <prvProcessReceivedCommands+0x12e>
 8013c34:	f000 fa28 	bl	8014088 <ulSetInterruptMask>
 8013c38:	e7fe      	b.n	8013c38 <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013c3a:	69bb      	ldr	r3, [r7, #24]
 8013c3c:	699a      	ldr	r2, [r3, #24]
 8013c3e:	697b      	ldr	r3, [r7, #20]
 8013c40:	18d1      	adds	r1, r2, r3
 8013c42:	697b      	ldr	r3, [r7, #20]
 8013c44:	697a      	ldr	r2, [r7, #20]
 8013c46:	69b8      	ldr	r0, [r7, #24]
 8013c48:	f7ff ff1e 	bl	8013a88 <prvInsertTimerInActiveList>
                        break;
 8013c4c:	e015      	b.n	8013c7a <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013c4e:	69bb      	ldr	r3, [r7, #24]
 8013c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c54:	f003 0302 	and.w	r3, r3, #2
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d103      	bne.n	8013c64 <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 8013c5c:	69b8      	ldr	r0, [r7, #24]
 8013c5e:	f000 fb1d 	bl	801429c <vPortFree>
 8013c62:	e00a      	b.n	8013c7a <prvProcessReceivedCommands+0x16e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8013c64:	69bb      	ldr	r3, [r7, #24]
 8013c66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c6a:	f023 0301 	bic.w	r3, r3, #1
 8013c6e:	b2da      	uxtb	r2, r3
 8013c70:	69bb      	ldr	r3, [r7, #24]
 8013c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8013c76:	e000      	b.n	8013c7a <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8013c78:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013c7a:	4b08      	ldr	r3, [pc, #32]	; (8013c9c <prvProcessReceivedCommands+0x190>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	1d39      	adds	r1, r7, #4
 8013c80:	2200      	movs	r2, #0
 8013c82:	4618      	mov	r0, r3
 8013c84:	f7fe f852 	bl	8011d2c <xQueueReceive>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	f47f af42 	bne.w	8013b14 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8013c90:	bf00      	nop
 8013c92:	bf00      	nop
 8013c94:	3720      	adds	r7, #32
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bd80      	pop	{r7, pc}
 8013c9a:	bf00      	nop
 8013c9c:	2000791c 	.word	0x2000791c

08013ca0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013ca6:	e009      	b.n	8013cbc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013ca8:	4b0e      	ldr	r3, [pc, #56]	; (8013ce4 <prvSwitchTimerLists+0x44>)
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	68db      	ldr	r3, [r3, #12]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8013cb2:	f04f 31ff 	mov.w	r1, #4294967295
 8013cb6:	6838      	ldr	r0, [r7, #0]
 8013cb8:	f7ff fe1a 	bl	80138f0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013cbc:	4b09      	ldr	r3, [pc, #36]	; (8013ce4 <prvSwitchTimerLists+0x44>)
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d1f0      	bne.n	8013ca8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8013cc6:	4b07      	ldr	r3, [pc, #28]	; (8013ce4 <prvSwitchTimerLists+0x44>)
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8013ccc:	4b06      	ldr	r3, [pc, #24]	; (8013ce8 <prvSwitchTimerLists+0x48>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	4a04      	ldr	r2, [pc, #16]	; (8013ce4 <prvSwitchTimerLists+0x44>)
 8013cd2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8013cd4:	4a04      	ldr	r2, [pc, #16]	; (8013ce8 <prvSwitchTimerLists+0x48>)
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	6013      	str	r3, [r2, #0]
    }
 8013cda:	bf00      	nop
 8013cdc:	3708      	adds	r7, #8
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}
 8013ce2:	bf00      	nop
 8013ce4:	20007914 	.word	0x20007914
 8013ce8:	20007918 	.word	0x20007918

08013cec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b082      	sub	sp, #8
 8013cf0:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8013cf2:	f000 f88b 	bl	8013e0c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8013cf6:	4b15      	ldr	r3, [pc, #84]	; (8013d4c <prvCheckForValidListAndQueue+0x60>)
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d120      	bne.n	8013d40 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8013cfe:	4814      	ldr	r0, [pc, #80]	; (8013d50 <prvCheckForValidListAndQueue+0x64>)
 8013d00:	f7fd fba8 	bl	8011454 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8013d04:	4813      	ldr	r0, [pc, #76]	; (8013d54 <prvCheckForValidListAndQueue+0x68>)
 8013d06:	f7fd fba5 	bl	8011454 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8013d0a:	4b13      	ldr	r3, [pc, #76]	; (8013d58 <prvCheckForValidListAndQueue+0x6c>)
 8013d0c:	4a10      	ldr	r2, [pc, #64]	; (8013d50 <prvCheckForValidListAndQueue+0x64>)
 8013d0e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8013d10:	4b12      	ldr	r3, [pc, #72]	; (8013d5c <prvCheckForValidListAndQueue+0x70>)
 8013d12:	4a10      	ldr	r2, [pc, #64]	; (8013d54 <prvCheckForValidListAndQueue+0x68>)
 8013d14:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013d16:	2300      	movs	r3, #0
 8013d18:	9300      	str	r3, [sp, #0]
 8013d1a:	4b11      	ldr	r3, [pc, #68]	; (8013d60 <prvCheckForValidListAndQueue+0x74>)
 8013d1c:	4a11      	ldr	r2, [pc, #68]	; (8013d64 <prvCheckForValidListAndQueue+0x78>)
 8013d1e:	2110      	movs	r1, #16
 8013d20:	2014      	movs	r0, #20
 8013d22:	f7fd fc9e 	bl	8011662 <xQueueGenericCreateStatic>
 8013d26:	4603      	mov	r3, r0
 8013d28:	4a08      	ldr	r2, [pc, #32]	; (8013d4c <prvCheckForValidListAndQueue+0x60>)
 8013d2a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8013d2c:	4b07      	ldr	r3, [pc, #28]	; (8013d4c <prvCheckForValidListAndQueue+0x60>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d005      	beq.n	8013d40 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013d34:	4b05      	ldr	r3, [pc, #20]	; (8013d4c <prvCheckForValidListAndQueue+0x60>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	490b      	ldr	r1, [pc, #44]	; (8013d68 <prvCheckForValidListAndQueue+0x7c>)
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7fe fb60 	bl	8012400 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8013d40:	f000 f876 	bl	8013e30 <vPortExitCritical>
    }
 8013d44:	bf00      	nop
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}
 8013d4a:	bf00      	nop
 8013d4c:	2000791c 	.word	0x2000791c
 8013d50:	200078ec 	.word	0x200078ec
 8013d54:	20007900 	.word	0x20007900
 8013d58:	20007914 	.word	0x20007914
 8013d5c:	20007918 	.word	0x20007918
 8013d60:	20007a68 	.word	0x20007a68
 8013d64:	20007928 	.word	0x20007928
 8013d68:	080238cc 	.word	0x080238cc

08013d6c <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8013d6c:	b480      	push	{r7}
 8013d6e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013d70:	4b0b      	ldr	r3, [pc, #44]	; (8013da0 <vPortSetupTimerInterrupt+0x34>)
 8013d72:	2200      	movs	r2, #0
 8013d74:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013d76:	4b0b      	ldr	r3, [pc, #44]	; (8013da4 <vPortSetupTimerInterrupt+0x38>)
 8013d78:	2200      	movs	r2, #0
 8013d7a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013d7c:	4b0a      	ldr	r3, [pc, #40]	; (8013da8 <vPortSetupTimerInterrupt+0x3c>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4a0a      	ldr	r2, [pc, #40]	; (8013dac <vPortSetupTimerInterrupt+0x40>)
 8013d82:	fba2 2303 	umull	r2, r3, r2, r3
 8013d86:	099b      	lsrs	r3, r3, #6
 8013d88:	4a09      	ldr	r2, [pc, #36]	; (8013db0 <vPortSetupTimerInterrupt+0x44>)
 8013d8a:	3b01      	subs	r3, #1
 8013d8c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8013d8e:	4b04      	ldr	r3, [pc, #16]	; (8013da0 <vPortSetupTimerInterrupt+0x34>)
 8013d90:	2207      	movs	r2, #7
 8013d92:	601a      	str	r2, [r3, #0]
}
 8013d94:	bf00      	nop
 8013d96:	46bd      	mov	sp, r7
 8013d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9c:	4770      	bx	lr
 8013d9e:	bf00      	nop
 8013da0:	e000e010 	.word	0xe000e010
 8013da4:	e000e018 	.word	0xe000e018
 8013da8:	20000000 	.word	0x20000000
 8013dac:	10624dd3 	.word	0x10624dd3
 8013db0:	e000e014 	.word	0xe000e014

08013db4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b082      	sub	sp, #8
 8013db8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 8013dbe:	4b09      	ldr	r3, [pc, #36]	; (8013de4 <prvTaskExitError+0x30>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dc6:	d002      	beq.n	8013dce <prvTaskExitError+0x1a>
 8013dc8:	f000 f95e 	bl	8014088 <ulSetInterruptMask>
 8013dcc:	e7fe      	b.n	8013dcc <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 8013dce:	f000 f95b 	bl	8014088 <ulSetInterruptMask>

    while( ulDummy == 0 )
 8013dd2:	bf00      	nop
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d0fc      	beq.n	8013dd4 <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 8013dda:	bf00      	nop
 8013ddc:	bf00      	nop
 8013dde:	3708      	adds	r7, #8
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}
 8013de4:	2000007c 	.word	0x2000007c

08013de8 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 8013de8:	b480      	push	{r7}
 8013dea:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013dec:	4b06      	ldr	r3, [pc, #24]	; (8013e08 <vPortYield+0x20>)
 8013dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013df2:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8013df4:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8013df8:	f3bf 8f6f 	isb	sy
}
 8013dfc:	bf00      	nop
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e04:	4770      	bx	lr
 8013e06:	bf00      	nop
 8013e08:	e000ed04 	.word	0xe000ed04

08013e0c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8013e10:	f000 f93a 	bl	8014088 <ulSetInterruptMask>
    ulCriticalNesting++;
 8013e14:	4b05      	ldr	r3, [pc, #20]	; (8013e2c <vPortEnterCritical+0x20>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	3301      	adds	r3, #1
 8013e1a:	4a04      	ldr	r2, [pc, #16]	; (8013e2c <vPortEnterCritical+0x20>)
 8013e1c:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8013e1e:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8013e22:	f3bf 8f6f 	isb	sy
}
 8013e26:	bf00      	nop
 8013e28:	bd80      	pop	{r7, pc}
 8013e2a:	bf00      	nop
 8013e2c:	2000007c 	.word	0x2000007c

08013e30 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 8013e34:	4b0a      	ldr	r3, [pc, #40]	; (8013e60 <vPortExitCritical+0x30>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d102      	bne.n	8013e42 <vPortExitCritical+0x12>
 8013e3c:	f000 f924 	bl	8014088 <ulSetInterruptMask>
 8013e40:	e7fe      	b.n	8013e40 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 8013e42:	4b07      	ldr	r3, [pc, #28]	; (8013e60 <vPortExitCritical+0x30>)
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	3b01      	subs	r3, #1
 8013e48:	4a05      	ldr	r2, [pc, #20]	; (8013e60 <vPortExitCritical+0x30>)
 8013e4a:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 8013e4c:	4b04      	ldr	r3, [pc, #16]	; (8013e60 <vPortExitCritical+0x30>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d102      	bne.n	8013e5a <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 8013e54:	2000      	movs	r0, #0
 8013e56:	f000 f924 	bl	80140a2 <vClearInterruptMask>
    }
}
 8013e5a:	bf00      	nop
 8013e5c:	bd80      	pop	{r7, pc}
 8013e5e:	bf00      	nop
 8013e60:	2000007c 	.word	0x2000007c

08013e64 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b082      	sub	sp, #8
 8013e68:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8013e6a:	f000 f90d 	bl	8014088 <ulSetInterruptMask>
 8013e6e:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8013e70:	f7fe feb6 	bl	8012be0 <xTaskIncrementTick>
 8013e74:	4603      	mov	r3, r0
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d003      	beq.n	8013e82 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013e7a:	4b05      	ldr	r3, [pc, #20]	; (8013e90 <xPortSysTickHandler+0x2c>)
 8013e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e80:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8013e82:	6878      	ldr	r0, [r7, #4]
 8013e84:	f000 f90d 	bl	80140a2 <vClearInterruptMask>
}
 8013e88:	bf00      	nop
 8013e8a:	3708      	adds	r7, #8
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd80      	pop	{r7, pc}
 8013e90:	e000ed04 	.word	0xe000ed04

08013e94 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b084      	sub	sp, #16
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	699b      	ldr	r3, [r3, #24]
 8013ea0:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	3b02      	subs	r3, #2
 8013ea6:	781b      	ldrb	r3, [r3, #0]
 8013ea8:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 8013eaa:	7afb      	ldrb	r3, [r7, #11]
 8013eac:	2b02      	cmp	r3, #2
 8013eae:	d102      	bne.n	8013eb6 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 8013eb0:	f000 f8b6 	bl	8014020 <vRestoreContextOfFirstTask>
            break;
 8013eb4:	e002      	b.n	8013ebc <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 8013eb6:	f000 f8e7 	bl	8014088 <ulSetInterruptMask>
 8013eba:	e7fe      	b.n	8013eba <vPortSVCHandler_C+0x26>
    }
}
 8013ebc:	bf00      	nop
 8013ebe:	3710      	adds	r7, #16
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}

08013ec4 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 8013ec4:	b480      	push	{r7}
 8013ec6:	b085      	sub	sp, #20
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	60f8      	str	r0, [r7, #12]
 8013ecc:	60b9      	str	r1, [r7, #8]
 8013ece:	607a      	str	r2, [r7, #4]
 8013ed0:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	3b04      	subs	r3, #4
 8013ed6:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013ede:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	3b04      	subs	r3, #4
 8013ee4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8013ee6:	687a      	ldr	r2, [r7, #4]
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	3b04      	subs	r3, #4
 8013ef0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8013ef2:	4a38      	ldr	r2, [pc, #224]	; (8013fd4 <pxPortInitialiseStack+0x110>)
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	3b04      	subs	r3, #4
 8013efc:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8013f04:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	3b04      	subs	r3, #4
 8013f0a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8013f12:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	3b04      	subs	r3, #4
 8013f18:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8013f20:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	3b04      	subs	r3, #4
 8013f26:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8013f2e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	3b04      	subs	r3, #4
 8013f34:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8013f36:	683a      	ldr	r2, [r7, #0]
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	3b04      	subs	r3, #4
 8013f40:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8013f48:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	3b04      	subs	r3, #4
 8013f4e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8013f56:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	3b04      	subs	r3, #4
 8013f5c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8013f64:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	3b04      	subs	r3, #4
 8013f6a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8013f72:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	3b04      	subs	r3, #4
 8013f78:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8013f80:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	3b04      	subs	r3, #4
 8013f86:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8013f8e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	3b04      	subs	r3, #4
 8013f94:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8013f9c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	3b04      	subs	r3, #4
 8013fa2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8013faa:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	3b04      	subs	r3, #4
 8013fb0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8013fb8:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	3b04      	subs	r3, #4
 8013fbe:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 8013fc0:	68ba      	ldr	r2, [r7, #8]
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 8013fc6:	68fb      	ldr	r3, [r7, #12]
}
 8013fc8:	4618      	mov	r0, r3
 8013fca:	3714      	adds	r7, #20
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd2:	4770      	bx	lr
 8013fd4:	08013db5 	.word	0x08013db5

08013fd8 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8013fdc:	4b0c      	ldr	r3, [pc, #48]	; (8014010 <xPortStartScheduler+0x38>)
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	4a0b      	ldr	r2, [pc, #44]	; (8014010 <xPortStartScheduler+0x38>)
 8013fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013fe6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8013fe8:	4b09      	ldr	r3, [pc, #36]	; (8014010 <xPortStartScheduler+0x38>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	4a08      	ldr	r2, [pc, #32]	; (8014010 <xPortStartScheduler+0x38>)
 8013fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013ff2:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8013ff4:	f7ff feba 	bl	8013d6c <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8013ff8:	4b06      	ldr	r3, [pc, #24]	; (8014014 <xPortStartScheduler+0x3c>)
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 8013ffe:	f000 f82f 	bl	8014060 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8014002:	f7fe fefd 	bl	8012e00 <vTaskSwitchContext>
    prvTaskExitError();
 8014006:	f7ff fed5 	bl	8013db4 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 801400a:	2300      	movs	r3, #0
}
 801400c:	4618      	mov	r0, r3
 801400e:	bd80      	pop	{r7, pc}
 8014010:	e000ed20 	.word	0xe000ed20
 8014014:	2000007c 	.word	0x2000007c
	...

08014020 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8014020:	4a0b      	ldr	r2, [pc, #44]	; (8014050 <pxCurrentTCBConst2>)
 8014022:	6811      	ldr	r1, [r2, #0]
 8014024:	6808      	ldr	r0, [r1, #0]
 8014026:	c806      	ldmia	r0!, {r1, r2}
 8014028:	f381 880b 	msr	PSPLIM, r1
 801402c:	2102      	movs	r1, #2
 801402e:	f381 8814 	msr	CONTROL, r1
 8014032:	3020      	adds	r0, #32
 8014034:	f380 8809 	msr	PSP, r0
 8014038:	f3bf 8f6f 	isb	sy
 801403c:	f04f 0000 	mov.w	r0, #0
 8014040:	f380 8811 	msr	BASEPRI, r0
 8014044:	4710      	bx	r2
 8014046:	bf00      	nop
 8014048:	f3af 8000 	nop.w
 801404c:	f3af 8000 	nop.w

08014050 <pxCurrentTCBConst2>:
 8014050:	200073ec 	.word	0x200073ec
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 8014054:	bf00      	nop
 8014056:	bf00      	nop
	...

08014060 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8014060:	4807      	ldr	r0, [pc, #28]	; (8014080 <xVTORConst>)
 8014062:	6800      	ldr	r0, [r0, #0]
 8014064:	6800      	ldr	r0, [r0, #0]
 8014066:	f380 8808 	msr	MSP, r0
 801406a:	b662      	cpsie	i
 801406c:	b661      	cpsie	f
 801406e:	f3bf 8f4f 	dsb	sy
 8014072:	f3bf 8f6f 	isb	sy
 8014076:	df02      	svc	2
 8014078:	bf00      	nop
 801407a:	bf00      	nop
 801407c:	f3af 8000 	nop.w

08014080 <xVTORConst>:
 8014080:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8014084:	bf00      	nop
 8014086:	bf00      	nop

08014088 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8014088:	f3ef 8011 	mrs	r0, BASEPRI
 801408c:	f04f 0150 	mov.w	r1, #80	; 0x50
 8014090:	f381 8811 	msr	BASEPRI, r1
 8014094:	f3bf 8f4f 	dsb	sy
 8014098:	f3bf 8f6f 	isb	sy
 801409c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 801409e:	bf00      	nop
 80140a0:	4618      	mov	r0, r3

080140a2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80140a2:	f380 8811 	msr	BASEPRI, r0
 80140a6:	f3bf 8f4f 	dsb	sy
 80140aa:	f3bf 8f6f 	isb	sy
 80140ae:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 80140b0:	bf00      	nop
	...

080140c0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80140c0:	f3ef 8009 	mrs	r0, PSP
 80140c4:	f3ef 820b 	mrs	r2, PSPLIM
 80140c8:	4673      	mov	r3, lr
 80140ca:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80140ce:	4a10      	ldr	r2, [pc, #64]	; (8014110 <pxCurrentTCBConst>)
 80140d0:	6811      	ldr	r1, [r2, #0]
 80140d2:	6008      	str	r0, [r1, #0]
 80140d4:	f04f 0050 	mov.w	r0, #80	; 0x50
 80140d8:	f380 8811 	msr	BASEPRI, r0
 80140dc:	f3bf 8f4f 	dsb	sy
 80140e0:	f3bf 8f6f 	isb	sy
 80140e4:	f7fe fe8c 	bl	8012e00 <vTaskSwitchContext>
 80140e8:	f04f 0000 	mov.w	r0, #0
 80140ec:	f380 8811 	msr	BASEPRI, r0
 80140f0:	4a07      	ldr	r2, [pc, #28]	; (8014110 <pxCurrentTCBConst>)
 80140f2:	6811      	ldr	r1, [r2, #0]
 80140f4:	6808      	ldr	r0, [r1, #0]
 80140f6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80140fa:	f382 880b 	msr	PSPLIM, r2
 80140fe:	f380 8809 	msr	PSP, r0
 8014102:	4718      	bx	r3
 8014104:	f3af 8000 	nop.w
 8014108:	f3af 8000 	nop.w
 801410c:	f3af 8000 	nop.w

08014110 <pxCurrentTCBConst>:
 8014110:	200073ec 	.word	0x200073ec
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8014114:	bf00      	nop
 8014116:	bf00      	nop
	...

08014120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8014120:	f01e 0f04 	tst.w	lr, #4
 8014124:	bf0c      	ite	eq
 8014126:	f3ef 8008 	mrseq	r0, MSP
 801412a:	f3ef 8009 	mrsne	r0, PSP
 801412e:	4904      	ldr	r1, [pc, #16]	; (8014140 <svchandler_address_const>)
 8014130:	4708      	bx	r1
 8014132:	bf00      	nop
 8014134:	f3af 8000 	nop.w
 8014138:	f3af 8000 	nop.w
 801413c:	f3af 8000 	nop.w

08014140 <svchandler_address_const>:
 8014140:	08013e95 	.word	0x08013e95
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 8014144:	bf00      	nop
 8014146:	bf00      	nop

08014148 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b088      	sub	sp, #32
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8014150:	2300      	movs	r3, #0
 8014152:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8014154:	f7fe fc1c 	bl	8012990 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8014158:	4b4b      	ldr	r3, [pc, #300]	; (8014288 <pvPortMalloc+0x140>)
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d101      	bne.n	8014164 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8014160:	f000 f8e8 	bl	8014334 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d012      	beq.n	8014190 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 801416a:	2208      	movs	r2, #8
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f003 0307 	and.w	r3, r3, #7
 8014172:	1ad3      	subs	r3, r2, r3
 8014174:	3308      	adds	r3, #8
 8014176:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8014178:	693b      	ldr	r3, [r7, #16]
 801417a:	43db      	mvns	r3, r3
 801417c:	687a      	ldr	r2, [r7, #4]
 801417e:	429a      	cmp	r2, r3
 8014180:	d804      	bhi.n	801418c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8014182:	687a      	ldr	r2, [r7, #4]
 8014184:	693b      	ldr	r3, [r7, #16]
 8014186:	4413      	add	r3, r2
 8014188:	607b      	str	r3, [r7, #4]
 801418a:	e001      	b.n	8014190 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 801418c:	2300      	movs	r3, #0
 801418e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2b00      	cmp	r3, #0
 8014194:	db68      	blt.n	8014268 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d065      	beq.n	8014268 <pvPortMalloc+0x120>
 801419c:	4b3b      	ldr	r3, [pc, #236]	; (801428c <pvPortMalloc+0x144>)
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	687a      	ldr	r2, [r7, #4]
 80141a2:	429a      	cmp	r2, r3
 80141a4:	d860      	bhi.n	8014268 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80141a6:	4b3a      	ldr	r3, [pc, #232]	; (8014290 <pvPortMalloc+0x148>)
 80141a8:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 80141aa:	4b39      	ldr	r3, [pc, #228]	; (8014290 <pvPortMalloc+0x148>)
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80141b0:	e004      	b.n	80141bc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80141b2:	69fb      	ldr	r3, [r7, #28]
 80141b4:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80141b6:	69fb      	ldr	r3, [r7, #28]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80141bc:	69fb      	ldr	r3, [r7, #28]
 80141be:	685b      	ldr	r3, [r3, #4]
 80141c0:	687a      	ldr	r2, [r7, #4]
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d903      	bls.n	80141ce <pvPortMalloc+0x86>
 80141c6:	69fb      	ldr	r3, [r7, #28]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d1f1      	bne.n	80141b2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80141ce:	4b2e      	ldr	r3, [pc, #184]	; (8014288 <pvPortMalloc+0x140>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	69fa      	ldr	r2, [r7, #28]
 80141d4:	429a      	cmp	r2, r3
 80141d6:	d047      	beq.n	8014268 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80141d8:	69bb      	ldr	r3, [r7, #24]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	2208      	movs	r2, #8
 80141de:	4413      	add	r3, r2
 80141e0:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80141e2:	69fb      	ldr	r3, [r7, #28]
 80141e4:	681a      	ldr	r2, [r3, #0]
 80141e6:	69bb      	ldr	r3, [r7, #24]
 80141e8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80141ea:	69fb      	ldr	r3, [r7, #28]
 80141ec:	685a      	ldr	r2, [r3, #4]
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	1ad2      	subs	r2, r2, r3
 80141f2:	2308      	movs	r3, #8
 80141f4:	005b      	lsls	r3, r3, #1
 80141f6:	429a      	cmp	r2, r3
 80141f8:	d917      	bls.n	801422a <pvPortMalloc+0xe2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80141fa:	69fa      	ldr	r2, [r7, #28]
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	4413      	add	r3, r2
 8014200:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	f003 0307 	and.w	r3, r3, #7
 8014208:	2b00      	cmp	r3, #0
 801420a:	d002      	beq.n	8014212 <pvPortMalloc+0xca>
 801420c:	f7ff ff3c 	bl	8014088 <ulSetInterruptMask>
 8014210:	e7fe      	b.n	8014210 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014212:	69fb      	ldr	r3, [r7, #28]
 8014214:	685a      	ldr	r2, [r3, #4]
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	1ad2      	subs	r2, r2, r3
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 801421e:	69fb      	ldr	r3, [r7, #28]
 8014220:	687a      	ldr	r2, [r7, #4]
 8014222:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014224:	68f8      	ldr	r0, [r7, #12]
 8014226:	f000 f8e1 	bl	80143ec <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 801422a:	4b18      	ldr	r3, [pc, #96]	; (801428c <pvPortMalloc+0x144>)
 801422c:	681a      	ldr	r2, [r3, #0]
 801422e:	69fb      	ldr	r3, [r7, #28]
 8014230:	685b      	ldr	r3, [r3, #4]
 8014232:	1ad3      	subs	r3, r2, r3
 8014234:	4a15      	ldr	r2, [pc, #84]	; (801428c <pvPortMalloc+0x144>)
 8014236:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014238:	4b14      	ldr	r3, [pc, #80]	; (801428c <pvPortMalloc+0x144>)
 801423a:	681a      	ldr	r2, [r3, #0]
 801423c:	4b15      	ldr	r3, [pc, #84]	; (8014294 <pvPortMalloc+0x14c>)
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	429a      	cmp	r2, r3
 8014242:	d203      	bcs.n	801424c <pvPortMalloc+0x104>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014244:	4b11      	ldr	r3, [pc, #68]	; (801428c <pvPortMalloc+0x144>)
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	4a12      	ldr	r2, [pc, #72]	; (8014294 <pvPortMalloc+0x14c>)
 801424a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 801424c:	69fb      	ldr	r3, [r7, #28]
 801424e:	685b      	ldr	r3, [r3, #4]
 8014250:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014254:	69fb      	ldr	r3, [r7, #28]
 8014256:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8014258:	69fb      	ldr	r3, [r7, #28]
 801425a:	2200      	movs	r2, #0
 801425c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 801425e:	4b0e      	ldr	r3, [pc, #56]	; (8014298 <pvPortMalloc+0x150>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	3301      	adds	r3, #1
 8014264:	4a0c      	ldr	r2, [pc, #48]	; (8014298 <pvPortMalloc+0x150>)
 8014266:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8014268:	f7fe fba0 	bl	80129ac <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801426c:	697b      	ldr	r3, [r7, #20]
 801426e:	f003 0307 	and.w	r3, r3, #7
 8014272:	2b00      	cmp	r3, #0
 8014274:	d002      	beq.n	801427c <pvPortMalloc+0x134>
 8014276:	f7ff ff07 	bl	8014088 <ulSetInterruptMask>
 801427a:	e7fe      	b.n	801427a <pvPortMalloc+0x132>
    return pvReturn;
 801427c:	697b      	ldr	r3, [r7, #20]
}
 801427e:	4618      	mov	r0, r3
 8014280:	3720      	adds	r7, #32
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}
 8014286:	bf00      	nop
 8014288:	2002bec0 	.word	0x2002bec0
 801428c:	2002bec4 	.word	0x2002bec4
 8014290:	2002beb8 	.word	0x2002beb8
 8014294:	2002bec8 	.word	0x2002bec8
 8014298:	2002becc 	.word	0x2002becc

0801429c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b084      	sub	sp, #16
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d039      	beq.n	8014322 <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80142ae:	2308      	movs	r3, #8
 80142b0:	425b      	negs	r3, r3
 80142b2:	68fa      	ldr	r2, [r7, #12]
 80142b4:	4413      	add	r3, r2
 80142b6:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	685b      	ldr	r3, [r3, #4]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	db02      	blt.n	80142ca <vPortFree+0x2e>
 80142c4:	f7ff fee0 	bl	8014088 <ulSetInterruptMask>
 80142c8:	e7fe      	b.n	80142c8 <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d002      	beq.n	80142d8 <vPortFree+0x3c>
 80142d2:	f7ff fed9 	bl	8014088 <ulSetInterruptMask>
 80142d6:	e7fe      	b.n	80142d6 <vPortFree+0x3a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	685b      	ldr	r3, [r3, #4]
 80142dc:	0fdb      	lsrs	r3, r3, #31
 80142de:	f003 0301 	and.w	r3, r3, #1
 80142e2:	b2db      	uxtb	r3, r3
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d01c      	beq.n	8014322 <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d118      	bne.n	8014322 <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80142f0:	68bb      	ldr	r3, [r7, #8]
 80142f2:	685b      	ldr	r3, [r3, #4]
 80142f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80142fc:	f7fe fb48 	bl	8012990 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	685a      	ldr	r2, [r3, #4]
 8014304:	4b09      	ldr	r3, [pc, #36]	; (801432c <vPortFree+0x90>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	4413      	add	r3, r2
 801430a:	4a08      	ldr	r2, [pc, #32]	; (801432c <vPortFree+0x90>)
 801430c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801430e:	68b8      	ldr	r0, [r7, #8]
 8014310:	f000 f86c 	bl	80143ec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8014314:	4b06      	ldr	r3, [pc, #24]	; (8014330 <vPortFree+0x94>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	3301      	adds	r3, #1
 801431a:	4a05      	ldr	r2, [pc, #20]	; (8014330 <vPortFree+0x94>)
 801431c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 801431e:	f7fe fb45 	bl	80129ac <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8014322:	bf00      	nop
 8014324:	3710      	adds	r7, #16
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}
 801432a:	bf00      	nop
 801432c:	2002bec4 	.word	0x2002bec4
 8014330:	2002bed0 	.word	0x2002bed0

08014334 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8014334:	b480      	push	{r7}
 8014336:	b085      	sub	sp, #20
 8014338:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801433a:	f44f 3311 	mov.w	r3, #148480	; 0x24400
 801433e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8014340:	4b25      	ldr	r3, [pc, #148]	; (80143d8 <prvHeapInit+0xa4>)
 8014342:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	f003 0307 	and.w	r3, r3, #7
 801434a:	2b00      	cmp	r3, #0
 801434c:	d00c      	beq.n	8014368 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	3307      	adds	r3, #7
 8014352:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	f023 0307 	bic.w	r3, r3, #7
 801435a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 801435c:	68ba      	ldr	r2, [r7, #8]
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	1ad3      	subs	r3, r2, r3
 8014362:	4a1d      	ldr	r2, [pc, #116]	; (80143d8 <prvHeapInit+0xa4>)
 8014364:	4413      	add	r3, r2
 8014366:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801436c:	4a1b      	ldr	r2, [pc, #108]	; (80143dc <prvHeapInit+0xa8>)
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8014372:	4b1a      	ldr	r3, [pc, #104]	; (80143dc <prvHeapInit+0xa8>)
 8014374:	2200      	movs	r2, #0
 8014376:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	68ba      	ldr	r2, [r7, #8]
 801437c:	4413      	add	r3, r2
 801437e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8014380:	2208      	movs	r2, #8
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	1a9b      	subs	r3, r3, r2
 8014386:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	f023 0307 	bic.w	r3, r3, #7
 801438e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	4a13      	ldr	r2, [pc, #76]	; (80143e0 <prvHeapInit+0xac>)
 8014394:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8014396:	4b12      	ldr	r3, [pc, #72]	; (80143e0 <prvHeapInit+0xac>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	2200      	movs	r2, #0
 801439c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 801439e:	4b10      	ldr	r3, [pc, #64]	; (80143e0 <prvHeapInit+0xac>)
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	2200      	movs	r2, #0
 80143a4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80143aa:	683b      	ldr	r3, [r7, #0]
 80143ac:	68fa      	ldr	r2, [r7, #12]
 80143ae:	1ad2      	subs	r2, r2, r3
 80143b0:	683b      	ldr	r3, [r7, #0]
 80143b2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80143b4:	4b0a      	ldr	r3, [pc, #40]	; (80143e0 <prvHeapInit+0xac>)
 80143b6:	681a      	ldr	r2, [r3, #0]
 80143b8:	683b      	ldr	r3, [r7, #0]
 80143ba:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	685b      	ldr	r3, [r3, #4]
 80143c0:	4a08      	ldr	r2, [pc, #32]	; (80143e4 <prvHeapInit+0xb0>)
 80143c2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	685b      	ldr	r3, [r3, #4]
 80143c8:	4a07      	ldr	r2, [pc, #28]	; (80143e8 <prvHeapInit+0xb4>)
 80143ca:	6013      	str	r3, [r2, #0]
}
 80143cc:	bf00      	nop
 80143ce:	3714      	adds	r7, #20
 80143d0:	46bd      	mov	sp, r7
 80143d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d6:	4770      	bx	lr
 80143d8:	20007ab8 	.word	0x20007ab8
 80143dc:	2002beb8 	.word	0x2002beb8
 80143e0:	2002bec0 	.word	0x2002bec0
 80143e4:	2002bec8 	.word	0x2002bec8
 80143e8:	2002bec4 	.word	0x2002bec4

080143ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80143ec:	b480      	push	{r7}
 80143ee:	b085      	sub	sp, #20
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80143f4:	4b28      	ldr	r3, [pc, #160]	; (8014498 <prvInsertBlockIntoFreeList+0xac>)
 80143f6:	60fb      	str	r3, [r7, #12]
 80143f8:	e002      	b.n	8014400 <prvInsertBlockIntoFreeList+0x14>
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	60fb      	str	r3, [r7, #12]
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	687a      	ldr	r2, [r7, #4]
 8014406:	429a      	cmp	r2, r3
 8014408:	d8f7      	bhi.n	80143fa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	685b      	ldr	r3, [r3, #4]
 8014412:	68ba      	ldr	r2, [r7, #8]
 8014414:	4413      	add	r3, r2
 8014416:	687a      	ldr	r2, [r7, #4]
 8014418:	429a      	cmp	r2, r3
 801441a:	d108      	bne.n	801442e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	685a      	ldr	r2, [r3, #4]
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	685b      	ldr	r3, [r3, #4]
 8014424:	441a      	add	r2, r3
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	685b      	ldr	r3, [r3, #4]
 8014436:	68ba      	ldr	r2, [r7, #8]
 8014438:	441a      	add	r2, r3
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	429a      	cmp	r2, r3
 8014440:	d118      	bne.n	8014474 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	681a      	ldr	r2, [r3, #0]
 8014446:	4b15      	ldr	r3, [pc, #84]	; (801449c <prvInsertBlockIntoFreeList+0xb0>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	429a      	cmp	r2, r3
 801444c:	d00d      	beq.n	801446a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	685a      	ldr	r2, [r3, #4]
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	685b      	ldr	r3, [r3, #4]
 8014458:	441a      	add	r2, r3
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	681a      	ldr	r2, [r3, #0]
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	601a      	str	r2, [r3, #0]
 8014468:	e008      	b.n	801447c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801446a:	4b0c      	ldr	r3, [pc, #48]	; (801449c <prvInsertBlockIntoFreeList+0xb0>)
 801446c:	681a      	ldr	r2, [r3, #0]
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	601a      	str	r2, [r3, #0]
 8014472:	e003      	b.n	801447c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	681a      	ldr	r2, [r3, #0]
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 801447c:	68fa      	ldr	r2, [r7, #12]
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	429a      	cmp	r2, r3
 8014482:	d002      	beq.n	801448a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	687a      	ldr	r2, [r7, #4]
 8014488:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 801448a:	bf00      	nop
 801448c:	3714      	adds	r7, #20
 801448e:	46bd      	mov	sp, r7
 8014490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014494:	4770      	bx	lr
 8014496:	bf00      	nop
 8014498:	2002beb8 	.word	0x2002beb8
 801449c:	2002bec0 	.word	0x2002bec0

080144a0 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b084      	sub	sp, #16
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	330c      	adds	r3, #12
 80144b0:	461a      	mov	r2, r3
 80144b2:	6839      	ldr	r1, [r7, #0]
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	f002 faa3 	bl	8016a00 <tcpip_send_msg_wait_sem>
 80144ba:	4603      	mov	r3, r0
 80144bc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80144be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d103      	bne.n	80144ce <netconn_apimsg+0x2e>
    return apimsg->err;
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80144cc:	e001      	b.n	80144d2 <netconn_apimsg+0x32>
  }
  return err;
 80144ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80144d2:	4618      	mov	r0, r3
 80144d4:	3710      	adds	r7, #16
 80144d6:	46bd      	mov	sp, r7
 80144d8:	bd80      	pop	{r7, pc}
	...

080144dc <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b08c      	sub	sp, #48	; 0x30
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	4603      	mov	r3, r0
 80144e4:	603a      	str	r2, [r7, #0]
 80144e6:	71fb      	strb	r3, [r7, #7]
 80144e8:	460b      	mov	r3, r1
 80144ea:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80144ec:	79fb      	ldrb	r3, [r7, #7]
 80144ee:	6839      	ldr	r1, [r7, #0]
 80144f0:	4618      	mov	r0, r3
 80144f2:	f001 f923 	bl	801573c <netconn_alloc>
 80144f6:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80144f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d054      	beq.n	80145a8 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80144fe:	79bb      	ldrb	r3, [r7, #6]
 8014500:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8014502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014504:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8014506:	f107 0308 	add.w	r3, r7, #8
 801450a:	4619      	mov	r1, r3
 801450c:	4829      	ldr	r0, [pc, #164]	; (80145b4 <netconn_new_with_proto_and_callback+0xd8>)
 801450e:	f7ff ffc7 	bl	80144a0 <netconn_apimsg>
 8014512:	4603      	mov	r3, r0
 8014514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8014518:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801451c:	2b00      	cmp	r3, #0
 801451e:	d043      	beq.n	80145a8 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8014520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014522:	685b      	ldr	r3, [r3, #4]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d005      	beq.n	8014534 <netconn_new_with_proto_and_callback+0x58>
 8014528:	4b23      	ldr	r3, [pc, #140]	; (80145b8 <netconn_new_with_proto_and_callback+0xdc>)
 801452a:	22a3      	movs	r2, #163	; 0xa3
 801452c:	4923      	ldr	r1, [pc, #140]	; (80145bc <netconn_new_with_proto_and_callback+0xe0>)
 801452e:	4824      	ldr	r0, [pc, #144]	; (80145c0 <netconn_new_with_proto_and_callback+0xe4>)
 8014530:	f00d ff06 	bl	8022340 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8014534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014536:	3310      	adds	r3, #16
 8014538:	4618      	mov	r0, r3
 801453a:	f00d fa7f 	bl	8021a3c <sys_mbox_valid>
 801453e:	4603      	mov	r3, r0
 8014540:	2b00      	cmp	r3, #0
 8014542:	d105      	bne.n	8014550 <netconn_new_with_proto_and_callback+0x74>
 8014544:	4b1c      	ldr	r3, [pc, #112]	; (80145b8 <netconn_new_with_proto_and_callback+0xdc>)
 8014546:	22a4      	movs	r2, #164	; 0xa4
 8014548:	491e      	ldr	r1, [pc, #120]	; (80145c4 <netconn_new_with_proto_and_callback+0xe8>)
 801454a:	481d      	ldr	r0, [pc, #116]	; (80145c0 <netconn_new_with_proto_and_callback+0xe4>)
 801454c:	f00d fef8 	bl	8022340 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8014550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014552:	3314      	adds	r3, #20
 8014554:	4618      	mov	r0, r3
 8014556:	f00d fa71 	bl	8021a3c <sys_mbox_valid>
 801455a:	4603      	mov	r3, r0
 801455c:	2b00      	cmp	r3, #0
 801455e:	d005      	beq.n	801456c <netconn_new_with_proto_and_callback+0x90>
 8014560:	4b15      	ldr	r3, [pc, #84]	; (80145b8 <netconn_new_with_proto_and_callback+0xdc>)
 8014562:	22a6      	movs	r2, #166	; 0xa6
 8014564:	4918      	ldr	r1, [pc, #96]	; (80145c8 <netconn_new_with_proto_and_callback+0xec>)
 8014566:	4816      	ldr	r0, [pc, #88]	; (80145c0 <netconn_new_with_proto_and_callback+0xe4>)
 8014568:	f00d feea 	bl	8022340 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 801456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801456e:	330c      	adds	r3, #12
 8014570:	4618      	mov	r0, r3
 8014572:	f00d faf1 	bl	8021b58 <sys_sem_valid>
 8014576:	4603      	mov	r3, r0
 8014578:	2b00      	cmp	r3, #0
 801457a:	d105      	bne.n	8014588 <netconn_new_with_proto_and_callback+0xac>
 801457c:	4b0e      	ldr	r3, [pc, #56]	; (80145b8 <netconn_new_with_proto_and_callback+0xdc>)
 801457e:	22a9      	movs	r2, #169	; 0xa9
 8014580:	4912      	ldr	r1, [pc, #72]	; (80145cc <netconn_new_with_proto_and_callback+0xf0>)
 8014582:	480f      	ldr	r0, [pc, #60]	; (80145c0 <netconn_new_with_proto_and_callback+0xe4>)
 8014584:	f00d fedc 	bl	8022340 <iprintf>
      sys_sem_free(&conn->op_completed);
 8014588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801458a:	330c      	adds	r3, #12
 801458c:	4618      	mov	r0, r3
 801458e:	f00d fad6 	bl	8021b3e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8014592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014594:	3310      	adds	r3, #16
 8014596:	4618      	mov	r0, r3
 8014598:	f00d f9dc 	bl	8021954 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 801459c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801459e:	2007      	movs	r0, #7
 80145a0:	f003 f894 	bl	80176cc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80145a4:	2300      	movs	r3, #0
 80145a6:	e000      	b.n	80145aa <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80145a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	3730      	adds	r7, #48	; 0x30
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}
 80145b2:	bf00      	nop
 80145b4:	08015711 	.word	0x08015711
 80145b8:	080238d4 	.word	0x080238d4
 80145bc:	08023908 	.word	0x08023908
 80145c0:	0802392c 	.word	0x0802392c
 80145c4:	08023954 	.word	0x08023954
 80145c8:	0802396c 	.word	0x0802396c
 80145cc:	08023990 	.word	0x08023990

080145d0 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b08c      	sub	sp, #48	; 0x30
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d101      	bne.n	80145e2 <netconn_prepare_delete+0x12>
    return ERR_OK;
 80145de:	2300      	movs	r3, #0
 80145e0:	e014      	b.n	801460c <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80145e6:	2329      	movs	r3, #41	; 0x29
 80145e8:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80145ea:	f107 030c 	add.w	r3, r7, #12
 80145ee:	4619      	mov	r1, r3
 80145f0:	4808      	ldr	r0, [pc, #32]	; (8014614 <netconn_prepare_delete+0x44>)
 80145f2:	f7ff ff55 	bl	80144a0 <netconn_apimsg>
 80145f6:	4603      	mov	r3, r0
 80145f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80145fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8014600:	2b00      	cmp	r3, #0
 8014602:	d002      	beq.n	801460a <netconn_prepare_delete+0x3a>
    return err;
 8014604:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8014608:	e000      	b.n	801460c <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 801460a:	2300      	movs	r3, #0
}
 801460c:	4618      	mov	r0, r3
 801460e:	3730      	adds	r7, #48	; 0x30
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}
 8014614:	08015c7d 	.word	0x08015c7d

08014618 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b084      	sub	sp, #16
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d101      	bne.n	801462a <netconn_delete+0x12>
    return ERR_OK;
 8014626:	2300      	movs	r3, #0
 8014628:	e00d      	b.n	8014646 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f7ff ffd0 	bl	80145d0 <netconn_prepare_delete>
 8014630:	4603      	mov	r3, r0
 8014632:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8014634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d102      	bne.n	8014642 <netconn_delete+0x2a>
    netconn_free(conn);
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f001 f8eb 	bl	8015818 <netconn_free>
  }
  return err;
 8014642:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014646:	4618      	mov	r0, r3
 8014648:	3710      	adds	r7, #16
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
	...

08014650 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b08e      	sub	sp, #56	; 0x38
 8014654:	af00      	add	r7, sp, #0
 8014656:	60f8      	str	r0, [r7, #12]
 8014658:	60b9      	str	r1, [r7, #8]
 801465a:	4613      	mov	r3, r2
 801465c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d109      	bne.n	8014678 <netconn_bind+0x28>
 8014664:	4b11      	ldr	r3, [pc, #68]	; (80146ac <netconn_bind+0x5c>)
 8014666:	f44f 729c 	mov.w	r2, #312	; 0x138
 801466a:	4911      	ldr	r1, [pc, #68]	; (80146b0 <netconn_bind+0x60>)
 801466c:	4811      	ldr	r0, [pc, #68]	; (80146b4 <netconn_bind+0x64>)
 801466e:	f00d fe67 	bl	8022340 <iprintf>
 8014672:	f06f 030f 	mvn.w	r3, #15
 8014676:	e015      	b.n	80146a4 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8014678:	68bb      	ldr	r3, [r7, #8]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d101      	bne.n	8014682 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 801467e:	4b0e      	ldr	r3, [pc, #56]	; (80146b8 <netconn_bind+0x68>)
 8014680:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 801468a:	88fb      	ldrh	r3, [r7, #6]
 801468c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 801468e:	f107 0314 	add.w	r3, r7, #20
 8014692:	4619      	mov	r1, r3
 8014694:	4809      	ldr	r0, [pc, #36]	; (80146bc <netconn_bind+0x6c>)
 8014696:	f7ff ff03 	bl	80144a0 <netconn_apimsg>
 801469a:	4603      	mov	r3, r0
 801469c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80146a0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80146a4:	4618      	mov	r0, r3
 80146a6:	3738      	adds	r7, #56	; 0x38
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}
 80146ac:	080238d4 	.word	0x080238d4
 80146b0:	08023a0c 	.word	0x08023a0c
 80146b4:	0802392c 	.word	0x0802392c
 80146b8:	080270c4 	.word	0x080270c4
 80146bc:	08015e45 	.word	0x08015e45

080146c0 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b08c      	sub	sp, #48	; 0x30
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
 80146c8:	460b      	mov	r3, r1
 80146ca:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d109      	bne.n	80146e6 <netconn_listen_with_backlog+0x26>
 80146d2:	4b0d      	ldr	r3, [pc, #52]	; (8014708 <netconn_listen_with_backlog+0x48>)
 80146d4:	f240 12bb 	movw	r2, #443	; 0x1bb
 80146d8:	490c      	ldr	r1, [pc, #48]	; (801470c <netconn_listen_with_backlog+0x4c>)
 80146da:	480d      	ldr	r0, [pc, #52]	; (8014710 <netconn_listen_with_backlog+0x50>)
 80146dc:	f00d fe30 	bl	8022340 <iprintf>
 80146e0:	f06f 030f 	mvn.w	r3, #15
 80146e4:	e00c      	b.n	8014700 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80146ea:	f107 030c 	add.w	r3, r7, #12
 80146ee:	4619      	mov	r1, r3
 80146f0:	4808      	ldr	r0, [pc, #32]	; (8014714 <netconn_listen_with_backlog+0x54>)
 80146f2:	f7ff fed5 	bl	80144a0 <netconn_apimsg>
 80146f6:	4603      	mov	r3, r0
 80146f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80146fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8014700:	4618      	mov	r0, r3
 8014702:	3730      	adds	r7, #48	; 0x30
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}
 8014708:	080238d4 	.word	0x080238d4
 801470c:	08023a8c 	.word	0x08023a8c
 8014710:	0802392c 	.word	0x0802392c
 8014714:	08015eb9 	.word	0x08015eb9

08014718 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b086      	sub	sp, #24
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
 8014720:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d109      	bne.n	801473c <netconn_accept+0x24>
 8014728:	4b3d      	ldr	r3, [pc, #244]	; (8014820 <netconn_accept+0x108>)
 801472a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801472e:	493d      	ldr	r1, [pc, #244]	; (8014824 <netconn_accept+0x10c>)
 8014730:	483d      	ldr	r0, [pc, #244]	; (8014828 <netconn_accept+0x110>)
 8014732:	f00d fe05 	bl	8022340 <iprintf>
 8014736:	f06f 030f 	mvn.w	r3, #15
 801473a:	e06c      	b.n	8014816 <netconn_accept+0xfe>
  *new_conn = NULL;
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	2200      	movs	r2, #0
 8014740:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d109      	bne.n	801475c <netconn_accept+0x44>
 8014748:	4b35      	ldr	r3, [pc, #212]	; (8014820 <netconn_accept+0x108>)
 801474a:	f240 12e3 	movw	r2, #483	; 0x1e3
 801474e:	4937      	ldr	r1, [pc, #220]	; (801482c <netconn_accept+0x114>)
 8014750:	4835      	ldr	r0, [pc, #212]	; (8014828 <netconn_accept+0x110>)
 8014752:	f00d fdf5 	bl	8022340 <iprintf>
 8014756:	f06f 030f 	mvn.w	r3, #15
 801475a:	e05c      	b.n	8014816 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f000 fb6c 	bl	8014e3a <netconn_err>
 8014762:	4603      	mov	r3, r0
 8014764:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8014766:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d002      	beq.n	8014774 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 801476e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014772:	e050      	b.n	8014816 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	3314      	adds	r3, #20
 8014778:	4618      	mov	r0, r3
 801477a:	f00d f95f 	bl	8021a3c <sys_mbox_valid>
 801477e:	4603      	mov	r3, r0
 8014780:	2b00      	cmp	r3, #0
 8014782:	d005      	beq.n	8014790 <netconn_accept+0x78>
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	7f1b      	ldrb	r3, [r3, #28]
 8014788:	f003 0301 	and.w	r3, r3, #1
 801478c:	2b00      	cmp	r3, #0
 801478e:	d002      	beq.n	8014796 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8014790:	f06f 030e 	mvn.w	r3, #14
 8014794:	e03f      	b.n	8014816 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	7f1b      	ldrb	r3, [r3, #28]
 801479a:	f003 0302 	and.w	r3, r3, #2
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d00e      	beq.n	80147c0 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	3314      	adds	r3, #20
 80147a6:	f107 020c 	add.w	r2, r7, #12
 80147aa:	4611      	mov	r1, r2
 80147ac:	4618      	mov	r0, r3
 80147ae:	f00d f92e 	bl	8021a0e <sys_arch_mbox_tryfetch>
 80147b2:	4603      	mov	r3, r0
 80147b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147b8:	d10a      	bne.n	80147d0 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80147ba:	f06f 0306 	mvn.w	r3, #6
 80147be:	e02a      	b.n	8014816 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	3314      	adds	r3, #20
 80147c4:	f107 010c 	add.w	r1, r7, #12
 80147c8:	2200      	movs	r2, #0
 80147ca:	4618      	mov	r0, r3
 80147cc:	f00d f8ee 	bl	80219ac <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d005      	beq.n	80147e4 <netconn_accept+0xcc>
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147dc:	2200      	movs	r2, #0
 80147de:	2101      	movs	r1, #1
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	f107 0213 	add.w	r2, r7, #19
 80147ea:	4611      	mov	r1, r2
 80147ec:	4618      	mov	r0, r3
 80147ee:	f000 fb75 	bl	8014edc <lwip_netconn_is_err_msg>
 80147f2:	4603      	mov	r3, r0
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d002      	beq.n	80147fe <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80147f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80147fc:	e00b      	b.n	8014816 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d102      	bne.n	801480a <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8014804:	f06f 030e 	mvn.w	r3, #14
 8014808:	e005      	b.n	8014816 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	697a      	ldr	r2, [r7, #20]
 8014812:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8014814:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8014816:	4618      	mov	r0, r3
 8014818:	3718      	adds	r7, #24
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}
 801481e:	bf00      	nop
 8014820:	080238d4 	.word	0x080238d4
 8014824:	08023aac 	.word	0x08023aac
 8014828:	0802392c 	.word	0x0802392c
 801482c:	08023acc 	.word	0x08023acc

08014830 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b088      	sub	sp, #32
 8014834:	af00      	add	r7, sp, #0
 8014836:	60f8      	str	r0, [r7, #12]
 8014838:	60b9      	str	r1, [r7, #8]
 801483a:	4613      	mov	r3, r2
 801483c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 801483e:	2300      	movs	r3, #0
 8014840:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d109      	bne.n	801485c <netconn_recv_data+0x2c>
 8014848:	4b58      	ldr	r3, [pc, #352]	; (80149ac <netconn_recv_data+0x17c>)
 801484a:	f44f 7212 	mov.w	r2, #584	; 0x248
 801484e:	4958      	ldr	r1, [pc, #352]	; (80149b0 <netconn_recv_data+0x180>)
 8014850:	4858      	ldr	r0, [pc, #352]	; (80149b4 <netconn_recv_data+0x184>)
 8014852:	f00d fd75 	bl	8022340 <iprintf>
 8014856:	f06f 030f 	mvn.w	r3, #15
 801485a:	e0a2      	b.n	80149a2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 801485c:	68bb      	ldr	r3, [r7, #8]
 801485e:	2200      	movs	r2, #0
 8014860:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d109      	bne.n	801487c <netconn_recv_data+0x4c>
 8014868:	4b50      	ldr	r3, [pc, #320]	; (80149ac <netconn_recv_data+0x17c>)
 801486a:	f240 224a 	movw	r2, #586	; 0x24a
 801486e:	4952      	ldr	r1, [pc, #328]	; (80149b8 <netconn_recv_data+0x188>)
 8014870:	4850      	ldr	r0, [pc, #320]	; (80149b4 <netconn_recv_data+0x184>)
 8014872:	f00d fd65 	bl	8022340 <iprintf>
 8014876:	f06f 030f 	mvn.w	r3, #15
 801487a:	e092      	b.n	80149a2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	3310      	adds	r3, #16
 8014880:	4618      	mov	r0, r3
 8014882:	f00d f8db 	bl	8021a3c <sys_mbox_valid>
 8014886:	4603      	mov	r3, r0
 8014888:	2b00      	cmp	r3, #0
 801488a:	d10e      	bne.n	80148aa <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 801488c:	68f8      	ldr	r0, [r7, #12]
 801488e:	f000 fad4 	bl	8014e3a <netconn_err>
 8014892:	4603      	mov	r3, r0
 8014894:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8014896:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d002      	beq.n	80148a4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 801489e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80148a2:	e07e      	b.n	80149a2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80148a4:	f06f 030a 	mvn.w	r3, #10
 80148a8:	e07b      	b.n	80149a2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	7f1b      	ldrb	r3, [r3, #28]
 80148ae:	f003 0302 	and.w	r3, r3, #2
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d10f      	bne.n	80148d6 <netconn_recv_data+0xa6>
 80148b6:	79fb      	ldrb	r3, [r7, #7]
 80148b8:	f003 0304 	and.w	r3, r3, #4
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d10a      	bne.n	80148d6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	7f1b      	ldrb	r3, [r3, #28]
 80148c4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d104      	bne.n	80148d6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d023      	beq.n	801491e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	3310      	adds	r3, #16
 80148da:	f107 0218 	add.w	r2, r7, #24
 80148de:	4611      	mov	r1, r2
 80148e0:	4618      	mov	r0, r3
 80148e2:	f00d f894 	bl	8021a0e <sys_arch_mbox_tryfetch>
 80148e6:	4603      	mov	r3, r0
 80148e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148ec:	d11f      	bne.n	801492e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80148ee:	68f8      	ldr	r0, [r7, #12]
 80148f0:	f000 faa3 	bl	8014e3a <netconn_err>
 80148f4:	4603      	mov	r3, r0
 80148f6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80148f8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d002      	beq.n	8014906 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8014900:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014904:	e04d      	b.n	80149a2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	7f1b      	ldrb	r3, [r3, #28]
 801490a:	f003 0301 	and.w	r3, r3, #1
 801490e:	2b00      	cmp	r3, #0
 8014910:	d002      	beq.n	8014918 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8014912:	f06f 030a 	mvn.w	r3, #10
 8014916:	e044      	b.n	80149a2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8014918:	f06f 0306 	mvn.w	r3, #6
 801491c:	e041      	b.n	80149a2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	3310      	adds	r3, #16
 8014922:	f107 0118 	add.w	r1, r7, #24
 8014926:	2200      	movs	r2, #0
 8014928:	4618      	mov	r0, r3
 801492a:	f00d f83f 	bl	80219ac <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	781b      	ldrb	r3, [r3, #0]
 8014932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014936:	2b10      	cmp	r3, #16
 8014938:	d117      	bne.n	801496a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 801493a:	69bb      	ldr	r3, [r7, #24]
 801493c:	f107 0217 	add.w	r2, r7, #23
 8014940:	4611      	mov	r1, r2
 8014942:	4618      	mov	r0, r3
 8014944:	f000 faca 	bl	8014edc <lwip_netconn_is_err_msg>
 8014948:	4603      	mov	r3, r0
 801494a:	2b00      	cmp	r3, #0
 801494c:	d009      	beq.n	8014962 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 801494e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014952:	f113 0f0f 	cmn.w	r3, #15
 8014956:	d101      	bne.n	801495c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8014958:	2300      	movs	r3, #0
 801495a:	e022      	b.n	80149a2 <netconn_recv_data+0x172>
      }
      return err;
 801495c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014960:	e01f      	b.n	80149a2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8014962:	69bb      	ldr	r3, [r7, #24]
 8014964:	891b      	ldrh	r3, [r3, #8]
 8014966:	83fb      	strh	r3, [r7, #30]
 8014968:	e00d      	b.n	8014986 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801496a:	69bb      	ldr	r3, [r7, #24]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d106      	bne.n	801497e <netconn_recv_data+0x14e>
 8014970:	4b0e      	ldr	r3, [pc, #56]	; (80149ac <netconn_recv_data+0x17c>)
 8014972:	f240 2291 	movw	r2, #657	; 0x291
 8014976:	4911      	ldr	r1, [pc, #68]	; (80149bc <netconn_recv_data+0x18c>)
 8014978:	480e      	ldr	r0, [pc, #56]	; (80149b4 <netconn_recv_data+0x184>)
 801497a:	f00d fce1 	bl	8022340 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 801497e:	69bb      	ldr	r3, [r7, #24]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	891b      	ldrh	r3, [r3, #8]
 8014984:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801498a:	2b00      	cmp	r3, #0
 801498c:	d005      	beq.n	801499a <netconn_recv_data+0x16a>
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014992:	8bfa      	ldrh	r2, [r7, #30]
 8014994:	2101      	movs	r1, #1
 8014996:	68f8      	ldr	r0, [r7, #12]
 8014998:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801499a:	69ba      	ldr	r2, [r7, #24]
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80149a0:	2300      	movs	r3, #0
}
 80149a2:	4618      	mov	r0, r3
 80149a4:	3720      	adds	r7, #32
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd80      	pop	{r7, pc}
 80149aa:	bf00      	nop
 80149ac:	080238d4 	.word	0x080238d4
 80149b0:	08023aec 	.word	0x08023aec
 80149b4:	0802392c 	.word	0x0802392c
 80149b8:	08023b0c 	.word	0x08023b0c
 80149bc:	08023b28 	.word	0x08023b28

080149c0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b084      	sub	sp, #16
 80149c4:	af00      	add	r7, sp, #0
 80149c6:	60f8      	str	r0, [r7, #12]
 80149c8:	60b9      	str	r1, [r7, #8]
 80149ca:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d005      	beq.n	80149de <netconn_tcp_recvd_msg+0x1e>
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	781b      	ldrb	r3, [r3, #0]
 80149d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80149da:	2b10      	cmp	r3, #16
 80149dc:	d009      	beq.n	80149f2 <netconn_tcp_recvd_msg+0x32>
 80149de:	4b0c      	ldr	r3, [pc, #48]	; (8014a10 <netconn_tcp_recvd_msg+0x50>)
 80149e0:	f240 22a7 	movw	r2, #679	; 0x2a7
 80149e4:	490b      	ldr	r1, [pc, #44]	; (8014a14 <netconn_tcp_recvd_msg+0x54>)
 80149e6:	480c      	ldr	r0, [pc, #48]	; (8014a18 <netconn_tcp_recvd_msg+0x58>)
 80149e8:	f00d fcaa 	bl	8022340 <iprintf>
 80149ec:	f06f 030f 	mvn.w	r3, #15
 80149f0:	e00a      	b.n	8014a08 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	68fa      	ldr	r2, [r7, #12]
 80149f6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	68ba      	ldr	r2, [r7, #8]
 80149fc:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80149fe:	6879      	ldr	r1, [r7, #4]
 8014a00:	4806      	ldr	r0, [pc, #24]	; (8014a1c <netconn_tcp_recvd_msg+0x5c>)
 8014a02:	f7ff fd4d 	bl	80144a0 <netconn_apimsg>
 8014a06:	4603      	mov	r3, r0
}
 8014a08:	4618      	mov	r0, r3
 8014a0a:	3710      	adds	r7, #16
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd80      	pop	{r7, pc}
 8014a10:	080238d4 	.word	0x080238d4
 8014a14:	08023b34 	.word	0x08023b34
 8014a18:	0802392c 	.word	0x0802392c
 8014a1c:	08015fe9 	.word	0x08015fe9

08014a20 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b090      	sub	sp, #64	; 0x40
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	60f8      	str	r0, [r7, #12]
 8014a28:	60b9      	str	r1, [r7, #8]
 8014a2a:	4613      	mov	r3, r2
 8014a2c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	3310      	adds	r3, #16
 8014a32:	4618      	mov	r0, r3
 8014a34:	f00d f802 	bl	8021a3c <sys_mbox_valid>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d102      	bne.n	8014a44 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8014a3e:	f06f 030a 	mvn.w	r3, #10
 8014a42:	e06d      	b.n	8014b20 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	7f1b      	ldrb	r3, [r3, #28]
 8014a48:	b25b      	sxtb	r3, r3
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	da07      	bge.n	8014a5e <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	7f1b      	ldrb	r3, [r3, #28]
 8014a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014a56:	b2da      	uxtb	r2, r3
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8014a5c:	e039      	b.n	8014ad2 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8014a5e:	79fb      	ldrb	r3, [r7, #7]
 8014a60:	461a      	mov	r2, r3
 8014a62:	68b9      	ldr	r1, [r7, #8]
 8014a64:	68f8      	ldr	r0, [r7, #12]
 8014a66:	f7ff fee3 	bl	8014830 <netconn_recv_data>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8014a70:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d002      	beq.n	8014a7e <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8014a78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014a7c:	e050      	b.n	8014b20 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8014a7e:	68bb      	ldr	r3, [r7, #8]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8014a84:	79fb      	ldrb	r3, [r7, #7]
 8014a86:	f003 0308 	and.w	r3, r3, #8
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d10e      	bne.n	8014aac <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8014a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d002      	beq.n	8014a9a <netconn_recv_data_tcp+0x7a>
 8014a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a96:	891b      	ldrh	r3, [r3, #8]
 8014a98:	e000      	b.n	8014a9c <netconn_recv_data_tcp+0x7c>
 8014a9a:	2301      	movs	r3, #1
 8014a9c:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8014a9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014aa0:	f107 0214 	add.w	r2, r7, #20
 8014aa4:	4619      	mov	r1, r3
 8014aa6:	68f8      	ldr	r0, [r7, #12]
 8014aa8:	f7ff ff8a 	bl	80149c0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8014aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d134      	bne.n	8014b1c <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8014ab2:	79fb      	ldrb	r3, [r7, #7]
 8014ab4:	f003 0310 	and.w	r3, r3, #16
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d009      	beq.n	8014ad0 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	7f1b      	ldrb	r3, [r3, #28]
 8014ac0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014ac4:	b2da      	uxtb	r2, r3
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8014aca:	f06f 0306 	mvn.w	r3, #6
 8014ace:	e027      	b.n	8014b20 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8014ad0:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d005      	beq.n	8014ae6 <netconn_recv_data_tcp+0xc6>
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ade:	2200      	movs	r2, #0
 8014ae0:	2101      	movs	r1, #1
 8014ae2:	68f8      	ldr	r0, [r7, #12]
 8014ae4:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	685b      	ldr	r3, [r3, #4]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d10f      	bne.n	8014b0e <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8014aee:	68f8      	ldr	r0, [r7, #12]
 8014af0:	f000 f9a3 	bl	8014e3a <netconn_err>
 8014af4:	4603      	mov	r3, r0
 8014af6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8014afa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d002      	beq.n	8014b08 <netconn_recv_data_tcp+0xe8>
          return err;
 8014b02:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014b06:	e00b      	b.n	8014b20 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8014b08:	f06f 030d 	mvn.w	r3, #13
 8014b0c:	e008      	b.n	8014b20 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8014b0e:	2101      	movs	r1, #1
 8014b10:	68f8      	ldr	r0, [r7, #12]
 8014b12:	f000 f955 	bl	8014dc0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8014b16:	f06f 030e 	mvn.w	r3, #14
 8014b1a:	e001      	b.n	8014b20 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8014b1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8014b20:	4618      	mov	r0, r3
 8014b22:	3740      	adds	r7, #64	; 0x40
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd80      	pop	{r7, pc}

08014b28 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b086      	sub	sp, #24
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
 8014b30:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8014b32:	2300      	movs	r3, #0
 8014b34:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014b36:	683b      	ldr	r3, [r7, #0]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d109      	bne.n	8014b50 <netconn_recv+0x28>
 8014b3c:	4b32      	ldr	r3, [pc, #200]	; (8014c08 <netconn_recv+0xe0>)
 8014b3e:	f240 3263 	movw	r2, #867	; 0x363
 8014b42:	4932      	ldr	r1, [pc, #200]	; (8014c0c <netconn_recv+0xe4>)
 8014b44:	4832      	ldr	r0, [pc, #200]	; (8014c10 <netconn_recv+0xe8>)
 8014b46:	f00d fbfb 	bl	8022340 <iprintf>
 8014b4a:	f06f 030f 	mvn.w	r3, #15
 8014b4e:	e056      	b.n	8014bfe <netconn_recv+0xd6>
  *new_buf = NULL;
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	2200      	movs	r2, #0
 8014b54:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d109      	bne.n	8014b70 <netconn_recv+0x48>
 8014b5c:	4b2a      	ldr	r3, [pc, #168]	; (8014c08 <netconn_recv+0xe0>)
 8014b5e:	f240 3265 	movw	r2, #869	; 0x365
 8014b62:	492c      	ldr	r1, [pc, #176]	; (8014c14 <netconn_recv+0xec>)
 8014b64:	482a      	ldr	r0, [pc, #168]	; (8014c10 <netconn_recv+0xe8>)
 8014b66:	f00d fbeb 	bl	8022340 <iprintf>
 8014b6a:	f06f 030f 	mvn.w	r3, #15
 8014b6e:	e046      	b.n	8014bfe <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	781b      	ldrb	r3, [r3, #0]
 8014b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014b78:	2b10      	cmp	r3, #16
 8014b7a:	d13a      	bne.n	8014bf2 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8014b80:	2006      	movs	r0, #6
 8014b82:	f002 fd2d 	bl	80175e0 <memp_malloc>
 8014b86:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8014b88:	697b      	ldr	r3, [r7, #20]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d102      	bne.n	8014b94 <netconn_recv+0x6c>
      return ERR_MEM;
 8014b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8014b92:	e034      	b.n	8014bfe <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8014b94:	f107 030c 	add.w	r3, r7, #12
 8014b98:	2200      	movs	r2, #0
 8014b9a:	4619      	mov	r1, r3
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	f7ff ff3f 	bl	8014a20 <netconn_recv_data_tcp>
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014ba6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d006      	beq.n	8014bbc <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8014bae:	6979      	ldr	r1, [r7, #20]
 8014bb0:	2006      	movs	r0, #6
 8014bb2:	f002 fd8b 	bl	80176cc <memp_free>
      return err;
 8014bb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014bba:	e020      	b.n	8014bfe <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d106      	bne.n	8014bd0 <netconn_recv+0xa8>
 8014bc2:	4b11      	ldr	r3, [pc, #68]	; (8014c08 <netconn_recv+0xe0>)
 8014bc4:	f240 3279 	movw	r2, #889	; 0x379
 8014bc8:	4913      	ldr	r1, [pc, #76]	; (8014c18 <netconn_recv+0xf0>)
 8014bca:	4811      	ldr	r0, [pc, #68]	; (8014c10 <netconn_recv+0xe8>)
 8014bcc:	f00d fbb8 	bl	8022340 <iprintf>

    buf->p = p;
 8014bd0:	68fa      	ldr	r2, [r7, #12]
 8014bd2:	697b      	ldr	r3, [r7, #20]
 8014bd4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8014bd6:	68fa      	ldr	r2, [r7, #12]
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	2200      	movs	r2, #0
 8014be0:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8014be2:	697b      	ldr	r3, [r7, #20]
 8014be4:	2200      	movs	r2, #0
 8014be6:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	697a      	ldr	r2, [r7, #20]
 8014bec:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8014bee:	2300      	movs	r3, #0
 8014bf0:	e005      	b.n	8014bfe <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	6839      	ldr	r1, [r7, #0]
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f7ff fe1a 	bl	8014830 <netconn_recv_data>
 8014bfc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3718      	adds	r7, #24
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd80      	pop	{r7, pc}
 8014c06:	bf00      	nop
 8014c08:	080238d4 	.word	0x080238d4
 8014c0c:	08023aec 	.word	0x08023aec
 8014c10:	0802392c 	.word	0x0802392c
 8014c14:	08023b0c 	.word	0x08023b0c
 8014c18:	08023b84 	.word	0x08023b84

08014c1c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b088      	sub	sp, #32
 8014c20:	af02      	add	r7, sp, #8
 8014c22:	60f8      	str	r0, [r7, #12]
 8014c24:	60b9      	str	r1, [r7, #8]
 8014c26:	607a      	str	r2, [r7, #4]
 8014c28:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8014c2a:	68bb      	ldr	r3, [r7, #8]
 8014c2c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8014c32:	78fa      	ldrb	r2, [r7, #3]
 8014c34:	f107 0110 	add.w	r1, r7, #16
 8014c38:	6a3b      	ldr	r3, [r7, #32]
 8014c3a:	9300      	str	r3, [sp, #0]
 8014c3c:	4613      	mov	r3, r2
 8014c3e:	2201      	movs	r2, #1
 8014c40:	68f8      	ldr	r0, [r7, #12]
 8014c42:	f000 f805 	bl	8014c50 <netconn_write_vectors_partly>
 8014c46:	4603      	mov	r3, r0
}
 8014c48:	4618      	mov	r0, r3
 8014c4a:	3718      	adds	r7, #24
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	bd80      	pop	{r7, pc}

08014c50 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b092      	sub	sp, #72	; 0x48
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	60f8      	str	r0, [r7, #12]
 8014c58:	60b9      	str	r1, [r7, #8]
 8014c5a:	4611      	mov	r1, r2
 8014c5c:	461a      	mov	r2, r3
 8014c5e:	460b      	mov	r3, r1
 8014c60:	80fb      	strh	r3, [r7, #6]
 8014c62:	4613      	mov	r3, r2
 8014c64:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d109      	bne.n	8014c80 <netconn_write_vectors_partly+0x30>
 8014c6c:	4b4e      	ldr	r3, [pc, #312]	; (8014da8 <netconn_write_vectors_partly+0x158>)
 8014c6e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8014c72:	494e      	ldr	r1, [pc, #312]	; (8014dac <netconn_write_vectors_partly+0x15c>)
 8014c74:	484e      	ldr	r0, [pc, #312]	; (8014db0 <netconn_write_vectors_partly+0x160>)
 8014c76:	f00d fb63 	bl	8022340 <iprintf>
 8014c7a:	f06f 030f 	mvn.w	r3, #15
 8014c7e:	e08e      	b.n	8014d9e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	781b      	ldrb	r3, [r3, #0]
 8014c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c88:	2b10      	cmp	r3, #16
 8014c8a:	d009      	beq.n	8014ca0 <netconn_write_vectors_partly+0x50>
 8014c8c:	4b46      	ldr	r3, [pc, #280]	; (8014da8 <netconn_write_vectors_partly+0x158>)
 8014c8e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8014c92:	4948      	ldr	r1, [pc, #288]	; (8014db4 <netconn_write_vectors_partly+0x164>)
 8014c94:	4846      	ldr	r0, [pc, #280]	; (8014db0 <netconn_write_vectors_partly+0x160>)
 8014c96:	f00d fb53 	bl	8022340 <iprintf>
 8014c9a:	f06f 0305 	mvn.w	r3, #5
 8014c9e:	e07e      	b.n	8014d9e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	7f1b      	ldrb	r3, [r3, #28]
 8014ca4:	f003 0302 	and.w	r3, r3, #2
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d104      	bne.n	8014cb6 <netconn_write_vectors_partly+0x66>
 8014cac:	797b      	ldrb	r3, [r7, #5]
 8014cae:	f003 0304 	and.w	r3, r3, #4
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d001      	beq.n	8014cba <netconn_write_vectors_partly+0x6a>
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	e000      	b.n	8014cbc <netconn_write_vectors_partly+0x6c>
 8014cba:	2300      	movs	r3, #0
 8014cbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8014cc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d005      	beq.n	8014cd4 <netconn_write_vectors_partly+0x84>
 8014cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d102      	bne.n	8014cd4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8014cce:	f06f 0305 	mvn.w	r3, #5
 8014cd2:	e064      	b.n	8014d9e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8014cd8:	2300      	movs	r3, #0
 8014cda:	643b      	str	r3, [r7, #64]	; 0x40
 8014cdc:	e015      	b.n	8014d0a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8014cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ce0:	00db      	lsls	r3, r3, #3
 8014ce2:	68ba      	ldr	r2, [r7, #8]
 8014ce4:	4413      	add	r3, r2
 8014ce6:	685b      	ldr	r3, [r3, #4]
 8014ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014cea:	4413      	add	r3, r2
 8014cec:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8014cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014cf0:	00db      	lsls	r3, r3, #3
 8014cf2:	68ba      	ldr	r2, [r7, #8]
 8014cf4:	4413      	add	r3, r2
 8014cf6:	685b      	ldr	r3, [r3, #4]
 8014cf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	d202      	bcs.n	8014d04 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8014cfe:	f06f 0305 	mvn.w	r3, #5
 8014d02:	e04c      	b.n	8014d9e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8014d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d06:	3301      	adds	r3, #1
 8014d08:	643b      	str	r3, [r7, #64]	; 0x40
 8014d0a:	88fb      	ldrh	r3, [r7, #6]
 8014d0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014d0e:	429a      	cmp	r2, r3
 8014d10:	dbe5      	blt.n	8014cde <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8014d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d101      	bne.n	8014d1c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8014d18:	2300      	movs	r3, #0
 8014d1a:	e040      	b.n	8014d9e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8014d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	da0a      	bge.n	8014d38 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8014d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d102      	bne.n	8014d2e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8014d28:	f06f 0305 	mvn.w	r3, #5
 8014d2c:	e037      	b.n	8014d9e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8014d2e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014d32:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8014d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d36:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8014d3c:	68bb      	ldr	r3, [r7, #8]
 8014d3e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8014d40:	88fb      	ldrh	r3, [r7, #6]
 8014d42:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8014d44:	2300      	movs	r3, #0
 8014d46:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8014d48:	797b      	ldrb	r3, [r7, #5]
 8014d4a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8014d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d50:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8014d52:	2300      	movs	r3, #0
 8014d54:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8014d56:	f107 0314 	add.w	r3, r7, #20
 8014d5a:	4619      	mov	r1, r3
 8014d5c:	4816      	ldr	r0, [pc, #88]	; (8014db8 <netconn_write_vectors_partly+0x168>)
 8014d5e:	f7ff fb9f 	bl	80144a0 <netconn_apimsg>
 8014d62:	4603      	mov	r3, r0
 8014d64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8014d68:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d114      	bne.n	8014d9a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8014d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d002      	beq.n	8014d7c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8014d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d7a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8014d7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d10a      	bne.n	8014d9a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8014d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014d88:	429a      	cmp	r2, r3
 8014d8a:	d006      	beq.n	8014d9a <netconn_write_vectors_partly+0x14a>
 8014d8c:	4b06      	ldr	r3, [pc, #24]	; (8014da8 <netconn_write_vectors_partly+0x158>)
 8014d8e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014d92:	490a      	ldr	r1, [pc, #40]	; (8014dbc <netconn_write_vectors_partly+0x16c>)
 8014d94:	4806      	ldr	r0, [pc, #24]	; (8014db0 <netconn_write_vectors_partly+0x160>)
 8014d96:	f00d fad3 	bl	8022340 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8014d9a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	3748      	adds	r7, #72	; 0x48
 8014da2:	46bd      	mov	sp, r7
 8014da4:	bd80      	pop	{r7, pc}
 8014da6:	bf00      	nop
 8014da8:	080238d4 	.word	0x080238d4
 8014dac:	08023bac 	.word	0x08023bac
 8014db0:	0802392c 	.word	0x0802392c
 8014db4:	08023bc8 	.word	0x08023bc8
 8014db8:	080163ed 	.word	0x080163ed
 8014dbc:	08023bec 	.word	0x08023bec

08014dc0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b08c      	sub	sp, #48	; 0x30
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
 8014dc8:	460b      	mov	r3, r1
 8014dca:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d109      	bne.n	8014de6 <netconn_close_shutdown+0x26>
 8014dd2:	4b0f      	ldr	r3, [pc, #60]	; (8014e10 <netconn_close_shutdown+0x50>)
 8014dd4:	f240 4247 	movw	r2, #1095	; 0x447
 8014dd8:	490e      	ldr	r1, [pc, #56]	; (8014e14 <netconn_close_shutdown+0x54>)
 8014dda:	480f      	ldr	r0, [pc, #60]	; (8014e18 <netconn_close_shutdown+0x58>)
 8014ddc:	f00d fab0 	bl	8022340 <iprintf>
 8014de0:	f06f 030f 	mvn.w	r3, #15
 8014de4:	e010      	b.n	8014e08 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8014dea:	78fb      	ldrb	r3, [r7, #3]
 8014dec:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8014dee:	2329      	movs	r3, #41	; 0x29
 8014df0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8014df2:	f107 030c 	add.w	r3, r7, #12
 8014df6:	4619      	mov	r1, r3
 8014df8:	4808      	ldr	r0, [pc, #32]	; (8014e1c <netconn_close_shutdown+0x5c>)
 8014dfa:	f7ff fb51 	bl	80144a0 <netconn_apimsg>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8014e04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8014e08:	4618      	mov	r0, r3
 8014e0a:	3730      	adds	r7, #48	; 0x30
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	bd80      	pop	{r7, pc}
 8014e10:	080238d4 	.word	0x080238d4
 8014e14:	08023c10 	.word	0x08023c10
 8014e18:	0802392c 	.word	0x0802392c
 8014e1c:	08016505 	.word	0x08016505

08014e20 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b082      	sub	sp, #8
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8014e28:	2103      	movs	r1, #3
 8014e2a:	6878      	ldr	r0, [r7, #4]
 8014e2c:	f7ff ffc8 	bl	8014dc0 <netconn_close_shutdown>
 8014e30:	4603      	mov	r3, r0
}
 8014e32:	4618      	mov	r0, r3
 8014e34:	3708      	adds	r7, #8
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bd80      	pop	{r7, pc}

08014e3a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8014e3a:	b580      	push	{r7, lr}
 8014e3c:	b084      	sub	sp, #16
 8014e3e:	af00      	add	r7, sp, #0
 8014e40:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d101      	bne.n	8014e4c <netconn_err+0x12>
    return ERR_OK;
 8014e48:	2300      	movs	r3, #0
 8014e4a:	e00d      	b.n	8014e68 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8014e4c:	f00c ff00 	bl	8021c50 <sys_arch_protect>
 8014e50:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	7a1b      	ldrb	r3, [r3, #8]
 8014e56:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8014e5e:	68f8      	ldr	r0, [r7, #12]
 8014e60:	f00c ff04 	bl	8021c6c <sys_arch_unprotect>
  return err;
 8014e64:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014e68:	4618      	mov	r0, r3
 8014e6a:	3710      	adds	r7, #16
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}

08014e70 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b082      	sub	sp, #8
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	4603      	mov	r3, r0
 8014e78:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8014e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014e7e:	f113 0f0d 	cmn.w	r3, #13
 8014e82:	d009      	beq.n	8014e98 <lwip_netconn_err_to_msg+0x28>
 8014e84:	f113 0f0d 	cmn.w	r3, #13
 8014e88:	dc0c      	bgt.n	8014ea4 <lwip_netconn_err_to_msg+0x34>
 8014e8a:	f113 0f0f 	cmn.w	r3, #15
 8014e8e:	d007      	beq.n	8014ea0 <lwip_netconn_err_to_msg+0x30>
 8014e90:	f113 0f0e 	cmn.w	r3, #14
 8014e94:	d002      	beq.n	8014e9c <lwip_netconn_err_to_msg+0x2c>
 8014e96:	e005      	b.n	8014ea4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8014e98:	4b0a      	ldr	r3, [pc, #40]	; (8014ec4 <lwip_netconn_err_to_msg+0x54>)
 8014e9a:	e00e      	b.n	8014eba <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8014e9c:	4b0a      	ldr	r3, [pc, #40]	; (8014ec8 <lwip_netconn_err_to_msg+0x58>)
 8014e9e:	e00c      	b.n	8014eba <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8014ea0:	4b0a      	ldr	r3, [pc, #40]	; (8014ecc <lwip_netconn_err_to_msg+0x5c>)
 8014ea2:	e00a      	b.n	8014eba <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8014ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d005      	beq.n	8014eb8 <lwip_netconn_err_to_msg+0x48>
 8014eac:	4b08      	ldr	r3, [pc, #32]	; (8014ed0 <lwip_netconn_err_to_msg+0x60>)
 8014eae:	227d      	movs	r2, #125	; 0x7d
 8014eb0:	4908      	ldr	r1, [pc, #32]	; (8014ed4 <lwip_netconn_err_to_msg+0x64>)
 8014eb2:	4809      	ldr	r0, [pc, #36]	; (8014ed8 <lwip_netconn_err_to_msg+0x68>)
 8014eb4:	f00d fa44 	bl	8022340 <iprintf>
      return NULL;
 8014eb8:	2300      	movs	r3, #0
  }
}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	3708      	adds	r7, #8
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bd80      	pop	{r7, pc}
 8014ec2:	bf00      	nop
 8014ec4:	08026fb0 	.word	0x08026fb0
 8014ec8:	08026fb1 	.word	0x08026fb1
 8014ecc:	08026fb2 	.word	0x08026fb2
 8014ed0:	08023c2c 	.word	0x08023c2c
 8014ed4:	08023c60 	.word	0x08023c60
 8014ed8:	08023c70 	.word	0x08023c70

08014edc <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b082      	sub	sp, #8
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
 8014ee4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d105      	bne.n	8014ef8 <lwip_netconn_is_err_msg+0x1c>
 8014eec:	4b12      	ldr	r3, [pc, #72]	; (8014f38 <lwip_netconn_is_err_msg+0x5c>)
 8014eee:	2285      	movs	r2, #133	; 0x85
 8014ef0:	4912      	ldr	r1, [pc, #72]	; (8014f3c <lwip_netconn_is_err_msg+0x60>)
 8014ef2:	4813      	ldr	r0, [pc, #76]	; (8014f40 <lwip_netconn_is_err_msg+0x64>)
 8014ef4:	f00d fa24 	bl	8022340 <iprintf>

  if (msg == &netconn_aborted) {
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	4a12      	ldr	r2, [pc, #72]	; (8014f44 <lwip_netconn_is_err_msg+0x68>)
 8014efc:	4293      	cmp	r3, r2
 8014efe:	d104      	bne.n	8014f0a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	22f3      	movs	r2, #243	; 0xf3
 8014f04:	701a      	strb	r2, [r3, #0]
    return 1;
 8014f06:	2301      	movs	r3, #1
 8014f08:	e012      	b.n	8014f30 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	4a0e      	ldr	r2, [pc, #56]	; (8014f48 <lwip_netconn_is_err_msg+0x6c>)
 8014f0e:	4293      	cmp	r3, r2
 8014f10:	d104      	bne.n	8014f1c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8014f12:	683b      	ldr	r3, [r7, #0]
 8014f14:	22f2      	movs	r2, #242	; 0xf2
 8014f16:	701a      	strb	r2, [r3, #0]
    return 1;
 8014f18:	2301      	movs	r3, #1
 8014f1a:	e009      	b.n	8014f30 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	4a0b      	ldr	r2, [pc, #44]	; (8014f4c <lwip_netconn_is_err_msg+0x70>)
 8014f20:	4293      	cmp	r3, r2
 8014f22:	d104      	bne.n	8014f2e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	22f1      	movs	r2, #241	; 0xf1
 8014f28:	701a      	strb	r2, [r3, #0]
    return 1;
 8014f2a:	2301      	movs	r3, #1
 8014f2c:	e000      	b.n	8014f30 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8014f2e:	2300      	movs	r3, #0
}
 8014f30:	4618      	mov	r0, r3
 8014f32:	3708      	adds	r7, #8
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}
 8014f38:	08023c2c 	.word	0x08023c2c
 8014f3c:	08023c98 	.word	0x08023c98
 8014f40:	08023c70 	.word	0x08023c70
 8014f44:	08026fb0 	.word	0x08026fb0
 8014f48:	08026fb1 	.word	0x08026fb1
 8014f4c:	08026fb2 	.word	0x08026fb2

08014f50 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b088      	sub	sp, #32
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	60f8      	str	r0, [r7, #12]
 8014f58:	60b9      	str	r1, [r7, #8]
 8014f5a:	607a      	str	r2, [r7, #4]
 8014f5c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8014f5e:	68bb      	ldr	r3, [r7, #8]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d105      	bne.n	8014f70 <recv_udp+0x20>
 8014f64:	4b34      	ldr	r3, [pc, #208]	; (8015038 <recv_udp+0xe8>)
 8014f66:	22e5      	movs	r2, #229	; 0xe5
 8014f68:	4934      	ldr	r1, [pc, #208]	; (801503c <recv_udp+0xec>)
 8014f6a:	4835      	ldr	r0, [pc, #212]	; (8015040 <recv_udp+0xf0>)
 8014f6c:	f00d f9e8 	bl	8022340 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d105      	bne.n	8014f82 <recv_udp+0x32>
 8014f76:	4b30      	ldr	r3, [pc, #192]	; (8015038 <recv_udp+0xe8>)
 8014f78:	22e6      	movs	r2, #230	; 0xe6
 8014f7a:	4932      	ldr	r1, [pc, #200]	; (8015044 <recv_udp+0xf4>)
 8014f7c:	4830      	ldr	r0, [pc, #192]	; (8015040 <recv_udp+0xf0>)
 8014f7e:	f00d f9df 	bl	8022340 <iprintf>
  conn = (struct netconn *)arg;
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8014f86:	69fb      	ldr	r3, [r7, #28]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d103      	bne.n	8014f94 <recv_udp+0x44>
    pbuf_free(p);
 8014f8c:	6878      	ldr	r0, [r7, #4]
 8014f8e:	f003 fa41 	bl	8018414 <pbuf_free>
    return;
 8014f92:	e04d      	b.n	8015030 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8014f94:	69fb      	ldr	r3, [r7, #28]
 8014f96:	685b      	ldr	r3, [r3, #4]
 8014f98:	68ba      	ldr	r2, [r7, #8]
 8014f9a:	429a      	cmp	r2, r3
 8014f9c:	d005      	beq.n	8014faa <recv_udp+0x5a>
 8014f9e:	4b26      	ldr	r3, [pc, #152]	; (8015038 <recv_udp+0xe8>)
 8014fa0:	22ee      	movs	r2, #238	; 0xee
 8014fa2:	4929      	ldr	r1, [pc, #164]	; (8015048 <recv_udp+0xf8>)
 8014fa4:	4826      	ldr	r0, [pc, #152]	; (8015040 <recv_udp+0xf0>)
 8014fa6:	f00d f9cb 	bl	8022340 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8014faa:	69fb      	ldr	r3, [r7, #28]
 8014fac:	3310      	adds	r3, #16
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f00c fd44 	bl	8021a3c <sys_mbox_valid>
 8014fb4:	4603      	mov	r3, r0
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d103      	bne.n	8014fc2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f003 fa2a 	bl	8018414 <pbuf_free>
    return;
 8014fc0:	e036      	b.n	8015030 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8014fc2:	2006      	movs	r0, #6
 8014fc4:	f002 fb0c 	bl	80175e0 <memp_malloc>
 8014fc8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8014fca:	69bb      	ldr	r3, [r7, #24]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d103      	bne.n	8014fd8 <recv_udp+0x88>
    pbuf_free(p);
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	f003 fa1f 	bl	8018414 <pbuf_free>
    return;
 8014fd6:	e02b      	b.n	8015030 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8014fd8:	69bb      	ldr	r3, [r7, #24]
 8014fda:	687a      	ldr	r2, [r7, #4]
 8014fdc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8014fde:	69bb      	ldr	r3, [r7, #24]
 8014fe0:	687a      	ldr	r2, [r7, #4]
 8014fe2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d002      	beq.n	8014ff0 <recv_udp+0xa0>
 8014fea:	683b      	ldr	r3, [r7, #0]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	e000      	b.n	8014ff2 <recv_udp+0xa2>
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	69ba      	ldr	r2, [r7, #24]
 8014ff4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8014ff6:	69bb      	ldr	r3, [r7, #24]
 8014ff8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8014ffa:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	891b      	ldrh	r3, [r3, #8]
 8015000:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8015002:	69fb      	ldr	r3, [r7, #28]
 8015004:	3310      	adds	r3, #16
 8015006:	69b9      	ldr	r1, [r7, #24]
 8015008:	4618      	mov	r0, r3
 801500a:	f00c fcb5 	bl	8021978 <sys_mbox_trypost>
 801500e:	4603      	mov	r3, r0
 8015010:	2b00      	cmp	r3, #0
 8015012:	d003      	beq.n	801501c <recv_udp+0xcc>
    netbuf_delete(buf);
 8015014:	69b8      	ldr	r0, [r7, #24]
 8015016:	f001 fb01 	bl	801661c <netbuf_delete>
    return;
 801501a:	e009      	b.n	8015030 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801501c:	69fb      	ldr	r3, [r7, #28]
 801501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015020:	2b00      	cmp	r3, #0
 8015022:	d005      	beq.n	8015030 <recv_udp+0xe0>
 8015024:	69fb      	ldr	r3, [r7, #28]
 8015026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015028:	8afa      	ldrh	r2, [r7, #22]
 801502a:	2100      	movs	r1, #0
 801502c:	69f8      	ldr	r0, [r7, #28]
 801502e:	4798      	blx	r3
  }
}
 8015030:	3720      	adds	r7, #32
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	08023c2c 	.word	0x08023c2c
 801503c:	08023ca4 	.word	0x08023ca4
 8015040:	08023c70 	.word	0x08023c70
 8015044:	08023cc8 	.word	0x08023cc8
 8015048:	08023ce8 	.word	0x08023ce8

0801504c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b088      	sub	sp, #32
 8015050:	af00      	add	r7, sp, #0
 8015052:	60f8      	str	r0, [r7, #12]
 8015054:	60b9      	str	r1, [r7, #8]
 8015056:	607a      	str	r2, [r7, #4]
 8015058:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 801505a:	68bb      	ldr	r3, [r7, #8]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d106      	bne.n	801506e <recv_tcp+0x22>
 8015060:	4b36      	ldr	r3, [pc, #216]	; (801513c <recv_tcp+0xf0>)
 8015062:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8015066:	4936      	ldr	r1, [pc, #216]	; (8015140 <recv_tcp+0xf4>)
 8015068:	4836      	ldr	r0, [pc, #216]	; (8015144 <recv_tcp+0xf8>)
 801506a:	f00d f969 	bl	8022340 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d106      	bne.n	8015082 <recv_tcp+0x36>
 8015074:	4b31      	ldr	r3, [pc, #196]	; (801513c <recv_tcp+0xf0>)
 8015076:	f240 122d 	movw	r2, #301	; 0x12d
 801507a:	4933      	ldr	r1, [pc, #204]	; (8015148 <recv_tcp+0xfc>)
 801507c:	4831      	ldr	r0, [pc, #196]	; (8015144 <recv_tcp+0xf8>)
 801507e:	f00d f95f 	bl	8022340 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8015082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d006      	beq.n	8015098 <recv_tcp+0x4c>
 801508a:	4b2c      	ldr	r3, [pc, #176]	; (801513c <recv_tcp+0xf0>)
 801508c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8015090:	492e      	ldr	r1, [pc, #184]	; (801514c <recv_tcp+0x100>)
 8015092:	482c      	ldr	r0, [pc, #176]	; (8015144 <recv_tcp+0xf8>)
 8015094:	f00d f954 	bl	8022340 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 801509c:	697b      	ldr	r3, [r7, #20]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d102      	bne.n	80150a8 <recv_tcp+0x5c>
    return ERR_VAL;
 80150a2:	f06f 0305 	mvn.w	r3, #5
 80150a6:	e045      	b.n	8015134 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80150a8:	697b      	ldr	r3, [r7, #20]
 80150aa:	685b      	ldr	r3, [r3, #4]
 80150ac:	68ba      	ldr	r2, [r7, #8]
 80150ae:	429a      	cmp	r2, r3
 80150b0:	d006      	beq.n	80150c0 <recv_tcp+0x74>
 80150b2:	4b22      	ldr	r3, [pc, #136]	; (801513c <recv_tcp+0xf0>)
 80150b4:	f240 1235 	movw	r2, #309	; 0x135
 80150b8:	4925      	ldr	r1, [pc, #148]	; (8015150 <recv_tcp+0x104>)
 80150ba:	4822      	ldr	r0, [pc, #136]	; (8015144 <recv_tcp+0xf8>)
 80150bc:	f00d f940 	bl	8022340 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80150c0:	697b      	ldr	r3, [r7, #20]
 80150c2:	3310      	adds	r3, #16
 80150c4:	4618      	mov	r0, r3
 80150c6:	f00c fcb9 	bl	8021a3c <sys_mbox_valid>
 80150ca:	4603      	mov	r3, r0
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d10d      	bne.n	80150ec <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d008      	beq.n	80150e8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	891b      	ldrh	r3, [r3, #8]
 80150da:	4619      	mov	r1, r3
 80150dc:	68b8      	ldr	r0, [r7, #8]
 80150de:	f004 f951 	bl	8019384 <tcp_recved>
      pbuf_free(p);
 80150e2:	6878      	ldr	r0, [r7, #4]
 80150e4:	f003 f996 	bl	8018414 <pbuf_free>
    }
    return ERR_OK;
 80150e8:	2300      	movs	r3, #0
 80150ea:	e023      	b.n	8015134 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d005      	beq.n	80150fe <recv_tcp+0xb2>
    msg = p;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	891b      	ldrh	r3, [r3, #8]
 80150fa:	83fb      	strh	r3, [r7, #30]
 80150fc:	e003      	b.n	8015106 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80150fe:	4b15      	ldr	r3, [pc, #84]	; (8015154 <recv_tcp+0x108>)
 8015100:	61bb      	str	r3, [r7, #24]
    len = 0;
 8015102:	2300      	movs	r3, #0
 8015104:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8015106:	697b      	ldr	r3, [r7, #20]
 8015108:	3310      	adds	r3, #16
 801510a:	69b9      	ldr	r1, [r7, #24]
 801510c:	4618      	mov	r0, r3
 801510e:	f00c fc33 	bl	8021978 <sys_mbox_trypost>
 8015112:	4603      	mov	r3, r0
 8015114:	2b00      	cmp	r3, #0
 8015116:	d002      	beq.n	801511e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8015118:	f04f 33ff 	mov.w	r3, #4294967295
 801511c:	e00a      	b.n	8015134 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015122:	2b00      	cmp	r3, #0
 8015124:	d005      	beq.n	8015132 <recv_tcp+0xe6>
 8015126:	697b      	ldr	r3, [r7, #20]
 8015128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801512a:	8bfa      	ldrh	r2, [r7, #30]
 801512c:	2100      	movs	r1, #0
 801512e:	6978      	ldr	r0, [r7, #20]
 8015130:	4798      	blx	r3
  }

  return ERR_OK;
 8015132:	2300      	movs	r3, #0
}
 8015134:	4618      	mov	r0, r3
 8015136:	3720      	adds	r7, #32
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}
 801513c:	08023c2c 	.word	0x08023c2c
 8015140:	08023d08 	.word	0x08023d08
 8015144:	08023c70 	.word	0x08023c70
 8015148:	08023d2c 	.word	0x08023d2c
 801514c:	08023d4c 	.word	0x08023d4c
 8015150:	08023d64 	.word	0x08023d64
 8015154:	08026fb2 	.word	0x08026fb2

08015158 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8015158:	b580      	push	{r7, lr}
 801515a:	b084      	sub	sp, #16
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
 8015160:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d106      	bne.n	801517a <poll_tcp+0x22>
 801516c:	4b29      	ldr	r3, [pc, #164]	; (8015214 <poll_tcp+0xbc>)
 801516e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8015172:	4929      	ldr	r1, [pc, #164]	; (8015218 <poll_tcp+0xc0>)
 8015174:	4829      	ldr	r0, [pc, #164]	; (801521c <poll_tcp+0xc4>)
 8015176:	f00d f8e3 	bl	8022340 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	785b      	ldrb	r3, [r3, #1]
 801517e:	2b01      	cmp	r3, #1
 8015180:	d104      	bne.n	801518c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8015182:	2101      	movs	r1, #1
 8015184:	68f8      	ldr	r0, [r7, #12]
 8015186:	f000 ff65 	bl	8016054 <lwip_netconn_do_writemore>
 801518a:	e016      	b.n	80151ba <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	785b      	ldrb	r3, [r3, #1]
 8015190:	2b04      	cmp	r3, #4
 8015192:	d112      	bne.n	80151ba <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	6a1b      	ldr	r3, [r3, #32]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d00a      	beq.n	80151b2 <poll_tcp+0x5a>
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	6a1b      	ldr	r3, [r3, #32]
 80151a0:	7a5b      	ldrb	r3, [r3, #9]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d005      	beq.n	80151b2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	6a1b      	ldr	r3, [r3, #32]
 80151aa:	7a5a      	ldrb	r2, [r3, #9]
 80151ac:	3a01      	subs	r2, #1
 80151ae:	b2d2      	uxtb	r2, r2
 80151b0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80151b2:	2101      	movs	r1, #1
 80151b4:	68f8      	ldr	r0, [r7, #12]
 80151b6:	f000 fbf7 	bl	80159a8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	7f1b      	ldrb	r3, [r3, #28]
 80151be:	f003 0310 	and.w	r3, r3, #16
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d021      	beq.n	801520a <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	685b      	ldr	r3, [r3, #4]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d01d      	beq.n	801520a <poll_tcp+0xb2>
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	685b      	ldr	r3, [r3, #4]
 80151d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80151d6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80151da:	d316      	bcc.n	801520a <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	685b      	ldr	r3, [r3, #4]
 80151e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80151e4:	2b04      	cmp	r3, #4
 80151e6:	d810      	bhi.n	801520a <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	7f1b      	ldrb	r3, [r3, #28]
 80151ec:	f023 0310 	bic.w	r3, r3, #16
 80151f0:	b2da      	uxtb	r2, r3
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d005      	beq.n	801520a <poll_tcp+0xb2>
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015202:	2200      	movs	r2, #0
 8015204:	2102      	movs	r1, #2
 8015206:	68f8      	ldr	r0, [r7, #12]
 8015208:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801520a:	2300      	movs	r3, #0
}
 801520c:	4618      	mov	r0, r3
 801520e:	3710      	adds	r7, #16
 8015210:	46bd      	mov	sp, r7
 8015212:	bd80      	pop	{r7, pc}
 8015214:	08023c2c 	.word	0x08023c2c
 8015218:	08023d84 	.word	0x08023d84
 801521c:	08023c70 	.word	0x08023c70

08015220 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b086      	sub	sp, #24
 8015224:	af00      	add	r7, sp, #0
 8015226:	60f8      	str	r0, [r7, #12]
 8015228:	60b9      	str	r1, [r7, #8]
 801522a:	4613      	mov	r3, r2
 801522c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015232:	697b      	ldr	r3, [r7, #20]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d106      	bne.n	8015246 <sent_tcp+0x26>
 8015238:	4b20      	ldr	r3, [pc, #128]	; (80152bc <sent_tcp+0x9c>)
 801523a:	f240 1293 	movw	r2, #403	; 0x193
 801523e:	4920      	ldr	r1, [pc, #128]	; (80152c0 <sent_tcp+0xa0>)
 8015240:	4820      	ldr	r0, [pc, #128]	; (80152c4 <sent_tcp+0xa4>)
 8015242:	f00d f87d 	bl	8022340 <iprintf>

  if (conn) {
 8015246:	697b      	ldr	r3, [r7, #20]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d032      	beq.n	80152b2 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 801524c:	697b      	ldr	r3, [r7, #20]
 801524e:	785b      	ldrb	r3, [r3, #1]
 8015250:	2b01      	cmp	r3, #1
 8015252:	d104      	bne.n	801525e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8015254:	2101      	movs	r1, #1
 8015256:	6978      	ldr	r0, [r7, #20]
 8015258:	f000 fefc 	bl	8016054 <lwip_netconn_do_writemore>
 801525c:	e007      	b.n	801526e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 801525e:	697b      	ldr	r3, [r7, #20]
 8015260:	785b      	ldrb	r3, [r3, #1]
 8015262:	2b04      	cmp	r3, #4
 8015264:	d103      	bne.n	801526e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8015266:	2101      	movs	r1, #1
 8015268:	6978      	ldr	r0, [r7, #20]
 801526a:	f000 fb9d 	bl	80159a8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801526e:	697b      	ldr	r3, [r7, #20]
 8015270:	685b      	ldr	r3, [r3, #4]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d01d      	beq.n	80152b2 <sent_tcp+0x92>
 8015276:	697b      	ldr	r3, [r7, #20]
 8015278:	685b      	ldr	r3, [r3, #4]
 801527a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801527e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8015282:	d316      	bcc.n	80152b2 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8015284:	697b      	ldr	r3, [r7, #20]
 8015286:	685b      	ldr	r3, [r3, #4]
 8015288:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801528c:	2b04      	cmp	r3, #4
 801528e:	d810      	bhi.n	80152b2 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8015290:	697b      	ldr	r3, [r7, #20]
 8015292:	7f1b      	ldrb	r3, [r3, #28]
 8015294:	f023 0310 	bic.w	r3, r3, #16
 8015298:	b2da      	uxtb	r2, r3
 801529a:	697b      	ldr	r3, [r7, #20]
 801529c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 801529e:	697b      	ldr	r3, [r7, #20]
 80152a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d005      	beq.n	80152b2 <sent_tcp+0x92>
 80152a6:	697b      	ldr	r3, [r7, #20]
 80152a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152aa:	88fa      	ldrh	r2, [r7, #6]
 80152ac:	2102      	movs	r1, #2
 80152ae:	6978      	ldr	r0, [r7, #20]
 80152b0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80152b2:	2300      	movs	r3, #0
}
 80152b4:	4618      	mov	r0, r3
 80152b6:	3718      	adds	r7, #24
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}
 80152bc:	08023c2c 	.word	0x08023c2c
 80152c0:	08023d84 	.word	0x08023d84
 80152c4:	08023c70 	.word	0x08023c70

080152c8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b088      	sub	sp, #32
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
 80152d0:	460b      	mov	r3, r1
 80152d2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80152d8:	69fb      	ldr	r3, [r7, #28]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d106      	bne.n	80152ec <err_tcp+0x24>
 80152de:	4b5f      	ldr	r3, [pc, #380]	; (801545c <err_tcp+0x194>)
 80152e0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80152e4:	495e      	ldr	r1, [pc, #376]	; (8015460 <err_tcp+0x198>)
 80152e6:	485f      	ldr	r0, [pc, #380]	; (8015464 <err_tcp+0x19c>)
 80152e8:	f00d f82a 	bl	8022340 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80152ec:	f00c fcb0 	bl	8021c50 <sys_arch_protect>
 80152f0:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80152f2:	69fb      	ldr	r3, [r7, #28]
 80152f4:	2200      	movs	r2, #0
 80152f6:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80152f8:	69fb      	ldr	r3, [r7, #28]
 80152fa:	78fa      	ldrb	r2, [r7, #3]
 80152fc:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80152fe:	69fb      	ldr	r3, [r7, #28]
 8015300:	7f1b      	ldrb	r3, [r3, #28]
 8015302:	f043 0301 	orr.w	r3, r3, #1
 8015306:	b2da      	uxtb	r2, r3
 8015308:	69fb      	ldr	r3, [r7, #28]
 801530a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 801530c:	69fb      	ldr	r3, [r7, #28]
 801530e:	785b      	ldrb	r3, [r3, #1]
 8015310:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8015312:	69fb      	ldr	r3, [r7, #28]
 8015314:	2200      	movs	r2, #0
 8015316:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8015318:	69b8      	ldr	r0, [r7, #24]
 801531a:	f00c fca7 	bl	8021c6c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801531e:	69fb      	ldr	r3, [r7, #28]
 8015320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015322:	2b00      	cmp	r3, #0
 8015324:	d005      	beq.n	8015332 <err_tcp+0x6a>
 8015326:	69fb      	ldr	r3, [r7, #28]
 8015328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801532a:	2200      	movs	r2, #0
 801532c:	2104      	movs	r1, #4
 801532e:	69f8      	ldr	r0, [r7, #28]
 8015330:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015332:	69fb      	ldr	r3, [r7, #28]
 8015334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015336:	2b00      	cmp	r3, #0
 8015338:	d005      	beq.n	8015346 <err_tcp+0x7e>
 801533a:	69fb      	ldr	r3, [r7, #28]
 801533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801533e:	2200      	movs	r2, #0
 8015340:	2100      	movs	r1, #0
 8015342:	69f8      	ldr	r0, [r7, #28]
 8015344:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015346:	69fb      	ldr	r3, [r7, #28]
 8015348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801534a:	2b00      	cmp	r3, #0
 801534c:	d005      	beq.n	801535a <err_tcp+0x92>
 801534e:	69fb      	ldr	r3, [r7, #28]
 8015350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015352:	2200      	movs	r2, #0
 8015354:	2102      	movs	r1, #2
 8015356:	69f8      	ldr	r0, [r7, #28]
 8015358:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 801535a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801535e:	4618      	mov	r0, r3
 8015360:	f7ff fd86 	bl	8014e70 <lwip_netconn_err_to_msg>
 8015364:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8015366:	69fb      	ldr	r3, [r7, #28]
 8015368:	3310      	adds	r3, #16
 801536a:	4618      	mov	r0, r3
 801536c:	f00c fb66 	bl	8021a3c <sys_mbox_valid>
 8015370:	4603      	mov	r3, r0
 8015372:	2b00      	cmp	r3, #0
 8015374:	d005      	beq.n	8015382 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8015376:	69fb      	ldr	r3, [r7, #28]
 8015378:	3310      	adds	r3, #16
 801537a:	6939      	ldr	r1, [r7, #16]
 801537c:	4618      	mov	r0, r3
 801537e:	f00c fafb 	bl	8021978 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8015382:	69fb      	ldr	r3, [r7, #28]
 8015384:	3314      	adds	r3, #20
 8015386:	4618      	mov	r0, r3
 8015388:	f00c fb58 	bl	8021a3c <sys_mbox_valid>
 801538c:	4603      	mov	r3, r0
 801538e:	2b00      	cmp	r3, #0
 8015390:	d005      	beq.n	801539e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8015392:	69fb      	ldr	r3, [r7, #28]
 8015394:	3314      	adds	r3, #20
 8015396:	6939      	ldr	r1, [r7, #16]
 8015398:	4618      	mov	r0, r3
 801539a:	f00c faed 	bl	8021978 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801539e:	7dfb      	ldrb	r3, [r7, #23]
 80153a0:	2b01      	cmp	r3, #1
 80153a2:	d005      	beq.n	80153b0 <err_tcp+0xe8>
 80153a4:	7dfb      	ldrb	r3, [r7, #23]
 80153a6:	2b04      	cmp	r3, #4
 80153a8:	d002      	beq.n	80153b0 <err_tcp+0xe8>
 80153aa:	7dfb      	ldrb	r3, [r7, #23]
 80153ac:	2b03      	cmp	r3, #3
 80153ae:	d143      	bne.n	8015438 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80153b0:	69fb      	ldr	r3, [r7, #28]
 80153b2:	7f1b      	ldrb	r3, [r3, #28]
 80153b4:	f003 0304 	and.w	r3, r3, #4
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	bf14      	ite	ne
 80153bc:	2301      	movne	r3, #1
 80153be:	2300      	moveq	r3, #0
 80153c0:	b2db      	uxtb	r3, r3
 80153c2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80153c4:	69fb      	ldr	r3, [r7, #28]
 80153c6:	7f1b      	ldrb	r3, [r3, #28]
 80153c8:	f023 0304 	bic.w	r3, r3, #4
 80153cc:	b2da      	uxtb	r2, r3
 80153ce:	69fb      	ldr	r3, [r7, #28]
 80153d0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d13b      	bne.n	8015450 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80153d8:	69fb      	ldr	r3, [r7, #28]
 80153da:	6a1b      	ldr	r3, [r3, #32]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d106      	bne.n	80153ee <err_tcp+0x126>
 80153e0:	4b1e      	ldr	r3, [pc, #120]	; (801545c <err_tcp+0x194>)
 80153e2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80153e6:	4920      	ldr	r1, [pc, #128]	; (8015468 <err_tcp+0x1a0>)
 80153e8:	481e      	ldr	r0, [pc, #120]	; (8015464 <err_tcp+0x19c>)
 80153ea:	f00c ffa9 	bl	8022340 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80153ee:	7dfb      	ldrb	r3, [r7, #23]
 80153f0:	2b04      	cmp	r3, #4
 80153f2:	d104      	bne.n	80153fe <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80153f4:	69fb      	ldr	r3, [r7, #28]
 80153f6:	6a1b      	ldr	r3, [r3, #32]
 80153f8:	2200      	movs	r2, #0
 80153fa:	711a      	strb	r2, [r3, #4]
 80153fc:	e003      	b.n	8015406 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80153fe:	69fb      	ldr	r3, [r7, #28]
 8015400:	6a1b      	ldr	r3, [r3, #32]
 8015402:	78fa      	ldrb	r2, [r7, #3]
 8015404:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015406:	69fb      	ldr	r3, [r7, #28]
 8015408:	6a1b      	ldr	r3, [r3, #32]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	330c      	adds	r3, #12
 801540e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8015410:	68b8      	ldr	r0, [r7, #8]
 8015412:	f00c fba1 	bl	8021b58 <sys_sem_valid>
 8015416:	4603      	mov	r3, r0
 8015418:	2b00      	cmp	r3, #0
 801541a:	d106      	bne.n	801542a <err_tcp+0x162>
 801541c:	4b0f      	ldr	r3, [pc, #60]	; (801545c <err_tcp+0x194>)
 801541e:	f240 12ef 	movw	r2, #495	; 0x1ef
 8015422:	4912      	ldr	r1, [pc, #72]	; (801546c <err_tcp+0x1a4>)
 8015424:	480f      	ldr	r0, [pc, #60]	; (8015464 <err_tcp+0x19c>)
 8015426:	f00c ff8b 	bl	8022340 <iprintf>
      conn->current_msg = NULL;
 801542a:	69fb      	ldr	r3, [r7, #28]
 801542c:	2200      	movs	r2, #0
 801542e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8015430:	68b8      	ldr	r0, [r7, #8]
 8015432:	f00c fb77 	bl	8021b24 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8015436:	e00b      	b.n	8015450 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8015438:	69fb      	ldr	r3, [r7, #28]
 801543a:	6a1b      	ldr	r3, [r3, #32]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d008      	beq.n	8015452 <err_tcp+0x18a>
 8015440:	4b06      	ldr	r3, [pc, #24]	; (801545c <err_tcp+0x194>)
 8015442:	f240 12f7 	movw	r2, #503	; 0x1f7
 8015446:	490a      	ldr	r1, [pc, #40]	; (8015470 <err_tcp+0x1a8>)
 8015448:	4806      	ldr	r0, [pc, #24]	; (8015464 <err_tcp+0x19c>)
 801544a:	f00c ff79 	bl	8022340 <iprintf>
  }
}
 801544e:	e000      	b.n	8015452 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8015450:	bf00      	nop
}
 8015452:	bf00      	nop
 8015454:	3720      	adds	r7, #32
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}
 801545a:	bf00      	nop
 801545c:	08023c2c 	.word	0x08023c2c
 8015460:	08023d84 	.word	0x08023d84
 8015464:	08023c70 	.word	0x08023c70
 8015468:	08023d94 	.word	0x08023d94
 801546c:	08023db0 	.word	0x08023db0
 8015470:	08023dcc 	.word	0x08023dcc

08015474 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b084      	sub	sp, #16
 8015478:	af00      	add	r7, sp, #0
 801547a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	685b      	ldr	r3, [r3, #4]
 8015480:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8015482:	6879      	ldr	r1, [r7, #4]
 8015484:	68f8      	ldr	r0, [r7, #12]
 8015486:	f004 fe43 	bl	801a110 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 801548a:	490a      	ldr	r1, [pc, #40]	; (80154b4 <setup_tcp+0x40>)
 801548c:	68f8      	ldr	r0, [r7, #12]
 801548e:	f004 fe51 	bl	801a134 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8015492:	4909      	ldr	r1, [pc, #36]	; (80154b8 <setup_tcp+0x44>)
 8015494:	68f8      	ldr	r0, [r7, #12]
 8015496:	f004 fe6f 	bl	801a178 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 801549a:	2202      	movs	r2, #2
 801549c:	4907      	ldr	r1, [pc, #28]	; (80154bc <setup_tcp+0x48>)
 801549e:	68f8      	ldr	r0, [r7, #12]
 80154a0:	f004 fec6 	bl	801a230 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80154a4:	4906      	ldr	r1, [pc, #24]	; (80154c0 <setup_tcp+0x4c>)
 80154a6:	68f8      	ldr	r0, [r7, #12]
 80154a8:	f004 fe88 	bl	801a1bc <tcp_err>
}
 80154ac:	bf00      	nop
 80154ae:	3710      	adds	r7, #16
 80154b0:	46bd      	mov	sp, r7
 80154b2:	bd80      	pop	{r7, pc}
 80154b4:	0801504d 	.word	0x0801504d
 80154b8:	08015221 	.word	0x08015221
 80154bc:	08015159 	.word	0x08015159
 80154c0:	080152c9 	.word	0x080152c9

080154c4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80154c4:	b590      	push	{r4, r7, lr}
 80154c6:	b089      	sub	sp, #36	; 0x24
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	60f8      	str	r0, [r7, #12]
 80154cc:	60b9      	str	r1, [r7, #8]
 80154ce:	4613      	mov	r3, r2
 80154d0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80154d6:	69fb      	ldr	r3, [r7, #28]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d102      	bne.n	80154e2 <accept_function+0x1e>
    return ERR_VAL;
 80154dc:	f06f 0305 	mvn.w	r3, #5
 80154e0:	e0a1      	b.n	8015626 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80154e2:	69fb      	ldr	r3, [r7, #28]
 80154e4:	3314      	adds	r3, #20
 80154e6:	4618      	mov	r0, r3
 80154e8:	f00c faa8 	bl	8021a3c <sys_mbox_valid>
 80154ec:	4603      	mov	r3, r0
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d102      	bne.n	80154f8 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80154f2:	f06f 0305 	mvn.w	r3, #5
 80154f6:	e096      	b.n	8015626 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 80154f8:	68bb      	ldr	r3, [r7, #8]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d11b      	bne.n	8015536 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80154fe:	69fb      	ldr	r3, [r7, #28]
 8015500:	f103 0414 	add.w	r4, r3, #20
 8015504:	f06f 000c 	mvn.w	r0, #12
 8015508:	f7ff fcb2 	bl	8014e70 <lwip_netconn_err_to_msg>
 801550c:	4603      	mov	r3, r0
 801550e:	4619      	mov	r1, r3
 8015510:	4620      	mov	r0, r4
 8015512:	f00c fa31 	bl	8021978 <sys_mbox_trypost>
 8015516:	4603      	mov	r3, r0
 8015518:	2b00      	cmp	r3, #0
 801551a:	d109      	bne.n	8015530 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801551c:	69fb      	ldr	r3, [r7, #28]
 801551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015520:	2b00      	cmp	r3, #0
 8015522:	d005      	beq.n	8015530 <accept_function+0x6c>
 8015524:	69fb      	ldr	r3, [r7, #28]
 8015526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015528:	2200      	movs	r2, #0
 801552a:	2100      	movs	r1, #0
 801552c:	69f8      	ldr	r0, [r7, #28]
 801552e:	4798      	blx	r3
    }
    return ERR_VAL;
 8015530:	f06f 0305 	mvn.w	r3, #5
 8015534:	e077      	b.n	8015626 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8015536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d006      	beq.n	801554c <accept_function+0x88>
 801553e:	4b3c      	ldr	r3, [pc, #240]	; (8015630 <accept_function+0x16c>)
 8015540:	f240 222a 	movw	r2, #554	; 0x22a
 8015544:	493b      	ldr	r1, [pc, #236]	; (8015634 <accept_function+0x170>)
 8015546:	483c      	ldr	r0, [pc, #240]	; (8015638 <accept_function+0x174>)
 8015548:	f00c fefa 	bl	8022340 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 801554c:	69fb      	ldr	r3, [r7, #28]
 801554e:	781a      	ldrb	r2, [r3, #0]
 8015550:	69fb      	ldr	r3, [r7, #28]
 8015552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015554:	4619      	mov	r1, r3
 8015556:	4610      	mov	r0, r2
 8015558:	f000 f8f0 	bl	801573c <netconn_alloc>
 801555c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 801555e:	69bb      	ldr	r3, [r7, #24]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d11b      	bne.n	801559c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8015564:	69fb      	ldr	r3, [r7, #28]
 8015566:	f103 0414 	add.w	r4, r3, #20
 801556a:	f06f 000c 	mvn.w	r0, #12
 801556e:	f7ff fc7f 	bl	8014e70 <lwip_netconn_err_to_msg>
 8015572:	4603      	mov	r3, r0
 8015574:	4619      	mov	r1, r3
 8015576:	4620      	mov	r0, r4
 8015578:	f00c f9fe 	bl	8021978 <sys_mbox_trypost>
 801557c:	4603      	mov	r3, r0
 801557e:	2b00      	cmp	r3, #0
 8015580:	d109      	bne.n	8015596 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015582:	69fb      	ldr	r3, [r7, #28]
 8015584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015586:	2b00      	cmp	r3, #0
 8015588:	d005      	beq.n	8015596 <accept_function+0xd2>
 801558a:	69fb      	ldr	r3, [r7, #28]
 801558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801558e:	2200      	movs	r2, #0
 8015590:	2100      	movs	r1, #0
 8015592:	69f8      	ldr	r0, [r7, #28]
 8015594:	4798      	blx	r3
    }
    return ERR_MEM;
 8015596:	f04f 33ff 	mov.w	r3, #4294967295
 801559a:	e044      	b.n	8015626 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 801559c:	69bb      	ldr	r3, [r7, #24]
 801559e:	68ba      	ldr	r2, [r7, #8]
 80155a0:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80155a2:	69b8      	ldr	r0, [r7, #24]
 80155a4:	f7ff ff66 	bl	8015474 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80155a8:	69fb      	ldr	r3, [r7, #28]
 80155aa:	3314      	adds	r3, #20
 80155ac:	69b9      	ldr	r1, [r7, #24]
 80155ae:	4618      	mov	r0, r3
 80155b0:	f00c f9e2 	bl	8021978 <sys_mbox_trypost>
 80155b4:	4603      	mov	r3, r0
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d02a      	beq.n	8015610 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80155ba:	69bb      	ldr	r3, [r7, #24]
 80155bc:	685b      	ldr	r3, [r3, #4]
 80155be:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80155c0:	2100      	movs	r1, #0
 80155c2:	6978      	ldr	r0, [r7, #20]
 80155c4:	f004 fda4 	bl	801a110 <tcp_arg>
    tcp_recv(pcb, NULL);
 80155c8:	2100      	movs	r1, #0
 80155ca:	6978      	ldr	r0, [r7, #20]
 80155cc:	f004 fdb2 	bl	801a134 <tcp_recv>
    tcp_sent(pcb, NULL);
 80155d0:	2100      	movs	r1, #0
 80155d2:	6978      	ldr	r0, [r7, #20]
 80155d4:	f004 fdd0 	bl	801a178 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80155d8:	2200      	movs	r2, #0
 80155da:	2100      	movs	r1, #0
 80155dc:	6978      	ldr	r0, [r7, #20]
 80155de:	f004 fe27 	bl	801a230 <tcp_poll>
    tcp_err(pcb, NULL);
 80155e2:	2100      	movs	r1, #0
 80155e4:	6978      	ldr	r0, [r7, #20]
 80155e6:	f004 fde9 	bl	801a1bc <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80155ea:	69bb      	ldr	r3, [r7, #24]
 80155ec:	2200      	movs	r2, #0
 80155ee:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80155f0:	69bb      	ldr	r3, [r7, #24]
 80155f2:	3310      	adds	r3, #16
 80155f4:	4618      	mov	r0, r3
 80155f6:	f00c f9ad 	bl	8021954 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80155fa:	69bb      	ldr	r3, [r7, #24]
 80155fc:	3310      	adds	r3, #16
 80155fe:	4618      	mov	r0, r3
 8015600:	f00c fa2d 	bl	8021a5e <sys_mbox_set_invalid>
    netconn_free(newconn);
 8015604:	69b8      	ldr	r0, [r7, #24]
 8015606:	f000 f907 	bl	8015818 <netconn_free>
    return ERR_MEM;
 801560a:	f04f 33ff 	mov.w	r3, #4294967295
 801560e:	e00a      	b.n	8015626 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015610:	69fb      	ldr	r3, [r7, #28]
 8015612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015614:	2b00      	cmp	r3, #0
 8015616:	d005      	beq.n	8015624 <accept_function+0x160>
 8015618:	69fb      	ldr	r3, [r7, #28]
 801561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801561c:	2200      	movs	r2, #0
 801561e:	2100      	movs	r1, #0
 8015620:	69f8      	ldr	r0, [r7, #28]
 8015622:	4798      	blx	r3
  }

  return ERR_OK;
 8015624:	2300      	movs	r3, #0
}
 8015626:	4618      	mov	r0, r3
 8015628:	3724      	adds	r7, #36	; 0x24
 801562a:	46bd      	mov	sp, r7
 801562c:	bd90      	pop	{r4, r7, pc}
 801562e:	bf00      	nop
 8015630:	08023c2c 	.word	0x08023c2c
 8015634:	08023de8 	.word	0x08023de8
 8015638:	08023c70 	.word	0x08023c70

0801563c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 801563c:	b590      	push	{r4, r7, lr}
 801563e:	b085      	sub	sp, #20
 8015640:	af00      	add	r7, sp, #0
 8015642:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8015644:	2300      	movs	r3, #0
 8015646:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	685b      	ldr	r3, [r3, #4]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d006      	beq.n	8015660 <pcb_new+0x24>
 8015652:	4b2b      	ldr	r3, [pc, #172]	; (8015700 <pcb_new+0xc4>)
 8015654:	f240 2265 	movw	r2, #613	; 0x265
 8015658:	492a      	ldr	r1, [pc, #168]	; (8015704 <pcb_new+0xc8>)
 801565a:	482b      	ldr	r0, [pc, #172]	; (8015708 <pcb_new+0xcc>)
 801565c:	f00c fe70 	bl	8022340 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	781b      	ldrb	r3, [r3, #0]
 8015666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801566a:	2b10      	cmp	r3, #16
 801566c:	d022      	beq.n	80156b4 <pcb_new+0x78>
 801566e:	2b20      	cmp	r3, #32
 8015670:	d133      	bne.n	80156da <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	681c      	ldr	r4, [r3, #0]
 8015676:	7bfb      	ldrb	r3, [r7, #15]
 8015678:	4618      	mov	r0, r3
 801567a:	f009 fe28 	bl	801f2ce <udp_new_ip_type>
 801567e:	4603      	mov	r3, r0
 8015680:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	685b      	ldr	r3, [r3, #4]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d02a      	beq.n	80156e2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	781b      	ldrb	r3, [r3, #0]
 8015692:	2b22      	cmp	r3, #34	; 0x22
 8015694:	d104      	bne.n	80156a0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	685b      	ldr	r3, [r3, #4]
 801569c:	2201      	movs	r2, #1
 801569e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	6858      	ldr	r0, [r3, #4]
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	461a      	mov	r2, r3
 80156ac:	4917      	ldr	r1, [pc, #92]	; (801570c <pcb_new+0xd0>)
 80156ae:	f009 fd95 	bl	801f1dc <udp_recv>
      }
      break;
 80156b2:	e016      	b.n	80156e2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	681c      	ldr	r4, [r3, #0]
 80156b8:	7bfb      	ldrb	r3, [r7, #15]
 80156ba:	4618      	mov	r0, r3
 80156bc:	f004 fd1a 	bl	801a0f4 <tcp_new_ip_type>
 80156c0:	4603      	mov	r3, r0
 80156c2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	685b      	ldr	r3, [r3, #4]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d00b      	beq.n	80156e6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	4618      	mov	r0, r3
 80156d4:	f7ff fece 	bl	8015474 <setup_tcp>
      }
      break;
 80156d8:	e005      	b.n	80156e6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	22fa      	movs	r2, #250	; 0xfa
 80156de:	711a      	strb	r2, [r3, #4]
      return;
 80156e0:	e00a      	b.n	80156f8 <pcb_new+0xbc>
      break;
 80156e2:	bf00      	nop
 80156e4:	e000      	b.n	80156e8 <pcb_new+0xac>
      break;
 80156e6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	685b      	ldr	r3, [r3, #4]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d102      	bne.n	80156f8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	22ff      	movs	r2, #255	; 0xff
 80156f6:	711a      	strb	r2, [r3, #4]
  }
}
 80156f8:	3714      	adds	r7, #20
 80156fa:	46bd      	mov	sp, r7
 80156fc:	bd90      	pop	{r4, r7, pc}
 80156fe:	bf00      	nop
 8015700:	08023c2c 	.word	0x08023c2c
 8015704:	08023e10 	.word	0x08023e10
 8015708:	08023c70 	.word	0x08023c70
 801570c:	08014f51 	.word	0x08014f51

08015710 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b084      	sub	sp, #16
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	2200      	movs	r2, #0
 8015720:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	685b      	ldr	r3, [r3, #4]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d102      	bne.n	8015732 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 801572c:	68f8      	ldr	r0, [r7, #12]
 801572e:	f7ff ff85 	bl	801563c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8015732:	bf00      	nop
 8015734:	3710      	adds	r7, #16
 8015736:	46bd      	mov	sp, r7
 8015738:	bd80      	pop	{r7, pc}
	...

0801573c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b086      	sub	sp, #24
 8015740:	af00      	add	r7, sp, #0
 8015742:	4603      	mov	r3, r0
 8015744:	6039      	str	r1, [r7, #0]
 8015746:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8015748:	2300      	movs	r3, #0
 801574a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 801574c:	2007      	movs	r0, #7
 801574e:	f001 ff47 	bl	80175e0 <memp_malloc>
 8015752:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d101      	bne.n	801575e <netconn_alloc+0x22>
    return NULL;
 801575a:	2300      	movs	r3, #0
 801575c:	e052      	b.n	8015804 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	2200      	movs	r2, #0
 8015762:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	79fa      	ldrb	r2, [r7, #7]
 8015768:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	2200      	movs	r2, #0
 801576e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8015770:	79fb      	ldrb	r3, [r7, #7]
 8015772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015776:	2b10      	cmp	r3, #16
 8015778:	d004      	beq.n	8015784 <netconn_alloc+0x48>
 801577a:	2b20      	cmp	r3, #32
 801577c:	d105      	bne.n	801578a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 801577e:	2306      	movs	r3, #6
 8015780:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8015782:	e00a      	b.n	801579a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8015784:	2306      	movs	r3, #6
 8015786:	617b      	str	r3, [r7, #20]
      break;
 8015788:	e007      	b.n	801579a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 801578a:	4b20      	ldr	r3, [pc, #128]	; (801580c <netconn_alloc+0xd0>)
 801578c:	f240 22e5 	movw	r2, #741	; 0x2e5
 8015790:	491f      	ldr	r1, [pc, #124]	; (8015810 <netconn_alloc+0xd4>)
 8015792:	4820      	ldr	r0, [pc, #128]	; (8015814 <netconn_alloc+0xd8>)
 8015794:	f00c fdd4 	bl	8022340 <iprintf>
      goto free_and_return;
 8015798:	e02f      	b.n	80157fa <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	3310      	adds	r3, #16
 801579e:	6979      	ldr	r1, [r7, #20]
 80157a0:	4618      	mov	r0, r3
 80157a2:	f00c f8bd 	bl	8021920 <sys_mbox_new>
 80157a6:	4603      	mov	r3, r0
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d125      	bne.n	80157f8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	330c      	adds	r3, #12
 80157b0:	2100      	movs	r1, #0
 80157b2:	4618      	mov	r0, r3
 80157b4:	f00c f960 	bl	8021a78 <sys_sem_new>
 80157b8:	4603      	mov	r3, r0
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d005      	beq.n	80157ca <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	3310      	adds	r3, #16
 80157c2:	4618      	mov	r0, r3
 80157c4:	f00c f8c6 	bl	8021954 <sys_mbox_free>
    goto free_and_return;
 80157c8:	e017      	b.n	80157fa <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	3314      	adds	r3, #20
 80157ce:	4618      	mov	r0, r3
 80157d0:	f00c f945 	bl	8021a5e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	2200      	movs	r2, #0
 80157d8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	f04f 32ff 	mov.w	r2, #4294967295
 80157e0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	683a      	ldr	r2, [r7, #0]
 80157e6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	2200      	movs	r2, #0
 80157ec:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	7cfa      	ldrb	r2, [r7, #19]
 80157f2:	771a      	strb	r2, [r3, #28]
  return conn;
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	e005      	b.n	8015804 <netconn_alloc+0xc8>
    goto free_and_return;
 80157f8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80157fa:	68f9      	ldr	r1, [r7, #12]
 80157fc:	2007      	movs	r0, #7
 80157fe:	f001 ff65 	bl	80176cc <memp_free>
  return NULL;
 8015802:	2300      	movs	r3, #0
}
 8015804:	4618      	mov	r0, r3
 8015806:	3718      	adds	r7, #24
 8015808:	46bd      	mov	sp, r7
 801580a:	bd80      	pop	{r7, pc}
 801580c:	08023c2c 	.word	0x08023c2c
 8015810:	08023e30 	.word	0x08023e30
 8015814:	08023c70 	.word	0x08023c70

08015818 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8015818:	b580      	push	{r7, lr}
 801581a:	b082      	sub	sp, #8
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	685b      	ldr	r3, [r3, #4]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d006      	beq.n	8015836 <netconn_free+0x1e>
 8015828:	4b1b      	ldr	r3, [pc, #108]	; (8015898 <netconn_free+0x80>)
 801582a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801582e:	491b      	ldr	r1, [pc, #108]	; (801589c <netconn_free+0x84>)
 8015830:	481b      	ldr	r0, [pc, #108]	; (80158a0 <netconn_free+0x88>)
 8015832:	f00c fd85 	bl	8022340 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	3310      	adds	r3, #16
 801583a:	4618      	mov	r0, r3
 801583c:	f00c f8fe 	bl	8021a3c <sys_mbox_valid>
 8015840:	4603      	mov	r3, r0
 8015842:	2b00      	cmp	r3, #0
 8015844:	d006      	beq.n	8015854 <netconn_free+0x3c>
 8015846:	4b14      	ldr	r3, [pc, #80]	; (8015898 <netconn_free+0x80>)
 8015848:	f240 3223 	movw	r2, #803	; 0x323
 801584c:	4915      	ldr	r1, [pc, #84]	; (80158a4 <netconn_free+0x8c>)
 801584e:	4814      	ldr	r0, [pc, #80]	; (80158a0 <netconn_free+0x88>)
 8015850:	f00c fd76 	bl	8022340 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	3314      	adds	r3, #20
 8015858:	4618      	mov	r0, r3
 801585a:	f00c f8ef 	bl	8021a3c <sys_mbox_valid>
 801585e:	4603      	mov	r3, r0
 8015860:	2b00      	cmp	r3, #0
 8015862:	d006      	beq.n	8015872 <netconn_free+0x5a>
 8015864:	4b0c      	ldr	r3, [pc, #48]	; (8015898 <netconn_free+0x80>)
 8015866:	f240 3226 	movw	r2, #806	; 0x326
 801586a:	490f      	ldr	r1, [pc, #60]	; (80158a8 <netconn_free+0x90>)
 801586c:	480c      	ldr	r0, [pc, #48]	; (80158a0 <netconn_free+0x88>)
 801586e:	f00c fd67 	bl	8022340 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	330c      	adds	r3, #12
 8015876:	4618      	mov	r0, r3
 8015878:	f00c f961 	bl	8021b3e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	330c      	adds	r3, #12
 8015880:	4618      	mov	r0, r3
 8015882:	f00c f97a 	bl	8021b7a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8015886:	6879      	ldr	r1, [r7, #4]
 8015888:	2007      	movs	r0, #7
 801588a:	f001 ff1f 	bl	80176cc <memp_free>
}
 801588e:	bf00      	nop
 8015890:	3708      	adds	r7, #8
 8015892:	46bd      	mov	sp, r7
 8015894:	bd80      	pop	{r7, pc}
 8015896:	bf00      	nop
 8015898:	08023c2c 	.word	0x08023c2c
 801589c:	08023e58 	.word	0x08023e58
 80158a0:	08023c70 	.word	0x08023c70
 80158a4:	08023e88 	.word	0x08023e88
 80158a8:	08023ec4 	.word	0x08023ec4

080158ac <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b086      	sub	sp, #24
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	3310      	adds	r3, #16
 80158b8:	4618      	mov	r0, r3
 80158ba:	f00c f8bf 	bl	8021a3c <sys_mbox_valid>
 80158be:	4603      	mov	r3, r0
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d02f      	beq.n	8015924 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80158c4:	e018      	b.n	80158f8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	781b      	ldrb	r3, [r3, #0]
 80158ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80158ce:	2b10      	cmp	r3, #16
 80158d0:	d10e      	bne.n	80158f0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80158d2:	693b      	ldr	r3, [r7, #16]
 80158d4:	f107 020f 	add.w	r2, r7, #15
 80158d8:	4611      	mov	r1, r2
 80158da:	4618      	mov	r0, r3
 80158dc:	f7ff fafe 	bl	8014edc <lwip_netconn_is_err_msg>
 80158e0:	4603      	mov	r3, r0
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d108      	bne.n	80158f8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80158e6:	693b      	ldr	r3, [r7, #16]
 80158e8:	4618      	mov	r0, r3
 80158ea:	f002 fd93 	bl	8018414 <pbuf_free>
 80158ee:	e003      	b.n	80158f8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80158f0:	693b      	ldr	r3, [r7, #16]
 80158f2:	4618      	mov	r0, r3
 80158f4:	f000 fe92 	bl	801661c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	3310      	adds	r3, #16
 80158fc:	f107 0210 	add.w	r2, r7, #16
 8015900:	4611      	mov	r1, r2
 8015902:	4618      	mov	r0, r3
 8015904:	f00c f883 	bl	8021a0e <sys_arch_mbox_tryfetch>
 8015908:	4603      	mov	r3, r0
 801590a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801590e:	d1da      	bne.n	80158c6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	3310      	adds	r3, #16
 8015914:	4618      	mov	r0, r3
 8015916:	f00c f81d 	bl	8021954 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	3310      	adds	r3, #16
 801591e:	4618      	mov	r0, r3
 8015920:	f00c f89d 	bl	8021a5e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	3314      	adds	r3, #20
 8015928:	4618      	mov	r0, r3
 801592a:	f00c f887 	bl	8021a3c <sys_mbox_valid>
 801592e:	4603      	mov	r3, r0
 8015930:	2b00      	cmp	r3, #0
 8015932:	d034      	beq.n	801599e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8015934:	e01d      	b.n	8015972 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	f107 020e 	add.w	r2, r7, #14
 801593c:	4611      	mov	r1, r2
 801593e:	4618      	mov	r0, r3
 8015940:	f7ff facc 	bl	8014edc <lwip_netconn_is_err_msg>
 8015944:	4603      	mov	r3, r0
 8015946:	2b00      	cmp	r3, #0
 8015948:	d113      	bne.n	8015972 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 801594a:	693b      	ldr	r3, [r7, #16]
 801594c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 801594e:	6978      	ldr	r0, [r7, #20]
 8015950:	f7ff ffac 	bl	80158ac <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8015954:	697b      	ldr	r3, [r7, #20]
 8015956:	685b      	ldr	r3, [r3, #4]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d007      	beq.n	801596c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 801595c:	697b      	ldr	r3, [r7, #20]
 801595e:	685b      	ldr	r3, [r3, #4]
 8015960:	4618      	mov	r0, r3
 8015962:	f003 fb47 	bl	8018ff4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8015966:	697b      	ldr	r3, [r7, #20]
 8015968:	2200      	movs	r2, #0
 801596a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 801596c:	6978      	ldr	r0, [r7, #20]
 801596e:	f7ff ff53 	bl	8015818 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	3314      	adds	r3, #20
 8015976:	f107 0210 	add.w	r2, r7, #16
 801597a:	4611      	mov	r1, r2
 801597c:	4618      	mov	r0, r3
 801597e:	f00c f846 	bl	8021a0e <sys_arch_mbox_tryfetch>
 8015982:	4603      	mov	r3, r0
 8015984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015988:	d1d5      	bne.n	8015936 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	3314      	adds	r3, #20
 801598e:	4618      	mov	r0, r3
 8015990:	f00b ffe0 	bl	8021954 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	3314      	adds	r3, #20
 8015998:	4618      	mov	r0, r3
 801599a:	f00c f860 	bl	8021a5e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 801599e:	bf00      	nop
 80159a0:	3718      	adds	r7, #24
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}
	...

080159a8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b086      	sub	sp, #24
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
 80159b0:	460b      	mov	r3, r1
 80159b2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80159b4:	2300      	movs	r3, #0
 80159b6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d106      	bne.n	80159cc <lwip_netconn_do_close_internal+0x24>
 80159be:	4b87      	ldr	r3, [pc, #540]	; (8015bdc <lwip_netconn_do_close_internal+0x234>)
 80159c0:	f240 32a2 	movw	r2, #930	; 0x3a2
 80159c4:	4986      	ldr	r1, [pc, #536]	; (8015be0 <lwip_netconn_do_close_internal+0x238>)
 80159c6:	4887      	ldr	r0, [pc, #540]	; (8015be4 <lwip_netconn_do_close_internal+0x23c>)
 80159c8:	f00c fcba 	bl	8022340 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	781b      	ldrb	r3, [r3, #0]
 80159d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80159d4:	2b10      	cmp	r3, #16
 80159d6:	d006      	beq.n	80159e6 <lwip_netconn_do_close_internal+0x3e>
 80159d8:	4b80      	ldr	r3, [pc, #512]	; (8015bdc <lwip_netconn_do_close_internal+0x234>)
 80159da:	f240 32a3 	movw	r2, #931	; 0x3a3
 80159de:	4982      	ldr	r1, [pc, #520]	; (8015be8 <lwip_netconn_do_close_internal+0x240>)
 80159e0:	4880      	ldr	r0, [pc, #512]	; (8015be4 <lwip_netconn_do_close_internal+0x23c>)
 80159e2:	f00c fcad 	bl	8022340 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	785b      	ldrb	r3, [r3, #1]
 80159ea:	2b04      	cmp	r3, #4
 80159ec:	d006      	beq.n	80159fc <lwip_netconn_do_close_internal+0x54>
 80159ee:	4b7b      	ldr	r3, [pc, #492]	; (8015bdc <lwip_netconn_do_close_internal+0x234>)
 80159f0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80159f4:	497d      	ldr	r1, [pc, #500]	; (8015bec <lwip_netconn_do_close_internal+0x244>)
 80159f6:	487b      	ldr	r0, [pc, #492]	; (8015be4 <lwip_netconn_do_close_internal+0x23c>)
 80159f8:	f00c fca2 	bl	8022340 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	685b      	ldr	r3, [r3, #4]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d106      	bne.n	8015a12 <lwip_netconn_do_close_internal+0x6a>
 8015a04:	4b75      	ldr	r3, [pc, #468]	; (8015bdc <lwip_netconn_do_close_internal+0x234>)
 8015a06:	f240 32a5 	movw	r2, #933	; 0x3a5
 8015a0a:	4979      	ldr	r1, [pc, #484]	; (8015bf0 <lwip_netconn_do_close_internal+0x248>)
 8015a0c:	4875      	ldr	r0, [pc, #468]	; (8015be4 <lwip_netconn_do_close_internal+0x23c>)
 8015a0e:	f00c fc97 	bl	8022340 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	6a1b      	ldr	r3, [r3, #32]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d106      	bne.n	8015a28 <lwip_netconn_do_close_internal+0x80>
 8015a1a:	4b70      	ldr	r3, [pc, #448]	; (8015bdc <lwip_netconn_do_close_internal+0x234>)
 8015a1c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015a20:	4974      	ldr	r1, [pc, #464]	; (8015bf4 <lwip_netconn_do_close_internal+0x24c>)
 8015a22:	4870      	ldr	r0, [pc, #448]	; (8015be4 <lwip_netconn_do_close_internal+0x23c>)
 8015a24:	f00c fc8c 	bl	8022340 <iprintf>

  tpcb = conn->pcb.tcp;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	685b      	ldr	r3, [r3, #4]
 8015a2c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	6a1b      	ldr	r3, [r3, #32]
 8015a32:	7a1b      	ldrb	r3, [r3, #8]
 8015a34:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8015a36:	7bfb      	ldrb	r3, [r7, #15]
 8015a38:	f003 0301 	and.w	r3, r3, #1
 8015a3c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8015a3e:	7bfb      	ldrb	r3, [r7, #15]
 8015a40:	f003 0302 	and.w	r3, r3, #2
 8015a44:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8015a46:	7bfb      	ldrb	r3, [r7, #15]
 8015a48:	2b03      	cmp	r3, #3
 8015a4a:	d102      	bne.n	8015a52 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	75bb      	strb	r3, [r7, #22]
 8015a50:	e01f      	b.n	8015a92 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8015a52:	7bbb      	ldrb	r3, [r7, #14]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d00e      	beq.n	8015a76 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8015a58:	693b      	ldr	r3, [r7, #16]
 8015a5a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8015a5c:	2b05      	cmp	r3, #5
 8015a5e:	d007      	beq.n	8015a70 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8015a60:	693b      	ldr	r3, [r7, #16]
 8015a62:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8015a64:	2b06      	cmp	r3, #6
 8015a66:	d003      	beq.n	8015a70 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8015a68:	693b      	ldr	r3, [r7, #16]
 8015a6a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8015a6c:	2b08      	cmp	r3, #8
 8015a6e:	d102      	bne.n	8015a76 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8015a70:	2301      	movs	r3, #1
 8015a72:	75bb      	strb	r3, [r7, #22]
 8015a74:	e00d      	b.n	8015a92 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8015a76:	7b7b      	ldrb	r3, [r7, #13]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d008      	beq.n	8015a8e <lwip_netconn_do_close_internal+0xe6>
 8015a7c:	693b      	ldr	r3, [r7, #16]
 8015a7e:	8b5b      	ldrh	r3, [r3, #26]
 8015a80:	f003 0310 	and.w	r3, r3, #16
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d002      	beq.n	8015a8e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8015a88:	2301      	movs	r3, #1
 8015a8a:	75bb      	strb	r3, [r7, #22]
 8015a8c:	e001      	b.n	8015a92 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8015a8e:	2300      	movs	r3, #0
 8015a90:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8015a92:	7dbb      	ldrb	r3, [r7, #22]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d003      	beq.n	8015aa0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8015a98:	2100      	movs	r1, #0
 8015a9a:	6938      	ldr	r0, [r7, #16]
 8015a9c:	f004 fb38 	bl	801a110 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8015aa0:	693b      	ldr	r3, [r7, #16]
 8015aa2:	7d1b      	ldrb	r3, [r3, #20]
 8015aa4:	2b01      	cmp	r3, #1
 8015aa6:	d104      	bne.n	8015ab2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8015aa8:	2100      	movs	r1, #0
 8015aaa:	6938      	ldr	r0, [r7, #16]
 8015aac:	f004 fba8 	bl	801a200 <tcp_accept>
 8015ab0:	e01d      	b.n	8015aee <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8015ab2:	7bbb      	ldrb	r3, [r7, #14]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d007      	beq.n	8015ac8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8015ab8:	2100      	movs	r1, #0
 8015aba:	6938      	ldr	r0, [r7, #16]
 8015abc:	f004 fb3a 	bl	801a134 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8015ac0:	2100      	movs	r1, #0
 8015ac2:	6938      	ldr	r0, [r7, #16]
 8015ac4:	f004 fb9c 	bl	801a200 <tcp_accept>
    }
    if (shut_tx) {
 8015ac8:	7b7b      	ldrb	r3, [r7, #13]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d003      	beq.n	8015ad6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8015ace:	2100      	movs	r1, #0
 8015ad0:	6938      	ldr	r0, [r7, #16]
 8015ad2:	f004 fb51 	bl	801a178 <tcp_sent>
    }
    if (shut_close) {
 8015ad6:	7dbb      	ldrb	r3, [r7, #22]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d008      	beq.n	8015aee <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8015adc:	2200      	movs	r2, #0
 8015ade:	2100      	movs	r1, #0
 8015ae0:	6938      	ldr	r0, [r7, #16]
 8015ae2:	f004 fba5 	bl	801a230 <tcp_poll>
      tcp_err(tpcb, NULL);
 8015ae6:	2100      	movs	r1, #0
 8015ae8:	6938      	ldr	r0, [r7, #16]
 8015aea:	f004 fb67 	bl	801a1bc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8015aee:	7dbb      	ldrb	r3, [r7, #22]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d005      	beq.n	8015b00 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8015af4:	6938      	ldr	r0, [r7, #16]
 8015af6:	f003 f937 	bl	8018d68 <tcp_close>
 8015afa:	4603      	mov	r3, r0
 8015afc:	75fb      	strb	r3, [r7, #23]
 8015afe:	e007      	b.n	8015b10 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8015b00:	7bbb      	ldrb	r3, [r7, #14]
 8015b02:	7b7a      	ldrb	r2, [r7, #13]
 8015b04:	4619      	mov	r1, r3
 8015b06:	6938      	ldr	r0, [r7, #16]
 8015b08:	f003 f95a 	bl	8018dc0 <tcp_shutdown>
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8015b10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d102      	bne.n	8015b1e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8015b18:	2301      	movs	r3, #1
 8015b1a:	757b      	strb	r3, [r7, #21]
 8015b1c:	e016      	b.n	8015b4c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8015b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b26:	d10f      	bne.n	8015b48 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	6a1b      	ldr	r3, [r3, #32]
 8015b2c:	7a5b      	ldrb	r3, [r3, #9]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d10c      	bne.n	8015b4c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8015b32:	2301      	movs	r3, #1
 8015b34:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8015b36:	7dbb      	ldrb	r3, [r7, #22]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d007      	beq.n	8015b4c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8015b3c:	6938      	ldr	r0, [r7, #16]
 8015b3e:	f003 fa59 	bl	8018ff4 <tcp_abort>
          err = ERR_OK;
 8015b42:	2300      	movs	r3, #0
 8015b44:	75fb      	strb	r3, [r7, #23]
 8015b46:	e001      	b.n	8015b4c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8015b48:	2301      	movs	r3, #1
 8015b4a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8015b4c:	7d7b      	ldrb	r3, [r7, #21]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d052      	beq.n	8015bf8 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	6a1b      	ldr	r3, [r3, #32]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	330c      	adds	r3, #12
 8015b5a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	6a1b      	ldr	r3, [r3, #32]
 8015b60:	7dfa      	ldrb	r2, [r7, #23]
 8015b62:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	2200      	movs	r2, #0
 8015b68:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8015b70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d129      	bne.n	8015bcc <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8015b78:	7dbb      	ldrb	r3, [r7, #22]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d00c      	beq.n	8015b98 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	2200      	movs	r2, #0
 8015b82:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d005      	beq.n	8015b98 <lwip_netconn_do_close_internal+0x1f0>
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b90:	2200      	movs	r2, #0
 8015b92:	2104      	movs	r1, #4
 8015b94:	6878      	ldr	r0, [r7, #4]
 8015b96:	4798      	blx	r3
      }
      if (shut_rx) {
 8015b98:	7bbb      	ldrb	r3, [r7, #14]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d009      	beq.n	8015bb2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d005      	beq.n	8015bb2 <lwip_netconn_do_close_internal+0x20a>
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015baa:	2200      	movs	r2, #0
 8015bac:	2100      	movs	r1, #0
 8015bae:	6878      	ldr	r0, [r7, #4]
 8015bb0:	4798      	blx	r3
      }
      if (shut_tx) {
 8015bb2:	7b7b      	ldrb	r3, [r7, #13]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d009      	beq.n	8015bcc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d005      	beq.n	8015bcc <lwip_netconn_do_close_internal+0x224>
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	2102      	movs	r1, #2
 8015bc8:	6878      	ldr	r0, [r7, #4]
 8015bca:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8015bcc:	78fb      	ldrb	r3, [r7, #3]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d002      	beq.n	8015bd8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8015bd2:	68b8      	ldr	r0, [r7, #8]
 8015bd4:	f00b ffa6 	bl	8021b24 <sys_sem_signal>
    }
    return ERR_OK;
 8015bd8:	2300      	movs	r3, #0
 8015bda:	e03c      	b.n	8015c56 <lwip_netconn_do_close_internal+0x2ae>
 8015bdc:	08023c2c 	.word	0x08023c2c
 8015be0:	08023f00 	.word	0x08023f00
 8015be4:	08023c70 	.word	0x08023c70
 8015be8:	08023f10 	.word	0x08023f10
 8015bec:	08023f30 	.word	0x08023f30
 8015bf0:	08023f54 	.word	0x08023f54
 8015bf4:	08023d94 	.word	0x08023d94
  }
  if (!close_finished) {
 8015bf8:	7d7b      	ldrb	r3, [r7, #21]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d11e      	bne.n	8015c3c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8015bfe:	693b      	ldr	r3, [r7, #16]
 8015c00:	7d1b      	ldrb	r3, [r3, #20]
 8015c02:	2b01      	cmp	r3, #1
 8015c04:	d106      	bne.n	8015c14 <lwip_netconn_do_close_internal+0x26c>
 8015c06:	4b16      	ldr	r3, [pc, #88]	; (8015c60 <lwip_netconn_do_close_internal+0x2b8>)
 8015c08:	f240 4241 	movw	r2, #1089	; 0x441
 8015c0c:	4915      	ldr	r1, [pc, #84]	; (8015c64 <lwip_netconn_do_close_internal+0x2bc>)
 8015c0e:	4816      	ldr	r0, [pc, #88]	; (8015c68 <lwip_netconn_do_close_internal+0x2c0>)
 8015c10:	f00c fb96 	bl	8022340 <iprintf>
    if (shut_tx) {
 8015c14:	7b7b      	ldrb	r3, [r7, #13]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d003      	beq.n	8015c22 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8015c1a:	4914      	ldr	r1, [pc, #80]	; (8015c6c <lwip_netconn_do_close_internal+0x2c4>)
 8015c1c:	6938      	ldr	r0, [r7, #16]
 8015c1e:	f004 faab 	bl	801a178 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8015c22:	2201      	movs	r2, #1
 8015c24:	4912      	ldr	r1, [pc, #72]	; (8015c70 <lwip_netconn_do_close_internal+0x2c8>)
 8015c26:	6938      	ldr	r0, [r7, #16]
 8015c28:	f004 fb02 	bl	801a230 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8015c2c:	4911      	ldr	r1, [pc, #68]	; (8015c74 <lwip_netconn_do_close_internal+0x2cc>)
 8015c2e:	6938      	ldr	r0, [r7, #16]
 8015c30:	f004 fac4 	bl	801a1bc <tcp_err>
    tcp_arg(tpcb, conn);
 8015c34:	6879      	ldr	r1, [r7, #4]
 8015c36:	6938      	ldr	r0, [r7, #16]
 8015c38:	f004 fa6a 	bl	801a110 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8015c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d106      	bne.n	8015c52 <lwip_netconn_do_close_internal+0x2aa>
 8015c44:	4b06      	ldr	r3, [pc, #24]	; (8015c60 <lwip_netconn_do_close_internal+0x2b8>)
 8015c46:	f240 424d 	movw	r2, #1101	; 0x44d
 8015c4a:	490b      	ldr	r1, [pc, #44]	; (8015c78 <lwip_netconn_do_close_internal+0x2d0>)
 8015c4c:	4806      	ldr	r0, [pc, #24]	; (8015c68 <lwip_netconn_do_close_internal+0x2c0>)
 8015c4e:	f00c fb77 	bl	8022340 <iprintf>
  return err;
 8015c52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	3718      	adds	r7, #24
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}
 8015c5e:	bf00      	nop
 8015c60:	08023c2c 	.word	0x08023c2c
 8015c64:	08023f68 	.word	0x08023f68
 8015c68:	08023c70 	.word	0x08023c70
 8015c6c:	08015221 	.word	0x08015221
 8015c70:	08015159 	.word	0x08015159
 8015c74:	080152c9 	.word	0x080152c9
 8015c78:	08023f8c 	.word	0x08023f8c

08015c7c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b084      	sub	sp, #16
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	785b      	ldrb	r3, [r3, #1]
 8015c8e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8015c90:	7afb      	ldrb	r3, [r7, #11]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d00d      	beq.n	8015cb2 <lwip_netconn_do_delconn+0x36>
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	781b      	ldrb	r3, [r3, #0]
 8015c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015ca0:	2b10      	cmp	r3, #16
 8015ca2:	d006      	beq.n	8015cb2 <lwip_netconn_do_delconn+0x36>
 8015ca4:	4b60      	ldr	r3, [pc, #384]	; (8015e28 <lwip_netconn_do_delconn+0x1ac>)
 8015ca6:	f240 425e 	movw	r2, #1118	; 0x45e
 8015caa:	4960      	ldr	r1, [pc, #384]	; (8015e2c <lwip_netconn_do_delconn+0x1b0>)
 8015cac:	4860      	ldr	r0, [pc, #384]	; (8015e30 <lwip_netconn_do_delconn+0x1b4>)
 8015cae:	f00c fb47 	bl	8022340 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8015cb2:	7afb      	ldrb	r3, [r7, #11]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d005      	beq.n	8015cc4 <lwip_netconn_do_delconn+0x48>
 8015cb8:	7afb      	ldrb	r3, [r7, #11]
 8015cba:	2b02      	cmp	r3, #2
 8015cbc:	d002      	beq.n	8015cc4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8015cbe:	7afb      	ldrb	r3, [r7, #11]
 8015cc0:	2b03      	cmp	r3, #3
 8015cc2:	d109      	bne.n	8015cd8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8015cc4:	7afb      	ldrb	r3, [r7, #11]
 8015cc6:	2b03      	cmp	r3, #3
 8015cc8:	d10a      	bne.n	8015ce0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	7f1b      	ldrb	r3, [r3, #28]
 8015cd0:	f003 0304 	and.w	r3, r3, #4
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d103      	bne.n	8015ce0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	22fb      	movs	r2, #251	; 0xfb
 8015cdc:	711a      	strb	r2, [r3, #4]
 8015cde:	e097      	b.n	8015e10 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8015ce0:	7afb      	ldrb	r3, [r7, #11]
 8015ce2:	2b03      	cmp	r3, #3
 8015ce4:	d10d      	bne.n	8015d02 <lwip_netconn_do_delconn+0x86>
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	7f1b      	ldrb	r3, [r3, #28]
 8015cec:	f003 0304 	and.w	r3, r3, #4
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d106      	bne.n	8015d02 <lwip_netconn_do_delconn+0x86>
 8015cf4:	4b4c      	ldr	r3, [pc, #304]	; (8015e28 <lwip_netconn_do_delconn+0x1ac>)
 8015cf6:	f240 427a 	movw	r2, #1146	; 0x47a
 8015cfa:	494e      	ldr	r1, [pc, #312]	; (8015e34 <lwip_netconn_do_delconn+0x1b8>)
 8015cfc:	484c      	ldr	r0, [pc, #304]	; (8015e30 <lwip_netconn_do_delconn+0x1b4>)
 8015cfe:	f00c fb1f 	bl	8022340 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	2200      	movs	r2, #0
 8015d06:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	f7ff fdcd 	bl	80158ac <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	685b      	ldr	r3, [r3, #4]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d05f      	beq.n	8015ddc <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	781b      	ldrb	r3, [r3, #0]
 8015d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015d26:	2b10      	cmp	r3, #16
 8015d28:	d00d      	beq.n	8015d46 <lwip_netconn_do_delconn+0xca>
 8015d2a:	2b20      	cmp	r3, #32
 8015d2c:	d151      	bne.n	8015dd2 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	685b      	ldr	r3, [r3, #4]
 8015d34:	2200      	movs	r2, #0
 8015d36:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	685b      	ldr	r3, [r3, #4]
 8015d3e:	4618      	mov	r0, r3
 8015d40:	f009 fa6c 	bl	801f21c <udp_remove>
          break;
 8015d44:	e046      	b.n	8015dd4 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	6a1b      	ldr	r3, [r3, #32]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d006      	beq.n	8015d5e <lwip_netconn_do_delconn+0xe2>
 8015d50:	4b35      	ldr	r3, [pc, #212]	; (8015e28 <lwip_netconn_do_delconn+0x1ac>)
 8015d52:	f240 4294 	movw	r2, #1172	; 0x494
 8015d56:	4938      	ldr	r1, [pc, #224]	; (8015e38 <lwip_netconn_do_delconn+0x1bc>)
 8015d58:	4835      	ldr	r0, [pc, #212]	; (8015e30 <lwip_netconn_do_delconn+0x1b4>)
 8015d5a:	f00c faf1 	bl	8022340 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	2204      	movs	r2, #4
 8015d64:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	2203      	movs	r2, #3
 8015d6a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	68fa      	ldr	r2, [r7, #12]
 8015d72:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	2100      	movs	r1, #0
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	f7ff fe14 	bl	80159a8 <lwip_netconn_do_close_internal>
 8015d80:	4603      	mov	r3, r0
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d04b      	beq.n	8015e1e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	785b      	ldrb	r3, [r3, #1]
 8015d8c:	2b04      	cmp	r3, #4
 8015d8e:	d006      	beq.n	8015d9e <lwip_netconn_do_delconn+0x122>
 8015d90:	4b25      	ldr	r3, [pc, #148]	; (8015e28 <lwip_netconn_do_delconn+0x1ac>)
 8015d92:	f240 429a 	movw	r2, #1178	; 0x49a
 8015d96:	4929      	ldr	r1, [pc, #164]	; (8015e3c <lwip_netconn_do_delconn+0x1c0>)
 8015d98:	4825      	ldr	r0, [pc, #148]	; (8015e30 <lwip_netconn_do_delconn+0x1b4>)
 8015d9a:	f00c fad1 	bl	8022340 <iprintf>
            UNLOCK_TCPIP_CORE();
 8015d9e:	4828      	ldr	r0, [pc, #160]	; (8015e40 <lwip_netconn_do_delconn+0x1c4>)
 8015da0:	f00b ff29 	bl	8021bf6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	330c      	adds	r3, #12
 8015daa:	2100      	movs	r1, #0
 8015dac:	4618      	mov	r0, r3
 8015dae:	f00b fe88 	bl	8021ac2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8015db2:	4823      	ldr	r0, [pc, #140]	; (8015e40 <lwip_netconn_do_delconn+0x1c4>)
 8015db4:	f00b ff10 	bl	8021bd8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	785b      	ldrb	r3, [r3, #1]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d02d      	beq.n	8015e1e <lwip_netconn_do_delconn+0x1a2>
 8015dc2:	4b19      	ldr	r3, [pc, #100]	; (8015e28 <lwip_netconn_do_delconn+0x1ac>)
 8015dc4:	f240 429e 	movw	r2, #1182	; 0x49e
 8015dc8:	491c      	ldr	r1, [pc, #112]	; (8015e3c <lwip_netconn_do_delconn+0x1c0>)
 8015dca:	4819      	ldr	r0, [pc, #100]	; (8015e30 <lwip_netconn_do_delconn+0x1b4>)
 8015dcc:	f00c fab8 	bl	8022340 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8015dd0:	e025      	b.n	8015e1e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8015dd2:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	2200      	movs	r2, #0
 8015dda:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d007      	beq.n	8015df6 <lwip_netconn_do_delconn+0x17a>
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dec:	68fa      	ldr	r2, [r7, #12]
 8015dee:	6810      	ldr	r0, [r2, #0]
 8015df0:	2200      	movs	r2, #0
 8015df2:	2100      	movs	r1, #0
 8015df4:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d007      	beq.n	8015e10 <lwip_netconn_do_delconn+0x194>
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e06:	68fa      	ldr	r2, [r7, #12]
 8015e08:	6810      	ldr	r0, [r2, #0]
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	2102      	movs	r1, #2
 8015e0e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	330c      	adds	r3, #12
 8015e16:	4618      	mov	r0, r3
 8015e18:	f00b fe9e 	bl	8021b58 <sys_sem_valid>
 8015e1c:	e000      	b.n	8015e20 <lwip_netconn_do_delconn+0x1a4>
          return;
 8015e1e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8015e20:	3710      	adds	r7, #16
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd80      	pop	{r7, pc}
 8015e26:	bf00      	nop
 8015e28:	08023c2c 	.word	0x08023c2c
 8015e2c:	08023f9c 	.word	0x08023f9c
 8015e30:	08023c70 	.word	0x08023c70
 8015e34:	08023fb0 	.word	0x08023fb0
 8015e38:	08023fd0 	.word	0x08023fd0
 8015e3c:	08023fec 	.word	0x08023fec
 8015e40:	2002bee0 	.word	0x2002bee0

08015e44 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b084      	sub	sp, #16
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8015e50:	68bb      	ldr	r3, [r7, #8]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	685b      	ldr	r3, [r3, #4]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d025      	beq.n	8015ea6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015e5a:	68bb      	ldr	r3, [r7, #8]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	781b      	ldrb	r3, [r3, #0]
 8015e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015e64:	2b10      	cmp	r3, #16
 8015e66:	d00e      	beq.n	8015e86 <lwip_netconn_do_bind+0x42>
 8015e68:	2b20      	cmp	r3, #32
 8015e6a:	d119      	bne.n	8015ea0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8015e6c:	68bb      	ldr	r3, [r7, #8]
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	6858      	ldr	r0, [r3, #4]
 8015e72:	68bb      	ldr	r3, [r7, #8]
 8015e74:	6899      	ldr	r1, [r3, #8]
 8015e76:	68bb      	ldr	r3, [r7, #8]
 8015e78:	899b      	ldrh	r3, [r3, #12]
 8015e7a:	461a      	mov	r2, r3
 8015e7c:	f009 f926 	bl	801f0cc <udp_bind>
 8015e80:	4603      	mov	r3, r0
 8015e82:	73fb      	strb	r3, [r7, #15]
        break;
 8015e84:	e011      	b.n	8015eaa <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8015e86:	68bb      	ldr	r3, [r7, #8]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	6858      	ldr	r0, [r3, #4]
 8015e8c:	68bb      	ldr	r3, [r7, #8]
 8015e8e:	6899      	ldr	r1, [r3, #8]
 8015e90:	68bb      	ldr	r3, [r7, #8]
 8015e92:	899b      	ldrh	r3, [r3, #12]
 8015e94:	461a      	mov	r2, r3
 8015e96:	f003 f8b9 	bl	801900c <tcp_bind>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	73fb      	strb	r3, [r7, #15]
        break;
 8015e9e:	e004      	b.n	8015eaa <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8015ea0:	23fa      	movs	r3, #250	; 0xfa
 8015ea2:	73fb      	strb	r3, [r7, #15]
        break;
 8015ea4:	e001      	b.n	8015eaa <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8015ea6:	23fa      	movs	r3, #250	; 0xfa
 8015ea8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8015eaa:	68bb      	ldr	r3, [r7, #8]
 8015eac:	7bfa      	ldrb	r2, [r7, #15]
 8015eae:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8015eb0:	bf00      	nop
 8015eb2:	3710      	adds	r7, #16
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd80      	pop	{r7, pc}

08015eb8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b086      	sub	sp, #24
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8015ec4:	697b      	ldr	r3, [r7, #20]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	685b      	ldr	r3, [r3, #4]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d07f      	beq.n	8015fce <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8015ece:	697b      	ldr	r3, [r7, #20]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	781b      	ldrb	r3, [r3, #0]
 8015ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015ed8:	2b10      	cmp	r3, #16
 8015eda:	d175      	bne.n	8015fc8 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8015edc:	697b      	ldr	r3, [r7, #20]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	785b      	ldrb	r3, [r3, #1]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d165      	bne.n	8015fb2 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8015ee6:	697b      	ldr	r3, [r7, #20]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	685b      	ldr	r3, [r3, #4]
 8015eec:	7d1b      	ldrb	r3, [r3, #20]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d002      	beq.n	8015ef8 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8015ef2:	23fa      	movs	r3, #250	; 0xfa
 8015ef4:	72fb      	strb	r3, [r7, #11]
 8015ef6:	e06c      	b.n	8015fd2 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8015ef8:	23ff      	movs	r3, #255	; 0xff
 8015efa:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8015efc:	697b      	ldr	r3, [r7, #20]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	685b      	ldr	r3, [r3, #4]
 8015f02:	f107 020b 	add.w	r2, r7, #11
 8015f06:	7cf9      	ldrb	r1, [r7, #19]
 8015f08:	4618      	mov	r0, r3
 8015f0a:	f003 f937 	bl	801917c <tcp_listen_with_backlog_and_err>
 8015f0e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d05d      	beq.n	8015fd2 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8015f16:	697b      	ldr	r3, [r7, #20]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	3310      	adds	r3, #16
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f00b fd8d 	bl	8021a3c <sys_mbox_valid>
 8015f22:	4603      	mov	r3, r0
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d00b      	beq.n	8015f40 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8015f28:	697b      	ldr	r3, [r7, #20]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	3310      	adds	r3, #16
 8015f2e:	4618      	mov	r0, r3
 8015f30:	f00b fd10 	bl	8021954 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8015f34:	697b      	ldr	r3, [r7, #20]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	3310      	adds	r3, #16
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	f00b fd8f 	bl	8021a5e <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8015f40:	2300      	movs	r3, #0
 8015f42:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8015f44:	697b      	ldr	r3, [r7, #20]
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	3314      	adds	r3, #20
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	f00b fd76 	bl	8021a3c <sys_mbox_valid>
 8015f50:	4603      	mov	r3, r0
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d108      	bne.n	8015f68 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8015f56:	697b      	ldr	r3, [r7, #20]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	3314      	adds	r3, #20
 8015f5c:	2106      	movs	r1, #6
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f00b fcde 	bl	8021920 <sys_mbox_new>
 8015f64:	4603      	mov	r3, r0
 8015f66:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8015f68:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d118      	bne.n	8015fa2 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8015f70:	697b      	ldr	r3, [r7, #20]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	2202      	movs	r2, #2
 8015f76:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8015f78:	697b      	ldr	r3, [r7, #20]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	68fa      	ldr	r2, [r7, #12]
 8015f7e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8015f80:	697b      	ldr	r3, [r7, #20]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	685a      	ldr	r2, [r3, #4]
 8015f86:	697b      	ldr	r3, [r7, #20]
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	4619      	mov	r1, r3
 8015f8c:	4610      	mov	r0, r2
 8015f8e:	f004 f8bf 	bl	801a110 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8015f92:	697b      	ldr	r3, [r7, #20]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	685b      	ldr	r3, [r3, #4]
 8015f98:	4912      	ldr	r1, [pc, #72]	; (8015fe4 <lwip_netconn_do_listen+0x12c>)
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	f004 f930 	bl	801a200 <tcp_accept>
 8015fa0:	e017      	b.n	8015fd2 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8015fa2:	68f8      	ldr	r0, [r7, #12]
 8015fa4:	f002 fee0 	bl	8018d68 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8015fa8:	697b      	ldr	r3, [r7, #20]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	2200      	movs	r2, #0
 8015fae:	605a      	str	r2, [r3, #4]
 8015fb0:	e00f      	b.n	8015fd2 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8015fb2:	697b      	ldr	r3, [r7, #20]
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	785b      	ldrb	r3, [r3, #1]
 8015fb8:	2b02      	cmp	r3, #2
 8015fba:	d102      	bne.n	8015fc2 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	72fb      	strb	r3, [r7, #11]
 8015fc0:	e007      	b.n	8015fd2 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8015fc2:	23f5      	movs	r3, #245	; 0xf5
 8015fc4:	72fb      	strb	r3, [r7, #11]
 8015fc6:	e004      	b.n	8015fd2 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8015fc8:	23f0      	movs	r3, #240	; 0xf0
 8015fca:	72fb      	strb	r3, [r7, #11]
 8015fcc:	e001      	b.n	8015fd2 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8015fce:	23f5      	movs	r3, #245	; 0xf5
 8015fd0:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8015fd2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8015fd6:	697b      	ldr	r3, [r7, #20]
 8015fd8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8015fda:	bf00      	nop
 8015fdc:	3718      	adds	r7, #24
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	bd80      	pop	{r7, pc}
 8015fe2:	bf00      	nop
 8015fe4:	080154c5 	.word	0x080154c5

08015fe8 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b086      	sub	sp, #24
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8015ff4:	693b      	ldr	r3, [r7, #16]
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8015ffa:	693b      	ldr	r3, [r7, #16]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	685b      	ldr	r3, [r3, #4]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d022      	beq.n	801604a <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8016004:	693b      	ldr	r3, [r7, #16]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	781b      	ldrb	r3, [r3, #0]
 801600a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801600e:	2b10      	cmp	r3, #16
 8016010:	d11b      	bne.n	801604a <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	689b      	ldr	r3, [r3, #8]
 8016016:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8016018:	697b      	ldr	r3, [r7, #20]
 801601a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801601e:	d202      	bcs.n	8016026 <lwip_netconn_do_recv+0x3e>
 8016020:	697b      	ldr	r3, [r7, #20]
 8016022:	b29b      	uxth	r3, r3
 8016024:	e001      	b.n	801602a <lwip_netconn_do_recv+0x42>
 8016026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801602a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 801602c:	693b      	ldr	r3, [r7, #16]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	685b      	ldr	r3, [r3, #4]
 8016032:	89fa      	ldrh	r2, [r7, #14]
 8016034:	4611      	mov	r1, r2
 8016036:	4618      	mov	r0, r3
 8016038:	f003 f9a4 	bl	8019384 <tcp_recved>
        remaining -= recved;
 801603c:	89fb      	ldrh	r3, [r7, #14]
 801603e:	697a      	ldr	r2, [r7, #20]
 8016040:	1ad3      	subs	r3, r2, r3
 8016042:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8016044:	697b      	ldr	r3, [r7, #20]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d1e6      	bne.n	8016018 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 801604a:	bf00      	nop
 801604c:	3718      	adds	r7, #24
 801604e:	46bd      	mov	sp, r7
 8016050:	bd80      	pop	{r7, pc}
	...

08016054 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b088      	sub	sp, #32
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
 801605c:	460b      	mov	r3, r1
 801605e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8016060:	2300      	movs	r3, #0
 8016062:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	2b00      	cmp	r3, #0
 8016068:	d106      	bne.n	8016078 <lwip_netconn_do_writemore+0x24>
 801606a:	4b96      	ldr	r3, [pc, #600]	; (80162c4 <lwip_netconn_do_writemore+0x270>)
 801606c:	f240 6273 	movw	r2, #1651	; 0x673
 8016070:	4995      	ldr	r1, [pc, #596]	; (80162c8 <lwip_netconn_do_writemore+0x274>)
 8016072:	4896      	ldr	r0, [pc, #600]	; (80162cc <lwip_netconn_do_writemore+0x278>)
 8016074:	f00c f964 	bl	8022340 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	785b      	ldrb	r3, [r3, #1]
 801607c:	2b01      	cmp	r3, #1
 801607e:	d006      	beq.n	801608e <lwip_netconn_do_writemore+0x3a>
 8016080:	4b90      	ldr	r3, [pc, #576]	; (80162c4 <lwip_netconn_do_writemore+0x270>)
 8016082:	f240 6274 	movw	r2, #1652	; 0x674
 8016086:	4992      	ldr	r1, [pc, #584]	; (80162d0 <lwip_netconn_do_writemore+0x27c>)
 8016088:	4890      	ldr	r0, [pc, #576]	; (80162cc <lwip_netconn_do_writemore+0x278>)
 801608a:	f00c f959 	bl	8022340 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	6a1b      	ldr	r3, [r3, #32]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d106      	bne.n	80160a4 <lwip_netconn_do_writemore+0x50>
 8016096:	4b8b      	ldr	r3, [pc, #556]	; (80162c4 <lwip_netconn_do_writemore+0x270>)
 8016098:	f240 6275 	movw	r2, #1653	; 0x675
 801609c:	498d      	ldr	r1, [pc, #564]	; (80162d4 <lwip_netconn_do_writemore+0x280>)
 801609e:	488b      	ldr	r0, [pc, #556]	; (80162cc <lwip_netconn_do_writemore+0x278>)
 80160a0:	f00c f94e 	bl	8022340 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	685b      	ldr	r3, [r3, #4]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d106      	bne.n	80160ba <lwip_netconn_do_writemore+0x66>
 80160ac:	4b85      	ldr	r3, [pc, #532]	; (80162c4 <lwip_netconn_do_writemore+0x270>)
 80160ae:	f240 6276 	movw	r2, #1654	; 0x676
 80160b2:	4989      	ldr	r1, [pc, #548]	; (80162d8 <lwip_netconn_do_writemore+0x284>)
 80160b4:	4885      	ldr	r0, [pc, #532]	; (80162cc <lwip_netconn_do_writemore+0x278>)
 80160b6:	f00c f943 	bl	8022340 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	6a1b      	ldr	r3, [r3, #32]
 80160be:	699a      	ldr	r2, [r3, #24]
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	6a1b      	ldr	r3, [r3, #32]
 80160c4:	695b      	ldr	r3, [r3, #20]
 80160c6:	429a      	cmp	r2, r3
 80160c8:	d306      	bcc.n	80160d8 <lwip_netconn_do_writemore+0x84>
 80160ca:	4b7e      	ldr	r3, [pc, #504]	; (80162c4 <lwip_netconn_do_writemore+0x270>)
 80160cc:	f240 6277 	movw	r2, #1655	; 0x677
 80160d0:	4982      	ldr	r1, [pc, #520]	; (80162dc <lwip_netconn_do_writemore+0x288>)
 80160d2:	487e      	ldr	r0, [pc, #504]	; (80162cc <lwip_netconn_do_writemore+0x278>)
 80160d4:	f00c f934 	bl	8022340 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	6a1b      	ldr	r3, [r3, #32]
 80160dc:	899b      	ldrh	r3, [r3, #12]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d106      	bne.n	80160f0 <lwip_netconn_do_writemore+0x9c>
 80160e2:	4b78      	ldr	r3, [pc, #480]	; (80162c4 <lwip_netconn_do_writemore+0x270>)
 80160e4:	f240 6279 	movw	r2, #1657	; 0x679
 80160e8:	497d      	ldr	r1, [pc, #500]	; (80162e0 <lwip_netconn_do_writemore+0x28c>)
 80160ea:	4878      	ldr	r0, [pc, #480]	; (80162cc <lwip_netconn_do_writemore+0x278>)
 80160ec:	f00c f928 	bl	8022340 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	6a1b      	ldr	r3, [r3, #32]
 80160f4:	7f1b      	ldrb	r3, [r3, #28]
 80160f6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	7f1b      	ldrb	r3, [r3, #28]
 80160fc:	f003 0302 	and.w	r3, r3, #2
 8016100:	2b00      	cmp	r3, #0
 8016102:	d104      	bne.n	801610e <lwip_netconn_do_writemore+0xba>
 8016104:	7ebb      	ldrb	r3, [r7, #26]
 8016106:	f003 0304 	and.w	r3, r3, #4
 801610a:	2b00      	cmp	r3, #0
 801610c:	d001      	beq.n	8016112 <lwip_netconn_do_writemore+0xbe>
 801610e:	2301      	movs	r3, #1
 8016110:	e000      	b.n	8016114 <lwip_netconn_do_writemore+0xc0>
 8016112:	2300      	movs	r3, #0
 8016114:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	6a1b      	ldr	r3, [r3, #32]
 801611a:	689b      	ldr	r3, [r3, #8]
 801611c:	681a      	ldr	r2, [r3, #0]
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	6a1b      	ldr	r3, [r3, #32]
 8016122:	691b      	ldr	r3, [r3, #16]
 8016124:	4413      	add	r3, r2
 8016126:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	6a1b      	ldr	r3, [r3, #32]
 801612c:	689b      	ldr	r3, [r3, #8]
 801612e:	685a      	ldr	r2, [r3, #4]
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	6a1b      	ldr	r3, [r3, #32]
 8016134:	691b      	ldr	r3, [r3, #16]
 8016136:	1ad3      	subs	r3, r2, r3
 8016138:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 801613a:	693b      	ldr	r3, [r7, #16]
 801613c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016140:	d307      	bcc.n	8016152 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8016142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016146:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8016148:	7ebb      	ldrb	r3, [r7, #26]
 801614a:	f043 0302 	orr.w	r3, r3, #2
 801614e:	76bb      	strb	r3, [r7, #26]
 8016150:	e001      	b.n	8016156 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8016152:	693b      	ldr	r3, [r7, #16]
 8016154:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	685b      	ldr	r3, [r3, #4]
 801615a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801615e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8016160:	89fa      	ldrh	r2, [r7, #14]
 8016162:	8bbb      	ldrh	r3, [r7, #28]
 8016164:	429a      	cmp	r2, r3
 8016166:	d216      	bcs.n	8016196 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8016168:	89fb      	ldrh	r3, [r7, #14]
 801616a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 801616c:	7e3b      	ldrb	r3, [r7, #24]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d00d      	beq.n	801618e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8016172:	8bbb      	ldrh	r3, [r7, #28]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d10e      	bne.n	8016196 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	6a1b      	ldr	r3, [r3, #32]
 801617c:	699b      	ldr	r3, [r3, #24]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d102      	bne.n	8016188 <lwip_netconn_do_writemore+0x134>
 8016182:	f06f 0306 	mvn.w	r3, #6
 8016186:	e000      	b.n	801618a <lwip_netconn_do_writemore+0x136>
 8016188:	2300      	movs	r3, #0
 801618a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 801618c:	e07d      	b.n	801628a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801618e:	7ebb      	ldrb	r3, [r7, #26]
 8016190:	f043 0302 	orr.w	r3, r3, #2
 8016194:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	6a1b      	ldr	r3, [r3, #32]
 801619a:	691a      	ldr	r2, [r3, #16]
 801619c:	8bbb      	ldrh	r3, [r7, #28]
 801619e:	441a      	add	r2, r3
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	6a1b      	ldr	r3, [r3, #32]
 80161a4:	689b      	ldr	r3, [r3, #8]
 80161a6:	685b      	ldr	r3, [r3, #4]
 80161a8:	429a      	cmp	r2, r3
 80161aa:	d906      	bls.n	80161ba <lwip_netconn_do_writemore+0x166>
 80161ac:	4b45      	ldr	r3, [pc, #276]	; (80162c4 <lwip_netconn_do_writemore+0x270>)
 80161ae:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80161b2:	494c      	ldr	r1, [pc, #304]	; (80162e4 <lwip_netconn_do_writemore+0x290>)
 80161b4:	4845      	ldr	r0, [pc, #276]	; (80162cc <lwip_netconn_do_writemore+0x278>)
 80161b6:	f00c f8c3 	bl	8022340 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80161ba:	8bbb      	ldrh	r3, [r7, #28]
 80161bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80161c0:	4293      	cmp	r3, r2
 80161c2:	d103      	bne.n	80161cc <lwip_netconn_do_writemore+0x178>
 80161c4:	693b      	ldr	r3, [r7, #16]
 80161c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80161ca:	d209      	bcs.n	80161e0 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80161cc:	693b      	ldr	r3, [r7, #16]
 80161ce:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80161d0:	8bba      	ldrh	r2, [r7, #28]
 80161d2:	429a      	cmp	r2, r3
 80161d4:	d10b      	bne.n	80161ee <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	6a1b      	ldr	r3, [r3, #32]
 80161da:	899b      	ldrh	r3, [r3, #12]
 80161dc:	2b01      	cmp	r3, #1
 80161de:	d906      	bls.n	80161ee <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80161e0:	2301      	movs	r3, #1
 80161e2:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80161e4:	7ebb      	ldrb	r3, [r7, #26]
 80161e6:	f043 0302 	orr.w	r3, r3, #2
 80161ea:	76bb      	strb	r3, [r7, #26]
 80161ec:	e001      	b.n	80161f2 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80161ee:	2300      	movs	r3, #0
 80161f0:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	6858      	ldr	r0, [r3, #4]
 80161f6:	7ebb      	ldrb	r3, [r7, #26]
 80161f8:	8bba      	ldrh	r2, [r7, #28]
 80161fa:	6979      	ldr	r1, [r7, #20]
 80161fc:	f006 feca 	bl	801cf94 <tcp_write>
 8016200:	4603      	mov	r3, r0
 8016202:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8016204:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d12c      	bne.n	8016266 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	6a1b      	ldr	r3, [r3, #32]
 8016210:	6999      	ldr	r1, [r3, #24]
 8016212:	8bba      	ldrh	r2, [r7, #28]
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	6a1b      	ldr	r3, [r3, #32]
 8016218:	440a      	add	r2, r1
 801621a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	6a1b      	ldr	r3, [r3, #32]
 8016220:	6919      	ldr	r1, [r3, #16]
 8016222:	8bba      	ldrh	r2, [r7, #28]
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	6a1b      	ldr	r3, [r3, #32]
 8016228:	440a      	add	r2, r1
 801622a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	6a1b      	ldr	r3, [r3, #32]
 8016230:	691a      	ldr	r2, [r3, #16]
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	6a1b      	ldr	r3, [r3, #32]
 8016236:	689b      	ldr	r3, [r3, #8]
 8016238:	685b      	ldr	r3, [r3, #4]
 801623a:	429a      	cmp	r2, r3
 801623c:	d113      	bne.n	8016266 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	6a1b      	ldr	r3, [r3, #32]
 8016242:	899a      	ldrh	r2, [r3, #12]
 8016244:	3a01      	subs	r2, #1
 8016246:	b292      	uxth	r2, r2
 8016248:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	6a1b      	ldr	r3, [r3, #32]
 801624e:	899b      	ldrh	r3, [r3, #12]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d008      	beq.n	8016266 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	6a1b      	ldr	r3, [r3, #32]
 8016258:	689a      	ldr	r2, [r3, #8]
 801625a:	3208      	adds	r2, #8
 801625c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	6a1b      	ldr	r3, [r3, #32]
 8016262:	2200      	movs	r2, #0
 8016264:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8016266:	7e7b      	ldrb	r3, [r7, #25]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d004      	beq.n	8016276 <lwip_netconn_do_writemore+0x222>
 801626c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016270:	2b00      	cmp	r3, #0
 8016272:	f43f af50 	beq.w	8016116 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8016276:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d004      	beq.n	8016288 <lwip_netconn_do_writemore+0x234>
 801627e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016286:	d146      	bne.n	8016316 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8016288:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 801628a:	7e3b      	ldrb	r3, [r7, #24]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d02b      	beq.n	80162e8 <lwip_netconn_do_writemore+0x294>
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	6a1b      	ldr	r3, [r3, #32]
 8016294:	699a      	ldr	r2, [r3, #24]
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	6a1b      	ldr	r3, [r3, #32]
 801629a:	695b      	ldr	r3, [r3, #20]
 801629c:	429a      	cmp	r2, r3
 801629e:	d223      	bcs.n	80162e8 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d005      	beq.n	80162b4 <lwip_netconn_do_writemore+0x260>
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162ac:	2200      	movs	r2, #0
 80162ae:	2103      	movs	r1, #3
 80162b0:	6878      	ldr	r0, [r7, #4]
 80162b2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	7f1b      	ldrb	r3, [r3, #28]
 80162b8:	f043 0310 	orr.w	r3, r3, #16
 80162bc:	b2da      	uxtb	r2, r3
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	771a      	strb	r2, [r3, #28]
 80162c2:	e028      	b.n	8016316 <lwip_netconn_do_writemore+0x2c2>
 80162c4:	08023c2c 	.word	0x08023c2c
 80162c8:	08023d84 	.word	0x08023d84
 80162cc:	08023c70 	.word	0x08023c70
 80162d0:	0802408c 	.word	0x0802408c
 80162d4:	08023d94 	.word	0x08023d94
 80162d8:	080240ac 	.word	0x080240ac
 80162dc:	080240c4 	.word	0x080240c4
 80162e0:	08024104 	.word	0x08024104
 80162e4:	0802412c 	.word	0x0802412c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	685b      	ldr	r3, [r3, #4]
 80162ec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80162f0:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80162f4:	d305      	bcc.n	8016302 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	685b      	ldr	r3, [r3, #4]
 80162fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80162fe:	2b04      	cmp	r3, #4
 8016300:	d909      	bls.n	8016316 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016306:	2b00      	cmp	r3, #0
 8016308:	d005      	beq.n	8016316 <lwip_netconn_do_writemore+0x2c2>
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801630e:	2200      	movs	r2, #0
 8016310:	2103      	movs	r1, #3
 8016312:	6878      	ldr	r0, [r7, #4]
 8016314:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8016316:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d11d      	bne.n	801635a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	6a1b      	ldr	r3, [r3, #32]
 8016322:	699a      	ldr	r2, [r3, #24]
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	6a1b      	ldr	r3, [r3, #32]
 8016328:	695b      	ldr	r3, [r3, #20]
 801632a:	429a      	cmp	r2, r3
 801632c:	d002      	beq.n	8016334 <lwip_netconn_do_writemore+0x2e0>
 801632e:	7e3b      	ldrb	r3, [r7, #24]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d001      	beq.n	8016338 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8016334:	2301      	movs	r3, #1
 8016336:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	685b      	ldr	r3, [r3, #4]
 801633c:	4618      	mov	r0, r3
 801633e:	f007 fc13 	bl	801db68 <tcp_output>
 8016342:	4603      	mov	r3, r0
 8016344:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8016346:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801634a:	f113 0f04 	cmn.w	r3, #4
 801634e:	d12c      	bne.n	80163aa <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8016350:	7b3b      	ldrb	r3, [r7, #12]
 8016352:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016354:	2301      	movs	r3, #1
 8016356:	76fb      	strb	r3, [r7, #27]
 8016358:	e027      	b.n	80163aa <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 801635a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801635e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016362:	d120      	bne.n	80163a6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	685b      	ldr	r3, [r3, #4]
 8016368:	4618      	mov	r0, r3
 801636a:	f007 fbfd 	bl	801db68 <tcp_output>
 801636e:	4603      	mov	r3, r0
 8016370:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8016372:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8016376:	f113 0f04 	cmn.w	r3, #4
 801637a:	d104      	bne.n	8016386 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801637c:	7b7b      	ldrb	r3, [r7, #13]
 801637e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016380:	2301      	movs	r3, #1
 8016382:	76fb      	strb	r3, [r7, #27]
 8016384:	e011      	b.n	80163aa <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8016386:	7e3b      	ldrb	r3, [r7, #24]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d00e      	beq.n	80163aa <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	6a1b      	ldr	r3, [r3, #32]
 8016390:	699b      	ldr	r3, [r3, #24]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d102      	bne.n	801639c <lwip_netconn_do_writemore+0x348>
 8016396:	f06f 0306 	mvn.w	r3, #6
 801639a:	e000      	b.n	801639e <lwip_netconn_do_writemore+0x34a>
 801639c:	2300      	movs	r3, #0
 801639e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80163a0:	2301      	movs	r3, #1
 80163a2:	76fb      	strb	r3, [r7, #27]
 80163a4:	e001      	b.n	80163aa <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80163a6:	2301      	movs	r3, #1
 80163a8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80163aa:	7efb      	ldrb	r3, [r7, #27]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d015      	beq.n	80163dc <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	6a1b      	ldr	r3, [r3, #32]
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	330c      	adds	r3, #12
 80163b8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	6a1b      	ldr	r3, [r3, #32]
 80163be:	7ffa      	ldrb	r2, [r7, #31]
 80163c0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	2200      	movs	r2, #0
 80163c6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2200      	movs	r2, #0
 80163cc:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80163ce:	78fb      	ldrb	r3, [r7, #3]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d006      	beq.n	80163e2 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80163d4:	68b8      	ldr	r0, [r7, #8]
 80163d6:	f00b fba5 	bl	8021b24 <sys_sem_signal>
 80163da:	e002      	b.n	80163e2 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80163dc:	f04f 33ff 	mov.w	r3, #4294967295
 80163e0:	e000      	b.n	80163e4 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80163e2:	2300      	movs	r3, #0
}
 80163e4:	4618      	mov	r0, r3
 80163e6:	3720      	adds	r7, #32
 80163e8:	46bd      	mov	sp, r7
 80163ea:	bd80      	pop	{r7, pc}

080163ec <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b084      	sub	sp, #16
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80163f8:	68bb      	ldr	r3, [r7, #8]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	4618      	mov	r0, r3
 80163fe:	f7fe fd1c 	bl	8014e3a <netconn_err>
 8016402:	4603      	mov	r3, r0
 8016404:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8016406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d166      	bne.n	80164dc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801640e:	68bb      	ldr	r3, [r7, #8]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	781b      	ldrb	r3, [r3, #0]
 8016414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016418:	2b10      	cmp	r3, #16
 801641a:	d15d      	bne.n	80164d8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 801641c:	68bb      	ldr	r3, [r7, #8]
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	785b      	ldrb	r3, [r3, #1]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d002      	beq.n	801642c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8016426:	23fb      	movs	r3, #251	; 0xfb
 8016428:	73fb      	strb	r3, [r7, #15]
 801642a:	e057      	b.n	80164dc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 801642c:	68bb      	ldr	r3, [r7, #8]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	685b      	ldr	r3, [r3, #4]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d04d      	beq.n	80164d2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8016436:	68bb      	ldr	r3, [r7, #8]
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	2201      	movs	r2, #1
 801643c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801643e:	68bb      	ldr	r3, [r7, #8]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	6a1b      	ldr	r3, [r3, #32]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d006      	beq.n	8016456 <lwip_netconn_do_write+0x6a>
 8016448:	4b28      	ldr	r3, [pc, #160]	; (80164ec <lwip_netconn_do_write+0x100>)
 801644a:	f240 7223 	movw	r2, #1827	; 0x723
 801644e:	4928      	ldr	r1, [pc, #160]	; (80164f0 <lwip_netconn_do_write+0x104>)
 8016450:	4828      	ldr	r0, [pc, #160]	; (80164f4 <lwip_netconn_do_write+0x108>)
 8016452:	f00b ff75 	bl	8022340 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8016456:	68bb      	ldr	r3, [r7, #8]
 8016458:	695b      	ldr	r3, [r3, #20]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d106      	bne.n	801646c <lwip_netconn_do_write+0x80>
 801645e:	4b23      	ldr	r3, [pc, #140]	; (80164ec <lwip_netconn_do_write+0x100>)
 8016460:	f240 7224 	movw	r2, #1828	; 0x724
 8016464:	4924      	ldr	r1, [pc, #144]	; (80164f8 <lwip_netconn_do_write+0x10c>)
 8016466:	4823      	ldr	r0, [pc, #140]	; (80164f4 <lwip_netconn_do_write+0x108>)
 8016468:	f00b ff6a 	bl	8022340 <iprintf>
        msg->conn->current_msg = msg;
 801646c:	68bb      	ldr	r3, [r7, #8]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	68ba      	ldr	r2, [r7, #8]
 8016472:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8016474:	68bb      	ldr	r3, [r7, #8]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	2100      	movs	r1, #0
 801647a:	4618      	mov	r0, r3
 801647c:	f7ff fdea 	bl	8016054 <lwip_netconn_do_writemore>
 8016480:	4603      	mov	r3, r0
 8016482:	2b00      	cmp	r3, #0
 8016484:	d02e      	beq.n	80164e4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8016486:	68bb      	ldr	r3, [r7, #8]
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	785b      	ldrb	r3, [r3, #1]
 801648c:	2b01      	cmp	r3, #1
 801648e:	d006      	beq.n	801649e <lwip_netconn_do_write+0xb2>
 8016490:	4b16      	ldr	r3, [pc, #88]	; (80164ec <lwip_netconn_do_write+0x100>)
 8016492:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8016496:	4919      	ldr	r1, [pc, #100]	; (80164fc <lwip_netconn_do_write+0x110>)
 8016498:	4816      	ldr	r0, [pc, #88]	; (80164f4 <lwip_netconn_do_write+0x108>)
 801649a:	f00b ff51 	bl	8022340 <iprintf>
          UNLOCK_TCPIP_CORE();
 801649e:	4818      	ldr	r0, [pc, #96]	; (8016500 <lwip_netconn_do_write+0x114>)
 80164a0:	f00b fba9 	bl	8021bf6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80164a4:	68bb      	ldr	r3, [r7, #8]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	330c      	adds	r3, #12
 80164aa:	2100      	movs	r1, #0
 80164ac:	4618      	mov	r0, r3
 80164ae:	f00b fb08 	bl	8021ac2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80164b2:	4813      	ldr	r0, [pc, #76]	; (8016500 <lwip_netconn_do_write+0x114>)
 80164b4:	f00b fb90 	bl	8021bd8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80164b8:	68bb      	ldr	r3, [r7, #8]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	785b      	ldrb	r3, [r3, #1]
 80164be:	2b01      	cmp	r3, #1
 80164c0:	d110      	bne.n	80164e4 <lwip_netconn_do_write+0xf8>
 80164c2:	4b0a      	ldr	r3, [pc, #40]	; (80164ec <lwip_netconn_do_write+0x100>)
 80164c4:	f240 722c 	movw	r2, #1836	; 0x72c
 80164c8:	490c      	ldr	r1, [pc, #48]	; (80164fc <lwip_netconn_do_write+0x110>)
 80164ca:	480a      	ldr	r0, [pc, #40]	; (80164f4 <lwip_netconn_do_write+0x108>)
 80164cc:	f00b ff38 	bl	8022340 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80164d0:	e008      	b.n	80164e4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80164d2:	23f5      	movs	r3, #245	; 0xf5
 80164d4:	73fb      	strb	r3, [r7, #15]
 80164d6:	e001      	b.n	80164dc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80164d8:	23fa      	movs	r3, #250	; 0xfa
 80164da:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80164dc:	68bb      	ldr	r3, [r7, #8]
 80164de:	7bfa      	ldrb	r2, [r7, #15]
 80164e0:	711a      	strb	r2, [r3, #4]
 80164e2:	e000      	b.n	80164e6 <lwip_netconn_do_write+0xfa>
        return;
 80164e4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80164e6:	3710      	adds	r7, #16
 80164e8:	46bd      	mov	sp, r7
 80164ea:	bd80      	pop	{r7, pc}
 80164ec:	08023c2c 	.word	0x08023c2c
 80164f0:	08023fd0 	.word	0x08023fd0
 80164f4:	08023c70 	.word	0x08023c70
 80164f8:	08024158 	.word	0x08024158
 80164fc:	08023fec 	.word	0x08023fec
 8016500:	2002bee0 	.word	0x2002bee0

08016504 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b084      	sub	sp, #16
 8016508:	af00      	add	r7, sp, #0
 801650a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	785b      	ldrb	r3, [r3, #1]
 8016516:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	685b      	ldr	r3, [r3, #4]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d069      	beq.n	80165f6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	781b      	ldrb	r3, [r3, #0]
 8016528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 801652c:	2b10      	cmp	r3, #16
 801652e:	d162      	bne.n	80165f6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8016534:	2b03      	cmp	r3, #3
 8016536:	d002      	beq.n	801653e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8016538:	7afb      	ldrb	r3, [r7, #11]
 801653a:	2b02      	cmp	r3, #2
 801653c:	d05b      	beq.n	80165f6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801653e:	7afb      	ldrb	r3, [r7, #11]
 8016540:	2b03      	cmp	r3, #3
 8016542:	d103      	bne.n	801654c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	22f5      	movs	r2, #245	; 0xf5
 8016548:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801654a:	e059      	b.n	8016600 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 801654c:	7afb      	ldrb	r3, [r7, #11]
 801654e:	2b01      	cmp	r3, #1
 8016550:	d103      	bne.n	801655a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	22fb      	movs	r2, #251	; 0xfb
 8016556:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8016558:	e052      	b.n	8016600 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	7a1b      	ldrb	r3, [r3, #8]
 801655e:	f003 0301 	and.w	r3, r3, #1
 8016562:	2b00      	cmp	r3, #0
 8016564:	d004      	beq.n	8016570 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	4618      	mov	r0, r3
 801656c:	f7ff f99e 	bl	80158ac <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	6a1b      	ldr	r3, [r3, #32]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d006      	beq.n	8016588 <lwip_netconn_do_close+0x84>
 801657a:	4b23      	ldr	r3, [pc, #140]	; (8016608 <lwip_netconn_do_close+0x104>)
 801657c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8016580:	4922      	ldr	r1, [pc, #136]	; (801660c <lwip_netconn_do_close+0x108>)
 8016582:	4823      	ldr	r0, [pc, #140]	; (8016610 <lwip_netconn_do_close+0x10c>)
 8016584:	f00b fedc 	bl	8022340 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	2204      	movs	r2, #4
 801658e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	68fa      	ldr	r2, [r7, #12]
 8016596:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	2100      	movs	r1, #0
 801659e:	4618      	mov	r0, r3
 80165a0:	f7ff fa02 	bl	80159a8 <lwip_netconn_do_close_internal>
 80165a4:	4603      	mov	r3, r0
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d029      	beq.n	80165fe <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	785b      	ldrb	r3, [r3, #1]
 80165b0:	2b04      	cmp	r3, #4
 80165b2:	d006      	beq.n	80165c2 <lwip_netconn_do_close+0xbe>
 80165b4:	4b14      	ldr	r3, [pc, #80]	; (8016608 <lwip_netconn_do_close+0x104>)
 80165b6:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80165ba:	4916      	ldr	r1, [pc, #88]	; (8016614 <lwip_netconn_do_close+0x110>)
 80165bc:	4814      	ldr	r0, [pc, #80]	; (8016610 <lwip_netconn_do_close+0x10c>)
 80165be:	f00b febf 	bl	8022340 <iprintf>
        UNLOCK_TCPIP_CORE();
 80165c2:	4815      	ldr	r0, [pc, #84]	; (8016618 <lwip_netconn_do_close+0x114>)
 80165c4:	f00b fb17 	bl	8021bf6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	330c      	adds	r3, #12
 80165ce:	2100      	movs	r1, #0
 80165d0:	4618      	mov	r0, r3
 80165d2:	f00b fa76 	bl	8021ac2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80165d6:	4810      	ldr	r0, [pc, #64]	; (8016618 <lwip_netconn_do_close+0x114>)
 80165d8:	f00b fafe 	bl	8021bd8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	785b      	ldrb	r3, [r3, #1]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d00b      	beq.n	80165fe <lwip_netconn_do_close+0xfa>
 80165e6:	4b08      	ldr	r3, [pc, #32]	; (8016608 <lwip_netconn_do_close+0x104>)
 80165e8:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80165ec:	4909      	ldr	r1, [pc, #36]	; (8016614 <lwip_netconn_do_close+0x110>)
 80165ee:	4808      	ldr	r0, [pc, #32]	; (8016610 <lwip_netconn_do_close+0x10c>)
 80165f0:	f00b fea6 	bl	8022340 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80165f4:	e003      	b.n	80165fe <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	22f5      	movs	r2, #245	; 0xf5
 80165fa:	711a      	strb	r2, [r3, #4]
 80165fc:	e000      	b.n	8016600 <lwip_netconn_do_close+0xfc>
      return;
 80165fe:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8016600:	3710      	adds	r7, #16
 8016602:	46bd      	mov	sp, r7
 8016604:	bd80      	pop	{r7, pc}
 8016606:	bf00      	nop
 8016608:	08023c2c 	.word	0x08023c2c
 801660c:	08023fd0 	.word	0x08023fd0
 8016610:	08023c70 	.word	0x08023c70
 8016614:	08023fec 	.word	0x08023fec
 8016618:	2002bee0 	.word	0x2002bee0

0801661c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 801661c:	b580      	push	{r7, lr}
 801661e:	b082      	sub	sp, #8
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d013      	beq.n	8016652 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d00b      	beq.n	801664a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	4618      	mov	r0, r3
 8016638:	f001 feec 	bl	8018414 <pbuf_free>
      buf->p = buf->ptr = NULL;
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	2200      	movs	r2, #0
 8016640:	605a      	str	r2, [r3, #4]
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	685a      	ldr	r2, [r3, #4]
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801664a:	6879      	ldr	r1, [r7, #4]
 801664c:	2006      	movs	r0, #6
 801664e:	f001 f83d 	bl	80176cc <memp_free>
  }
}
 8016652:	bf00      	nop
 8016654:	3708      	adds	r7, #8
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}
	...

0801665c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b084      	sub	sp, #16
 8016660:	af00      	add	r7, sp, #0
 8016662:	60f8      	str	r0, [r7, #12]
 8016664:	60b9      	str	r1, [r7, #8]
 8016666:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d108      	bne.n	8016680 <netbuf_data+0x24>
 801666e:	4b1b      	ldr	r3, [pc, #108]	; (80166dc <netbuf_data+0x80>)
 8016670:	22c6      	movs	r2, #198	; 0xc6
 8016672:	491b      	ldr	r1, [pc, #108]	; (80166e0 <netbuf_data+0x84>)
 8016674:	481b      	ldr	r0, [pc, #108]	; (80166e4 <netbuf_data+0x88>)
 8016676:	f00b fe63 	bl	8022340 <iprintf>
 801667a:	f06f 030f 	mvn.w	r3, #15
 801667e:	e029      	b.n	80166d4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8016680:	68bb      	ldr	r3, [r7, #8]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d108      	bne.n	8016698 <netbuf_data+0x3c>
 8016686:	4b15      	ldr	r3, [pc, #84]	; (80166dc <netbuf_data+0x80>)
 8016688:	22c7      	movs	r2, #199	; 0xc7
 801668a:	4917      	ldr	r1, [pc, #92]	; (80166e8 <netbuf_data+0x8c>)
 801668c:	4815      	ldr	r0, [pc, #84]	; (80166e4 <netbuf_data+0x88>)
 801668e:	f00b fe57 	bl	8022340 <iprintf>
 8016692:	f06f 030f 	mvn.w	r3, #15
 8016696:	e01d      	b.n	80166d4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d108      	bne.n	80166b0 <netbuf_data+0x54>
 801669e:	4b0f      	ldr	r3, [pc, #60]	; (80166dc <netbuf_data+0x80>)
 80166a0:	22c8      	movs	r2, #200	; 0xc8
 80166a2:	4912      	ldr	r1, [pc, #72]	; (80166ec <netbuf_data+0x90>)
 80166a4:	480f      	ldr	r0, [pc, #60]	; (80166e4 <netbuf_data+0x88>)
 80166a6:	f00b fe4b 	bl	8022340 <iprintf>
 80166aa:	f06f 030f 	mvn.w	r3, #15
 80166ae:	e011      	b.n	80166d4 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	685b      	ldr	r3, [r3, #4]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d102      	bne.n	80166be <netbuf_data+0x62>
    return ERR_BUF;
 80166b8:	f06f 0301 	mvn.w	r3, #1
 80166bc:	e00a      	b.n	80166d4 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	685b      	ldr	r3, [r3, #4]
 80166c2:	685a      	ldr	r2, [r3, #4]
 80166c4:	68bb      	ldr	r3, [r7, #8]
 80166c6:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	685b      	ldr	r3, [r3, #4]
 80166cc:	895a      	ldrh	r2, [r3, #10]
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 80166d2:	2300      	movs	r3, #0
}
 80166d4:	4618      	mov	r0, r3
 80166d6:	3710      	adds	r7, #16
 80166d8:	46bd      	mov	sp, r7
 80166da:	bd80      	pop	{r7, pc}
 80166dc:	08024184 	.word	0x08024184
 80166e0:	0802428c 	.word	0x0802428c
 80166e4:	080241d4 	.word	0x080241d4
 80166e8:	080242a8 	.word	0x080242a8
 80166ec:	080242c8 	.word	0x080242c8

080166f0 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b082      	sub	sp, #8
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d108      	bne.n	8016710 <netbuf_next+0x20>
 80166fe:	4b11      	ldr	r3, [pc, #68]	; (8016744 <netbuf_next+0x54>)
 8016700:	22e0      	movs	r2, #224	; 0xe0
 8016702:	4911      	ldr	r1, [pc, #68]	; (8016748 <netbuf_next+0x58>)
 8016704:	4811      	ldr	r0, [pc, #68]	; (801674c <netbuf_next+0x5c>)
 8016706:	f00b fe1b 	bl	8022340 <iprintf>
 801670a:	f04f 33ff 	mov.w	r3, #4294967295
 801670e:	e014      	b.n	801673a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	685b      	ldr	r3, [r3, #4]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d102      	bne.n	8016720 <netbuf_next+0x30>
    return -1;
 801671a:	f04f 33ff 	mov.w	r3, #4294967295
 801671e:	e00c      	b.n	801673a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	685b      	ldr	r3, [r3, #4]
 8016724:	681a      	ldr	r2, [r3, #0]
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	685b      	ldr	r3, [r3, #4]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d101      	bne.n	8016738 <netbuf_next+0x48>
    return 1;
 8016734:	2301      	movs	r3, #1
 8016736:	e000      	b.n	801673a <netbuf_next+0x4a>
  }
  return 0;
 8016738:	2300      	movs	r3, #0
}
 801673a:	4618      	mov	r0, r3
 801673c:	3708      	adds	r7, #8
 801673e:	46bd      	mov	sp, r7
 8016740:	bd80      	pop	{r7, pc}
 8016742:	bf00      	nop
 8016744:	08024184 	.word	0x08024184
 8016748:	080242e4 	.word	0x080242e4
 801674c:	080241d4 	.word	0x080241d4

08016750 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b084      	sub	sp, #16
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
 8016758:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801675a:	f008 fabd 	bl	801ecd8 <sys_timeouts_sleeptime>
 801675e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016766:	d10b      	bne.n	8016780 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8016768:	4813      	ldr	r0, [pc, #76]	; (80167b8 <tcpip_timeouts_mbox_fetch+0x68>)
 801676a:	f00b fa44 	bl	8021bf6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801676e:	2200      	movs	r2, #0
 8016770:	6839      	ldr	r1, [r7, #0]
 8016772:	6878      	ldr	r0, [r7, #4]
 8016774:	f00b f91a 	bl	80219ac <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8016778:	480f      	ldr	r0, [pc, #60]	; (80167b8 <tcpip_timeouts_mbox_fetch+0x68>)
 801677a:	f00b fa2d 	bl	8021bd8 <sys_mutex_lock>
    return;
 801677e:	e018      	b.n	80167b2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d102      	bne.n	801678c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8016786:	f008 fa6d 	bl	801ec64 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801678a:	e7e6      	b.n	801675a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801678c:	480a      	ldr	r0, [pc, #40]	; (80167b8 <tcpip_timeouts_mbox_fetch+0x68>)
 801678e:	f00b fa32 	bl	8021bf6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8016792:	68fa      	ldr	r2, [r7, #12]
 8016794:	6839      	ldr	r1, [r7, #0]
 8016796:	6878      	ldr	r0, [r7, #4]
 8016798:	f00b f908 	bl	80219ac <sys_arch_mbox_fetch>
 801679c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801679e:	4806      	ldr	r0, [pc, #24]	; (80167b8 <tcpip_timeouts_mbox_fetch+0x68>)
 80167a0:	f00b fa1a 	bl	8021bd8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80167a4:	68bb      	ldr	r3, [r7, #8]
 80167a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80167aa:	d102      	bne.n	80167b2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80167ac:	f008 fa5a 	bl	801ec64 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80167b0:	e7d3      	b.n	801675a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80167b2:	3710      	adds	r7, #16
 80167b4:	46bd      	mov	sp, r7
 80167b6:	bd80      	pop	{r7, pc}
 80167b8:	2002bee0 	.word	0x2002bee0

080167bc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b084      	sub	sp, #16
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80167c4:	4810      	ldr	r0, [pc, #64]	; (8016808 <tcpip_thread+0x4c>)
 80167c6:	f00b fa07 	bl	8021bd8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80167ca:	4b10      	ldr	r3, [pc, #64]	; (801680c <tcpip_thread+0x50>)
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d005      	beq.n	80167de <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80167d2:	4b0e      	ldr	r3, [pc, #56]	; (801680c <tcpip_thread+0x50>)
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	4a0e      	ldr	r2, [pc, #56]	; (8016810 <tcpip_thread+0x54>)
 80167d8:	6812      	ldr	r2, [r2, #0]
 80167da:	4610      	mov	r0, r2
 80167dc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80167de:	f107 030c 	add.w	r3, r7, #12
 80167e2:	4619      	mov	r1, r3
 80167e4:	480b      	ldr	r0, [pc, #44]	; (8016814 <tcpip_thread+0x58>)
 80167e6:	f7ff ffb3 	bl	8016750 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d106      	bne.n	80167fe <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80167f0:	4b09      	ldr	r3, [pc, #36]	; (8016818 <tcpip_thread+0x5c>)
 80167f2:	2291      	movs	r2, #145	; 0x91
 80167f4:	4909      	ldr	r1, [pc, #36]	; (801681c <tcpip_thread+0x60>)
 80167f6:	480a      	ldr	r0, [pc, #40]	; (8016820 <tcpip_thread+0x64>)
 80167f8:	f00b fda2 	bl	8022340 <iprintf>
      continue;
 80167fc:	e003      	b.n	8016806 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	4618      	mov	r0, r3
 8016802:	f000 f80f 	bl	8016824 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016806:	e7ea      	b.n	80167de <tcpip_thread+0x22>
 8016808:	2002bee0 	.word	0x2002bee0
 801680c:	2002bed4 	.word	0x2002bed4
 8016810:	2002bed8 	.word	0x2002bed8
 8016814:	2002bedc 	.word	0x2002bedc
 8016818:	0802431c 	.word	0x0802431c
 801681c:	0802434c 	.word	0x0802434c
 8016820:	0802436c 	.word	0x0802436c

08016824 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8016824:	b580      	push	{r7, lr}
 8016826:	b082      	sub	sp, #8
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	781b      	ldrb	r3, [r3, #0]
 8016830:	2b02      	cmp	r3, #2
 8016832:	d026      	beq.n	8016882 <tcpip_thread_handle_msg+0x5e>
 8016834:	2b02      	cmp	r3, #2
 8016836:	dc2b      	bgt.n	8016890 <tcpip_thread_handle_msg+0x6c>
 8016838:	2b00      	cmp	r3, #0
 801683a:	d002      	beq.n	8016842 <tcpip_thread_handle_msg+0x1e>
 801683c:	2b01      	cmp	r3, #1
 801683e:	d015      	beq.n	801686c <tcpip_thread_handle_msg+0x48>
 8016840:	e026      	b.n	8016890 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	68db      	ldr	r3, [r3, #12]
 8016846:	687a      	ldr	r2, [r7, #4]
 8016848:	6850      	ldr	r0, [r2, #4]
 801684a:	687a      	ldr	r2, [r7, #4]
 801684c:	6892      	ldr	r2, [r2, #8]
 801684e:	4611      	mov	r1, r2
 8016850:	4798      	blx	r3
 8016852:	4603      	mov	r3, r0
 8016854:	2b00      	cmp	r3, #0
 8016856:	d004      	beq.n	8016862 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	685b      	ldr	r3, [r3, #4]
 801685c:	4618      	mov	r0, r3
 801685e:	f001 fdd9 	bl	8018414 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016862:	6879      	ldr	r1, [r7, #4]
 8016864:	2009      	movs	r0, #9
 8016866:	f000 ff31 	bl	80176cc <memp_free>
      break;
 801686a:	e018      	b.n	801689e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	685b      	ldr	r3, [r3, #4]
 8016870:	687a      	ldr	r2, [r7, #4]
 8016872:	6892      	ldr	r2, [r2, #8]
 8016874:	4610      	mov	r0, r2
 8016876:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8016878:	6879      	ldr	r1, [r7, #4]
 801687a:	2008      	movs	r0, #8
 801687c:	f000 ff26 	bl	80176cc <memp_free>
      break;
 8016880:	e00d      	b.n	801689e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	685b      	ldr	r3, [r3, #4]
 8016886:	687a      	ldr	r2, [r7, #4]
 8016888:	6892      	ldr	r2, [r2, #8]
 801688a:	4610      	mov	r0, r2
 801688c:	4798      	blx	r3
      break;
 801688e:	e006      	b.n	801689e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016890:	4b05      	ldr	r3, [pc, #20]	; (80168a8 <tcpip_thread_handle_msg+0x84>)
 8016892:	22cf      	movs	r2, #207	; 0xcf
 8016894:	4905      	ldr	r1, [pc, #20]	; (80168ac <tcpip_thread_handle_msg+0x88>)
 8016896:	4806      	ldr	r0, [pc, #24]	; (80168b0 <tcpip_thread_handle_msg+0x8c>)
 8016898:	f00b fd52 	bl	8022340 <iprintf>
      break;
 801689c:	bf00      	nop
  }
}
 801689e:	bf00      	nop
 80168a0:	3708      	adds	r7, #8
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}
 80168a6:	bf00      	nop
 80168a8:	0802431c 	.word	0x0802431c
 80168ac:	0802434c 	.word	0x0802434c
 80168b0:	0802436c 	.word	0x0802436c

080168b4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b086      	sub	sp, #24
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	60f8      	str	r0, [r7, #12]
 80168bc:	60b9      	str	r1, [r7, #8]
 80168be:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80168c0:	481a      	ldr	r0, [pc, #104]	; (801692c <tcpip_inpkt+0x78>)
 80168c2:	f00b f8bb 	bl	8021a3c <sys_mbox_valid>
 80168c6:	4603      	mov	r3, r0
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d105      	bne.n	80168d8 <tcpip_inpkt+0x24>
 80168cc:	4b18      	ldr	r3, [pc, #96]	; (8016930 <tcpip_inpkt+0x7c>)
 80168ce:	22fc      	movs	r2, #252	; 0xfc
 80168d0:	4918      	ldr	r1, [pc, #96]	; (8016934 <tcpip_inpkt+0x80>)
 80168d2:	4819      	ldr	r0, [pc, #100]	; (8016938 <tcpip_inpkt+0x84>)
 80168d4:	f00b fd34 	bl	8022340 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80168d8:	2009      	movs	r0, #9
 80168da:	f000 fe81 	bl	80175e0 <memp_malloc>
 80168de:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80168e0:	697b      	ldr	r3, [r7, #20]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d102      	bne.n	80168ec <tcpip_inpkt+0x38>
    return ERR_MEM;
 80168e6:	f04f 33ff 	mov.w	r3, #4294967295
 80168ea:	e01a      	b.n	8016922 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80168ec:	697b      	ldr	r3, [r7, #20]
 80168ee:	2200      	movs	r2, #0
 80168f0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80168f2:	697b      	ldr	r3, [r7, #20]
 80168f4:	68fa      	ldr	r2, [r7, #12]
 80168f6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80168f8:	697b      	ldr	r3, [r7, #20]
 80168fa:	68ba      	ldr	r2, [r7, #8]
 80168fc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80168fe:	697b      	ldr	r3, [r7, #20]
 8016900:	687a      	ldr	r2, [r7, #4]
 8016902:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016904:	6979      	ldr	r1, [r7, #20]
 8016906:	4809      	ldr	r0, [pc, #36]	; (801692c <tcpip_inpkt+0x78>)
 8016908:	f00b f836 	bl	8021978 <sys_mbox_trypost>
 801690c:	4603      	mov	r3, r0
 801690e:	2b00      	cmp	r3, #0
 8016910:	d006      	beq.n	8016920 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016912:	6979      	ldr	r1, [r7, #20]
 8016914:	2009      	movs	r0, #9
 8016916:	f000 fed9 	bl	80176cc <memp_free>
    return ERR_MEM;
 801691a:	f04f 33ff 	mov.w	r3, #4294967295
 801691e:	e000      	b.n	8016922 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8016920:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8016922:	4618      	mov	r0, r3
 8016924:	3718      	adds	r7, #24
 8016926:	46bd      	mov	sp, r7
 8016928:	bd80      	pop	{r7, pc}
 801692a:	bf00      	nop
 801692c:	2002bedc 	.word	0x2002bedc
 8016930:	0802431c 	.word	0x0802431c
 8016934:	08024394 	.word	0x08024394
 8016938:	0802436c 	.word	0x0802436c

0801693c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b082      	sub	sp, #8
 8016940:	af00      	add	r7, sp, #0
 8016942:	6078      	str	r0, [r7, #4]
 8016944:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8016946:	683b      	ldr	r3, [r7, #0]
 8016948:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801694c:	f003 0318 	and.w	r3, r3, #24
 8016950:	2b00      	cmp	r3, #0
 8016952:	d006      	beq.n	8016962 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8016954:	4a08      	ldr	r2, [pc, #32]	; (8016978 <tcpip_input+0x3c>)
 8016956:	6839      	ldr	r1, [r7, #0]
 8016958:	6878      	ldr	r0, [r7, #4]
 801695a:	f7ff ffab 	bl	80168b4 <tcpip_inpkt>
 801695e:	4603      	mov	r3, r0
 8016960:	e005      	b.n	801696e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8016962:	4a06      	ldr	r2, [pc, #24]	; (801697c <tcpip_input+0x40>)
 8016964:	6839      	ldr	r1, [r7, #0]
 8016966:	6878      	ldr	r0, [r7, #4]
 8016968:	f7ff ffa4 	bl	80168b4 <tcpip_inpkt>
 801696c:	4603      	mov	r3, r0
}
 801696e:	4618      	mov	r0, r3
 8016970:	3708      	adds	r7, #8
 8016972:	46bd      	mov	sp, r7
 8016974:	bd80      	pop	{r7, pc}
 8016976:	bf00      	nop
 8016978:	08021775 	.word	0x08021775
 801697c:	0802067d 	.word	0x0802067d

08016980 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b084      	sub	sp, #16
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
 8016988:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801698a:	4819      	ldr	r0, [pc, #100]	; (80169f0 <tcpip_try_callback+0x70>)
 801698c:	f00b f856 	bl	8021a3c <sys_mbox_valid>
 8016990:	4603      	mov	r3, r0
 8016992:	2b00      	cmp	r3, #0
 8016994:	d106      	bne.n	80169a4 <tcpip_try_callback+0x24>
 8016996:	4b17      	ldr	r3, [pc, #92]	; (80169f4 <tcpip_try_callback+0x74>)
 8016998:	f240 125d 	movw	r2, #349	; 0x15d
 801699c:	4916      	ldr	r1, [pc, #88]	; (80169f8 <tcpip_try_callback+0x78>)
 801699e:	4817      	ldr	r0, [pc, #92]	; (80169fc <tcpip_try_callback+0x7c>)
 80169a0:	f00b fcce 	bl	8022340 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80169a4:	2008      	movs	r0, #8
 80169a6:	f000 fe1b 	bl	80175e0 <memp_malloc>
 80169aa:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d102      	bne.n	80169b8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80169b2:	f04f 33ff 	mov.w	r3, #4294967295
 80169b6:	e017      	b.n	80169e8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	2201      	movs	r2, #1
 80169bc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	687a      	ldr	r2, [r7, #4]
 80169c2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	683a      	ldr	r2, [r7, #0]
 80169c8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80169ca:	68f9      	ldr	r1, [r7, #12]
 80169cc:	4808      	ldr	r0, [pc, #32]	; (80169f0 <tcpip_try_callback+0x70>)
 80169ce:	f00a ffd3 	bl	8021978 <sys_mbox_trypost>
 80169d2:	4603      	mov	r3, r0
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d006      	beq.n	80169e6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80169d8:	68f9      	ldr	r1, [r7, #12]
 80169da:	2008      	movs	r0, #8
 80169dc:	f000 fe76 	bl	80176cc <memp_free>
    return ERR_MEM;
 80169e0:	f04f 33ff 	mov.w	r3, #4294967295
 80169e4:	e000      	b.n	80169e8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80169e6:	2300      	movs	r3, #0
}
 80169e8:	4618      	mov	r0, r3
 80169ea:	3710      	adds	r7, #16
 80169ec:	46bd      	mov	sp, r7
 80169ee:	bd80      	pop	{r7, pc}
 80169f0:	2002bedc 	.word	0x2002bedc
 80169f4:	0802431c 	.word	0x0802431c
 80169f8:	08024394 	.word	0x08024394
 80169fc:	0802436c 	.word	0x0802436c

08016a00 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b084      	sub	sp, #16
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	60f8      	str	r0, [r7, #12]
 8016a08:	60b9      	str	r1, [r7, #8]
 8016a0a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8016a0c:	4806      	ldr	r0, [pc, #24]	; (8016a28 <tcpip_send_msg_wait_sem+0x28>)
 8016a0e:	f00b f8e3 	bl	8021bd8 <sys_mutex_lock>
  fn(apimsg);
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	68b8      	ldr	r0, [r7, #8]
 8016a16:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8016a18:	4803      	ldr	r0, [pc, #12]	; (8016a28 <tcpip_send_msg_wait_sem+0x28>)
 8016a1a:	f00b f8ec 	bl	8021bf6 <sys_mutex_unlock>
  return ERR_OK;
 8016a1e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8016a20:	4618      	mov	r0, r3
 8016a22:	3710      	adds	r7, #16
 8016a24:	46bd      	mov	sp, r7
 8016a26:	bd80      	pop	{r7, pc}
 8016a28:	2002bee0 	.word	0x2002bee0

08016a2c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b084      	sub	sp, #16
 8016a30:	af02      	add	r7, sp, #8
 8016a32:	6078      	str	r0, [r7, #4]
 8016a34:	6039      	str	r1, [r7, #0]
  lwip_init();
 8016a36:	f000 f92d 	bl	8016c94 <lwip_init>

  tcpip_init_done = initfunc;
 8016a3a:	4a17      	ldr	r2, [pc, #92]	; (8016a98 <tcpip_init+0x6c>)
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8016a40:	4a16      	ldr	r2, [pc, #88]	; (8016a9c <tcpip_init+0x70>)
 8016a42:	683b      	ldr	r3, [r7, #0]
 8016a44:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8016a46:	2106      	movs	r1, #6
 8016a48:	4815      	ldr	r0, [pc, #84]	; (8016aa0 <tcpip_init+0x74>)
 8016a4a:	f00a ff69 	bl	8021920 <sys_mbox_new>
 8016a4e:	4603      	mov	r3, r0
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d006      	beq.n	8016a62 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8016a54:	4b13      	ldr	r3, [pc, #76]	; (8016aa4 <tcpip_init+0x78>)
 8016a56:	f240 2261 	movw	r2, #609	; 0x261
 8016a5a:	4913      	ldr	r1, [pc, #76]	; (8016aa8 <tcpip_init+0x7c>)
 8016a5c:	4813      	ldr	r0, [pc, #76]	; (8016aac <tcpip_init+0x80>)
 8016a5e:	f00b fc6f 	bl	8022340 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8016a62:	4813      	ldr	r0, [pc, #76]	; (8016ab0 <tcpip_init+0x84>)
 8016a64:	f00b f8a2 	bl	8021bac <sys_mutex_new>
 8016a68:	4603      	mov	r3, r0
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d006      	beq.n	8016a7c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8016a6e:	4b0d      	ldr	r3, [pc, #52]	; (8016aa4 <tcpip_init+0x78>)
 8016a70:	f240 2265 	movw	r2, #613	; 0x265
 8016a74:	490f      	ldr	r1, [pc, #60]	; (8016ab4 <tcpip_init+0x88>)
 8016a76:	480d      	ldr	r0, [pc, #52]	; (8016aac <tcpip_init+0x80>)
 8016a78:	f00b fc62 	bl	8022340 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8016a7c:	2318      	movs	r3, #24
 8016a7e:	9300      	str	r3, [sp, #0]
 8016a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016a84:	2200      	movs	r2, #0
 8016a86:	490c      	ldr	r1, [pc, #48]	; (8016ab8 <tcpip_init+0x8c>)
 8016a88:	480c      	ldr	r0, [pc, #48]	; (8016abc <tcpip_init+0x90>)
 8016a8a:	f00b f8c1 	bl	8021c10 <sys_thread_new>
}
 8016a8e:	bf00      	nop
 8016a90:	3708      	adds	r7, #8
 8016a92:	46bd      	mov	sp, r7
 8016a94:	bd80      	pop	{r7, pc}
 8016a96:	bf00      	nop
 8016a98:	2002bed4 	.word	0x2002bed4
 8016a9c:	2002bed8 	.word	0x2002bed8
 8016aa0:	2002bedc 	.word	0x2002bedc
 8016aa4:	0802431c 	.word	0x0802431c
 8016aa8:	080243a4 	.word	0x080243a4
 8016aac:	0802436c 	.word	0x0802436c
 8016ab0:	2002bee0 	.word	0x2002bee0
 8016ab4:	080243c8 	.word	0x080243c8
 8016ab8:	080167bd 	.word	0x080167bd
 8016abc:	080243ec 	.word	0x080243ec

08016ac0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8016ac0:	b480      	push	{r7}
 8016ac2:	b083      	sub	sp, #12
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8016aca:	88fb      	ldrh	r3, [r7, #6]
 8016acc:	021b      	lsls	r3, r3, #8
 8016ace:	b21a      	sxth	r2, r3
 8016ad0:	88fb      	ldrh	r3, [r7, #6]
 8016ad2:	0a1b      	lsrs	r3, r3, #8
 8016ad4:	b29b      	uxth	r3, r3
 8016ad6:	b21b      	sxth	r3, r3
 8016ad8:	4313      	orrs	r3, r2
 8016ada:	b21b      	sxth	r3, r3
 8016adc:	b29b      	uxth	r3, r3
}
 8016ade:	4618      	mov	r0, r3
 8016ae0:	370c      	adds	r7, #12
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae8:	4770      	bx	lr

08016aea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8016aea:	b480      	push	{r7}
 8016aec:	b083      	sub	sp, #12
 8016aee:	af00      	add	r7, sp, #0
 8016af0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	061a      	lsls	r2, r3, #24
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	021b      	lsls	r3, r3, #8
 8016afa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8016afe:	431a      	orrs	r2, r3
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	0a1b      	lsrs	r3, r3, #8
 8016b04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016b08:	431a      	orrs	r2, r3
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	0e1b      	lsrs	r3, r3, #24
 8016b0e:	4313      	orrs	r3, r2
}
 8016b10:	4618      	mov	r0, r3
 8016b12:	370c      	adds	r7, #12
 8016b14:	46bd      	mov	sp, r7
 8016b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1a:	4770      	bx	lr

08016b1c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8016b1c:	b480      	push	{r7}
 8016b1e:	b089      	sub	sp, #36	; 0x24
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
 8016b24:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8016b2e:	2300      	movs	r3, #0
 8016b30:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8016b32:	69fb      	ldr	r3, [r7, #28]
 8016b34:	f003 0301 	and.w	r3, r3, #1
 8016b38:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8016b3a:	693b      	ldr	r3, [r7, #16]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d00d      	beq.n	8016b5c <lwip_standard_chksum+0x40>
 8016b40:	683b      	ldr	r3, [r7, #0]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	dd0a      	ble.n	8016b5c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8016b46:	69fa      	ldr	r2, [r7, #28]
 8016b48:	1c53      	adds	r3, r2, #1
 8016b4a:	61fb      	str	r3, [r7, #28]
 8016b4c:	f107 030e 	add.w	r3, r7, #14
 8016b50:	3301      	adds	r3, #1
 8016b52:	7812      	ldrb	r2, [r2, #0]
 8016b54:	701a      	strb	r2, [r3, #0]
    len--;
 8016b56:	683b      	ldr	r3, [r7, #0]
 8016b58:	3b01      	subs	r3, #1
 8016b5a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8016b5c:	69fb      	ldr	r3, [r7, #28]
 8016b5e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8016b60:	e00a      	b.n	8016b78 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8016b62:	69bb      	ldr	r3, [r7, #24]
 8016b64:	1c9a      	adds	r2, r3, #2
 8016b66:	61ba      	str	r2, [r7, #24]
 8016b68:	881b      	ldrh	r3, [r3, #0]
 8016b6a:	461a      	mov	r2, r3
 8016b6c:	697b      	ldr	r3, [r7, #20]
 8016b6e:	4413      	add	r3, r2
 8016b70:	617b      	str	r3, [r7, #20]
    len -= 2;
 8016b72:	683b      	ldr	r3, [r7, #0]
 8016b74:	3b02      	subs	r3, #2
 8016b76:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	2b01      	cmp	r3, #1
 8016b7c:	dcf1      	bgt.n	8016b62 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8016b7e:	683b      	ldr	r3, [r7, #0]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	dd04      	ble.n	8016b8e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8016b84:	f107 030e 	add.w	r3, r7, #14
 8016b88:	69ba      	ldr	r2, [r7, #24]
 8016b8a:	7812      	ldrb	r2, [r2, #0]
 8016b8c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8016b8e:	89fb      	ldrh	r3, [r7, #14]
 8016b90:	461a      	mov	r2, r3
 8016b92:	697b      	ldr	r3, [r7, #20]
 8016b94:	4413      	add	r3, r2
 8016b96:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8016b98:	697b      	ldr	r3, [r7, #20]
 8016b9a:	0c1a      	lsrs	r2, r3, #16
 8016b9c:	697b      	ldr	r3, [r7, #20]
 8016b9e:	b29b      	uxth	r3, r3
 8016ba0:	4413      	add	r3, r2
 8016ba2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8016ba4:	697b      	ldr	r3, [r7, #20]
 8016ba6:	0c1a      	lsrs	r2, r3, #16
 8016ba8:	697b      	ldr	r3, [r7, #20]
 8016baa:	b29b      	uxth	r3, r3
 8016bac:	4413      	add	r3, r2
 8016bae:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8016bb0:	693b      	ldr	r3, [r7, #16]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d007      	beq.n	8016bc6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8016bb6:	697b      	ldr	r3, [r7, #20]
 8016bb8:	021b      	lsls	r3, r3, #8
 8016bba:	b29a      	uxth	r2, r3
 8016bbc:	697b      	ldr	r3, [r7, #20]
 8016bbe:	0a1b      	lsrs	r3, r3, #8
 8016bc0:	b2db      	uxtb	r3, r3
 8016bc2:	4313      	orrs	r3, r2
 8016bc4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8016bc6:	697b      	ldr	r3, [r7, #20]
 8016bc8:	b29b      	uxth	r3, r3
}
 8016bca:	4618      	mov	r0, r3
 8016bcc:	3724      	adds	r7, #36	; 0x24
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd4:	4770      	bx	lr

08016bd6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8016bd6:	b580      	push	{r7, lr}
 8016bd8:	b082      	sub	sp, #8
 8016bda:	af00      	add	r7, sp, #0
 8016bdc:	6078      	str	r0, [r7, #4]
 8016bde:	460b      	mov	r3, r1
 8016be0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8016be2:	887b      	ldrh	r3, [r7, #2]
 8016be4:	4619      	mov	r1, r3
 8016be6:	6878      	ldr	r0, [r7, #4]
 8016be8:	f7ff ff98 	bl	8016b1c <lwip_standard_chksum>
 8016bec:	4603      	mov	r3, r0
 8016bee:	43db      	mvns	r3, r3
 8016bf0:	b29b      	uxth	r3, r3
}
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	3708      	adds	r7, #8
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bd80      	pop	{r7, pc}

08016bfa <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8016bfa:	b580      	push	{r7, lr}
 8016bfc:	b086      	sub	sp, #24
 8016bfe:	af00      	add	r7, sp, #0
 8016c00:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8016c02:	2300      	movs	r3, #0
 8016c04:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8016c06:	2300      	movs	r3, #0
 8016c08:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	613b      	str	r3, [r7, #16]
 8016c0e:	e02b      	b.n	8016c68 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8016c10:	693b      	ldr	r3, [r7, #16]
 8016c12:	685a      	ldr	r2, [r3, #4]
 8016c14:	693b      	ldr	r3, [r7, #16]
 8016c16:	895b      	ldrh	r3, [r3, #10]
 8016c18:	4619      	mov	r1, r3
 8016c1a:	4610      	mov	r0, r2
 8016c1c:	f7ff ff7e 	bl	8016b1c <lwip_standard_chksum>
 8016c20:	4603      	mov	r3, r0
 8016c22:	461a      	mov	r2, r3
 8016c24:	697b      	ldr	r3, [r7, #20]
 8016c26:	4413      	add	r3, r2
 8016c28:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8016c2a:	697b      	ldr	r3, [r7, #20]
 8016c2c:	0c1a      	lsrs	r2, r3, #16
 8016c2e:	697b      	ldr	r3, [r7, #20]
 8016c30:	b29b      	uxth	r3, r3
 8016c32:	4413      	add	r3, r2
 8016c34:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8016c36:	693b      	ldr	r3, [r7, #16]
 8016c38:	895b      	ldrh	r3, [r3, #10]
 8016c3a:	f003 0301 	and.w	r3, r3, #1
 8016c3e:	b29b      	uxth	r3, r3
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d00e      	beq.n	8016c62 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	bf0c      	ite	eq
 8016c4a:	2301      	moveq	r3, #1
 8016c4c:	2300      	movne	r3, #0
 8016c4e:	b2db      	uxtb	r3, r3
 8016c50:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8016c52:	697b      	ldr	r3, [r7, #20]
 8016c54:	021b      	lsls	r3, r3, #8
 8016c56:	b29a      	uxth	r2, r3
 8016c58:	697b      	ldr	r3, [r7, #20]
 8016c5a:	0a1b      	lsrs	r3, r3, #8
 8016c5c:	b2db      	uxtb	r3, r3
 8016c5e:	4313      	orrs	r3, r2
 8016c60:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8016c62:	693b      	ldr	r3, [r7, #16]
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	613b      	str	r3, [r7, #16]
 8016c68:	693b      	ldr	r3, [r7, #16]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d1d0      	bne.n	8016c10 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d007      	beq.n	8016c84 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8016c74:	697b      	ldr	r3, [r7, #20]
 8016c76:	021b      	lsls	r3, r3, #8
 8016c78:	b29a      	uxth	r2, r3
 8016c7a:	697b      	ldr	r3, [r7, #20]
 8016c7c:	0a1b      	lsrs	r3, r3, #8
 8016c7e:	b2db      	uxtb	r3, r3
 8016c80:	4313      	orrs	r3, r2
 8016c82:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8016c84:	697b      	ldr	r3, [r7, #20]
 8016c86:	b29b      	uxth	r3, r3
 8016c88:	43db      	mvns	r3, r3
 8016c8a:	b29b      	uxth	r3, r3
}
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	3718      	adds	r7, #24
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bd80      	pop	{r7, pc}

08016c94 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b082      	sub	sp, #8
 8016c98:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8016c9e:	f00a ff79 	bl	8021b94 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8016ca2:	f000 f8d5 	bl	8016e50 <mem_init>
  memp_init();
 8016ca6:	f000 fc2d 	bl	8017504 <memp_init>
  pbuf_init();
  netif_init();
 8016caa:	f000 fd39 	bl	8017720 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8016cae:	f008 f84b 	bl	801ed48 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8016cb2:	f001 fe49 	bl	8018948 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8016cb6:	f007 ff8d 	bl	801ebd4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8016cba:	bf00      	nop
 8016cbc:	3708      	adds	r7, #8
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	bd80      	pop	{r7, pc}
	...

08016cc4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8016cc4:	b480      	push	{r7}
 8016cc6:	b083      	sub	sp, #12
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	4603      	mov	r3, r0
 8016ccc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8016cce:	4b05      	ldr	r3, [pc, #20]	; (8016ce4 <ptr_to_mem+0x20>)
 8016cd0:	681a      	ldr	r2, [r3, #0]
 8016cd2:	88fb      	ldrh	r3, [r7, #6]
 8016cd4:	4413      	add	r3, r2
}
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	370c      	adds	r7, #12
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce0:	4770      	bx	lr
 8016ce2:	bf00      	nop
 8016ce4:	2002befc 	.word	0x2002befc

08016ce8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8016ce8:	b480      	push	{r7}
 8016cea:	b083      	sub	sp, #12
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8016cf0:	4b05      	ldr	r3, [pc, #20]	; (8016d08 <mem_to_ptr+0x20>)
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	687a      	ldr	r2, [r7, #4]
 8016cf6:	1ad3      	subs	r3, r2, r3
 8016cf8:	b29b      	uxth	r3, r3
}
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	370c      	adds	r7, #12
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d04:	4770      	bx	lr
 8016d06:	bf00      	nop
 8016d08:	2002befc 	.word	0x2002befc

08016d0c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8016d0c:	b590      	push	{r4, r7, lr}
 8016d0e:	b085      	sub	sp, #20
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8016d14:	4b45      	ldr	r3, [pc, #276]	; (8016e2c <plug_holes+0x120>)
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	687a      	ldr	r2, [r7, #4]
 8016d1a:	429a      	cmp	r2, r3
 8016d1c:	d206      	bcs.n	8016d2c <plug_holes+0x20>
 8016d1e:	4b44      	ldr	r3, [pc, #272]	; (8016e30 <plug_holes+0x124>)
 8016d20:	f240 12df 	movw	r2, #479	; 0x1df
 8016d24:	4943      	ldr	r1, [pc, #268]	; (8016e34 <plug_holes+0x128>)
 8016d26:	4844      	ldr	r0, [pc, #272]	; (8016e38 <plug_holes+0x12c>)
 8016d28:	f00b fb0a 	bl	8022340 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8016d2c:	4b43      	ldr	r3, [pc, #268]	; (8016e3c <plug_holes+0x130>)
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	687a      	ldr	r2, [r7, #4]
 8016d32:	429a      	cmp	r2, r3
 8016d34:	d306      	bcc.n	8016d44 <plug_holes+0x38>
 8016d36:	4b3e      	ldr	r3, [pc, #248]	; (8016e30 <plug_holes+0x124>)
 8016d38:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016d3c:	4940      	ldr	r1, [pc, #256]	; (8016e40 <plug_holes+0x134>)
 8016d3e:	483e      	ldr	r0, [pc, #248]	; (8016e38 <plug_holes+0x12c>)
 8016d40:	f00b fafe 	bl	8022340 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	791b      	ldrb	r3, [r3, #4]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d006      	beq.n	8016d5a <plug_holes+0x4e>
 8016d4c:	4b38      	ldr	r3, [pc, #224]	; (8016e30 <plug_holes+0x124>)
 8016d4e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8016d52:	493c      	ldr	r1, [pc, #240]	; (8016e44 <plug_holes+0x138>)
 8016d54:	4838      	ldr	r0, [pc, #224]	; (8016e38 <plug_holes+0x12c>)
 8016d56:	f00b faf3 	bl	8022340 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	881b      	ldrh	r3, [r3, #0]
 8016d5e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016d62:	d906      	bls.n	8016d72 <plug_holes+0x66>
 8016d64:	4b32      	ldr	r3, [pc, #200]	; (8016e30 <plug_holes+0x124>)
 8016d66:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8016d6a:	4937      	ldr	r1, [pc, #220]	; (8016e48 <plug_holes+0x13c>)
 8016d6c:	4832      	ldr	r0, [pc, #200]	; (8016e38 <plug_holes+0x12c>)
 8016d6e:	f00b fae7 	bl	8022340 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	881b      	ldrh	r3, [r3, #0]
 8016d76:	4618      	mov	r0, r3
 8016d78:	f7ff ffa4 	bl	8016cc4 <ptr_to_mem>
 8016d7c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8016d7e:	687a      	ldr	r2, [r7, #4]
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	429a      	cmp	r2, r3
 8016d84:	d024      	beq.n	8016dd0 <plug_holes+0xc4>
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	791b      	ldrb	r3, [r3, #4]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d120      	bne.n	8016dd0 <plug_holes+0xc4>
 8016d8e:	4b2b      	ldr	r3, [pc, #172]	; (8016e3c <plug_holes+0x130>)
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	68fa      	ldr	r2, [r7, #12]
 8016d94:	429a      	cmp	r2, r3
 8016d96:	d01b      	beq.n	8016dd0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8016d98:	4b2c      	ldr	r3, [pc, #176]	; (8016e4c <plug_holes+0x140>)
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	68fa      	ldr	r2, [r7, #12]
 8016d9e:	429a      	cmp	r2, r3
 8016da0:	d102      	bne.n	8016da8 <plug_holes+0x9c>
      lfree = mem;
 8016da2:	4a2a      	ldr	r2, [pc, #168]	; (8016e4c <plug_holes+0x140>)
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	881a      	ldrh	r2, [r3, #0]
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	881b      	ldrh	r3, [r3, #0]
 8016db4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016db8:	d00a      	beq.n	8016dd0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	881b      	ldrh	r3, [r3, #0]
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	f7ff ff80 	bl	8016cc4 <ptr_to_mem>
 8016dc4:	4604      	mov	r4, r0
 8016dc6:	6878      	ldr	r0, [r7, #4]
 8016dc8:	f7ff ff8e 	bl	8016ce8 <mem_to_ptr>
 8016dcc:	4603      	mov	r3, r0
 8016dce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	885b      	ldrh	r3, [r3, #2]
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	f7ff ff75 	bl	8016cc4 <ptr_to_mem>
 8016dda:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8016ddc:	68ba      	ldr	r2, [r7, #8]
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	429a      	cmp	r2, r3
 8016de2:	d01f      	beq.n	8016e24 <plug_holes+0x118>
 8016de4:	68bb      	ldr	r3, [r7, #8]
 8016de6:	791b      	ldrb	r3, [r3, #4]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d11b      	bne.n	8016e24 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8016dec:	4b17      	ldr	r3, [pc, #92]	; (8016e4c <plug_holes+0x140>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	687a      	ldr	r2, [r7, #4]
 8016df2:	429a      	cmp	r2, r3
 8016df4:	d102      	bne.n	8016dfc <plug_holes+0xf0>
      lfree = pmem;
 8016df6:	4a15      	ldr	r2, [pc, #84]	; (8016e4c <plug_holes+0x140>)
 8016df8:	68bb      	ldr	r3, [r7, #8]
 8016dfa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	881a      	ldrh	r2, [r3, #0]
 8016e00:	68bb      	ldr	r3, [r7, #8]
 8016e02:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	881b      	ldrh	r3, [r3, #0]
 8016e08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016e0c:	d00a      	beq.n	8016e24 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	881b      	ldrh	r3, [r3, #0]
 8016e12:	4618      	mov	r0, r3
 8016e14:	f7ff ff56 	bl	8016cc4 <ptr_to_mem>
 8016e18:	4604      	mov	r4, r0
 8016e1a:	68b8      	ldr	r0, [r7, #8]
 8016e1c:	f7ff ff64 	bl	8016ce8 <mem_to_ptr>
 8016e20:	4603      	mov	r3, r0
 8016e22:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8016e24:	bf00      	nop
 8016e26:	3714      	adds	r7, #20
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd90      	pop	{r4, r7, pc}
 8016e2c:	2002befc 	.word	0x2002befc
 8016e30:	080243fc 	.word	0x080243fc
 8016e34:	0802442c 	.word	0x0802442c
 8016e38:	08024444 	.word	0x08024444
 8016e3c:	2002bf00 	.word	0x2002bf00
 8016e40:	0802446c 	.word	0x0802446c
 8016e44:	08024488 	.word	0x08024488
 8016e48:	080244a4 	.word	0x080244a4
 8016e4c:	2002bf08 	.word	0x2002bf08

08016e50 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b082      	sub	sp, #8
 8016e54:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8016e56:	4b1d      	ldr	r3, [pc, #116]	; (8016ecc <mem_init+0x7c>)
 8016e58:	4a1d      	ldr	r2, [pc, #116]	; (8016ed0 <mem_init+0x80>)
 8016e5a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8016e5c:	4b1b      	ldr	r3, [pc, #108]	; (8016ecc <mem_init+0x7c>)
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8016e68:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	2200      	movs	r2, #0
 8016e74:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8016e76:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8016e7a:	f7ff ff23 	bl	8016cc4 <ptr_to_mem>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	4a14      	ldr	r2, [pc, #80]	; (8016ed4 <mem_init+0x84>)
 8016e82:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8016e84:	4b13      	ldr	r3, [pc, #76]	; (8016ed4 <mem_init+0x84>)
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	2201      	movs	r2, #1
 8016e8a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8016e8c:	4b11      	ldr	r3, [pc, #68]	; (8016ed4 <mem_init+0x84>)
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8016e94:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8016e96:	4b0f      	ldr	r3, [pc, #60]	; (8016ed4 <mem_init+0x84>)
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8016e9e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8016ea0:	4b0a      	ldr	r3, [pc, #40]	; (8016ecc <mem_init+0x7c>)
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	4a0c      	ldr	r2, [pc, #48]	; (8016ed8 <mem_init+0x88>)
 8016ea6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8016ea8:	480c      	ldr	r0, [pc, #48]	; (8016edc <mem_init+0x8c>)
 8016eaa:	f00a fe7f 	bl	8021bac <sys_mutex_new>
 8016eae:	4603      	mov	r3, r0
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d006      	beq.n	8016ec2 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8016eb4:	4b0a      	ldr	r3, [pc, #40]	; (8016ee0 <mem_init+0x90>)
 8016eb6:	f240 221f 	movw	r2, #543	; 0x21f
 8016eba:	490a      	ldr	r1, [pc, #40]	; (8016ee4 <mem_init+0x94>)
 8016ebc:	480a      	ldr	r0, [pc, #40]	; (8016ee8 <mem_init+0x98>)
 8016ebe:	f00b fa3f 	bl	8022340 <iprintf>
  }
}
 8016ec2:	bf00      	nop
 8016ec4:	3708      	adds	r7, #8
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	bd80      	pop	{r7, pc}
 8016eca:	bf00      	nop
 8016ecc:	2002befc 	.word	0x2002befc
 8016ed0:	20044000 	.word	0x20044000
 8016ed4:	2002bf00 	.word	0x2002bf00
 8016ed8:	2002bf08 	.word	0x2002bf08
 8016edc:	2002bf04 	.word	0x2002bf04
 8016ee0:	080243fc 	.word	0x080243fc
 8016ee4:	080244d0 	.word	0x080244d0
 8016ee8:	08024444 	.word	0x08024444

08016eec <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b086      	sub	sp, #24
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8016ef4:	6878      	ldr	r0, [r7, #4]
 8016ef6:	f7ff fef7 	bl	8016ce8 <mem_to_ptr>
 8016efa:	4603      	mov	r3, r0
 8016efc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	881b      	ldrh	r3, [r3, #0]
 8016f02:	4618      	mov	r0, r3
 8016f04:	f7ff fede 	bl	8016cc4 <ptr_to_mem>
 8016f08:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	885b      	ldrh	r3, [r3, #2]
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f7ff fed8 	bl	8016cc4 <ptr_to_mem>
 8016f14:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	881b      	ldrh	r3, [r3, #0]
 8016f1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016f1e:	d818      	bhi.n	8016f52 <mem_link_valid+0x66>
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	885b      	ldrh	r3, [r3, #2]
 8016f24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8016f28:	d813      	bhi.n	8016f52 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8016f2e:	8afa      	ldrh	r2, [r7, #22]
 8016f30:	429a      	cmp	r2, r3
 8016f32:	d004      	beq.n	8016f3e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	881b      	ldrh	r3, [r3, #0]
 8016f38:	8afa      	ldrh	r2, [r7, #22]
 8016f3a:	429a      	cmp	r2, r3
 8016f3c:	d109      	bne.n	8016f52 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8016f3e:	4b08      	ldr	r3, [pc, #32]	; (8016f60 <mem_link_valid+0x74>)
 8016f40:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016f42:	693a      	ldr	r2, [r7, #16]
 8016f44:	429a      	cmp	r2, r3
 8016f46:	d006      	beq.n	8016f56 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8016f48:	693b      	ldr	r3, [r7, #16]
 8016f4a:	885b      	ldrh	r3, [r3, #2]
 8016f4c:	8afa      	ldrh	r2, [r7, #22]
 8016f4e:	429a      	cmp	r2, r3
 8016f50:	d001      	beq.n	8016f56 <mem_link_valid+0x6a>
    return 0;
 8016f52:	2300      	movs	r3, #0
 8016f54:	e000      	b.n	8016f58 <mem_link_valid+0x6c>
  }
  return 1;
 8016f56:	2301      	movs	r3, #1
}
 8016f58:	4618      	mov	r0, r3
 8016f5a:	3718      	adds	r7, #24
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bd80      	pop	{r7, pc}
 8016f60:	2002bf00 	.word	0x2002bf00

08016f64 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b088      	sub	sp, #32
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d070      	beq.n	8017054 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	f003 0303 	and.w	r3, r3, #3
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d00d      	beq.n	8016f98 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8016f7c:	4b37      	ldr	r3, [pc, #220]	; (801705c <mem_free+0xf8>)
 8016f7e:	f240 2273 	movw	r2, #627	; 0x273
 8016f82:	4937      	ldr	r1, [pc, #220]	; (8017060 <mem_free+0xfc>)
 8016f84:	4837      	ldr	r0, [pc, #220]	; (8017064 <mem_free+0x100>)
 8016f86:	f00b f9db 	bl	8022340 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016f8a:	f00a fe61 	bl	8021c50 <sys_arch_protect>
 8016f8e:	60f8      	str	r0, [r7, #12]
 8016f90:	68f8      	ldr	r0, [r7, #12]
 8016f92:	f00a fe6b 	bl	8021c6c <sys_arch_unprotect>
    return;
 8016f96:	e05e      	b.n	8017056 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	3b08      	subs	r3, #8
 8016f9c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8016f9e:	4b32      	ldr	r3, [pc, #200]	; (8017068 <mem_free+0x104>)
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	69fa      	ldr	r2, [r7, #28]
 8016fa4:	429a      	cmp	r2, r3
 8016fa6:	d306      	bcc.n	8016fb6 <mem_free+0x52>
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	f103 020c 	add.w	r2, r3, #12
 8016fae:	4b2f      	ldr	r3, [pc, #188]	; (801706c <mem_free+0x108>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	429a      	cmp	r2, r3
 8016fb4:	d90d      	bls.n	8016fd2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8016fb6:	4b29      	ldr	r3, [pc, #164]	; (801705c <mem_free+0xf8>)
 8016fb8:	f240 227f 	movw	r2, #639	; 0x27f
 8016fbc:	492c      	ldr	r1, [pc, #176]	; (8017070 <mem_free+0x10c>)
 8016fbe:	4829      	ldr	r0, [pc, #164]	; (8017064 <mem_free+0x100>)
 8016fc0:	f00b f9be 	bl	8022340 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016fc4:	f00a fe44 	bl	8021c50 <sys_arch_protect>
 8016fc8:	6138      	str	r0, [r7, #16]
 8016fca:	6938      	ldr	r0, [r7, #16]
 8016fcc:	f00a fe4e 	bl	8021c6c <sys_arch_unprotect>
    return;
 8016fd0:	e041      	b.n	8017056 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8016fd2:	4828      	ldr	r0, [pc, #160]	; (8017074 <mem_free+0x110>)
 8016fd4:	f00a fe00 	bl	8021bd8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8016fd8:	69fb      	ldr	r3, [r7, #28]
 8016fda:	791b      	ldrb	r3, [r3, #4]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d110      	bne.n	8017002 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8016fe0:	4b1e      	ldr	r3, [pc, #120]	; (801705c <mem_free+0xf8>)
 8016fe2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8016fe6:	4924      	ldr	r1, [pc, #144]	; (8017078 <mem_free+0x114>)
 8016fe8:	481e      	ldr	r0, [pc, #120]	; (8017064 <mem_free+0x100>)
 8016fea:	f00b f9a9 	bl	8022340 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8016fee:	4821      	ldr	r0, [pc, #132]	; (8017074 <mem_free+0x110>)
 8016ff0:	f00a fe01 	bl	8021bf6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016ff4:	f00a fe2c 	bl	8021c50 <sys_arch_protect>
 8016ff8:	6178      	str	r0, [r7, #20]
 8016ffa:	6978      	ldr	r0, [r7, #20]
 8016ffc:	f00a fe36 	bl	8021c6c <sys_arch_unprotect>
    return;
 8017000:	e029      	b.n	8017056 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8017002:	69f8      	ldr	r0, [r7, #28]
 8017004:	f7ff ff72 	bl	8016eec <mem_link_valid>
 8017008:	4603      	mov	r3, r0
 801700a:	2b00      	cmp	r3, #0
 801700c:	d110      	bne.n	8017030 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801700e:	4b13      	ldr	r3, [pc, #76]	; (801705c <mem_free+0xf8>)
 8017010:	f240 2295 	movw	r2, #661	; 0x295
 8017014:	4919      	ldr	r1, [pc, #100]	; (801707c <mem_free+0x118>)
 8017016:	4813      	ldr	r0, [pc, #76]	; (8017064 <mem_free+0x100>)
 8017018:	f00b f992 	bl	8022340 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801701c:	4815      	ldr	r0, [pc, #84]	; (8017074 <mem_free+0x110>)
 801701e:	f00a fdea 	bl	8021bf6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017022:	f00a fe15 	bl	8021c50 <sys_arch_protect>
 8017026:	61b8      	str	r0, [r7, #24]
 8017028:	69b8      	ldr	r0, [r7, #24]
 801702a:	f00a fe1f 	bl	8021c6c <sys_arch_unprotect>
    return;
 801702e:	e012      	b.n	8017056 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8017030:	69fb      	ldr	r3, [r7, #28]
 8017032:	2200      	movs	r2, #0
 8017034:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8017036:	4b12      	ldr	r3, [pc, #72]	; (8017080 <mem_free+0x11c>)
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	69fa      	ldr	r2, [r7, #28]
 801703c:	429a      	cmp	r2, r3
 801703e:	d202      	bcs.n	8017046 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8017040:	4a0f      	ldr	r2, [pc, #60]	; (8017080 <mem_free+0x11c>)
 8017042:	69fb      	ldr	r3, [r7, #28]
 8017044:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8017046:	69f8      	ldr	r0, [r7, #28]
 8017048:	f7ff fe60 	bl	8016d0c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801704c:	4809      	ldr	r0, [pc, #36]	; (8017074 <mem_free+0x110>)
 801704e:	f00a fdd2 	bl	8021bf6 <sys_mutex_unlock>
 8017052:	e000      	b.n	8017056 <mem_free+0xf2>
    return;
 8017054:	bf00      	nop
}
 8017056:	3720      	adds	r7, #32
 8017058:	46bd      	mov	sp, r7
 801705a:	bd80      	pop	{r7, pc}
 801705c:	080243fc 	.word	0x080243fc
 8017060:	080244ec 	.word	0x080244ec
 8017064:	08024444 	.word	0x08024444
 8017068:	2002befc 	.word	0x2002befc
 801706c:	2002bf00 	.word	0x2002bf00
 8017070:	08024510 	.word	0x08024510
 8017074:	2002bf04 	.word	0x2002bf04
 8017078:	0802452c 	.word	0x0802452c
 801707c:	08024554 	.word	0x08024554
 8017080:	2002bf08 	.word	0x2002bf08

08017084 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8017084:	b580      	push	{r7, lr}
 8017086:	b088      	sub	sp, #32
 8017088:	af00      	add	r7, sp, #0
 801708a:	6078      	str	r0, [r7, #4]
 801708c:	460b      	mov	r3, r1
 801708e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8017090:	887b      	ldrh	r3, [r7, #2]
 8017092:	3303      	adds	r3, #3
 8017094:	b29b      	uxth	r3, r3
 8017096:	f023 0303 	bic.w	r3, r3, #3
 801709a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801709c:	8bfb      	ldrh	r3, [r7, #30]
 801709e:	2b0b      	cmp	r3, #11
 80170a0:	d801      	bhi.n	80170a6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80170a2:	230c      	movs	r3, #12
 80170a4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80170a6:	8bfb      	ldrh	r3, [r7, #30]
 80170a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80170ac:	d803      	bhi.n	80170b6 <mem_trim+0x32>
 80170ae:	8bfa      	ldrh	r2, [r7, #30]
 80170b0:	887b      	ldrh	r3, [r7, #2]
 80170b2:	429a      	cmp	r2, r3
 80170b4:	d201      	bcs.n	80170ba <mem_trim+0x36>
    return NULL;
 80170b6:	2300      	movs	r3, #0
 80170b8:	e0d8      	b.n	801726c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80170ba:	4b6e      	ldr	r3, [pc, #440]	; (8017274 <mem_trim+0x1f0>)
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	687a      	ldr	r2, [r7, #4]
 80170c0:	429a      	cmp	r2, r3
 80170c2:	d304      	bcc.n	80170ce <mem_trim+0x4a>
 80170c4:	4b6c      	ldr	r3, [pc, #432]	; (8017278 <mem_trim+0x1f4>)
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	687a      	ldr	r2, [r7, #4]
 80170ca:	429a      	cmp	r2, r3
 80170cc:	d306      	bcc.n	80170dc <mem_trim+0x58>
 80170ce:	4b6b      	ldr	r3, [pc, #428]	; (801727c <mem_trim+0x1f8>)
 80170d0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80170d4:	496a      	ldr	r1, [pc, #424]	; (8017280 <mem_trim+0x1fc>)
 80170d6:	486b      	ldr	r0, [pc, #428]	; (8017284 <mem_trim+0x200>)
 80170d8:	f00b f932 	bl	8022340 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80170dc:	4b65      	ldr	r3, [pc, #404]	; (8017274 <mem_trim+0x1f0>)
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	687a      	ldr	r2, [r7, #4]
 80170e2:	429a      	cmp	r2, r3
 80170e4:	d304      	bcc.n	80170f0 <mem_trim+0x6c>
 80170e6:	4b64      	ldr	r3, [pc, #400]	; (8017278 <mem_trim+0x1f4>)
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	687a      	ldr	r2, [r7, #4]
 80170ec:	429a      	cmp	r2, r3
 80170ee:	d307      	bcc.n	8017100 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80170f0:	f00a fdae 	bl	8021c50 <sys_arch_protect>
 80170f4:	60b8      	str	r0, [r7, #8]
 80170f6:	68b8      	ldr	r0, [r7, #8]
 80170f8:	f00a fdb8 	bl	8021c6c <sys_arch_unprotect>
    return rmem;
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	e0b5      	b.n	801726c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	3b08      	subs	r3, #8
 8017104:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8017106:	69b8      	ldr	r0, [r7, #24]
 8017108:	f7ff fdee 	bl	8016ce8 <mem_to_ptr>
 801710c:	4603      	mov	r3, r0
 801710e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8017110:	69bb      	ldr	r3, [r7, #24]
 8017112:	881a      	ldrh	r2, [r3, #0]
 8017114:	8afb      	ldrh	r3, [r7, #22]
 8017116:	1ad3      	subs	r3, r2, r3
 8017118:	b29b      	uxth	r3, r3
 801711a:	3b08      	subs	r3, #8
 801711c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801711e:	8bfa      	ldrh	r2, [r7, #30]
 8017120:	8abb      	ldrh	r3, [r7, #20]
 8017122:	429a      	cmp	r2, r3
 8017124:	d906      	bls.n	8017134 <mem_trim+0xb0>
 8017126:	4b55      	ldr	r3, [pc, #340]	; (801727c <mem_trim+0x1f8>)
 8017128:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801712c:	4956      	ldr	r1, [pc, #344]	; (8017288 <mem_trim+0x204>)
 801712e:	4855      	ldr	r0, [pc, #340]	; (8017284 <mem_trim+0x200>)
 8017130:	f00b f906 	bl	8022340 <iprintf>
  if (newsize > size) {
 8017134:	8bfa      	ldrh	r2, [r7, #30]
 8017136:	8abb      	ldrh	r3, [r7, #20]
 8017138:	429a      	cmp	r2, r3
 801713a:	d901      	bls.n	8017140 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801713c:	2300      	movs	r3, #0
 801713e:	e095      	b.n	801726c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8017140:	8bfa      	ldrh	r2, [r7, #30]
 8017142:	8abb      	ldrh	r3, [r7, #20]
 8017144:	429a      	cmp	r2, r3
 8017146:	d101      	bne.n	801714c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	e08f      	b.n	801726c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801714c:	484f      	ldr	r0, [pc, #316]	; (801728c <mem_trim+0x208>)
 801714e:	f00a fd43 	bl	8021bd8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8017152:	69bb      	ldr	r3, [r7, #24]
 8017154:	881b      	ldrh	r3, [r3, #0]
 8017156:	4618      	mov	r0, r3
 8017158:	f7ff fdb4 	bl	8016cc4 <ptr_to_mem>
 801715c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801715e:	693b      	ldr	r3, [r7, #16]
 8017160:	791b      	ldrb	r3, [r3, #4]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d13f      	bne.n	80171e6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8017166:	69bb      	ldr	r3, [r7, #24]
 8017168:	881b      	ldrh	r3, [r3, #0]
 801716a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801716e:	d106      	bne.n	801717e <mem_trim+0xfa>
 8017170:	4b42      	ldr	r3, [pc, #264]	; (801727c <mem_trim+0x1f8>)
 8017172:	f240 22f5 	movw	r2, #757	; 0x2f5
 8017176:	4946      	ldr	r1, [pc, #280]	; (8017290 <mem_trim+0x20c>)
 8017178:	4842      	ldr	r0, [pc, #264]	; (8017284 <mem_trim+0x200>)
 801717a:	f00b f8e1 	bl	8022340 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801717e:	693b      	ldr	r3, [r7, #16]
 8017180:	881b      	ldrh	r3, [r3, #0]
 8017182:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017184:	8afa      	ldrh	r2, [r7, #22]
 8017186:	8bfb      	ldrh	r3, [r7, #30]
 8017188:	4413      	add	r3, r2
 801718a:	b29b      	uxth	r3, r3
 801718c:	3308      	adds	r3, #8
 801718e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8017190:	4b40      	ldr	r3, [pc, #256]	; (8017294 <mem_trim+0x210>)
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	693a      	ldr	r2, [r7, #16]
 8017196:	429a      	cmp	r2, r3
 8017198:	d106      	bne.n	80171a8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801719a:	89fb      	ldrh	r3, [r7, #14]
 801719c:	4618      	mov	r0, r3
 801719e:	f7ff fd91 	bl	8016cc4 <ptr_to_mem>
 80171a2:	4603      	mov	r3, r0
 80171a4:	4a3b      	ldr	r2, [pc, #236]	; (8017294 <mem_trim+0x210>)
 80171a6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80171a8:	89fb      	ldrh	r3, [r7, #14]
 80171aa:	4618      	mov	r0, r3
 80171ac:	f7ff fd8a 	bl	8016cc4 <ptr_to_mem>
 80171b0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80171b2:	693b      	ldr	r3, [r7, #16]
 80171b4:	2200      	movs	r2, #0
 80171b6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80171b8:	693b      	ldr	r3, [r7, #16]
 80171ba:	89ba      	ldrh	r2, [r7, #12]
 80171bc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80171be:	693b      	ldr	r3, [r7, #16]
 80171c0:	8afa      	ldrh	r2, [r7, #22]
 80171c2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80171c4:	69bb      	ldr	r3, [r7, #24]
 80171c6:	89fa      	ldrh	r2, [r7, #14]
 80171c8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80171ca:	693b      	ldr	r3, [r7, #16]
 80171cc:	881b      	ldrh	r3, [r3, #0]
 80171ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80171d2:	d047      	beq.n	8017264 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80171d4:	693b      	ldr	r3, [r7, #16]
 80171d6:	881b      	ldrh	r3, [r3, #0]
 80171d8:	4618      	mov	r0, r3
 80171da:	f7ff fd73 	bl	8016cc4 <ptr_to_mem>
 80171de:	4602      	mov	r2, r0
 80171e0:	89fb      	ldrh	r3, [r7, #14]
 80171e2:	8053      	strh	r3, [r2, #2]
 80171e4:	e03e      	b.n	8017264 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80171e6:	8bfb      	ldrh	r3, [r7, #30]
 80171e8:	f103 0214 	add.w	r2, r3, #20
 80171ec:	8abb      	ldrh	r3, [r7, #20]
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d838      	bhi.n	8017264 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80171f2:	8afa      	ldrh	r2, [r7, #22]
 80171f4:	8bfb      	ldrh	r3, [r7, #30]
 80171f6:	4413      	add	r3, r2
 80171f8:	b29b      	uxth	r3, r3
 80171fa:	3308      	adds	r3, #8
 80171fc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80171fe:	69bb      	ldr	r3, [r7, #24]
 8017200:	881b      	ldrh	r3, [r3, #0]
 8017202:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017206:	d106      	bne.n	8017216 <mem_trim+0x192>
 8017208:	4b1c      	ldr	r3, [pc, #112]	; (801727c <mem_trim+0x1f8>)
 801720a:	f240 3216 	movw	r2, #790	; 0x316
 801720e:	4920      	ldr	r1, [pc, #128]	; (8017290 <mem_trim+0x20c>)
 8017210:	481c      	ldr	r0, [pc, #112]	; (8017284 <mem_trim+0x200>)
 8017212:	f00b f895 	bl	8022340 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8017216:	89fb      	ldrh	r3, [r7, #14]
 8017218:	4618      	mov	r0, r3
 801721a:	f7ff fd53 	bl	8016cc4 <ptr_to_mem>
 801721e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8017220:	4b1c      	ldr	r3, [pc, #112]	; (8017294 <mem_trim+0x210>)
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	693a      	ldr	r2, [r7, #16]
 8017226:	429a      	cmp	r2, r3
 8017228:	d202      	bcs.n	8017230 <mem_trim+0x1ac>
      lfree = mem2;
 801722a:	4a1a      	ldr	r2, [pc, #104]	; (8017294 <mem_trim+0x210>)
 801722c:	693b      	ldr	r3, [r7, #16]
 801722e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8017230:	693b      	ldr	r3, [r7, #16]
 8017232:	2200      	movs	r2, #0
 8017234:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8017236:	69bb      	ldr	r3, [r7, #24]
 8017238:	881a      	ldrh	r2, [r3, #0]
 801723a:	693b      	ldr	r3, [r7, #16]
 801723c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801723e:	693b      	ldr	r3, [r7, #16]
 8017240:	8afa      	ldrh	r2, [r7, #22]
 8017242:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8017244:	69bb      	ldr	r3, [r7, #24]
 8017246:	89fa      	ldrh	r2, [r7, #14]
 8017248:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801724a:	693b      	ldr	r3, [r7, #16]
 801724c:	881b      	ldrh	r3, [r3, #0]
 801724e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017252:	d007      	beq.n	8017264 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8017254:	693b      	ldr	r3, [r7, #16]
 8017256:	881b      	ldrh	r3, [r3, #0]
 8017258:	4618      	mov	r0, r3
 801725a:	f7ff fd33 	bl	8016cc4 <ptr_to_mem>
 801725e:	4602      	mov	r2, r0
 8017260:	89fb      	ldrh	r3, [r7, #14]
 8017262:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017264:	4809      	ldr	r0, [pc, #36]	; (801728c <mem_trim+0x208>)
 8017266:	f00a fcc6 	bl	8021bf6 <sys_mutex_unlock>
  return rmem;
 801726a:	687b      	ldr	r3, [r7, #4]
}
 801726c:	4618      	mov	r0, r3
 801726e:	3720      	adds	r7, #32
 8017270:	46bd      	mov	sp, r7
 8017272:	bd80      	pop	{r7, pc}
 8017274:	2002befc 	.word	0x2002befc
 8017278:	2002bf00 	.word	0x2002bf00
 801727c:	080243fc 	.word	0x080243fc
 8017280:	08024588 	.word	0x08024588
 8017284:	08024444 	.word	0x08024444
 8017288:	080245a0 	.word	0x080245a0
 801728c:	2002bf04 	.word	0x2002bf04
 8017290:	080245c0 	.word	0x080245c0
 8017294:	2002bf08 	.word	0x2002bf08

08017298 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b088      	sub	sp, #32
 801729c:	af00      	add	r7, sp, #0
 801729e:	4603      	mov	r3, r0
 80172a0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80172a2:	88fb      	ldrh	r3, [r7, #6]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d101      	bne.n	80172ac <mem_malloc+0x14>
    return NULL;
 80172a8:	2300      	movs	r3, #0
 80172aa:	e0e2      	b.n	8017472 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80172ac:	88fb      	ldrh	r3, [r7, #6]
 80172ae:	3303      	adds	r3, #3
 80172b0:	b29b      	uxth	r3, r3
 80172b2:	f023 0303 	bic.w	r3, r3, #3
 80172b6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80172b8:	8bbb      	ldrh	r3, [r7, #28]
 80172ba:	2b0b      	cmp	r3, #11
 80172bc:	d801      	bhi.n	80172c2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80172be:	230c      	movs	r3, #12
 80172c0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80172c2:	8bbb      	ldrh	r3, [r7, #28]
 80172c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80172c8:	d803      	bhi.n	80172d2 <mem_malloc+0x3a>
 80172ca:	8bba      	ldrh	r2, [r7, #28]
 80172cc:	88fb      	ldrh	r3, [r7, #6]
 80172ce:	429a      	cmp	r2, r3
 80172d0:	d201      	bcs.n	80172d6 <mem_malloc+0x3e>
    return NULL;
 80172d2:	2300      	movs	r3, #0
 80172d4:	e0cd      	b.n	8017472 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80172d6:	4869      	ldr	r0, [pc, #420]	; (801747c <mem_malloc+0x1e4>)
 80172d8:	f00a fc7e 	bl	8021bd8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80172dc:	4b68      	ldr	r3, [pc, #416]	; (8017480 <mem_malloc+0x1e8>)
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	4618      	mov	r0, r3
 80172e2:	f7ff fd01 	bl	8016ce8 <mem_to_ptr>
 80172e6:	4603      	mov	r3, r0
 80172e8:	83fb      	strh	r3, [r7, #30]
 80172ea:	e0b7      	b.n	801745c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80172ec:	8bfb      	ldrh	r3, [r7, #30]
 80172ee:	4618      	mov	r0, r3
 80172f0:	f7ff fce8 	bl	8016cc4 <ptr_to_mem>
 80172f4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80172f6:	697b      	ldr	r3, [r7, #20]
 80172f8:	791b      	ldrb	r3, [r3, #4]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	f040 80a7 	bne.w	801744e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8017300:	697b      	ldr	r3, [r7, #20]
 8017302:	881b      	ldrh	r3, [r3, #0]
 8017304:	461a      	mov	r2, r3
 8017306:	8bfb      	ldrh	r3, [r7, #30]
 8017308:	1ad3      	subs	r3, r2, r3
 801730a:	f1a3 0208 	sub.w	r2, r3, #8
 801730e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8017310:	429a      	cmp	r2, r3
 8017312:	f0c0 809c 	bcc.w	801744e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8017316:	697b      	ldr	r3, [r7, #20]
 8017318:	881b      	ldrh	r3, [r3, #0]
 801731a:	461a      	mov	r2, r3
 801731c:	8bfb      	ldrh	r3, [r7, #30]
 801731e:	1ad3      	subs	r3, r2, r3
 8017320:	f1a3 0208 	sub.w	r2, r3, #8
 8017324:	8bbb      	ldrh	r3, [r7, #28]
 8017326:	3314      	adds	r3, #20
 8017328:	429a      	cmp	r2, r3
 801732a:	d333      	bcc.n	8017394 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801732c:	8bfa      	ldrh	r2, [r7, #30]
 801732e:	8bbb      	ldrh	r3, [r7, #28]
 8017330:	4413      	add	r3, r2
 8017332:	b29b      	uxth	r3, r3
 8017334:	3308      	adds	r3, #8
 8017336:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8017338:	8a7b      	ldrh	r3, [r7, #18]
 801733a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801733e:	d106      	bne.n	801734e <mem_malloc+0xb6>
 8017340:	4b50      	ldr	r3, [pc, #320]	; (8017484 <mem_malloc+0x1ec>)
 8017342:	f240 3287 	movw	r2, #903	; 0x387
 8017346:	4950      	ldr	r1, [pc, #320]	; (8017488 <mem_malloc+0x1f0>)
 8017348:	4850      	ldr	r0, [pc, #320]	; (801748c <mem_malloc+0x1f4>)
 801734a:	f00a fff9 	bl	8022340 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801734e:	8a7b      	ldrh	r3, [r7, #18]
 8017350:	4618      	mov	r0, r3
 8017352:	f7ff fcb7 	bl	8016cc4 <ptr_to_mem>
 8017356:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	2200      	movs	r2, #0
 801735c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801735e:	697b      	ldr	r3, [r7, #20]
 8017360:	881a      	ldrh	r2, [r3, #0]
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	8bfa      	ldrh	r2, [r7, #30]
 801736a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801736c:	697b      	ldr	r3, [r7, #20]
 801736e:	8a7a      	ldrh	r2, [r7, #18]
 8017370:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8017372:	697b      	ldr	r3, [r7, #20]
 8017374:	2201      	movs	r2, #1
 8017376:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	881b      	ldrh	r3, [r3, #0]
 801737c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017380:	d00b      	beq.n	801739a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	881b      	ldrh	r3, [r3, #0]
 8017386:	4618      	mov	r0, r3
 8017388:	f7ff fc9c 	bl	8016cc4 <ptr_to_mem>
 801738c:	4602      	mov	r2, r0
 801738e:	8a7b      	ldrh	r3, [r7, #18]
 8017390:	8053      	strh	r3, [r2, #2]
 8017392:	e002      	b.n	801739a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8017394:	697b      	ldr	r3, [r7, #20]
 8017396:	2201      	movs	r2, #1
 8017398:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801739a:	4b39      	ldr	r3, [pc, #228]	; (8017480 <mem_malloc+0x1e8>)
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	697a      	ldr	r2, [r7, #20]
 80173a0:	429a      	cmp	r2, r3
 80173a2:	d127      	bne.n	80173f4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80173a4:	4b36      	ldr	r3, [pc, #216]	; (8017480 <mem_malloc+0x1e8>)
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80173aa:	e005      	b.n	80173b8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80173ac:	69bb      	ldr	r3, [r7, #24]
 80173ae:	881b      	ldrh	r3, [r3, #0]
 80173b0:	4618      	mov	r0, r3
 80173b2:	f7ff fc87 	bl	8016cc4 <ptr_to_mem>
 80173b6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80173b8:	69bb      	ldr	r3, [r7, #24]
 80173ba:	791b      	ldrb	r3, [r3, #4]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d004      	beq.n	80173ca <mem_malloc+0x132>
 80173c0:	4b33      	ldr	r3, [pc, #204]	; (8017490 <mem_malloc+0x1f8>)
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	69ba      	ldr	r2, [r7, #24]
 80173c6:	429a      	cmp	r2, r3
 80173c8:	d1f0      	bne.n	80173ac <mem_malloc+0x114>
          }
          lfree = cur;
 80173ca:	4a2d      	ldr	r2, [pc, #180]	; (8017480 <mem_malloc+0x1e8>)
 80173cc:	69bb      	ldr	r3, [r7, #24]
 80173ce:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80173d0:	4b2b      	ldr	r3, [pc, #172]	; (8017480 <mem_malloc+0x1e8>)
 80173d2:	681a      	ldr	r2, [r3, #0]
 80173d4:	4b2e      	ldr	r3, [pc, #184]	; (8017490 <mem_malloc+0x1f8>)
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	429a      	cmp	r2, r3
 80173da:	d00b      	beq.n	80173f4 <mem_malloc+0x15c>
 80173dc:	4b28      	ldr	r3, [pc, #160]	; (8017480 <mem_malloc+0x1e8>)
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	791b      	ldrb	r3, [r3, #4]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d006      	beq.n	80173f4 <mem_malloc+0x15c>
 80173e6:	4b27      	ldr	r3, [pc, #156]	; (8017484 <mem_malloc+0x1ec>)
 80173e8:	f240 32b5 	movw	r2, #949	; 0x3b5
 80173ec:	4929      	ldr	r1, [pc, #164]	; (8017494 <mem_malloc+0x1fc>)
 80173ee:	4827      	ldr	r0, [pc, #156]	; (801748c <mem_malloc+0x1f4>)
 80173f0:	f00a ffa6 	bl	8022340 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80173f4:	4821      	ldr	r0, [pc, #132]	; (801747c <mem_malloc+0x1e4>)
 80173f6:	f00a fbfe 	bl	8021bf6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80173fa:	8bba      	ldrh	r2, [r7, #28]
 80173fc:	697b      	ldr	r3, [r7, #20]
 80173fe:	4413      	add	r3, r2
 8017400:	3308      	adds	r3, #8
 8017402:	4a23      	ldr	r2, [pc, #140]	; (8017490 <mem_malloc+0x1f8>)
 8017404:	6812      	ldr	r2, [r2, #0]
 8017406:	4293      	cmp	r3, r2
 8017408:	d906      	bls.n	8017418 <mem_malloc+0x180>
 801740a:	4b1e      	ldr	r3, [pc, #120]	; (8017484 <mem_malloc+0x1ec>)
 801740c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8017410:	4921      	ldr	r1, [pc, #132]	; (8017498 <mem_malloc+0x200>)
 8017412:	481e      	ldr	r0, [pc, #120]	; (801748c <mem_malloc+0x1f4>)
 8017414:	f00a ff94 	bl	8022340 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017418:	697b      	ldr	r3, [r7, #20]
 801741a:	f003 0303 	and.w	r3, r3, #3
 801741e:	2b00      	cmp	r3, #0
 8017420:	d006      	beq.n	8017430 <mem_malloc+0x198>
 8017422:	4b18      	ldr	r3, [pc, #96]	; (8017484 <mem_malloc+0x1ec>)
 8017424:	f240 32bb 	movw	r2, #955	; 0x3bb
 8017428:	491c      	ldr	r1, [pc, #112]	; (801749c <mem_malloc+0x204>)
 801742a:	4818      	ldr	r0, [pc, #96]	; (801748c <mem_malloc+0x1f4>)
 801742c:	f00a ff88 	bl	8022340 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017430:	697b      	ldr	r3, [r7, #20]
 8017432:	f003 0303 	and.w	r3, r3, #3
 8017436:	2b00      	cmp	r3, #0
 8017438:	d006      	beq.n	8017448 <mem_malloc+0x1b0>
 801743a:	4b12      	ldr	r3, [pc, #72]	; (8017484 <mem_malloc+0x1ec>)
 801743c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8017440:	4917      	ldr	r1, [pc, #92]	; (80174a0 <mem_malloc+0x208>)
 8017442:	4812      	ldr	r0, [pc, #72]	; (801748c <mem_malloc+0x1f4>)
 8017444:	f00a ff7c 	bl	8022340 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8017448:	697b      	ldr	r3, [r7, #20]
 801744a:	3308      	adds	r3, #8
 801744c:	e011      	b.n	8017472 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801744e:	8bfb      	ldrh	r3, [r7, #30]
 8017450:	4618      	mov	r0, r3
 8017452:	f7ff fc37 	bl	8016cc4 <ptr_to_mem>
 8017456:	4603      	mov	r3, r0
 8017458:	881b      	ldrh	r3, [r3, #0]
 801745a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801745c:	8bfa      	ldrh	r2, [r7, #30]
 801745e:	8bbb      	ldrh	r3, [r7, #28]
 8017460:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8017464:	429a      	cmp	r2, r3
 8017466:	f4ff af41 	bcc.w	80172ec <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801746a:	4804      	ldr	r0, [pc, #16]	; (801747c <mem_malloc+0x1e4>)
 801746c:	f00a fbc3 	bl	8021bf6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8017470:	2300      	movs	r3, #0
}
 8017472:	4618      	mov	r0, r3
 8017474:	3720      	adds	r7, #32
 8017476:	46bd      	mov	sp, r7
 8017478:	bd80      	pop	{r7, pc}
 801747a:	bf00      	nop
 801747c:	2002bf04 	.word	0x2002bf04
 8017480:	2002bf08 	.word	0x2002bf08
 8017484:	080243fc 	.word	0x080243fc
 8017488:	080245c0 	.word	0x080245c0
 801748c:	08024444 	.word	0x08024444
 8017490:	2002bf00 	.word	0x2002bf00
 8017494:	080245d4 	.word	0x080245d4
 8017498:	080245f0 	.word	0x080245f0
 801749c:	08024620 	.word	0x08024620
 80174a0:	08024650 	.word	0x08024650

080174a4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80174a4:	b480      	push	{r7}
 80174a6:	b085      	sub	sp, #20
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	689b      	ldr	r3, [r3, #8]
 80174b0:	2200      	movs	r2, #0
 80174b2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	685b      	ldr	r3, [r3, #4]
 80174b8:	3303      	adds	r3, #3
 80174ba:	f023 0303 	bic.w	r3, r3, #3
 80174be:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80174c0:	2300      	movs	r3, #0
 80174c2:	60fb      	str	r3, [r7, #12]
 80174c4:	e011      	b.n	80174ea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	689b      	ldr	r3, [r3, #8]
 80174ca:	681a      	ldr	r2, [r3, #0]
 80174cc:	68bb      	ldr	r3, [r7, #8]
 80174ce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	689b      	ldr	r3, [r3, #8]
 80174d4:	68ba      	ldr	r2, [r7, #8]
 80174d6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	881b      	ldrh	r3, [r3, #0]
 80174dc:	461a      	mov	r2, r3
 80174de:	68bb      	ldr	r3, [r7, #8]
 80174e0:	4413      	add	r3, r2
 80174e2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	3301      	adds	r3, #1
 80174e8:	60fb      	str	r3, [r7, #12]
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	885b      	ldrh	r3, [r3, #2]
 80174ee:	461a      	mov	r2, r3
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	4293      	cmp	r3, r2
 80174f4:	dbe7      	blt.n	80174c6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80174f6:	bf00      	nop
 80174f8:	bf00      	nop
 80174fa:	3714      	adds	r7, #20
 80174fc:	46bd      	mov	sp, r7
 80174fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017502:	4770      	bx	lr

08017504 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8017504:	b580      	push	{r7, lr}
 8017506:	b082      	sub	sp, #8
 8017508:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801750a:	2300      	movs	r3, #0
 801750c:	80fb      	strh	r3, [r7, #6]
 801750e:	e009      	b.n	8017524 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8017510:	88fb      	ldrh	r3, [r7, #6]
 8017512:	4a08      	ldr	r2, [pc, #32]	; (8017534 <memp_init+0x30>)
 8017514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017518:	4618      	mov	r0, r3
 801751a:	f7ff ffc3 	bl	80174a4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801751e:	88fb      	ldrh	r3, [r7, #6]
 8017520:	3301      	adds	r3, #1
 8017522:	80fb      	strh	r3, [r7, #6]
 8017524:	88fb      	ldrh	r3, [r7, #6]
 8017526:	2b0c      	cmp	r3, #12
 8017528:	d9f2      	bls.n	8017510 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801752a:	bf00      	nop
 801752c:	bf00      	nop
 801752e:	3708      	adds	r7, #8
 8017530:	46bd      	mov	sp, r7
 8017532:	bd80      	pop	{r7, pc}
 8017534:	08027050 	.word	0x08027050

08017538 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b084      	sub	sp, #16
 801753c:	af00      	add	r7, sp, #0
 801753e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8017540:	f00a fb86 	bl	8021c50 <sys_arch_protect>
 8017544:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	689b      	ldr	r3, [r3, #8]
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801754e:	68bb      	ldr	r3, [r7, #8]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d015      	beq.n	8017580 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	689b      	ldr	r3, [r3, #8]
 8017558:	68ba      	ldr	r2, [r7, #8]
 801755a:	6812      	ldr	r2, [r2, #0]
 801755c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801755e:	68bb      	ldr	r3, [r7, #8]
 8017560:	f003 0303 	and.w	r3, r3, #3
 8017564:	2b00      	cmp	r3, #0
 8017566:	d006      	beq.n	8017576 <do_memp_malloc_pool+0x3e>
 8017568:	4b09      	ldr	r3, [pc, #36]	; (8017590 <do_memp_malloc_pool+0x58>)
 801756a:	f44f 728c 	mov.w	r2, #280	; 0x118
 801756e:	4909      	ldr	r1, [pc, #36]	; (8017594 <do_memp_malloc_pool+0x5c>)
 8017570:	4809      	ldr	r0, [pc, #36]	; (8017598 <do_memp_malloc_pool+0x60>)
 8017572:	f00a fee5 	bl	8022340 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017576:	68f8      	ldr	r0, [r7, #12]
 8017578:	f00a fb78 	bl	8021c6c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801757c:	68bb      	ldr	r3, [r7, #8]
 801757e:	e003      	b.n	8017588 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017580:	68f8      	ldr	r0, [r7, #12]
 8017582:	f00a fb73 	bl	8021c6c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8017586:	2300      	movs	r3, #0
}
 8017588:	4618      	mov	r0, r3
 801758a:	3710      	adds	r7, #16
 801758c:	46bd      	mov	sp, r7
 801758e:	bd80      	pop	{r7, pc}
 8017590:	08024674 	.word	0x08024674
 8017594:	080246a4 	.word	0x080246a4
 8017598:	080246c8 	.word	0x080246c8

0801759c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801759c:	b580      	push	{r7, lr}
 801759e:	b082      	sub	sp, #8
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d106      	bne.n	80175b8 <memp_malloc_pool+0x1c>
 80175aa:	4b0a      	ldr	r3, [pc, #40]	; (80175d4 <memp_malloc_pool+0x38>)
 80175ac:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80175b0:	4909      	ldr	r1, [pc, #36]	; (80175d8 <memp_malloc_pool+0x3c>)
 80175b2:	480a      	ldr	r0, [pc, #40]	; (80175dc <memp_malloc_pool+0x40>)
 80175b4:	f00a fec4 	bl	8022340 <iprintf>
  if (desc == NULL) {
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d101      	bne.n	80175c2 <memp_malloc_pool+0x26>
    return NULL;
 80175be:	2300      	movs	r3, #0
 80175c0:	e003      	b.n	80175ca <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	f7ff ffb8 	bl	8017538 <do_memp_malloc_pool>
 80175c8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80175ca:	4618      	mov	r0, r3
 80175cc:	3708      	adds	r7, #8
 80175ce:	46bd      	mov	sp, r7
 80175d0:	bd80      	pop	{r7, pc}
 80175d2:	bf00      	nop
 80175d4:	08024674 	.word	0x08024674
 80175d8:	080246f0 	.word	0x080246f0
 80175dc:	080246c8 	.word	0x080246c8

080175e0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b084      	sub	sp, #16
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	4603      	mov	r3, r0
 80175e8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80175ea:	79fb      	ldrb	r3, [r7, #7]
 80175ec:	2b0c      	cmp	r3, #12
 80175ee:	d908      	bls.n	8017602 <memp_malloc+0x22>
 80175f0:	4b0a      	ldr	r3, [pc, #40]	; (801761c <memp_malloc+0x3c>)
 80175f2:	f240 1257 	movw	r2, #343	; 0x157
 80175f6:	490a      	ldr	r1, [pc, #40]	; (8017620 <memp_malloc+0x40>)
 80175f8:	480a      	ldr	r0, [pc, #40]	; (8017624 <memp_malloc+0x44>)
 80175fa:	f00a fea1 	bl	8022340 <iprintf>
 80175fe:	2300      	movs	r3, #0
 8017600:	e008      	b.n	8017614 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8017602:	79fb      	ldrb	r3, [r7, #7]
 8017604:	4a08      	ldr	r2, [pc, #32]	; (8017628 <memp_malloc+0x48>)
 8017606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801760a:	4618      	mov	r0, r3
 801760c:	f7ff ff94 	bl	8017538 <do_memp_malloc_pool>
 8017610:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8017612:	68fb      	ldr	r3, [r7, #12]
}
 8017614:	4618      	mov	r0, r3
 8017616:	3710      	adds	r7, #16
 8017618:	46bd      	mov	sp, r7
 801761a:	bd80      	pop	{r7, pc}
 801761c:	08024674 	.word	0x08024674
 8017620:	08024704 	.word	0x08024704
 8017624:	080246c8 	.word	0x080246c8
 8017628:	08027050 	.word	0x08027050

0801762c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b084      	sub	sp, #16
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
 8017634:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8017636:	683b      	ldr	r3, [r7, #0]
 8017638:	f003 0303 	and.w	r3, r3, #3
 801763c:	2b00      	cmp	r3, #0
 801763e:	d006      	beq.n	801764e <do_memp_free_pool+0x22>
 8017640:	4b0d      	ldr	r3, [pc, #52]	; (8017678 <do_memp_free_pool+0x4c>)
 8017642:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8017646:	490d      	ldr	r1, [pc, #52]	; (801767c <do_memp_free_pool+0x50>)
 8017648:	480d      	ldr	r0, [pc, #52]	; (8017680 <do_memp_free_pool+0x54>)
 801764a:	f00a fe79 	bl	8022340 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801764e:	683b      	ldr	r3, [r7, #0]
 8017650:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8017652:	f00a fafd 	bl	8021c50 <sys_arch_protect>
 8017656:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	689b      	ldr	r3, [r3, #8]
 801765c:	681a      	ldr	r2, [r3, #0]
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	689b      	ldr	r3, [r3, #8]
 8017666:	68fa      	ldr	r2, [r7, #12]
 8017668:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801766a:	68b8      	ldr	r0, [r7, #8]
 801766c:	f00a fafe 	bl	8021c6c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8017670:	bf00      	nop
 8017672:	3710      	adds	r7, #16
 8017674:	46bd      	mov	sp, r7
 8017676:	bd80      	pop	{r7, pc}
 8017678:	08024674 	.word	0x08024674
 801767c:	08024724 	.word	0x08024724
 8017680:	080246c8 	.word	0x080246c8

08017684 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b082      	sub	sp, #8
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
 801768c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d106      	bne.n	80176a2 <memp_free_pool+0x1e>
 8017694:	4b0a      	ldr	r3, [pc, #40]	; (80176c0 <memp_free_pool+0x3c>)
 8017696:	f240 1295 	movw	r2, #405	; 0x195
 801769a:	490a      	ldr	r1, [pc, #40]	; (80176c4 <memp_free_pool+0x40>)
 801769c:	480a      	ldr	r0, [pc, #40]	; (80176c8 <memp_free_pool+0x44>)
 801769e:	f00a fe4f 	bl	8022340 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d007      	beq.n	80176b8 <memp_free_pool+0x34>
 80176a8:	683b      	ldr	r3, [r7, #0]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d004      	beq.n	80176b8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80176ae:	6839      	ldr	r1, [r7, #0]
 80176b0:	6878      	ldr	r0, [r7, #4]
 80176b2:	f7ff ffbb 	bl	801762c <do_memp_free_pool>
 80176b6:	e000      	b.n	80176ba <memp_free_pool+0x36>
    return;
 80176b8:	bf00      	nop
}
 80176ba:	3708      	adds	r7, #8
 80176bc:	46bd      	mov	sp, r7
 80176be:	bd80      	pop	{r7, pc}
 80176c0:	08024674 	.word	0x08024674
 80176c4:	080246f0 	.word	0x080246f0
 80176c8:	080246c8 	.word	0x080246c8

080176cc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b082      	sub	sp, #8
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	4603      	mov	r3, r0
 80176d4:	6039      	str	r1, [r7, #0]
 80176d6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80176d8:	79fb      	ldrb	r3, [r7, #7]
 80176da:	2b0c      	cmp	r3, #12
 80176dc:	d907      	bls.n	80176ee <memp_free+0x22>
 80176de:	4b0c      	ldr	r3, [pc, #48]	; (8017710 <memp_free+0x44>)
 80176e0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80176e4:	490b      	ldr	r1, [pc, #44]	; (8017714 <memp_free+0x48>)
 80176e6:	480c      	ldr	r0, [pc, #48]	; (8017718 <memp_free+0x4c>)
 80176e8:	f00a fe2a 	bl	8022340 <iprintf>
 80176ec:	e00c      	b.n	8017708 <memp_free+0x3c>

  if (mem == NULL) {
 80176ee:	683b      	ldr	r3, [r7, #0]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d008      	beq.n	8017706 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80176f4:	79fb      	ldrb	r3, [r7, #7]
 80176f6:	4a09      	ldr	r2, [pc, #36]	; (801771c <memp_free+0x50>)
 80176f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80176fc:	6839      	ldr	r1, [r7, #0]
 80176fe:	4618      	mov	r0, r3
 8017700:	f7ff ff94 	bl	801762c <do_memp_free_pool>
 8017704:	e000      	b.n	8017708 <memp_free+0x3c>
    return;
 8017706:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8017708:	3708      	adds	r7, #8
 801770a:	46bd      	mov	sp, r7
 801770c:	bd80      	pop	{r7, pc}
 801770e:	bf00      	nop
 8017710:	08024674 	.word	0x08024674
 8017714:	08024744 	.word	0x08024744
 8017718:	080246c8 	.word	0x080246c8
 801771c:	08027050 	.word	0x08027050

08017720 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8017720:	b480      	push	{r7}
 8017722:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8017724:	bf00      	nop
 8017726:	46bd      	mov	sp, r7
 8017728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801772c:	4770      	bx	lr
	...

08017730 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8017730:	b580      	push	{r7, lr}
 8017732:	b086      	sub	sp, #24
 8017734:	af00      	add	r7, sp, #0
 8017736:	60f8      	str	r0, [r7, #12]
 8017738:	60b9      	str	r1, [r7, #8]
 801773a:	607a      	str	r2, [r7, #4]
 801773c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d108      	bne.n	8017756 <netif_add+0x26>
 8017744:	4b57      	ldr	r3, [pc, #348]	; (80178a4 <netif_add+0x174>)
 8017746:	f240 1227 	movw	r2, #295	; 0x127
 801774a:	4957      	ldr	r1, [pc, #348]	; (80178a8 <netif_add+0x178>)
 801774c:	4857      	ldr	r0, [pc, #348]	; (80178ac <netif_add+0x17c>)
 801774e:	f00a fdf7 	bl	8022340 <iprintf>
 8017752:	2300      	movs	r3, #0
 8017754:	e0a2      	b.n	801789c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8017756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017758:	2b00      	cmp	r3, #0
 801775a:	d108      	bne.n	801776e <netif_add+0x3e>
 801775c:	4b51      	ldr	r3, [pc, #324]	; (80178a4 <netif_add+0x174>)
 801775e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8017762:	4953      	ldr	r1, [pc, #332]	; (80178b0 <netif_add+0x180>)
 8017764:	4851      	ldr	r0, [pc, #324]	; (80178ac <netif_add+0x17c>)
 8017766:	f00a fdeb 	bl	8022340 <iprintf>
 801776a:	2300      	movs	r3, #0
 801776c:	e096      	b.n	801789c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801776e:	68bb      	ldr	r3, [r7, #8]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d101      	bne.n	8017778 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8017774:	4b4f      	ldr	r3, [pc, #316]	; (80178b4 <netif_add+0x184>)
 8017776:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	2b00      	cmp	r3, #0
 801777c:	d101      	bne.n	8017782 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801777e:	4b4d      	ldr	r3, [pc, #308]	; (80178b4 <netif_add+0x184>)
 8017780:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8017782:	683b      	ldr	r3, [r7, #0]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d101      	bne.n	801778c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8017788:	4b4a      	ldr	r3, [pc, #296]	; (80178b4 <netif_add+0x184>)
 801778a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	2200      	movs	r2, #0
 8017790:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	2200      	movs	r2, #0
 8017796:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	2200      	movs	r2, #0
 801779c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	4a45      	ldr	r2, [pc, #276]	; (80178b8 <netif_add+0x188>)
 80177a2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	2200      	movs	r2, #0
 80177a8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	2200      	movs	r2, #0
 80177ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	2200      	movs	r2, #0
 80177b6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	6a3a      	ldr	r2, [r7, #32]
 80177bc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80177be:	4b3f      	ldr	r3, [pc, #252]	; (80178bc <netif_add+0x18c>)
 80177c0:	781a      	ldrb	r2, [r3, #0]
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80177cc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80177ce:	683b      	ldr	r3, [r7, #0]
 80177d0:	687a      	ldr	r2, [r7, #4]
 80177d2:	68b9      	ldr	r1, [r7, #8]
 80177d4:	68f8      	ldr	r0, [r7, #12]
 80177d6:	f000 f913 	bl	8017a00 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80177da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177dc:	68f8      	ldr	r0, [r7, #12]
 80177de:	4798      	blx	r3
 80177e0:	4603      	mov	r3, r0
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d001      	beq.n	80177ea <netif_add+0xba>
    return NULL;
 80177e6:	2300      	movs	r3, #0
 80177e8:	e058      	b.n	801789c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80177f0:	2bff      	cmp	r3, #255	; 0xff
 80177f2:	d103      	bne.n	80177fc <netif_add+0xcc>
        netif->num = 0;
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	2200      	movs	r2, #0
 80177f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80177fc:	2300      	movs	r3, #0
 80177fe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8017800:	4b2f      	ldr	r3, [pc, #188]	; (80178c0 <netif_add+0x190>)
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	617b      	str	r3, [r7, #20]
 8017806:	e02b      	b.n	8017860 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8017808:	697a      	ldr	r2, [r7, #20]
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	429a      	cmp	r2, r3
 801780e:	d106      	bne.n	801781e <netif_add+0xee>
 8017810:	4b24      	ldr	r3, [pc, #144]	; (80178a4 <netif_add+0x174>)
 8017812:	f240 128b 	movw	r2, #395	; 0x18b
 8017816:	492b      	ldr	r1, [pc, #172]	; (80178c4 <netif_add+0x194>)
 8017818:	4824      	ldr	r0, [pc, #144]	; (80178ac <netif_add+0x17c>)
 801781a:	f00a fd91 	bl	8022340 <iprintf>
        num_netifs++;
 801781e:	693b      	ldr	r3, [r7, #16]
 8017820:	3301      	adds	r3, #1
 8017822:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8017824:	693b      	ldr	r3, [r7, #16]
 8017826:	2bff      	cmp	r3, #255	; 0xff
 8017828:	dd06      	ble.n	8017838 <netif_add+0x108>
 801782a:	4b1e      	ldr	r3, [pc, #120]	; (80178a4 <netif_add+0x174>)
 801782c:	f240 128d 	movw	r2, #397	; 0x18d
 8017830:	4925      	ldr	r1, [pc, #148]	; (80178c8 <netif_add+0x198>)
 8017832:	481e      	ldr	r0, [pc, #120]	; (80178ac <netif_add+0x17c>)
 8017834:	f00a fd84 	bl	8022340 <iprintf>
        if (netif2->num == netif->num) {
 8017838:	697b      	ldr	r3, [r7, #20]
 801783a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017844:	429a      	cmp	r2, r3
 8017846:	d108      	bne.n	801785a <netif_add+0x12a>
          netif->num++;
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801784e:	3301      	adds	r3, #1
 8017850:	b2da      	uxtb	r2, r3
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8017858:	e005      	b.n	8017866 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801785a:	697b      	ldr	r3, [r7, #20]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	617b      	str	r3, [r7, #20]
 8017860:	697b      	ldr	r3, [r7, #20]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d1d0      	bne.n	8017808 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8017866:	697b      	ldr	r3, [r7, #20]
 8017868:	2b00      	cmp	r3, #0
 801786a:	d1be      	bne.n	80177ea <netif_add+0xba>
  }
  if (netif->num == 254) {
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017872:	2bfe      	cmp	r3, #254	; 0xfe
 8017874:	d103      	bne.n	801787e <netif_add+0x14e>
    netif_num = 0;
 8017876:	4b11      	ldr	r3, [pc, #68]	; (80178bc <netif_add+0x18c>)
 8017878:	2200      	movs	r2, #0
 801787a:	701a      	strb	r2, [r3, #0]
 801787c:	e006      	b.n	801788c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017884:	3301      	adds	r3, #1
 8017886:	b2da      	uxtb	r2, r3
 8017888:	4b0c      	ldr	r3, [pc, #48]	; (80178bc <netif_add+0x18c>)
 801788a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801788c:	4b0c      	ldr	r3, [pc, #48]	; (80178c0 <netif_add+0x190>)
 801788e:	681a      	ldr	r2, [r3, #0]
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8017894:	4a0a      	ldr	r2, [pc, #40]	; (80178c0 <netif_add+0x190>)
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801789a:	68fb      	ldr	r3, [r7, #12]
}
 801789c:	4618      	mov	r0, r3
 801789e:	3718      	adds	r7, #24
 80178a0:	46bd      	mov	sp, r7
 80178a2:	bd80      	pop	{r7, pc}
 80178a4:	08024760 	.word	0x08024760
 80178a8:	080247f4 	.word	0x080247f4
 80178ac:	080247b0 	.word	0x080247b0
 80178b0:	08024810 	.word	0x08024810
 80178b4:	080270c4 	.word	0x080270c4
 80178b8:	08017cdb 	.word	0x08017cdb
 80178bc:	2002efe0 	.word	0x2002efe0
 80178c0:	2002efd8 	.word	0x2002efd8
 80178c4:	08024834 	.word	0x08024834
 80178c8:	08024848 	.word	0x08024848

080178cc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b082      	sub	sp, #8
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]
 80178d4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80178d6:	6839      	ldr	r1, [r7, #0]
 80178d8:	6878      	ldr	r0, [r7, #4]
 80178da:	f002 fe4f 	bl	801a57c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80178de:	6839      	ldr	r1, [r7, #0]
 80178e0:	6878      	ldr	r0, [r7, #4]
 80178e2:	f007 fd01 	bl	801f2e8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80178e6:	bf00      	nop
 80178e8:	3708      	adds	r7, #8
 80178ea:	46bd      	mov	sp, r7
 80178ec:	bd80      	pop	{r7, pc}
	...

080178f0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b086      	sub	sp, #24
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	60f8      	str	r0, [r7, #12]
 80178f8:	60b9      	str	r1, [r7, #8]
 80178fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80178fc:	68bb      	ldr	r3, [r7, #8]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d106      	bne.n	8017910 <netif_do_set_ipaddr+0x20>
 8017902:	4b1d      	ldr	r3, [pc, #116]	; (8017978 <netif_do_set_ipaddr+0x88>)
 8017904:	f240 12cb 	movw	r2, #459	; 0x1cb
 8017908:	491c      	ldr	r1, [pc, #112]	; (801797c <netif_do_set_ipaddr+0x8c>)
 801790a:	481d      	ldr	r0, [pc, #116]	; (8017980 <netif_do_set_ipaddr+0x90>)
 801790c:	f00a fd18 	bl	8022340 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d106      	bne.n	8017924 <netif_do_set_ipaddr+0x34>
 8017916:	4b18      	ldr	r3, [pc, #96]	; (8017978 <netif_do_set_ipaddr+0x88>)
 8017918:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801791c:	4917      	ldr	r1, [pc, #92]	; (801797c <netif_do_set_ipaddr+0x8c>)
 801791e:	4818      	ldr	r0, [pc, #96]	; (8017980 <netif_do_set_ipaddr+0x90>)
 8017920:	f00a fd0e 	bl	8022340 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8017924:	68bb      	ldr	r3, [r7, #8]
 8017926:	681a      	ldr	r2, [r3, #0]
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	3304      	adds	r3, #4
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	429a      	cmp	r2, r3
 8017930:	d01c      	beq.n	801796c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8017932:	68bb      	ldr	r3, [r7, #8]
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	3304      	adds	r3, #4
 801793c:	681a      	ldr	r2, [r3, #0]
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8017942:	f107 0314 	add.w	r3, r7, #20
 8017946:	4619      	mov	r1, r3
 8017948:	6878      	ldr	r0, [r7, #4]
 801794a:	f7ff ffbf 	bl	80178cc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801794e:	68bb      	ldr	r3, [r7, #8]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d002      	beq.n	801795a <netif_do_set_ipaddr+0x6a>
 8017954:	68bb      	ldr	r3, [r7, #8]
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	e000      	b.n	801795c <netif_do_set_ipaddr+0x6c>
 801795a:	2300      	movs	r3, #0
 801795c:	68fa      	ldr	r2, [r7, #12]
 801795e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8017960:	2101      	movs	r1, #1
 8017962:	68f8      	ldr	r0, [r7, #12]
 8017964:	f000 f8d2 	bl	8017b0c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8017968:	2301      	movs	r3, #1
 801796a:	e000      	b.n	801796e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801796c:	2300      	movs	r3, #0
}
 801796e:	4618      	mov	r0, r3
 8017970:	3718      	adds	r7, #24
 8017972:	46bd      	mov	sp, r7
 8017974:	bd80      	pop	{r7, pc}
 8017976:	bf00      	nop
 8017978:	08024760 	.word	0x08024760
 801797c:	08024878 	.word	0x08024878
 8017980:	080247b0 	.word	0x080247b0

08017984 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8017984:	b480      	push	{r7}
 8017986:	b085      	sub	sp, #20
 8017988:	af00      	add	r7, sp, #0
 801798a:	60f8      	str	r0, [r7, #12]
 801798c:	60b9      	str	r1, [r7, #8]
 801798e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8017990:	68bb      	ldr	r3, [r7, #8]
 8017992:	681a      	ldr	r2, [r3, #0]
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	3308      	adds	r3, #8
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	429a      	cmp	r2, r3
 801799c:	d00a      	beq.n	80179b4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801799e:	68bb      	ldr	r3, [r7, #8]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d002      	beq.n	80179aa <netif_do_set_netmask+0x26>
 80179a4:	68bb      	ldr	r3, [r7, #8]
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	e000      	b.n	80179ac <netif_do_set_netmask+0x28>
 80179aa:	2300      	movs	r3, #0
 80179ac:	68fa      	ldr	r2, [r7, #12]
 80179ae:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80179b0:	2301      	movs	r3, #1
 80179b2:	e000      	b.n	80179b6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80179b4:	2300      	movs	r3, #0
}
 80179b6:	4618      	mov	r0, r3
 80179b8:	3714      	adds	r7, #20
 80179ba:	46bd      	mov	sp, r7
 80179bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c0:	4770      	bx	lr

080179c2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80179c2:	b480      	push	{r7}
 80179c4:	b085      	sub	sp, #20
 80179c6:	af00      	add	r7, sp, #0
 80179c8:	60f8      	str	r0, [r7, #12]
 80179ca:	60b9      	str	r1, [r7, #8]
 80179cc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80179ce:	68bb      	ldr	r3, [r7, #8]
 80179d0:	681a      	ldr	r2, [r3, #0]
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	330c      	adds	r3, #12
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	429a      	cmp	r2, r3
 80179da:	d00a      	beq.n	80179f2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80179dc:	68bb      	ldr	r3, [r7, #8]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d002      	beq.n	80179e8 <netif_do_set_gw+0x26>
 80179e2:	68bb      	ldr	r3, [r7, #8]
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	e000      	b.n	80179ea <netif_do_set_gw+0x28>
 80179e8:	2300      	movs	r3, #0
 80179ea:	68fa      	ldr	r2, [r7, #12]
 80179ec:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80179ee:	2301      	movs	r3, #1
 80179f0:	e000      	b.n	80179f4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80179f2:	2300      	movs	r3, #0
}
 80179f4:	4618      	mov	r0, r3
 80179f6:	3714      	adds	r7, #20
 80179f8:	46bd      	mov	sp, r7
 80179fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fe:	4770      	bx	lr

08017a00 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8017a00:	b580      	push	{r7, lr}
 8017a02:	b088      	sub	sp, #32
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	60f8      	str	r0, [r7, #12]
 8017a08:	60b9      	str	r1, [r7, #8]
 8017a0a:	607a      	str	r2, [r7, #4]
 8017a0c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8017a0e:	2300      	movs	r3, #0
 8017a10:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8017a12:	2300      	movs	r3, #0
 8017a14:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017a16:	68bb      	ldr	r3, [r7, #8]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d101      	bne.n	8017a20 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8017a1c:	4b1c      	ldr	r3, [pc, #112]	; (8017a90 <netif_set_addr+0x90>)
 8017a1e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d101      	bne.n	8017a2a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8017a26:	4b1a      	ldr	r3, [pc, #104]	; (8017a90 <netif_set_addr+0x90>)
 8017a28:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8017a2a:	683b      	ldr	r3, [r7, #0]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d101      	bne.n	8017a34 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8017a30:	4b17      	ldr	r3, [pc, #92]	; (8017a90 <netif_set_addr+0x90>)
 8017a32:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8017a34:	68bb      	ldr	r3, [r7, #8]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d003      	beq.n	8017a42 <netif_set_addr+0x42>
 8017a3a:	68bb      	ldr	r3, [r7, #8]
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d101      	bne.n	8017a46 <netif_set_addr+0x46>
 8017a42:	2301      	movs	r3, #1
 8017a44:	e000      	b.n	8017a48 <netif_set_addr+0x48>
 8017a46:	2300      	movs	r3, #0
 8017a48:	617b      	str	r3, [r7, #20]
  if (remove) {
 8017a4a:	697b      	ldr	r3, [r7, #20]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d006      	beq.n	8017a5e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8017a50:	f107 0310 	add.w	r3, r7, #16
 8017a54:	461a      	mov	r2, r3
 8017a56:	68b9      	ldr	r1, [r7, #8]
 8017a58:	68f8      	ldr	r0, [r7, #12]
 8017a5a:	f7ff ff49 	bl	80178f0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8017a5e:	69fa      	ldr	r2, [r7, #28]
 8017a60:	6879      	ldr	r1, [r7, #4]
 8017a62:	68f8      	ldr	r0, [r7, #12]
 8017a64:	f7ff ff8e 	bl	8017984 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8017a68:	69ba      	ldr	r2, [r7, #24]
 8017a6a:	6839      	ldr	r1, [r7, #0]
 8017a6c:	68f8      	ldr	r0, [r7, #12]
 8017a6e:	f7ff ffa8 	bl	80179c2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8017a72:	697b      	ldr	r3, [r7, #20]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d106      	bne.n	8017a86 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8017a78:	f107 0310 	add.w	r3, r7, #16
 8017a7c:	461a      	mov	r2, r3
 8017a7e:	68b9      	ldr	r1, [r7, #8]
 8017a80:	68f8      	ldr	r0, [r7, #12]
 8017a82:	f7ff ff35 	bl	80178f0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8017a86:	bf00      	nop
 8017a88:	3720      	adds	r7, #32
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	bd80      	pop	{r7, pc}
 8017a8e:	bf00      	nop
 8017a90:	080270c4 	.word	0x080270c4

08017a94 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8017a94:	b480      	push	{r7}
 8017a96:	b083      	sub	sp, #12
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8017a9c:	4a04      	ldr	r2, [pc, #16]	; (8017ab0 <netif_set_default+0x1c>)
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8017aa2:	bf00      	nop
 8017aa4:	370c      	adds	r7, #12
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aac:	4770      	bx	lr
 8017aae:	bf00      	nop
 8017ab0:	2002efdc 	.word	0x2002efdc

08017ab4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8017ab4:	b580      	push	{r7, lr}
 8017ab6:	b082      	sub	sp, #8
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d107      	bne.n	8017ad2 <netif_set_up+0x1e>
 8017ac2:	4b0f      	ldr	r3, [pc, #60]	; (8017b00 <netif_set_up+0x4c>)
 8017ac4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8017ac8:	490e      	ldr	r1, [pc, #56]	; (8017b04 <netif_set_up+0x50>)
 8017aca:	480f      	ldr	r0, [pc, #60]	; (8017b08 <netif_set_up+0x54>)
 8017acc:	f00a fc38 	bl	8022340 <iprintf>
 8017ad0:	e013      	b.n	8017afa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ad8:	f003 0301 	and.w	r3, r3, #1
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d10c      	bne.n	8017afa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ae6:	f043 0301 	orr.w	r3, r3, #1
 8017aea:	b2da      	uxtb	r2, r3
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8017af2:	2103      	movs	r1, #3
 8017af4:	6878      	ldr	r0, [r7, #4]
 8017af6:	f000 f809 	bl	8017b0c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8017afa:	3708      	adds	r7, #8
 8017afc:	46bd      	mov	sp, r7
 8017afe:	bd80      	pop	{r7, pc}
 8017b00:	08024760 	.word	0x08024760
 8017b04:	080248e8 	.word	0x080248e8
 8017b08:	080247b0 	.word	0x080247b0

08017b0c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8017b0c:	b580      	push	{r7, lr}
 8017b0e:	b082      	sub	sp, #8
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	6078      	str	r0, [r7, #4]
 8017b14:	460b      	mov	r3, r1
 8017b16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d106      	bne.n	8017b2c <netif_issue_reports+0x20>
 8017b1e:	4b18      	ldr	r3, [pc, #96]	; (8017b80 <netif_issue_reports+0x74>)
 8017b20:	f240 326d 	movw	r2, #877	; 0x36d
 8017b24:	4917      	ldr	r1, [pc, #92]	; (8017b84 <netif_issue_reports+0x78>)
 8017b26:	4818      	ldr	r0, [pc, #96]	; (8017b88 <netif_issue_reports+0x7c>)
 8017b28:	f00a fc0a 	bl	8022340 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017b32:	f003 0304 	and.w	r3, r3, #4
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d01e      	beq.n	8017b78 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017b40:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d017      	beq.n	8017b78 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017b48:	78fb      	ldrb	r3, [r7, #3]
 8017b4a:	f003 0301 	and.w	r3, r3, #1
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d013      	beq.n	8017b7a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	3304      	adds	r3, #4
 8017b56:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d00e      	beq.n	8017b7a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017b62:	f003 0308 	and.w	r3, r3, #8
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d007      	beq.n	8017b7a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	3304      	adds	r3, #4
 8017b6e:	4619      	mov	r1, r3
 8017b70:	6878      	ldr	r0, [r7, #4]
 8017b72:	f008 fb23 	bl	80201bc <etharp_request>
 8017b76:	e000      	b.n	8017b7a <netif_issue_reports+0x6e>
    return;
 8017b78:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8017b7a:	3708      	adds	r7, #8
 8017b7c:	46bd      	mov	sp, r7
 8017b7e:	bd80      	pop	{r7, pc}
 8017b80:	08024760 	.word	0x08024760
 8017b84:	08024904 	.word	0x08024904
 8017b88:	080247b0 	.word	0x080247b0

08017b8c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	b082      	sub	sp, #8
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d107      	bne.n	8017baa <netif_set_down+0x1e>
 8017b9a:	4b12      	ldr	r3, [pc, #72]	; (8017be4 <netif_set_down+0x58>)
 8017b9c:	f240 329b 	movw	r2, #923	; 0x39b
 8017ba0:	4911      	ldr	r1, [pc, #68]	; (8017be8 <netif_set_down+0x5c>)
 8017ba2:	4812      	ldr	r0, [pc, #72]	; (8017bec <netif_set_down+0x60>)
 8017ba4:	f00a fbcc 	bl	8022340 <iprintf>
 8017ba8:	e019      	b.n	8017bde <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017bb0:	f003 0301 	and.w	r3, r3, #1
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d012      	beq.n	8017bde <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017bbe:	f023 0301 	bic.w	r3, r3, #1
 8017bc2:	b2da      	uxtb	r2, r3
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017bd0:	f003 0308 	and.w	r3, r3, #8
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d002      	beq.n	8017bde <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8017bd8:	6878      	ldr	r0, [r7, #4]
 8017bda:	f007 fead 	bl	801f938 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8017bde:	3708      	adds	r7, #8
 8017be0:	46bd      	mov	sp, r7
 8017be2:	bd80      	pop	{r7, pc}
 8017be4:	08024760 	.word	0x08024760
 8017be8:	08024928 	.word	0x08024928
 8017bec:	080247b0 	.word	0x080247b0

08017bf0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b082      	sub	sp, #8
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d107      	bne.n	8017c0e <netif_set_link_up+0x1e>
 8017bfe:	4b13      	ldr	r3, [pc, #76]	; (8017c4c <netif_set_link_up+0x5c>)
 8017c00:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8017c04:	4912      	ldr	r1, [pc, #72]	; (8017c50 <netif_set_link_up+0x60>)
 8017c06:	4813      	ldr	r0, [pc, #76]	; (8017c54 <netif_set_link_up+0x64>)
 8017c08:	f00a fb9a 	bl	8022340 <iprintf>
 8017c0c:	e01b      	b.n	8017c46 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c14:	f003 0304 	and.w	r3, r3, #4
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d114      	bne.n	8017c46 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c22:	f043 0304 	orr.w	r3, r3, #4
 8017c26:	b2da      	uxtb	r2, r3
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8017c2e:	2103      	movs	r1, #3
 8017c30:	6878      	ldr	r0, [r7, #4]
 8017c32:	f7ff ff6b 	bl	8017b0c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	69db      	ldr	r3, [r3, #28]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d003      	beq.n	8017c46 <netif_set_link_up+0x56>
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	69db      	ldr	r3, [r3, #28]
 8017c42:	6878      	ldr	r0, [r7, #4]
 8017c44:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8017c46:	3708      	adds	r7, #8
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}
 8017c4c:	08024760 	.word	0x08024760
 8017c50:	08024948 	.word	0x08024948
 8017c54:	080247b0 	.word	0x080247b0

08017c58 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b082      	sub	sp, #8
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d107      	bne.n	8017c76 <netif_set_link_down+0x1e>
 8017c66:	4b11      	ldr	r3, [pc, #68]	; (8017cac <netif_set_link_down+0x54>)
 8017c68:	f240 4206 	movw	r2, #1030	; 0x406
 8017c6c:	4910      	ldr	r1, [pc, #64]	; (8017cb0 <netif_set_link_down+0x58>)
 8017c6e:	4811      	ldr	r0, [pc, #68]	; (8017cb4 <netif_set_link_down+0x5c>)
 8017c70:	f00a fb66 	bl	8022340 <iprintf>
 8017c74:	e017      	b.n	8017ca6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c7c:	f003 0304 	and.w	r3, r3, #4
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d010      	beq.n	8017ca6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c8a:	f023 0304 	bic.w	r3, r3, #4
 8017c8e:	b2da      	uxtb	r2, r3
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	69db      	ldr	r3, [r3, #28]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d003      	beq.n	8017ca6 <netif_set_link_down+0x4e>
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	69db      	ldr	r3, [r3, #28]
 8017ca2:	6878      	ldr	r0, [r7, #4]
 8017ca4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8017ca6:	3708      	adds	r7, #8
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	bd80      	pop	{r7, pc}
 8017cac:	08024760 	.word	0x08024760
 8017cb0:	0802496c 	.word	0x0802496c
 8017cb4:	080247b0 	.word	0x080247b0

08017cb8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8017cb8:	b480      	push	{r7}
 8017cba:	b083      	sub	sp, #12
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
 8017cc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d002      	beq.n	8017cce <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	683a      	ldr	r2, [r7, #0]
 8017ccc:	61da      	str	r2, [r3, #28]
  }
}
 8017cce:	bf00      	nop
 8017cd0:	370c      	adds	r7, #12
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd8:	4770      	bx	lr

08017cda <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8017cda:	b480      	push	{r7}
 8017cdc:	b085      	sub	sp, #20
 8017cde:	af00      	add	r7, sp, #0
 8017ce0:	60f8      	str	r0, [r7, #12]
 8017ce2:	60b9      	str	r1, [r7, #8]
 8017ce4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8017ce6:	f06f 030b 	mvn.w	r3, #11
}
 8017cea:	4618      	mov	r0, r3
 8017cec:	3714      	adds	r7, #20
 8017cee:	46bd      	mov	sp, r7
 8017cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf4:	4770      	bx	lr
	...

08017cf8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8017cf8:	b480      	push	{r7}
 8017cfa:	b085      	sub	sp, #20
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	4603      	mov	r3, r0
 8017d00:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8017d02:	79fb      	ldrb	r3, [r7, #7]
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d013      	beq.n	8017d30 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8017d08:	4b0d      	ldr	r3, [pc, #52]	; (8017d40 <netif_get_by_index+0x48>)
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	60fb      	str	r3, [r7, #12]
 8017d0e:	e00c      	b.n	8017d2a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017d16:	3301      	adds	r3, #1
 8017d18:	b2db      	uxtb	r3, r3
 8017d1a:	79fa      	ldrb	r2, [r7, #7]
 8017d1c:	429a      	cmp	r2, r3
 8017d1e:	d101      	bne.n	8017d24 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	e006      	b.n	8017d32 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	60fb      	str	r3, [r7, #12]
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d1ef      	bne.n	8017d10 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8017d30:	2300      	movs	r3, #0
}
 8017d32:	4618      	mov	r0, r3
 8017d34:	3714      	adds	r7, #20
 8017d36:	46bd      	mov	sp, r7
 8017d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d3c:	4770      	bx	lr
 8017d3e:	bf00      	nop
 8017d40:	2002efd8 	.word	0x2002efd8

08017d44 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b082      	sub	sp, #8
 8017d48:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8017d4a:	f009 ff81 	bl	8021c50 <sys_arch_protect>
 8017d4e:	6038      	str	r0, [r7, #0]
 8017d50:	4b0d      	ldr	r3, [pc, #52]	; (8017d88 <pbuf_free_ooseq+0x44>)
 8017d52:	2200      	movs	r2, #0
 8017d54:	701a      	strb	r2, [r3, #0]
 8017d56:	6838      	ldr	r0, [r7, #0]
 8017d58:	f009 ff88 	bl	8021c6c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8017d5c:	4b0b      	ldr	r3, [pc, #44]	; (8017d8c <pbuf_free_ooseq+0x48>)
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	607b      	str	r3, [r7, #4]
 8017d62:	e00a      	b.n	8017d7a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d003      	beq.n	8017d74 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8017d6c:	6878      	ldr	r0, [r7, #4]
 8017d6e:	f002 fc43 	bl	801a5f8 <tcp_free_ooseq>
      return;
 8017d72:	e005      	b.n	8017d80 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	68db      	ldr	r3, [r3, #12]
 8017d78:	607b      	str	r3, [r7, #4]
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d1f1      	bne.n	8017d64 <pbuf_free_ooseq+0x20>
    }
  }
}
 8017d80:	3708      	adds	r7, #8
 8017d82:	46bd      	mov	sp, r7
 8017d84:	bd80      	pop	{r7, pc}
 8017d86:	bf00      	nop
 8017d88:	2002efe1 	.word	0x2002efe1
 8017d8c:	2002eff0 	.word	0x2002eff0

08017d90 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b082      	sub	sp, #8
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8017d98:	f7ff ffd4 	bl	8017d44 <pbuf_free_ooseq>
}
 8017d9c:	bf00      	nop
 8017d9e:	3708      	adds	r7, #8
 8017da0:	46bd      	mov	sp, r7
 8017da2:	bd80      	pop	{r7, pc}

08017da4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b082      	sub	sp, #8
 8017da8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8017daa:	f009 ff51 	bl	8021c50 <sys_arch_protect>
 8017dae:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8017db0:	4b0f      	ldr	r3, [pc, #60]	; (8017df0 <pbuf_pool_is_empty+0x4c>)
 8017db2:	781b      	ldrb	r3, [r3, #0]
 8017db4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8017db6:	4b0e      	ldr	r3, [pc, #56]	; (8017df0 <pbuf_pool_is_empty+0x4c>)
 8017db8:	2201      	movs	r2, #1
 8017dba:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8017dbc:	6878      	ldr	r0, [r7, #4]
 8017dbe:	f009 ff55 	bl	8021c6c <sys_arch_unprotect>

  if (!queued) {
 8017dc2:	78fb      	ldrb	r3, [r7, #3]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d10f      	bne.n	8017de8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8017dc8:	2100      	movs	r1, #0
 8017dca:	480a      	ldr	r0, [pc, #40]	; (8017df4 <pbuf_pool_is_empty+0x50>)
 8017dcc:	f7fe fdd8 	bl	8016980 <tcpip_try_callback>
 8017dd0:	4603      	mov	r3, r0
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d008      	beq.n	8017de8 <pbuf_pool_is_empty+0x44>
 8017dd6:	f009 ff3b 	bl	8021c50 <sys_arch_protect>
 8017dda:	6078      	str	r0, [r7, #4]
 8017ddc:	4b04      	ldr	r3, [pc, #16]	; (8017df0 <pbuf_pool_is_empty+0x4c>)
 8017dde:	2200      	movs	r2, #0
 8017de0:	701a      	strb	r2, [r3, #0]
 8017de2:	6878      	ldr	r0, [r7, #4]
 8017de4:	f009 ff42 	bl	8021c6c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8017de8:	bf00      	nop
 8017dea:	3708      	adds	r7, #8
 8017dec:	46bd      	mov	sp, r7
 8017dee:	bd80      	pop	{r7, pc}
 8017df0:	2002efe1 	.word	0x2002efe1
 8017df4:	08017d91 	.word	0x08017d91

08017df8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8017df8:	b480      	push	{r7}
 8017dfa:	b085      	sub	sp, #20
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	60f8      	str	r0, [r7, #12]
 8017e00:	60b9      	str	r1, [r7, #8]
 8017e02:	4611      	mov	r1, r2
 8017e04:	461a      	mov	r2, r3
 8017e06:	460b      	mov	r3, r1
 8017e08:	80fb      	strh	r3, [r7, #6]
 8017e0a:	4613      	mov	r3, r2
 8017e0c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	2200      	movs	r2, #0
 8017e12:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	68ba      	ldr	r2, [r7, #8]
 8017e18:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	88fa      	ldrh	r2, [r7, #6]
 8017e1e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	88ba      	ldrh	r2, [r7, #4]
 8017e24:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8017e26:	8b3b      	ldrh	r3, [r7, #24]
 8017e28:	b2da      	uxtb	r2, r3
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	7f3a      	ldrb	r2, [r7, #28]
 8017e32:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	2201      	movs	r2, #1
 8017e38:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	73da      	strb	r2, [r3, #15]
}
 8017e40:	bf00      	nop
 8017e42:	3714      	adds	r7, #20
 8017e44:	46bd      	mov	sp, r7
 8017e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e4a:	4770      	bx	lr

08017e4c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	b08c      	sub	sp, #48	; 0x30
 8017e50:	af02      	add	r7, sp, #8
 8017e52:	4603      	mov	r3, r0
 8017e54:	71fb      	strb	r3, [r7, #7]
 8017e56:	460b      	mov	r3, r1
 8017e58:	80bb      	strh	r3, [r7, #4]
 8017e5a:	4613      	mov	r3, r2
 8017e5c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8017e5e:	79fb      	ldrb	r3, [r7, #7]
 8017e60:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8017e62:	887b      	ldrh	r3, [r7, #2]
 8017e64:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8017e68:	d07f      	beq.n	8017f6a <pbuf_alloc+0x11e>
 8017e6a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8017e6e:	f300 80c8 	bgt.w	8018002 <pbuf_alloc+0x1b6>
 8017e72:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8017e76:	d010      	beq.n	8017e9a <pbuf_alloc+0x4e>
 8017e78:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8017e7c:	f300 80c1 	bgt.w	8018002 <pbuf_alloc+0x1b6>
 8017e80:	2b01      	cmp	r3, #1
 8017e82:	d002      	beq.n	8017e8a <pbuf_alloc+0x3e>
 8017e84:	2b41      	cmp	r3, #65	; 0x41
 8017e86:	f040 80bc 	bne.w	8018002 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8017e8a:	887a      	ldrh	r2, [r7, #2]
 8017e8c:	88bb      	ldrh	r3, [r7, #4]
 8017e8e:	4619      	mov	r1, r3
 8017e90:	2000      	movs	r0, #0
 8017e92:	f000 f8d1 	bl	8018038 <pbuf_alloc_reference>
 8017e96:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8017e98:	e0bd      	b.n	8018016 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8017ea2:	88bb      	ldrh	r3, [r7, #4]
 8017ea4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8017ea6:	200c      	movs	r0, #12
 8017ea8:	f7ff fb9a 	bl	80175e0 <memp_malloc>
 8017eac:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8017eae:	693b      	ldr	r3, [r7, #16]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d109      	bne.n	8017ec8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8017eb4:	f7ff ff76 	bl	8017da4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8017eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d002      	beq.n	8017ec4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8017ebe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ec0:	f000 faa8 	bl	8018414 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	e0a7      	b.n	8018018 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8017ec8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017eca:	3303      	adds	r3, #3
 8017ecc:	b29b      	uxth	r3, r3
 8017ece:	f023 0303 	bic.w	r3, r3, #3
 8017ed2:	b29b      	uxth	r3, r3
 8017ed4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8017ed8:	b29b      	uxth	r3, r3
 8017eda:	8b7a      	ldrh	r2, [r7, #26]
 8017edc:	4293      	cmp	r3, r2
 8017ede:	bf28      	it	cs
 8017ee0:	4613      	movcs	r3, r2
 8017ee2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8017ee4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ee6:	3310      	adds	r3, #16
 8017ee8:	693a      	ldr	r2, [r7, #16]
 8017eea:	4413      	add	r3, r2
 8017eec:	3303      	adds	r3, #3
 8017eee:	f023 0303 	bic.w	r3, r3, #3
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	89f9      	ldrh	r1, [r7, #14]
 8017ef6:	8b7a      	ldrh	r2, [r7, #26]
 8017ef8:	2300      	movs	r3, #0
 8017efa:	9301      	str	r3, [sp, #4]
 8017efc:	887b      	ldrh	r3, [r7, #2]
 8017efe:	9300      	str	r3, [sp, #0]
 8017f00:	460b      	mov	r3, r1
 8017f02:	4601      	mov	r1, r0
 8017f04:	6938      	ldr	r0, [r7, #16]
 8017f06:	f7ff ff77 	bl	8017df8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8017f0a:	693b      	ldr	r3, [r7, #16]
 8017f0c:	685b      	ldr	r3, [r3, #4]
 8017f0e:	f003 0303 	and.w	r3, r3, #3
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d006      	beq.n	8017f24 <pbuf_alloc+0xd8>
 8017f16:	4b42      	ldr	r3, [pc, #264]	; (8018020 <pbuf_alloc+0x1d4>)
 8017f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017f1c:	4941      	ldr	r1, [pc, #260]	; (8018024 <pbuf_alloc+0x1d8>)
 8017f1e:	4842      	ldr	r0, [pc, #264]	; (8018028 <pbuf_alloc+0x1dc>)
 8017f20:	f00a fa0e 	bl	8022340 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8017f24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017f26:	3303      	adds	r3, #3
 8017f28:	f023 0303 	bic.w	r3, r3, #3
 8017f2c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8017f30:	d106      	bne.n	8017f40 <pbuf_alloc+0xf4>
 8017f32:	4b3b      	ldr	r3, [pc, #236]	; (8018020 <pbuf_alloc+0x1d4>)
 8017f34:	f44f 7281 	mov.w	r2, #258	; 0x102
 8017f38:	493c      	ldr	r1, [pc, #240]	; (801802c <pbuf_alloc+0x1e0>)
 8017f3a:	483b      	ldr	r0, [pc, #236]	; (8018028 <pbuf_alloc+0x1dc>)
 8017f3c:	f00a fa00 	bl	8022340 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8017f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d102      	bne.n	8017f4c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8017f46:	693b      	ldr	r3, [r7, #16]
 8017f48:	627b      	str	r3, [r7, #36]	; 0x24
 8017f4a:	e002      	b.n	8017f52 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8017f4c:	69fb      	ldr	r3, [r7, #28]
 8017f4e:	693a      	ldr	r2, [r7, #16]
 8017f50:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8017f52:	693b      	ldr	r3, [r7, #16]
 8017f54:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8017f56:	8b7a      	ldrh	r2, [r7, #26]
 8017f58:	89fb      	ldrh	r3, [r7, #14]
 8017f5a:	1ad3      	subs	r3, r2, r3
 8017f5c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8017f5e:	2300      	movs	r3, #0
 8017f60:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8017f62:	8b7b      	ldrh	r3, [r7, #26]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d19e      	bne.n	8017ea6 <pbuf_alloc+0x5a>
      break;
 8017f68:	e055      	b.n	8018016 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8017f6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017f6c:	3303      	adds	r3, #3
 8017f6e:	b29b      	uxth	r3, r3
 8017f70:	f023 0303 	bic.w	r3, r3, #3
 8017f74:	b29a      	uxth	r2, r3
 8017f76:	88bb      	ldrh	r3, [r7, #4]
 8017f78:	3303      	adds	r3, #3
 8017f7a:	b29b      	uxth	r3, r3
 8017f7c:	f023 0303 	bic.w	r3, r3, #3
 8017f80:	b29b      	uxth	r3, r3
 8017f82:	4413      	add	r3, r2
 8017f84:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8017f86:	8b3b      	ldrh	r3, [r7, #24]
 8017f88:	3310      	adds	r3, #16
 8017f8a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8017f8c:	8b3a      	ldrh	r2, [r7, #24]
 8017f8e:	88bb      	ldrh	r3, [r7, #4]
 8017f90:	3303      	adds	r3, #3
 8017f92:	f023 0303 	bic.w	r3, r3, #3
 8017f96:	429a      	cmp	r2, r3
 8017f98:	d306      	bcc.n	8017fa8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8017f9a:	8afa      	ldrh	r2, [r7, #22]
 8017f9c:	88bb      	ldrh	r3, [r7, #4]
 8017f9e:	3303      	adds	r3, #3
 8017fa0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8017fa4:	429a      	cmp	r2, r3
 8017fa6:	d201      	bcs.n	8017fac <pbuf_alloc+0x160>
        return NULL;
 8017fa8:	2300      	movs	r3, #0
 8017faa:	e035      	b.n	8018018 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8017fac:	8afb      	ldrh	r3, [r7, #22]
 8017fae:	4618      	mov	r0, r3
 8017fb0:	f7ff f972 	bl	8017298 <mem_malloc>
 8017fb4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8017fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d101      	bne.n	8017fc0 <pbuf_alloc+0x174>
        return NULL;
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	e02b      	b.n	8018018 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8017fc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017fc2:	3310      	adds	r3, #16
 8017fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017fc6:	4413      	add	r3, r2
 8017fc8:	3303      	adds	r3, #3
 8017fca:	f023 0303 	bic.w	r3, r3, #3
 8017fce:	4618      	mov	r0, r3
 8017fd0:	88b9      	ldrh	r1, [r7, #4]
 8017fd2:	88ba      	ldrh	r2, [r7, #4]
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	9301      	str	r3, [sp, #4]
 8017fd8:	887b      	ldrh	r3, [r7, #2]
 8017fda:	9300      	str	r3, [sp, #0]
 8017fdc:	460b      	mov	r3, r1
 8017fde:	4601      	mov	r1, r0
 8017fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017fe2:	f7ff ff09 	bl	8017df8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8017fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe8:	685b      	ldr	r3, [r3, #4]
 8017fea:	f003 0303 	and.w	r3, r3, #3
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d010      	beq.n	8018014 <pbuf_alloc+0x1c8>
 8017ff2:	4b0b      	ldr	r3, [pc, #44]	; (8018020 <pbuf_alloc+0x1d4>)
 8017ff4:	f44f 7291 	mov.w	r2, #290	; 0x122
 8017ff8:	490d      	ldr	r1, [pc, #52]	; (8018030 <pbuf_alloc+0x1e4>)
 8017ffa:	480b      	ldr	r0, [pc, #44]	; (8018028 <pbuf_alloc+0x1dc>)
 8017ffc:	f00a f9a0 	bl	8022340 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8018000:	e008      	b.n	8018014 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8018002:	4b07      	ldr	r3, [pc, #28]	; (8018020 <pbuf_alloc+0x1d4>)
 8018004:	f240 1227 	movw	r2, #295	; 0x127
 8018008:	490a      	ldr	r1, [pc, #40]	; (8018034 <pbuf_alloc+0x1e8>)
 801800a:	4807      	ldr	r0, [pc, #28]	; (8018028 <pbuf_alloc+0x1dc>)
 801800c:	f00a f998 	bl	8022340 <iprintf>
      return NULL;
 8018010:	2300      	movs	r3, #0
 8018012:	e001      	b.n	8018018 <pbuf_alloc+0x1cc>
      break;
 8018014:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8018016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018018:	4618      	mov	r0, r3
 801801a:	3728      	adds	r7, #40	; 0x28
 801801c:	46bd      	mov	sp, r7
 801801e:	bd80      	pop	{r7, pc}
 8018020:	08024990 	.word	0x08024990
 8018024:	080249c0 	.word	0x080249c0
 8018028:	080249f0 	.word	0x080249f0
 801802c:	08024a18 	.word	0x08024a18
 8018030:	08024a4c 	.word	0x08024a4c
 8018034:	08024a78 	.word	0x08024a78

08018038 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8018038:	b580      	push	{r7, lr}
 801803a:	b086      	sub	sp, #24
 801803c:	af02      	add	r7, sp, #8
 801803e:	6078      	str	r0, [r7, #4]
 8018040:	460b      	mov	r3, r1
 8018042:	807b      	strh	r3, [r7, #2]
 8018044:	4613      	mov	r3, r2
 8018046:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8018048:	883b      	ldrh	r3, [r7, #0]
 801804a:	2b41      	cmp	r3, #65	; 0x41
 801804c:	d009      	beq.n	8018062 <pbuf_alloc_reference+0x2a>
 801804e:	883b      	ldrh	r3, [r7, #0]
 8018050:	2b01      	cmp	r3, #1
 8018052:	d006      	beq.n	8018062 <pbuf_alloc_reference+0x2a>
 8018054:	4b0f      	ldr	r3, [pc, #60]	; (8018094 <pbuf_alloc_reference+0x5c>)
 8018056:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801805a:	490f      	ldr	r1, [pc, #60]	; (8018098 <pbuf_alloc_reference+0x60>)
 801805c:	480f      	ldr	r0, [pc, #60]	; (801809c <pbuf_alloc_reference+0x64>)
 801805e:	f00a f96f 	bl	8022340 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8018062:	200b      	movs	r0, #11
 8018064:	f7ff fabc 	bl	80175e0 <memp_malloc>
 8018068:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	2b00      	cmp	r3, #0
 801806e:	d101      	bne.n	8018074 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8018070:	2300      	movs	r3, #0
 8018072:	e00b      	b.n	801808c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8018074:	8879      	ldrh	r1, [r7, #2]
 8018076:	887a      	ldrh	r2, [r7, #2]
 8018078:	2300      	movs	r3, #0
 801807a:	9301      	str	r3, [sp, #4]
 801807c:	883b      	ldrh	r3, [r7, #0]
 801807e:	9300      	str	r3, [sp, #0]
 8018080:	460b      	mov	r3, r1
 8018082:	6879      	ldr	r1, [r7, #4]
 8018084:	68f8      	ldr	r0, [r7, #12]
 8018086:	f7ff feb7 	bl	8017df8 <pbuf_init_alloced_pbuf>
  return p;
 801808a:	68fb      	ldr	r3, [r7, #12]
}
 801808c:	4618      	mov	r0, r3
 801808e:	3710      	adds	r7, #16
 8018090:	46bd      	mov	sp, r7
 8018092:	bd80      	pop	{r7, pc}
 8018094:	08024990 	.word	0x08024990
 8018098:	08024a94 	.word	0x08024a94
 801809c:	080249f0 	.word	0x080249f0

080180a0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80180a0:	b580      	push	{r7, lr}
 80180a2:	b088      	sub	sp, #32
 80180a4:	af02      	add	r7, sp, #8
 80180a6:	607b      	str	r3, [r7, #4]
 80180a8:	4603      	mov	r3, r0
 80180aa:	73fb      	strb	r3, [r7, #15]
 80180ac:	460b      	mov	r3, r1
 80180ae:	81bb      	strh	r3, [r7, #12]
 80180b0:	4613      	mov	r3, r2
 80180b2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80180b4:	7bfb      	ldrb	r3, [r7, #15]
 80180b6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80180b8:	8a7b      	ldrh	r3, [r7, #18]
 80180ba:	3303      	adds	r3, #3
 80180bc:	f023 0203 	bic.w	r2, r3, #3
 80180c0:	89bb      	ldrh	r3, [r7, #12]
 80180c2:	441a      	add	r2, r3
 80180c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80180c6:	429a      	cmp	r2, r3
 80180c8:	d901      	bls.n	80180ce <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80180ca:	2300      	movs	r3, #0
 80180cc:	e018      	b.n	8018100 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80180ce:	6a3b      	ldr	r3, [r7, #32]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d007      	beq.n	80180e4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80180d4:	8a7b      	ldrh	r3, [r7, #18]
 80180d6:	3303      	adds	r3, #3
 80180d8:	f023 0303 	bic.w	r3, r3, #3
 80180dc:	6a3a      	ldr	r2, [r7, #32]
 80180de:	4413      	add	r3, r2
 80180e0:	617b      	str	r3, [r7, #20]
 80180e2:	e001      	b.n	80180e8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80180e4:	2300      	movs	r3, #0
 80180e6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80180e8:	6878      	ldr	r0, [r7, #4]
 80180ea:	89b9      	ldrh	r1, [r7, #12]
 80180ec:	89ba      	ldrh	r2, [r7, #12]
 80180ee:	2302      	movs	r3, #2
 80180f0:	9301      	str	r3, [sp, #4]
 80180f2:	897b      	ldrh	r3, [r7, #10]
 80180f4:	9300      	str	r3, [sp, #0]
 80180f6:	460b      	mov	r3, r1
 80180f8:	6979      	ldr	r1, [r7, #20]
 80180fa:	f7ff fe7d 	bl	8017df8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80180fe:	687b      	ldr	r3, [r7, #4]
}
 8018100:	4618      	mov	r0, r3
 8018102:	3718      	adds	r7, #24
 8018104:	46bd      	mov	sp, r7
 8018106:	bd80      	pop	{r7, pc}

08018108 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8018108:	b580      	push	{r7, lr}
 801810a:	b084      	sub	sp, #16
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]
 8018110:	460b      	mov	r3, r1
 8018112:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d106      	bne.n	8018128 <pbuf_realloc+0x20>
 801811a:	4b3a      	ldr	r3, [pc, #232]	; (8018204 <pbuf_realloc+0xfc>)
 801811c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8018120:	4939      	ldr	r1, [pc, #228]	; (8018208 <pbuf_realloc+0x100>)
 8018122:	483a      	ldr	r0, [pc, #232]	; (801820c <pbuf_realloc+0x104>)
 8018124:	f00a f90c 	bl	8022340 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	891b      	ldrh	r3, [r3, #8]
 801812c:	887a      	ldrh	r2, [r7, #2]
 801812e:	429a      	cmp	r2, r3
 8018130:	d263      	bcs.n	80181fa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	891a      	ldrh	r2, [r3, #8]
 8018136:	887b      	ldrh	r3, [r7, #2]
 8018138:	1ad3      	subs	r3, r2, r3
 801813a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801813c:	887b      	ldrh	r3, [r7, #2]
 801813e:	817b      	strh	r3, [r7, #10]
  q = p;
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8018144:	e018      	b.n	8018178 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	895b      	ldrh	r3, [r3, #10]
 801814a:	897a      	ldrh	r2, [r7, #10]
 801814c:	1ad3      	subs	r3, r2, r3
 801814e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	891a      	ldrh	r2, [r3, #8]
 8018154:	893b      	ldrh	r3, [r7, #8]
 8018156:	1ad3      	subs	r3, r2, r3
 8018158:	b29a      	uxth	r2, r3
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	2b00      	cmp	r3, #0
 8018168:	d106      	bne.n	8018178 <pbuf_realloc+0x70>
 801816a:	4b26      	ldr	r3, [pc, #152]	; (8018204 <pbuf_realloc+0xfc>)
 801816c:	f240 12af 	movw	r2, #431	; 0x1af
 8018170:	4927      	ldr	r1, [pc, #156]	; (8018210 <pbuf_realloc+0x108>)
 8018172:	4826      	ldr	r0, [pc, #152]	; (801820c <pbuf_realloc+0x104>)
 8018174:	f00a f8e4 	bl	8022340 <iprintf>
  while (rem_len > q->len) {
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	895b      	ldrh	r3, [r3, #10]
 801817c:	897a      	ldrh	r2, [r7, #10]
 801817e:	429a      	cmp	r2, r3
 8018180:	d8e1      	bhi.n	8018146 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	7b1b      	ldrb	r3, [r3, #12]
 8018186:	f003 030f 	and.w	r3, r3, #15
 801818a:	2b00      	cmp	r3, #0
 801818c:	d121      	bne.n	80181d2 <pbuf_realloc+0xca>
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	895b      	ldrh	r3, [r3, #10]
 8018192:	897a      	ldrh	r2, [r7, #10]
 8018194:	429a      	cmp	r2, r3
 8018196:	d01c      	beq.n	80181d2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	7b5b      	ldrb	r3, [r3, #13]
 801819c:	f003 0302 	and.w	r3, r3, #2
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d116      	bne.n	80181d2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	685a      	ldr	r2, [r3, #4]
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	1ad3      	subs	r3, r2, r3
 80181ac:	b29a      	uxth	r2, r3
 80181ae:	897b      	ldrh	r3, [r7, #10]
 80181b0:	4413      	add	r3, r2
 80181b2:	b29b      	uxth	r3, r3
 80181b4:	4619      	mov	r1, r3
 80181b6:	68f8      	ldr	r0, [r7, #12]
 80181b8:	f7fe ff64 	bl	8017084 <mem_trim>
 80181bc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d106      	bne.n	80181d2 <pbuf_realloc+0xca>
 80181c4:	4b0f      	ldr	r3, [pc, #60]	; (8018204 <pbuf_realloc+0xfc>)
 80181c6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80181ca:	4912      	ldr	r1, [pc, #72]	; (8018214 <pbuf_realloc+0x10c>)
 80181cc:	480f      	ldr	r0, [pc, #60]	; (801820c <pbuf_realloc+0x104>)
 80181ce:	f00a f8b7 	bl	8022340 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	897a      	ldrh	r2, [r7, #10]
 80181d6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80181d8:	68fb      	ldr	r3, [r7, #12]
 80181da:	895a      	ldrh	r2, [r3, #10]
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d004      	beq.n	80181f2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	4618      	mov	r0, r3
 80181ee:	f000 f911 	bl	8018414 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	2200      	movs	r2, #0
 80181f6:	601a      	str	r2, [r3, #0]
 80181f8:	e000      	b.n	80181fc <pbuf_realloc+0xf4>
    return;
 80181fa:	bf00      	nop

}
 80181fc:	3710      	adds	r7, #16
 80181fe:	46bd      	mov	sp, r7
 8018200:	bd80      	pop	{r7, pc}
 8018202:	bf00      	nop
 8018204:	08024990 	.word	0x08024990
 8018208:	08024aa8 	.word	0x08024aa8
 801820c:	080249f0 	.word	0x080249f0
 8018210:	08024ac0 	.word	0x08024ac0
 8018214:	08024ad8 	.word	0x08024ad8

08018218 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8018218:	b580      	push	{r7, lr}
 801821a:	b086      	sub	sp, #24
 801821c:	af00      	add	r7, sp, #0
 801821e:	60f8      	str	r0, [r7, #12]
 8018220:	60b9      	str	r1, [r7, #8]
 8018222:	4613      	mov	r3, r2
 8018224:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018226:	68fb      	ldr	r3, [r7, #12]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d106      	bne.n	801823a <pbuf_add_header_impl+0x22>
 801822c:	4b2b      	ldr	r3, [pc, #172]	; (80182dc <pbuf_add_header_impl+0xc4>)
 801822e:	f240 12df 	movw	r2, #479	; 0x1df
 8018232:	492b      	ldr	r1, [pc, #172]	; (80182e0 <pbuf_add_header_impl+0xc8>)
 8018234:	482b      	ldr	r0, [pc, #172]	; (80182e4 <pbuf_add_header_impl+0xcc>)
 8018236:	f00a f883 	bl	8022340 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d003      	beq.n	8018248 <pbuf_add_header_impl+0x30>
 8018240:	68bb      	ldr	r3, [r7, #8]
 8018242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018246:	d301      	bcc.n	801824c <pbuf_add_header_impl+0x34>
    return 1;
 8018248:	2301      	movs	r3, #1
 801824a:	e043      	b.n	80182d4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801824c:	68bb      	ldr	r3, [r7, #8]
 801824e:	2b00      	cmp	r3, #0
 8018250:	d101      	bne.n	8018256 <pbuf_add_header_impl+0x3e>
    return 0;
 8018252:	2300      	movs	r3, #0
 8018254:	e03e      	b.n	80182d4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8018256:	68bb      	ldr	r3, [r7, #8]
 8018258:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	891a      	ldrh	r2, [r3, #8]
 801825e:	8a7b      	ldrh	r3, [r7, #18]
 8018260:	4413      	add	r3, r2
 8018262:	b29b      	uxth	r3, r3
 8018264:	8a7a      	ldrh	r2, [r7, #18]
 8018266:	429a      	cmp	r2, r3
 8018268:	d901      	bls.n	801826e <pbuf_add_header_impl+0x56>
    return 1;
 801826a:	2301      	movs	r3, #1
 801826c:	e032      	b.n	80182d4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	7b1b      	ldrb	r3, [r3, #12]
 8018272:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8018274:	8a3b      	ldrh	r3, [r7, #16]
 8018276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801827a:	2b00      	cmp	r3, #0
 801827c:	d00c      	beq.n	8018298 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	685a      	ldr	r2, [r3, #4]
 8018282:	68bb      	ldr	r3, [r7, #8]
 8018284:	425b      	negs	r3, r3
 8018286:	4413      	add	r3, r2
 8018288:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	3310      	adds	r3, #16
 801828e:	697a      	ldr	r2, [r7, #20]
 8018290:	429a      	cmp	r2, r3
 8018292:	d20d      	bcs.n	80182b0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8018294:	2301      	movs	r3, #1
 8018296:	e01d      	b.n	80182d4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8018298:	79fb      	ldrb	r3, [r7, #7]
 801829a:	2b00      	cmp	r3, #0
 801829c:	d006      	beq.n	80182ac <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	685a      	ldr	r2, [r3, #4]
 80182a2:	68bb      	ldr	r3, [r7, #8]
 80182a4:	425b      	negs	r3, r3
 80182a6:	4413      	add	r3, r2
 80182a8:	617b      	str	r3, [r7, #20]
 80182aa:	e001      	b.n	80182b0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80182ac:	2301      	movs	r3, #1
 80182ae:	e011      	b.n	80182d4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	697a      	ldr	r2, [r7, #20]
 80182b4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	895a      	ldrh	r2, [r3, #10]
 80182ba:	8a7b      	ldrh	r3, [r7, #18]
 80182bc:	4413      	add	r3, r2
 80182be:	b29a      	uxth	r2, r3
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	891a      	ldrh	r2, [r3, #8]
 80182c8:	8a7b      	ldrh	r3, [r7, #18]
 80182ca:	4413      	add	r3, r2
 80182cc:	b29a      	uxth	r2, r3
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	811a      	strh	r2, [r3, #8]


  return 0;
 80182d2:	2300      	movs	r3, #0
}
 80182d4:	4618      	mov	r0, r3
 80182d6:	3718      	adds	r7, #24
 80182d8:	46bd      	mov	sp, r7
 80182da:	bd80      	pop	{r7, pc}
 80182dc:	08024990 	.word	0x08024990
 80182e0:	08024af4 	.word	0x08024af4
 80182e4:	080249f0 	.word	0x080249f0

080182e8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80182e8:	b580      	push	{r7, lr}
 80182ea:	b082      	sub	sp, #8
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
 80182f0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80182f2:	2200      	movs	r2, #0
 80182f4:	6839      	ldr	r1, [r7, #0]
 80182f6:	6878      	ldr	r0, [r7, #4]
 80182f8:	f7ff ff8e 	bl	8018218 <pbuf_add_header_impl>
 80182fc:	4603      	mov	r3, r0
}
 80182fe:	4618      	mov	r0, r3
 8018300:	3708      	adds	r7, #8
 8018302:	46bd      	mov	sp, r7
 8018304:	bd80      	pop	{r7, pc}
	...

08018308 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8018308:	b580      	push	{r7, lr}
 801830a:	b084      	sub	sp, #16
 801830c:	af00      	add	r7, sp, #0
 801830e:	6078      	str	r0, [r7, #4]
 8018310:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d106      	bne.n	8018326 <pbuf_remove_header+0x1e>
 8018318:	4b20      	ldr	r3, [pc, #128]	; (801839c <pbuf_remove_header+0x94>)
 801831a:	f240 224b 	movw	r2, #587	; 0x24b
 801831e:	4920      	ldr	r1, [pc, #128]	; (80183a0 <pbuf_remove_header+0x98>)
 8018320:	4820      	ldr	r0, [pc, #128]	; (80183a4 <pbuf_remove_header+0x9c>)
 8018322:	f00a f80d 	bl	8022340 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d003      	beq.n	8018334 <pbuf_remove_header+0x2c>
 801832c:	683b      	ldr	r3, [r7, #0]
 801832e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018332:	d301      	bcc.n	8018338 <pbuf_remove_header+0x30>
    return 1;
 8018334:	2301      	movs	r3, #1
 8018336:	e02c      	b.n	8018392 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8018338:	683b      	ldr	r3, [r7, #0]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d101      	bne.n	8018342 <pbuf_remove_header+0x3a>
    return 0;
 801833e:	2300      	movs	r3, #0
 8018340:	e027      	b.n	8018392 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8018342:	683b      	ldr	r3, [r7, #0]
 8018344:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	895b      	ldrh	r3, [r3, #10]
 801834a:	89fa      	ldrh	r2, [r7, #14]
 801834c:	429a      	cmp	r2, r3
 801834e:	d908      	bls.n	8018362 <pbuf_remove_header+0x5a>
 8018350:	4b12      	ldr	r3, [pc, #72]	; (801839c <pbuf_remove_header+0x94>)
 8018352:	f240 2255 	movw	r2, #597	; 0x255
 8018356:	4914      	ldr	r1, [pc, #80]	; (80183a8 <pbuf_remove_header+0xa0>)
 8018358:	4812      	ldr	r0, [pc, #72]	; (80183a4 <pbuf_remove_header+0x9c>)
 801835a:	f009 fff1 	bl	8022340 <iprintf>
 801835e:	2301      	movs	r3, #1
 8018360:	e017      	b.n	8018392 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	685b      	ldr	r3, [r3, #4]
 8018366:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	685a      	ldr	r2, [r3, #4]
 801836c:	683b      	ldr	r3, [r7, #0]
 801836e:	441a      	add	r2, r3
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	895a      	ldrh	r2, [r3, #10]
 8018378:	89fb      	ldrh	r3, [r7, #14]
 801837a:	1ad3      	subs	r3, r2, r3
 801837c:	b29a      	uxth	r2, r3
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	891a      	ldrh	r2, [r3, #8]
 8018386:	89fb      	ldrh	r3, [r7, #14]
 8018388:	1ad3      	subs	r3, r2, r3
 801838a:	b29a      	uxth	r2, r3
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8018390:	2300      	movs	r3, #0
}
 8018392:	4618      	mov	r0, r3
 8018394:	3710      	adds	r7, #16
 8018396:	46bd      	mov	sp, r7
 8018398:	bd80      	pop	{r7, pc}
 801839a:	bf00      	nop
 801839c:	08024990 	.word	0x08024990
 80183a0:	08024af4 	.word	0x08024af4
 80183a4:	080249f0 	.word	0x080249f0
 80183a8:	08024b00 	.word	0x08024b00

080183ac <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80183ac:	b580      	push	{r7, lr}
 80183ae:	b082      	sub	sp, #8
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	6078      	str	r0, [r7, #4]
 80183b4:	460b      	mov	r3, r1
 80183b6:	807b      	strh	r3, [r7, #2]
 80183b8:	4613      	mov	r3, r2
 80183ba:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80183bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	da08      	bge.n	80183d6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80183c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80183c8:	425b      	negs	r3, r3
 80183ca:	4619      	mov	r1, r3
 80183cc:	6878      	ldr	r0, [r7, #4]
 80183ce:	f7ff ff9b 	bl	8018308 <pbuf_remove_header>
 80183d2:	4603      	mov	r3, r0
 80183d4:	e007      	b.n	80183e6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80183d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80183da:	787a      	ldrb	r2, [r7, #1]
 80183dc:	4619      	mov	r1, r3
 80183de:	6878      	ldr	r0, [r7, #4]
 80183e0:	f7ff ff1a 	bl	8018218 <pbuf_add_header_impl>
 80183e4:	4603      	mov	r3, r0
  }
}
 80183e6:	4618      	mov	r0, r3
 80183e8:	3708      	adds	r7, #8
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd80      	pop	{r7, pc}

080183ee <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80183ee:	b580      	push	{r7, lr}
 80183f0:	b082      	sub	sp, #8
 80183f2:	af00      	add	r7, sp, #0
 80183f4:	6078      	str	r0, [r7, #4]
 80183f6:	460b      	mov	r3, r1
 80183f8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80183fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80183fe:	2201      	movs	r2, #1
 8018400:	4619      	mov	r1, r3
 8018402:	6878      	ldr	r0, [r7, #4]
 8018404:	f7ff ffd2 	bl	80183ac <pbuf_header_impl>
 8018408:	4603      	mov	r3, r0
}
 801840a:	4618      	mov	r0, r3
 801840c:	3708      	adds	r7, #8
 801840e:	46bd      	mov	sp, r7
 8018410:	bd80      	pop	{r7, pc}
	...

08018414 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8018414:	b580      	push	{r7, lr}
 8018416:	b088      	sub	sp, #32
 8018418:	af00      	add	r7, sp, #0
 801841a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d10b      	bne.n	801843a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	2b00      	cmp	r3, #0
 8018426:	d106      	bne.n	8018436 <pbuf_free+0x22>
 8018428:	4b3b      	ldr	r3, [pc, #236]	; (8018518 <pbuf_free+0x104>)
 801842a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801842e:	493b      	ldr	r1, [pc, #236]	; (801851c <pbuf_free+0x108>)
 8018430:	483b      	ldr	r0, [pc, #236]	; (8018520 <pbuf_free+0x10c>)
 8018432:	f009 ff85 	bl	8022340 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8018436:	2300      	movs	r3, #0
 8018438:	e069      	b.n	801850e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801843a:	2300      	movs	r3, #0
 801843c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801843e:	e062      	b.n	8018506 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8018440:	f009 fc06 	bl	8021c50 <sys_arch_protect>
 8018444:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	7b9b      	ldrb	r3, [r3, #14]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d106      	bne.n	801845c <pbuf_free+0x48>
 801844e:	4b32      	ldr	r3, [pc, #200]	; (8018518 <pbuf_free+0x104>)
 8018450:	f240 22f1 	movw	r2, #753	; 0x2f1
 8018454:	4933      	ldr	r1, [pc, #204]	; (8018524 <pbuf_free+0x110>)
 8018456:	4832      	ldr	r0, [pc, #200]	; (8018520 <pbuf_free+0x10c>)
 8018458:	f009 ff72 	bl	8022340 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	7b9b      	ldrb	r3, [r3, #14]
 8018460:	3b01      	subs	r3, #1
 8018462:	b2da      	uxtb	r2, r3
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	739a      	strb	r2, [r3, #14]
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	7b9b      	ldrb	r3, [r3, #14]
 801846c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801846e:	69b8      	ldr	r0, [r7, #24]
 8018470:	f009 fbfc 	bl	8021c6c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8018474:	7dfb      	ldrb	r3, [r7, #23]
 8018476:	2b00      	cmp	r3, #0
 8018478:	d143      	bne.n	8018502 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	7b1b      	ldrb	r3, [r3, #12]
 8018484:	f003 030f 	and.w	r3, r3, #15
 8018488:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	7b5b      	ldrb	r3, [r3, #13]
 801848e:	f003 0302 	and.w	r3, r3, #2
 8018492:	2b00      	cmp	r3, #0
 8018494:	d011      	beq.n	80184ba <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801849a:	68bb      	ldr	r3, [r7, #8]
 801849c:	691b      	ldr	r3, [r3, #16]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d106      	bne.n	80184b0 <pbuf_free+0x9c>
 80184a2:	4b1d      	ldr	r3, [pc, #116]	; (8018518 <pbuf_free+0x104>)
 80184a4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80184a8:	491f      	ldr	r1, [pc, #124]	; (8018528 <pbuf_free+0x114>)
 80184aa:	481d      	ldr	r0, [pc, #116]	; (8018520 <pbuf_free+0x10c>)
 80184ac:	f009 ff48 	bl	8022340 <iprintf>
        pc->custom_free_function(p);
 80184b0:	68bb      	ldr	r3, [r7, #8]
 80184b2:	691b      	ldr	r3, [r3, #16]
 80184b4:	6878      	ldr	r0, [r7, #4]
 80184b6:	4798      	blx	r3
 80184b8:	e01d      	b.n	80184f6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80184ba:	7bfb      	ldrb	r3, [r7, #15]
 80184bc:	2b02      	cmp	r3, #2
 80184be:	d104      	bne.n	80184ca <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80184c0:	6879      	ldr	r1, [r7, #4]
 80184c2:	200c      	movs	r0, #12
 80184c4:	f7ff f902 	bl	80176cc <memp_free>
 80184c8:	e015      	b.n	80184f6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80184ca:	7bfb      	ldrb	r3, [r7, #15]
 80184cc:	2b01      	cmp	r3, #1
 80184ce:	d104      	bne.n	80184da <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80184d0:	6879      	ldr	r1, [r7, #4]
 80184d2:	200b      	movs	r0, #11
 80184d4:	f7ff f8fa 	bl	80176cc <memp_free>
 80184d8:	e00d      	b.n	80184f6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80184da:	7bfb      	ldrb	r3, [r7, #15]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d103      	bne.n	80184e8 <pbuf_free+0xd4>
          mem_free(p);
 80184e0:	6878      	ldr	r0, [r7, #4]
 80184e2:	f7fe fd3f 	bl	8016f64 <mem_free>
 80184e6:	e006      	b.n	80184f6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80184e8:	4b0b      	ldr	r3, [pc, #44]	; (8018518 <pbuf_free+0x104>)
 80184ea:	f240 320f 	movw	r2, #783	; 0x30f
 80184ee:	490f      	ldr	r1, [pc, #60]	; (801852c <pbuf_free+0x118>)
 80184f0:	480b      	ldr	r0, [pc, #44]	; (8018520 <pbuf_free+0x10c>)
 80184f2:	f009 ff25 	bl	8022340 <iprintf>
        }
      }
      count++;
 80184f6:	7ffb      	ldrb	r3, [r7, #31]
 80184f8:	3301      	adds	r3, #1
 80184fa:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80184fc:	693b      	ldr	r3, [r7, #16]
 80184fe:	607b      	str	r3, [r7, #4]
 8018500:	e001      	b.n	8018506 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8018502:	2300      	movs	r3, #0
 8018504:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	2b00      	cmp	r3, #0
 801850a:	d199      	bne.n	8018440 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801850c:	7ffb      	ldrb	r3, [r7, #31]
}
 801850e:	4618      	mov	r0, r3
 8018510:	3720      	adds	r7, #32
 8018512:	46bd      	mov	sp, r7
 8018514:	bd80      	pop	{r7, pc}
 8018516:	bf00      	nop
 8018518:	08024990 	.word	0x08024990
 801851c:	08024af4 	.word	0x08024af4
 8018520:	080249f0 	.word	0x080249f0
 8018524:	08024b20 	.word	0x08024b20
 8018528:	08024b38 	.word	0x08024b38
 801852c:	08024b5c 	.word	0x08024b5c

08018530 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8018530:	b480      	push	{r7}
 8018532:	b085      	sub	sp, #20
 8018534:	af00      	add	r7, sp, #0
 8018536:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8018538:	2300      	movs	r3, #0
 801853a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801853c:	e005      	b.n	801854a <pbuf_clen+0x1a>
    ++len;
 801853e:	89fb      	ldrh	r3, [r7, #14]
 8018540:	3301      	adds	r3, #1
 8018542:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d1f6      	bne.n	801853e <pbuf_clen+0xe>
  }
  return len;
 8018550:	89fb      	ldrh	r3, [r7, #14]
}
 8018552:	4618      	mov	r0, r3
 8018554:	3714      	adds	r7, #20
 8018556:	46bd      	mov	sp, r7
 8018558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801855c:	4770      	bx	lr
	...

08018560 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8018560:	b580      	push	{r7, lr}
 8018562:	b084      	sub	sp, #16
 8018564:	af00      	add	r7, sp, #0
 8018566:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	2b00      	cmp	r3, #0
 801856c:	d016      	beq.n	801859c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801856e:	f009 fb6f 	bl	8021c50 <sys_arch_protect>
 8018572:	60f8      	str	r0, [r7, #12]
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	7b9b      	ldrb	r3, [r3, #14]
 8018578:	3301      	adds	r3, #1
 801857a:	b2da      	uxtb	r2, r3
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	739a      	strb	r2, [r3, #14]
 8018580:	68f8      	ldr	r0, [r7, #12]
 8018582:	f009 fb73 	bl	8021c6c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	7b9b      	ldrb	r3, [r3, #14]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d106      	bne.n	801859c <pbuf_ref+0x3c>
 801858e:	4b05      	ldr	r3, [pc, #20]	; (80185a4 <pbuf_ref+0x44>)
 8018590:	f240 3242 	movw	r2, #834	; 0x342
 8018594:	4904      	ldr	r1, [pc, #16]	; (80185a8 <pbuf_ref+0x48>)
 8018596:	4805      	ldr	r0, [pc, #20]	; (80185ac <pbuf_ref+0x4c>)
 8018598:	f009 fed2 	bl	8022340 <iprintf>
  }
}
 801859c:	bf00      	nop
 801859e:	3710      	adds	r7, #16
 80185a0:	46bd      	mov	sp, r7
 80185a2:	bd80      	pop	{r7, pc}
 80185a4:	08024990 	.word	0x08024990
 80185a8:	08024b70 	.word	0x08024b70
 80185ac:	080249f0 	.word	0x080249f0

080185b0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b084      	sub	sp, #16
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	6078      	str	r0, [r7, #4]
 80185b8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d002      	beq.n	80185c6 <pbuf_cat+0x16>
 80185c0:	683b      	ldr	r3, [r7, #0]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d107      	bne.n	80185d6 <pbuf_cat+0x26>
 80185c6:	4b20      	ldr	r3, [pc, #128]	; (8018648 <pbuf_cat+0x98>)
 80185c8:	f240 3259 	movw	r2, #857	; 0x359
 80185cc:	491f      	ldr	r1, [pc, #124]	; (801864c <pbuf_cat+0x9c>)
 80185ce:	4820      	ldr	r0, [pc, #128]	; (8018650 <pbuf_cat+0xa0>)
 80185d0:	f009 feb6 	bl	8022340 <iprintf>
 80185d4:	e034      	b.n	8018640 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	60fb      	str	r3, [r7, #12]
 80185da:	e00a      	b.n	80185f2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	891a      	ldrh	r2, [r3, #8]
 80185e0:	683b      	ldr	r3, [r7, #0]
 80185e2:	891b      	ldrh	r3, [r3, #8]
 80185e4:	4413      	add	r3, r2
 80185e6:	b29a      	uxth	r2, r3
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80185ec:	68fb      	ldr	r3, [r7, #12]
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	60fb      	str	r3, [r7, #12]
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d1f0      	bne.n	80185dc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	891a      	ldrh	r2, [r3, #8]
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	895b      	ldrh	r3, [r3, #10]
 8018602:	429a      	cmp	r2, r3
 8018604:	d006      	beq.n	8018614 <pbuf_cat+0x64>
 8018606:	4b10      	ldr	r3, [pc, #64]	; (8018648 <pbuf_cat+0x98>)
 8018608:	f240 3262 	movw	r2, #866	; 0x362
 801860c:	4911      	ldr	r1, [pc, #68]	; (8018654 <pbuf_cat+0xa4>)
 801860e:	4810      	ldr	r0, [pc, #64]	; (8018650 <pbuf_cat+0xa0>)
 8018610:	f009 fe96 	bl	8022340 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	2b00      	cmp	r3, #0
 801861a:	d006      	beq.n	801862a <pbuf_cat+0x7a>
 801861c:	4b0a      	ldr	r3, [pc, #40]	; (8018648 <pbuf_cat+0x98>)
 801861e:	f240 3263 	movw	r2, #867	; 0x363
 8018622:	490d      	ldr	r1, [pc, #52]	; (8018658 <pbuf_cat+0xa8>)
 8018624:	480a      	ldr	r0, [pc, #40]	; (8018650 <pbuf_cat+0xa0>)
 8018626:	f009 fe8b 	bl	8022340 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	891a      	ldrh	r2, [r3, #8]
 801862e:	683b      	ldr	r3, [r7, #0]
 8018630:	891b      	ldrh	r3, [r3, #8]
 8018632:	4413      	add	r3, r2
 8018634:	b29a      	uxth	r2, r3
 8018636:	68fb      	ldr	r3, [r7, #12]
 8018638:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	683a      	ldr	r2, [r7, #0]
 801863e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8018640:	3710      	adds	r7, #16
 8018642:	46bd      	mov	sp, r7
 8018644:	bd80      	pop	{r7, pc}
 8018646:	bf00      	nop
 8018648:	08024990 	.word	0x08024990
 801864c:	08024b84 	.word	0x08024b84
 8018650:	080249f0 	.word	0x080249f0
 8018654:	08024bbc 	.word	0x08024bbc
 8018658:	08024bec 	.word	0x08024bec

0801865c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801865c:	b580      	push	{r7, lr}
 801865e:	b086      	sub	sp, #24
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
 8018664:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8018666:	2300      	movs	r3, #0
 8018668:	617b      	str	r3, [r7, #20]
 801866a:	2300      	movs	r3, #0
 801866c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	2b00      	cmp	r3, #0
 8018672:	d008      	beq.n	8018686 <pbuf_copy+0x2a>
 8018674:	683b      	ldr	r3, [r7, #0]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d005      	beq.n	8018686 <pbuf_copy+0x2a>
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	891a      	ldrh	r2, [r3, #8]
 801867e:	683b      	ldr	r3, [r7, #0]
 8018680:	891b      	ldrh	r3, [r3, #8]
 8018682:	429a      	cmp	r2, r3
 8018684:	d209      	bcs.n	801869a <pbuf_copy+0x3e>
 8018686:	4b57      	ldr	r3, [pc, #348]	; (80187e4 <pbuf_copy+0x188>)
 8018688:	f240 32c9 	movw	r2, #969	; 0x3c9
 801868c:	4956      	ldr	r1, [pc, #344]	; (80187e8 <pbuf_copy+0x18c>)
 801868e:	4857      	ldr	r0, [pc, #348]	; (80187ec <pbuf_copy+0x190>)
 8018690:	f009 fe56 	bl	8022340 <iprintf>
 8018694:	f06f 030f 	mvn.w	r3, #15
 8018698:	e09f      	b.n	80187da <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	895b      	ldrh	r3, [r3, #10]
 801869e:	461a      	mov	r2, r3
 80186a0:	697b      	ldr	r3, [r7, #20]
 80186a2:	1ad2      	subs	r2, r2, r3
 80186a4:	683b      	ldr	r3, [r7, #0]
 80186a6:	895b      	ldrh	r3, [r3, #10]
 80186a8:	4619      	mov	r1, r3
 80186aa:	693b      	ldr	r3, [r7, #16]
 80186ac:	1acb      	subs	r3, r1, r3
 80186ae:	429a      	cmp	r2, r3
 80186b0:	d306      	bcc.n	80186c0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80186b2:	683b      	ldr	r3, [r7, #0]
 80186b4:	895b      	ldrh	r3, [r3, #10]
 80186b6:	461a      	mov	r2, r3
 80186b8:	693b      	ldr	r3, [r7, #16]
 80186ba:	1ad3      	subs	r3, r2, r3
 80186bc:	60fb      	str	r3, [r7, #12]
 80186be:	e005      	b.n	80186cc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	895b      	ldrh	r3, [r3, #10]
 80186c4:	461a      	mov	r2, r3
 80186c6:	697b      	ldr	r3, [r7, #20]
 80186c8:	1ad3      	subs	r3, r2, r3
 80186ca:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	685a      	ldr	r2, [r3, #4]
 80186d0:	697b      	ldr	r3, [r7, #20]
 80186d2:	18d0      	adds	r0, r2, r3
 80186d4:	683b      	ldr	r3, [r7, #0]
 80186d6:	685a      	ldr	r2, [r3, #4]
 80186d8:	693b      	ldr	r3, [r7, #16]
 80186da:	4413      	add	r3, r2
 80186dc:	68fa      	ldr	r2, [r7, #12]
 80186de:	4619      	mov	r1, r3
 80186e0:	f009 ff9f 	bl	8022622 <memcpy>
    offset_to += len;
 80186e4:	697a      	ldr	r2, [r7, #20]
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	4413      	add	r3, r2
 80186ea:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80186ec:	693a      	ldr	r2, [r7, #16]
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	4413      	add	r3, r2
 80186f2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	895b      	ldrh	r3, [r3, #10]
 80186f8:	461a      	mov	r2, r3
 80186fa:	697b      	ldr	r3, [r7, #20]
 80186fc:	4293      	cmp	r3, r2
 80186fe:	d906      	bls.n	801870e <pbuf_copy+0xb2>
 8018700:	4b38      	ldr	r3, [pc, #224]	; (80187e4 <pbuf_copy+0x188>)
 8018702:	f240 32d9 	movw	r2, #985	; 0x3d9
 8018706:	493a      	ldr	r1, [pc, #232]	; (80187f0 <pbuf_copy+0x194>)
 8018708:	4838      	ldr	r0, [pc, #224]	; (80187ec <pbuf_copy+0x190>)
 801870a:	f009 fe19 	bl	8022340 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801870e:	683b      	ldr	r3, [r7, #0]
 8018710:	895b      	ldrh	r3, [r3, #10]
 8018712:	461a      	mov	r2, r3
 8018714:	693b      	ldr	r3, [r7, #16]
 8018716:	4293      	cmp	r3, r2
 8018718:	d906      	bls.n	8018728 <pbuf_copy+0xcc>
 801871a:	4b32      	ldr	r3, [pc, #200]	; (80187e4 <pbuf_copy+0x188>)
 801871c:	f240 32da 	movw	r2, #986	; 0x3da
 8018720:	4934      	ldr	r1, [pc, #208]	; (80187f4 <pbuf_copy+0x198>)
 8018722:	4832      	ldr	r0, [pc, #200]	; (80187ec <pbuf_copy+0x190>)
 8018724:	f009 fe0c 	bl	8022340 <iprintf>
    if (offset_from >= p_from->len) {
 8018728:	683b      	ldr	r3, [r7, #0]
 801872a:	895b      	ldrh	r3, [r3, #10]
 801872c:	461a      	mov	r2, r3
 801872e:	693b      	ldr	r3, [r7, #16]
 8018730:	4293      	cmp	r3, r2
 8018732:	d304      	bcc.n	801873e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8018734:	2300      	movs	r3, #0
 8018736:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8018738:	683b      	ldr	r3, [r7, #0]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	895b      	ldrh	r3, [r3, #10]
 8018742:	461a      	mov	r2, r3
 8018744:	697b      	ldr	r3, [r7, #20]
 8018746:	4293      	cmp	r3, r2
 8018748:	d114      	bne.n	8018774 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801874a:	2300      	movs	r3, #0
 801874c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d10c      	bne.n	8018774 <pbuf_copy+0x118>
 801875a:	683b      	ldr	r3, [r7, #0]
 801875c:	2b00      	cmp	r3, #0
 801875e:	d009      	beq.n	8018774 <pbuf_copy+0x118>
 8018760:	4b20      	ldr	r3, [pc, #128]	; (80187e4 <pbuf_copy+0x188>)
 8018762:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8018766:	4924      	ldr	r1, [pc, #144]	; (80187f8 <pbuf_copy+0x19c>)
 8018768:	4820      	ldr	r0, [pc, #128]	; (80187ec <pbuf_copy+0x190>)
 801876a:	f009 fde9 	bl	8022340 <iprintf>
 801876e:	f06f 030f 	mvn.w	r3, #15
 8018772:	e032      	b.n	80187da <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8018774:	683b      	ldr	r3, [r7, #0]
 8018776:	2b00      	cmp	r3, #0
 8018778:	d013      	beq.n	80187a2 <pbuf_copy+0x146>
 801877a:	683b      	ldr	r3, [r7, #0]
 801877c:	895a      	ldrh	r2, [r3, #10]
 801877e:	683b      	ldr	r3, [r7, #0]
 8018780:	891b      	ldrh	r3, [r3, #8]
 8018782:	429a      	cmp	r2, r3
 8018784:	d10d      	bne.n	80187a2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018786:	683b      	ldr	r3, [r7, #0]
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	2b00      	cmp	r3, #0
 801878c:	d009      	beq.n	80187a2 <pbuf_copy+0x146>
 801878e:	4b15      	ldr	r3, [pc, #84]	; (80187e4 <pbuf_copy+0x188>)
 8018790:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8018794:	4919      	ldr	r1, [pc, #100]	; (80187fc <pbuf_copy+0x1a0>)
 8018796:	4815      	ldr	r0, [pc, #84]	; (80187ec <pbuf_copy+0x190>)
 8018798:	f009 fdd2 	bl	8022340 <iprintf>
 801879c:	f06f 0305 	mvn.w	r3, #5
 80187a0:	e01b      	b.n	80187da <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d013      	beq.n	80187d0 <pbuf_copy+0x174>
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	895a      	ldrh	r2, [r3, #10]
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	891b      	ldrh	r3, [r3, #8]
 80187b0:	429a      	cmp	r2, r3
 80187b2:	d10d      	bne.n	80187d0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d009      	beq.n	80187d0 <pbuf_copy+0x174>
 80187bc:	4b09      	ldr	r3, [pc, #36]	; (80187e4 <pbuf_copy+0x188>)
 80187be:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80187c2:	490e      	ldr	r1, [pc, #56]	; (80187fc <pbuf_copy+0x1a0>)
 80187c4:	4809      	ldr	r0, [pc, #36]	; (80187ec <pbuf_copy+0x190>)
 80187c6:	f009 fdbb 	bl	8022340 <iprintf>
 80187ca:	f06f 0305 	mvn.w	r3, #5
 80187ce:	e004      	b.n	80187da <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80187d0:	683b      	ldr	r3, [r7, #0]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	f47f af61 	bne.w	801869a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80187d8:	2300      	movs	r3, #0
}
 80187da:	4618      	mov	r0, r3
 80187dc:	3718      	adds	r7, #24
 80187de:	46bd      	mov	sp, r7
 80187e0:	bd80      	pop	{r7, pc}
 80187e2:	bf00      	nop
 80187e4:	08024990 	.word	0x08024990
 80187e8:	08024c38 	.word	0x08024c38
 80187ec:	080249f0 	.word	0x080249f0
 80187f0:	08024c68 	.word	0x08024c68
 80187f4:	08024c80 	.word	0x08024c80
 80187f8:	08024c9c 	.word	0x08024c9c
 80187fc:	08024cac 	.word	0x08024cac

08018800 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8018800:	b580      	push	{r7, lr}
 8018802:	b088      	sub	sp, #32
 8018804:	af00      	add	r7, sp, #0
 8018806:	60f8      	str	r0, [r7, #12]
 8018808:	60b9      	str	r1, [r7, #8]
 801880a:	4611      	mov	r1, r2
 801880c:	461a      	mov	r2, r3
 801880e:	460b      	mov	r3, r1
 8018810:	80fb      	strh	r3, [r7, #6]
 8018812:	4613      	mov	r3, r2
 8018814:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8018816:	2300      	movs	r3, #0
 8018818:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801881a:	2300      	movs	r3, #0
 801881c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d108      	bne.n	8018836 <pbuf_copy_partial+0x36>
 8018824:	4b2b      	ldr	r3, [pc, #172]	; (80188d4 <pbuf_copy_partial+0xd4>)
 8018826:	f240 420a 	movw	r2, #1034	; 0x40a
 801882a:	492b      	ldr	r1, [pc, #172]	; (80188d8 <pbuf_copy_partial+0xd8>)
 801882c:	482b      	ldr	r0, [pc, #172]	; (80188dc <pbuf_copy_partial+0xdc>)
 801882e:	f009 fd87 	bl	8022340 <iprintf>
 8018832:	2300      	movs	r3, #0
 8018834:	e04a      	b.n	80188cc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8018836:	68bb      	ldr	r3, [r7, #8]
 8018838:	2b00      	cmp	r3, #0
 801883a:	d108      	bne.n	801884e <pbuf_copy_partial+0x4e>
 801883c:	4b25      	ldr	r3, [pc, #148]	; (80188d4 <pbuf_copy_partial+0xd4>)
 801883e:	f240 420b 	movw	r2, #1035	; 0x40b
 8018842:	4927      	ldr	r1, [pc, #156]	; (80188e0 <pbuf_copy_partial+0xe0>)
 8018844:	4825      	ldr	r0, [pc, #148]	; (80188dc <pbuf_copy_partial+0xdc>)
 8018846:	f009 fd7b 	bl	8022340 <iprintf>
 801884a:	2300      	movs	r3, #0
 801884c:	e03e      	b.n	80188cc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	61fb      	str	r3, [r7, #28]
 8018852:	e034      	b.n	80188be <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8018854:	88bb      	ldrh	r3, [r7, #4]
 8018856:	2b00      	cmp	r3, #0
 8018858:	d00a      	beq.n	8018870 <pbuf_copy_partial+0x70>
 801885a:	69fb      	ldr	r3, [r7, #28]
 801885c:	895b      	ldrh	r3, [r3, #10]
 801885e:	88ba      	ldrh	r2, [r7, #4]
 8018860:	429a      	cmp	r2, r3
 8018862:	d305      	bcc.n	8018870 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8018864:	69fb      	ldr	r3, [r7, #28]
 8018866:	895b      	ldrh	r3, [r3, #10]
 8018868:	88ba      	ldrh	r2, [r7, #4]
 801886a:	1ad3      	subs	r3, r2, r3
 801886c:	80bb      	strh	r3, [r7, #4]
 801886e:	e023      	b.n	80188b8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8018870:	69fb      	ldr	r3, [r7, #28]
 8018872:	895a      	ldrh	r2, [r3, #10]
 8018874:	88bb      	ldrh	r3, [r7, #4]
 8018876:	1ad3      	subs	r3, r2, r3
 8018878:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801887a:	8b3a      	ldrh	r2, [r7, #24]
 801887c:	88fb      	ldrh	r3, [r7, #6]
 801887e:	429a      	cmp	r2, r3
 8018880:	d901      	bls.n	8018886 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8018882:	88fb      	ldrh	r3, [r7, #6]
 8018884:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8018886:	8b7b      	ldrh	r3, [r7, #26]
 8018888:	68ba      	ldr	r2, [r7, #8]
 801888a:	18d0      	adds	r0, r2, r3
 801888c:	69fb      	ldr	r3, [r7, #28]
 801888e:	685a      	ldr	r2, [r3, #4]
 8018890:	88bb      	ldrh	r3, [r7, #4]
 8018892:	4413      	add	r3, r2
 8018894:	8b3a      	ldrh	r2, [r7, #24]
 8018896:	4619      	mov	r1, r3
 8018898:	f009 fec3 	bl	8022622 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801889c:	8afa      	ldrh	r2, [r7, #22]
 801889e:	8b3b      	ldrh	r3, [r7, #24]
 80188a0:	4413      	add	r3, r2
 80188a2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80188a4:	8b7a      	ldrh	r2, [r7, #26]
 80188a6:	8b3b      	ldrh	r3, [r7, #24]
 80188a8:	4413      	add	r3, r2
 80188aa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80188ac:	88fa      	ldrh	r2, [r7, #6]
 80188ae:	8b3b      	ldrh	r3, [r7, #24]
 80188b0:	1ad3      	subs	r3, r2, r3
 80188b2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80188b4:	2300      	movs	r3, #0
 80188b6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80188b8:	69fb      	ldr	r3, [r7, #28]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	61fb      	str	r3, [r7, #28]
 80188be:	88fb      	ldrh	r3, [r7, #6]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d002      	beq.n	80188ca <pbuf_copy_partial+0xca>
 80188c4:	69fb      	ldr	r3, [r7, #28]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d1c4      	bne.n	8018854 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80188ca:	8afb      	ldrh	r3, [r7, #22]
}
 80188cc:	4618      	mov	r0, r3
 80188ce:	3720      	adds	r7, #32
 80188d0:	46bd      	mov	sp, r7
 80188d2:	bd80      	pop	{r7, pc}
 80188d4:	08024990 	.word	0x08024990
 80188d8:	08024cd8 	.word	0x08024cd8
 80188dc:	080249f0 	.word	0x080249f0
 80188e0:	08024cf8 	.word	0x08024cf8

080188e4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80188e4:	b580      	push	{r7, lr}
 80188e6:	b084      	sub	sp, #16
 80188e8:	af00      	add	r7, sp, #0
 80188ea:	4603      	mov	r3, r0
 80188ec:	603a      	str	r2, [r7, #0]
 80188ee:	71fb      	strb	r3, [r7, #7]
 80188f0:	460b      	mov	r3, r1
 80188f2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80188f4:	683b      	ldr	r3, [r7, #0]
 80188f6:	8919      	ldrh	r1, [r3, #8]
 80188f8:	88ba      	ldrh	r2, [r7, #4]
 80188fa:	79fb      	ldrb	r3, [r7, #7]
 80188fc:	4618      	mov	r0, r3
 80188fe:	f7ff faa5 	bl	8017e4c <pbuf_alloc>
 8018902:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	2b00      	cmp	r3, #0
 8018908:	d101      	bne.n	801890e <pbuf_clone+0x2a>
    return NULL;
 801890a:	2300      	movs	r3, #0
 801890c:	e011      	b.n	8018932 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801890e:	6839      	ldr	r1, [r7, #0]
 8018910:	68f8      	ldr	r0, [r7, #12]
 8018912:	f7ff fea3 	bl	801865c <pbuf_copy>
 8018916:	4603      	mov	r3, r0
 8018918:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801891a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801891e:	2b00      	cmp	r3, #0
 8018920:	d006      	beq.n	8018930 <pbuf_clone+0x4c>
 8018922:	4b06      	ldr	r3, [pc, #24]	; (801893c <pbuf_clone+0x58>)
 8018924:	f240 5224 	movw	r2, #1316	; 0x524
 8018928:	4905      	ldr	r1, [pc, #20]	; (8018940 <pbuf_clone+0x5c>)
 801892a:	4806      	ldr	r0, [pc, #24]	; (8018944 <pbuf_clone+0x60>)
 801892c:	f009 fd08 	bl	8022340 <iprintf>
  return q;
 8018930:	68fb      	ldr	r3, [r7, #12]
}
 8018932:	4618      	mov	r0, r3
 8018934:	3710      	adds	r7, #16
 8018936:	46bd      	mov	sp, r7
 8018938:	bd80      	pop	{r7, pc}
 801893a:	bf00      	nop
 801893c:	08024990 	.word	0x08024990
 8018940:	08024e04 	.word	0x08024e04
 8018944:	080249f0 	.word	0x080249f0

08018948 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8018948:	b580      	push	{r7, lr}
 801894a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801894c:	f009 fbf8 	bl	8022140 <rand>
 8018950:	4603      	mov	r3, r0
 8018952:	b29b      	uxth	r3, r3
 8018954:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018958:	b29b      	uxth	r3, r3
 801895a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801895e:	b29a      	uxth	r2, r3
 8018960:	4b01      	ldr	r3, [pc, #4]	; (8018968 <tcp_init+0x20>)
 8018962:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018964:	bf00      	nop
 8018966:	bd80      	pop	{r7, pc}
 8018968:	20000080 	.word	0x20000080

0801896c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b082      	sub	sp, #8
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	7d1b      	ldrb	r3, [r3, #20]
 8018978:	2b01      	cmp	r3, #1
 801897a:	d105      	bne.n	8018988 <tcp_free+0x1c>
 801897c:	4b06      	ldr	r3, [pc, #24]	; (8018998 <tcp_free+0x2c>)
 801897e:	22d4      	movs	r2, #212	; 0xd4
 8018980:	4906      	ldr	r1, [pc, #24]	; (801899c <tcp_free+0x30>)
 8018982:	4807      	ldr	r0, [pc, #28]	; (80189a0 <tcp_free+0x34>)
 8018984:	f009 fcdc 	bl	8022340 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8018988:	6879      	ldr	r1, [r7, #4]
 801898a:	2001      	movs	r0, #1
 801898c:	f7fe fe9e 	bl	80176cc <memp_free>
}
 8018990:	bf00      	nop
 8018992:	3708      	adds	r7, #8
 8018994:	46bd      	mov	sp, r7
 8018996:	bd80      	pop	{r7, pc}
 8018998:	08024e90 	.word	0x08024e90
 801899c:	08024ec0 	.word	0x08024ec0
 80189a0:	08024ed4 	.word	0x08024ed4

080189a4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b082      	sub	sp, #8
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	7d1b      	ldrb	r3, [r3, #20]
 80189b0:	2b01      	cmp	r3, #1
 80189b2:	d105      	bne.n	80189c0 <tcp_free_listen+0x1c>
 80189b4:	4b06      	ldr	r3, [pc, #24]	; (80189d0 <tcp_free_listen+0x2c>)
 80189b6:	22df      	movs	r2, #223	; 0xdf
 80189b8:	4906      	ldr	r1, [pc, #24]	; (80189d4 <tcp_free_listen+0x30>)
 80189ba:	4807      	ldr	r0, [pc, #28]	; (80189d8 <tcp_free_listen+0x34>)
 80189bc:	f009 fcc0 	bl	8022340 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80189c0:	6879      	ldr	r1, [r7, #4]
 80189c2:	2002      	movs	r0, #2
 80189c4:	f7fe fe82 	bl	80176cc <memp_free>
}
 80189c8:	bf00      	nop
 80189ca:	3708      	adds	r7, #8
 80189cc:	46bd      	mov	sp, r7
 80189ce:	bd80      	pop	{r7, pc}
 80189d0:	08024e90 	.word	0x08024e90
 80189d4:	08024efc 	.word	0x08024efc
 80189d8:	08024ed4 	.word	0x08024ed4

080189dc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80189e0:	f001 f8a6 	bl	8019b30 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80189e4:	4b07      	ldr	r3, [pc, #28]	; (8018a04 <tcp_tmr+0x28>)
 80189e6:	781b      	ldrb	r3, [r3, #0]
 80189e8:	3301      	adds	r3, #1
 80189ea:	b2da      	uxtb	r2, r3
 80189ec:	4b05      	ldr	r3, [pc, #20]	; (8018a04 <tcp_tmr+0x28>)
 80189ee:	701a      	strb	r2, [r3, #0]
 80189f0:	4b04      	ldr	r3, [pc, #16]	; (8018a04 <tcp_tmr+0x28>)
 80189f2:	781b      	ldrb	r3, [r3, #0]
 80189f4:	f003 0301 	and.w	r3, r3, #1
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d001      	beq.n	8018a00 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80189fc:	f000 fd58 	bl	80194b0 <tcp_slowtmr>
  }
}
 8018a00:	bf00      	nop
 8018a02:	bd80      	pop	{r7, pc}
 8018a04:	2002eff9 	.word	0x2002eff9

08018a08 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8018a08:	b580      	push	{r7, lr}
 8018a0a:	b084      	sub	sp, #16
 8018a0c:	af00      	add	r7, sp, #0
 8018a0e:	6078      	str	r0, [r7, #4]
 8018a10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8018a12:	683b      	ldr	r3, [r7, #0]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d105      	bne.n	8018a24 <tcp_remove_listener+0x1c>
 8018a18:	4b0d      	ldr	r3, [pc, #52]	; (8018a50 <tcp_remove_listener+0x48>)
 8018a1a:	22ff      	movs	r2, #255	; 0xff
 8018a1c:	490d      	ldr	r1, [pc, #52]	; (8018a54 <tcp_remove_listener+0x4c>)
 8018a1e:	480e      	ldr	r0, [pc, #56]	; (8018a58 <tcp_remove_listener+0x50>)
 8018a20:	f009 fc8e 	bl	8022340 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	60fb      	str	r3, [r7, #12]
 8018a28:	e00a      	b.n	8018a40 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018a2e:	683a      	ldr	r2, [r7, #0]
 8018a30:	429a      	cmp	r2, r3
 8018a32:	d102      	bne.n	8018a3a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	2200      	movs	r2, #0
 8018a38:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	68db      	ldr	r3, [r3, #12]
 8018a3e:	60fb      	str	r3, [r7, #12]
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d1f1      	bne.n	8018a2a <tcp_remove_listener+0x22>
    }
  }
}
 8018a46:	bf00      	nop
 8018a48:	bf00      	nop
 8018a4a:	3710      	adds	r7, #16
 8018a4c:	46bd      	mov	sp, r7
 8018a4e:	bd80      	pop	{r7, pc}
 8018a50:	08024e90 	.word	0x08024e90
 8018a54:	08024f18 	.word	0x08024f18
 8018a58:	08024ed4 	.word	0x08024ed4

08018a5c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8018a5c:	b580      	push	{r7, lr}
 8018a5e:	b084      	sub	sp, #16
 8018a60:	af00      	add	r7, sp, #0
 8018a62:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d106      	bne.n	8018a78 <tcp_listen_closed+0x1c>
 8018a6a:	4b14      	ldr	r3, [pc, #80]	; (8018abc <tcp_listen_closed+0x60>)
 8018a6c:	f240 1211 	movw	r2, #273	; 0x111
 8018a70:	4913      	ldr	r1, [pc, #76]	; (8018ac0 <tcp_listen_closed+0x64>)
 8018a72:	4814      	ldr	r0, [pc, #80]	; (8018ac4 <tcp_listen_closed+0x68>)
 8018a74:	f009 fc64 	bl	8022340 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	7d1b      	ldrb	r3, [r3, #20]
 8018a7c:	2b01      	cmp	r3, #1
 8018a7e:	d006      	beq.n	8018a8e <tcp_listen_closed+0x32>
 8018a80:	4b0e      	ldr	r3, [pc, #56]	; (8018abc <tcp_listen_closed+0x60>)
 8018a82:	f44f 7289 	mov.w	r2, #274	; 0x112
 8018a86:	4910      	ldr	r1, [pc, #64]	; (8018ac8 <tcp_listen_closed+0x6c>)
 8018a88:	480e      	ldr	r0, [pc, #56]	; (8018ac4 <tcp_listen_closed+0x68>)
 8018a8a:	f009 fc59 	bl	8022340 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018a8e:	2301      	movs	r3, #1
 8018a90:	60fb      	str	r3, [r7, #12]
 8018a92:	e00b      	b.n	8018aac <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8018a94:	4a0d      	ldr	r2, [pc, #52]	; (8018acc <tcp_listen_closed+0x70>)
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	6879      	ldr	r1, [r7, #4]
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	f7ff ffb1 	bl	8018a08 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	3301      	adds	r3, #1
 8018aaa:	60fb      	str	r3, [r7, #12]
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	2b03      	cmp	r3, #3
 8018ab0:	d9f0      	bls.n	8018a94 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8018ab2:	bf00      	nop
 8018ab4:	bf00      	nop
 8018ab6:	3710      	adds	r7, #16
 8018ab8:	46bd      	mov	sp, r7
 8018aba:	bd80      	pop	{r7, pc}
 8018abc:	08024e90 	.word	0x08024e90
 8018ac0:	08024f40 	.word	0x08024f40
 8018ac4:	08024ed4 	.word	0x08024ed4
 8018ac8:	08024f4c 	.word	0x08024f4c
 8018acc:	0802709c 	.word	0x0802709c

08018ad0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8018ad0:	b5b0      	push	{r4, r5, r7, lr}
 8018ad2:	b088      	sub	sp, #32
 8018ad4:	af04      	add	r7, sp, #16
 8018ad6:	6078      	str	r0, [r7, #4]
 8018ad8:	460b      	mov	r3, r1
 8018ada:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d106      	bne.n	8018af0 <tcp_close_shutdown+0x20>
 8018ae2:	4b63      	ldr	r3, [pc, #396]	; (8018c70 <tcp_close_shutdown+0x1a0>)
 8018ae4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8018ae8:	4962      	ldr	r1, [pc, #392]	; (8018c74 <tcp_close_shutdown+0x1a4>)
 8018aea:	4863      	ldr	r0, [pc, #396]	; (8018c78 <tcp_close_shutdown+0x1a8>)
 8018aec:	f009 fc28 	bl	8022340 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8018af0:	78fb      	ldrb	r3, [r7, #3]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d066      	beq.n	8018bc4 <tcp_close_shutdown+0xf4>
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	7d1b      	ldrb	r3, [r3, #20]
 8018afa:	2b04      	cmp	r3, #4
 8018afc:	d003      	beq.n	8018b06 <tcp_close_shutdown+0x36>
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	7d1b      	ldrb	r3, [r3, #20]
 8018b02:	2b07      	cmp	r3, #7
 8018b04:	d15e      	bne.n	8018bc4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d104      	bne.n	8018b18 <tcp_close_shutdown+0x48>
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018b12:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018b16:	d055      	beq.n	8018bc4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	8b5b      	ldrh	r3, [r3, #26]
 8018b1c:	f003 0310 	and.w	r3, r3, #16
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d106      	bne.n	8018b32 <tcp_close_shutdown+0x62>
 8018b24:	4b52      	ldr	r3, [pc, #328]	; (8018c70 <tcp_close_shutdown+0x1a0>)
 8018b26:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8018b2a:	4954      	ldr	r1, [pc, #336]	; (8018c7c <tcp_close_shutdown+0x1ac>)
 8018b2c:	4852      	ldr	r0, [pc, #328]	; (8018c78 <tcp_close_shutdown+0x1a8>)
 8018b2e:	f009 fc07 	bl	8022340 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018b3a:	687d      	ldr	r5, [r7, #4]
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	3304      	adds	r3, #4
 8018b40:	687a      	ldr	r2, [r7, #4]
 8018b42:	8ad2      	ldrh	r2, [r2, #22]
 8018b44:	6879      	ldr	r1, [r7, #4]
 8018b46:	8b09      	ldrh	r1, [r1, #24]
 8018b48:	9102      	str	r1, [sp, #8]
 8018b4a:	9201      	str	r2, [sp, #4]
 8018b4c:	9300      	str	r3, [sp, #0]
 8018b4e:	462b      	mov	r3, r5
 8018b50:	4622      	mov	r2, r4
 8018b52:	4601      	mov	r1, r0
 8018b54:	6878      	ldr	r0, [r7, #4]
 8018b56:	f005 fdbb 	bl	801e6d0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8018b5a:	6878      	ldr	r0, [r7, #4]
 8018b5c:	f001 fb98 	bl	801a290 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8018b60:	4b47      	ldr	r3, [pc, #284]	; (8018c80 <tcp_close_shutdown+0x1b0>)
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	687a      	ldr	r2, [r7, #4]
 8018b66:	429a      	cmp	r2, r3
 8018b68:	d105      	bne.n	8018b76 <tcp_close_shutdown+0xa6>
 8018b6a:	4b45      	ldr	r3, [pc, #276]	; (8018c80 <tcp_close_shutdown+0x1b0>)
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	68db      	ldr	r3, [r3, #12]
 8018b70:	4a43      	ldr	r2, [pc, #268]	; (8018c80 <tcp_close_shutdown+0x1b0>)
 8018b72:	6013      	str	r3, [r2, #0]
 8018b74:	e013      	b.n	8018b9e <tcp_close_shutdown+0xce>
 8018b76:	4b42      	ldr	r3, [pc, #264]	; (8018c80 <tcp_close_shutdown+0x1b0>)
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	60fb      	str	r3, [r7, #12]
 8018b7c:	e00c      	b.n	8018b98 <tcp_close_shutdown+0xc8>
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	68db      	ldr	r3, [r3, #12]
 8018b82:	687a      	ldr	r2, [r7, #4]
 8018b84:	429a      	cmp	r2, r3
 8018b86:	d104      	bne.n	8018b92 <tcp_close_shutdown+0xc2>
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	68da      	ldr	r2, [r3, #12]
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	60da      	str	r2, [r3, #12]
 8018b90:	e005      	b.n	8018b9e <tcp_close_shutdown+0xce>
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	68db      	ldr	r3, [r3, #12]
 8018b96:	60fb      	str	r3, [r7, #12]
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d1ef      	bne.n	8018b7e <tcp_close_shutdown+0xae>
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	2200      	movs	r2, #0
 8018ba2:	60da      	str	r2, [r3, #12]
 8018ba4:	4b37      	ldr	r3, [pc, #220]	; (8018c84 <tcp_close_shutdown+0x1b4>)
 8018ba6:	2201      	movs	r2, #1
 8018ba8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8018baa:	4b37      	ldr	r3, [pc, #220]	; (8018c88 <tcp_close_shutdown+0x1b8>)
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	687a      	ldr	r2, [r7, #4]
 8018bb0:	429a      	cmp	r2, r3
 8018bb2:	d102      	bne.n	8018bba <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8018bb4:	f004 f830 	bl	801cc18 <tcp_trigger_input_pcb_close>
 8018bb8:	e002      	b.n	8018bc0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8018bba:	6878      	ldr	r0, [r7, #4]
 8018bbc:	f7ff fed6 	bl	801896c <tcp_free>
      }
      return ERR_OK;
 8018bc0:	2300      	movs	r3, #0
 8018bc2:	e050      	b.n	8018c66 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	7d1b      	ldrb	r3, [r3, #20]
 8018bc8:	2b02      	cmp	r3, #2
 8018bca:	d03b      	beq.n	8018c44 <tcp_close_shutdown+0x174>
 8018bcc:	2b02      	cmp	r3, #2
 8018bce:	dc44      	bgt.n	8018c5a <tcp_close_shutdown+0x18a>
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d002      	beq.n	8018bda <tcp_close_shutdown+0x10a>
 8018bd4:	2b01      	cmp	r3, #1
 8018bd6:	d02a      	beq.n	8018c2e <tcp_close_shutdown+0x15e>
 8018bd8:	e03f      	b.n	8018c5a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	8adb      	ldrh	r3, [r3, #22]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d021      	beq.n	8018c26 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018be2:	4b2a      	ldr	r3, [pc, #168]	; (8018c8c <tcp_close_shutdown+0x1bc>)
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	687a      	ldr	r2, [r7, #4]
 8018be8:	429a      	cmp	r2, r3
 8018bea:	d105      	bne.n	8018bf8 <tcp_close_shutdown+0x128>
 8018bec:	4b27      	ldr	r3, [pc, #156]	; (8018c8c <tcp_close_shutdown+0x1bc>)
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	68db      	ldr	r3, [r3, #12]
 8018bf2:	4a26      	ldr	r2, [pc, #152]	; (8018c8c <tcp_close_shutdown+0x1bc>)
 8018bf4:	6013      	str	r3, [r2, #0]
 8018bf6:	e013      	b.n	8018c20 <tcp_close_shutdown+0x150>
 8018bf8:	4b24      	ldr	r3, [pc, #144]	; (8018c8c <tcp_close_shutdown+0x1bc>)
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	60bb      	str	r3, [r7, #8]
 8018bfe:	e00c      	b.n	8018c1a <tcp_close_shutdown+0x14a>
 8018c00:	68bb      	ldr	r3, [r7, #8]
 8018c02:	68db      	ldr	r3, [r3, #12]
 8018c04:	687a      	ldr	r2, [r7, #4]
 8018c06:	429a      	cmp	r2, r3
 8018c08:	d104      	bne.n	8018c14 <tcp_close_shutdown+0x144>
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	68da      	ldr	r2, [r3, #12]
 8018c0e:	68bb      	ldr	r3, [r7, #8]
 8018c10:	60da      	str	r2, [r3, #12]
 8018c12:	e005      	b.n	8018c20 <tcp_close_shutdown+0x150>
 8018c14:	68bb      	ldr	r3, [r7, #8]
 8018c16:	68db      	ldr	r3, [r3, #12]
 8018c18:	60bb      	str	r3, [r7, #8]
 8018c1a:	68bb      	ldr	r3, [r7, #8]
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d1ef      	bne.n	8018c00 <tcp_close_shutdown+0x130>
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	2200      	movs	r2, #0
 8018c24:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8018c26:	6878      	ldr	r0, [r7, #4]
 8018c28:	f7ff fea0 	bl	801896c <tcp_free>
      break;
 8018c2c:	e01a      	b.n	8018c64 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8018c2e:	6878      	ldr	r0, [r7, #4]
 8018c30:	f7ff ff14 	bl	8018a5c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8018c34:	6879      	ldr	r1, [r7, #4]
 8018c36:	4816      	ldr	r0, [pc, #88]	; (8018c90 <tcp_close_shutdown+0x1c0>)
 8018c38:	f001 fb7a 	bl	801a330 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8018c3c:	6878      	ldr	r0, [r7, #4]
 8018c3e:	f7ff feb1 	bl	80189a4 <tcp_free_listen>
      break;
 8018c42:	e00f      	b.n	8018c64 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8018c44:	6879      	ldr	r1, [r7, #4]
 8018c46:	480e      	ldr	r0, [pc, #56]	; (8018c80 <tcp_close_shutdown+0x1b0>)
 8018c48:	f001 fb72 	bl	801a330 <tcp_pcb_remove>
 8018c4c:	4b0d      	ldr	r3, [pc, #52]	; (8018c84 <tcp_close_shutdown+0x1b4>)
 8018c4e:	2201      	movs	r2, #1
 8018c50:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8018c52:	6878      	ldr	r0, [r7, #4]
 8018c54:	f7ff fe8a 	bl	801896c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8018c58:	e004      	b.n	8018c64 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8018c5a:	6878      	ldr	r0, [r7, #4]
 8018c5c:	f000 f81a 	bl	8018c94 <tcp_close_shutdown_fin>
 8018c60:	4603      	mov	r3, r0
 8018c62:	e000      	b.n	8018c66 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8018c64:	2300      	movs	r3, #0
}
 8018c66:	4618      	mov	r0, r3
 8018c68:	3710      	adds	r7, #16
 8018c6a:	46bd      	mov	sp, r7
 8018c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8018c6e:	bf00      	nop
 8018c70:	08024e90 	.word	0x08024e90
 8018c74:	08024f64 	.word	0x08024f64
 8018c78:	08024ed4 	.word	0x08024ed4
 8018c7c:	08024f84 	.word	0x08024f84
 8018c80:	2002eff0 	.word	0x2002eff0
 8018c84:	2002eff8 	.word	0x2002eff8
 8018c88:	2002f030 	.word	0x2002f030
 8018c8c:	2002efe8 	.word	0x2002efe8
 8018c90:	2002efec 	.word	0x2002efec

08018c94 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8018c94:	b580      	push	{r7, lr}
 8018c96:	b084      	sub	sp, #16
 8018c98:	af00      	add	r7, sp, #0
 8018c9a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d106      	bne.n	8018cb0 <tcp_close_shutdown_fin+0x1c>
 8018ca2:	4b2e      	ldr	r3, [pc, #184]	; (8018d5c <tcp_close_shutdown_fin+0xc8>)
 8018ca4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8018ca8:	492d      	ldr	r1, [pc, #180]	; (8018d60 <tcp_close_shutdown_fin+0xcc>)
 8018caa:	482e      	ldr	r0, [pc, #184]	; (8018d64 <tcp_close_shutdown_fin+0xd0>)
 8018cac:	f009 fb48 	bl	8022340 <iprintf>

  switch (pcb->state) {
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	7d1b      	ldrb	r3, [r3, #20]
 8018cb4:	2b07      	cmp	r3, #7
 8018cb6:	d020      	beq.n	8018cfa <tcp_close_shutdown_fin+0x66>
 8018cb8:	2b07      	cmp	r3, #7
 8018cba:	dc2b      	bgt.n	8018d14 <tcp_close_shutdown_fin+0x80>
 8018cbc:	2b03      	cmp	r3, #3
 8018cbe:	d002      	beq.n	8018cc6 <tcp_close_shutdown_fin+0x32>
 8018cc0:	2b04      	cmp	r3, #4
 8018cc2:	d00d      	beq.n	8018ce0 <tcp_close_shutdown_fin+0x4c>
 8018cc4:	e026      	b.n	8018d14 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8018cc6:	6878      	ldr	r0, [r7, #4]
 8018cc8:	f004 fe10 	bl	801d8ec <tcp_send_fin>
 8018ccc:	4603      	mov	r3, r0
 8018cce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8018cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d11f      	bne.n	8018d18 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	2205      	movs	r2, #5
 8018cdc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018cde:	e01b      	b.n	8018d18 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8018ce0:	6878      	ldr	r0, [r7, #4]
 8018ce2:	f004 fe03 	bl	801d8ec <tcp_send_fin>
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8018cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d114      	bne.n	8018d1c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	2205      	movs	r2, #5
 8018cf6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018cf8:	e010      	b.n	8018d1c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8018cfa:	6878      	ldr	r0, [r7, #4]
 8018cfc:	f004 fdf6 	bl	801d8ec <tcp_send_fin>
 8018d00:	4603      	mov	r3, r0
 8018d02:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8018d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d109      	bne.n	8018d20 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	2209      	movs	r2, #9
 8018d10:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018d12:	e005      	b.n	8018d20 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8018d14:	2300      	movs	r3, #0
 8018d16:	e01c      	b.n	8018d52 <tcp_close_shutdown_fin+0xbe>
      break;
 8018d18:	bf00      	nop
 8018d1a:	e002      	b.n	8018d22 <tcp_close_shutdown_fin+0x8e>
      break;
 8018d1c:	bf00      	nop
 8018d1e:	e000      	b.n	8018d22 <tcp_close_shutdown_fin+0x8e>
      break;
 8018d20:	bf00      	nop
  }

  if (err == ERR_OK) {
 8018d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d103      	bne.n	8018d32 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8018d2a:	6878      	ldr	r0, [r7, #4]
 8018d2c:	f004 ff1c 	bl	801db68 <tcp_output>
 8018d30:	e00d      	b.n	8018d4e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8018d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d3a:	d108      	bne.n	8018d4e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	8b5b      	ldrh	r3, [r3, #26]
 8018d40:	f043 0308 	orr.w	r3, r3, #8
 8018d44:	b29a      	uxth	r2, r3
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	e001      	b.n	8018d52 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8018d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018d52:	4618      	mov	r0, r3
 8018d54:	3710      	adds	r7, #16
 8018d56:	46bd      	mov	sp, r7
 8018d58:	bd80      	pop	{r7, pc}
 8018d5a:	bf00      	nop
 8018d5c:	08024e90 	.word	0x08024e90
 8018d60:	08024f40 	.word	0x08024f40
 8018d64:	08024ed4 	.word	0x08024ed4

08018d68 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8018d68:	b580      	push	{r7, lr}
 8018d6a:	b082      	sub	sp, #8
 8018d6c:	af00      	add	r7, sp, #0
 8018d6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d109      	bne.n	8018d8a <tcp_close+0x22>
 8018d76:	4b0f      	ldr	r3, [pc, #60]	; (8018db4 <tcp_close+0x4c>)
 8018d78:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8018d7c:	490e      	ldr	r1, [pc, #56]	; (8018db8 <tcp_close+0x50>)
 8018d7e:	480f      	ldr	r0, [pc, #60]	; (8018dbc <tcp_close+0x54>)
 8018d80:	f009 fade 	bl	8022340 <iprintf>
 8018d84:	f06f 030f 	mvn.w	r3, #15
 8018d88:	e00f      	b.n	8018daa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	7d1b      	ldrb	r3, [r3, #20]
 8018d8e:	2b01      	cmp	r3, #1
 8018d90:	d006      	beq.n	8018da0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	8b5b      	ldrh	r3, [r3, #26]
 8018d96:	f043 0310 	orr.w	r3, r3, #16
 8018d9a:	b29a      	uxth	r2, r3
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8018da0:	2101      	movs	r1, #1
 8018da2:	6878      	ldr	r0, [r7, #4]
 8018da4:	f7ff fe94 	bl	8018ad0 <tcp_close_shutdown>
 8018da8:	4603      	mov	r3, r0
}
 8018daa:	4618      	mov	r0, r3
 8018dac:	3708      	adds	r7, #8
 8018dae:	46bd      	mov	sp, r7
 8018db0:	bd80      	pop	{r7, pc}
 8018db2:	bf00      	nop
 8018db4:	08024e90 	.word	0x08024e90
 8018db8:	08024fa0 	.word	0x08024fa0
 8018dbc:	08024ed4 	.word	0x08024ed4

08018dc0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8018dc0:	b580      	push	{r7, lr}
 8018dc2:	b084      	sub	sp, #16
 8018dc4:	af00      	add	r7, sp, #0
 8018dc6:	60f8      	str	r0, [r7, #12]
 8018dc8:	60b9      	str	r1, [r7, #8]
 8018dca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d109      	bne.n	8018de6 <tcp_shutdown+0x26>
 8018dd2:	4b26      	ldr	r3, [pc, #152]	; (8018e6c <tcp_shutdown+0xac>)
 8018dd4:	f240 2207 	movw	r2, #519	; 0x207
 8018dd8:	4925      	ldr	r1, [pc, #148]	; (8018e70 <tcp_shutdown+0xb0>)
 8018dda:	4826      	ldr	r0, [pc, #152]	; (8018e74 <tcp_shutdown+0xb4>)
 8018ddc:	f009 fab0 	bl	8022340 <iprintf>
 8018de0:	f06f 030f 	mvn.w	r3, #15
 8018de4:	e03d      	b.n	8018e62 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	7d1b      	ldrb	r3, [r3, #20]
 8018dea:	2b01      	cmp	r3, #1
 8018dec:	d102      	bne.n	8018df4 <tcp_shutdown+0x34>
    return ERR_CONN;
 8018dee:	f06f 030a 	mvn.w	r3, #10
 8018df2:	e036      	b.n	8018e62 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8018df4:	68bb      	ldr	r3, [r7, #8]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d01b      	beq.n	8018e32 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	8b5b      	ldrh	r3, [r3, #26]
 8018dfe:	f043 0310 	orr.w	r3, r3, #16
 8018e02:	b29a      	uxth	r2, r3
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d005      	beq.n	8018e1a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8018e0e:	2101      	movs	r1, #1
 8018e10:	68f8      	ldr	r0, [r7, #12]
 8018e12:	f7ff fe5d 	bl	8018ad0 <tcp_close_shutdown>
 8018e16:	4603      	mov	r3, r0
 8018e18:	e023      	b.n	8018e62 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d007      	beq.n	8018e32 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8018e22:	68fb      	ldr	r3, [r7, #12]
 8018e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018e26:	4618      	mov	r0, r3
 8018e28:	f7ff faf4 	bl	8018414 <pbuf_free>
      pcb->refused_data = NULL;
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	2200      	movs	r2, #0
 8018e30:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d013      	beq.n	8018e60 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	7d1b      	ldrb	r3, [r3, #20]
 8018e3c:	2b04      	cmp	r3, #4
 8018e3e:	dc02      	bgt.n	8018e46 <tcp_shutdown+0x86>
 8018e40:	2b03      	cmp	r3, #3
 8018e42:	da02      	bge.n	8018e4a <tcp_shutdown+0x8a>
 8018e44:	e009      	b.n	8018e5a <tcp_shutdown+0x9a>
 8018e46:	2b07      	cmp	r3, #7
 8018e48:	d107      	bne.n	8018e5a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8018e4a:	68bb      	ldr	r3, [r7, #8]
 8018e4c:	b2db      	uxtb	r3, r3
 8018e4e:	4619      	mov	r1, r3
 8018e50:	68f8      	ldr	r0, [r7, #12]
 8018e52:	f7ff fe3d 	bl	8018ad0 <tcp_close_shutdown>
 8018e56:	4603      	mov	r3, r0
 8018e58:	e003      	b.n	8018e62 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8018e5a:	f06f 030a 	mvn.w	r3, #10
 8018e5e:	e000      	b.n	8018e62 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8018e60:	2300      	movs	r3, #0
}
 8018e62:	4618      	mov	r0, r3
 8018e64:	3710      	adds	r7, #16
 8018e66:	46bd      	mov	sp, r7
 8018e68:	bd80      	pop	{r7, pc}
 8018e6a:	bf00      	nop
 8018e6c:	08024e90 	.word	0x08024e90
 8018e70:	08024fb8 	.word	0x08024fb8
 8018e74:	08024ed4 	.word	0x08024ed4

08018e78 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8018e78:	b580      	push	{r7, lr}
 8018e7a:	b08e      	sub	sp, #56	; 0x38
 8018e7c:	af04      	add	r7, sp, #16
 8018e7e:	6078      	str	r0, [r7, #4]
 8018e80:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d107      	bne.n	8018e98 <tcp_abandon+0x20>
 8018e88:	4b52      	ldr	r3, [pc, #328]	; (8018fd4 <tcp_abandon+0x15c>)
 8018e8a:	f240 223d 	movw	r2, #573	; 0x23d
 8018e8e:	4952      	ldr	r1, [pc, #328]	; (8018fd8 <tcp_abandon+0x160>)
 8018e90:	4852      	ldr	r0, [pc, #328]	; (8018fdc <tcp_abandon+0x164>)
 8018e92:	f009 fa55 	bl	8022340 <iprintf>
 8018e96:	e099      	b.n	8018fcc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	7d1b      	ldrb	r3, [r3, #20]
 8018e9c:	2b01      	cmp	r3, #1
 8018e9e:	d106      	bne.n	8018eae <tcp_abandon+0x36>
 8018ea0:	4b4c      	ldr	r3, [pc, #304]	; (8018fd4 <tcp_abandon+0x15c>)
 8018ea2:	f44f 7210 	mov.w	r2, #576	; 0x240
 8018ea6:	494e      	ldr	r1, [pc, #312]	; (8018fe0 <tcp_abandon+0x168>)
 8018ea8:	484c      	ldr	r0, [pc, #304]	; (8018fdc <tcp_abandon+0x164>)
 8018eaa:	f009 fa49 	bl	8022340 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	7d1b      	ldrb	r3, [r3, #20]
 8018eb2:	2b0a      	cmp	r3, #10
 8018eb4:	d107      	bne.n	8018ec6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8018eb6:	6879      	ldr	r1, [r7, #4]
 8018eb8:	484a      	ldr	r0, [pc, #296]	; (8018fe4 <tcp_abandon+0x16c>)
 8018eba:	f001 fa39 	bl	801a330 <tcp_pcb_remove>
    tcp_free(pcb);
 8018ebe:	6878      	ldr	r0, [r7, #4]
 8018ec0:	f7ff fd54 	bl	801896c <tcp_free>
 8018ec4:	e082      	b.n	8018fcc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8018ec6:	2300      	movs	r3, #0
 8018ec8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8018eca:	2300      	movs	r3, #0
 8018ecc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ed2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ed8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018ee0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	691b      	ldr	r3, [r3, #16]
 8018ee6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	7d1b      	ldrb	r3, [r3, #20]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d126      	bne.n	8018f3e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	8adb      	ldrh	r3, [r3, #22]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d02e      	beq.n	8018f56 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018ef8:	4b3b      	ldr	r3, [pc, #236]	; (8018fe8 <tcp_abandon+0x170>)
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	687a      	ldr	r2, [r7, #4]
 8018efe:	429a      	cmp	r2, r3
 8018f00:	d105      	bne.n	8018f0e <tcp_abandon+0x96>
 8018f02:	4b39      	ldr	r3, [pc, #228]	; (8018fe8 <tcp_abandon+0x170>)
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	68db      	ldr	r3, [r3, #12]
 8018f08:	4a37      	ldr	r2, [pc, #220]	; (8018fe8 <tcp_abandon+0x170>)
 8018f0a:	6013      	str	r3, [r2, #0]
 8018f0c:	e013      	b.n	8018f36 <tcp_abandon+0xbe>
 8018f0e:	4b36      	ldr	r3, [pc, #216]	; (8018fe8 <tcp_abandon+0x170>)
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	61fb      	str	r3, [r7, #28]
 8018f14:	e00c      	b.n	8018f30 <tcp_abandon+0xb8>
 8018f16:	69fb      	ldr	r3, [r7, #28]
 8018f18:	68db      	ldr	r3, [r3, #12]
 8018f1a:	687a      	ldr	r2, [r7, #4]
 8018f1c:	429a      	cmp	r2, r3
 8018f1e:	d104      	bne.n	8018f2a <tcp_abandon+0xb2>
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	68da      	ldr	r2, [r3, #12]
 8018f24:	69fb      	ldr	r3, [r7, #28]
 8018f26:	60da      	str	r2, [r3, #12]
 8018f28:	e005      	b.n	8018f36 <tcp_abandon+0xbe>
 8018f2a:	69fb      	ldr	r3, [r7, #28]
 8018f2c:	68db      	ldr	r3, [r3, #12]
 8018f2e:	61fb      	str	r3, [r7, #28]
 8018f30:	69fb      	ldr	r3, [r7, #28]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d1ef      	bne.n	8018f16 <tcp_abandon+0x9e>
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	2200      	movs	r2, #0
 8018f3a:	60da      	str	r2, [r3, #12]
 8018f3c:	e00b      	b.n	8018f56 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8018f3e:	683b      	ldr	r3, [r7, #0]
 8018f40:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	8adb      	ldrh	r3, [r3, #22]
 8018f46:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8018f48:	6879      	ldr	r1, [r7, #4]
 8018f4a:	4828      	ldr	r0, [pc, #160]	; (8018fec <tcp_abandon+0x174>)
 8018f4c:	f001 f9f0 	bl	801a330 <tcp_pcb_remove>
 8018f50:	4b27      	ldr	r3, [pc, #156]	; (8018ff0 <tcp_abandon+0x178>)
 8018f52:	2201      	movs	r2, #1
 8018f54:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d004      	beq.n	8018f68 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f62:	4618      	mov	r0, r3
 8018f64:	f000 fec4 	bl	8019cf0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d004      	beq.n	8018f7a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f74:	4618      	mov	r0, r3
 8018f76:	f000 febb 	bl	8019cf0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d004      	beq.n	8018f8c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018f86:	4618      	mov	r0, r3
 8018f88:	f000 feb2 	bl	8019cf0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8018f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d00e      	beq.n	8018fb0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8018f92:	6879      	ldr	r1, [r7, #4]
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	3304      	adds	r3, #4
 8018f98:	687a      	ldr	r2, [r7, #4]
 8018f9a:	8b12      	ldrh	r2, [r2, #24]
 8018f9c:	9202      	str	r2, [sp, #8]
 8018f9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018fa0:	9201      	str	r2, [sp, #4]
 8018fa2:	9300      	str	r3, [sp, #0]
 8018fa4:	460b      	mov	r3, r1
 8018fa6:	697a      	ldr	r2, [r7, #20]
 8018fa8:	69b9      	ldr	r1, [r7, #24]
 8018faa:	6878      	ldr	r0, [r7, #4]
 8018fac:	f005 fb90 	bl	801e6d0 <tcp_rst>
    }
    last_state = pcb->state;
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	7d1b      	ldrb	r3, [r3, #20]
 8018fb4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8018fb6:	6878      	ldr	r0, [r7, #4]
 8018fb8:	f7ff fcd8 	bl	801896c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8018fbc:	693b      	ldr	r3, [r7, #16]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d004      	beq.n	8018fcc <tcp_abandon+0x154>
 8018fc2:	693b      	ldr	r3, [r7, #16]
 8018fc4:	f06f 010c 	mvn.w	r1, #12
 8018fc8:	68f8      	ldr	r0, [r7, #12]
 8018fca:	4798      	blx	r3
  }
}
 8018fcc:	3728      	adds	r7, #40	; 0x28
 8018fce:	46bd      	mov	sp, r7
 8018fd0:	bd80      	pop	{r7, pc}
 8018fd2:	bf00      	nop
 8018fd4:	08024e90 	.word	0x08024e90
 8018fd8:	08024fd4 	.word	0x08024fd4
 8018fdc:	08024ed4 	.word	0x08024ed4
 8018fe0:	08024ff0 	.word	0x08024ff0
 8018fe4:	2002eff4 	.word	0x2002eff4
 8018fe8:	2002efe8 	.word	0x2002efe8
 8018fec:	2002eff0 	.word	0x2002eff0
 8018ff0:	2002eff8 	.word	0x2002eff8

08018ff4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b082      	sub	sp, #8
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8018ffc:	2101      	movs	r1, #1
 8018ffe:	6878      	ldr	r0, [r7, #4]
 8019000:	f7ff ff3a 	bl	8018e78 <tcp_abandon>
}
 8019004:	bf00      	nop
 8019006:	3708      	adds	r7, #8
 8019008:	46bd      	mov	sp, r7
 801900a:	bd80      	pop	{r7, pc}

0801900c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801900c:	b580      	push	{r7, lr}
 801900e:	b088      	sub	sp, #32
 8019010:	af00      	add	r7, sp, #0
 8019012:	60f8      	str	r0, [r7, #12]
 8019014:	60b9      	str	r1, [r7, #8]
 8019016:	4613      	mov	r3, r2
 8019018:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801901a:	2304      	movs	r3, #4
 801901c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801901e:	68bb      	ldr	r3, [r7, #8]
 8019020:	2b00      	cmp	r3, #0
 8019022:	d101      	bne.n	8019028 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8019024:	4b3e      	ldr	r3, [pc, #248]	; (8019120 <tcp_bind+0x114>)
 8019026:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	2b00      	cmp	r3, #0
 801902c:	d109      	bne.n	8019042 <tcp_bind+0x36>
 801902e:	4b3d      	ldr	r3, [pc, #244]	; (8019124 <tcp_bind+0x118>)
 8019030:	f240 22a9 	movw	r2, #681	; 0x2a9
 8019034:	493c      	ldr	r1, [pc, #240]	; (8019128 <tcp_bind+0x11c>)
 8019036:	483d      	ldr	r0, [pc, #244]	; (801912c <tcp_bind+0x120>)
 8019038:	f009 f982 	bl	8022340 <iprintf>
 801903c:	f06f 030f 	mvn.w	r3, #15
 8019040:	e06a      	b.n	8019118 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	7d1b      	ldrb	r3, [r3, #20]
 8019046:	2b00      	cmp	r3, #0
 8019048:	d009      	beq.n	801905e <tcp_bind+0x52>
 801904a:	4b36      	ldr	r3, [pc, #216]	; (8019124 <tcp_bind+0x118>)
 801904c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019050:	4937      	ldr	r1, [pc, #220]	; (8019130 <tcp_bind+0x124>)
 8019052:	4836      	ldr	r0, [pc, #216]	; (801912c <tcp_bind+0x120>)
 8019054:	f009 f974 	bl	8022340 <iprintf>
 8019058:	f06f 0305 	mvn.w	r3, #5
 801905c:	e05c      	b.n	8019118 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801905e:	88fb      	ldrh	r3, [r7, #6]
 8019060:	2b00      	cmp	r3, #0
 8019062:	d109      	bne.n	8019078 <tcp_bind+0x6c>
    port = tcp_new_port();
 8019064:	f000 f9de 	bl	8019424 <tcp_new_port>
 8019068:	4603      	mov	r3, r0
 801906a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801906c:	88fb      	ldrh	r3, [r7, #6]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d135      	bne.n	80190de <tcp_bind+0xd2>
      return ERR_BUF;
 8019072:	f06f 0301 	mvn.w	r3, #1
 8019076:	e04f      	b.n	8019118 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8019078:	2300      	movs	r3, #0
 801907a:	61fb      	str	r3, [r7, #28]
 801907c:	e02b      	b.n	80190d6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801907e:	4a2d      	ldr	r2, [pc, #180]	; (8019134 <tcp_bind+0x128>)
 8019080:	69fb      	ldr	r3, [r7, #28]
 8019082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	61bb      	str	r3, [r7, #24]
 801908a:	e01e      	b.n	80190ca <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801908c:	69bb      	ldr	r3, [r7, #24]
 801908e:	8adb      	ldrh	r3, [r3, #22]
 8019090:	88fa      	ldrh	r2, [r7, #6]
 8019092:	429a      	cmp	r2, r3
 8019094:	d116      	bne.n	80190c4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8019096:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8019098:	2b00      	cmp	r3, #0
 801909a:	d010      	beq.n	80190be <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801909c:	69bb      	ldr	r3, [r7, #24]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d00c      	beq.n	80190be <tcp_bind+0xb2>
 80190a4:	68bb      	ldr	r3, [r7, #8]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d009      	beq.n	80190be <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80190aa:	68bb      	ldr	r3, [r7, #8]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d005      	beq.n	80190be <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80190b2:	69bb      	ldr	r3, [r7, #24]
 80190b4:	681a      	ldr	r2, [r3, #0]
 80190b6:	68bb      	ldr	r3, [r7, #8]
 80190b8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80190ba:	429a      	cmp	r2, r3
 80190bc:	d102      	bne.n	80190c4 <tcp_bind+0xb8>
              return ERR_USE;
 80190be:	f06f 0307 	mvn.w	r3, #7
 80190c2:	e029      	b.n	8019118 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80190c4:	69bb      	ldr	r3, [r7, #24]
 80190c6:	68db      	ldr	r3, [r3, #12]
 80190c8:	61bb      	str	r3, [r7, #24]
 80190ca:	69bb      	ldr	r3, [r7, #24]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d1dd      	bne.n	801908c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80190d0:	69fb      	ldr	r3, [r7, #28]
 80190d2:	3301      	adds	r3, #1
 80190d4:	61fb      	str	r3, [r7, #28]
 80190d6:	69fa      	ldr	r2, [r7, #28]
 80190d8:	697b      	ldr	r3, [r7, #20]
 80190da:	429a      	cmp	r2, r3
 80190dc:	dbcf      	blt.n	801907e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80190de:	68bb      	ldr	r3, [r7, #8]
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d00c      	beq.n	80190fe <tcp_bind+0xf2>
 80190e4:	68bb      	ldr	r3, [r7, #8]
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d008      	beq.n	80190fe <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80190ec:	68bb      	ldr	r3, [r7, #8]
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d002      	beq.n	80190f8 <tcp_bind+0xec>
 80190f2:	68bb      	ldr	r3, [r7, #8]
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	e000      	b.n	80190fa <tcp_bind+0xee>
 80190f8:	2300      	movs	r3, #0
 80190fa:	68fa      	ldr	r2, [r7, #12]
 80190fc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	88fa      	ldrh	r2, [r7, #6]
 8019102:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8019104:	4b0c      	ldr	r3, [pc, #48]	; (8019138 <tcp_bind+0x12c>)
 8019106:	681a      	ldr	r2, [r3, #0]
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	60da      	str	r2, [r3, #12]
 801910c:	4a0a      	ldr	r2, [pc, #40]	; (8019138 <tcp_bind+0x12c>)
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	6013      	str	r3, [r2, #0]
 8019112:	f005 fc9f 	bl	801ea54 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8019116:	2300      	movs	r3, #0
}
 8019118:	4618      	mov	r0, r3
 801911a:	3720      	adds	r7, #32
 801911c:	46bd      	mov	sp, r7
 801911e:	bd80      	pop	{r7, pc}
 8019120:	080270c4 	.word	0x080270c4
 8019124:	08024e90 	.word	0x08024e90
 8019128:	08025024 	.word	0x08025024
 801912c:	08024ed4 	.word	0x08024ed4
 8019130:	0802503c 	.word	0x0802503c
 8019134:	0802709c 	.word	0x0802709c
 8019138:	2002efe8 	.word	0x2002efe8

0801913c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801913c:	b580      	push	{r7, lr}
 801913e:	b084      	sub	sp, #16
 8019140:	af00      	add	r7, sp, #0
 8019142:	60f8      	str	r0, [r7, #12]
 8019144:	60b9      	str	r1, [r7, #8]
 8019146:	4613      	mov	r3, r2
 8019148:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801914a:	68bb      	ldr	r3, [r7, #8]
 801914c:	2b00      	cmp	r3, #0
 801914e:	d106      	bne.n	801915e <tcp_accept_null+0x22>
 8019150:	4b07      	ldr	r3, [pc, #28]	; (8019170 <tcp_accept_null+0x34>)
 8019152:	f240 320f 	movw	r2, #783	; 0x30f
 8019156:	4907      	ldr	r1, [pc, #28]	; (8019174 <tcp_accept_null+0x38>)
 8019158:	4807      	ldr	r0, [pc, #28]	; (8019178 <tcp_accept_null+0x3c>)
 801915a:	f009 f8f1 	bl	8022340 <iprintf>

  tcp_abort(pcb);
 801915e:	68b8      	ldr	r0, [r7, #8]
 8019160:	f7ff ff48 	bl	8018ff4 <tcp_abort>

  return ERR_ABRT;
 8019164:	f06f 030c 	mvn.w	r3, #12
}
 8019168:	4618      	mov	r0, r3
 801916a:	3710      	adds	r7, #16
 801916c:	46bd      	mov	sp, r7
 801916e:	bd80      	pop	{r7, pc}
 8019170:	08024e90 	.word	0x08024e90
 8019174:	08025064 	.word	0x08025064
 8019178:	08024ed4 	.word	0x08024ed4

0801917c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801917c:	b580      	push	{r7, lr}
 801917e:	b088      	sub	sp, #32
 8019180:	af00      	add	r7, sp, #0
 8019182:	60f8      	str	r0, [r7, #12]
 8019184:	460b      	mov	r3, r1
 8019186:	607a      	str	r2, [r7, #4]
 8019188:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801918a:	2300      	movs	r3, #0
 801918c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d109      	bne.n	80191a8 <tcp_listen_with_backlog_and_err+0x2c>
 8019194:	4b47      	ldr	r3, [pc, #284]	; (80192b4 <tcp_listen_with_backlog_and_err+0x138>)
 8019196:	f240 3259 	movw	r2, #857	; 0x359
 801919a:	4947      	ldr	r1, [pc, #284]	; (80192b8 <tcp_listen_with_backlog_and_err+0x13c>)
 801919c:	4847      	ldr	r0, [pc, #284]	; (80192bc <tcp_listen_with_backlog_and_err+0x140>)
 801919e:	f009 f8cf 	bl	8022340 <iprintf>
 80191a2:	23f0      	movs	r3, #240	; 0xf0
 80191a4:	76fb      	strb	r3, [r7, #27]
 80191a6:	e079      	b.n	801929c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	7d1b      	ldrb	r3, [r3, #20]
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d009      	beq.n	80191c4 <tcp_listen_with_backlog_and_err+0x48>
 80191b0:	4b40      	ldr	r3, [pc, #256]	; (80192b4 <tcp_listen_with_backlog_and_err+0x138>)
 80191b2:	f240 325a 	movw	r2, #858	; 0x35a
 80191b6:	4942      	ldr	r1, [pc, #264]	; (80192c0 <tcp_listen_with_backlog_and_err+0x144>)
 80191b8:	4840      	ldr	r0, [pc, #256]	; (80192bc <tcp_listen_with_backlog_and_err+0x140>)
 80191ba:	f009 f8c1 	bl	8022340 <iprintf>
 80191be:	23f1      	movs	r3, #241	; 0xf1
 80191c0:	76fb      	strb	r3, [r7, #27]
 80191c2:	e06b      	b.n	801929c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	7d1b      	ldrb	r3, [r3, #20]
 80191c8:	2b01      	cmp	r3, #1
 80191ca:	d104      	bne.n	80191d6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80191d0:	23f7      	movs	r3, #247	; 0xf7
 80191d2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80191d4:	e062      	b.n	801929c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80191d6:	2002      	movs	r0, #2
 80191d8:	f7fe fa02 	bl	80175e0 <memp_malloc>
 80191dc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80191de:	69fb      	ldr	r3, [r7, #28]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d102      	bne.n	80191ea <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80191e4:	23ff      	movs	r3, #255	; 0xff
 80191e6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80191e8:	e058      	b.n	801929c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	691a      	ldr	r2, [r3, #16]
 80191ee:	69fb      	ldr	r3, [r7, #28]
 80191f0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	8ada      	ldrh	r2, [r3, #22]
 80191f6:	69fb      	ldr	r3, [r7, #28]
 80191f8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80191fa:	69fb      	ldr	r3, [r7, #28]
 80191fc:	2201      	movs	r2, #1
 80191fe:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8019200:	68fb      	ldr	r3, [r7, #12]
 8019202:	7d5a      	ldrb	r2, [r3, #21]
 8019204:	69fb      	ldr	r3, [r7, #28]
 8019206:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	7a5a      	ldrb	r2, [r3, #9]
 801920c:	69fb      	ldr	r3, [r7, #28]
 801920e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8019210:	69fb      	ldr	r3, [r7, #28]
 8019212:	2200      	movs	r2, #0
 8019214:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	7ada      	ldrb	r2, [r3, #11]
 801921a:	69fb      	ldr	r3, [r7, #28]
 801921c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	7a9a      	ldrb	r2, [r3, #10]
 8019222:	69fb      	ldr	r3, [r7, #28]
 8019224:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	681a      	ldr	r2, [r3, #0]
 801922a:	69fb      	ldr	r3, [r7, #28]
 801922c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	8adb      	ldrh	r3, [r3, #22]
 8019232:	2b00      	cmp	r3, #0
 8019234:	d021      	beq.n	801927a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8019236:	4b23      	ldr	r3, [pc, #140]	; (80192c4 <tcp_listen_with_backlog_and_err+0x148>)
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	68fa      	ldr	r2, [r7, #12]
 801923c:	429a      	cmp	r2, r3
 801923e:	d105      	bne.n	801924c <tcp_listen_with_backlog_and_err+0xd0>
 8019240:	4b20      	ldr	r3, [pc, #128]	; (80192c4 <tcp_listen_with_backlog_and_err+0x148>)
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	68db      	ldr	r3, [r3, #12]
 8019246:	4a1f      	ldr	r2, [pc, #124]	; (80192c4 <tcp_listen_with_backlog_and_err+0x148>)
 8019248:	6013      	str	r3, [r2, #0]
 801924a:	e013      	b.n	8019274 <tcp_listen_with_backlog_and_err+0xf8>
 801924c:	4b1d      	ldr	r3, [pc, #116]	; (80192c4 <tcp_listen_with_backlog_and_err+0x148>)
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	617b      	str	r3, [r7, #20]
 8019252:	e00c      	b.n	801926e <tcp_listen_with_backlog_and_err+0xf2>
 8019254:	697b      	ldr	r3, [r7, #20]
 8019256:	68db      	ldr	r3, [r3, #12]
 8019258:	68fa      	ldr	r2, [r7, #12]
 801925a:	429a      	cmp	r2, r3
 801925c:	d104      	bne.n	8019268 <tcp_listen_with_backlog_and_err+0xec>
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	68da      	ldr	r2, [r3, #12]
 8019262:	697b      	ldr	r3, [r7, #20]
 8019264:	60da      	str	r2, [r3, #12]
 8019266:	e005      	b.n	8019274 <tcp_listen_with_backlog_and_err+0xf8>
 8019268:	697b      	ldr	r3, [r7, #20]
 801926a:	68db      	ldr	r3, [r3, #12]
 801926c:	617b      	str	r3, [r7, #20]
 801926e:	697b      	ldr	r3, [r7, #20]
 8019270:	2b00      	cmp	r3, #0
 8019272:	d1ef      	bne.n	8019254 <tcp_listen_with_backlog_and_err+0xd8>
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	2200      	movs	r2, #0
 8019278:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801927a:	68f8      	ldr	r0, [r7, #12]
 801927c:	f7ff fb76 	bl	801896c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8019280:	69fb      	ldr	r3, [r7, #28]
 8019282:	4a11      	ldr	r2, [pc, #68]	; (80192c8 <tcp_listen_with_backlog_and_err+0x14c>)
 8019284:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8019286:	4b11      	ldr	r3, [pc, #68]	; (80192cc <tcp_listen_with_backlog_and_err+0x150>)
 8019288:	681a      	ldr	r2, [r3, #0]
 801928a:	69fb      	ldr	r3, [r7, #28]
 801928c:	60da      	str	r2, [r3, #12]
 801928e:	4a0f      	ldr	r2, [pc, #60]	; (80192cc <tcp_listen_with_backlog_and_err+0x150>)
 8019290:	69fb      	ldr	r3, [r7, #28]
 8019292:	6013      	str	r3, [r2, #0]
 8019294:	f005 fbde 	bl	801ea54 <tcp_timer_needed>
  res = ERR_OK;
 8019298:	2300      	movs	r3, #0
 801929a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d002      	beq.n	80192a8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	7efa      	ldrb	r2, [r7, #27]
 80192a6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80192a8:	69fb      	ldr	r3, [r7, #28]
}
 80192aa:	4618      	mov	r0, r3
 80192ac:	3720      	adds	r7, #32
 80192ae:	46bd      	mov	sp, r7
 80192b0:	bd80      	pop	{r7, pc}
 80192b2:	bf00      	nop
 80192b4:	08024e90 	.word	0x08024e90
 80192b8:	08025084 	.word	0x08025084
 80192bc:	08024ed4 	.word	0x08024ed4
 80192c0:	080250b4 	.word	0x080250b4
 80192c4:	2002efe8 	.word	0x2002efe8
 80192c8:	0801913d 	.word	0x0801913d
 80192cc:	2002efec 	.word	0x2002efec

080192d0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80192d0:	b580      	push	{r7, lr}
 80192d2:	b084      	sub	sp, #16
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d106      	bne.n	80192ec <tcp_update_rcv_ann_wnd+0x1c>
 80192de:	4b25      	ldr	r3, [pc, #148]	; (8019374 <tcp_update_rcv_ann_wnd+0xa4>)
 80192e0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80192e4:	4924      	ldr	r1, [pc, #144]	; (8019378 <tcp_update_rcv_ann_wnd+0xa8>)
 80192e6:	4825      	ldr	r0, [pc, #148]	; (801937c <tcp_update_rcv_ann_wnd+0xac>)
 80192e8:	f009 f82a 	bl	8022340 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192f0:	687a      	ldr	r2, [r7, #4]
 80192f2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80192f4:	4413      	add	r3, r2
 80192f6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192fc:	687a      	ldr	r2, [r7, #4]
 80192fe:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8019300:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8019304:	bf28      	it	cs
 8019306:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801930a:	b292      	uxth	r2, r2
 801930c:	4413      	add	r3, r2
 801930e:	68fa      	ldr	r2, [r7, #12]
 8019310:	1ad3      	subs	r3, r2, r3
 8019312:	2b00      	cmp	r3, #0
 8019314:	db08      	blt.n	8019328 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019322:	68fa      	ldr	r2, [r7, #12]
 8019324:	1ad3      	subs	r3, r2, r3
 8019326:	e020      	b.n	801936a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019330:	1ad3      	subs	r3, r2, r3
 8019332:	2b00      	cmp	r3, #0
 8019334:	dd03      	ble.n	801933e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	2200      	movs	r2, #0
 801933a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801933c:	e014      	b.n	8019368 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019346:	1ad3      	subs	r3, r2, r3
 8019348:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801934a:	68bb      	ldr	r3, [r7, #8]
 801934c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019350:	d306      	bcc.n	8019360 <tcp_update_rcv_ann_wnd+0x90>
 8019352:	4b08      	ldr	r3, [pc, #32]	; (8019374 <tcp_update_rcv_ann_wnd+0xa4>)
 8019354:	f240 32b6 	movw	r2, #950	; 0x3b6
 8019358:	4909      	ldr	r1, [pc, #36]	; (8019380 <tcp_update_rcv_ann_wnd+0xb0>)
 801935a:	4808      	ldr	r0, [pc, #32]	; (801937c <tcp_update_rcv_ann_wnd+0xac>)
 801935c:	f008 fff0 	bl	8022340 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8019360:	68bb      	ldr	r3, [r7, #8]
 8019362:	b29a      	uxth	r2, r3
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8019368:	2300      	movs	r3, #0
  }
}
 801936a:	4618      	mov	r0, r3
 801936c:	3710      	adds	r7, #16
 801936e:	46bd      	mov	sp, r7
 8019370:	bd80      	pop	{r7, pc}
 8019372:	bf00      	nop
 8019374:	08024e90 	.word	0x08024e90
 8019378:	080250ec 	.word	0x080250ec
 801937c:	08024ed4 	.word	0x08024ed4
 8019380:	08025110 	.word	0x08025110

08019384 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8019384:	b580      	push	{r7, lr}
 8019386:	b084      	sub	sp, #16
 8019388:	af00      	add	r7, sp, #0
 801938a:	6078      	str	r0, [r7, #4]
 801938c:	460b      	mov	r3, r1
 801938e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	2b00      	cmp	r3, #0
 8019394:	d107      	bne.n	80193a6 <tcp_recved+0x22>
 8019396:	4b1f      	ldr	r3, [pc, #124]	; (8019414 <tcp_recved+0x90>)
 8019398:	f240 32cf 	movw	r2, #975	; 0x3cf
 801939c:	491e      	ldr	r1, [pc, #120]	; (8019418 <tcp_recved+0x94>)
 801939e:	481f      	ldr	r0, [pc, #124]	; (801941c <tcp_recved+0x98>)
 80193a0:	f008 ffce 	bl	8022340 <iprintf>
 80193a4:	e032      	b.n	801940c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	7d1b      	ldrb	r3, [r3, #20]
 80193aa:	2b01      	cmp	r3, #1
 80193ac:	d106      	bne.n	80193bc <tcp_recved+0x38>
 80193ae:	4b19      	ldr	r3, [pc, #100]	; (8019414 <tcp_recved+0x90>)
 80193b0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80193b4:	491a      	ldr	r1, [pc, #104]	; (8019420 <tcp_recved+0x9c>)
 80193b6:	4819      	ldr	r0, [pc, #100]	; (801941c <tcp_recved+0x98>)
 80193b8:	f008 ffc2 	bl	8022340 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80193c0:	887b      	ldrh	r3, [r7, #2]
 80193c2:	4413      	add	r3, r2
 80193c4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80193c6:	89fb      	ldrh	r3, [r7, #14]
 80193c8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80193cc:	d804      	bhi.n	80193d8 <tcp_recved+0x54>
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80193d2:	89fa      	ldrh	r2, [r7, #14]
 80193d4:	429a      	cmp	r2, r3
 80193d6:	d204      	bcs.n	80193e2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80193de:	851a      	strh	r2, [r3, #40]	; 0x28
 80193e0:	e002      	b.n	80193e8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	89fa      	ldrh	r2, [r7, #14]
 80193e6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80193e8:	6878      	ldr	r0, [r7, #4]
 80193ea:	f7ff ff71 	bl	80192d0 <tcp_update_rcv_ann_wnd>
 80193ee:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80193f0:	68bb      	ldr	r3, [r7, #8]
 80193f2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80193f6:	d309      	bcc.n	801940c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	8b5b      	ldrh	r3, [r3, #26]
 80193fc:	f043 0302 	orr.w	r3, r3, #2
 8019400:	b29a      	uxth	r2, r3
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8019406:	6878      	ldr	r0, [r7, #4]
 8019408:	f004 fbae 	bl	801db68 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801940c:	3710      	adds	r7, #16
 801940e:	46bd      	mov	sp, r7
 8019410:	bd80      	pop	{r7, pc}
 8019412:	bf00      	nop
 8019414:	08024e90 	.word	0x08024e90
 8019418:	0802512c 	.word	0x0802512c
 801941c:	08024ed4 	.word	0x08024ed4
 8019420:	08025144 	.word	0x08025144

08019424 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8019424:	b480      	push	{r7}
 8019426:	b083      	sub	sp, #12
 8019428:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801942a:	2300      	movs	r3, #0
 801942c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801942e:	4b1e      	ldr	r3, [pc, #120]	; (80194a8 <tcp_new_port+0x84>)
 8019430:	881b      	ldrh	r3, [r3, #0]
 8019432:	3301      	adds	r3, #1
 8019434:	b29a      	uxth	r2, r3
 8019436:	4b1c      	ldr	r3, [pc, #112]	; (80194a8 <tcp_new_port+0x84>)
 8019438:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801943a:	4b1b      	ldr	r3, [pc, #108]	; (80194a8 <tcp_new_port+0x84>)
 801943c:	881b      	ldrh	r3, [r3, #0]
 801943e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019442:	4293      	cmp	r3, r2
 8019444:	d103      	bne.n	801944e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8019446:	4b18      	ldr	r3, [pc, #96]	; (80194a8 <tcp_new_port+0x84>)
 8019448:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801944c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801944e:	2300      	movs	r3, #0
 8019450:	71fb      	strb	r3, [r7, #7]
 8019452:	e01e      	b.n	8019492 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019454:	79fb      	ldrb	r3, [r7, #7]
 8019456:	4a15      	ldr	r2, [pc, #84]	; (80194ac <tcp_new_port+0x88>)
 8019458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	603b      	str	r3, [r7, #0]
 8019460:	e011      	b.n	8019486 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8019462:	683b      	ldr	r3, [r7, #0]
 8019464:	8ada      	ldrh	r2, [r3, #22]
 8019466:	4b10      	ldr	r3, [pc, #64]	; (80194a8 <tcp_new_port+0x84>)
 8019468:	881b      	ldrh	r3, [r3, #0]
 801946a:	429a      	cmp	r2, r3
 801946c:	d108      	bne.n	8019480 <tcp_new_port+0x5c>
        n++;
 801946e:	88bb      	ldrh	r3, [r7, #4]
 8019470:	3301      	adds	r3, #1
 8019472:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8019474:	88bb      	ldrh	r3, [r7, #4]
 8019476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801947a:	d3d8      	bcc.n	801942e <tcp_new_port+0xa>
          return 0;
 801947c:	2300      	movs	r3, #0
 801947e:	e00d      	b.n	801949c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019480:	683b      	ldr	r3, [r7, #0]
 8019482:	68db      	ldr	r3, [r3, #12]
 8019484:	603b      	str	r3, [r7, #0]
 8019486:	683b      	ldr	r3, [r7, #0]
 8019488:	2b00      	cmp	r3, #0
 801948a:	d1ea      	bne.n	8019462 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801948c:	79fb      	ldrb	r3, [r7, #7]
 801948e:	3301      	adds	r3, #1
 8019490:	71fb      	strb	r3, [r7, #7]
 8019492:	79fb      	ldrb	r3, [r7, #7]
 8019494:	2b03      	cmp	r3, #3
 8019496:	d9dd      	bls.n	8019454 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8019498:	4b03      	ldr	r3, [pc, #12]	; (80194a8 <tcp_new_port+0x84>)
 801949a:	881b      	ldrh	r3, [r3, #0]
}
 801949c:	4618      	mov	r0, r3
 801949e:	370c      	adds	r7, #12
 80194a0:	46bd      	mov	sp, r7
 80194a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a6:	4770      	bx	lr
 80194a8:	20000080 	.word	0x20000080
 80194ac:	0802709c 	.word	0x0802709c

080194b0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80194b0:	b5b0      	push	{r4, r5, r7, lr}
 80194b2:	b090      	sub	sp, #64	; 0x40
 80194b4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80194b6:	2300      	movs	r3, #0
 80194b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80194bc:	4b94      	ldr	r3, [pc, #592]	; (8019710 <tcp_slowtmr+0x260>)
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	3301      	adds	r3, #1
 80194c2:	4a93      	ldr	r2, [pc, #588]	; (8019710 <tcp_slowtmr+0x260>)
 80194c4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80194c6:	4b93      	ldr	r3, [pc, #588]	; (8019714 <tcp_slowtmr+0x264>)
 80194c8:	781b      	ldrb	r3, [r3, #0]
 80194ca:	3301      	adds	r3, #1
 80194cc:	b2da      	uxtb	r2, r3
 80194ce:	4b91      	ldr	r3, [pc, #580]	; (8019714 <tcp_slowtmr+0x264>)
 80194d0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80194d2:	2300      	movs	r3, #0
 80194d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80194d6:	4b90      	ldr	r3, [pc, #576]	; (8019718 <tcp_slowtmr+0x268>)
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80194dc:	e29f      	b.n	8019a1e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80194de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194e0:	7d1b      	ldrb	r3, [r3, #20]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d106      	bne.n	80194f4 <tcp_slowtmr+0x44>
 80194e6:	4b8d      	ldr	r3, [pc, #564]	; (801971c <tcp_slowtmr+0x26c>)
 80194e8:	f240 42be 	movw	r2, #1214	; 0x4be
 80194ec:	498c      	ldr	r1, [pc, #560]	; (8019720 <tcp_slowtmr+0x270>)
 80194ee:	488d      	ldr	r0, [pc, #564]	; (8019724 <tcp_slowtmr+0x274>)
 80194f0:	f008 ff26 	bl	8022340 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80194f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194f6:	7d1b      	ldrb	r3, [r3, #20]
 80194f8:	2b01      	cmp	r3, #1
 80194fa:	d106      	bne.n	801950a <tcp_slowtmr+0x5a>
 80194fc:	4b87      	ldr	r3, [pc, #540]	; (801971c <tcp_slowtmr+0x26c>)
 80194fe:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8019502:	4989      	ldr	r1, [pc, #548]	; (8019728 <tcp_slowtmr+0x278>)
 8019504:	4887      	ldr	r0, [pc, #540]	; (8019724 <tcp_slowtmr+0x274>)
 8019506:	f008 ff1b 	bl	8022340 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801950a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801950c:	7d1b      	ldrb	r3, [r3, #20]
 801950e:	2b0a      	cmp	r3, #10
 8019510:	d106      	bne.n	8019520 <tcp_slowtmr+0x70>
 8019512:	4b82      	ldr	r3, [pc, #520]	; (801971c <tcp_slowtmr+0x26c>)
 8019514:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8019518:	4984      	ldr	r1, [pc, #528]	; (801972c <tcp_slowtmr+0x27c>)
 801951a:	4882      	ldr	r0, [pc, #520]	; (8019724 <tcp_slowtmr+0x274>)
 801951c:	f008 ff10 	bl	8022340 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8019520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019522:	7f9a      	ldrb	r2, [r3, #30]
 8019524:	4b7b      	ldr	r3, [pc, #492]	; (8019714 <tcp_slowtmr+0x264>)
 8019526:	781b      	ldrb	r3, [r3, #0]
 8019528:	429a      	cmp	r2, r3
 801952a:	d105      	bne.n	8019538 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801952c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801952e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019532:	68db      	ldr	r3, [r3, #12]
 8019534:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8019536:	e272      	b.n	8019a1e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8019538:	4b76      	ldr	r3, [pc, #472]	; (8019714 <tcp_slowtmr+0x264>)
 801953a:	781a      	ldrb	r2, [r3, #0]
 801953c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801953e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8019540:	2300      	movs	r3, #0
 8019542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8019546:	2300      	movs	r3, #0
 8019548:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801954c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801954e:	7d1b      	ldrb	r3, [r3, #20]
 8019550:	2b02      	cmp	r3, #2
 8019552:	d10a      	bne.n	801956a <tcp_slowtmr+0xba>
 8019554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019556:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801955a:	2b05      	cmp	r3, #5
 801955c:	d905      	bls.n	801956a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801955e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019562:	3301      	adds	r3, #1
 8019564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019568:	e11e      	b.n	80197a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801956a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801956c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019570:	2b0b      	cmp	r3, #11
 8019572:	d905      	bls.n	8019580 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8019574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019578:	3301      	adds	r3, #1
 801957a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801957e:	e113      	b.n	80197a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8019580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019582:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019586:	2b00      	cmp	r3, #0
 8019588:	d075      	beq.n	8019676 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801958a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801958c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801958e:	2b00      	cmp	r3, #0
 8019590:	d006      	beq.n	80195a0 <tcp_slowtmr+0xf0>
 8019592:	4b62      	ldr	r3, [pc, #392]	; (801971c <tcp_slowtmr+0x26c>)
 8019594:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8019598:	4965      	ldr	r1, [pc, #404]	; (8019730 <tcp_slowtmr+0x280>)
 801959a:	4862      	ldr	r0, [pc, #392]	; (8019724 <tcp_slowtmr+0x274>)
 801959c:	f008 fed0 	bl	8022340 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80195a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d106      	bne.n	80195b6 <tcp_slowtmr+0x106>
 80195a8:	4b5c      	ldr	r3, [pc, #368]	; (801971c <tcp_slowtmr+0x26c>)
 80195aa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80195ae:	4961      	ldr	r1, [pc, #388]	; (8019734 <tcp_slowtmr+0x284>)
 80195b0:	485c      	ldr	r0, [pc, #368]	; (8019724 <tcp_slowtmr+0x274>)
 80195b2:	f008 fec5 	bl	8022340 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80195b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195b8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80195bc:	2b0b      	cmp	r3, #11
 80195be:	d905      	bls.n	80195cc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80195c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195c4:	3301      	adds	r3, #1
 80195c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80195ca:	e0ed      	b.n	80197a8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80195cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80195d2:	3b01      	subs	r3, #1
 80195d4:	4a58      	ldr	r2, [pc, #352]	; (8019738 <tcp_slowtmr+0x288>)
 80195d6:	5cd3      	ldrb	r3, [r2, r3]
 80195d8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80195da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80195e0:	7c7a      	ldrb	r2, [r7, #17]
 80195e2:	429a      	cmp	r2, r3
 80195e4:	d907      	bls.n	80195f6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80195e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80195ec:	3301      	adds	r3, #1
 80195ee:	b2da      	uxtb	r2, r3
 80195f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195f2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80195f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80195fc:	7c7a      	ldrb	r2, [r7, #17]
 80195fe:	429a      	cmp	r2, r3
 8019600:	f200 80d2 	bhi.w	80197a8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8019604:	2301      	movs	r3, #1
 8019606:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8019608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801960a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801960e:	2b00      	cmp	r3, #0
 8019610:	d108      	bne.n	8019624 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8019612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019614:	f005 f950 	bl	801e8b8 <tcp_zero_window_probe>
 8019618:	4603      	mov	r3, r0
 801961a:	2b00      	cmp	r3, #0
 801961c:	d014      	beq.n	8019648 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801961e:	2300      	movs	r3, #0
 8019620:	623b      	str	r3, [r7, #32]
 8019622:	e011      	b.n	8019648 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8019624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019626:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801962a:	4619      	mov	r1, r3
 801962c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801962e:	f004 f815 	bl	801d65c <tcp_split_unsent_seg>
 8019632:	4603      	mov	r3, r0
 8019634:	2b00      	cmp	r3, #0
 8019636:	d107      	bne.n	8019648 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8019638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801963a:	f004 fa95 	bl	801db68 <tcp_output>
 801963e:	4603      	mov	r3, r0
 8019640:	2b00      	cmp	r3, #0
 8019642:	d101      	bne.n	8019648 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8019644:	2300      	movs	r3, #0
 8019646:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8019648:	6a3b      	ldr	r3, [r7, #32]
 801964a:	2b00      	cmp	r3, #0
 801964c:	f000 80ac 	beq.w	80197a8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8019650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019652:	2200      	movs	r2, #0
 8019654:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8019658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801965a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801965e:	2b06      	cmp	r3, #6
 8019660:	f200 80a2 	bhi.w	80197a8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8019664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019666:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801966a:	3301      	adds	r3, #1
 801966c:	b2da      	uxtb	r2, r3
 801966e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019670:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8019674:	e098      	b.n	80197a8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8019676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019678:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801967c:	2b00      	cmp	r3, #0
 801967e:	db0f      	blt.n	80196a0 <tcp_slowtmr+0x1f0>
 8019680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019682:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019686:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801968a:	4293      	cmp	r3, r2
 801968c:	d008      	beq.n	80196a0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801968e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019690:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019694:	b29b      	uxth	r3, r3
 8019696:	3301      	adds	r3, #1
 8019698:	b29b      	uxth	r3, r3
 801969a:	b21a      	sxth	r2, r3
 801969c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801969e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80196a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196a2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80196a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196a8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80196ac:	429a      	cmp	r2, r3
 80196ae:	db7b      	blt.n	80197a8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80196b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80196b2:	f004 fd4d 	bl	801e150 <tcp_rexmit_rto_prepare>
 80196b6:	4603      	mov	r3, r0
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d007      	beq.n	80196cc <tcp_slowtmr+0x21c>
 80196bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d171      	bne.n	80197a8 <tcp_slowtmr+0x2f8>
 80196c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d06d      	beq.n	80197a8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80196cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196ce:	7d1b      	ldrb	r3, [r3, #20]
 80196d0:	2b02      	cmp	r3, #2
 80196d2:	d03a      	beq.n	801974a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80196d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80196da:	2b0c      	cmp	r3, #12
 80196dc:	bf28      	it	cs
 80196de:	230c      	movcs	r3, #12
 80196e0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80196e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80196e8:	10db      	asrs	r3, r3, #3
 80196ea:	b21b      	sxth	r3, r3
 80196ec:	461a      	mov	r2, r3
 80196ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80196f4:	4413      	add	r3, r2
 80196f6:	7efa      	ldrb	r2, [r7, #27]
 80196f8:	4910      	ldr	r1, [pc, #64]	; (801973c <tcp_slowtmr+0x28c>)
 80196fa:	5c8a      	ldrb	r2, [r1, r2]
 80196fc:	4093      	lsls	r3, r2
 80196fe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8019700:	697b      	ldr	r3, [r7, #20]
 8019702:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8019706:	4293      	cmp	r3, r2
 8019708:	dc1a      	bgt.n	8019740 <tcp_slowtmr+0x290>
 801970a:	697b      	ldr	r3, [r7, #20]
 801970c:	b21a      	sxth	r2, r3
 801970e:	e019      	b.n	8019744 <tcp_slowtmr+0x294>
 8019710:	2002efe4 	.word	0x2002efe4
 8019714:	2002effa 	.word	0x2002effa
 8019718:	2002eff0 	.word	0x2002eff0
 801971c:	08024e90 	.word	0x08024e90
 8019720:	080251d4 	.word	0x080251d4
 8019724:	08024ed4 	.word	0x08024ed4
 8019728:	08025200 	.word	0x08025200
 801972c:	0802522c 	.word	0x0802522c
 8019730:	0802525c 	.word	0x0802525c
 8019734:	08025290 	.word	0x08025290
 8019738:	08027094 	.word	0x08027094
 801973c:	08027084 	.word	0x08027084
 8019740:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019746:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801974a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801974c:	2200      	movs	r2, #0
 801974e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8019750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019752:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019758:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801975c:	4293      	cmp	r3, r2
 801975e:	bf28      	it	cs
 8019760:	4613      	movcs	r3, r2
 8019762:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8019764:	8a7b      	ldrh	r3, [r7, #18]
 8019766:	085b      	lsrs	r3, r3, #1
 8019768:	b29a      	uxth	r2, r3
 801976a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801976c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8019770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019772:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8019776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019778:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801977a:	005b      	lsls	r3, r3, #1
 801977c:	b29b      	uxth	r3, r3
 801977e:	429a      	cmp	r2, r3
 8019780:	d206      	bcs.n	8019790 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8019782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019784:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019786:	005b      	lsls	r3, r3, #1
 8019788:	b29a      	uxth	r2, r3
 801978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801978c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8019790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019792:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8019794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019796:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801979c:	2200      	movs	r2, #0
 801979e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80197a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80197a4:	f004 fd44 	bl	801e230 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80197a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197aa:	7d1b      	ldrb	r3, [r3, #20]
 80197ac:	2b06      	cmp	r3, #6
 80197ae:	d111      	bne.n	80197d4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80197b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197b2:	8b5b      	ldrh	r3, [r3, #26]
 80197b4:	f003 0310 	and.w	r3, r3, #16
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d00b      	beq.n	80197d4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80197bc:	4b9d      	ldr	r3, [pc, #628]	; (8019a34 <tcp_slowtmr+0x584>)
 80197be:	681a      	ldr	r2, [r3, #0]
 80197c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197c2:	6a1b      	ldr	r3, [r3, #32]
 80197c4:	1ad3      	subs	r3, r2, r3
 80197c6:	2b28      	cmp	r3, #40	; 0x28
 80197c8:	d904      	bls.n	80197d4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80197ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80197ce:	3301      	adds	r3, #1
 80197d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80197d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197d6:	7a5b      	ldrb	r3, [r3, #9]
 80197d8:	f003 0308 	and.w	r3, r3, #8
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d04c      	beq.n	801987a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80197e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197e2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80197e4:	2b04      	cmp	r3, #4
 80197e6:	d003      	beq.n	80197f0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80197e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197ea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80197ec:	2b07      	cmp	r3, #7
 80197ee:	d144      	bne.n	801987a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80197f0:	4b90      	ldr	r3, [pc, #576]	; (8019a34 <tcp_slowtmr+0x584>)
 80197f2:	681a      	ldr	r2, [r3, #0]
 80197f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197f6:	6a1b      	ldr	r3, [r3, #32]
 80197f8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80197fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8019800:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8019804:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8019808:	498b      	ldr	r1, [pc, #556]	; (8019a38 <tcp_slowtmr+0x588>)
 801980a:	fba1 1303 	umull	r1, r3, r1, r3
 801980e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019810:	429a      	cmp	r2, r3
 8019812:	d90a      	bls.n	801982a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8019814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019818:	3301      	adds	r3, #1
 801981a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801981e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019822:	3301      	adds	r3, #1
 8019824:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019828:	e027      	b.n	801987a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801982a:	4b82      	ldr	r3, [pc, #520]	; (8019a34 <tcp_slowtmr+0x584>)
 801982c:	681a      	ldr	r2, [r3, #0]
 801982e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019830:	6a1b      	ldr	r3, [r3, #32]
 8019832:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8019834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019836:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801983c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8019840:	4618      	mov	r0, r3
 8019842:	4b7e      	ldr	r3, [pc, #504]	; (8019a3c <tcp_slowtmr+0x58c>)
 8019844:	fb00 f303 	mul.w	r3, r0, r3
 8019848:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801984a:	497b      	ldr	r1, [pc, #492]	; (8019a38 <tcp_slowtmr+0x588>)
 801984c:	fba1 1303 	umull	r1, r3, r1, r3
 8019850:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019852:	429a      	cmp	r2, r3
 8019854:	d911      	bls.n	801987a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8019856:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019858:	f004 ffee 	bl	801e838 <tcp_keepalive>
 801985c:	4603      	mov	r3, r0
 801985e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8019862:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8019866:	2b00      	cmp	r3, #0
 8019868:	d107      	bne.n	801987a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801986a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801986c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8019870:	3301      	adds	r3, #1
 8019872:	b2da      	uxtb	r2, r3
 8019874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019876:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801987a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801987c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801987e:	2b00      	cmp	r3, #0
 8019880:	d011      	beq.n	80198a6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8019882:	4b6c      	ldr	r3, [pc, #432]	; (8019a34 <tcp_slowtmr+0x584>)
 8019884:	681a      	ldr	r2, [r3, #0]
 8019886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019888:	6a1b      	ldr	r3, [r3, #32]
 801988a:	1ad2      	subs	r2, r2, r3
 801988c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801988e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8019892:	4619      	mov	r1, r3
 8019894:	460b      	mov	r3, r1
 8019896:	005b      	lsls	r3, r3, #1
 8019898:	440b      	add	r3, r1
 801989a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801989c:	429a      	cmp	r2, r3
 801989e:	d302      	bcc.n	80198a6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80198a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80198a2:	f000 fea9 	bl	801a5f8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80198a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198a8:	7d1b      	ldrb	r3, [r3, #20]
 80198aa:	2b03      	cmp	r3, #3
 80198ac:	d10b      	bne.n	80198c6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80198ae:	4b61      	ldr	r3, [pc, #388]	; (8019a34 <tcp_slowtmr+0x584>)
 80198b0:	681a      	ldr	r2, [r3, #0]
 80198b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198b4:	6a1b      	ldr	r3, [r3, #32]
 80198b6:	1ad3      	subs	r3, r2, r3
 80198b8:	2b28      	cmp	r3, #40	; 0x28
 80198ba:	d904      	bls.n	80198c6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80198bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80198c0:	3301      	adds	r3, #1
 80198c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80198c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198c8:	7d1b      	ldrb	r3, [r3, #20]
 80198ca:	2b09      	cmp	r3, #9
 80198cc:	d10b      	bne.n	80198e6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80198ce:	4b59      	ldr	r3, [pc, #356]	; (8019a34 <tcp_slowtmr+0x584>)
 80198d0:	681a      	ldr	r2, [r3, #0]
 80198d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198d4:	6a1b      	ldr	r3, [r3, #32]
 80198d6:	1ad3      	subs	r3, r2, r3
 80198d8:	2bf0      	cmp	r3, #240	; 0xf0
 80198da:	d904      	bls.n	80198e6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80198dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80198e0:	3301      	adds	r3, #1
 80198e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80198e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d060      	beq.n	80199b0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80198ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80198f4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80198f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80198f8:	f000 fcca 	bl	801a290 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80198fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d010      	beq.n	8019924 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8019902:	4b4f      	ldr	r3, [pc, #316]	; (8019a40 <tcp_slowtmr+0x590>)
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019908:	429a      	cmp	r2, r3
 801990a:	d106      	bne.n	801991a <tcp_slowtmr+0x46a>
 801990c:	4b4d      	ldr	r3, [pc, #308]	; (8019a44 <tcp_slowtmr+0x594>)
 801990e:	f240 526d 	movw	r2, #1389	; 0x56d
 8019912:	494d      	ldr	r1, [pc, #308]	; (8019a48 <tcp_slowtmr+0x598>)
 8019914:	484d      	ldr	r0, [pc, #308]	; (8019a4c <tcp_slowtmr+0x59c>)
 8019916:	f008 fd13 	bl	8022340 <iprintf>
        prev->next = pcb->next;
 801991a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801991c:	68da      	ldr	r2, [r3, #12]
 801991e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019920:	60da      	str	r2, [r3, #12]
 8019922:	e00f      	b.n	8019944 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8019924:	4b46      	ldr	r3, [pc, #280]	; (8019a40 <tcp_slowtmr+0x590>)
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801992a:	429a      	cmp	r2, r3
 801992c:	d006      	beq.n	801993c <tcp_slowtmr+0x48c>
 801992e:	4b45      	ldr	r3, [pc, #276]	; (8019a44 <tcp_slowtmr+0x594>)
 8019930:	f240 5271 	movw	r2, #1393	; 0x571
 8019934:	4946      	ldr	r1, [pc, #280]	; (8019a50 <tcp_slowtmr+0x5a0>)
 8019936:	4845      	ldr	r0, [pc, #276]	; (8019a4c <tcp_slowtmr+0x59c>)
 8019938:	f008 fd02 	bl	8022340 <iprintf>
        tcp_active_pcbs = pcb->next;
 801993c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801993e:	68db      	ldr	r3, [r3, #12]
 8019940:	4a3f      	ldr	r2, [pc, #252]	; (8019a40 <tcp_slowtmr+0x590>)
 8019942:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8019944:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019948:	2b00      	cmp	r3, #0
 801994a:	d013      	beq.n	8019974 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801994c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801994e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8019950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019952:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019954:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8019956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019958:	3304      	adds	r3, #4
 801995a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801995c:	8ad2      	ldrh	r2, [r2, #22]
 801995e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019960:	8b09      	ldrh	r1, [r1, #24]
 8019962:	9102      	str	r1, [sp, #8]
 8019964:	9201      	str	r2, [sp, #4]
 8019966:	9300      	str	r3, [sp, #0]
 8019968:	462b      	mov	r3, r5
 801996a:	4622      	mov	r2, r4
 801996c:	4601      	mov	r1, r0
 801996e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019970:	f004 feae 	bl	801e6d0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8019974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019976:	691b      	ldr	r3, [r3, #16]
 8019978:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801997a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801997c:	7d1b      	ldrb	r3, [r3, #20]
 801997e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8019980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019982:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8019984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019986:	68db      	ldr	r3, [r3, #12]
 8019988:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801998a:	6838      	ldr	r0, [r7, #0]
 801998c:	f7fe ffee 	bl	801896c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8019990:	4b30      	ldr	r3, [pc, #192]	; (8019a54 <tcp_slowtmr+0x5a4>)
 8019992:	2200      	movs	r2, #0
 8019994:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	2b00      	cmp	r3, #0
 801999a:	d004      	beq.n	80199a6 <tcp_slowtmr+0x4f6>
 801999c:	68fb      	ldr	r3, [r7, #12]
 801999e:	f06f 010c 	mvn.w	r1, #12
 80199a2:	68b8      	ldr	r0, [r7, #8]
 80199a4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80199a6:	4b2b      	ldr	r3, [pc, #172]	; (8019a54 <tcp_slowtmr+0x5a4>)
 80199a8:	781b      	ldrb	r3, [r3, #0]
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d037      	beq.n	8019a1e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80199ae:	e590      	b.n	80194d2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80199b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80199b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199b6:	68db      	ldr	r3, [r3, #12]
 80199b8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80199ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199bc:	7f1b      	ldrb	r3, [r3, #28]
 80199be:	3301      	adds	r3, #1
 80199c0:	b2da      	uxtb	r2, r3
 80199c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199c4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80199c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199c8:	7f1a      	ldrb	r2, [r3, #28]
 80199ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199cc:	7f5b      	ldrb	r3, [r3, #29]
 80199ce:	429a      	cmp	r2, r3
 80199d0:	d325      	bcc.n	8019a1e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80199d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199d4:	2200      	movs	r2, #0
 80199d6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80199d8:	4b1e      	ldr	r3, [pc, #120]	; (8019a54 <tcp_slowtmr+0x5a4>)
 80199da:	2200      	movs	r2, #0
 80199dc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80199de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d00b      	beq.n	8019a00 <tcp_slowtmr+0x550>
 80199e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80199ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80199f0:	6912      	ldr	r2, [r2, #16]
 80199f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80199f4:	4610      	mov	r0, r2
 80199f6:	4798      	blx	r3
 80199f8:	4603      	mov	r3, r0
 80199fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80199fe:	e002      	b.n	8019a06 <tcp_slowtmr+0x556>
 8019a00:	2300      	movs	r3, #0
 8019a02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8019a06:	4b13      	ldr	r3, [pc, #76]	; (8019a54 <tcp_slowtmr+0x5a4>)
 8019a08:	781b      	ldrb	r3, [r3, #0]
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d000      	beq.n	8019a10 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8019a0e:	e560      	b.n	80194d2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8019a10:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d102      	bne.n	8019a1e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8019a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019a1a:	f004 f8a5 	bl	801db68 <tcp_output>
  while (pcb != NULL) {
 8019a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	f47f ad5c 	bne.w	80194de <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8019a26:	2300      	movs	r3, #0
 8019a28:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8019a2a:	4b0b      	ldr	r3, [pc, #44]	; (8019a58 <tcp_slowtmr+0x5a8>)
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8019a30:	e067      	b.n	8019b02 <tcp_slowtmr+0x652>
 8019a32:	bf00      	nop
 8019a34:	2002efe4 	.word	0x2002efe4
 8019a38:	10624dd3 	.word	0x10624dd3
 8019a3c:	000124f8 	.word	0x000124f8
 8019a40:	2002eff0 	.word	0x2002eff0
 8019a44:	08024e90 	.word	0x08024e90
 8019a48:	080252c8 	.word	0x080252c8
 8019a4c:	08024ed4 	.word	0x08024ed4
 8019a50:	080252f4 	.word	0x080252f4
 8019a54:	2002eff8 	.word	0x2002eff8
 8019a58:	2002eff4 	.word	0x2002eff4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8019a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a5e:	7d1b      	ldrb	r3, [r3, #20]
 8019a60:	2b0a      	cmp	r3, #10
 8019a62:	d006      	beq.n	8019a72 <tcp_slowtmr+0x5c2>
 8019a64:	4b2b      	ldr	r3, [pc, #172]	; (8019b14 <tcp_slowtmr+0x664>)
 8019a66:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8019a6a:	492b      	ldr	r1, [pc, #172]	; (8019b18 <tcp_slowtmr+0x668>)
 8019a6c:	482b      	ldr	r0, [pc, #172]	; (8019b1c <tcp_slowtmr+0x66c>)
 8019a6e:	f008 fc67 	bl	8022340 <iprintf>
    pcb_remove = 0;
 8019a72:	2300      	movs	r3, #0
 8019a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8019a78:	4b29      	ldr	r3, [pc, #164]	; (8019b20 <tcp_slowtmr+0x670>)
 8019a7a:	681a      	ldr	r2, [r3, #0]
 8019a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a7e:	6a1b      	ldr	r3, [r3, #32]
 8019a80:	1ad3      	subs	r3, r2, r3
 8019a82:	2bf0      	cmp	r3, #240	; 0xf0
 8019a84:	d904      	bls.n	8019a90 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8019a86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019a8a:	3301      	adds	r3, #1
 8019a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8019a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d02f      	beq.n	8019af8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8019a98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019a9a:	f000 fbf9 	bl	801a290 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8019a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d010      	beq.n	8019ac6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8019aa4:	4b1f      	ldr	r3, [pc, #124]	; (8019b24 <tcp_slowtmr+0x674>)
 8019aa6:	681b      	ldr	r3, [r3, #0]
 8019aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019aaa:	429a      	cmp	r2, r3
 8019aac:	d106      	bne.n	8019abc <tcp_slowtmr+0x60c>
 8019aae:	4b19      	ldr	r3, [pc, #100]	; (8019b14 <tcp_slowtmr+0x664>)
 8019ab0:	f240 52af 	movw	r2, #1455	; 0x5af
 8019ab4:	491c      	ldr	r1, [pc, #112]	; (8019b28 <tcp_slowtmr+0x678>)
 8019ab6:	4819      	ldr	r0, [pc, #100]	; (8019b1c <tcp_slowtmr+0x66c>)
 8019ab8:	f008 fc42 	bl	8022340 <iprintf>
        prev->next = pcb->next;
 8019abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019abe:	68da      	ldr	r2, [r3, #12]
 8019ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ac2:	60da      	str	r2, [r3, #12]
 8019ac4:	e00f      	b.n	8019ae6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8019ac6:	4b17      	ldr	r3, [pc, #92]	; (8019b24 <tcp_slowtmr+0x674>)
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019acc:	429a      	cmp	r2, r3
 8019ace:	d006      	beq.n	8019ade <tcp_slowtmr+0x62e>
 8019ad0:	4b10      	ldr	r3, [pc, #64]	; (8019b14 <tcp_slowtmr+0x664>)
 8019ad2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8019ad6:	4915      	ldr	r1, [pc, #84]	; (8019b2c <tcp_slowtmr+0x67c>)
 8019ad8:	4810      	ldr	r0, [pc, #64]	; (8019b1c <tcp_slowtmr+0x66c>)
 8019ada:	f008 fc31 	bl	8022340 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8019ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ae0:	68db      	ldr	r3, [r3, #12]
 8019ae2:	4a10      	ldr	r2, [pc, #64]	; (8019b24 <tcp_slowtmr+0x674>)
 8019ae4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8019ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ae8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8019aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019aec:	68db      	ldr	r3, [r3, #12]
 8019aee:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8019af0:	69f8      	ldr	r0, [r7, #28]
 8019af2:	f7fe ff3b 	bl	801896c <tcp_free>
 8019af6:	e004      	b.n	8019b02 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8019af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019afa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019afe:	68db      	ldr	r3, [r3, #12]
 8019b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8019b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d1a9      	bne.n	8019a5c <tcp_slowtmr+0x5ac>
    }
  }
}
 8019b08:	bf00      	nop
 8019b0a:	bf00      	nop
 8019b0c:	3730      	adds	r7, #48	; 0x30
 8019b0e:	46bd      	mov	sp, r7
 8019b10:	bdb0      	pop	{r4, r5, r7, pc}
 8019b12:	bf00      	nop
 8019b14:	08024e90 	.word	0x08024e90
 8019b18:	08025320 	.word	0x08025320
 8019b1c:	08024ed4 	.word	0x08024ed4
 8019b20:	2002efe4 	.word	0x2002efe4
 8019b24:	2002eff4 	.word	0x2002eff4
 8019b28:	08025350 	.word	0x08025350
 8019b2c:	08025378 	.word	0x08025378

08019b30 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8019b30:	b580      	push	{r7, lr}
 8019b32:	b082      	sub	sp, #8
 8019b34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8019b36:	4b2d      	ldr	r3, [pc, #180]	; (8019bec <tcp_fasttmr+0xbc>)
 8019b38:	781b      	ldrb	r3, [r3, #0]
 8019b3a:	3301      	adds	r3, #1
 8019b3c:	b2da      	uxtb	r2, r3
 8019b3e:	4b2b      	ldr	r3, [pc, #172]	; (8019bec <tcp_fasttmr+0xbc>)
 8019b40:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8019b42:	4b2b      	ldr	r3, [pc, #172]	; (8019bf0 <tcp_fasttmr+0xc0>)
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8019b48:	e048      	b.n	8019bdc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	7f9a      	ldrb	r2, [r3, #30]
 8019b4e:	4b27      	ldr	r3, [pc, #156]	; (8019bec <tcp_fasttmr+0xbc>)
 8019b50:	781b      	ldrb	r3, [r3, #0]
 8019b52:	429a      	cmp	r2, r3
 8019b54:	d03f      	beq.n	8019bd6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8019b56:	4b25      	ldr	r3, [pc, #148]	; (8019bec <tcp_fasttmr+0xbc>)
 8019b58:	781a      	ldrb	r2, [r3, #0]
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	8b5b      	ldrh	r3, [r3, #26]
 8019b62:	f003 0301 	and.w	r3, r3, #1
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	d010      	beq.n	8019b8c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	8b5b      	ldrh	r3, [r3, #26]
 8019b6e:	f043 0302 	orr.w	r3, r3, #2
 8019b72:	b29a      	uxth	r2, r3
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8019b78:	6878      	ldr	r0, [r7, #4]
 8019b7a:	f003 fff5 	bl	801db68 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	8b5b      	ldrh	r3, [r3, #26]
 8019b82:	f023 0303 	bic.w	r3, r3, #3
 8019b86:	b29a      	uxth	r2, r3
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	8b5b      	ldrh	r3, [r3, #26]
 8019b90:	f003 0308 	and.w	r3, r3, #8
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d009      	beq.n	8019bac <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	8b5b      	ldrh	r3, [r3, #26]
 8019b9c:	f023 0308 	bic.w	r3, r3, #8
 8019ba0:	b29a      	uxth	r2, r3
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8019ba6:	6878      	ldr	r0, [r7, #4]
 8019ba8:	f7ff f874 	bl	8018c94 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	68db      	ldr	r3, [r3, #12]
 8019bb0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d00a      	beq.n	8019bd0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8019bba:	4b0e      	ldr	r3, [pc, #56]	; (8019bf4 <tcp_fasttmr+0xc4>)
 8019bbc:	2200      	movs	r2, #0
 8019bbe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8019bc0:	6878      	ldr	r0, [r7, #4]
 8019bc2:	f000 f819 	bl	8019bf8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8019bc6:	4b0b      	ldr	r3, [pc, #44]	; (8019bf4 <tcp_fasttmr+0xc4>)
 8019bc8:	781b      	ldrb	r3, [r3, #0]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d000      	beq.n	8019bd0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8019bce:	e7b8      	b.n	8019b42 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8019bd0:	683b      	ldr	r3, [r7, #0]
 8019bd2:	607b      	str	r3, [r7, #4]
 8019bd4:	e002      	b.n	8019bdc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	68db      	ldr	r3, [r3, #12]
 8019bda:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d1b3      	bne.n	8019b4a <tcp_fasttmr+0x1a>
    }
  }
}
 8019be2:	bf00      	nop
 8019be4:	bf00      	nop
 8019be6:	3708      	adds	r7, #8
 8019be8:	46bd      	mov	sp, r7
 8019bea:	bd80      	pop	{r7, pc}
 8019bec:	2002effa 	.word	0x2002effa
 8019bf0:	2002eff0 	.word	0x2002eff0
 8019bf4:	2002eff8 	.word	0x2002eff8

08019bf8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8019bf8:	b590      	push	{r4, r7, lr}
 8019bfa:	b085      	sub	sp, #20
 8019bfc:	af00      	add	r7, sp, #0
 8019bfe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d109      	bne.n	8019c1a <tcp_process_refused_data+0x22>
 8019c06:	4b37      	ldr	r3, [pc, #220]	; (8019ce4 <tcp_process_refused_data+0xec>)
 8019c08:	f240 6209 	movw	r2, #1545	; 0x609
 8019c0c:	4936      	ldr	r1, [pc, #216]	; (8019ce8 <tcp_process_refused_data+0xf0>)
 8019c0e:	4837      	ldr	r0, [pc, #220]	; (8019cec <tcp_process_refused_data+0xf4>)
 8019c10:	f008 fb96 	bl	8022340 <iprintf>
 8019c14:	f06f 030f 	mvn.w	r3, #15
 8019c18:	e060      	b.n	8019cdc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019c1e:	7b5b      	ldrb	r3, [r3, #13]
 8019c20:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019c26:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	2200      	movs	r2, #0
 8019c2c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d00b      	beq.n	8019c50 <tcp_process_refused_data+0x58>
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	6918      	ldr	r0, [r3, #16]
 8019c42:	2300      	movs	r3, #0
 8019c44:	68ba      	ldr	r2, [r7, #8]
 8019c46:	6879      	ldr	r1, [r7, #4]
 8019c48:	47a0      	blx	r4
 8019c4a:	4603      	mov	r3, r0
 8019c4c:	73fb      	strb	r3, [r7, #15]
 8019c4e:	e007      	b.n	8019c60 <tcp_process_refused_data+0x68>
 8019c50:	2300      	movs	r3, #0
 8019c52:	68ba      	ldr	r2, [r7, #8]
 8019c54:	6879      	ldr	r1, [r7, #4]
 8019c56:	2000      	movs	r0, #0
 8019c58:	f000 f8a4 	bl	8019da4 <tcp_recv_null>
 8019c5c:	4603      	mov	r3, r0
 8019c5e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8019c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d12a      	bne.n	8019cbe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8019c68:	7bbb      	ldrb	r3, [r7, #14]
 8019c6a:	f003 0320 	and.w	r3, r3, #32
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d033      	beq.n	8019cda <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019c76:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019c7a:	d005      	beq.n	8019c88 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019c80:	3301      	adds	r3, #1
 8019c82:	b29a      	uxth	r2, r3
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d00b      	beq.n	8019caa <tcp_process_refused_data+0xb2>
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	6918      	ldr	r0, [r3, #16]
 8019c9c:	2300      	movs	r3, #0
 8019c9e:	2200      	movs	r2, #0
 8019ca0:	6879      	ldr	r1, [r7, #4]
 8019ca2:	47a0      	blx	r4
 8019ca4:	4603      	mov	r3, r0
 8019ca6:	73fb      	strb	r3, [r7, #15]
 8019ca8:	e001      	b.n	8019cae <tcp_process_refused_data+0xb6>
 8019caa:	2300      	movs	r3, #0
 8019cac:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8019cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019cb2:	f113 0f0d 	cmn.w	r3, #13
 8019cb6:	d110      	bne.n	8019cda <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8019cb8:	f06f 030c 	mvn.w	r3, #12
 8019cbc:	e00e      	b.n	8019cdc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8019cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019cc2:	f113 0f0d 	cmn.w	r3, #13
 8019cc6:	d102      	bne.n	8019cce <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8019cc8:	f06f 030c 	mvn.w	r3, #12
 8019ccc:	e006      	b.n	8019cdc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	68ba      	ldr	r2, [r7, #8]
 8019cd2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8019cd4:	f06f 0304 	mvn.w	r3, #4
 8019cd8:	e000      	b.n	8019cdc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8019cda:	2300      	movs	r3, #0
}
 8019cdc:	4618      	mov	r0, r3
 8019cde:	3714      	adds	r7, #20
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	bd90      	pop	{r4, r7, pc}
 8019ce4:	08024e90 	.word	0x08024e90
 8019ce8:	080253a0 	.word	0x080253a0
 8019cec:	08024ed4 	.word	0x08024ed4

08019cf0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8019cf0:	b580      	push	{r7, lr}
 8019cf2:	b084      	sub	sp, #16
 8019cf4:	af00      	add	r7, sp, #0
 8019cf6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8019cf8:	e007      	b.n	8019d0a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8019d00:	6878      	ldr	r0, [r7, #4]
 8019d02:	f000 f80a 	bl	8019d1a <tcp_seg_free>
    seg = next;
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d1f4      	bne.n	8019cfa <tcp_segs_free+0xa>
  }
}
 8019d10:	bf00      	nop
 8019d12:	bf00      	nop
 8019d14:	3710      	adds	r7, #16
 8019d16:	46bd      	mov	sp, r7
 8019d18:	bd80      	pop	{r7, pc}

08019d1a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8019d1a:	b580      	push	{r7, lr}
 8019d1c:	b082      	sub	sp, #8
 8019d1e:	af00      	add	r7, sp, #0
 8019d20:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d00c      	beq.n	8019d42 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	685b      	ldr	r3, [r3, #4]
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d004      	beq.n	8019d3a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	685b      	ldr	r3, [r3, #4]
 8019d34:	4618      	mov	r0, r3
 8019d36:	f7fe fb6d 	bl	8018414 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8019d3a:	6879      	ldr	r1, [r7, #4]
 8019d3c:	2003      	movs	r0, #3
 8019d3e:	f7fd fcc5 	bl	80176cc <memp_free>
  }
}
 8019d42:	bf00      	nop
 8019d44:	3708      	adds	r7, #8
 8019d46:	46bd      	mov	sp, r7
 8019d48:	bd80      	pop	{r7, pc}
	...

08019d4c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	b084      	sub	sp, #16
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d106      	bne.n	8019d68 <tcp_seg_copy+0x1c>
 8019d5a:	4b0f      	ldr	r3, [pc, #60]	; (8019d98 <tcp_seg_copy+0x4c>)
 8019d5c:	f240 6282 	movw	r2, #1666	; 0x682
 8019d60:	490e      	ldr	r1, [pc, #56]	; (8019d9c <tcp_seg_copy+0x50>)
 8019d62:	480f      	ldr	r0, [pc, #60]	; (8019da0 <tcp_seg_copy+0x54>)
 8019d64:	f008 faec 	bl	8022340 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8019d68:	2003      	movs	r0, #3
 8019d6a:	f7fd fc39 	bl	80175e0 <memp_malloc>
 8019d6e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d101      	bne.n	8019d7a <tcp_seg_copy+0x2e>
    return NULL;
 8019d76:	2300      	movs	r3, #0
 8019d78:	e00a      	b.n	8019d90 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8019d7a:	2210      	movs	r2, #16
 8019d7c:	6879      	ldr	r1, [r7, #4]
 8019d7e:	68f8      	ldr	r0, [r7, #12]
 8019d80:	f008 fc4f 	bl	8022622 <memcpy>
  pbuf_ref(cseg->p);
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	685b      	ldr	r3, [r3, #4]
 8019d88:	4618      	mov	r0, r3
 8019d8a:	f7fe fbe9 	bl	8018560 <pbuf_ref>
  return cseg;
 8019d8e:	68fb      	ldr	r3, [r7, #12]
}
 8019d90:	4618      	mov	r0, r3
 8019d92:	3710      	adds	r7, #16
 8019d94:	46bd      	mov	sp, r7
 8019d96:	bd80      	pop	{r7, pc}
 8019d98:	08024e90 	.word	0x08024e90
 8019d9c:	080253e4 	.word	0x080253e4
 8019da0:	08024ed4 	.word	0x08024ed4

08019da4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8019da4:	b580      	push	{r7, lr}
 8019da6:	b084      	sub	sp, #16
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	60f8      	str	r0, [r7, #12]
 8019dac:	60b9      	str	r1, [r7, #8]
 8019dae:	607a      	str	r2, [r7, #4]
 8019db0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8019db2:	68bb      	ldr	r3, [r7, #8]
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	d109      	bne.n	8019dcc <tcp_recv_null+0x28>
 8019db8:	4b12      	ldr	r3, [pc, #72]	; (8019e04 <tcp_recv_null+0x60>)
 8019dba:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8019dbe:	4912      	ldr	r1, [pc, #72]	; (8019e08 <tcp_recv_null+0x64>)
 8019dc0:	4812      	ldr	r0, [pc, #72]	; (8019e0c <tcp_recv_null+0x68>)
 8019dc2:	f008 fabd 	bl	8022340 <iprintf>
 8019dc6:	f06f 030f 	mvn.w	r3, #15
 8019dca:	e016      	b.n	8019dfa <tcp_recv_null+0x56>

  if (p != NULL) {
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d009      	beq.n	8019de6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	891b      	ldrh	r3, [r3, #8]
 8019dd6:	4619      	mov	r1, r3
 8019dd8:	68b8      	ldr	r0, [r7, #8]
 8019dda:	f7ff fad3 	bl	8019384 <tcp_recved>
    pbuf_free(p);
 8019dde:	6878      	ldr	r0, [r7, #4]
 8019de0:	f7fe fb18 	bl	8018414 <pbuf_free>
 8019de4:	e008      	b.n	8019df8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8019de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d104      	bne.n	8019df8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8019dee:	68b8      	ldr	r0, [r7, #8]
 8019df0:	f7fe ffba 	bl	8018d68 <tcp_close>
 8019df4:	4603      	mov	r3, r0
 8019df6:	e000      	b.n	8019dfa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8019df8:	2300      	movs	r3, #0
}
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	3710      	adds	r7, #16
 8019dfe:	46bd      	mov	sp, r7
 8019e00:	bd80      	pop	{r7, pc}
 8019e02:	bf00      	nop
 8019e04:	08024e90 	.word	0x08024e90
 8019e08:	08025400 	.word	0x08025400
 8019e0c:	08024ed4 	.word	0x08024ed4

08019e10 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8019e10:	b580      	push	{r7, lr}
 8019e12:	b086      	sub	sp, #24
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	4603      	mov	r3, r0
 8019e18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8019e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	db01      	blt.n	8019e26 <tcp_kill_prio+0x16>
 8019e22:	79fb      	ldrb	r3, [r7, #7]
 8019e24:	e000      	b.n	8019e28 <tcp_kill_prio+0x18>
 8019e26:	237f      	movs	r3, #127	; 0x7f
 8019e28:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8019e2a:	7afb      	ldrb	r3, [r7, #11]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d034      	beq.n	8019e9a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8019e30:	7afb      	ldrb	r3, [r7, #11]
 8019e32:	3b01      	subs	r3, #1
 8019e34:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8019e36:	2300      	movs	r3, #0
 8019e38:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8019e3a:	2300      	movs	r3, #0
 8019e3c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019e3e:	4b19      	ldr	r3, [pc, #100]	; (8019ea4 <tcp_kill_prio+0x94>)
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	617b      	str	r3, [r7, #20]
 8019e44:	e01f      	b.n	8019e86 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8019e46:	697b      	ldr	r3, [r7, #20]
 8019e48:	7d5b      	ldrb	r3, [r3, #21]
 8019e4a:	7afa      	ldrb	r2, [r7, #11]
 8019e4c:	429a      	cmp	r2, r3
 8019e4e:	d80c      	bhi.n	8019e6a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8019e50:	697b      	ldr	r3, [r7, #20]
 8019e52:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8019e54:	7afa      	ldrb	r2, [r7, #11]
 8019e56:	429a      	cmp	r2, r3
 8019e58:	d112      	bne.n	8019e80 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8019e5a:	4b13      	ldr	r3, [pc, #76]	; (8019ea8 <tcp_kill_prio+0x98>)
 8019e5c:	681a      	ldr	r2, [r3, #0]
 8019e5e:	697b      	ldr	r3, [r7, #20]
 8019e60:	6a1b      	ldr	r3, [r3, #32]
 8019e62:	1ad3      	subs	r3, r2, r3
 8019e64:	68fa      	ldr	r2, [r7, #12]
 8019e66:	429a      	cmp	r2, r3
 8019e68:	d80a      	bhi.n	8019e80 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8019e6a:	4b0f      	ldr	r3, [pc, #60]	; (8019ea8 <tcp_kill_prio+0x98>)
 8019e6c:	681a      	ldr	r2, [r3, #0]
 8019e6e:	697b      	ldr	r3, [r7, #20]
 8019e70:	6a1b      	ldr	r3, [r3, #32]
 8019e72:	1ad3      	subs	r3, r2, r3
 8019e74:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8019e76:	697b      	ldr	r3, [r7, #20]
 8019e78:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8019e7a:	697b      	ldr	r3, [r7, #20]
 8019e7c:	7d5b      	ldrb	r3, [r3, #21]
 8019e7e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019e80:	697b      	ldr	r3, [r7, #20]
 8019e82:	68db      	ldr	r3, [r3, #12]
 8019e84:	617b      	str	r3, [r7, #20]
 8019e86:	697b      	ldr	r3, [r7, #20]
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d1dc      	bne.n	8019e46 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8019e8c:	693b      	ldr	r3, [r7, #16]
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d004      	beq.n	8019e9c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8019e92:	6938      	ldr	r0, [r7, #16]
 8019e94:	f7ff f8ae 	bl	8018ff4 <tcp_abort>
 8019e98:	e000      	b.n	8019e9c <tcp_kill_prio+0x8c>
    return;
 8019e9a:	bf00      	nop
  }
}
 8019e9c:	3718      	adds	r7, #24
 8019e9e:	46bd      	mov	sp, r7
 8019ea0:	bd80      	pop	{r7, pc}
 8019ea2:	bf00      	nop
 8019ea4:	2002eff0 	.word	0x2002eff0
 8019ea8:	2002efe4 	.word	0x2002efe4

08019eac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8019eac:	b580      	push	{r7, lr}
 8019eae:	b086      	sub	sp, #24
 8019eb0:	af00      	add	r7, sp, #0
 8019eb2:	4603      	mov	r3, r0
 8019eb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8019eb6:	79fb      	ldrb	r3, [r7, #7]
 8019eb8:	2b08      	cmp	r3, #8
 8019eba:	d009      	beq.n	8019ed0 <tcp_kill_state+0x24>
 8019ebc:	79fb      	ldrb	r3, [r7, #7]
 8019ebe:	2b09      	cmp	r3, #9
 8019ec0:	d006      	beq.n	8019ed0 <tcp_kill_state+0x24>
 8019ec2:	4b1a      	ldr	r3, [pc, #104]	; (8019f2c <tcp_kill_state+0x80>)
 8019ec4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8019ec8:	4919      	ldr	r1, [pc, #100]	; (8019f30 <tcp_kill_state+0x84>)
 8019eca:	481a      	ldr	r0, [pc, #104]	; (8019f34 <tcp_kill_state+0x88>)
 8019ecc:	f008 fa38 	bl	8022340 <iprintf>

  inactivity = 0;
 8019ed0:	2300      	movs	r3, #0
 8019ed2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8019ed4:	2300      	movs	r3, #0
 8019ed6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019ed8:	4b17      	ldr	r3, [pc, #92]	; (8019f38 <tcp_kill_state+0x8c>)
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	617b      	str	r3, [r7, #20]
 8019ede:	e017      	b.n	8019f10 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8019ee0:	697b      	ldr	r3, [r7, #20]
 8019ee2:	7d1b      	ldrb	r3, [r3, #20]
 8019ee4:	79fa      	ldrb	r2, [r7, #7]
 8019ee6:	429a      	cmp	r2, r3
 8019ee8:	d10f      	bne.n	8019f0a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8019eea:	4b14      	ldr	r3, [pc, #80]	; (8019f3c <tcp_kill_state+0x90>)
 8019eec:	681a      	ldr	r2, [r3, #0]
 8019eee:	697b      	ldr	r3, [r7, #20]
 8019ef0:	6a1b      	ldr	r3, [r3, #32]
 8019ef2:	1ad3      	subs	r3, r2, r3
 8019ef4:	68fa      	ldr	r2, [r7, #12]
 8019ef6:	429a      	cmp	r2, r3
 8019ef8:	d807      	bhi.n	8019f0a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8019efa:	4b10      	ldr	r3, [pc, #64]	; (8019f3c <tcp_kill_state+0x90>)
 8019efc:	681a      	ldr	r2, [r3, #0]
 8019efe:	697b      	ldr	r3, [r7, #20]
 8019f00:	6a1b      	ldr	r3, [r3, #32]
 8019f02:	1ad3      	subs	r3, r2, r3
 8019f04:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8019f06:	697b      	ldr	r3, [r7, #20]
 8019f08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019f0a:	697b      	ldr	r3, [r7, #20]
 8019f0c:	68db      	ldr	r3, [r3, #12]
 8019f0e:	617b      	str	r3, [r7, #20]
 8019f10:	697b      	ldr	r3, [r7, #20]
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d1e4      	bne.n	8019ee0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8019f16:	693b      	ldr	r3, [r7, #16]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d003      	beq.n	8019f24 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8019f1c:	2100      	movs	r1, #0
 8019f1e:	6938      	ldr	r0, [r7, #16]
 8019f20:	f7fe ffaa 	bl	8018e78 <tcp_abandon>
  }
}
 8019f24:	bf00      	nop
 8019f26:	3718      	adds	r7, #24
 8019f28:	46bd      	mov	sp, r7
 8019f2a:	bd80      	pop	{r7, pc}
 8019f2c:	08024e90 	.word	0x08024e90
 8019f30:	0802541c 	.word	0x0802541c
 8019f34:	08024ed4 	.word	0x08024ed4
 8019f38:	2002eff0 	.word	0x2002eff0
 8019f3c:	2002efe4 	.word	0x2002efe4

08019f40 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b084      	sub	sp, #16
 8019f44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8019f46:	2300      	movs	r3, #0
 8019f48:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8019f4a:	2300      	movs	r3, #0
 8019f4c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019f4e:	4b12      	ldr	r3, [pc, #72]	; (8019f98 <tcp_kill_timewait+0x58>)
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	60fb      	str	r3, [r7, #12]
 8019f54:	e012      	b.n	8019f7c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8019f56:	4b11      	ldr	r3, [pc, #68]	; (8019f9c <tcp_kill_timewait+0x5c>)
 8019f58:	681a      	ldr	r2, [r3, #0]
 8019f5a:	68fb      	ldr	r3, [r7, #12]
 8019f5c:	6a1b      	ldr	r3, [r3, #32]
 8019f5e:	1ad3      	subs	r3, r2, r3
 8019f60:	687a      	ldr	r2, [r7, #4]
 8019f62:	429a      	cmp	r2, r3
 8019f64:	d807      	bhi.n	8019f76 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8019f66:	4b0d      	ldr	r3, [pc, #52]	; (8019f9c <tcp_kill_timewait+0x5c>)
 8019f68:	681a      	ldr	r2, [r3, #0]
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	6a1b      	ldr	r3, [r3, #32]
 8019f6e:	1ad3      	subs	r3, r2, r3
 8019f70:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019f76:	68fb      	ldr	r3, [r7, #12]
 8019f78:	68db      	ldr	r3, [r3, #12]
 8019f7a:	60fb      	str	r3, [r7, #12]
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d1e9      	bne.n	8019f56 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8019f82:	68bb      	ldr	r3, [r7, #8]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d002      	beq.n	8019f8e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8019f88:	68b8      	ldr	r0, [r7, #8]
 8019f8a:	f7ff f833 	bl	8018ff4 <tcp_abort>
  }
}
 8019f8e:	bf00      	nop
 8019f90:	3710      	adds	r7, #16
 8019f92:	46bd      	mov	sp, r7
 8019f94:	bd80      	pop	{r7, pc}
 8019f96:	bf00      	nop
 8019f98:	2002eff4 	.word	0x2002eff4
 8019f9c:	2002efe4 	.word	0x2002efe4

08019fa0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8019fa0:	b580      	push	{r7, lr}
 8019fa2:	b082      	sub	sp, #8
 8019fa4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8019fa6:	4b10      	ldr	r3, [pc, #64]	; (8019fe8 <tcp_handle_closepend+0x48>)
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8019fac:	e014      	b.n	8019fd8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	68db      	ldr	r3, [r3, #12]
 8019fb2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	8b5b      	ldrh	r3, [r3, #26]
 8019fb8:	f003 0308 	and.w	r3, r3, #8
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d009      	beq.n	8019fd4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	8b5b      	ldrh	r3, [r3, #26]
 8019fc4:	f023 0308 	bic.w	r3, r3, #8
 8019fc8:	b29a      	uxth	r2, r3
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8019fce:	6878      	ldr	r0, [r7, #4]
 8019fd0:	f7fe fe60 	bl	8018c94 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8019fd4:	683b      	ldr	r3, [r7, #0]
 8019fd6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d1e7      	bne.n	8019fae <tcp_handle_closepend+0xe>
  }
}
 8019fde:	bf00      	nop
 8019fe0:	bf00      	nop
 8019fe2:	3708      	adds	r7, #8
 8019fe4:	46bd      	mov	sp, r7
 8019fe6:	bd80      	pop	{r7, pc}
 8019fe8:	2002eff0 	.word	0x2002eff0

08019fec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b084      	sub	sp, #16
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019ff6:	2001      	movs	r0, #1
 8019ff8:	f7fd faf2 	bl	80175e0 <memp_malloc>
 8019ffc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	2b00      	cmp	r3, #0
 801a002:	d126      	bne.n	801a052 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801a004:	f7ff ffcc 	bl	8019fa0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801a008:	f7ff ff9a 	bl	8019f40 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a00c:	2001      	movs	r0, #1
 801a00e:	f7fd fae7 	bl	80175e0 <memp_malloc>
 801a012:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801a014:	68fb      	ldr	r3, [r7, #12]
 801a016:	2b00      	cmp	r3, #0
 801a018:	d11b      	bne.n	801a052 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801a01a:	2009      	movs	r0, #9
 801a01c:	f7ff ff46 	bl	8019eac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a020:	2001      	movs	r0, #1
 801a022:	f7fd fadd 	bl	80175e0 <memp_malloc>
 801a026:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801a028:	68fb      	ldr	r3, [r7, #12]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d111      	bne.n	801a052 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801a02e:	2008      	movs	r0, #8
 801a030:	f7ff ff3c 	bl	8019eac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a034:	2001      	movs	r0, #1
 801a036:	f7fd fad3 	bl	80175e0 <memp_malloc>
 801a03a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d107      	bne.n	801a052 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801a042:	79fb      	ldrb	r3, [r7, #7]
 801a044:	4618      	mov	r0, r3
 801a046:	f7ff fee3 	bl	8019e10 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a04a:	2001      	movs	r0, #1
 801a04c:	f7fd fac8 	bl	80175e0 <memp_malloc>
 801a050:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801a052:	68fb      	ldr	r3, [r7, #12]
 801a054:	2b00      	cmp	r3, #0
 801a056:	d03f      	beq.n	801a0d8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801a058:	229c      	movs	r2, #156	; 0x9c
 801a05a:	2100      	movs	r1, #0
 801a05c:	68f8      	ldr	r0, [r7, #12]
 801a05e:	f008 fa47 	bl	80224f0 <memset>
    pcb->prio = prio;
 801a062:	68fb      	ldr	r3, [r7, #12]
 801a064:	79fa      	ldrb	r2, [r7, #7]
 801a066:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801a06e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a072:	68fb      	ldr	r3, [r7, #12]
 801a074:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a078:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801a082:	68fb      	ldr	r3, [r7, #12]
 801a084:	22ff      	movs	r2, #255	; 0xff
 801a086:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a08e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	2206      	movs	r2, #6
 801a094:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	2206      	movs	r2, #6
 801a09c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a0a4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	2201      	movs	r2, #1
 801a0aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801a0ae:	4b0d      	ldr	r3, [pc, #52]	; (801a0e4 <tcp_alloc+0xf8>)
 801a0b0:	681a      	ldr	r2, [r3, #0]
 801a0b2:	68fb      	ldr	r3, [r7, #12]
 801a0b4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801a0b6:	4b0c      	ldr	r3, [pc, #48]	; (801a0e8 <tcp_alloc+0xfc>)
 801a0b8:	781a      	ldrb	r2, [r3, #0]
 801a0ba:	68fb      	ldr	r3, [r7, #12]
 801a0bc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801a0c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	4a08      	ldr	r2, [pc, #32]	; (801a0ec <tcp_alloc+0x100>)
 801a0cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	4a07      	ldr	r2, [pc, #28]	; (801a0f0 <tcp_alloc+0x104>)
 801a0d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801a0d8:	68fb      	ldr	r3, [r7, #12]
}
 801a0da:	4618      	mov	r0, r3
 801a0dc:	3710      	adds	r7, #16
 801a0de:	46bd      	mov	sp, r7
 801a0e0:	bd80      	pop	{r7, pc}
 801a0e2:	bf00      	nop
 801a0e4:	2002efe4 	.word	0x2002efe4
 801a0e8:	2002effa 	.word	0x2002effa
 801a0ec:	08019da5 	.word	0x08019da5
 801a0f0:	006ddd00 	.word	0x006ddd00

0801a0f4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801a0f4:	b580      	push	{r7, lr}
 801a0f6:	b084      	sub	sp, #16
 801a0f8:	af00      	add	r7, sp, #0
 801a0fa:	4603      	mov	r3, r0
 801a0fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801a0fe:	2040      	movs	r0, #64	; 0x40
 801a100:	f7ff ff74 	bl	8019fec <tcp_alloc>
 801a104:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a106:	68fb      	ldr	r3, [r7, #12]
}
 801a108:	4618      	mov	r0, r3
 801a10a:	3710      	adds	r7, #16
 801a10c:	46bd      	mov	sp, r7
 801a10e:	bd80      	pop	{r7, pc}

0801a110 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801a110:	b480      	push	{r7}
 801a112:	b083      	sub	sp, #12
 801a114:	af00      	add	r7, sp, #0
 801a116:	6078      	str	r0, [r7, #4]
 801a118:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d002      	beq.n	801a126 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	683a      	ldr	r2, [r7, #0]
 801a124:	611a      	str	r2, [r3, #16]
  }
}
 801a126:	bf00      	nop
 801a128:	370c      	adds	r7, #12
 801a12a:	46bd      	mov	sp, r7
 801a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a130:	4770      	bx	lr
	...

0801a134 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801a134:	b580      	push	{r7, lr}
 801a136:	b082      	sub	sp, #8
 801a138:	af00      	add	r7, sp, #0
 801a13a:	6078      	str	r0, [r7, #4]
 801a13c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	2b00      	cmp	r3, #0
 801a142:	d00e      	beq.n	801a162 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	7d1b      	ldrb	r3, [r3, #20]
 801a148:	2b01      	cmp	r3, #1
 801a14a:	d106      	bne.n	801a15a <tcp_recv+0x26>
 801a14c:	4b07      	ldr	r3, [pc, #28]	; (801a16c <tcp_recv+0x38>)
 801a14e:	f240 72df 	movw	r2, #2015	; 0x7df
 801a152:	4907      	ldr	r1, [pc, #28]	; (801a170 <tcp_recv+0x3c>)
 801a154:	4807      	ldr	r0, [pc, #28]	; (801a174 <tcp_recv+0x40>)
 801a156:	f008 f8f3 	bl	8022340 <iprintf>
    pcb->recv = recv;
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	683a      	ldr	r2, [r7, #0]
 801a15e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801a162:	bf00      	nop
 801a164:	3708      	adds	r7, #8
 801a166:	46bd      	mov	sp, r7
 801a168:	bd80      	pop	{r7, pc}
 801a16a:	bf00      	nop
 801a16c:	08024e90 	.word	0x08024e90
 801a170:	0802542c 	.word	0x0802542c
 801a174:	08024ed4 	.word	0x08024ed4

0801a178 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801a178:	b580      	push	{r7, lr}
 801a17a:	b082      	sub	sp, #8
 801a17c:	af00      	add	r7, sp, #0
 801a17e:	6078      	str	r0, [r7, #4]
 801a180:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	2b00      	cmp	r3, #0
 801a186:	d00e      	beq.n	801a1a6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	7d1b      	ldrb	r3, [r3, #20]
 801a18c:	2b01      	cmp	r3, #1
 801a18e:	d106      	bne.n	801a19e <tcp_sent+0x26>
 801a190:	4b07      	ldr	r3, [pc, #28]	; (801a1b0 <tcp_sent+0x38>)
 801a192:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801a196:	4907      	ldr	r1, [pc, #28]	; (801a1b4 <tcp_sent+0x3c>)
 801a198:	4807      	ldr	r0, [pc, #28]	; (801a1b8 <tcp_sent+0x40>)
 801a19a:	f008 f8d1 	bl	8022340 <iprintf>
    pcb->sent = sent;
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	683a      	ldr	r2, [r7, #0]
 801a1a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801a1a6:	bf00      	nop
 801a1a8:	3708      	adds	r7, #8
 801a1aa:	46bd      	mov	sp, r7
 801a1ac:	bd80      	pop	{r7, pc}
 801a1ae:	bf00      	nop
 801a1b0:	08024e90 	.word	0x08024e90
 801a1b4:	08025454 	.word	0x08025454
 801a1b8:	08024ed4 	.word	0x08024ed4

0801a1bc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801a1bc:	b580      	push	{r7, lr}
 801a1be:	b082      	sub	sp, #8
 801a1c0:	af00      	add	r7, sp, #0
 801a1c2:	6078      	str	r0, [r7, #4]
 801a1c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d00e      	beq.n	801a1ea <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	7d1b      	ldrb	r3, [r3, #20]
 801a1d0:	2b01      	cmp	r3, #1
 801a1d2:	d106      	bne.n	801a1e2 <tcp_err+0x26>
 801a1d4:	4b07      	ldr	r3, [pc, #28]	; (801a1f4 <tcp_err+0x38>)
 801a1d6:	f640 020d 	movw	r2, #2061	; 0x80d
 801a1da:	4907      	ldr	r1, [pc, #28]	; (801a1f8 <tcp_err+0x3c>)
 801a1dc:	4807      	ldr	r0, [pc, #28]	; (801a1fc <tcp_err+0x40>)
 801a1de:	f008 f8af 	bl	8022340 <iprintf>
    pcb->errf = err;
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	683a      	ldr	r2, [r7, #0]
 801a1e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801a1ea:	bf00      	nop
 801a1ec:	3708      	adds	r7, #8
 801a1ee:	46bd      	mov	sp, r7
 801a1f0:	bd80      	pop	{r7, pc}
 801a1f2:	bf00      	nop
 801a1f4:	08024e90 	.word	0x08024e90
 801a1f8:	0802547c 	.word	0x0802547c
 801a1fc:	08024ed4 	.word	0x08024ed4

0801a200 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801a200:	b480      	push	{r7}
 801a202:	b085      	sub	sp, #20
 801a204:	af00      	add	r7, sp, #0
 801a206:	6078      	str	r0, [r7, #4]
 801a208:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d008      	beq.n	801a222 <tcp_accept+0x22>
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	7d1b      	ldrb	r3, [r3, #20]
 801a214:	2b01      	cmp	r3, #1
 801a216:	d104      	bne.n	801a222 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	683a      	ldr	r2, [r7, #0]
 801a220:	619a      	str	r2, [r3, #24]
  }
}
 801a222:	bf00      	nop
 801a224:	3714      	adds	r7, #20
 801a226:	46bd      	mov	sp, r7
 801a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a22c:	4770      	bx	lr
	...

0801a230 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801a230:	b580      	push	{r7, lr}
 801a232:	b084      	sub	sp, #16
 801a234:	af00      	add	r7, sp, #0
 801a236:	60f8      	str	r0, [r7, #12]
 801a238:	60b9      	str	r1, [r7, #8]
 801a23a:	4613      	mov	r3, r2
 801a23c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	2b00      	cmp	r3, #0
 801a242:	d107      	bne.n	801a254 <tcp_poll+0x24>
 801a244:	4b0e      	ldr	r3, [pc, #56]	; (801a280 <tcp_poll+0x50>)
 801a246:	f640 023d 	movw	r2, #2109	; 0x83d
 801a24a:	490e      	ldr	r1, [pc, #56]	; (801a284 <tcp_poll+0x54>)
 801a24c:	480e      	ldr	r0, [pc, #56]	; (801a288 <tcp_poll+0x58>)
 801a24e:	f008 f877 	bl	8022340 <iprintf>
 801a252:	e011      	b.n	801a278 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	7d1b      	ldrb	r3, [r3, #20]
 801a258:	2b01      	cmp	r3, #1
 801a25a:	d106      	bne.n	801a26a <tcp_poll+0x3a>
 801a25c:	4b08      	ldr	r3, [pc, #32]	; (801a280 <tcp_poll+0x50>)
 801a25e:	f640 023e 	movw	r2, #2110	; 0x83e
 801a262:	490a      	ldr	r1, [pc, #40]	; (801a28c <tcp_poll+0x5c>)
 801a264:	4808      	ldr	r0, [pc, #32]	; (801a288 <tcp_poll+0x58>)
 801a266:	f008 f86b 	bl	8022340 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801a26a:	68fb      	ldr	r3, [r7, #12]
 801a26c:	68ba      	ldr	r2, [r7, #8]
 801a26e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801a272:	68fb      	ldr	r3, [r7, #12]
 801a274:	79fa      	ldrb	r2, [r7, #7]
 801a276:	775a      	strb	r2, [r3, #29]
}
 801a278:	3710      	adds	r7, #16
 801a27a:	46bd      	mov	sp, r7
 801a27c:	bd80      	pop	{r7, pc}
 801a27e:	bf00      	nop
 801a280:	08024e90 	.word	0x08024e90
 801a284:	080254a4 	.word	0x080254a4
 801a288:	08024ed4 	.word	0x08024ed4
 801a28c:	080254bc 	.word	0x080254bc

0801a290 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801a290:	b580      	push	{r7, lr}
 801a292:	b082      	sub	sp, #8
 801a294:	af00      	add	r7, sp, #0
 801a296:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d107      	bne.n	801a2ae <tcp_pcb_purge+0x1e>
 801a29e:	4b21      	ldr	r3, [pc, #132]	; (801a324 <tcp_pcb_purge+0x94>)
 801a2a0:	f640 0251 	movw	r2, #2129	; 0x851
 801a2a4:	4920      	ldr	r1, [pc, #128]	; (801a328 <tcp_pcb_purge+0x98>)
 801a2a6:	4821      	ldr	r0, [pc, #132]	; (801a32c <tcp_pcb_purge+0x9c>)
 801a2a8:	f008 f84a 	bl	8022340 <iprintf>
 801a2ac:	e037      	b.n	801a31e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	7d1b      	ldrb	r3, [r3, #20]
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d033      	beq.n	801a31e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801a2ba:	2b0a      	cmp	r3, #10
 801a2bc:	d02f      	beq.n	801a31e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801a2c2:	2b01      	cmp	r3, #1
 801a2c4:	d02b      	beq.n	801a31e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d007      	beq.n	801a2de <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a2d2:	4618      	mov	r0, r3
 801a2d4:	f7fe f89e 	bl	8018414 <pbuf_free>
      pcb->refused_data = NULL;
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	2200      	movs	r2, #0
 801a2dc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d002      	beq.n	801a2ec <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801a2e6:	6878      	ldr	r0, [r7, #4]
 801a2e8:	f000 f986 	bl	801a5f8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a2f2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a2f8:	4618      	mov	r0, r3
 801a2fa:	f7ff fcf9 	bl	8019cf0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a302:	4618      	mov	r0, r3
 801a304:	f7ff fcf4 	bl	8019cf0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	2200      	movs	r2, #0
 801a30c:	66da      	str	r2, [r3, #108]	; 0x6c
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	2200      	movs	r2, #0
 801a31a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801a31e:	3708      	adds	r7, #8
 801a320:	46bd      	mov	sp, r7
 801a322:	bd80      	pop	{r7, pc}
 801a324:	08024e90 	.word	0x08024e90
 801a328:	080254dc 	.word	0x080254dc
 801a32c:	08024ed4 	.word	0x08024ed4

0801a330 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801a330:	b580      	push	{r7, lr}
 801a332:	b084      	sub	sp, #16
 801a334:	af00      	add	r7, sp, #0
 801a336:	6078      	str	r0, [r7, #4]
 801a338:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801a33a:	683b      	ldr	r3, [r7, #0]
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d106      	bne.n	801a34e <tcp_pcb_remove+0x1e>
 801a340:	4b3e      	ldr	r3, [pc, #248]	; (801a43c <tcp_pcb_remove+0x10c>)
 801a342:	f640 0283 	movw	r2, #2179	; 0x883
 801a346:	493e      	ldr	r1, [pc, #248]	; (801a440 <tcp_pcb_remove+0x110>)
 801a348:	483e      	ldr	r0, [pc, #248]	; (801a444 <tcp_pcb_remove+0x114>)
 801a34a:	f007 fff9 	bl	8022340 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	2b00      	cmp	r3, #0
 801a352:	d106      	bne.n	801a362 <tcp_pcb_remove+0x32>
 801a354:	4b39      	ldr	r3, [pc, #228]	; (801a43c <tcp_pcb_remove+0x10c>)
 801a356:	f640 0284 	movw	r2, #2180	; 0x884
 801a35a:	493b      	ldr	r1, [pc, #236]	; (801a448 <tcp_pcb_remove+0x118>)
 801a35c:	4839      	ldr	r0, [pc, #228]	; (801a444 <tcp_pcb_remove+0x114>)
 801a35e:	f007 ffef 	bl	8022340 <iprintf>

  TCP_RMV(pcblist, pcb);
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	683a      	ldr	r2, [r7, #0]
 801a368:	429a      	cmp	r2, r3
 801a36a:	d105      	bne.n	801a378 <tcp_pcb_remove+0x48>
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	68da      	ldr	r2, [r3, #12]
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	601a      	str	r2, [r3, #0]
 801a376:	e013      	b.n	801a3a0 <tcp_pcb_remove+0x70>
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	60fb      	str	r3, [r7, #12]
 801a37e:	e00c      	b.n	801a39a <tcp_pcb_remove+0x6a>
 801a380:	68fb      	ldr	r3, [r7, #12]
 801a382:	68db      	ldr	r3, [r3, #12]
 801a384:	683a      	ldr	r2, [r7, #0]
 801a386:	429a      	cmp	r2, r3
 801a388:	d104      	bne.n	801a394 <tcp_pcb_remove+0x64>
 801a38a:	683b      	ldr	r3, [r7, #0]
 801a38c:	68da      	ldr	r2, [r3, #12]
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	60da      	str	r2, [r3, #12]
 801a392:	e005      	b.n	801a3a0 <tcp_pcb_remove+0x70>
 801a394:	68fb      	ldr	r3, [r7, #12]
 801a396:	68db      	ldr	r3, [r3, #12]
 801a398:	60fb      	str	r3, [r7, #12]
 801a39a:	68fb      	ldr	r3, [r7, #12]
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d1ef      	bne.n	801a380 <tcp_pcb_remove+0x50>
 801a3a0:	683b      	ldr	r3, [r7, #0]
 801a3a2:	2200      	movs	r2, #0
 801a3a4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801a3a6:	6838      	ldr	r0, [r7, #0]
 801a3a8:	f7ff ff72 	bl	801a290 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801a3ac:	683b      	ldr	r3, [r7, #0]
 801a3ae:	7d1b      	ldrb	r3, [r3, #20]
 801a3b0:	2b0a      	cmp	r3, #10
 801a3b2:	d013      	beq.n	801a3dc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801a3b4:	683b      	ldr	r3, [r7, #0]
 801a3b6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801a3b8:	2b01      	cmp	r3, #1
 801a3ba:	d00f      	beq.n	801a3dc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801a3bc:	683b      	ldr	r3, [r7, #0]
 801a3be:	8b5b      	ldrh	r3, [r3, #26]
 801a3c0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d009      	beq.n	801a3dc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801a3c8:	683b      	ldr	r3, [r7, #0]
 801a3ca:	8b5b      	ldrh	r3, [r3, #26]
 801a3cc:	f043 0302 	orr.w	r3, r3, #2
 801a3d0:	b29a      	uxth	r2, r3
 801a3d2:	683b      	ldr	r3, [r7, #0]
 801a3d4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801a3d6:	6838      	ldr	r0, [r7, #0]
 801a3d8:	f003 fbc6 	bl	801db68 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801a3dc:	683b      	ldr	r3, [r7, #0]
 801a3de:	7d1b      	ldrb	r3, [r3, #20]
 801a3e0:	2b01      	cmp	r3, #1
 801a3e2:	d020      	beq.n	801a426 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801a3e4:	683b      	ldr	r3, [r7, #0]
 801a3e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d006      	beq.n	801a3fa <tcp_pcb_remove+0xca>
 801a3ec:	4b13      	ldr	r3, [pc, #76]	; (801a43c <tcp_pcb_remove+0x10c>)
 801a3ee:	f640 0293 	movw	r2, #2195	; 0x893
 801a3f2:	4916      	ldr	r1, [pc, #88]	; (801a44c <tcp_pcb_remove+0x11c>)
 801a3f4:	4813      	ldr	r0, [pc, #76]	; (801a444 <tcp_pcb_remove+0x114>)
 801a3f6:	f007 ffa3 	bl	8022340 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801a3fa:	683b      	ldr	r3, [r7, #0]
 801a3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d006      	beq.n	801a410 <tcp_pcb_remove+0xe0>
 801a402:	4b0e      	ldr	r3, [pc, #56]	; (801a43c <tcp_pcb_remove+0x10c>)
 801a404:	f640 0294 	movw	r2, #2196	; 0x894
 801a408:	4911      	ldr	r1, [pc, #68]	; (801a450 <tcp_pcb_remove+0x120>)
 801a40a:	480e      	ldr	r0, [pc, #56]	; (801a444 <tcp_pcb_remove+0x114>)
 801a40c:	f007 ff98 	bl	8022340 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801a410:	683b      	ldr	r3, [r7, #0]
 801a412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a414:	2b00      	cmp	r3, #0
 801a416:	d006      	beq.n	801a426 <tcp_pcb_remove+0xf6>
 801a418:	4b08      	ldr	r3, [pc, #32]	; (801a43c <tcp_pcb_remove+0x10c>)
 801a41a:	f640 0296 	movw	r2, #2198	; 0x896
 801a41e:	490d      	ldr	r1, [pc, #52]	; (801a454 <tcp_pcb_remove+0x124>)
 801a420:	4808      	ldr	r0, [pc, #32]	; (801a444 <tcp_pcb_remove+0x114>)
 801a422:	f007 ff8d 	bl	8022340 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801a426:	683b      	ldr	r3, [r7, #0]
 801a428:	2200      	movs	r2, #0
 801a42a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801a42c:	683b      	ldr	r3, [r7, #0]
 801a42e:	2200      	movs	r2, #0
 801a430:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801a432:	bf00      	nop
 801a434:	3710      	adds	r7, #16
 801a436:	46bd      	mov	sp, r7
 801a438:	bd80      	pop	{r7, pc}
 801a43a:	bf00      	nop
 801a43c:	08024e90 	.word	0x08024e90
 801a440:	080254f8 	.word	0x080254f8
 801a444:	08024ed4 	.word	0x08024ed4
 801a448:	08025514 	.word	0x08025514
 801a44c:	08025534 	.word	0x08025534
 801a450:	0802554c 	.word	0x0802554c
 801a454:	08025568 	.word	0x08025568

0801a458 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801a458:	b580      	push	{r7, lr}
 801a45a:	b082      	sub	sp, #8
 801a45c:	af00      	add	r7, sp, #0
 801a45e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	2b00      	cmp	r3, #0
 801a464:	d106      	bne.n	801a474 <tcp_next_iss+0x1c>
 801a466:	4b0a      	ldr	r3, [pc, #40]	; (801a490 <tcp_next_iss+0x38>)
 801a468:	f640 02af 	movw	r2, #2223	; 0x8af
 801a46c:	4909      	ldr	r1, [pc, #36]	; (801a494 <tcp_next_iss+0x3c>)
 801a46e:	480a      	ldr	r0, [pc, #40]	; (801a498 <tcp_next_iss+0x40>)
 801a470:	f007 ff66 	bl	8022340 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801a474:	4b09      	ldr	r3, [pc, #36]	; (801a49c <tcp_next_iss+0x44>)
 801a476:	681a      	ldr	r2, [r3, #0]
 801a478:	4b09      	ldr	r3, [pc, #36]	; (801a4a0 <tcp_next_iss+0x48>)
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	4413      	add	r3, r2
 801a47e:	4a07      	ldr	r2, [pc, #28]	; (801a49c <tcp_next_iss+0x44>)
 801a480:	6013      	str	r3, [r2, #0]
  return iss;
 801a482:	4b06      	ldr	r3, [pc, #24]	; (801a49c <tcp_next_iss+0x44>)
 801a484:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801a486:	4618      	mov	r0, r3
 801a488:	3708      	adds	r7, #8
 801a48a:	46bd      	mov	sp, r7
 801a48c:	bd80      	pop	{r7, pc}
 801a48e:	bf00      	nop
 801a490:	08024e90 	.word	0x08024e90
 801a494:	08025580 	.word	0x08025580
 801a498:	08024ed4 	.word	0x08024ed4
 801a49c:	20000084 	.word	0x20000084
 801a4a0:	2002efe4 	.word	0x2002efe4

0801a4a4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801a4a4:	b580      	push	{r7, lr}
 801a4a6:	b086      	sub	sp, #24
 801a4a8:	af00      	add	r7, sp, #0
 801a4aa:	4603      	mov	r3, r0
 801a4ac:	60b9      	str	r1, [r7, #8]
 801a4ae:	607a      	str	r2, [r7, #4]
 801a4b0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d106      	bne.n	801a4c6 <tcp_eff_send_mss_netif+0x22>
 801a4b8:	4b14      	ldr	r3, [pc, #80]	; (801a50c <tcp_eff_send_mss_netif+0x68>)
 801a4ba:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801a4be:	4914      	ldr	r1, [pc, #80]	; (801a510 <tcp_eff_send_mss_netif+0x6c>)
 801a4c0:	4814      	ldr	r0, [pc, #80]	; (801a514 <tcp_eff_send_mss_netif+0x70>)
 801a4c2:	f007 ff3d 	bl	8022340 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801a4c6:	68bb      	ldr	r3, [r7, #8]
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d101      	bne.n	801a4d0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801a4cc:	89fb      	ldrh	r3, [r7, #14]
 801a4ce:	e019      	b.n	801a504 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801a4d0:	68bb      	ldr	r3, [r7, #8]
 801a4d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a4d4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801a4d6:	8afb      	ldrh	r3, [r7, #22]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d012      	beq.n	801a502 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801a4dc:	2328      	movs	r3, #40	; 0x28
 801a4de:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801a4e0:	8afa      	ldrh	r2, [r7, #22]
 801a4e2:	8abb      	ldrh	r3, [r7, #20]
 801a4e4:	429a      	cmp	r2, r3
 801a4e6:	d904      	bls.n	801a4f2 <tcp_eff_send_mss_netif+0x4e>
 801a4e8:	8afa      	ldrh	r2, [r7, #22]
 801a4ea:	8abb      	ldrh	r3, [r7, #20]
 801a4ec:	1ad3      	subs	r3, r2, r3
 801a4ee:	b29b      	uxth	r3, r3
 801a4f0:	e000      	b.n	801a4f4 <tcp_eff_send_mss_netif+0x50>
 801a4f2:	2300      	movs	r3, #0
 801a4f4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801a4f6:	8a7a      	ldrh	r2, [r7, #18]
 801a4f8:	89fb      	ldrh	r3, [r7, #14]
 801a4fa:	4293      	cmp	r3, r2
 801a4fc:	bf28      	it	cs
 801a4fe:	4613      	movcs	r3, r2
 801a500:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801a502:	89fb      	ldrh	r3, [r7, #14]
}
 801a504:	4618      	mov	r0, r3
 801a506:	3718      	adds	r7, #24
 801a508:	46bd      	mov	sp, r7
 801a50a:	bd80      	pop	{r7, pc}
 801a50c:	08024e90 	.word	0x08024e90
 801a510:	0802559c 	.word	0x0802559c
 801a514:	08024ed4 	.word	0x08024ed4

0801a518 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801a518:	b580      	push	{r7, lr}
 801a51a:	b084      	sub	sp, #16
 801a51c:	af00      	add	r7, sp, #0
 801a51e:	6078      	str	r0, [r7, #4]
 801a520:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801a522:	683b      	ldr	r3, [r7, #0]
 801a524:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	2b00      	cmp	r3, #0
 801a52a:	d119      	bne.n	801a560 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801a52c:	4b10      	ldr	r3, [pc, #64]	; (801a570 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801a52e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801a532:	4910      	ldr	r1, [pc, #64]	; (801a574 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801a534:	4810      	ldr	r0, [pc, #64]	; (801a578 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801a536:	f007 ff03 	bl	8022340 <iprintf>

  while (pcb != NULL) {
 801a53a:	e011      	b.n	801a560 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801a53c:	68fb      	ldr	r3, [r7, #12]
 801a53e:	681a      	ldr	r2, [r3, #0]
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	429a      	cmp	r2, r3
 801a546:	d108      	bne.n	801a55a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	68db      	ldr	r3, [r3, #12]
 801a54c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801a54e:	68f8      	ldr	r0, [r7, #12]
 801a550:	f7fe fd50 	bl	8018ff4 <tcp_abort>
      pcb = next;
 801a554:	68bb      	ldr	r3, [r7, #8]
 801a556:	60fb      	str	r3, [r7, #12]
 801a558:	e002      	b.n	801a560 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801a55a:	68fb      	ldr	r3, [r7, #12]
 801a55c:	68db      	ldr	r3, [r3, #12]
 801a55e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801a560:	68fb      	ldr	r3, [r7, #12]
 801a562:	2b00      	cmp	r3, #0
 801a564:	d1ea      	bne.n	801a53c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801a566:	bf00      	nop
 801a568:	bf00      	nop
 801a56a:	3710      	adds	r7, #16
 801a56c:	46bd      	mov	sp, r7
 801a56e:	bd80      	pop	{r7, pc}
 801a570:	08024e90 	.word	0x08024e90
 801a574:	080255c4 	.word	0x080255c4
 801a578:	08024ed4 	.word	0x08024ed4

0801a57c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a57c:	b580      	push	{r7, lr}
 801a57e:	b084      	sub	sp, #16
 801a580:	af00      	add	r7, sp, #0
 801a582:	6078      	str	r0, [r7, #4]
 801a584:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d02a      	beq.n	801a5e2 <tcp_netif_ip_addr_changed+0x66>
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	2b00      	cmp	r3, #0
 801a592:	d026      	beq.n	801a5e2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801a594:	4b15      	ldr	r3, [pc, #84]	; (801a5ec <tcp_netif_ip_addr_changed+0x70>)
 801a596:	681b      	ldr	r3, [r3, #0]
 801a598:	4619      	mov	r1, r3
 801a59a:	6878      	ldr	r0, [r7, #4]
 801a59c:	f7ff ffbc 	bl	801a518 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801a5a0:	4b13      	ldr	r3, [pc, #76]	; (801a5f0 <tcp_netif_ip_addr_changed+0x74>)
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	4619      	mov	r1, r3
 801a5a6:	6878      	ldr	r0, [r7, #4]
 801a5a8:	f7ff ffb6 	bl	801a518 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801a5ac:	683b      	ldr	r3, [r7, #0]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d017      	beq.n	801a5e2 <tcp_netif_ip_addr_changed+0x66>
 801a5b2:	683b      	ldr	r3, [r7, #0]
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d013      	beq.n	801a5e2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a5ba:	4b0e      	ldr	r3, [pc, #56]	; (801a5f4 <tcp_netif_ip_addr_changed+0x78>)
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	60fb      	str	r3, [r7, #12]
 801a5c0:	e00c      	b.n	801a5dc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801a5c2:	68fb      	ldr	r3, [r7, #12]
 801a5c4:	681a      	ldr	r2, [r3, #0]
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	429a      	cmp	r2, r3
 801a5cc:	d103      	bne.n	801a5d6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801a5ce:	683b      	ldr	r3, [r7, #0]
 801a5d0:	681a      	ldr	r2, [r3, #0]
 801a5d2:	68fb      	ldr	r3, [r7, #12]
 801a5d4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a5d6:	68fb      	ldr	r3, [r7, #12]
 801a5d8:	68db      	ldr	r3, [r3, #12]
 801a5da:	60fb      	str	r3, [r7, #12]
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d1ef      	bne.n	801a5c2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801a5e2:	bf00      	nop
 801a5e4:	3710      	adds	r7, #16
 801a5e6:	46bd      	mov	sp, r7
 801a5e8:	bd80      	pop	{r7, pc}
 801a5ea:	bf00      	nop
 801a5ec:	2002eff0 	.word	0x2002eff0
 801a5f0:	2002efe8 	.word	0x2002efe8
 801a5f4:	2002efec 	.word	0x2002efec

0801a5f8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801a5f8:	b580      	push	{r7, lr}
 801a5fa:	b082      	sub	sp, #8
 801a5fc:	af00      	add	r7, sp, #0
 801a5fe:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a604:	2b00      	cmp	r3, #0
 801a606:	d007      	beq.n	801a618 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a60c:	4618      	mov	r0, r3
 801a60e:	f7ff fb6f 	bl	8019cf0 <tcp_segs_free>
    pcb->ooseq = NULL;
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	2200      	movs	r2, #0
 801a616:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801a618:	bf00      	nop
 801a61a:	3708      	adds	r7, #8
 801a61c:	46bd      	mov	sp, r7
 801a61e:	bd80      	pop	{r7, pc}

0801a620 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801a620:	b590      	push	{r4, r7, lr}
 801a622:	b08d      	sub	sp, #52	; 0x34
 801a624:	af04      	add	r7, sp, #16
 801a626:	6078      	str	r0, [r7, #4]
 801a628:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d105      	bne.n	801a63c <tcp_input+0x1c>
 801a630:	4b9b      	ldr	r3, [pc, #620]	; (801a8a0 <tcp_input+0x280>)
 801a632:	2283      	movs	r2, #131	; 0x83
 801a634:	499b      	ldr	r1, [pc, #620]	; (801a8a4 <tcp_input+0x284>)
 801a636:	489c      	ldr	r0, [pc, #624]	; (801a8a8 <tcp_input+0x288>)
 801a638:	f007 fe82 	bl	8022340 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	685b      	ldr	r3, [r3, #4]
 801a640:	4a9a      	ldr	r2, [pc, #616]	; (801a8ac <tcp_input+0x28c>)
 801a642:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	895b      	ldrh	r3, [r3, #10]
 801a648:	2b13      	cmp	r3, #19
 801a64a:	f240 83d1 	bls.w	801adf0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801a64e:	4b98      	ldr	r3, [pc, #608]	; (801a8b0 <tcp_input+0x290>)
 801a650:	695b      	ldr	r3, [r3, #20]
 801a652:	4a97      	ldr	r2, [pc, #604]	; (801a8b0 <tcp_input+0x290>)
 801a654:	6812      	ldr	r2, [r2, #0]
 801a656:	4611      	mov	r1, r2
 801a658:	4618      	mov	r0, r3
 801a65a:	f006 fa0b 	bl	8020a74 <ip4_addr_isbroadcast_u32>
 801a65e:	4603      	mov	r3, r0
 801a660:	2b00      	cmp	r3, #0
 801a662:	f040 83c7 	bne.w	801adf4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801a666:	4b92      	ldr	r3, [pc, #584]	; (801a8b0 <tcp_input+0x290>)
 801a668:	695b      	ldr	r3, [r3, #20]
 801a66a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801a66e:	2be0      	cmp	r3, #224	; 0xe0
 801a670:	f000 83c0 	beq.w	801adf4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801a674:	4b8d      	ldr	r3, [pc, #564]	; (801a8ac <tcp_input+0x28c>)
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	899b      	ldrh	r3, [r3, #12]
 801a67a:	b29b      	uxth	r3, r3
 801a67c:	4618      	mov	r0, r3
 801a67e:	f7fc fa1f 	bl	8016ac0 <lwip_htons>
 801a682:	4603      	mov	r3, r0
 801a684:	0b1b      	lsrs	r3, r3, #12
 801a686:	b29b      	uxth	r3, r3
 801a688:	b2db      	uxtb	r3, r3
 801a68a:	009b      	lsls	r3, r3, #2
 801a68c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801a68e:	7cbb      	ldrb	r3, [r7, #18]
 801a690:	2b13      	cmp	r3, #19
 801a692:	f240 83b1 	bls.w	801adf8 <tcp_input+0x7d8>
 801a696:	7cbb      	ldrb	r3, [r7, #18]
 801a698:	b29a      	uxth	r2, r3
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	891b      	ldrh	r3, [r3, #8]
 801a69e:	429a      	cmp	r2, r3
 801a6a0:	f200 83aa 	bhi.w	801adf8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801a6a4:	7cbb      	ldrb	r3, [r7, #18]
 801a6a6:	b29b      	uxth	r3, r3
 801a6a8:	3b14      	subs	r3, #20
 801a6aa:	b29a      	uxth	r2, r3
 801a6ac:	4b81      	ldr	r3, [pc, #516]	; (801a8b4 <tcp_input+0x294>)
 801a6ae:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801a6b0:	4b81      	ldr	r3, [pc, #516]	; (801a8b8 <tcp_input+0x298>)
 801a6b2:	2200      	movs	r2, #0
 801a6b4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	895a      	ldrh	r2, [r3, #10]
 801a6ba:	7cbb      	ldrb	r3, [r7, #18]
 801a6bc:	b29b      	uxth	r3, r3
 801a6be:	429a      	cmp	r2, r3
 801a6c0:	d309      	bcc.n	801a6d6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801a6c2:	4b7c      	ldr	r3, [pc, #496]	; (801a8b4 <tcp_input+0x294>)
 801a6c4:	881a      	ldrh	r2, [r3, #0]
 801a6c6:	4b7d      	ldr	r3, [pc, #500]	; (801a8bc <tcp_input+0x29c>)
 801a6c8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801a6ca:	7cbb      	ldrb	r3, [r7, #18]
 801a6cc:	4619      	mov	r1, r3
 801a6ce:	6878      	ldr	r0, [r7, #4]
 801a6d0:	f7fd fe1a 	bl	8018308 <pbuf_remove_header>
 801a6d4:	e04e      	b.n	801a774 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d105      	bne.n	801a6ea <tcp_input+0xca>
 801a6de:	4b70      	ldr	r3, [pc, #448]	; (801a8a0 <tcp_input+0x280>)
 801a6e0:	22c2      	movs	r2, #194	; 0xc2
 801a6e2:	4977      	ldr	r1, [pc, #476]	; (801a8c0 <tcp_input+0x2a0>)
 801a6e4:	4870      	ldr	r0, [pc, #448]	; (801a8a8 <tcp_input+0x288>)
 801a6e6:	f007 fe2b 	bl	8022340 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801a6ea:	2114      	movs	r1, #20
 801a6ec:	6878      	ldr	r0, [r7, #4]
 801a6ee:	f7fd fe0b 	bl	8018308 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	895a      	ldrh	r2, [r3, #10]
 801a6f6:	4b71      	ldr	r3, [pc, #452]	; (801a8bc <tcp_input+0x29c>)
 801a6f8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801a6fa:	4b6e      	ldr	r3, [pc, #440]	; (801a8b4 <tcp_input+0x294>)
 801a6fc:	881a      	ldrh	r2, [r3, #0]
 801a6fe:	4b6f      	ldr	r3, [pc, #444]	; (801a8bc <tcp_input+0x29c>)
 801a700:	881b      	ldrh	r3, [r3, #0]
 801a702:	1ad3      	subs	r3, r2, r3
 801a704:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801a706:	4b6d      	ldr	r3, [pc, #436]	; (801a8bc <tcp_input+0x29c>)
 801a708:	881b      	ldrh	r3, [r3, #0]
 801a70a:	4619      	mov	r1, r3
 801a70c:	6878      	ldr	r0, [r7, #4]
 801a70e:	f7fd fdfb 	bl	8018308 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	895b      	ldrh	r3, [r3, #10]
 801a718:	8a3a      	ldrh	r2, [r7, #16]
 801a71a:	429a      	cmp	r2, r3
 801a71c:	f200 836e 	bhi.w	801adfc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	681b      	ldr	r3, [r3, #0]
 801a724:	685b      	ldr	r3, [r3, #4]
 801a726:	4a64      	ldr	r2, [pc, #400]	; (801a8b8 <tcp_input+0x298>)
 801a728:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	8a3a      	ldrh	r2, [r7, #16]
 801a730:	4611      	mov	r1, r2
 801a732:	4618      	mov	r0, r3
 801a734:	f7fd fde8 	bl	8018308 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	891a      	ldrh	r2, [r3, #8]
 801a73c:	8a3b      	ldrh	r3, [r7, #16]
 801a73e:	1ad3      	subs	r3, r2, r3
 801a740:	b29a      	uxth	r2, r3
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	895b      	ldrh	r3, [r3, #10]
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d005      	beq.n	801a75a <tcp_input+0x13a>
 801a74e:	4b54      	ldr	r3, [pc, #336]	; (801a8a0 <tcp_input+0x280>)
 801a750:	22df      	movs	r2, #223	; 0xdf
 801a752:	495c      	ldr	r1, [pc, #368]	; (801a8c4 <tcp_input+0x2a4>)
 801a754:	4854      	ldr	r0, [pc, #336]	; (801a8a8 <tcp_input+0x288>)
 801a756:	f007 fdf3 	bl	8022340 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	891a      	ldrh	r2, [r3, #8]
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	891b      	ldrh	r3, [r3, #8]
 801a764:	429a      	cmp	r2, r3
 801a766:	d005      	beq.n	801a774 <tcp_input+0x154>
 801a768:	4b4d      	ldr	r3, [pc, #308]	; (801a8a0 <tcp_input+0x280>)
 801a76a:	22e0      	movs	r2, #224	; 0xe0
 801a76c:	4956      	ldr	r1, [pc, #344]	; (801a8c8 <tcp_input+0x2a8>)
 801a76e:	484e      	ldr	r0, [pc, #312]	; (801a8a8 <tcp_input+0x288>)
 801a770:	f007 fde6 	bl	8022340 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801a774:	4b4d      	ldr	r3, [pc, #308]	; (801a8ac <tcp_input+0x28c>)
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	881b      	ldrh	r3, [r3, #0]
 801a77a:	b29b      	uxth	r3, r3
 801a77c:	4a4b      	ldr	r2, [pc, #300]	; (801a8ac <tcp_input+0x28c>)
 801a77e:	6814      	ldr	r4, [r2, #0]
 801a780:	4618      	mov	r0, r3
 801a782:	f7fc f99d 	bl	8016ac0 <lwip_htons>
 801a786:	4603      	mov	r3, r0
 801a788:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801a78a:	4b48      	ldr	r3, [pc, #288]	; (801a8ac <tcp_input+0x28c>)
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	885b      	ldrh	r3, [r3, #2]
 801a790:	b29b      	uxth	r3, r3
 801a792:	4a46      	ldr	r2, [pc, #280]	; (801a8ac <tcp_input+0x28c>)
 801a794:	6814      	ldr	r4, [r2, #0]
 801a796:	4618      	mov	r0, r3
 801a798:	f7fc f992 	bl	8016ac0 <lwip_htons>
 801a79c:	4603      	mov	r3, r0
 801a79e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801a7a0:	4b42      	ldr	r3, [pc, #264]	; (801a8ac <tcp_input+0x28c>)
 801a7a2:	681b      	ldr	r3, [r3, #0]
 801a7a4:	685b      	ldr	r3, [r3, #4]
 801a7a6:	4a41      	ldr	r2, [pc, #260]	; (801a8ac <tcp_input+0x28c>)
 801a7a8:	6814      	ldr	r4, [r2, #0]
 801a7aa:	4618      	mov	r0, r3
 801a7ac:	f7fc f99d 	bl	8016aea <lwip_htonl>
 801a7b0:	4603      	mov	r3, r0
 801a7b2:	6063      	str	r3, [r4, #4]
 801a7b4:	6863      	ldr	r3, [r4, #4]
 801a7b6:	4a45      	ldr	r2, [pc, #276]	; (801a8cc <tcp_input+0x2ac>)
 801a7b8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801a7ba:	4b3c      	ldr	r3, [pc, #240]	; (801a8ac <tcp_input+0x28c>)
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	689b      	ldr	r3, [r3, #8]
 801a7c0:	4a3a      	ldr	r2, [pc, #232]	; (801a8ac <tcp_input+0x28c>)
 801a7c2:	6814      	ldr	r4, [r2, #0]
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	f7fc f990 	bl	8016aea <lwip_htonl>
 801a7ca:	4603      	mov	r3, r0
 801a7cc:	60a3      	str	r3, [r4, #8]
 801a7ce:	68a3      	ldr	r3, [r4, #8]
 801a7d0:	4a3f      	ldr	r2, [pc, #252]	; (801a8d0 <tcp_input+0x2b0>)
 801a7d2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801a7d4:	4b35      	ldr	r3, [pc, #212]	; (801a8ac <tcp_input+0x28c>)
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	89db      	ldrh	r3, [r3, #14]
 801a7da:	b29b      	uxth	r3, r3
 801a7dc:	4a33      	ldr	r2, [pc, #204]	; (801a8ac <tcp_input+0x28c>)
 801a7de:	6814      	ldr	r4, [r2, #0]
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	f7fc f96d 	bl	8016ac0 <lwip_htons>
 801a7e6:	4603      	mov	r3, r0
 801a7e8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801a7ea:	4b30      	ldr	r3, [pc, #192]	; (801a8ac <tcp_input+0x28c>)
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	899b      	ldrh	r3, [r3, #12]
 801a7f0:	b29b      	uxth	r3, r3
 801a7f2:	4618      	mov	r0, r3
 801a7f4:	f7fc f964 	bl	8016ac0 <lwip_htons>
 801a7f8:	4603      	mov	r3, r0
 801a7fa:	b2db      	uxtb	r3, r3
 801a7fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a800:	b2da      	uxtb	r2, r3
 801a802:	4b34      	ldr	r3, [pc, #208]	; (801a8d4 <tcp_input+0x2b4>)
 801a804:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	891a      	ldrh	r2, [r3, #8]
 801a80a:	4b33      	ldr	r3, [pc, #204]	; (801a8d8 <tcp_input+0x2b8>)
 801a80c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801a80e:	4b31      	ldr	r3, [pc, #196]	; (801a8d4 <tcp_input+0x2b4>)
 801a810:	781b      	ldrb	r3, [r3, #0]
 801a812:	f003 0303 	and.w	r3, r3, #3
 801a816:	2b00      	cmp	r3, #0
 801a818:	d00c      	beq.n	801a834 <tcp_input+0x214>
    tcplen++;
 801a81a:	4b2f      	ldr	r3, [pc, #188]	; (801a8d8 <tcp_input+0x2b8>)
 801a81c:	881b      	ldrh	r3, [r3, #0]
 801a81e:	3301      	adds	r3, #1
 801a820:	b29a      	uxth	r2, r3
 801a822:	4b2d      	ldr	r3, [pc, #180]	; (801a8d8 <tcp_input+0x2b8>)
 801a824:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	891a      	ldrh	r2, [r3, #8]
 801a82a:	4b2b      	ldr	r3, [pc, #172]	; (801a8d8 <tcp_input+0x2b8>)
 801a82c:	881b      	ldrh	r3, [r3, #0]
 801a82e:	429a      	cmp	r2, r3
 801a830:	f200 82e6 	bhi.w	801ae00 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801a834:	2300      	movs	r3, #0
 801a836:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a838:	4b28      	ldr	r3, [pc, #160]	; (801a8dc <tcp_input+0x2bc>)
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	61fb      	str	r3, [r7, #28]
 801a83e:	e09d      	b.n	801a97c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801a840:	69fb      	ldr	r3, [r7, #28]
 801a842:	7d1b      	ldrb	r3, [r3, #20]
 801a844:	2b00      	cmp	r3, #0
 801a846:	d105      	bne.n	801a854 <tcp_input+0x234>
 801a848:	4b15      	ldr	r3, [pc, #84]	; (801a8a0 <tcp_input+0x280>)
 801a84a:	22fb      	movs	r2, #251	; 0xfb
 801a84c:	4924      	ldr	r1, [pc, #144]	; (801a8e0 <tcp_input+0x2c0>)
 801a84e:	4816      	ldr	r0, [pc, #88]	; (801a8a8 <tcp_input+0x288>)
 801a850:	f007 fd76 	bl	8022340 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801a854:	69fb      	ldr	r3, [r7, #28]
 801a856:	7d1b      	ldrb	r3, [r3, #20]
 801a858:	2b0a      	cmp	r3, #10
 801a85a:	d105      	bne.n	801a868 <tcp_input+0x248>
 801a85c:	4b10      	ldr	r3, [pc, #64]	; (801a8a0 <tcp_input+0x280>)
 801a85e:	22fc      	movs	r2, #252	; 0xfc
 801a860:	4920      	ldr	r1, [pc, #128]	; (801a8e4 <tcp_input+0x2c4>)
 801a862:	4811      	ldr	r0, [pc, #68]	; (801a8a8 <tcp_input+0x288>)
 801a864:	f007 fd6c 	bl	8022340 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801a868:	69fb      	ldr	r3, [r7, #28]
 801a86a:	7d1b      	ldrb	r3, [r3, #20]
 801a86c:	2b01      	cmp	r3, #1
 801a86e:	d105      	bne.n	801a87c <tcp_input+0x25c>
 801a870:	4b0b      	ldr	r3, [pc, #44]	; (801a8a0 <tcp_input+0x280>)
 801a872:	22fd      	movs	r2, #253	; 0xfd
 801a874:	491c      	ldr	r1, [pc, #112]	; (801a8e8 <tcp_input+0x2c8>)
 801a876:	480c      	ldr	r0, [pc, #48]	; (801a8a8 <tcp_input+0x288>)
 801a878:	f007 fd62 	bl	8022340 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a87c:	69fb      	ldr	r3, [r7, #28]
 801a87e:	7a1b      	ldrb	r3, [r3, #8]
 801a880:	2b00      	cmp	r3, #0
 801a882:	d033      	beq.n	801a8ec <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a884:	69fb      	ldr	r3, [r7, #28]
 801a886:	7a1a      	ldrb	r2, [r3, #8]
 801a888:	4b09      	ldr	r3, [pc, #36]	; (801a8b0 <tcp_input+0x290>)
 801a88a:	685b      	ldr	r3, [r3, #4]
 801a88c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a890:	3301      	adds	r3, #1
 801a892:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a894:	429a      	cmp	r2, r3
 801a896:	d029      	beq.n	801a8ec <tcp_input+0x2cc>
      prev = pcb;
 801a898:	69fb      	ldr	r3, [r7, #28]
 801a89a:	61bb      	str	r3, [r7, #24]
      continue;
 801a89c:	e06b      	b.n	801a976 <tcp_input+0x356>
 801a89e:	bf00      	nop
 801a8a0:	080255f8 	.word	0x080255f8
 801a8a4:	0802562c 	.word	0x0802562c
 801a8a8:	08025644 	.word	0x08025644
 801a8ac:	2002f00c 	.word	0x2002f00c
 801a8b0:	2002bee4 	.word	0x2002bee4
 801a8b4:	2002f010 	.word	0x2002f010
 801a8b8:	2002f014 	.word	0x2002f014
 801a8bc:	2002f012 	.word	0x2002f012
 801a8c0:	0802566c 	.word	0x0802566c
 801a8c4:	0802567c 	.word	0x0802567c
 801a8c8:	08025688 	.word	0x08025688
 801a8cc:	2002f01c 	.word	0x2002f01c
 801a8d0:	2002f020 	.word	0x2002f020
 801a8d4:	2002f028 	.word	0x2002f028
 801a8d8:	2002f026 	.word	0x2002f026
 801a8dc:	2002eff0 	.word	0x2002eff0
 801a8e0:	080256a8 	.word	0x080256a8
 801a8e4:	080256d0 	.word	0x080256d0
 801a8e8:	080256fc 	.word	0x080256fc
    }

    if (pcb->remote_port == tcphdr->src &&
 801a8ec:	69fb      	ldr	r3, [r7, #28]
 801a8ee:	8b1a      	ldrh	r2, [r3, #24]
 801a8f0:	4b72      	ldr	r3, [pc, #456]	; (801aabc <tcp_input+0x49c>)
 801a8f2:	681b      	ldr	r3, [r3, #0]
 801a8f4:	881b      	ldrh	r3, [r3, #0]
 801a8f6:	b29b      	uxth	r3, r3
 801a8f8:	429a      	cmp	r2, r3
 801a8fa:	d13a      	bne.n	801a972 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801a8fc:	69fb      	ldr	r3, [r7, #28]
 801a8fe:	8ada      	ldrh	r2, [r3, #22]
 801a900:	4b6e      	ldr	r3, [pc, #440]	; (801aabc <tcp_input+0x49c>)
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	885b      	ldrh	r3, [r3, #2]
 801a906:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801a908:	429a      	cmp	r2, r3
 801a90a:	d132      	bne.n	801a972 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a90c:	69fb      	ldr	r3, [r7, #28]
 801a90e:	685a      	ldr	r2, [r3, #4]
 801a910:	4b6b      	ldr	r3, [pc, #428]	; (801aac0 <tcp_input+0x4a0>)
 801a912:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801a914:	429a      	cmp	r2, r3
 801a916:	d12c      	bne.n	801a972 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a918:	69fb      	ldr	r3, [r7, #28]
 801a91a:	681a      	ldr	r2, [r3, #0]
 801a91c:	4b68      	ldr	r3, [pc, #416]	; (801aac0 <tcp_input+0x4a0>)
 801a91e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a920:	429a      	cmp	r2, r3
 801a922:	d126      	bne.n	801a972 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801a924:	69fb      	ldr	r3, [r7, #28]
 801a926:	68db      	ldr	r3, [r3, #12]
 801a928:	69fa      	ldr	r2, [r7, #28]
 801a92a:	429a      	cmp	r2, r3
 801a92c:	d106      	bne.n	801a93c <tcp_input+0x31c>
 801a92e:	4b65      	ldr	r3, [pc, #404]	; (801aac4 <tcp_input+0x4a4>)
 801a930:	f240 120d 	movw	r2, #269	; 0x10d
 801a934:	4964      	ldr	r1, [pc, #400]	; (801aac8 <tcp_input+0x4a8>)
 801a936:	4865      	ldr	r0, [pc, #404]	; (801aacc <tcp_input+0x4ac>)
 801a938:	f007 fd02 	bl	8022340 <iprintf>
      if (prev != NULL) {
 801a93c:	69bb      	ldr	r3, [r7, #24]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d00a      	beq.n	801a958 <tcp_input+0x338>
        prev->next = pcb->next;
 801a942:	69fb      	ldr	r3, [r7, #28]
 801a944:	68da      	ldr	r2, [r3, #12]
 801a946:	69bb      	ldr	r3, [r7, #24]
 801a948:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801a94a:	4b61      	ldr	r3, [pc, #388]	; (801aad0 <tcp_input+0x4b0>)
 801a94c:	681a      	ldr	r2, [r3, #0]
 801a94e:	69fb      	ldr	r3, [r7, #28]
 801a950:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801a952:	4a5f      	ldr	r2, [pc, #380]	; (801aad0 <tcp_input+0x4b0>)
 801a954:	69fb      	ldr	r3, [r7, #28]
 801a956:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801a958:	69fb      	ldr	r3, [r7, #28]
 801a95a:	68db      	ldr	r3, [r3, #12]
 801a95c:	69fa      	ldr	r2, [r7, #28]
 801a95e:	429a      	cmp	r2, r3
 801a960:	d111      	bne.n	801a986 <tcp_input+0x366>
 801a962:	4b58      	ldr	r3, [pc, #352]	; (801aac4 <tcp_input+0x4a4>)
 801a964:	f240 1215 	movw	r2, #277	; 0x115
 801a968:	495a      	ldr	r1, [pc, #360]	; (801aad4 <tcp_input+0x4b4>)
 801a96a:	4858      	ldr	r0, [pc, #352]	; (801aacc <tcp_input+0x4ac>)
 801a96c:	f007 fce8 	bl	8022340 <iprintf>
      break;
 801a970:	e009      	b.n	801a986 <tcp_input+0x366>
    }
    prev = pcb;
 801a972:	69fb      	ldr	r3, [r7, #28]
 801a974:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a976:	69fb      	ldr	r3, [r7, #28]
 801a978:	68db      	ldr	r3, [r3, #12]
 801a97a:	61fb      	str	r3, [r7, #28]
 801a97c:	69fb      	ldr	r3, [r7, #28]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	f47f af5e 	bne.w	801a840 <tcp_input+0x220>
 801a984:	e000      	b.n	801a988 <tcp_input+0x368>
      break;
 801a986:	bf00      	nop
  }

  if (pcb == NULL) {
 801a988:	69fb      	ldr	r3, [r7, #28]
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	f040 80aa 	bne.w	801aae4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a990:	4b51      	ldr	r3, [pc, #324]	; (801aad8 <tcp_input+0x4b8>)
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	61fb      	str	r3, [r7, #28]
 801a996:	e03f      	b.n	801aa18 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a998:	69fb      	ldr	r3, [r7, #28]
 801a99a:	7d1b      	ldrb	r3, [r3, #20]
 801a99c:	2b0a      	cmp	r3, #10
 801a99e:	d006      	beq.n	801a9ae <tcp_input+0x38e>
 801a9a0:	4b48      	ldr	r3, [pc, #288]	; (801aac4 <tcp_input+0x4a4>)
 801a9a2:	f240 121f 	movw	r2, #287	; 0x11f
 801a9a6:	494d      	ldr	r1, [pc, #308]	; (801aadc <tcp_input+0x4bc>)
 801a9a8:	4848      	ldr	r0, [pc, #288]	; (801aacc <tcp_input+0x4ac>)
 801a9aa:	f007 fcc9 	bl	8022340 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a9ae:	69fb      	ldr	r3, [r7, #28]
 801a9b0:	7a1b      	ldrb	r3, [r3, #8]
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d009      	beq.n	801a9ca <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a9b6:	69fb      	ldr	r3, [r7, #28]
 801a9b8:	7a1a      	ldrb	r2, [r3, #8]
 801a9ba:	4b41      	ldr	r3, [pc, #260]	; (801aac0 <tcp_input+0x4a0>)
 801a9bc:	685b      	ldr	r3, [r3, #4]
 801a9be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a9c2:	3301      	adds	r3, #1
 801a9c4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a9c6:	429a      	cmp	r2, r3
 801a9c8:	d122      	bne.n	801aa10 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801a9ca:	69fb      	ldr	r3, [r7, #28]
 801a9cc:	8b1a      	ldrh	r2, [r3, #24]
 801a9ce:	4b3b      	ldr	r3, [pc, #236]	; (801aabc <tcp_input+0x49c>)
 801a9d0:	681b      	ldr	r3, [r3, #0]
 801a9d2:	881b      	ldrh	r3, [r3, #0]
 801a9d4:	b29b      	uxth	r3, r3
 801a9d6:	429a      	cmp	r2, r3
 801a9d8:	d11b      	bne.n	801aa12 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801a9da:	69fb      	ldr	r3, [r7, #28]
 801a9dc:	8ada      	ldrh	r2, [r3, #22]
 801a9de:	4b37      	ldr	r3, [pc, #220]	; (801aabc <tcp_input+0x49c>)
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	885b      	ldrh	r3, [r3, #2]
 801a9e4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801a9e6:	429a      	cmp	r2, r3
 801a9e8:	d113      	bne.n	801aa12 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a9ea:	69fb      	ldr	r3, [r7, #28]
 801a9ec:	685a      	ldr	r2, [r3, #4]
 801a9ee:	4b34      	ldr	r3, [pc, #208]	; (801aac0 <tcp_input+0x4a0>)
 801a9f0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801a9f2:	429a      	cmp	r2, r3
 801a9f4:	d10d      	bne.n	801aa12 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a9f6:	69fb      	ldr	r3, [r7, #28]
 801a9f8:	681a      	ldr	r2, [r3, #0]
 801a9fa:	4b31      	ldr	r3, [pc, #196]	; (801aac0 <tcp_input+0x4a0>)
 801a9fc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a9fe:	429a      	cmp	r2, r3
 801aa00:	d107      	bne.n	801aa12 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801aa02:	69f8      	ldr	r0, [r7, #28]
 801aa04:	f000 fb56 	bl	801b0b4 <tcp_timewait_input>
        }
        pbuf_free(p);
 801aa08:	6878      	ldr	r0, [r7, #4]
 801aa0a:	f7fd fd03 	bl	8018414 <pbuf_free>
        return;
 801aa0e:	e1fd      	b.n	801ae0c <tcp_input+0x7ec>
        continue;
 801aa10:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801aa12:	69fb      	ldr	r3, [r7, #28]
 801aa14:	68db      	ldr	r3, [r3, #12]
 801aa16:	61fb      	str	r3, [r7, #28]
 801aa18:	69fb      	ldr	r3, [r7, #28]
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d1bc      	bne.n	801a998 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801aa1e:	2300      	movs	r3, #0
 801aa20:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801aa22:	4b2f      	ldr	r3, [pc, #188]	; (801aae0 <tcp_input+0x4c0>)
 801aa24:	681b      	ldr	r3, [r3, #0]
 801aa26:	617b      	str	r3, [r7, #20]
 801aa28:	e02a      	b.n	801aa80 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801aa2a:	697b      	ldr	r3, [r7, #20]
 801aa2c:	7a1b      	ldrb	r3, [r3, #8]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d00c      	beq.n	801aa4c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801aa32:	697b      	ldr	r3, [r7, #20]
 801aa34:	7a1a      	ldrb	r2, [r3, #8]
 801aa36:	4b22      	ldr	r3, [pc, #136]	; (801aac0 <tcp_input+0x4a0>)
 801aa38:	685b      	ldr	r3, [r3, #4]
 801aa3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801aa3e:	3301      	adds	r3, #1
 801aa40:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801aa42:	429a      	cmp	r2, r3
 801aa44:	d002      	beq.n	801aa4c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801aa46:	697b      	ldr	r3, [r7, #20]
 801aa48:	61bb      	str	r3, [r7, #24]
        continue;
 801aa4a:	e016      	b.n	801aa7a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801aa4c:	697b      	ldr	r3, [r7, #20]
 801aa4e:	8ada      	ldrh	r2, [r3, #22]
 801aa50:	4b1a      	ldr	r3, [pc, #104]	; (801aabc <tcp_input+0x49c>)
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	885b      	ldrh	r3, [r3, #2]
 801aa56:	b29b      	uxth	r3, r3
 801aa58:	429a      	cmp	r2, r3
 801aa5a:	d10c      	bne.n	801aa76 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801aa5c:	697b      	ldr	r3, [r7, #20]
 801aa5e:	681a      	ldr	r2, [r3, #0]
 801aa60:	4b17      	ldr	r3, [pc, #92]	; (801aac0 <tcp_input+0x4a0>)
 801aa62:	695b      	ldr	r3, [r3, #20]
 801aa64:	429a      	cmp	r2, r3
 801aa66:	d00f      	beq.n	801aa88 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801aa68:	697b      	ldr	r3, [r7, #20]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d00d      	beq.n	801aa8a <tcp_input+0x46a>
 801aa6e:	697b      	ldr	r3, [r7, #20]
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d009      	beq.n	801aa8a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801aa76:	697b      	ldr	r3, [r7, #20]
 801aa78:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801aa7a:	697b      	ldr	r3, [r7, #20]
 801aa7c:	68db      	ldr	r3, [r3, #12]
 801aa7e:	617b      	str	r3, [r7, #20]
 801aa80:	697b      	ldr	r3, [r7, #20]
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d1d1      	bne.n	801aa2a <tcp_input+0x40a>
 801aa86:	e000      	b.n	801aa8a <tcp_input+0x46a>
            break;
 801aa88:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801aa8a:	697b      	ldr	r3, [r7, #20]
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	d029      	beq.n	801aae4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801aa90:	69bb      	ldr	r3, [r7, #24]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d00a      	beq.n	801aaac <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801aa96:	697b      	ldr	r3, [r7, #20]
 801aa98:	68da      	ldr	r2, [r3, #12]
 801aa9a:	69bb      	ldr	r3, [r7, #24]
 801aa9c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801aa9e:	4b10      	ldr	r3, [pc, #64]	; (801aae0 <tcp_input+0x4c0>)
 801aaa0:	681a      	ldr	r2, [r3, #0]
 801aaa2:	697b      	ldr	r3, [r7, #20]
 801aaa4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801aaa6:	4a0e      	ldr	r2, [pc, #56]	; (801aae0 <tcp_input+0x4c0>)
 801aaa8:	697b      	ldr	r3, [r7, #20]
 801aaaa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801aaac:	6978      	ldr	r0, [r7, #20]
 801aaae:	f000 fa03 	bl	801aeb8 <tcp_listen_input>
      }
      pbuf_free(p);
 801aab2:	6878      	ldr	r0, [r7, #4]
 801aab4:	f7fd fcae 	bl	8018414 <pbuf_free>
      return;
 801aab8:	e1a8      	b.n	801ae0c <tcp_input+0x7ec>
 801aaba:	bf00      	nop
 801aabc:	2002f00c 	.word	0x2002f00c
 801aac0:	2002bee4 	.word	0x2002bee4
 801aac4:	080255f8 	.word	0x080255f8
 801aac8:	08025724 	.word	0x08025724
 801aacc:	08025644 	.word	0x08025644
 801aad0:	2002eff0 	.word	0x2002eff0
 801aad4:	08025750 	.word	0x08025750
 801aad8:	2002eff4 	.word	0x2002eff4
 801aadc:	0802577c 	.word	0x0802577c
 801aae0:	2002efec 	.word	0x2002efec
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801aae4:	69fb      	ldr	r3, [r7, #28]
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	f000 8158 	beq.w	801ad9c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801aaec:	4b95      	ldr	r3, [pc, #596]	; (801ad44 <tcp_input+0x724>)
 801aaee:	2200      	movs	r2, #0
 801aaf0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	891a      	ldrh	r2, [r3, #8]
 801aaf6:	4b93      	ldr	r3, [pc, #588]	; (801ad44 <tcp_input+0x724>)
 801aaf8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801aafa:	4a92      	ldr	r2, [pc, #584]	; (801ad44 <tcp_input+0x724>)
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801ab00:	4b91      	ldr	r3, [pc, #580]	; (801ad48 <tcp_input+0x728>)
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	4a8f      	ldr	r2, [pc, #572]	; (801ad44 <tcp_input+0x724>)
 801ab06:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801ab08:	4b90      	ldr	r3, [pc, #576]	; (801ad4c <tcp_input+0x72c>)
 801ab0a:	2200      	movs	r2, #0
 801ab0c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801ab0e:	4b90      	ldr	r3, [pc, #576]	; (801ad50 <tcp_input+0x730>)
 801ab10:	2200      	movs	r2, #0
 801ab12:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801ab14:	4b8f      	ldr	r3, [pc, #572]	; (801ad54 <tcp_input+0x734>)
 801ab16:	2200      	movs	r2, #0
 801ab18:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801ab1a:	4b8f      	ldr	r3, [pc, #572]	; (801ad58 <tcp_input+0x738>)
 801ab1c:	781b      	ldrb	r3, [r3, #0]
 801ab1e:	f003 0308 	and.w	r3, r3, #8
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d006      	beq.n	801ab34 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	7b5b      	ldrb	r3, [r3, #13]
 801ab2a:	f043 0301 	orr.w	r3, r3, #1
 801ab2e:	b2da      	uxtb	r2, r3
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801ab34:	69fb      	ldr	r3, [r7, #28]
 801ab36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d017      	beq.n	801ab6c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801ab3c:	69f8      	ldr	r0, [r7, #28]
 801ab3e:	f7ff f85b 	bl	8019bf8 <tcp_process_refused_data>
 801ab42:	4603      	mov	r3, r0
 801ab44:	f113 0f0d 	cmn.w	r3, #13
 801ab48:	d007      	beq.n	801ab5a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801ab4a:	69fb      	ldr	r3, [r7, #28]
 801ab4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d00c      	beq.n	801ab6c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801ab52:	4b82      	ldr	r3, [pc, #520]	; (801ad5c <tcp_input+0x73c>)
 801ab54:	881b      	ldrh	r3, [r3, #0]
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d008      	beq.n	801ab6c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801ab5a:	69fb      	ldr	r3, [r7, #28]
 801ab5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	f040 80e3 	bne.w	801ad2a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801ab64:	69f8      	ldr	r0, [r7, #28]
 801ab66:	f003 fe05 	bl	801e774 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801ab6a:	e0de      	b.n	801ad2a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801ab6c:	4a7c      	ldr	r2, [pc, #496]	; (801ad60 <tcp_input+0x740>)
 801ab6e:	69fb      	ldr	r3, [r7, #28]
 801ab70:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801ab72:	69f8      	ldr	r0, [r7, #28]
 801ab74:	f000 fb18 	bl	801b1a8 <tcp_process>
 801ab78:	4603      	mov	r3, r0
 801ab7a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801ab7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ab80:	f113 0f0d 	cmn.w	r3, #13
 801ab84:	f000 80d3 	beq.w	801ad2e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801ab88:	4b71      	ldr	r3, [pc, #452]	; (801ad50 <tcp_input+0x730>)
 801ab8a:	781b      	ldrb	r3, [r3, #0]
 801ab8c:	f003 0308 	and.w	r3, r3, #8
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	d015      	beq.n	801abc0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801ab94:	69fb      	ldr	r3, [r7, #28]
 801ab96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d008      	beq.n	801abb0 <tcp_input+0x590>
 801ab9e:	69fb      	ldr	r3, [r7, #28]
 801aba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801aba4:	69fa      	ldr	r2, [r7, #28]
 801aba6:	6912      	ldr	r2, [r2, #16]
 801aba8:	f06f 010d 	mvn.w	r1, #13
 801abac:	4610      	mov	r0, r2
 801abae:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801abb0:	69f9      	ldr	r1, [r7, #28]
 801abb2:	486c      	ldr	r0, [pc, #432]	; (801ad64 <tcp_input+0x744>)
 801abb4:	f7ff fbbc 	bl	801a330 <tcp_pcb_remove>
        tcp_free(pcb);
 801abb8:	69f8      	ldr	r0, [r7, #28]
 801abba:	f7fd fed7 	bl	801896c <tcp_free>
 801abbe:	e0da      	b.n	801ad76 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801abc0:	2300      	movs	r3, #0
 801abc2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801abc4:	4b63      	ldr	r3, [pc, #396]	; (801ad54 <tcp_input+0x734>)
 801abc6:	881b      	ldrh	r3, [r3, #0]
 801abc8:	2b00      	cmp	r3, #0
 801abca:	d01d      	beq.n	801ac08 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801abcc:	4b61      	ldr	r3, [pc, #388]	; (801ad54 <tcp_input+0x734>)
 801abce:	881b      	ldrh	r3, [r3, #0]
 801abd0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801abd2:	69fb      	ldr	r3, [r7, #28]
 801abd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d00a      	beq.n	801abf2 <tcp_input+0x5d2>
 801abdc:	69fb      	ldr	r3, [r7, #28]
 801abde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801abe2:	69fa      	ldr	r2, [r7, #28]
 801abe4:	6910      	ldr	r0, [r2, #16]
 801abe6:	89fa      	ldrh	r2, [r7, #14]
 801abe8:	69f9      	ldr	r1, [r7, #28]
 801abea:	4798      	blx	r3
 801abec:	4603      	mov	r3, r0
 801abee:	74fb      	strb	r3, [r7, #19]
 801abf0:	e001      	b.n	801abf6 <tcp_input+0x5d6>
 801abf2:	2300      	movs	r3, #0
 801abf4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801abf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801abfa:	f113 0f0d 	cmn.w	r3, #13
 801abfe:	f000 8098 	beq.w	801ad32 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801ac02:	4b54      	ldr	r3, [pc, #336]	; (801ad54 <tcp_input+0x734>)
 801ac04:	2200      	movs	r2, #0
 801ac06:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801ac08:	69f8      	ldr	r0, [r7, #28]
 801ac0a:	f000 f915 	bl	801ae38 <tcp_input_delayed_close>
 801ac0e:	4603      	mov	r3, r0
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	f040 8090 	bne.w	801ad36 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801ac16:	4b4d      	ldr	r3, [pc, #308]	; (801ad4c <tcp_input+0x72c>)
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d041      	beq.n	801aca2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801ac1e:	69fb      	ldr	r3, [r7, #28]
 801ac20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d006      	beq.n	801ac34 <tcp_input+0x614>
 801ac26:	4b50      	ldr	r3, [pc, #320]	; (801ad68 <tcp_input+0x748>)
 801ac28:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801ac2c:	494f      	ldr	r1, [pc, #316]	; (801ad6c <tcp_input+0x74c>)
 801ac2e:	4850      	ldr	r0, [pc, #320]	; (801ad70 <tcp_input+0x750>)
 801ac30:	f007 fb86 	bl	8022340 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801ac34:	69fb      	ldr	r3, [r7, #28]
 801ac36:	8b5b      	ldrh	r3, [r3, #26]
 801ac38:	f003 0310 	and.w	r3, r3, #16
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d008      	beq.n	801ac52 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801ac40:	4b42      	ldr	r3, [pc, #264]	; (801ad4c <tcp_input+0x72c>)
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	4618      	mov	r0, r3
 801ac46:	f7fd fbe5 	bl	8018414 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801ac4a:	69f8      	ldr	r0, [r7, #28]
 801ac4c:	f7fe f9d2 	bl	8018ff4 <tcp_abort>
            goto aborted;
 801ac50:	e091      	b.n	801ad76 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801ac52:	69fb      	ldr	r3, [r7, #28]
 801ac54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d00c      	beq.n	801ac76 <tcp_input+0x656>
 801ac5c:	69fb      	ldr	r3, [r7, #28]
 801ac5e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801ac62:	69fb      	ldr	r3, [r7, #28]
 801ac64:	6918      	ldr	r0, [r3, #16]
 801ac66:	4b39      	ldr	r3, [pc, #228]	; (801ad4c <tcp_input+0x72c>)
 801ac68:	681a      	ldr	r2, [r3, #0]
 801ac6a:	2300      	movs	r3, #0
 801ac6c:	69f9      	ldr	r1, [r7, #28]
 801ac6e:	47a0      	blx	r4
 801ac70:	4603      	mov	r3, r0
 801ac72:	74fb      	strb	r3, [r7, #19]
 801ac74:	e008      	b.n	801ac88 <tcp_input+0x668>
 801ac76:	4b35      	ldr	r3, [pc, #212]	; (801ad4c <tcp_input+0x72c>)
 801ac78:	681a      	ldr	r2, [r3, #0]
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	69f9      	ldr	r1, [r7, #28]
 801ac7e:	2000      	movs	r0, #0
 801ac80:	f7ff f890 	bl	8019da4 <tcp_recv_null>
 801ac84:	4603      	mov	r3, r0
 801ac86:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801ac88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ac8c:	f113 0f0d 	cmn.w	r3, #13
 801ac90:	d053      	beq.n	801ad3a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801ac92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d003      	beq.n	801aca2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801ac9a:	4b2c      	ldr	r3, [pc, #176]	; (801ad4c <tcp_input+0x72c>)
 801ac9c:	681a      	ldr	r2, [r3, #0]
 801ac9e:	69fb      	ldr	r3, [r7, #28]
 801aca0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801aca2:	4b2b      	ldr	r3, [pc, #172]	; (801ad50 <tcp_input+0x730>)
 801aca4:	781b      	ldrb	r3, [r3, #0]
 801aca6:	f003 0320 	and.w	r3, r3, #32
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d030      	beq.n	801ad10 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801acae:	69fb      	ldr	r3, [r7, #28]
 801acb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d009      	beq.n	801acca <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801acb6:	69fb      	ldr	r3, [r7, #28]
 801acb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801acba:	7b5a      	ldrb	r2, [r3, #13]
 801acbc:	69fb      	ldr	r3, [r7, #28]
 801acbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801acc0:	f042 0220 	orr.w	r2, r2, #32
 801acc4:	b2d2      	uxtb	r2, r2
 801acc6:	735a      	strb	r2, [r3, #13]
 801acc8:	e022      	b.n	801ad10 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801acca:	69fb      	ldr	r3, [r7, #28]
 801accc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801acce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801acd2:	d005      	beq.n	801ace0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801acd4:	69fb      	ldr	r3, [r7, #28]
 801acd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801acd8:	3301      	adds	r3, #1
 801acda:	b29a      	uxth	r2, r3
 801acdc:	69fb      	ldr	r3, [r7, #28]
 801acde:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801ace0:	69fb      	ldr	r3, [r7, #28]
 801ace2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	d00b      	beq.n	801ad02 <tcp_input+0x6e2>
 801acea:	69fb      	ldr	r3, [r7, #28]
 801acec:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801acf0:	69fb      	ldr	r3, [r7, #28]
 801acf2:	6918      	ldr	r0, [r3, #16]
 801acf4:	2300      	movs	r3, #0
 801acf6:	2200      	movs	r2, #0
 801acf8:	69f9      	ldr	r1, [r7, #28]
 801acfa:	47a0      	blx	r4
 801acfc:	4603      	mov	r3, r0
 801acfe:	74fb      	strb	r3, [r7, #19]
 801ad00:	e001      	b.n	801ad06 <tcp_input+0x6e6>
 801ad02:	2300      	movs	r3, #0
 801ad04:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801ad06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ad0a:	f113 0f0d 	cmn.w	r3, #13
 801ad0e:	d016      	beq.n	801ad3e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801ad10:	4b13      	ldr	r3, [pc, #76]	; (801ad60 <tcp_input+0x740>)
 801ad12:	2200      	movs	r2, #0
 801ad14:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801ad16:	69f8      	ldr	r0, [r7, #28]
 801ad18:	f000 f88e 	bl	801ae38 <tcp_input_delayed_close>
 801ad1c:	4603      	mov	r3, r0
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d128      	bne.n	801ad74 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801ad22:	69f8      	ldr	r0, [r7, #28]
 801ad24:	f002 ff20 	bl	801db68 <tcp_output>
 801ad28:	e025      	b.n	801ad76 <tcp_input+0x756>
        goto aborted;
 801ad2a:	bf00      	nop
 801ad2c:	e023      	b.n	801ad76 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801ad2e:	bf00      	nop
 801ad30:	e021      	b.n	801ad76 <tcp_input+0x756>
              goto aborted;
 801ad32:	bf00      	nop
 801ad34:	e01f      	b.n	801ad76 <tcp_input+0x756>
          goto aborted;
 801ad36:	bf00      	nop
 801ad38:	e01d      	b.n	801ad76 <tcp_input+0x756>
            goto aborted;
 801ad3a:	bf00      	nop
 801ad3c:	e01b      	b.n	801ad76 <tcp_input+0x756>
              goto aborted;
 801ad3e:	bf00      	nop
 801ad40:	e019      	b.n	801ad76 <tcp_input+0x756>
 801ad42:	bf00      	nop
 801ad44:	2002effc 	.word	0x2002effc
 801ad48:	2002f00c 	.word	0x2002f00c
 801ad4c:	2002f02c 	.word	0x2002f02c
 801ad50:	2002f029 	.word	0x2002f029
 801ad54:	2002f024 	.word	0x2002f024
 801ad58:	2002f028 	.word	0x2002f028
 801ad5c:	2002f026 	.word	0x2002f026
 801ad60:	2002f030 	.word	0x2002f030
 801ad64:	2002eff0 	.word	0x2002eff0
 801ad68:	080255f8 	.word	0x080255f8
 801ad6c:	080257ac 	.word	0x080257ac
 801ad70:	08025644 	.word	0x08025644
          goto aborted;
 801ad74:	bf00      	nop
    tcp_input_pcb = NULL;
 801ad76:	4b27      	ldr	r3, [pc, #156]	; (801ae14 <tcp_input+0x7f4>)
 801ad78:	2200      	movs	r2, #0
 801ad7a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801ad7c:	4b26      	ldr	r3, [pc, #152]	; (801ae18 <tcp_input+0x7f8>)
 801ad7e:	2200      	movs	r2, #0
 801ad80:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801ad82:	4b26      	ldr	r3, [pc, #152]	; (801ae1c <tcp_input+0x7fc>)
 801ad84:	685b      	ldr	r3, [r3, #4]
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d03f      	beq.n	801ae0a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801ad8a:	4b24      	ldr	r3, [pc, #144]	; (801ae1c <tcp_input+0x7fc>)
 801ad8c:	685b      	ldr	r3, [r3, #4]
 801ad8e:	4618      	mov	r0, r3
 801ad90:	f7fd fb40 	bl	8018414 <pbuf_free>
      inseg.p = NULL;
 801ad94:	4b21      	ldr	r3, [pc, #132]	; (801ae1c <tcp_input+0x7fc>)
 801ad96:	2200      	movs	r2, #0
 801ad98:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801ad9a:	e036      	b.n	801ae0a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801ad9c:	4b20      	ldr	r3, [pc, #128]	; (801ae20 <tcp_input+0x800>)
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	899b      	ldrh	r3, [r3, #12]
 801ada2:	b29b      	uxth	r3, r3
 801ada4:	4618      	mov	r0, r3
 801ada6:	f7fb fe8b 	bl	8016ac0 <lwip_htons>
 801adaa:	4603      	mov	r3, r0
 801adac:	b2db      	uxtb	r3, r3
 801adae:	f003 0304 	and.w	r3, r3, #4
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d118      	bne.n	801ade8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801adb6:	4b1b      	ldr	r3, [pc, #108]	; (801ae24 <tcp_input+0x804>)
 801adb8:	6819      	ldr	r1, [r3, #0]
 801adba:	4b1b      	ldr	r3, [pc, #108]	; (801ae28 <tcp_input+0x808>)
 801adbc:	881b      	ldrh	r3, [r3, #0]
 801adbe:	461a      	mov	r2, r3
 801adc0:	4b1a      	ldr	r3, [pc, #104]	; (801ae2c <tcp_input+0x80c>)
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801adc6:	4b16      	ldr	r3, [pc, #88]	; (801ae20 <tcp_input+0x800>)
 801adc8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801adca:	885b      	ldrh	r3, [r3, #2]
 801adcc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801adce:	4a14      	ldr	r2, [pc, #80]	; (801ae20 <tcp_input+0x800>)
 801add0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801add2:	8812      	ldrh	r2, [r2, #0]
 801add4:	b292      	uxth	r2, r2
 801add6:	9202      	str	r2, [sp, #8]
 801add8:	9301      	str	r3, [sp, #4]
 801adda:	4b15      	ldr	r3, [pc, #84]	; (801ae30 <tcp_input+0x810>)
 801addc:	9300      	str	r3, [sp, #0]
 801adde:	4b15      	ldr	r3, [pc, #84]	; (801ae34 <tcp_input+0x814>)
 801ade0:	4602      	mov	r2, r0
 801ade2:	2000      	movs	r0, #0
 801ade4:	f003 fc74 	bl	801e6d0 <tcp_rst>
    pbuf_free(p);
 801ade8:	6878      	ldr	r0, [r7, #4]
 801adea:	f7fd fb13 	bl	8018414 <pbuf_free>
  return;
 801adee:	e00c      	b.n	801ae0a <tcp_input+0x7ea>
    goto dropped;
 801adf0:	bf00      	nop
 801adf2:	e006      	b.n	801ae02 <tcp_input+0x7e2>
    goto dropped;
 801adf4:	bf00      	nop
 801adf6:	e004      	b.n	801ae02 <tcp_input+0x7e2>
    goto dropped;
 801adf8:	bf00      	nop
 801adfa:	e002      	b.n	801ae02 <tcp_input+0x7e2>
      goto dropped;
 801adfc:	bf00      	nop
 801adfe:	e000      	b.n	801ae02 <tcp_input+0x7e2>
      goto dropped;
 801ae00:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801ae02:	6878      	ldr	r0, [r7, #4]
 801ae04:	f7fd fb06 	bl	8018414 <pbuf_free>
 801ae08:	e000      	b.n	801ae0c <tcp_input+0x7ec>
  return;
 801ae0a:	bf00      	nop
}
 801ae0c:	3724      	adds	r7, #36	; 0x24
 801ae0e:	46bd      	mov	sp, r7
 801ae10:	bd90      	pop	{r4, r7, pc}
 801ae12:	bf00      	nop
 801ae14:	2002f030 	.word	0x2002f030
 801ae18:	2002f02c 	.word	0x2002f02c
 801ae1c:	2002effc 	.word	0x2002effc
 801ae20:	2002f00c 	.word	0x2002f00c
 801ae24:	2002f020 	.word	0x2002f020
 801ae28:	2002f026 	.word	0x2002f026
 801ae2c:	2002f01c 	.word	0x2002f01c
 801ae30:	2002bef4 	.word	0x2002bef4
 801ae34:	2002bef8 	.word	0x2002bef8

0801ae38 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801ae38:	b580      	push	{r7, lr}
 801ae3a:	b082      	sub	sp, #8
 801ae3c:	af00      	add	r7, sp, #0
 801ae3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d106      	bne.n	801ae54 <tcp_input_delayed_close+0x1c>
 801ae46:	4b17      	ldr	r3, [pc, #92]	; (801aea4 <tcp_input_delayed_close+0x6c>)
 801ae48:	f240 225a 	movw	r2, #602	; 0x25a
 801ae4c:	4916      	ldr	r1, [pc, #88]	; (801aea8 <tcp_input_delayed_close+0x70>)
 801ae4e:	4817      	ldr	r0, [pc, #92]	; (801aeac <tcp_input_delayed_close+0x74>)
 801ae50:	f007 fa76 	bl	8022340 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801ae54:	4b16      	ldr	r3, [pc, #88]	; (801aeb0 <tcp_input_delayed_close+0x78>)
 801ae56:	781b      	ldrb	r3, [r3, #0]
 801ae58:	f003 0310 	and.w	r3, r3, #16
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d01c      	beq.n	801ae9a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	8b5b      	ldrh	r3, [r3, #26]
 801ae64:	f003 0310 	and.w	r3, r3, #16
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d10d      	bne.n	801ae88 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d008      	beq.n	801ae88 <tcp_input_delayed_close+0x50>
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ae7c:	687a      	ldr	r2, [r7, #4]
 801ae7e:	6912      	ldr	r2, [r2, #16]
 801ae80:	f06f 010e 	mvn.w	r1, #14
 801ae84:	4610      	mov	r0, r2
 801ae86:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ae88:	6879      	ldr	r1, [r7, #4]
 801ae8a:	480a      	ldr	r0, [pc, #40]	; (801aeb4 <tcp_input_delayed_close+0x7c>)
 801ae8c:	f7ff fa50 	bl	801a330 <tcp_pcb_remove>
    tcp_free(pcb);
 801ae90:	6878      	ldr	r0, [r7, #4]
 801ae92:	f7fd fd6b 	bl	801896c <tcp_free>
    return 1;
 801ae96:	2301      	movs	r3, #1
 801ae98:	e000      	b.n	801ae9c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801ae9a:	2300      	movs	r3, #0
}
 801ae9c:	4618      	mov	r0, r3
 801ae9e:	3708      	adds	r7, #8
 801aea0:	46bd      	mov	sp, r7
 801aea2:	bd80      	pop	{r7, pc}
 801aea4:	080255f8 	.word	0x080255f8
 801aea8:	080257c8 	.word	0x080257c8
 801aeac:	08025644 	.word	0x08025644
 801aeb0:	2002f029 	.word	0x2002f029
 801aeb4:	2002eff0 	.word	0x2002eff0

0801aeb8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801aeb8:	b590      	push	{r4, r7, lr}
 801aeba:	b08b      	sub	sp, #44	; 0x2c
 801aebc:	af04      	add	r7, sp, #16
 801aebe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801aec0:	4b6f      	ldr	r3, [pc, #444]	; (801b080 <tcp_listen_input+0x1c8>)
 801aec2:	781b      	ldrb	r3, [r3, #0]
 801aec4:	f003 0304 	and.w	r3, r3, #4
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	f040 80d2 	bne.w	801b072 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d106      	bne.n	801aee2 <tcp_listen_input+0x2a>
 801aed4:	4b6b      	ldr	r3, [pc, #428]	; (801b084 <tcp_listen_input+0x1cc>)
 801aed6:	f240 2281 	movw	r2, #641	; 0x281
 801aeda:	496b      	ldr	r1, [pc, #428]	; (801b088 <tcp_listen_input+0x1d0>)
 801aedc:	486b      	ldr	r0, [pc, #428]	; (801b08c <tcp_listen_input+0x1d4>)
 801aede:	f007 fa2f 	bl	8022340 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801aee2:	4b67      	ldr	r3, [pc, #412]	; (801b080 <tcp_listen_input+0x1c8>)
 801aee4:	781b      	ldrb	r3, [r3, #0]
 801aee6:	f003 0310 	and.w	r3, r3, #16
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d019      	beq.n	801af22 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801aeee:	4b68      	ldr	r3, [pc, #416]	; (801b090 <tcp_listen_input+0x1d8>)
 801aef0:	6819      	ldr	r1, [r3, #0]
 801aef2:	4b68      	ldr	r3, [pc, #416]	; (801b094 <tcp_listen_input+0x1dc>)
 801aef4:	881b      	ldrh	r3, [r3, #0]
 801aef6:	461a      	mov	r2, r3
 801aef8:	4b67      	ldr	r3, [pc, #412]	; (801b098 <tcp_listen_input+0x1e0>)
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801aefe:	4b67      	ldr	r3, [pc, #412]	; (801b09c <tcp_listen_input+0x1e4>)
 801af00:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801af02:	885b      	ldrh	r3, [r3, #2]
 801af04:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801af06:	4a65      	ldr	r2, [pc, #404]	; (801b09c <tcp_listen_input+0x1e4>)
 801af08:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801af0a:	8812      	ldrh	r2, [r2, #0]
 801af0c:	b292      	uxth	r2, r2
 801af0e:	9202      	str	r2, [sp, #8]
 801af10:	9301      	str	r3, [sp, #4]
 801af12:	4b63      	ldr	r3, [pc, #396]	; (801b0a0 <tcp_listen_input+0x1e8>)
 801af14:	9300      	str	r3, [sp, #0]
 801af16:	4b63      	ldr	r3, [pc, #396]	; (801b0a4 <tcp_listen_input+0x1ec>)
 801af18:	4602      	mov	r2, r0
 801af1a:	6878      	ldr	r0, [r7, #4]
 801af1c:	f003 fbd8 	bl	801e6d0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801af20:	e0a9      	b.n	801b076 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801af22:	4b57      	ldr	r3, [pc, #348]	; (801b080 <tcp_listen_input+0x1c8>)
 801af24:	781b      	ldrb	r3, [r3, #0]
 801af26:	f003 0302 	and.w	r3, r3, #2
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	f000 80a3 	beq.w	801b076 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	7d5b      	ldrb	r3, [r3, #21]
 801af34:	4618      	mov	r0, r3
 801af36:	f7ff f859 	bl	8019fec <tcp_alloc>
 801af3a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801af3c:	697b      	ldr	r3, [r7, #20]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d111      	bne.n	801af66 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	699b      	ldr	r3, [r3, #24]
 801af46:	2b00      	cmp	r3, #0
 801af48:	d00a      	beq.n	801af60 <tcp_listen_input+0xa8>
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	699b      	ldr	r3, [r3, #24]
 801af4e:	687a      	ldr	r2, [r7, #4]
 801af50:	6910      	ldr	r0, [r2, #16]
 801af52:	f04f 32ff 	mov.w	r2, #4294967295
 801af56:	2100      	movs	r1, #0
 801af58:	4798      	blx	r3
 801af5a:	4603      	mov	r3, r0
 801af5c:	73bb      	strb	r3, [r7, #14]
      return;
 801af5e:	e08b      	b.n	801b078 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801af60:	23f0      	movs	r3, #240	; 0xf0
 801af62:	73bb      	strb	r3, [r7, #14]
      return;
 801af64:	e088      	b.n	801b078 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801af66:	4b50      	ldr	r3, [pc, #320]	; (801b0a8 <tcp_listen_input+0x1f0>)
 801af68:	695a      	ldr	r2, [r3, #20]
 801af6a:	697b      	ldr	r3, [r7, #20]
 801af6c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801af6e:	4b4e      	ldr	r3, [pc, #312]	; (801b0a8 <tcp_listen_input+0x1f0>)
 801af70:	691a      	ldr	r2, [r3, #16]
 801af72:	697b      	ldr	r3, [r7, #20]
 801af74:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	8ada      	ldrh	r2, [r3, #22]
 801af7a:	697b      	ldr	r3, [r7, #20]
 801af7c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801af7e:	4b47      	ldr	r3, [pc, #284]	; (801b09c <tcp_listen_input+0x1e4>)
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	881b      	ldrh	r3, [r3, #0]
 801af84:	b29a      	uxth	r2, r3
 801af86:	697b      	ldr	r3, [r7, #20]
 801af88:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801af8a:	697b      	ldr	r3, [r7, #20]
 801af8c:	2203      	movs	r2, #3
 801af8e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801af90:	4b41      	ldr	r3, [pc, #260]	; (801b098 <tcp_listen_input+0x1e0>)
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	1c5a      	adds	r2, r3, #1
 801af96:	697b      	ldr	r3, [r7, #20]
 801af98:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801af9a:	697b      	ldr	r3, [r7, #20]
 801af9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801af9e:	697b      	ldr	r3, [r7, #20]
 801afa0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801afa2:	6978      	ldr	r0, [r7, #20]
 801afa4:	f7ff fa58 	bl	801a458 <tcp_next_iss>
 801afa8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801afaa:	697b      	ldr	r3, [r7, #20]
 801afac:	693a      	ldr	r2, [r7, #16]
 801afae:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801afb0:	697b      	ldr	r3, [r7, #20]
 801afb2:	693a      	ldr	r2, [r7, #16]
 801afb4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801afb6:	697b      	ldr	r3, [r7, #20]
 801afb8:	693a      	ldr	r2, [r7, #16]
 801afba:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801afbc:	697b      	ldr	r3, [r7, #20]
 801afbe:	693a      	ldr	r2, [r7, #16]
 801afc0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801afc2:	4b35      	ldr	r3, [pc, #212]	; (801b098 <tcp_listen_input+0x1e0>)
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	1e5a      	subs	r2, r3, #1
 801afc8:	697b      	ldr	r3, [r7, #20]
 801afca:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	691a      	ldr	r2, [r3, #16]
 801afd0:	697b      	ldr	r3, [r7, #20]
 801afd2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801afd4:	697b      	ldr	r3, [r7, #20]
 801afd6:	687a      	ldr	r2, [r7, #4]
 801afd8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	7a5b      	ldrb	r3, [r3, #9]
 801afde:	f003 030c 	and.w	r3, r3, #12
 801afe2:	b2da      	uxtb	r2, r3
 801afe4:	697b      	ldr	r3, [r7, #20]
 801afe6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	7a1a      	ldrb	r2, [r3, #8]
 801afec:	697b      	ldr	r3, [r7, #20]
 801afee:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801aff0:	4b2e      	ldr	r3, [pc, #184]	; (801b0ac <tcp_listen_input+0x1f4>)
 801aff2:	681a      	ldr	r2, [r3, #0]
 801aff4:	697b      	ldr	r3, [r7, #20]
 801aff6:	60da      	str	r2, [r3, #12]
 801aff8:	4a2c      	ldr	r2, [pc, #176]	; (801b0ac <tcp_listen_input+0x1f4>)
 801affa:	697b      	ldr	r3, [r7, #20]
 801affc:	6013      	str	r3, [r2, #0]
 801affe:	f003 fd29 	bl	801ea54 <tcp_timer_needed>
 801b002:	4b2b      	ldr	r3, [pc, #172]	; (801b0b0 <tcp_listen_input+0x1f8>)
 801b004:	2201      	movs	r2, #1
 801b006:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801b008:	6978      	ldr	r0, [r7, #20]
 801b00a:	f001 fd8f 	bl	801cb2c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801b00e:	4b23      	ldr	r3, [pc, #140]	; (801b09c <tcp_listen_input+0x1e4>)
 801b010:	681b      	ldr	r3, [r3, #0]
 801b012:	89db      	ldrh	r3, [r3, #14]
 801b014:	b29a      	uxth	r2, r3
 801b016:	697b      	ldr	r3, [r7, #20]
 801b018:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801b01c:	697b      	ldr	r3, [r7, #20]
 801b01e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b022:	697b      	ldr	r3, [r7, #20]
 801b024:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801b028:	697b      	ldr	r3, [r7, #20]
 801b02a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801b02c:	697b      	ldr	r3, [r7, #20]
 801b02e:	3304      	adds	r3, #4
 801b030:	4618      	mov	r0, r3
 801b032:	f005 fa89 	bl	8020548 <ip4_route>
 801b036:	4601      	mov	r1, r0
 801b038:	697b      	ldr	r3, [r7, #20]
 801b03a:	3304      	adds	r3, #4
 801b03c:	461a      	mov	r2, r3
 801b03e:	4620      	mov	r0, r4
 801b040:	f7ff fa30 	bl	801a4a4 <tcp_eff_send_mss_netif>
 801b044:	4603      	mov	r3, r0
 801b046:	461a      	mov	r2, r3
 801b048:	697b      	ldr	r3, [r7, #20]
 801b04a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801b04c:	2112      	movs	r1, #18
 801b04e:	6978      	ldr	r0, [r7, #20]
 801b050:	f002 fc9c 	bl	801d98c <tcp_enqueue_flags>
 801b054:	4603      	mov	r3, r0
 801b056:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801b058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d004      	beq.n	801b06a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801b060:	2100      	movs	r1, #0
 801b062:	6978      	ldr	r0, [r7, #20]
 801b064:	f7fd ff08 	bl	8018e78 <tcp_abandon>
      return;
 801b068:	e006      	b.n	801b078 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801b06a:	6978      	ldr	r0, [r7, #20]
 801b06c:	f002 fd7c 	bl	801db68 <tcp_output>
  return;
 801b070:	e001      	b.n	801b076 <tcp_listen_input+0x1be>
    return;
 801b072:	bf00      	nop
 801b074:	e000      	b.n	801b078 <tcp_listen_input+0x1c0>
  return;
 801b076:	bf00      	nop
}
 801b078:	371c      	adds	r7, #28
 801b07a:	46bd      	mov	sp, r7
 801b07c:	bd90      	pop	{r4, r7, pc}
 801b07e:	bf00      	nop
 801b080:	2002f028 	.word	0x2002f028
 801b084:	080255f8 	.word	0x080255f8
 801b088:	080257f0 	.word	0x080257f0
 801b08c:	08025644 	.word	0x08025644
 801b090:	2002f020 	.word	0x2002f020
 801b094:	2002f026 	.word	0x2002f026
 801b098:	2002f01c 	.word	0x2002f01c
 801b09c:	2002f00c 	.word	0x2002f00c
 801b0a0:	2002bef4 	.word	0x2002bef4
 801b0a4:	2002bef8 	.word	0x2002bef8
 801b0a8:	2002bee4 	.word	0x2002bee4
 801b0ac:	2002eff0 	.word	0x2002eff0
 801b0b0:	2002eff8 	.word	0x2002eff8

0801b0b4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801b0b4:	b580      	push	{r7, lr}
 801b0b6:	b086      	sub	sp, #24
 801b0b8:	af04      	add	r7, sp, #16
 801b0ba:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801b0bc:	4b2f      	ldr	r3, [pc, #188]	; (801b17c <tcp_timewait_input+0xc8>)
 801b0be:	781b      	ldrb	r3, [r3, #0]
 801b0c0:	f003 0304 	and.w	r3, r3, #4
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d153      	bne.n	801b170 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	d106      	bne.n	801b0dc <tcp_timewait_input+0x28>
 801b0ce:	4b2c      	ldr	r3, [pc, #176]	; (801b180 <tcp_timewait_input+0xcc>)
 801b0d0:	f240 22ee 	movw	r2, #750	; 0x2ee
 801b0d4:	492b      	ldr	r1, [pc, #172]	; (801b184 <tcp_timewait_input+0xd0>)
 801b0d6:	482c      	ldr	r0, [pc, #176]	; (801b188 <tcp_timewait_input+0xd4>)
 801b0d8:	f007 f932 	bl	8022340 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801b0dc:	4b27      	ldr	r3, [pc, #156]	; (801b17c <tcp_timewait_input+0xc8>)
 801b0de:	781b      	ldrb	r3, [r3, #0]
 801b0e0:	f003 0302 	and.w	r3, r3, #2
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d02a      	beq.n	801b13e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801b0e8:	4b28      	ldr	r3, [pc, #160]	; (801b18c <tcp_timewait_input+0xd8>)
 801b0ea:	681a      	ldr	r2, [r3, #0]
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b0f0:	1ad3      	subs	r3, r2, r3
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	db2d      	blt.n	801b152 <tcp_timewait_input+0x9e>
 801b0f6:	4b25      	ldr	r3, [pc, #148]	; (801b18c <tcp_timewait_input+0xd8>)
 801b0f8:	681a      	ldr	r2, [r3, #0]
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b0fe:	6879      	ldr	r1, [r7, #4]
 801b100:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b102:	440b      	add	r3, r1
 801b104:	1ad3      	subs	r3, r2, r3
 801b106:	2b00      	cmp	r3, #0
 801b108:	dc23      	bgt.n	801b152 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b10a:	4b21      	ldr	r3, [pc, #132]	; (801b190 <tcp_timewait_input+0xdc>)
 801b10c:	6819      	ldr	r1, [r3, #0]
 801b10e:	4b21      	ldr	r3, [pc, #132]	; (801b194 <tcp_timewait_input+0xe0>)
 801b110:	881b      	ldrh	r3, [r3, #0]
 801b112:	461a      	mov	r2, r3
 801b114:	4b1d      	ldr	r3, [pc, #116]	; (801b18c <tcp_timewait_input+0xd8>)
 801b116:	681b      	ldr	r3, [r3, #0]
 801b118:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b11a:	4b1f      	ldr	r3, [pc, #124]	; (801b198 <tcp_timewait_input+0xe4>)
 801b11c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b11e:	885b      	ldrh	r3, [r3, #2]
 801b120:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b122:	4a1d      	ldr	r2, [pc, #116]	; (801b198 <tcp_timewait_input+0xe4>)
 801b124:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b126:	8812      	ldrh	r2, [r2, #0]
 801b128:	b292      	uxth	r2, r2
 801b12a:	9202      	str	r2, [sp, #8]
 801b12c:	9301      	str	r3, [sp, #4]
 801b12e:	4b1b      	ldr	r3, [pc, #108]	; (801b19c <tcp_timewait_input+0xe8>)
 801b130:	9300      	str	r3, [sp, #0]
 801b132:	4b1b      	ldr	r3, [pc, #108]	; (801b1a0 <tcp_timewait_input+0xec>)
 801b134:	4602      	mov	r2, r0
 801b136:	6878      	ldr	r0, [r7, #4]
 801b138:	f003 faca 	bl	801e6d0 <tcp_rst>
      return;
 801b13c:	e01b      	b.n	801b176 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801b13e:	4b0f      	ldr	r3, [pc, #60]	; (801b17c <tcp_timewait_input+0xc8>)
 801b140:	781b      	ldrb	r3, [r3, #0]
 801b142:	f003 0301 	and.w	r3, r3, #1
 801b146:	2b00      	cmp	r3, #0
 801b148:	d003      	beq.n	801b152 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801b14a:	4b16      	ldr	r3, [pc, #88]	; (801b1a4 <tcp_timewait_input+0xf0>)
 801b14c:	681a      	ldr	r2, [r3, #0]
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801b152:	4b10      	ldr	r3, [pc, #64]	; (801b194 <tcp_timewait_input+0xe0>)
 801b154:	881b      	ldrh	r3, [r3, #0]
 801b156:	2b00      	cmp	r3, #0
 801b158:	d00c      	beq.n	801b174 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	8b5b      	ldrh	r3, [r3, #26]
 801b15e:	f043 0302 	orr.w	r3, r3, #2
 801b162:	b29a      	uxth	r2, r3
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b168:	6878      	ldr	r0, [r7, #4]
 801b16a:	f002 fcfd 	bl	801db68 <tcp_output>
  }
  return;
 801b16e:	e001      	b.n	801b174 <tcp_timewait_input+0xc0>
    return;
 801b170:	bf00      	nop
 801b172:	e000      	b.n	801b176 <tcp_timewait_input+0xc2>
  return;
 801b174:	bf00      	nop
}
 801b176:	3708      	adds	r7, #8
 801b178:	46bd      	mov	sp, r7
 801b17a:	bd80      	pop	{r7, pc}
 801b17c:	2002f028 	.word	0x2002f028
 801b180:	080255f8 	.word	0x080255f8
 801b184:	08025810 	.word	0x08025810
 801b188:	08025644 	.word	0x08025644
 801b18c:	2002f01c 	.word	0x2002f01c
 801b190:	2002f020 	.word	0x2002f020
 801b194:	2002f026 	.word	0x2002f026
 801b198:	2002f00c 	.word	0x2002f00c
 801b19c:	2002bef4 	.word	0x2002bef4
 801b1a0:	2002bef8 	.word	0x2002bef8
 801b1a4:	2002efe4 	.word	0x2002efe4

0801b1a8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801b1a8:	b590      	push	{r4, r7, lr}
 801b1aa:	b08d      	sub	sp, #52	; 0x34
 801b1ac:	af04      	add	r7, sp, #16
 801b1ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801b1b4:	2300      	movs	r3, #0
 801b1b6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d106      	bne.n	801b1cc <tcp_process+0x24>
 801b1be:	4b9d      	ldr	r3, [pc, #628]	; (801b434 <tcp_process+0x28c>)
 801b1c0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801b1c4:	499c      	ldr	r1, [pc, #624]	; (801b438 <tcp_process+0x290>)
 801b1c6:	489d      	ldr	r0, [pc, #628]	; (801b43c <tcp_process+0x294>)
 801b1c8:	f007 f8ba 	bl	8022340 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801b1cc:	4b9c      	ldr	r3, [pc, #624]	; (801b440 <tcp_process+0x298>)
 801b1ce:	781b      	ldrb	r3, [r3, #0]
 801b1d0:	f003 0304 	and.w	r3, r3, #4
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	d04e      	beq.n	801b276 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	7d1b      	ldrb	r3, [r3, #20]
 801b1dc:	2b02      	cmp	r3, #2
 801b1de:	d108      	bne.n	801b1f2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b1e4:	4b97      	ldr	r3, [pc, #604]	; (801b444 <tcp_process+0x29c>)
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	429a      	cmp	r2, r3
 801b1ea:	d123      	bne.n	801b234 <tcp_process+0x8c>
        acceptable = 1;
 801b1ec:	2301      	movs	r3, #1
 801b1ee:	76fb      	strb	r3, [r7, #27]
 801b1f0:	e020      	b.n	801b234 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b1f6:	4b94      	ldr	r3, [pc, #592]	; (801b448 <tcp_process+0x2a0>)
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	429a      	cmp	r2, r3
 801b1fc:	d102      	bne.n	801b204 <tcp_process+0x5c>
        acceptable = 1;
 801b1fe:	2301      	movs	r3, #1
 801b200:	76fb      	strb	r3, [r7, #27]
 801b202:	e017      	b.n	801b234 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b204:	4b90      	ldr	r3, [pc, #576]	; (801b448 <tcp_process+0x2a0>)
 801b206:	681a      	ldr	r2, [r3, #0]
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b20c:	1ad3      	subs	r3, r2, r3
 801b20e:	2b00      	cmp	r3, #0
 801b210:	db10      	blt.n	801b234 <tcp_process+0x8c>
 801b212:	4b8d      	ldr	r3, [pc, #564]	; (801b448 <tcp_process+0x2a0>)
 801b214:	681a      	ldr	r2, [r3, #0]
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b21a:	6879      	ldr	r1, [r7, #4]
 801b21c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b21e:	440b      	add	r3, r1
 801b220:	1ad3      	subs	r3, r2, r3
 801b222:	2b00      	cmp	r3, #0
 801b224:	dc06      	bgt.n	801b234 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	8b5b      	ldrh	r3, [r3, #26]
 801b22a:	f043 0302 	orr.w	r3, r3, #2
 801b22e:	b29a      	uxth	r2, r3
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801b234:	7efb      	ldrb	r3, [r7, #27]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d01b      	beq.n	801b272 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	7d1b      	ldrb	r3, [r3, #20]
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d106      	bne.n	801b250 <tcp_process+0xa8>
 801b242:	4b7c      	ldr	r3, [pc, #496]	; (801b434 <tcp_process+0x28c>)
 801b244:	f44f 724e 	mov.w	r2, #824	; 0x338
 801b248:	4980      	ldr	r1, [pc, #512]	; (801b44c <tcp_process+0x2a4>)
 801b24a:	487c      	ldr	r0, [pc, #496]	; (801b43c <tcp_process+0x294>)
 801b24c:	f007 f878 	bl	8022340 <iprintf>
      recv_flags |= TF_RESET;
 801b250:	4b7f      	ldr	r3, [pc, #508]	; (801b450 <tcp_process+0x2a8>)
 801b252:	781b      	ldrb	r3, [r3, #0]
 801b254:	f043 0308 	orr.w	r3, r3, #8
 801b258:	b2da      	uxtb	r2, r3
 801b25a:	4b7d      	ldr	r3, [pc, #500]	; (801b450 <tcp_process+0x2a8>)
 801b25c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	8b5b      	ldrh	r3, [r3, #26]
 801b262:	f023 0301 	bic.w	r3, r3, #1
 801b266:	b29a      	uxth	r2, r3
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801b26c:	f06f 030d 	mvn.w	r3, #13
 801b270:	e37a      	b.n	801b968 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801b272:	2300      	movs	r3, #0
 801b274:	e378      	b.n	801b968 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801b276:	4b72      	ldr	r3, [pc, #456]	; (801b440 <tcp_process+0x298>)
 801b278:	781b      	ldrb	r3, [r3, #0]
 801b27a:	f003 0302 	and.w	r3, r3, #2
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d010      	beq.n	801b2a4 <tcp_process+0xfc>
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	7d1b      	ldrb	r3, [r3, #20]
 801b286:	2b02      	cmp	r3, #2
 801b288:	d00c      	beq.n	801b2a4 <tcp_process+0xfc>
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	7d1b      	ldrb	r3, [r3, #20]
 801b28e:	2b03      	cmp	r3, #3
 801b290:	d008      	beq.n	801b2a4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	8b5b      	ldrh	r3, [r3, #26]
 801b296:	f043 0302 	orr.w	r3, r3, #2
 801b29a:	b29a      	uxth	r2, r3
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801b2a0:	2300      	movs	r3, #0
 801b2a2:	e361      	b.n	801b968 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	8b5b      	ldrh	r3, [r3, #26]
 801b2a8:	f003 0310 	and.w	r3, r3, #16
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d103      	bne.n	801b2b8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801b2b0:	4b68      	ldr	r3, [pc, #416]	; (801b454 <tcp_process+0x2ac>)
 801b2b2:	681a      	ldr	r2, [r3, #0]
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	2200      	movs	r2, #0
 801b2bc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	2200      	movs	r2, #0
 801b2c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801b2c8:	6878      	ldr	r0, [r7, #4]
 801b2ca:	f001 fc2f 	bl	801cb2c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	7d1b      	ldrb	r3, [r3, #20]
 801b2d2:	3b02      	subs	r3, #2
 801b2d4:	2b07      	cmp	r3, #7
 801b2d6:	f200 8337 	bhi.w	801b948 <tcp_process+0x7a0>
 801b2da:	a201      	add	r2, pc, #4	; (adr r2, 801b2e0 <tcp_process+0x138>)
 801b2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b2e0:	0801b301 	.word	0x0801b301
 801b2e4:	0801b531 	.word	0x0801b531
 801b2e8:	0801b6a9 	.word	0x0801b6a9
 801b2ec:	0801b6d3 	.word	0x0801b6d3
 801b2f0:	0801b7f7 	.word	0x0801b7f7
 801b2f4:	0801b6a9 	.word	0x0801b6a9
 801b2f8:	0801b883 	.word	0x0801b883
 801b2fc:	0801b913 	.word	0x0801b913
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801b300:	4b4f      	ldr	r3, [pc, #316]	; (801b440 <tcp_process+0x298>)
 801b302:	781b      	ldrb	r3, [r3, #0]
 801b304:	f003 0310 	and.w	r3, r3, #16
 801b308:	2b00      	cmp	r3, #0
 801b30a:	f000 80e4 	beq.w	801b4d6 <tcp_process+0x32e>
 801b30e:	4b4c      	ldr	r3, [pc, #304]	; (801b440 <tcp_process+0x298>)
 801b310:	781b      	ldrb	r3, [r3, #0]
 801b312:	f003 0302 	and.w	r3, r3, #2
 801b316:	2b00      	cmp	r3, #0
 801b318:	f000 80dd 	beq.w	801b4d6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b320:	1c5a      	adds	r2, r3, #1
 801b322:	4b48      	ldr	r3, [pc, #288]	; (801b444 <tcp_process+0x29c>)
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	429a      	cmp	r2, r3
 801b328:	f040 80d5 	bne.w	801b4d6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801b32c:	4b46      	ldr	r3, [pc, #280]	; (801b448 <tcp_process+0x2a0>)
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	1c5a      	adds	r2, r3, #1
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801b33e:	4b41      	ldr	r3, [pc, #260]	; (801b444 <tcp_process+0x29c>)
 801b340:	681a      	ldr	r2, [r3, #0]
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801b346:	4b44      	ldr	r3, [pc, #272]	; (801b458 <tcp_process+0x2b0>)
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	89db      	ldrh	r3, [r3, #14]
 801b34c:	b29a      	uxth	r2, r3
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801b360:	4b39      	ldr	r3, [pc, #228]	; (801b448 <tcp_process+0x2a0>)
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	1e5a      	subs	r2, r3, #1
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	2204      	movs	r2, #4
 801b36e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	3304      	adds	r3, #4
 801b378:	4618      	mov	r0, r3
 801b37a:	f005 f8e5 	bl	8020548 <ip4_route>
 801b37e:	4601      	mov	r1, r0
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	3304      	adds	r3, #4
 801b384:	461a      	mov	r2, r3
 801b386:	4620      	mov	r0, r4
 801b388:	f7ff f88c 	bl	801a4a4 <tcp_eff_send_mss_netif>
 801b38c:	4603      	mov	r3, r0
 801b38e:	461a      	mov	r2, r3
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b398:	009a      	lsls	r2, r3, #2
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b39e:	005b      	lsls	r3, r3, #1
 801b3a0:	f241 111c 	movw	r1, #4380	; 0x111c
 801b3a4:	428b      	cmp	r3, r1
 801b3a6:	bf38      	it	cc
 801b3a8:	460b      	movcc	r3, r1
 801b3aa:	429a      	cmp	r2, r3
 801b3ac:	d204      	bcs.n	801b3b8 <tcp_process+0x210>
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b3b2:	009b      	lsls	r3, r3, #2
 801b3b4:	b29b      	uxth	r3, r3
 801b3b6:	e00d      	b.n	801b3d4 <tcp_process+0x22c>
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b3bc:	005b      	lsls	r3, r3, #1
 801b3be:	f241 121c 	movw	r2, #4380	; 0x111c
 801b3c2:	4293      	cmp	r3, r2
 801b3c4:	d904      	bls.n	801b3d0 <tcp_process+0x228>
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b3ca:	005b      	lsls	r3, r3, #1
 801b3cc:	b29b      	uxth	r3, r3
 801b3ce:	e001      	b.n	801b3d4 <tcp_process+0x22c>
 801b3d0:	f241 131c 	movw	r3, #4380	; 0x111c
 801b3d4:	687a      	ldr	r2, [r7, #4]
 801b3d6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	d106      	bne.n	801b3f2 <tcp_process+0x24a>
 801b3e4:	4b13      	ldr	r3, [pc, #76]	; (801b434 <tcp_process+0x28c>)
 801b3e6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801b3ea:	491c      	ldr	r1, [pc, #112]	; (801b45c <tcp_process+0x2b4>)
 801b3ec:	4813      	ldr	r0, [pc, #76]	; (801b43c <tcp_process+0x294>)
 801b3ee:	f006 ffa7 	bl	8022340 <iprintf>
        --pcb->snd_queuelen;
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b3f8:	3b01      	subs	r3, #1
 801b3fa:	b29a      	uxth	r2, r3
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b406:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801b408:	69fb      	ldr	r3, [r7, #28]
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d12a      	bne.n	801b464 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b412:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801b414:	69fb      	ldr	r3, [r7, #28]
 801b416:	2b00      	cmp	r3, #0
 801b418:	d106      	bne.n	801b428 <tcp_process+0x280>
 801b41a:	4b06      	ldr	r3, [pc, #24]	; (801b434 <tcp_process+0x28c>)
 801b41c:	f44f 725d 	mov.w	r2, #884	; 0x374
 801b420:	490f      	ldr	r1, [pc, #60]	; (801b460 <tcp_process+0x2b8>)
 801b422:	4806      	ldr	r0, [pc, #24]	; (801b43c <tcp_process+0x294>)
 801b424:	f006 ff8c 	bl	8022340 <iprintf>
          pcb->unsent = rseg->next;
 801b428:	69fb      	ldr	r3, [r7, #28]
 801b42a:	681a      	ldr	r2, [r3, #0]
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	66da      	str	r2, [r3, #108]	; 0x6c
 801b430:	e01c      	b.n	801b46c <tcp_process+0x2c4>
 801b432:	bf00      	nop
 801b434:	080255f8 	.word	0x080255f8
 801b438:	08025830 	.word	0x08025830
 801b43c:	08025644 	.word	0x08025644
 801b440:	2002f028 	.word	0x2002f028
 801b444:	2002f020 	.word	0x2002f020
 801b448:	2002f01c 	.word	0x2002f01c
 801b44c:	0802584c 	.word	0x0802584c
 801b450:	2002f029 	.word	0x2002f029
 801b454:	2002efe4 	.word	0x2002efe4
 801b458:	2002f00c 	.word	0x2002f00c
 801b45c:	0802586c 	.word	0x0802586c
 801b460:	08025884 	.word	0x08025884
        } else {
          pcb->unacked = rseg->next;
 801b464:	69fb      	ldr	r3, [r7, #28]
 801b466:	681a      	ldr	r2, [r3, #0]
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801b46c:	69f8      	ldr	r0, [r7, #28]
 801b46e:	f7fe fc54 	bl	8019d1a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b476:	2b00      	cmp	r3, #0
 801b478:	d104      	bne.n	801b484 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b480:	861a      	strh	r2, [r3, #48]	; 0x30
 801b482:	e006      	b.n	801b492 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	2200      	movs	r2, #0
 801b488:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	2200      	movs	r2, #0
 801b48e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b498:	2b00      	cmp	r3, #0
 801b49a:	d00a      	beq.n	801b4b2 <tcp_process+0x30a>
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b4a2:	687a      	ldr	r2, [r7, #4]
 801b4a4:	6910      	ldr	r0, [r2, #16]
 801b4a6:	2200      	movs	r2, #0
 801b4a8:	6879      	ldr	r1, [r7, #4]
 801b4aa:	4798      	blx	r3
 801b4ac:	4603      	mov	r3, r0
 801b4ae:	76bb      	strb	r3, [r7, #26]
 801b4b0:	e001      	b.n	801b4b6 <tcp_process+0x30e>
 801b4b2:	2300      	movs	r3, #0
 801b4b4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801b4b6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801b4ba:	f113 0f0d 	cmn.w	r3, #13
 801b4be:	d102      	bne.n	801b4c6 <tcp_process+0x31e>
          return ERR_ABRT;
 801b4c0:	f06f 030c 	mvn.w	r3, #12
 801b4c4:	e250      	b.n	801b968 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	8b5b      	ldrh	r3, [r3, #26]
 801b4ca:	f043 0302 	orr.w	r3, r3, #2
 801b4ce:	b29a      	uxth	r2, r3
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801b4d4:	e23a      	b.n	801b94c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801b4d6:	4b98      	ldr	r3, [pc, #608]	; (801b738 <tcp_process+0x590>)
 801b4d8:	781b      	ldrb	r3, [r3, #0]
 801b4da:	f003 0310 	and.w	r3, r3, #16
 801b4de:	2b00      	cmp	r3, #0
 801b4e0:	f000 8234 	beq.w	801b94c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b4e4:	4b95      	ldr	r3, [pc, #596]	; (801b73c <tcp_process+0x594>)
 801b4e6:	6819      	ldr	r1, [r3, #0]
 801b4e8:	4b95      	ldr	r3, [pc, #596]	; (801b740 <tcp_process+0x598>)
 801b4ea:	881b      	ldrh	r3, [r3, #0]
 801b4ec:	461a      	mov	r2, r3
 801b4ee:	4b95      	ldr	r3, [pc, #596]	; (801b744 <tcp_process+0x59c>)
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b4f4:	4b94      	ldr	r3, [pc, #592]	; (801b748 <tcp_process+0x5a0>)
 801b4f6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b4f8:	885b      	ldrh	r3, [r3, #2]
 801b4fa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b4fc:	4a92      	ldr	r2, [pc, #584]	; (801b748 <tcp_process+0x5a0>)
 801b4fe:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b500:	8812      	ldrh	r2, [r2, #0]
 801b502:	b292      	uxth	r2, r2
 801b504:	9202      	str	r2, [sp, #8]
 801b506:	9301      	str	r3, [sp, #4]
 801b508:	4b90      	ldr	r3, [pc, #576]	; (801b74c <tcp_process+0x5a4>)
 801b50a:	9300      	str	r3, [sp, #0]
 801b50c:	4b90      	ldr	r3, [pc, #576]	; (801b750 <tcp_process+0x5a8>)
 801b50e:	4602      	mov	r2, r0
 801b510:	6878      	ldr	r0, [r7, #4]
 801b512:	f003 f8dd 	bl	801e6d0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b51c:	2b05      	cmp	r3, #5
 801b51e:	f200 8215 	bhi.w	801b94c <tcp_process+0x7a4>
          pcb->rtime = 0;
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	2200      	movs	r2, #0
 801b526:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801b528:	6878      	ldr	r0, [r7, #4]
 801b52a:	f002 fea9 	bl	801e280 <tcp_rexmit_rto>
      break;
 801b52e:	e20d      	b.n	801b94c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801b530:	4b81      	ldr	r3, [pc, #516]	; (801b738 <tcp_process+0x590>)
 801b532:	781b      	ldrb	r3, [r3, #0]
 801b534:	f003 0310 	and.w	r3, r3, #16
 801b538:	2b00      	cmp	r3, #0
 801b53a:	f000 80a1 	beq.w	801b680 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b53e:	4b7f      	ldr	r3, [pc, #508]	; (801b73c <tcp_process+0x594>)
 801b540:	681a      	ldr	r2, [r3, #0]
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b546:	1ad3      	subs	r3, r2, r3
 801b548:	3b01      	subs	r3, #1
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	db7e      	blt.n	801b64c <tcp_process+0x4a4>
 801b54e:	4b7b      	ldr	r3, [pc, #492]	; (801b73c <tcp_process+0x594>)
 801b550:	681a      	ldr	r2, [r3, #0]
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b556:	1ad3      	subs	r3, r2, r3
 801b558:	2b00      	cmp	r3, #0
 801b55a:	dc77      	bgt.n	801b64c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	2204      	movs	r2, #4
 801b560:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b566:	2b00      	cmp	r3, #0
 801b568:	d102      	bne.n	801b570 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801b56a:	23fa      	movs	r3, #250	; 0xfa
 801b56c:	76bb      	strb	r3, [r7, #26]
 801b56e:	e01d      	b.n	801b5ac <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b574:	699b      	ldr	r3, [r3, #24]
 801b576:	2b00      	cmp	r3, #0
 801b578:	d106      	bne.n	801b588 <tcp_process+0x3e0>
 801b57a:	4b76      	ldr	r3, [pc, #472]	; (801b754 <tcp_process+0x5ac>)
 801b57c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801b580:	4975      	ldr	r1, [pc, #468]	; (801b758 <tcp_process+0x5b0>)
 801b582:	4876      	ldr	r0, [pc, #472]	; (801b75c <tcp_process+0x5b4>)
 801b584:	f006 fedc 	bl	8022340 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b58c:	699b      	ldr	r3, [r3, #24]
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d00a      	beq.n	801b5a8 <tcp_process+0x400>
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b596:	699b      	ldr	r3, [r3, #24]
 801b598:	687a      	ldr	r2, [r7, #4]
 801b59a:	6910      	ldr	r0, [r2, #16]
 801b59c:	2200      	movs	r2, #0
 801b59e:	6879      	ldr	r1, [r7, #4]
 801b5a0:	4798      	blx	r3
 801b5a2:	4603      	mov	r3, r0
 801b5a4:	76bb      	strb	r3, [r7, #26]
 801b5a6:	e001      	b.n	801b5ac <tcp_process+0x404>
 801b5a8:	23f0      	movs	r3, #240	; 0xf0
 801b5aa:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801b5ac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d00a      	beq.n	801b5ca <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801b5b4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801b5b8:	f113 0f0d 	cmn.w	r3, #13
 801b5bc:	d002      	beq.n	801b5c4 <tcp_process+0x41c>
              tcp_abort(pcb);
 801b5be:	6878      	ldr	r0, [r7, #4]
 801b5c0:	f7fd fd18 	bl	8018ff4 <tcp_abort>
            }
            return ERR_ABRT;
 801b5c4:	f06f 030c 	mvn.w	r3, #12
 801b5c8:	e1ce      	b.n	801b968 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801b5ca:	6878      	ldr	r0, [r7, #4]
 801b5cc:	f000 fae0 	bl	801bb90 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801b5d0:	4b63      	ldr	r3, [pc, #396]	; (801b760 <tcp_process+0x5b8>)
 801b5d2:	881b      	ldrh	r3, [r3, #0]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d005      	beq.n	801b5e4 <tcp_process+0x43c>
            recv_acked--;
 801b5d8:	4b61      	ldr	r3, [pc, #388]	; (801b760 <tcp_process+0x5b8>)
 801b5da:	881b      	ldrh	r3, [r3, #0]
 801b5dc:	3b01      	subs	r3, #1
 801b5de:	b29a      	uxth	r2, r3
 801b5e0:	4b5f      	ldr	r3, [pc, #380]	; (801b760 <tcp_process+0x5b8>)
 801b5e2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b5e8:	009a      	lsls	r2, r3, #2
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b5ee:	005b      	lsls	r3, r3, #1
 801b5f0:	f241 111c 	movw	r1, #4380	; 0x111c
 801b5f4:	428b      	cmp	r3, r1
 801b5f6:	bf38      	it	cc
 801b5f8:	460b      	movcc	r3, r1
 801b5fa:	429a      	cmp	r2, r3
 801b5fc:	d204      	bcs.n	801b608 <tcp_process+0x460>
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b602:	009b      	lsls	r3, r3, #2
 801b604:	b29b      	uxth	r3, r3
 801b606:	e00d      	b.n	801b624 <tcp_process+0x47c>
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b60c:	005b      	lsls	r3, r3, #1
 801b60e:	f241 121c 	movw	r2, #4380	; 0x111c
 801b612:	4293      	cmp	r3, r2
 801b614:	d904      	bls.n	801b620 <tcp_process+0x478>
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b61a:	005b      	lsls	r3, r3, #1
 801b61c:	b29b      	uxth	r3, r3
 801b61e:	e001      	b.n	801b624 <tcp_process+0x47c>
 801b620:	f241 131c 	movw	r3, #4380	; 0x111c
 801b624:	687a      	ldr	r2, [r7, #4]
 801b626:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801b62a:	4b4e      	ldr	r3, [pc, #312]	; (801b764 <tcp_process+0x5bc>)
 801b62c:	781b      	ldrb	r3, [r3, #0]
 801b62e:	f003 0320 	and.w	r3, r3, #32
 801b632:	2b00      	cmp	r3, #0
 801b634:	d037      	beq.n	801b6a6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	8b5b      	ldrh	r3, [r3, #26]
 801b63a:	f043 0302 	orr.w	r3, r3, #2
 801b63e:	b29a      	uxth	r2, r3
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	2207      	movs	r2, #7
 801b648:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801b64a:	e02c      	b.n	801b6a6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b64c:	4b3b      	ldr	r3, [pc, #236]	; (801b73c <tcp_process+0x594>)
 801b64e:	6819      	ldr	r1, [r3, #0]
 801b650:	4b3b      	ldr	r3, [pc, #236]	; (801b740 <tcp_process+0x598>)
 801b652:	881b      	ldrh	r3, [r3, #0]
 801b654:	461a      	mov	r2, r3
 801b656:	4b3b      	ldr	r3, [pc, #236]	; (801b744 <tcp_process+0x59c>)
 801b658:	681b      	ldr	r3, [r3, #0]
 801b65a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b65c:	4b3a      	ldr	r3, [pc, #232]	; (801b748 <tcp_process+0x5a0>)
 801b65e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b660:	885b      	ldrh	r3, [r3, #2]
 801b662:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b664:	4a38      	ldr	r2, [pc, #224]	; (801b748 <tcp_process+0x5a0>)
 801b666:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b668:	8812      	ldrh	r2, [r2, #0]
 801b66a:	b292      	uxth	r2, r2
 801b66c:	9202      	str	r2, [sp, #8]
 801b66e:	9301      	str	r3, [sp, #4]
 801b670:	4b36      	ldr	r3, [pc, #216]	; (801b74c <tcp_process+0x5a4>)
 801b672:	9300      	str	r3, [sp, #0]
 801b674:	4b36      	ldr	r3, [pc, #216]	; (801b750 <tcp_process+0x5a8>)
 801b676:	4602      	mov	r2, r0
 801b678:	6878      	ldr	r0, [r7, #4]
 801b67a:	f003 f829 	bl	801e6d0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801b67e:	e167      	b.n	801b950 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801b680:	4b2d      	ldr	r3, [pc, #180]	; (801b738 <tcp_process+0x590>)
 801b682:	781b      	ldrb	r3, [r3, #0]
 801b684:	f003 0302 	and.w	r3, r3, #2
 801b688:	2b00      	cmp	r3, #0
 801b68a:	f000 8161 	beq.w	801b950 <tcp_process+0x7a8>
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b692:	1e5a      	subs	r2, r3, #1
 801b694:	4b2b      	ldr	r3, [pc, #172]	; (801b744 <tcp_process+0x59c>)
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	429a      	cmp	r2, r3
 801b69a:	f040 8159 	bne.w	801b950 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801b69e:	6878      	ldr	r0, [r7, #4]
 801b6a0:	f002 fe10 	bl	801e2c4 <tcp_rexmit>
      break;
 801b6a4:	e154      	b.n	801b950 <tcp_process+0x7a8>
 801b6a6:	e153      	b.n	801b950 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801b6a8:	6878      	ldr	r0, [r7, #4]
 801b6aa:	f000 fa71 	bl	801bb90 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801b6ae:	4b2d      	ldr	r3, [pc, #180]	; (801b764 <tcp_process+0x5bc>)
 801b6b0:	781b      	ldrb	r3, [r3, #0]
 801b6b2:	f003 0320 	and.w	r3, r3, #32
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	f000 814c 	beq.w	801b954 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	8b5b      	ldrh	r3, [r3, #26]
 801b6c0:	f043 0302 	orr.w	r3, r3, #2
 801b6c4:	b29a      	uxth	r2, r3
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	2207      	movs	r2, #7
 801b6ce:	751a      	strb	r2, [r3, #20]
      }
      break;
 801b6d0:	e140      	b.n	801b954 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801b6d2:	6878      	ldr	r0, [r7, #4]
 801b6d4:	f000 fa5c 	bl	801bb90 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801b6d8:	4b22      	ldr	r3, [pc, #136]	; (801b764 <tcp_process+0x5bc>)
 801b6da:	781b      	ldrb	r3, [r3, #0]
 801b6dc:	f003 0320 	and.w	r3, r3, #32
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d071      	beq.n	801b7c8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b6e4:	4b14      	ldr	r3, [pc, #80]	; (801b738 <tcp_process+0x590>)
 801b6e6:	781b      	ldrb	r3, [r3, #0]
 801b6e8:	f003 0310 	and.w	r3, r3, #16
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d060      	beq.n	801b7b2 <tcp_process+0x60a>
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b6f4:	4b11      	ldr	r3, [pc, #68]	; (801b73c <tcp_process+0x594>)
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	429a      	cmp	r2, r3
 801b6fa:	d15a      	bne.n	801b7b2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b700:	2b00      	cmp	r3, #0
 801b702:	d156      	bne.n	801b7b2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	8b5b      	ldrh	r3, [r3, #26]
 801b708:	f043 0302 	orr.w	r3, r3, #2
 801b70c:	b29a      	uxth	r2, r3
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801b712:	6878      	ldr	r0, [r7, #4]
 801b714:	f7fe fdbc 	bl	801a290 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801b718:	4b13      	ldr	r3, [pc, #76]	; (801b768 <tcp_process+0x5c0>)
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	687a      	ldr	r2, [r7, #4]
 801b71e:	429a      	cmp	r2, r3
 801b720:	d105      	bne.n	801b72e <tcp_process+0x586>
 801b722:	4b11      	ldr	r3, [pc, #68]	; (801b768 <tcp_process+0x5c0>)
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	68db      	ldr	r3, [r3, #12]
 801b728:	4a0f      	ldr	r2, [pc, #60]	; (801b768 <tcp_process+0x5c0>)
 801b72a:	6013      	str	r3, [r2, #0]
 801b72c:	e02e      	b.n	801b78c <tcp_process+0x5e4>
 801b72e:	4b0e      	ldr	r3, [pc, #56]	; (801b768 <tcp_process+0x5c0>)
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	617b      	str	r3, [r7, #20]
 801b734:	e027      	b.n	801b786 <tcp_process+0x5de>
 801b736:	bf00      	nop
 801b738:	2002f028 	.word	0x2002f028
 801b73c:	2002f020 	.word	0x2002f020
 801b740:	2002f026 	.word	0x2002f026
 801b744:	2002f01c 	.word	0x2002f01c
 801b748:	2002f00c 	.word	0x2002f00c
 801b74c:	2002bef4 	.word	0x2002bef4
 801b750:	2002bef8 	.word	0x2002bef8
 801b754:	080255f8 	.word	0x080255f8
 801b758:	08025898 	.word	0x08025898
 801b75c:	08025644 	.word	0x08025644
 801b760:	2002f024 	.word	0x2002f024
 801b764:	2002f029 	.word	0x2002f029
 801b768:	2002eff0 	.word	0x2002eff0
 801b76c:	697b      	ldr	r3, [r7, #20]
 801b76e:	68db      	ldr	r3, [r3, #12]
 801b770:	687a      	ldr	r2, [r7, #4]
 801b772:	429a      	cmp	r2, r3
 801b774:	d104      	bne.n	801b780 <tcp_process+0x5d8>
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	68da      	ldr	r2, [r3, #12]
 801b77a:	697b      	ldr	r3, [r7, #20]
 801b77c:	60da      	str	r2, [r3, #12]
 801b77e:	e005      	b.n	801b78c <tcp_process+0x5e4>
 801b780:	697b      	ldr	r3, [r7, #20]
 801b782:	68db      	ldr	r3, [r3, #12]
 801b784:	617b      	str	r3, [r7, #20]
 801b786:	697b      	ldr	r3, [r7, #20]
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d1ef      	bne.n	801b76c <tcp_process+0x5c4>
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	2200      	movs	r2, #0
 801b790:	60da      	str	r2, [r3, #12]
 801b792:	4b77      	ldr	r3, [pc, #476]	; (801b970 <tcp_process+0x7c8>)
 801b794:	2201      	movs	r2, #1
 801b796:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	220a      	movs	r2, #10
 801b79c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801b79e:	4b75      	ldr	r3, [pc, #468]	; (801b974 <tcp_process+0x7cc>)
 801b7a0:	681a      	ldr	r2, [r3, #0]
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	60da      	str	r2, [r3, #12]
 801b7a6:	4a73      	ldr	r2, [pc, #460]	; (801b974 <tcp_process+0x7cc>)
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	6013      	str	r3, [r2, #0]
 801b7ac:	f003 f952 	bl	801ea54 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801b7b0:	e0d2      	b.n	801b958 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	8b5b      	ldrh	r3, [r3, #26]
 801b7b6:	f043 0302 	orr.w	r3, r3, #2
 801b7ba:	b29a      	uxth	r2, r3
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	2208      	movs	r2, #8
 801b7c4:	751a      	strb	r2, [r3, #20]
      break;
 801b7c6:	e0c7      	b.n	801b958 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b7c8:	4b6b      	ldr	r3, [pc, #428]	; (801b978 <tcp_process+0x7d0>)
 801b7ca:	781b      	ldrb	r3, [r3, #0]
 801b7cc:	f003 0310 	and.w	r3, r3, #16
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	f000 80c1 	beq.w	801b958 <tcp_process+0x7b0>
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b7da:	4b68      	ldr	r3, [pc, #416]	; (801b97c <tcp_process+0x7d4>)
 801b7dc:	681b      	ldr	r3, [r3, #0]
 801b7de:	429a      	cmp	r2, r3
 801b7e0:	f040 80ba 	bne.w	801b958 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	f040 80b5 	bne.w	801b958 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	2206      	movs	r2, #6
 801b7f2:	751a      	strb	r2, [r3, #20]
      break;
 801b7f4:	e0b0      	b.n	801b958 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801b7f6:	6878      	ldr	r0, [r7, #4]
 801b7f8:	f000 f9ca 	bl	801bb90 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801b7fc:	4b60      	ldr	r3, [pc, #384]	; (801b980 <tcp_process+0x7d8>)
 801b7fe:	781b      	ldrb	r3, [r3, #0]
 801b800:	f003 0320 	and.w	r3, r3, #32
 801b804:	2b00      	cmp	r3, #0
 801b806:	f000 80a9 	beq.w	801b95c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	8b5b      	ldrh	r3, [r3, #26]
 801b80e:	f043 0302 	orr.w	r3, r3, #2
 801b812:	b29a      	uxth	r2, r3
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801b818:	6878      	ldr	r0, [r7, #4]
 801b81a:	f7fe fd39 	bl	801a290 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801b81e:	4b59      	ldr	r3, [pc, #356]	; (801b984 <tcp_process+0x7dc>)
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	687a      	ldr	r2, [r7, #4]
 801b824:	429a      	cmp	r2, r3
 801b826:	d105      	bne.n	801b834 <tcp_process+0x68c>
 801b828:	4b56      	ldr	r3, [pc, #344]	; (801b984 <tcp_process+0x7dc>)
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	68db      	ldr	r3, [r3, #12]
 801b82e:	4a55      	ldr	r2, [pc, #340]	; (801b984 <tcp_process+0x7dc>)
 801b830:	6013      	str	r3, [r2, #0]
 801b832:	e013      	b.n	801b85c <tcp_process+0x6b4>
 801b834:	4b53      	ldr	r3, [pc, #332]	; (801b984 <tcp_process+0x7dc>)
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	613b      	str	r3, [r7, #16]
 801b83a:	e00c      	b.n	801b856 <tcp_process+0x6ae>
 801b83c:	693b      	ldr	r3, [r7, #16]
 801b83e:	68db      	ldr	r3, [r3, #12]
 801b840:	687a      	ldr	r2, [r7, #4]
 801b842:	429a      	cmp	r2, r3
 801b844:	d104      	bne.n	801b850 <tcp_process+0x6a8>
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	68da      	ldr	r2, [r3, #12]
 801b84a:	693b      	ldr	r3, [r7, #16]
 801b84c:	60da      	str	r2, [r3, #12]
 801b84e:	e005      	b.n	801b85c <tcp_process+0x6b4>
 801b850:	693b      	ldr	r3, [r7, #16]
 801b852:	68db      	ldr	r3, [r3, #12]
 801b854:	613b      	str	r3, [r7, #16]
 801b856:	693b      	ldr	r3, [r7, #16]
 801b858:	2b00      	cmp	r3, #0
 801b85a:	d1ef      	bne.n	801b83c <tcp_process+0x694>
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	2200      	movs	r2, #0
 801b860:	60da      	str	r2, [r3, #12]
 801b862:	4b43      	ldr	r3, [pc, #268]	; (801b970 <tcp_process+0x7c8>)
 801b864:	2201      	movs	r2, #1
 801b866:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	220a      	movs	r2, #10
 801b86c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801b86e:	4b41      	ldr	r3, [pc, #260]	; (801b974 <tcp_process+0x7cc>)
 801b870:	681a      	ldr	r2, [r3, #0]
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	60da      	str	r2, [r3, #12]
 801b876:	4a3f      	ldr	r2, [pc, #252]	; (801b974 <tcp_process+0x7cc>)
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	6013      	str	r3, [r2, #0]
 801b87c:	f003 f8ea 	bl	801ea54 <tcp_timer_needed>
      }
      break;
 801b880:	e06c      	b.n	801b95c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801b882:	6878      	ldr	r0, [r7, #4]
 801b884:	f000 f984 	bl	801bb90 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801b888:	4b3b      	ldr	r3, [pc, #236]	; (801b978 <tcp_process+0x7d0>)
 801b88a:	781b      	ldrb	r3, [r3, #0]
 801b88c:	f003 0310 	and.w	r3, r3, #16
 801b890:	2b00      	cmp	r3, #0
 801b892:	d065      	beq.n	801b960 <tcp_process+0x7b8>
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b898:	4b38      	ldr	r3, [pc, #224]	; (801b97c <tcp_process+0x7d4>)
 801b89a:	681b      	ldr	r3, [r3, #0]
 801b89c:	429a      	cmp	r2, r3
 801b89e:	d15f      	bne.n	801b960 <tcp_process+0x7b8>
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d15b      	bne.n	801b960 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801b8a8:	6878      	ldr	r0, [r7, #4]
 801b8aa:	f7fe fcf1 	bl	801a290 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801b8ae:	4b35      	ldr	r3, [pc, #212]	; (801b984 <tcp_process+0x7dc>)
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	687a      	ldr	r2, [r7, #4]
 801b8b4:	429a      	cmp	r2, r3
 801b8b6:	d105      	bne.n	801b8c4 <tcp_process+0x71c>
 801b8b8:	4b32      	ldr	r3, [pc, #200]	; (801b984 <tcp_process+0x7dc>)
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	68db      	ldr	r3, [r3, #12]
 801b8be:	4a31      	ldr	r2, [pc, #196]	; (801b984 <tcp_process+0x7dc>)
 801b8c0:	6013      	str	r3, [r2, #0]
 801b8c2:	e013      	b.n	801b8ec <tcp_process+0x744>
 801b8c4:	4b2f      	ldr	r3, [pc, #188]	; (801b984 <tcp_process+0x7dc>)
 801b8c6:	681b      	ldr	r3, [r3, #0]
 801b8c8:	60fb      	str	r3, [r7, #12]
 801b8ca:	e00c      	b.n	801b8e6 <tcp_process+0x73e>
 801b8cc:	68fb      	ldr	r3, [r7, #12]
 801b8ce:	68db      	ldr	r3, [r3, #12]
 801b8d0:	687a      	ldr	r2, [r7, #4]
 801b8d2:	429a      	cmp	r2, r3
 801b8d4:	d104      	bne.n	801b8e0 <tcp_process+0x738>
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	68da      	ldr	r2, [r3, #12]
 801b8da:	68fb      	ldr	r3, [r7, #12]
 801b8dc:	60da      	str	r2, [r3, #12]
 801b8de:	e005      	b.n	801b8ec <tcp_process+0x744>
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	68db      	ldr	r3, [r3, #12]
 801b8e4:	60fb      	str	r3, [r7, #12]
 801b8e6:	68fb      	ldr	r3, [r7, #12]
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d1ef      	bne.n	801b8cc <tcp_process+0x724>
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	2200      	movs	r2, #0
 801b8f0:	60da      	str	r2, [r3, #12]
 801b8f2:	4b1f      	ldr	r3, [pc, #124]	; (801b970 <tcp_process+0x7c8>)
 801b8f4:	2201      	movs	r2, #1
 801b8f6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	220a      	movs	r2, #10
 801b8fc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801b8fe:	4b1d      	ldr	r3, [pc, #116]	; (801b974 <tcp_process+0x7cc>)
 801b900:	681a      	ldr	r2, [r3, #0]
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	60da      	str	r2, [r3, #12]
 801b906:	4a1b      	ldr	r2, [pc, #108]	; (801b974 <tcp_process+0x7cc>)
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	6013      	str	r3, [r2, #0]
 801b90c:	f003 f8a2 	bl	801ea54 <tcp_timer_needed>
      }
      break;
 801b910:	e026      	b.n	801b960 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801b912:	6878      	ldr	r0, [r7, #4]
 801b914:	f000 f93c 	bl	801bb90 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801b918:	4b17      	ldr	r3, [pc, #92]	; (801b978 <tcp_process+0x7d0>)
 801b91a:	781b      	ldrb	r3, [r3, #0]
 801b91c:	f003 0310 	and.w	r3, r3, #16
 801b920:	2b00      	cmp	r3, #0
 801b922:	d01f      	beq.n	801b964 <tcp_process+0x7bc>
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b928:	4b14      	ldr	r3, [pc, #80]	; (801b97c <tcp_process+0x7d4>)
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	429a      	cmp	r2, r3
 801b92e:	d119      	bne.n	801b964 <tcp_process+0x7bc>
 801b930:	687b      	ldr	r3, [r7, #4]
 801b932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b934:	2b00      	cmp	r3, #0
 801b936:	d115      	bne.n	801b964 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801b938:	4b11      	ldr	r3, [pc, #68]	; (801b980 <tcp_process+0x7d8>)
 801b93a:	781b      	ldrb	r3, [r3, #0]
 801b93c:	f043 0310 	orr.w	r3, r3, #16
 801b940:	b2da      	uxtb	r2, r3
 801b942:	4b0f      	ldr	r3, [pc, #60]	; (801b980 <tcp_process+0x7d8>)
 801b944:	701a      	strb	r2, [r3, #0]
      }
      break;
 801b946:	e00d      	b.n	801b964 <tcp_process+0x7bc>
    default:
      break;
 801b948:	bf00      	nop
 801b94a:	e00c      	b.n	801b966 <tcp_process+0x7be>
      break;
 801b94c:	bf00      	nop
 801b94e:	e00a      	b.n	801b966 <tcp_process+0x7be>
      break;
 801b950:	bf00      	nop
 801b952:	e008      	b.n	801b966 <tcp_process+0x7be>
      break;
 801b954:	bf00      	nop
 801b956:	e006      	b.n	801b966 <tcp_process+0x7be>
      break;
 801b958:	bf00      	nop
 801b95a:	e004      	b.n	801b966 <tcp_process+0x7be>
      break;
 801b95c:	bf00      	nop
 801b95e:	e002      	b.n	801b966 <tcp_process+0x7be>
      break;
 801b960:	bf00      	nop
 801b962:	e000      	b.n	801b966 <tcp_process+0x7be>
      break;
 801b964:	bf00      	nop
  }
  return ERR_OK;
 801b966:	2300      	movs	r3, #0
}
 801b968:	4618      	mov	r0, r3
 801b96a:	3724      	adds	r7, #36	; 0x24
 801b96c:	46bd      	mov	sp, r7
 801b96e:	bd90      	pop	{r4, r7, pc}
 801b970:	2002eff8 	.word	0x2002eff8
 801b974:	2002eff4 	.word	0x2002eff4
 801b978:	2002f028 	.word	0x2002f028
 801b97c:	2002f020 	.word	0x2002f020
 801b980:	2002f029 	.word	0x2002f029
 801b984:	2002eff0 	.word	0x2002eff0

0801b988 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801b988:	b590      	push	{r4, r7, lr}
 801b98a:	b085      	sub	sp, #20
 801b98c:	af00      	add	r7, sp, #0
 801b98e:	6078      	str	r0, [r7, #4]
 801b990:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	2b00      	cmp	r3, #0
 801b996:	d106      	bne.n	801b9a6 <tcp_oos_insert_segment+0x1e>
 801b998:	4b3b      	ldr	r3, [pc, #236]	; (801ba88 <tcp_oos_insert_segment+0x100>)
 801b99a:	f240 421f 	movw	r2, #1055	; 0x41f
 801b99e:	493b      	ldr	r1, [pc, #236]	; (801ba8c <tcp_oos_insert_segment+0x104>)
 801b9a0:	483b      	ldr	r0, [pc, #236]	; (801ba90 <tcp_oos_insert_segment+0x108>)
 801b9a2:	f006 fccd 	bl	8022340 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	68db      	ldr	r3, [r3, #12]
 801b9aa:	899b      	ldrh	r3, [r3, #12]
 801b9ac:	b29b      	uxth	r3, r3
 801b9ae:	4618      	mov	r0, r3
 801b9b0:	f7fb f886 	bl	8016ac0 <lwip_htons>
 801b9b4:	4603      	mov	r3, r0
 801b9b6:	b2db      	uxtb	r3, r3
 801b9b8:	f003 0301 	and.w	r3, r3, #1
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d028      	beq.n	801ba12 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801b9c0:	6838      	ldr	r0, [r7, #0]
 801b9c2:	f7fe f995 	bl	8019cf0 <tcp_segs_free>
    next = NULL;
 801b9c6:	2300      	movs	r3, #0
 801b9c8:	603b      	str	r3, [r7, #0]
 801b9ca:	e056      	b.n	801ba7a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801b9cc:	683b      	ldr	r3, [r7, #0]
 801b9ce:	68db      	ldr	r3, [r3, #12]
 801b9d0:	899b      	ldrh	r3, [r3, #12]
 801b9d2:	b29b      	uxth	r3, r3
 801b9d4:	4618      	mov	r0, r3
 801b9d6:	f7fb f873 	bl	8016ac0 <lwip_htons>
 801b9da:	4603      	mov	r3, r0
 801b9dc:	b2db      	uxtb	r3, r3
 801b9de:	f003 0301 	and.w	r3, r3, #1
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d00d      	beq.n	801ba02 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	68db      	ldr	r3, [r3, #12]
 801b9ea:	899b      	ldrh	r3, [r3, #12]
 801b9ec:	b29c      	uxth	r4, r3
 801b9ee:	2001      	movs	r0, #1
 801b9f0:	f7fb f866 	bl	8016ac0 <lwip_htons>
 801b9f4:	4603      	mov	r3, r0
 801b9f6:	461a      	mov	r2, r3
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	68db      	ldr	r3, [r3, #12]
 801b9fc:	4322      	orrs	r2, r4
 801b9fe:	b292      	uxth	r2, r2
 801ba00:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801ba02:	683b      	ldr	r3, [r7, #0]
 801ba04:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801ba06:	683b      	ldr	r3, [r7, #0]
 801ba08:	681b      	ldr	r3, [r3, #0]
 801ba0a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801ba0c:	68f8      	ldr	r0, [r7, #12]
 801ba0e:	f7fe f984 	bl	8019d1a <tcp_seg_free>
    while (next &&
 801ba12:	683b      	ldr	r3, [r7, #0]
 801ba14:	2b00      	cmp	r3, #0
 801ba16:	d00e      	beq.n	801ba36 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	891b      	ldrh	r3, [r3, #8]
 801ba1c:	461a      	mov	r2, r3
 801ba1e:	4b1d      	ldr	r3, [pc, #116]	; (801ba94 <tcp_oos_insert_segment+0x10c>)
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	441a      	add	r2, r3
 801ba24:	683b      	ldr	r3, [r7, #0]
 801ba26:	68db      	ldr	r3, [r3, #12]
 801ba28:	685b      	ldr	r3, [r3, #4]
 801ba2a:	6839      	ldr	r1, [r7, #0]
 801ba2c:	8909      	ldrh	r1, [r1, #8]
 801ba2e:	440b      	add	r3, r1
 801ba30:	1ad3      	subs	r3, r2, r3
    while (next &&
 801ba32:	2b00      	cmp	r3, #0
 801ba34:	daca      	bge.n	801b9cc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801ba36:	683b      	ldr	r3, [r7, #0]
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d01e      	beq.n	801ba7a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	891b      	ldrh	r3, [r3, #8]
 801ba40:	461a      	mov	r2, r3
 801ba42:	4b14      	ldr	r3, [pc, #80]	; (801ba94 <tcp_oos_insert_segment+0x10c>)
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	441a      	add	r2, r3
 801ba48:	683b      	ldr	r3, [r7, #0]
 801ba4a:	68db      	ldr	r3, [r3, #12]
 801ba4c:	685b      	ldr	r3, [r3, #4]
 801ba4e:	1ad3      	subs	r3, r2, r3
    if (next &&
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	dd12      	ble.n	801ba7a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801ba54:	683b      	ldr	r3, [r7, #0]
 801ba56:	68db      	ldr	r3, [r3, #12]
 801ba58:	685b      	ldr	r3, [r3, #4]
 801ba5a:	b29a      	uxth	r2, r3
 801ba5c:	4b0d      	ldr	r3, [pc, #52]	; (801ba94 <tcp_oos_insert_segment+0x10c>)
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	b29b      	uxth	r3, r3
 801ba62:	1ad3      	subs	r3, r2, r3
 801ba64:	b29a      	uxth	r2, r3
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	685a      	ldr	r2, [r3, #4]
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	891b      	ldrh	r3, [r3, #8]
 801ba72:	4619      	mov	r1, r3
 801ba74:	4610      	mov	r0, r2
 801ba76:	f7fc fb47 	bl	8018108 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	683a      	ldr	r2, [r7, #0]
 801ba7e:	601a      	str	r2, [r3, #0]
}
 801ba80:	bf00      	nop
 801ba82:	3714      	adds	r7, #20
 801ba84:	46bd      	mov	sp, r7
 801ba86:	bd90      	pop	{r4, r7, pc}
 801ba88:	080255f8 	.word	0x080255f8
 801ba8c:	080258b8 	.word	0x080258b8
 801ba90:	08025644 	.word	0x08025644
 801ba94:	2002f01c 	.word	0x2002f01c

0801ba98 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801ba98:	b5b0      	push	{r4, r5, r7, lr}
 801ba9a:	b086      	sub	sp, #24
 801ba9c:	af00      	add	r7, sp, #0
 801ba9e:	60f8      	str	r0, [r7, #12]
 801baa0:	60b9      	str	r1, [r7, #8]
 801baa2:	607a      	str	r2, [r7, #4]
 801baa4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801baa6:	e03e      	b.n	801bb26 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801baa8:	68bb      	ldr	r3, [r7, #8]
 801baaa:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801baac:	68bb      	ldr	r3, [r7, #8]
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801bab2:	697b      	ldr	r3, [r7, #20]
 801bab4:	685b      	ldr	r3, [r3, #4]
 801bab6:	4618      	mov	r0, r3
 801bab8:	f7fc fd3a 	bl	8018530 <pbuf_clen>
 801babc:	4603      	mov	r3, r0
 801babe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801bac0:	68fb      	ldr	r3, [r7, #12]
 801bac2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bac6:	8a7a      	ldrh	r2, [r7, #18]
 801bac8:	429a      	cmp	r2, r3
 801baca:	d906      	bls.n	801bada <tcp_free_acked_segments+0x42>
 801bacc:	4b2a      	ldr	r3, [pc, #168]	; (801bb78 <tcp_free_acked_segments+0xe0>)
 801bace:	f240 4257 	movw	r2, #1111	; 0x457
 801bad2:	492a      	ldr	r1, [pc, #168]	; (801bb7c <tcp_free_acked_segments+0xe4>)
 801bad4:	482a      	ldr	r0, [pc, #168]	; (801bb80 <tcp_free_acked_segments+0xe8>)
 801bad6:	f006 fc33 	bl	8022340 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801bae0:	8a7b      	ldrh	r3, [r7, #18]
 801bae2:	1ad3      	subs	r3, r2, r3
 801bae4:	b29a      	uxth	r2, r3
 801bae6:	68fb      	ldr	r3, [r7, #12]
 801bae8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801baec:	697b      	ldr	r3, [r7, #20]
 801baee:	891a      	ldrh	r2, [r3, #8]
 801baf0:	4b24      	ldr	r3, [pc, #144]	; (801bb84 <tcp_free_acked_segments+0xec>)
 801baf2:	881b      	ldrh	r3, [r3, #0]
 801baf4:	4413      	add	r3, r2
 801baf6:	b29a      	uxth	r2, r3
 801baf8:	4b22      	ldr	r3, [pc, #136]	; (801bb84 <tcp_free_acked_segments+0xec>)
 801bafa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801bafc:	6978      	ldr	r0, [r7, #20]
 801bafe:	f7fe f90c 	bl	8019d1a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801bb02:	68fb      	ldr	r3, [r7, #12]
 801bb04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bb08:	2b00      	cmp	r3, #0
 801bb0a:	d00c      	beq.n	801bb26 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801bb0c:	68bb      	ldr	r3, [r7, #8]
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	d109      	bne.n	801bb26 <tcp_free_acked_segments+0x8e>
 801bb12:	683b      	ldr	r3, [r7, #0]
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	d106      	bne.n	801bb26 <tcp_free_acked_segments+0x8e>
 801bb18:	4b17      	ldr	r3, [pc, #92]	; (801bb78 <tcp_free_acked_segments+0xe0>)
 801bb1a:	f240 4261 	movw	r2, #1121	; 0x461
 801bb1e:	491a      	ldr	r1, [pc, #104]	; (801bb88 <tcp_free_acked_segments+0xf0>)
 801bb20:	4817      	ldr	r0, [pc, #92]	; (801bb80 <tcp_free_acked_segments+0xe8>)
 801bb22:	f006 fc0d 	bl	8022340 <iprintf>
  while (seg_list != NULL &&
 801bb26:	68bb      	ldr	r3, [r7, #8]
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	d020      	beq.n	801bb6e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801bb2c:	68bb      	ldr	r3, [r7, #8]
 801bb2e:	68db      	ldr	r3, [r3, #12]
 801bb30:	685b      	ldr	r3, [r3, #4]
 801bb32:	4618      	mov	r0, r3
 801bb34:	f7fa ffd9 	bl	8016aea <lwip_htonl>
 801bb38:	4604      	mov	r4, r0
 801bb3a:	68bb      	ldr	r3, [r7, #8]
 801bb3c:	891b      	ldrh	r3, [r3, #8]
 801bb3e:	461d      	mov	r5, r3
 801bb40:	68bb      	ldr	r3, [r7, #8]
 801bb42:	68db      	ldr	r3, [r3, #12]
 801bb44:	899b      	ldrh	r3, [r3, #12]
 801bb46:	b29b      	uxth	r3, r3
 801bb48:	4618      	mov	r0, r3
 801bb4a:	f7fa ffb9 	bl	8016ac0 <lwip_htons>
 801bb4e:	4603      	mov	r3, r0
 801bb50:	b2db      	uxtb	r3, r3
 801bb52:	f003 0303 	and.w	r3, r3, #3
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d001      	beq.n	801bb5e <tcp_free_acked_segments+0xc6>
 801bb5a:	2301      	movs	r3, #1
 801bb5c:	e000      	b.n	801bb60 <tcp_free_acked_segments+0xc8>
 801bb5e:	2300      	movs	r3, #0
 801bb60:	442b      	add	r3, r5
 801bb62:	18e2      	adds	r2, r4, r3
 801bb64:	4b09      	ldr	r3, [pc, #36]	; (801bb8c <tcp_free_acked_segments+0xf4>)
 801bb66:	681b      	ldr	r3, [r3, #0]
 801bb68:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	dd9c      	ble.n	801baa8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801bb6e:	68bb      	ldr	r3, [r7, #8]
}
 801bb70:	4618      	mov	r0, r3
 801bb72:	3718      	adds	r7, #24
 801bb74:	46bd      	mov	sp, r7
 801bb76:	bdb0      	pop	{r4, r5, r7, pc}
 801bb78:	080255f8 	.word	0x080255f8
 801bb7c:	080258e0 	.word	0x080258e0
 801bb80:	08025644 	.word	0x08025644
 801bb84:	2002f024 	.word	0x2002f024
 801bb88:	08025908 	.word	0x08025908
 801bb8c:	2002f020 	.word	0x2002f020

0801bb90 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801bb90:	b5b0      	push	{r4, r5, r7, lr}
 801bb92:	b094      	sub	sp, #80	; 0x50
 801bb94:	af00      	add	r7, sp, #0
 801bb96:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801bb98:	2300      	movs	r3, #0
 801bb9a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d106      	bne.n	801bbb0 <tcp_receive+0x20>
 801bba2:	4b91      	ldr	r3, [pc, #580]	; (801bde8 <tcp_receive+0x258>)
 801bba4:	f240 427b 	movw	r2, #1147	; 0x47b
 801bba8:	4990      	ldr	r1, [pc, #576]	; (801bdec <tcp_receive+0x25c>)
 801bbaa:	4891      	ldr	r0, [pc, #580]	; (801bdf0 <tcp_receive+0x260>)
 801bbac:	f006 fbc8 	bl	8022340 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	7d1b      	ldrb	r3, [r3, #20]
 801bbb4:	2b03      	cmp	r3, #3
 801bbb6:	d806      	bhi.n	801bbc6 <tcp_receive+0x36>
 801bbb8:	4b8b      	ldr	r3, [pc, #556]	; (801bde8 <tcp_receive+0x258>)
 801bbba:	f240 427c 	movw	r2, #1148	; 0x47c
 801bbbe:	498d      	ldr	r1, [pc, #564]	; (801bdf4 <tcp_receive+0x264>)
 801bbc0:	488b      	ldr	r0, [pc, #556]	; (801bdf0 <tcp_receive+0x260>)
 801bbc2:	f006 fbbd 	bl	8022340 <iprintf>

  if (flags & TCP_ACK) {
 801bbc6:	4b8c      	ldr	r3, [pc, #560]	; (801bdf8 <tcp_receive+0x268>)
 801bbc8:	781b      	ldrb	r3, [r3, #0]
 801bbca:	f003 0310 	and.w	r3, r3, #16
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	f000 8264 	beq.w	801c09c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801bbda:	461a      	mov	r2, r3
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bbe0:	4413      	add	r3, r2
 801bbe2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801bbe8:	4b84      	ldr	r3, [pc, #528]	; (801bdfc <tcp_receive+0x26c>)
 801bbea:	681b      	ldr	r3, [r3, #0]
 801bbec:	1ad3      	subs	r3, r2, r3
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	db1b      	blt.n	801bc2a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801bbf6:	4b81      	ldr	r3, [pc, #516]	; (801bdfc <tcp_receive+0x26c>)
 801bbf8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801bbfa:	429a      	cmp	r2, r3
 801bbfc:	d106      	bne.n	801bc0c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801bc02:	4b7f      	ldr	r3, [pc, #508]	; (801be00 <tcp_receive+0x270>)
 801bc04:	681b      	ldr	r3, [r3, #0]
 801bc06:	1ad3      	subs	r3, r2, r3
 801bc08:	2b00      	cmp	r3, #0
 801bc0a:	db0e      	blt.n	801bc2a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801bc10:	4b7b      	ldr	r3, [pc, #492]	; (801be00 <tcp_receive+0x270>)
 801bc12:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801bc14:	429a      	cmp	r2, r3
 801bc16:	d125      	bne.n	801bc64 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801bc18:	4b7a      	ldr	r3, [pc, #488]	; (801be04 <tcp_receive+0x274>)
 801bc1a:	681b      	ldr	r3, [r3, #0]
 801bc1c:	89db      	ldrh	r3, [r3, #14]
 801bc1e:	b29a      	uxth	r2, r3
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801bc26:	429a      	cmp	r2, r3
 801bc28:	d91c      	bls.n	801bc64 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801bc2a:	4b76      	ldr	r3, [pc, #472]	; (801be04 <tcp_receive+0x274>)
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	89db      	ldrh	r3, [r3, #14]
 801bc30:	b29a      	uxth	r2, r3
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801bc44:	429a      	cmp	r2, r3
 801bc46:	d205      	bcs.n	801bc54 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801bc48:	687b      	ldr	r3, [r7, #4]
 801bc4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801bc54:	4b69      	ldr	r3, [pc, #420]	; (801bdfc <tcp_receive+0x26c>)
 801bc56:	681a      	ldr	r2, [r3, #0]
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801bc5c:	4b68      	ldr	r3, [pc, #416]	; (801be00 <tcp_receive+0x270>)
 801bc5e:	681a      	ldr	r2, [r3, #0]
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801bc64:	4b66      	ldr	r3, [pc, #408]	; (801be00 <tcp_receive+0x270>)
 801bc66:	681a      	ldr	r2, [r3, #0]
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc6c:	1ad3      	subs	r3, r2, r3
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	dc58      	bgt.n	801bd24 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801bc72:	4b65      	ldr	r3, [pc, #404]	; (801be08 <tcp_receive+0x278>)
 801bc74:	881b      	ldrh	r3, [r3, #0]
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d14b      	bne.n	801bd12 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bc7e:	687a      	ldr	r2, [r7, #4]
 801bc80:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801bc84:	4413      	add	r3, r2
 801bc86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bc88:	429a      	cmp	r2, r3
 801bc8a:	d142      	bne.n	801bd12 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	db3d      	blt.n	801bd12 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bc9a:	4b59      	ldr	r3, [pc, #356]	; (801be00 <tcp_receive+0x270>)
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	429a      	cmp	r2, r3
 801bca0:	d137      	bne.n	801bd12 <tcp_receive+0x182>
              found_dupack = 1;
 801bca2:	2301      	movs	r3, #1
 801bca4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801bcac:	2bff      	cmp	r3, #255	; 0xff
 801bcae:	d007      	beq.n	801bcc0 <tcp_receive+0x130>
                ++pcb->dupacks;
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801bcb6:	3301      	adds	r3, #1
 801bcb8:	b2da      	uxtb	r2, r3
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801bcc6:	2b03      	cmp	r3, #3
 801bcc8:	d91b      	bls.n	801bd02 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bcd4:	4413      	add	r3, r2
 801bcd6:	b29a      	uxth	r2, r3
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801bcde:	429a      	cmp	r2, r3
 801bce0:	d30a      	bcc.n	801bcf8 <tcp_receive+0x168>
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bcec:	4413      	add	r3, r2
 801bcee:	b29a      	uxth	r2, r3
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801bcf6:	e004      	b.n	801bd02 <tcp_receive+0x172>
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bcfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801bd08:	2b02      	cmp	r3, #2
 801bd0a:	d902      	bls.n	801bd12 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801bd0c:	6878      	ldr	r0, [r7, #4]
 801bd0e:	f002 fb45 	bl	801e39c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801bd12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	f040 8161 	bne.w	801bfdc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	2200      	movs	r2, #0
 801bd1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801bd22:	e15b      	b.n	801bfdc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bd24:	4b36      	ldr	r3, [pc, #216]	; (801be00 <tcp_receive+0x270>)
 801bd26:	681a      	ldr	r2, [r3, #0]
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bd2c:	1ad3      	subs	r3, r2, r3
 801bd2e:	3b01      	subs	r3, #1
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	f2c0 814e 	blt.w	801bfd2 <tcp_receive+0x442>
 801bd36:	4b32      	ldr	r3, [pc, #200]	; (801be00 <tcp_receive+0x270>)
 801bd38:	681a      	ldr	r2, [r3, #0]
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bd3e:	1ad3      	subs	r3, r2, r3
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	f300 8146 	bgt.w	801bfd2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	8b5b      	ldrh	r3, [r3, #26]
 801bd4a:	f003 0304 	and.w	r3, r3, #4
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d010      	beq.n	801bd74 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801bd52:	687b      	ldr	r3, [r7, #4]
 801bd54:	8b5b      	ldrh	r3, [r3, #26]
 801bd56:	f023 0304 	bic.w	r3, r3, #4
 801bd5a:	b29a      	uxth	r2, r3
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	2200      	movs	r2, #0
 801bd70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	2200      	movs	r2, #0
 801bd78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801bd82:	10db      	asrs	r3, r3, #3
 801bd84:	b21b      	sxth	r3, r3
 801bd86:	b29a      	uxth	r2, r3
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801bd8e:	b29b      	uxth	r3, r3
 801bd90:	4413      	add	r3, r2
 801bd92:	b29b      	uxth	r3, r3
 801bd94:	b21a      	sxth	r2, r3
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801bd9c:	4b18      	ldr	r3, [pc, #96]	; (801be00 <tcp_receive+0x270>)
 801bd9e:	681b      	ldr	r3, [r3, #0]
 801bda0:	b29a      	uxth	r2, r3
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bda6:	b29b      	uxth	r3, r3
 801bda8:	1ad3      	subs	r3, r2, r3
 801bdaa:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	2200      	movs	r2, #0
 801bdb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801bdb4:	4b12      	ldr	r3, [pc, #72]	; (801be00 <tcp_receive+0x270>)
 801bdb6:	681a      	ldr	r2, [r3, #0]
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	7d1b      	ldrb	r3, [r3, #20]
 801bdc0:	2b03      	cmp	r3, #3
 801bdc2:	f240 8097 	bls.w	801bef4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801bdd2:	429a      	cmp	r2, r3
 801bdd4:	d245      	bcs.n	801be62 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	8b5b      	ldrh	r3, [r3, #26]
 801bdda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d014      	beq.n	801be0c <tcp_receive+0x27c>
 801bde2:	2301      	movs	r3, #1
 801bde4:	e013      	b.n	801be0e <tcp_receive+0x27e>
 801bde6:	bf00      	nop
 801bde8:	080255f8 	.word	0x080255f8
 801bdec:	08025928 	.word	0x08025928
 801bdf0:	08025644 	.word	0x08025644
 801bdf4:	08025944 	.word	0x08025944
 801bdf8:	2002f028 	.word	0x2002f028
 801bdfc:	2002f01c 	.word	0x2002f01c
 801be00:	2002f020 	.word	0x2002f020
 801be04:	2002f00c 	.word	0x2002f00c
 801be08:	2002f026 	.word	0x2002f026
 801be0c:	2302      	movs	r3, #2
 801be0e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801be12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801be16:	b29a      	uxth	r2, r3
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801be1c:	fb12 f303 	smulbb	r3, r2, r3
 801be20:	b29b      	uxth	r3, r3
 801be22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801be24:	4293      	cmp	r3, r2
 801be26:	bf28      	it	cs
 801be28:	4613      	movcs	r3, r2
 801be2a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801be32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801be34:	4413      	add	r3, r2
 801be36:	b29a      	uxth	r2, r3
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801be3e:	429a      	cmp	r2, r3
 801be40:	d309      	bcc.n	801be56 <tcp_receive+0x2c6>
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801be48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801be4a:	4413      	add	r3, r2
 801be4c:	b29a      	uxth	r2, r3
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801be54:	e04e      	b.n	801bef4 <tcp_receive+0x364>
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801be5c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801be60:	e048      	b.n	801bef4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801be68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801be6a:	4413      	add	r3, r2
 801be6c:	b29a      	uxth	r2, r3
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801be74:	429a      	cmp	r2, r3
 801be76:	d309      	bcc.n	801be8c <tcp_receive+0x2fc>
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801be7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801be80:	4413      	add	r3, r2
 801be82:	b29a      	uxth	r2, r3
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801be8a:	e004      	b.n	801be96 <tcp_receive+0x306>
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801be92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801bea2:	429a      	cmp	r2, r3
 801bea4:	d326      	bcc.n	801bef4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801beb2:	1ad3      	subs	r3, r2, r3
 801beb4:	b29a      	uxth	r2, r3
 801beb6:	687b      	ldr	r3, [r7, #4]
 801beb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bec6:	4413      	add	r3, r2
 801bec8:	b29a      	uxth	r2, r3
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801bed0:	429a      	cmp	r2, r3
 801bed2:	d30a      	bcc.n	801beea <tcp_receive+0x35a>
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bede:	4413      	add	r3, r2
 801bee0:	b29a      	uxth	r2, r3
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801bee8:	e004      	b.n	801bef4 <tcp_receive+0x364>
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bef0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801befc:	4a98      	ldr	r2, [pc, #608]	; (801c160 <tcp_receive+0x5d0>)
 801befe:	6878      	ldr	r0, [r7, #4]
 801bf00:	f7ff fdca 	bl	801ba98 <tcp_free_acked_segments>
 801bf04:	4602      	mov	r2, r0
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf12:	4a94      	ldr	r2, [pc, #592]	; (801c164 <tcp_receive+0x5d4>)
 801bf14:	6878      	ldr	r0, [r7, #4]
 801bf16:	f7ff fdbf 	bl	801ba98 <tcp_free_acked_segments>
 801bf1a:	4602      	mov	r2, r0
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d104      	bne.n	801bf32 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801bf28:	687b      	ldr	r3, [r7, #4]
 801bf2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bf2e:	861a      	strh	r2, [r3, #48]	; 0x30
 801bf30:	e002      	b.n	801bf38 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	2200      	movs	r2, #0
 801bf36:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	2200      	movs	r2, #0
 801bf3c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d103      	bne.n	801bf4e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	2200      	movs	r2, #0
 801bf4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801bf54:	4b84      	ldr	r3, [pc, #528]	; (801c168 <tcp_receive+0x5d8>)
 801bf56:	881b      	ldrh	r3, [r3, #0]
 801bf58:	4413      	add	r3, r2
 801bf5a:	b29a      	uxth	r2, r3
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	8b5b      	ldrh	r3, [r3, #26]
 801bf66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d035      	beq.n	801bfda <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d118      	bne.n	801bfa8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d00c      	beq.n	801bf98 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bf86:	68db      	ldr	r3, [r3, #12]
 801bf88:	685b      	ldr	r3, [r3, #4]
 801bf8a:	4618      	mov	r0, r3
 801bf8c:	f7fa fdad 	bl	8016aea <lwip_htonl>
 801bf90:	4603      	mov	r3, r0
 801bf92:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801bf94:	2b00      	cmp	r3, #0
 801bf96:	dc20      	bgt.n	801bfda <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	8b5b      	ldrh	r3, [r3, #26]
 801bf9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bfa0:	b29a      	uxth	r2, r3
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bfa6:	e018      	b.n	801bfda <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bfb0:	68db      	ldr	r3, [r3, #12]
 801bfb2:	685b      	ldr	r3, [r3, #4]
 801bfb4:	4618      	mov	r0, r3
 801bfb6:	f7fa fd98 	bl	8016aea <lwip_htonl>
 801bfba:	4603      	mov	r3, r0
 801bfbc:	1ae3      	subs	r3, r4, r3
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	dc0b      	bgt.n	801bfda <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	8b5b      	ldrh	r3, [r3, #26]
 801bfc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bfca:	b29a      	uxth	r2, r3
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bfd0:	e003      	b.n	801bfda <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801bfd2:	6878      	ldr	r0, [r7, #4]
 801bfd4:	f002 fbce 	bl	801e774 <tcp_send_empty_ack>
 801bfd8:	e000      	b.n	801bfdc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bfda:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d05b      	beq.n	801c09c <tcp_receive+0x50c>
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801bfe8:	4b60      	ldr	r3, [pc, #384]	; (801c16c <tcp_receive+0x5dc>)
 801bfea:	681b      	ldr	r3, [r3, #0]
 801bfec:	1ad3      	subs	r3, r2, r3
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	da54      	bge.n	801c09c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801bff2:	4b5f      	ldr	r3, [pc, #380]	; (801c170 <tcp_receive+0x5e0>)
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	b29a      	uxth	r2, r3
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bffc:	b29b      	uxth	r3, r3
 801bffe:	1ad3      	subs	r3, r2, r3
 801c000:	b29b      	uxth	r3, r3
 801c002:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801c006:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c010:	10db      	asrs	r3, r3, #3
 801c012:	b21b      	sxth	r3, r3
 801c014:	b29b      	uxth	r3, r3
 801c016:	1ad3      	subs	r3, r2, r3
 801c018:	b29b      	uxth	r3, r3
 801c01a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c024:	b29a      	uxth	r2, r3
 801c026:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c02a:	4413      	add	r3, r2
 801c02c:	b29b      	uxth	r3, r3
 801c02e:	b21a      	sxth	r2, r3
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801c034:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801c038:	2b00      	cmp	r3, #0
 801c03a:	da05      	bge.n	801c048 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801c03c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c040:	425b      	negs	r3, r3
 801c042:	b29b      	uxth	r3, r3
 801c044:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801c048:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c052:	109b      	asrs	r3, r3, #2
 801c054:	b21b      	sxth	r3, r3
 801c056:	b29b      	uxth	r3, r3
 801c058:	1ad3      	subs	r3, r2, r3
 801c05a:	b29b      	uxth	r3, r3
 801c05c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c066:	b29a      	uxth	r2, r3
 801c068:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c06c:	4413      	add	r3, r2
 801c06e:	b29b      	uxth	r3, r3
 801c070:	b21a      	sxth	r2, r3
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c07c:	10db      	asrs	r3, r3, #3
 801c07e:	b21b      	sxth	r3, r3
 801c080:	b29a      	uxth	r2, r3
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c088:	b29b      	uxth	r3, r3
 801c08a:	4413      	add	r3, r2
 801c08c:	b29b      	uxth	r3, r3
 801c08e:	b21a      	sxth	r2, r3
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	2200      	movs	r2, #0
 801c09a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c09c:	4b35      	ldr	r3, [pc, #212]	; (801c174 <tcp_receive+0x5e4>)
 801c09e:	881b      	ldrh	r3, [r3, #0]
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	f000 84e2 	beq.w	801ca6a <tcp_receive+0xeda>
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	7d1b      	ldrb	r3, [r3, #20]
 801c0aa:	2b06      	cmp	r3, #6
 801c0ac:	f200 84dd 	bhi.w	801ca6a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c0b4:	4b30      	ldr	r3, [pc, #192]	; (801c178 <tcp_receive+0x5e8>)
 801c0b6:	681b      	ldr	r3, [r3, #0]
 801c0b8:	1ad3      	subs	r3, r2, r3
 801c0ba:	3b01      	subs	r3, #1
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	f2c0 808f 	blt.w	801c1e0 <tcp_receive+0x650>
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c0c6:	4b2b      	ldr	r3, [pc, #172]	; (801c174 <tcp_receive+0x5e4>)
 801c0c8:	881b      	ldrh	r3, [r3, #0]
 801c0ca:	4619      	mov	r1, r3
 801c0cc:	4b2a      	ldr	r3, [pc, #168]	; (801c178 <tcp_receive+0x5e8>)
 801c0ce:	681b      	ldr	r3, [r3, #0]
 801c0d0:	440b      	add	r3, r1
 801c0d2:	1ad3      	subs	r3, r2, r3
 801c0d4:	3301      	adds	r3, #1
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	f300 8082 	bgt.w	801c1e0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801c0dc:	4b27      	ldr	r3, [pc, #156]	; (801c17c <tcp_receive+0x5ec>)
 801c0de:	685b      	ldr	r3, [r3, #4]
 801c0e0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c0e6:	4b24      	ldr	r3, [pc, #144]	; (801c178 <tcp_receive+0x5e8>)
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	1ad3      	subs	r3, r2, r3
 801c0ec:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801c0ee:	4b23      	ldr	r3, [pc, #140]	; (801c17c <tcp_receive+0x5ec>)
 801c0f0:	685b      	ldr	r3, [r3, #4]
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	d106      	bne.n	801c104 <tcp_receive+0x574>
 801c0f6:	4b22      	ldr	r3, [pc, #136]	; (801c180 <tcp_receive+0x5f0>)
 801c0f8:	f240 5294 	movw	r2, #1428	; 0x594
 801c0fc:	4921      	ldr	r1, [pc, #132]	; (801c184 <tcp_receive+0x5f4>)
 801c0fe:	4822      	ldr	r0, [pc, #136]	; (801c188 <tcp_receive+0x5f8>)
 801c100:	f006 f91e 	bl	8022340 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801c104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c106:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c10a:	4293      	cmp	r3, r2
 801c10c:	d906      	bls.n	801c11c <tcp_receive+0x58c>
 801c10e:	4b1c      	ldr	r3, [pc, #112]	; (801c180 <tcp_receive+0x5f0>)
 801c110:	f240 5295 	movw	r2, #1429	; 0x595
 801c114:	491d      	ldr	r1, [pc, #116]	; (801c18c <tcp_receive+0x5fc>)
 801c116:	481c      	ldr	r0, [pc, #112]	; (801c188 <tcp_receive+0x5f8>)
 801c118:	f006 f912 	bl	8022340 <iprintf>
      off = (u16_t)off32;
 801c11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c11e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801c122:	4b16      	ldr	r3, [pc, #88]	; (801c17c <tcp_receive+0x5ec>)
 801c124:	685b      	ldr	r3, [r3, #4]
 801c126:	891b      	ldrh	r3, [r3, #8]
 801c128:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c12c:	429a      	cmp	r2, r3
 801c12e:	d906      	bls.n	801c13e <tcp_receive+0x5ae>
 801c130:	4b13      	ldr	r3, [pc, #76]	; (801c180 <tcp_receive+0x5f0>)
 801c132:	f240 5297 	movw	r2, #1431	; 0x597
 801c136:	4916      	ldr	r1, [pc, #88]	; (801c190 <tcp_receive+0x600>)
 801c138:	4813      	ldr	r0, [pc, #76]	; (801c188 <tcp_receive+0x5f8>)
 801c13a:	f006 f901 	bl	8022340 <iprintf>
      inseg.len -= off;
 801c13e:	4b0f      	ldr	r3, [pc, #60]	; (801c17c <tcp_receive+0x5ec>)
 801c140:	891a      	ldrh	r2, [r3, #8]
 801c142:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c146:	1ad3      	subs	r3, r2, r3
 801c148:	b29a      	uxth	r2, r3
 801c14a:	4b0c      	ldr	r3, [pc, #48]	; (801c17c <tcp_receive+0x5ec>)
 801c14c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801c14e:	4b0b      	ldr	r3, [pc, #44]	; (801c17c <tcp_receive+0x5ec>)
 801c150:	685b      	ldr	r3, [r3, #4]
 801c152:	891a      	ldrh	r2, [r3, #8]
 801c154:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c158:	1ad3      	subs	r3, r2, r3
 801c15a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801c15c:	e02a      	b.n	801c1b4 <tcp_receive+0x624>
 801c15e:	bf00      	nop
 801c160:	08025960 	.word	0x08025960
 801c164:	08025968 	.word	0x08025968
 801c168:	2002f024 	.word	0x2002f024
 801c16c:	2002f020 	.word	0x2002f020
 801c170:	2002efe4 	.word	0x2002efe4
 801c174:	2002f026 	.word	0x2002f026
 801c178:	2002f01c 	.word	0x2002f01c
 801c17c:	2002effc 	.word	0x2002effc
 801c180:	080255f8 	.word	0x080255f8
 801c184:	08025970 	.word	0x08025970
 801c188:	08025644 	.word	0x08025644
 801c18c:	08025980 	.word	0x08025980
 801c190:	08025990 	.word	0x08025990
        off -= p->len;
 801c194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c196:	895b      	ldrh	r3, [r3, #10]
 801c198:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c19c:	1ad3      	subs	r3, r2, r3
 801c19e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801c1a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c1a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c1a6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801c1a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c1aa:	2200      	movs	r2, #0
 801c1ac:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801c1ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801c1b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c1b6:	895b      	ldrh	r3, [r3, #10]
 801c1b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c1bc:	429a      	cmp	r2, r3
 801c1be:	d8e9      	bhi.n	801c194 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801c1c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c1c4:	4619      	mov	r1, r3
 801c1c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801c1c8:	f7fc f89e 	bl	8018308 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1d0:	4a91      	ldr	r2, [pc, #580]	; (801c418 <tcp_receive+0x888>)
 801c1d2:	6013      	str	r3, [r2, #0]
 801c1d4:	4b91      	ldr	r3, [pc, #580]	; (801c41c <tcp_receive+0x88c>)
 801c1d6:	68db      	ldr	r3, [r3, #12]
 801c1d8:	4a8f      	ldr	r2, [pc, #572]	; (801c418 <tcp_receive+0x888>)
 801c1da:	6812      	ldr	r2, [r2, #0]
 801c1dc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c1de:	e00d      	b.n	801c1fc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801c1e0:	4b8d      	ldr	r3, [pc, #564]	; (801c418 <tcp_receive+0x888>)
 801c1e2:	681a      	ldr	r2, [r3, #0]
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1e8:	1ad3      	subs	r3, r2, r3
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	da06      	bge.n	801c1fc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	8b5b      	ldrh	r3, [r3, #26]
 801c1f2:	f043 0302 	orr.w	r3, r3, #2
 801c1f6:	b29a      	uxth	r2, r3
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c1fc:	4b86      	ldr	r3, [pc, #536]	; (801c418 <tcp_receive+0x888>)
 801c1fe:	681a      	ldr	r2, [r3, #0]
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c204:	1ad3      	subs	r3, r2, r3
 801c206:	2b00      	cmp	r3, #0
 801c208:	f2c0 842a 	blt.w	801ca60 <tcp_receive+0xed0>
 801c20c:	4b82      	ldr	r3, [pc, #520]	; (801c418 <tcp_receive+0x888>)
 801c20e:	681a      	ldr	r2, [r3, #0]
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c214:	6879      	ldr	r1, [r7, #4]
 801c216:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c218:	440b      	add	r3, r1
 801c21a:	1ad3      	subs	r3, r2, r3
 801c21c:	3301      	adds	r3, #1
 801c21e:	2b00      	cmp	r3, #0
 801c220:	f300 841e 	bgt.w	801ca60 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c228:	4b7b      	ldr	r3, [pc, #492]	; (801c418 <tcp_receive+0x888>)
 801c22a:	681b      	ldr	r3, [r3, #0]
 801c22c:	429a      	cmp	r2, r3
 801c22e:	f040 829a 	bne.w	801c766 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801c232:	4b7a      	ldr	r3, [pc, #488]	; (801c41c <tcp_receive+0x88c>)
 801c234:	891c      	ldrh	r4, [r3, #8]
 801c236:	4b79      	ldr	r3, [pc, #484]	; (801c41c <tcp_receive+0x88c>)
 801c238:	68db      	ldr	r3, [r3, #12]
 801c23a:	899b      	ldrh	r3, [r3, #12]
 801c23c:	b29b      	uxth	r3, r3
 801c23e:	4618      	mov	r0, r3
 801c240:	f7fa fc3e 	bl	8016ac0 <lwip_htons>
 801c244:	4603      	mov	r3, r0
 801c246:	b2db      	uxtb	r3, r3
 801c248:	f003 0303 	and.w	r3, r3, #3
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d001      	beq.n	801c254 <tcp_receive+0x6c4>
 801c250:	2301      	movs	r3, #1
 801c252:	e000      	b.n	801c256 <tcp_receive+0x6c6>
 801c254:	2300      	movs	r3, #0
 801c256:	4423      	add	r3, r4
 801c258:	b29a      	uxth	r2, r3
 801c25a:	4b71      	ldr	r3, [pc, #452]	; (801c420 <tcp_receive+0x890>)
 801c25c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c262:	4b6f      	ldr	r3, [pc, #444]	; (801c420 <tcp_receive+0x890>)
 801c264:	881b      	ldrh	r3, [r3, #0]
 801c266:	429a      	cmp	r2, r3
 801c268:	d275      	bcs.n	801c356 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c26a:	4b6c      	ldr	r3, [pc, #432]	; (801c41c <tcp_receive+0x88c>)
 801c26c:	68db      	ldr	r3, [r3, #12]
 801c26e:	899b      	ldrh	r3, [r3, #12]
 801c270:	b29b      	uxth	r3, r3
 801c272:	4618      	mov	r0, r3
 801c274:	f7fa fc24 	bl	8016ac0 <lwip_htons>
 801c278:	4603      	mov	r3, r0
 801c27a:	b2db      	uxtb	r3, r3
 801c27c:	f003 0301 	and.w	r3, r3, #1
 801c280:	2b00      	cmp	r3, #0
 801c282:	d01f      	beq.n	801c2c4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801c284:	4b65      	ldr	r3, [pc, #404]	; (801c41c <tcp_receive+0x88c>)
 801c286:	68db      	ldr	r3, [r3, #12]
 801c288:	899b      	ldrh	r3, [r3, #12]
 801c28a:	b29b      	uxth	r3, r3
 801c28c:	b21b      	sxth	r3, r3
 801c28e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c292:	b21c      	sxth	r4, r3
 801c294:	4b61      	ldr	r3, [pc, #388]	; (801c41c <tcp_receive+0x88c>)
 801c296:	68db      	ldr	r3, [r3, #12]
 801c298:	899b      	ldrh	r3, [r3, #12]
 801c29a:	b29b      	uxth	r3, r3
 801c29c:	4618      	mov	r0, r3
 801c29e:	f7fa fc0f 	bl	8016ac0 <lwip_htons>
 801c2a2:	4603      	mov	r3, r0
 801c2a4:	b2db      	uxtb	r3, r3
 801c2a6:	b29b      	uxth	r3, r3
 801c2a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801c2ac:	b29b      	uxth	r3, r3
 801c2ae:	4618      	mov	r0, r3
 801c2b0:	f7fa fc06 	bl	8016ac0 <lwip_htons>
 801c2b4:	4603      	mov	r3, r0
 801c2b6:	b21b      	sxth	r3, r3
 801c2b8:	4323      	orrs	r3, r4
 801c2ba:	b21a      	sxth	r2, r3
 801c2bc:	4b57      	ldr	r3, [pc, #348]	; (801c41c <tcp_receive+0x88c>)
 801c2be:	68db      	ldr	r3, [r3, #12]
 801c2c0:	b292      	uxth	r2, r2
 801c2c2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c2c8:	4b54      	ldr	r3, [pc, #336]	; (801c41c <tcp_receive+0x88c>)
 801c2ca:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c2cc:	4b53      	ldr	r3, [pc, #332]	; (801c41c <tcp_receive+0x88c>)
 801c2ce:	68db      	ldr	r3, [r3, #12]
 801c2d0:	899b      	ldrh	r3, [r3, #12]
 801c2d2:	b29b      	uxth	r3, r3
 801c2d4:	4618      	mov	r0, r3
 801c2d6:	f7fa fbf3 	bl	8016ac0 <lwip_htons>
 801c2da:	4603      	mov	r3, r0
 801c2dc:	b2db      	uxtb	r3, r3
 801c2de:	f003 0302 	and.w	r3, r3, #2
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d005      	beq.n	801c2f2 <tcp_receive+0x762>
            inseg.len -= 1;
 801c2e6:	4b4d      	ldr	r3, [pc, #308]	; (801c41c <tcp_receive+0x88c>)
 801c2e8:	891b      	ldrh	r3, [r3, #8]
 801c2ea:	3b01      	subs	r3, #1
 801c2ec:	b29a      	uxth	r2, r3
 801c2ee:	4b4b      	ldr	r3, [pc, #300]	; (801c41c <tcp_receive+0x88c>)
 801c2f0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801c2f2:	4b4a      	ldr	r3, [pc, #296]	; (801c41c <tcp_receive+0x88c>)
 801c2f4:	685b      	ldr	r3, [r3, #4]
 801c2f6:	4a49      	ldr	r2, [pc, #292]	; (801c41c <tcp_receive+0x88c>)
 801c2f8:	8912      	ldrh	r2, [r2, #8]
 801c2fa:	4611      	mov	r1, r2
 801c2fc:	4618      	mov	r0, r3
 801c2fe:	f7fb ff03 	bl	8018108 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801c302:	4b46      	ldr	r3, [pc, #280]	; (801c41c <tcp_receive+0x88c>)
 801c304:	891c      	ldrh	r4, [r3, #8]
 801c306:	4b45      	ldr	r3, [pc, #276]	; (801c41c <tcp_receive+0x88c>)
 801c308:	68db      	ldr	r3, [r3, #12]
 801c30a:	899b      	ldrh	r3, [r3, #12]
 801c30c:	b29b      	uxth	r3, r3
 801c30e:	4618      	mov	r0, r3
 801c310:	f7fa fbd6 	bl	8016ac0 <lwip_htons>
 801c314:	4603      	mov	r3, r0
 801c316:	b2db      	uxtb	r3, r3
 801c318:	f003 0303 	and.w	r3, r3, #3
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d001      	beq.n	801c324 <tcp_receive+0x794>
 801c320:	2301      	movs	r3, #1
 801c322:	e000      	b.n	801c326 <tcp_receive+0x796>
 801c324:	2300      	movs	r3, #0
 801c326:	4423      	add	r3, r4
 801c328:	b29a      	uxth	r2, r3
 801c32a:	4b3d      	ldr	r3, [pc, #244]	; (801c420 <tcp_receive+0x890>)
 801c32c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c32e:	4b3c      	ldr	r3, [pc, #240]	; (801c420 <tcp_receive+0x890>)
 801c330:	881b      	ldrh	r3, [r3, #0]
 801c332:	461a      	mov	r2, r3
 801c334:	4b38      	ldr	r3, [pc, #224]	; (801c418 <tcp_receive+0x888>)
 801c336:	681b      	ldr	r3, [r3, #0]
 801c338:	441a      	add	r2, r3
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c33e:	6879      	ldr	r1, [r7, #4]
 801c340:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c342:	440b      	add	r3, r1
 801c344:	429a      	cmp	r2, r3
 801c346:	d006      	beq.n	801c356 <tcp_receive+0x7c6>
 801c348:	4b36      	ldr	r3, [pc, #216]	; (801c424 <tcp_receive+0x894>)
 801c34a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801c34e:	4936      	ldr	r1, [pc, #216]	; (801c428 <tcp_receive+0x898>)
 801c350:	4836      	ldr	r0, [pc, #216]	; (801c42c <tcp_receive+0x89c>)
 801c352:	f005 fff5 	bl	8022340 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	f000 80e7 	beq.w	801c52e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c360:	4b2e      	ldr	r3, [pc, #184]	; (801c41c <tcp_receive+0x88c>)
 801c362:	68db      	ldr	r3, [r3, #12]
 801c364:	899b      	ldrh	r3, [r3, #12]
 801c366:	b29b      	uxth	r3, r3
 801c368:	4618      	mov	r0, r3
 801c36a:	f7fa fba9 	bl	8016ac0 <lwip_htons>
 801c36e:	4603      	mov	r3, r0
 801c370:	b2db      	uxtb	r3, r3
 801c372:	f003 0301 	and.w	r3, r3, #1
 801c376:	2b00      	cmp	r3, #0
 801c378:	d010      	beq.n	801c39c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801c37a:	e00a      	b.n	801c392 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c380:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c386:	681a      	ldr	r2, [r3, #0]
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801c38c:	68f8      	ldr	r0, [r7, #12]
 801c38e:	f7fd fcc4 	bl	8019d1a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c396:	2b00      	cmp	r3, #0
 801c398:	d1f0      	bne.n	801c37c <tcp_receive+0x7ec>
 801c39a:	e0c8      	b.n	801c52e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801c3a2:	e052      	b.n	801c44a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801c3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c3a6:	68db      	ldr	r3, [r3, #12]
 801c3a8:	899b      	ldrh	r3, [r3, #12]
 801c3aa:	b29b      	uxth	r3, r3
 801c3ac:	4618      	mov	r0, r3
 801c3ae:	f7fa fb87 	bl	8016ac0 <lwip_htons>
 801c3b2:	4603      	mov	r3, r0
 801c3b4:	b2db      	uxtb	r3, r3
 801c3b6:	f003 0301 	and.w	r3, r3, #1
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	d03d      	beq.n	801c43a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801c3be:	4b17      	ldr	r3, [pc, #92]	; (801c41c <tcp_receive+0x88c>)
 801c3c0:	68db      	ldr	r3, [r3, #12]
 801c3c2:	899b      	ldrh	r3, [r3, #12]
 801c3c4:	b29b      	uxth	r3, r3
 801c3c6:	4618      	mov	r0, r3
 801c3c8:	f7fa fb7a 	bl	8016ac0 <lwip_htons>
 801c3cc:	4603      	mov	r3, r0
 801c3ce:	b2db      	uxtb	r3, r3
 801c3d0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	d130      	bne.n	801c43a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801c3d8:	4b10      	ldr	r3, [pc, #64]	; (801c41c <tcp_receive+0x88c>)
 801c3da:	68db      	ldr	r3, [r3, #12]
 801c3dc:	899b      	ldrh	r3, [r3, #12]
 801c3de:	b29c      	uxth	r4, r3
 801c3e0:	2001      	movs	r0, #1
 801c3e2:	f7fa fb6d 	bl	8016ac0 <lwip_htons>
 801c3e6:	4603      	mov	r3, r0
 801c3e8:	461a      	mov	r2, r3
 801c3ea:	4b0c      	ldr	r3, [pc, #48]	; (801c41c <tcp_receive+0x88c>)
 801c3ec:	68db      	ldr	r3, [r3, #12]
 801c3ee:	4322      	orrs	r2, r4
 801c3f0:	b292      	uxth	r2, r2
 801c3f2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801c3f4:	4b09      	ldr	r3, [pc, #36]	; (801c41c <tcp_receive+0x88c>)
 801c3f6:	891c      	ldrh	r4, [r3, #8]
 801c3f8:	4b08      	ldr	r3, [pc, #32]	; (801c41c <tcp_receive+0x88c>)
 801c3fa:	68db      	ldr	r3, [r3, #12]
 801c3fc:	899b      	ldrh	r3, [r3, #12]
 801c3fe:	b29b      	uxth	r3, r3
 801c400:	4618      	mov	r0, r3
 801c402:	f7fa fb5d 	bl	8016ac0 <lwip_htons>
 801c406:	4603      	mov	r3, r0
 801c408:	b2db      	uxtb	r3, r3
 801c40a:	f003 0303 	and.w	r3, r3, #3
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d00e      	beq.n	801c430 <tcp_receive+0x8a0>
 801c412:	2301      	movs	r3, #1
 801c414:	e00d      	b.n	801c432 <tcp_receive+0x8a2>
 801c416:	bf00      	nop
 801c418:	2002f01c 	.word	0x2002f01c
 801c41c:	2002effc 	.word	0x2002effc
 801c420:	2002f026 	.word	0x2002f026
 801c424:	080255f8 	.word	0x080255f8
 801c428:	080259a0 	.word	0x080259a0
 801c42c:	08025644 	.word	0x08025644
 801c430:	2300      	movs	r3, #0
 801c432:	4423      	add	r3, r4
 801c434:	b29a      	uxth	r2, r3
 801c436:	4b98      	ldr	r3, [pc, #608]	; (801c698 <tcp_receive+0xb08>)
 801c438:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801c43a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c43c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801c43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801c444:	6938      	ldr	r0, [r7, #16]
 801c446:	f7fd fc68 	bl	8019d1a <tcp_seg_free>
            while (next &&
 801c44a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d00e      	beq.n	801c46e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801c450:	4b91      	ldr	r3, [pc, #580]	; (801c698 <tcp_receive+0xb08>)
 801c452:	881b      	ldrh	r3, [r3, #0]
 801c454:	461a      	mov	r2, r3
 801c456:	4b91      	ldr	r3, [pc, #580]	; (801c69c <tcp_receive+0xb0c>)
 801c458:	681b      	ldr	r3, [r3, #0]
 801c45a:	441a      	add	r2, r3
 801c45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c45e:	68db      	ldr	r3, [r3, #12]
 801c460:	685b      	ldr	r3, [r3, #4]
 801c462:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c464:	8909      	ldrh	r1, [r1, #8]
 801c466:	440b      	add	r3, r1
 801c468:	1ad3      	subs	r3, r2, r3
            while (next &&
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	da9a      	bge.n	801c3a4 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801c46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c470:	2b00      	cmp	r3, #0
 801c472:	d059      	beq.n	801c528 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801c474:	4b88      	ldr	r3, [pc, #544]	; (801c698 <tcp_receive+0xb08>)
 801c476:	881b      	ldrh	r3, [r3, #0]
 801c478:	461a      	mov	r2, r3
 801c47a:	4b88      	ldr	r3, [pc, #544]	; (801c69c <tcp_receive+0xb0c>)
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	441a      	add	r2, r3
 801c480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c482:	68db      	ldr	r3, [r3, #12]
 801c484:	685b      	ldr	r3, [r3, #4]
 801c486:	1ad3      	subs	r3, r2, r3
            if (next &&
 801c488:	2b00      	cmp	r3, #0
 801c48a:	dd4d      	ble.n	801c528 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801c48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c48e:	68db      	ldr	r3, [r3, #12]
 801c490:	685b      	ldr	r3, [r3, #4]
 801c492:	b29a      	uxth	r2, r3
 801c494:	4b81      	ldr	r3, [pc, #516]	; (801c69c <tcp_receive+0xb0c>)
 801c496:	681b      	ldr	r3, [r3, #0]
 801c498:	b29b      	uxth	r3, r3
 801c49a:	1ad3      	subs	r3, r2, r3
 801c49c:	b29a      	uxth	r2, r3
 801c49e:	4b80      	ldr	r3, [pc, #512]	; (801c6a0 <tcp_receive+0xb10>)
 801c4a0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c4a2:	4b7f      	ldr	r3, [pc, #508]	; (801c6a0 <tcp_receive+0xb10>)
 801c4a4:	68db      	ldr	r3, [r3, #12]
 801c4a6:	899b      	ldrh	r3, [r3, #12]
 801c4a8:	b29b      	uxth	r3, r3
 801c4aa:	4618      	mov	r0, r3
 801c4ac:	f7fa fb08 	bl	8016ac0 <lwip_htons>
 801c4b0:	4603      	mov	r3, r0
 801c4b2:	b2db      	uxtb	r3, r3
 801c4b4:	f003 0302 	and.w	r3, r3, #2
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	d005      	beq.n	801c4c8 <tcp_receive+0x938>
                inseg.len -= 1;
 801c4bc:	4b78      	ldr	r3, [pc, #480]	; (801c6a0 <tcp_receive+0xb10>)
 801c4be:	891b      	ldrh	r3, [r3, #8]
 801c4c0:	3b01      	subs	r3, #1
 801c4c2:	b29a      	uxth	r2, r3
 801c4c4:	4b76      	ldr	r3, [pc, #472]	; (801c6a0 <tcp_receive+0xb10>)
 801c4c6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801c4c8:	4b75      	ldr	r3, [pc, #468]	; (801c6a0 <tcp_receive+0xb10>)
 801c4ca:	685b      	ldr	r3, [r3, #4]
 801c4cc:	4a74      	ldr	r2, [pc, #464]	; (801c6a0 <tcp_receive+0xb10>)
 801c4ce:	8912      	ldrh	r2, [r2, #8]
 801c4d0:	4611      	mov	r1, r2
 801c4d2:	4618      	mov	r0, r3
 801c4d4:	f7fb fe18 	bl	8018108 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801c4d8:	4b71      	ldr	r3, [pc, #452]	; (801c6a0 <tcp_receive+0xb10>)
 801c4da:	891c      	ldrh	r4, [r3, #8]
 801c4dc:	4b70      	ldr	r3, [pc, #448]	; (801c6a0 <tcp_receive+0xb10>)
 801c4de:	68db      	ldr	r3, [r3, #12]
 801c4e0:	899b      	ldrh	r3, [r3, #12]
 801c4e2:	b29b      	uxth	r3, r3
 801c4e4:	4618      	mov	r0, r3
 801c4e6:	f7fa faeb 	bl	8016ac0 <lwip_htons>
 801c4ea:	4603      	mov	r3, r0
 801c4ec:	b2db      	uxtb	r3, r3
 801c4ee:	f003 0303 	and.w	r3, r3, #3
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d001      	beq.n	801c4fa <tcp_receive+0x96a>
 801c4f6:	2301      	movs	r3, #1
 801c4f8:	e000      	b.n	801c4fc <tcp_receive+0x96c>
 801c4fa:	2300      	movs	r3, #0
 801c4fc:	4423      	add	r3, r4
 801c4fe:	b29a      	uxth	r2, r3
 801c500:	4b65      	ldr	r3, [pc, #404]	; (801c698 <tcp_receive+0xb08>)
 801c502:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801c504:	4b64      	ldr	r3, [pc, #400]	; (801c698 <tcp_receive+0xb08>)
 801c506:	881b      	ldrh	r3, [r3, #0]
 801c508:	461a      	mov	r2, r3
 801c50a:	4b64      	ldr	r3, [pc, #400]	; (801c69c <tcp_receive+0xb0c>)
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	441a      	add	r2, r3
 801c510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c512:	68db      	ldr	r3, [r3, #12]
 801c514:	685b      	ldr	r3, [r3, #4]
 801c516:	429a      	cmp	r2, r3
 801c518:	d006      	beq.n	801c528 <tcp_receive+0x998>
 801c51a:	4b62      	ldr	r3, [pc, #392]	; (801c6a4 <tcp_receive+0xb14>)
 801c51c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801c520:	4961      	ldr	r1, [pc, #388]	; (801c6a8 <tcp_receive+0xb18>)
 801c522:	4862      	ldr	r0, [pc, #392]	; (801c6ac <tcp_receive+0xb1c>)
 801c524:	f005 ff0c 	bl	8022340 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c52c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801c52e:	4b5a      	ldr	r3, [pc, #360]	; (801c698 <tcp_receive+0xb08>)
 801c530:	881b      	ldrh	r3, [r3, #0]
 801c532:	461a      	mov	r2, r3
 801c534:	4b59      	ldr	r3, [pc, #356]	; (801c69c <tcp_receive+0xb0c>)
 801c536:	681b      	ldr	r3, [r3, #0]
 801c538:	441a      	add	r2, r3
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c542:	4b55      	ldr	r3, [pc, #340]	; (801c698 <tcp_receive+0xb08>)
 801c544:	881b      	ldrh	r3, [r3, #0]
 801c546:	429a      	cmp	r2, r3
 801c548:	d206      	bcs.n	801c558 <tcp_receive+0x9c8>
 801c54a:	4b56      	ldr	r3, [pc, #344]	; (801c6a4 <tcp_receive+0xb14>)
 801c54c:	f240 6207 	movw	r2, #1543	; 0x607
 801c550:	4957      	ldr	r1, [pc, #348]	; (801c6b0 <tcp_receive+0xb20>)
 801c552:	4856      	ldr	r0, [pc, #344]	; (801c6ac <tcp_receive+0xb1c>)
 801c554:	f005 fef4 	bl	8022340 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c55c:	4b4e      	ldr	r3, [pc, #312]	; (801c698 <tcp_receive+0xb08>)
 801c55e:	881b      	ldrh	r3, [r3, #0]
 801c560:	1ad3      	subs	r3, r2, r3
 801c562:	b29a      	uxth	r2, r3
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801c568:	6878      	ldr	r0, [r7, #4]
 801c56a:	f7fc feb1 	bl	80192d0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801c56e:	4b4c      	ldr	r3, [pc, #304]	; (801c6a0 <tcp_receive+0xb10>)
 801c570:	685b      	ldr	r3, [r3, #4]
 801c572:	891b      	ldrh	r3, [r3, #8]
 801c574:	2b00      	cmp	r3, #0
 801c576:	d006      	beq.n	801c586 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801c578:	4b49      	ldr	r3, [pc, #292]	; (801c6a0 <tcp_receive+0xb10>)
 801c57a:	685b      	ldr	r3, [r3, #4]
 801c57c:	4a4d      	ldr	r2, [pc, #308]	; (801c6b4 <tcp_receive+0xb24>)
 801c57e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801c580:	4b47      	ldr	r3, [pc, #284]	; (801c6a0 <tcp_receive+0xb10>)
 801c582:	2200      	movs	r2, #0
 801c584:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c586:	4b46      	ldr	r3, [pc, #280]	; (801c6a0 <tcp_receive+0xb10>)
 801c588:	68db      	ldr	r3, [r3, #12]
 801c58a:	899b      	ldrh	r3, [r3, #12]
 801c58c:	b29b      	uxth	r3, r3
 801c58e:	4618      	mov	r0, r3
 801c590:	f7fa fa96 	bl	8016ac0 <lwip_htons>
 801c594:	4603      	mov	r3, r0
 801c596:	b2db      	uxtb	r3, r3
 801c598:	f003 0301 	and.w	r3, r3, #1
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	f000 80b8 	beq.w	801c712 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801c5a2:	4b45      	ldr	r3, [pc, #276]	; (801c6b8 <tcp_receive+0xb28>)
 801c5a4:	781b      	ldrb	r3, [r3, #0]
 801c5a6:	f043 0320 	orr.w	r3, r3, #32
 801c5aa:	b2da      	uxtb	r2, r3
 801c5ac:	4b42      	ldr	r3, [pc, #264]	; (801c6b8 <tcp_receive+0xb28>)
 801c5ae:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801c5b0:	e0af      	b.n	801c712 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c5b6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c5bc:	68db      	ldr	r3, [r3, #12]
 801c5be:	685b      	ldr	r3, [r3, #4]
 801c5c0:	4a36      	ldr	r2, [pc, #216]	; (801c69c <tcp_receive+0xb0c>)
 801c5c2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801c5c4:	68bb      	ldr	r3, [r7, #8]
 801c5c6:	891b      	ldrh	r3, [r3, #8]
 801c5c8:	461c      	mov	r4, r3
 801c5ca:	68bb      	ldr	r3, [r7, #8]
 801c5cc:	68db      	ldr	r3, [r3, #12]
 801c5ce:	899b      	ldrh	r3, [r3, #12]
 801c5d0:	b29b      	uxth	r3, r3
 801c5d2:	4618      	mov	r0, r3
 801c5d4:	f7fa fa74 	bl	8016ac0 <lwip_htons>
 801c5d8:	4603      	mov	r3, r0
 801c5da:	b2db      	uxtb	r3, r3
 801c5dc:	f003 0303 	and.w	r3, r3, #3
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d001      	beq.n	801c5e8 <tcp_receive+0xa58>
 801c5e4:	2301      	movs	r3, #1
 801c5e6:	e000      	b.n	801c5ea <tcp_receive+0xa5a>
 801c5e8:	2300      	movs	r3, #0
 801c5ea:	191a      	adds	r2, r3, r4
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c5f0:	441a      	add	r2, r3
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c5fa:	461c      	mov	r4, r3
 801c5fc:	68bb      	ldr	r3, [r7, #8]
 801c5fe:	891b      	ldrh	r3, [r3, #8]
 801c600:	461d      	mov	r5, r3
 801c602:	68bb      	ldr	r3, [r7, #8]
 801c604:	68db      	ldr	r3, [r3, #12]
 801c606:	899b      	ldrh	r3, [r3, #12]
 801c608:	b29b      	uxth	r3, r3
 801c60a:	4618      	mov	r0, r3
 801c60c:	f7fa fa58 	bl	8016ac0 <lwip_htons>
 801c610:	4603      	mov	r3, r0
 801c612:	b2db      	uxtb	r3, r3
 801c614:	f003 0303 	and.w	r3, r3, #3
 801c618:	2b00      	cmp	r3, #0
 801c61a:	d001      	beq.n	801c620 <tcp_receive+0xa90>
 801c61c:	2301      	movs	r3, #1
 801c61e:	e000      	b.n	801c622 <tcp_receive+0xa92>
 801c620:	2300      	movs	r3, #0
 801c622:	442b      	add	r3, r5
 801c624:	429c      	cmp	r4, r3
 801c626:	d206      	bcs.n	801c636 <tcp_receive+0xaa6>
 801c628:	4b1e      	ldr	r3, [pc, #120]	; (801c6a4 <tcp_receive+0xb14>)
 801c62a:	f240 622b 	movw	r2, #1579	; 0x62b
 801c62e:	4923      	ldr	r1, [pc, #140]	; (801c6bc <tcp_receive+0xb2c>)
 801c630:	481e      	ldr	r0, [pc, #120]	; (801c6ac <tcp_receive+0xb1c>)
 801c632:	f005 fe85 	bl	8022340 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801c636:	68bb      	ldr	r3, [r7, #8]
 801c638:	891b      	ldrh	r3, [r3, #8]
 801c63a:	461c      	mov	r4, r3
 801c63c:	68bb      	ldr	r3, [r7, #8]
 801c63e:	68db      	ldr	r3, [r3, #12]
 801c640:	899b      	ldrh	r3, [r3, #12]
 801c642:	b29b      	uxth	r3, r3
 801c644:	4618      	mov	r0, r3
 801c646:	f7fa fa3b 	bl	8016ac0 <lwip_htons>
 801c64a:	4603      	mov	r3, r0
 801c64c:	b2db      	uxtb	r3, r3
 801c64e:	f003 0303 	and.w	r3, r3, #3
 801c652:	2b00      	cmp	r3, #0
 801c654:	d001      	beq.n	801c65a <tcp_receive+0xaca>
 801c656:	2301      	movs	r3, #1
 801c658:	e000      	b.n	801c65c <tcp_receive+0xacc>
 801c65a:	2300      	movs	r3, #0
 801c65c:	1919      	adds	r1, r3, r4
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c662:	b28b      	uxth	r3, r1
 801c664:	1ad3      	subs	r3, r2, r3
 801c666:	b29a      	uxth	r2, r3
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801c66c:	6878      	ldr	r0, [r7, #4]
 801c66e:	f7fc fe2f 	bl	80192d0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801c672:	68bb      	ldr	r3, [r7, #8]
 801c674:	685b      	ldr	r3, [r3, #4]
 801c676:	891b      	ldrh	r3, [r3, #8]
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d028      	beq.n	801c6ce <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801c67c:	4b0d      	ldr	r3, [pc, #52]	; (801c6b4 <tcp_receive+0xb24>)
 801c67e:	681b      	ldr	r3, [r3, #0]
 801c680:	2b00      	cmp	r3, #0
 801c682:	d01d      	beq.n	801c6c0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801c684:	4b0b      	ldr	r3, [pc, #44]	; (801c6b4 <tcp_receive+0xb24>)
 801c686:	681a      	ldr	r2, [r3, #0]
 801c688:	68bb      	ldr	r3, [r7, #8]
 801c68a:	685b      	ldr	r3, [r3, #4]
 801c68c:	4619      	mov	r1, r3
 801c68e:	4610      	mov	r0, r2
 801c690:	f7fb ff8e 	bl	80185b0 <pbuf_cat>
 801c694:	e018      	b.n	801c6c8 <tcp_receive+0xb38>
 801c696:	bf00      	nop
 801c698:	2002f026 	.word	0x2002f026
 801c69c:	2002f01c 	.word	0x2002f01c
 801c6a0:	2002effc 	.word	0x2002effc
 801c6a4:	080255f8 	.word	0x080255f8
 801c6a8:	080259d8 	.word	0x080259d8
 801c6ac:	08025644 	.word	0x08025644
 801c6b0:	08025a14 	.word	0x08025a14
 801c6b4:	2002f02c 	.word	0x2002f02c
 801c6b8:	2002f029 	.word	0x2002f029
 801c6bc:	08025a34 	.word	0x08025a34
            } else {
              recv_data = cseg->p;
 801c6c0:	68bb      	ldr	r3, [r7, #8]
 801c6c2:	685b      	ldr	r3, [r3, #4]
 801c6c4:	4a70      	ldr	r2, [pc, #448]	; (801c888 <tcp_receive+0xcf8>)
 801c6c6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801c6c8:	68bb      	ldr	r3, [r7, #8]
 801c6ca:	2200      	movs	r2, #0
 801c6cc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c6ce:	68bb      	ldr	r3, [r7, #8]
 801c6d0:	68db      	ldr	r3, [r3, #12]
 801c6d2:	899b      	ldrh	r3, [r3, #12]
 801c6d4:	b29b      	uxth	r3, r3
 801c6d6:	4618      	mov	r0, r3
 801c6d8:	f7fa f9f2 	bl	8016ac0 <lwip_htons>
 801c6dc:	4603      	mov	r3, r0
 801c6de:	b2db      	uxtb	r3, r3
 801c6e0:	f003 0301 	and.w	r3, r3, #1
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d00d      	beq.n	801c704 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801c6e8:	4b68      	ldr	r3, [pc, #416]	; (801c88c <tcp_receive+0xcfc>)
 801c6ea:	781b      	ldrb	r3, [r3, #0]
 801c6ec:	f043 0320 	orr.w	r3, r3, #32
 801c6f0:	b2da      	uxtb	r2, r3
 801c6f2:	4b66      	ldr	r3, [pc, #408]	; (801c88c <tcp_receive+0xcfc>)
 801c6f4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	7d1b      	ldrb	r3, [r3, #20]
 801c6fa:	2b04      	cmp	r3, #4
 801c6fc:	d102      	bne.n	801c704 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	2207      	movs	r2, #7
 801c702:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801c704:	68bb      	ldr	r3, [r7, #8]
 801c706:	681a      	ldr	r2, [r3, #0]
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801c70c:	68b8      	ldr	r0, [r7, #8]
 801c70e:	f7fd fb04 	bl	8019d1a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c716:	2b00      	cmp	r3, #0
 801c718:	d008      	beq.n	801c72c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c71e:	68db      	ldr	r3, [r3, #12]
 801c720:	685a      	ldr	r2, [r3, #4]
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801c726:	429a      	cmp	r2, r3
 801c728:	f43f af43 	beq.w	801c5b2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	8b5b      	ldrh	r3, [r3, #26]
 801c730:	f003 0301 	and.w	r3, r3, #1
 801c734:	2b00      	cmp	r3, #0
 801c736:	d00e      	beq.n	801c756 <tcp_receive+0xbc6>
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	8b5b      	ldrh	r3, [r3, #26]
 801c73c:	f023 0301 	bic.w	r3, r3, #1
 801c740:	b29a      	uxth	r2, r3
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	835a      	strh	r2, [r3, #26]
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	8b5b      	ldrh	r3, [r3, #26]
 801c74a:	f043 0302 	orr.w	r3, r3, #2
 801c74e:	b29a      	uxth	r2, r3
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801c754:	e188      	b.n	801ca68 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801c756:	687b      	ldr	r3, [r7, #4]
 801c758:	8b5b      	ldrh	r3, [r3, #26]
 801c75a:	f043 0301 	orr.w	r3, r3, #1
 801c75e:	b29a      	uxth	r2, r3
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801c764:	e180      	b.n	801ca68 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801c766:	687b      	ldr	r3, [r7, #4]
 801c768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d106      	bne.n	801c77c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801c76e:	4848      	ldr	r0, [pc, #288]	; (801c890 <tcp_receive+0xd00>)
 801c770:	f7fd faec 	bl	8019d4c <tcp_seg_copy>
 801c774:	4602      	mov	r2, r0
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	675a      	str	r2, [r3, #116]	; 0x74
 801c77a:	e16d      	b.n	801ca58 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801c77c:	2300      	movs	r3, #0
 801c77e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c784:	63bb      	str	r3, [r7, #56]	; 0x38
 801c786:	e157      	b.n	801ca38 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801c788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c78a:	68db      	ldr	r3, [r3, #12]
 801c78c:	685a      	ldr	r2, [r3, #4]
 801c78e:	4b41      	ldr	r3, [pc, #260]	; (801c894 <tcp_receive+0xd04>)
 801c790:	681b      	ldr	r3, [r3, #0]
 801c792:	429a      	cmp	r2, r3
 801c794:	d11d      	bne.n	801c7d2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801c796:	4b3e      	ldr	r3, [pc, #248]	; (801c890 <tcp_receive+0xd00>)
 801c798:	891a      	ldrh	r2, [r3, #8]
 801c79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c79c:	891b      	ldrh	r3, [r3, #8]
 801c79e:	429a      	cmp	r2, r3
 801c7a0:	f240 814f 	bls.w	801ca42 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c7a4:	483a      	ldr	r0, [pc, #232]	; (801c890 <tcp_receive+0xd00>)
 801c7a6:	f7fd fad1 	bl	8019d4c <tcp_seg_copy>
 801c7aa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801c7ac:	697b      	ldr	r3, [r7, #20]
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	f000 8149 	beq.w	801ca46 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801c7b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	d003      	beq.n	801c7c2 <tcp_receive+0xc32>
                    prev->next = cseg;
 801c7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c7bc:	697a      	ldr	r2, [r7, #20]
 801c7be:	601a      	str	r2, [r3, #0]
 801c7c0:	e002      	b.n	801c7c8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	697a      	ldr	r2, [r7, #20]
 801c7c6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801c7c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c7ca:	6978      	ldr	r0, [r7, #20]
 801c7cc:	f7ff f8dc 	bl	801b988 <tcp_oos_insert_segment>
                }
                break;
 801c7d0:	e139      	b.n	801ca46 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801c7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	d117      	bne.n	801c808 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801c7d8:	4b2e      	ldr	r3, [pc, #184]	; (801c894 <tcp_receive+0xd04>)
 801c7da:	681a      	ldr	r2, [r3, #0]
 801c7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c7de:	68db      	ldr	r3, [r3, #12]
 801c7e0:	685b      	ldr	r3, [r3, #4]
 801c7e2:	1ad3      	subs	r3, r2, r3
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	da57      	bge.n	801c898 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c7e8:	4829      	ldr	r0, [pc, #164]	; (801c890 <tcp_receive+0xd00>)
 801c7ea:	f7fd faaf 	bl	8019d4c <tcp_seg_copy>
 801c7ee:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801c7f0:	69bb      	ldr	r3, [r7, #24]
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	f000 8129 	beq.w	801ca4a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	69ba      	ldr	r2, [r7, #24]
 801c7fc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801c7fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c800:	69b8      	ldr	r0, [r7, #24]
 801c802:	f7ff f8c1 	bl	801b988 <tcp_oos_insert_segment>
                  }
                  break;
 801c806:	e120      	b.n	801ca4a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801c808:	4b22      	ldr	r3, [pc, #136]	; (801c894 <tcp_receive+0xd04>)
 801c80a:	681a      	ldr	r2, [r3, #0]
 801c80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c80e:	68db      	ldr	r3, [r3, #12]
 801c810:	685b      	ldr	r3, [r3, #4]
 801c812:	1ad3      	subs	r3, r2, r3
 801c814:	3b01      	subs	r3, #1
 801c816:	2b00      	cmp	r3, #0
 801c818:	db3e      	blt.n	801c898 <tcp_receive+0xd08>
 801c81a:	4b1e      	ldr	r3, [pc, #120]	; (801c894 <tcp_receive+0xd04>)
 801c81c:	681a      	ldr	r2, [r3, #0]
 801c81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c820:	68db      	ldr	r3, [r3, #12]
 801c822:	685b      	ldr	r3, [r3, #4]
 801c824:	1ad3      	subs	r3, r2, r3
 801c826:	3301      	adds	r3, #1
 801c828:	2b00      	cmp	r3, #0
 801c82a:	dc35      	bgt.n	801c898 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801c82c:	4818      	ldr	r0, [pc, #96]	; (801c890 <tcp_receive+0xd00>)
 801c82e:	f7fd fa8d 	bl	8019d4c <tcp_seg_copy>
 801c832:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801c834:	69fb      	ldr	r3, [r7, #28]
 801c836:	2b00      	cmp	r3, #0
 801c838:	f000 8109 	beq.w	801ca4e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801c83c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c83e:	68db      	ldr	r3, [r3, #12]
 801c840:	685b      	ldr	r3, [r3, #4]
 801c842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c844:	8912      	ldrh	r2, [r2, #8]
 801c846:	441a      	add	r2, r3
 801c848:	4b12      	ldr	r3, [pc, #72]	; (801c894 <tcp_receive+0xd04>)
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	1ad3      	subs	r3, r2, r3
 801c84e:	2b00      	cmp	r3, #0
 801c850:	dd12      	ble.n	801c878 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801c852:	4b10      	ldr	r3, [pc, #64]	; (801c894 <tcp_receive+0xd04>)
 801c854:	681b      	ldr	r3, [r3, #0]
 801c856:	b29a      	uxth	r2, r3
 801c858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c85a:	68db      	ldr	r3, [r3, #12]
 801c85c:	685b      	ldr	r3, [r3, #4]
 801c85e:	b29b      	uxth	r3, r3
 801c860:	1ad3      	subs	r3, r2, r3
 801c862:	b29a      	uxth	r2, r3
 801c864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c866:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801c868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c86a:	685a      	ldr	r2, [r3, #4]
 801c86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c86e:	891b      	ldrh	r3, [r3, #8]
 801c870:	4619      	mov	r1, r3
 801c872:	4610      	mov	r0, r2
 801c874:	f7fb fc48 	bl	8018108 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801c878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c87a:	69fa      	ldr	r2, [r7, #28]
 801c87c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801c87e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c880:	69f8      	ldr	r0, [r7, #28]
 801c882:	f7ff f881 	bl	801b988 <tcp_oos_insert_segment>
                  }
                  break;
 801c886:	e0e2      	b.n	801ca4e <tcp_receive+0xebe>
 801c888:	2002f02c 	.word	0x2002f02c
 801c88c:	2002f029 	.word	0x2002f029
 801c890:	2002effc 	.word	0x2002effc
 801c894:	2002f01c 	.word	0x2002f01c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801c898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c89a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801c89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	f040 80c6 	bne.w	801ca32 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801c8a6:	4b80      	ldr	r3, [pc, #512]	; (801caa8 <tcp_receive+0xf18>)
 801c8a8:	681a      	ldr	r2, [r3, #0]
 801c8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8ac:	68db      	ldr	r3, [r3, #12]
 801c8ae:	685b      	ldr	r3, [r3, #4]
 801c8b0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801c8b2:	2b00      	cmp	r3, #0
 801c8b4:	f340 80bd 	ble.w	801ca32 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8ba:	68db      	ldr	r3, [r3, #12]
 801c8bc:	899b      	ldrh	r3, [r3, #12]
 801c8be:	b29b      	uxth	r3, r3
 801c8c0:	4618      	mov	r0, r3
 801c8c2:	f7fa f8fd 	bl	8016ac0 <lwip_htons>
 801c8c6:	4603      	mov	r3, r0
 801c8c8:	b2db      	uxtb	r3, r3
 801c8ca:	f003 0301 	and.w	r3, r3, #1
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	f040 80bf 	bne.w	801ca52 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801c8d4:	4875      	ldr	r0, [pc, #468]	; (801caac <tcp_receive+0xf1c>)
 801c8d6:	f7fd fa39 	bl	8019d4c <tcp_seg_copy>
 801c8da:	4602      	mov	r2, r0
 801c8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8de:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801c8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8e2:	681b      	ldr	r3, [r3, #0]
 801c8e4:	2b00      	cmp	r3, #0
 801c8e6:	f000 80b6 	beq.w	801ca56 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801c8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8ec:	68db      	ldr	r3, [r3, #12]
 801c8ee:	685b      	ldr	r3, [r3, #4]
 801c8f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c8f2:	8912      	ldrh	r2, [r2, #8]
 801c8f4:	441a      	add	r2, r3
 801c8f6:	4b6c      	ldr	r3, [pc, #432]	; (801caa8 <tcp_receive+0xf18>)
 801c8f8:	681b      	ldr	r3, [r3, #0]
 801c8fa:	1ad3      	subs	r3, r2, r3
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	dd12      	ble.n	801c926 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801c900:	4b69      	ldr	r3, [pc, #420]	; (801caa8 <tcp_receive+0xf18>)
 801c902:	681b      	ldr	r3, [r3, #0]
 801c904:	b29a      	uxth	r2, r3
 801c906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c908:	68db      	ldr	r3, [r3, #12]
 801c90a:	685b      	ldr	r3, [r3, #4]
 801c90c:	b29b      	uxth	r3, r3
 801c90e:	1ad3      	subs	r3, r2, r3
 801c910:	b29a      	uxth	r2, r3
 801c912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c914:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801c916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c918:	685a      	ldr	r2, [r3, #4]
 801c91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c91c:	891b      	ldrh	r3, [r3, #8]
 801c91e:	4619      	mov	r1, r3
 801c920:	4610      	mov	r0, r2
 801c922:	f7fb fbf1 	bl	8018108 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801c926:	4b62      	ldr	r3, [pc, #392]	; (801cab0 <tcp_receive+0xf20>)
 801c928:	881b      	ldrh	r3, [r3, #0]
 801c92a:	461a      	mov	r2, r3
 801c92c:	4b5e      	ldr	r3, [pc, #376]	; (801caa8 <tcp_receive+0xf18>)
 801c92e:	681b      	ldr	r3, [r3, #0]
 801c930:	441a      	add	r2, r3
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c936:	6879      	ldr	r1, [r7, #4]
 801c938:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c93a:	440b      	add	r3, r1
 801c93c:	1ad3      	subs	r3, r2, r3
 801c93e:	2b00      	cmp	r3, #0
 801c940:	f340 8089 	ble.w	801ca56 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801c944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c946:	681b      	ldr	r3, [r3, #0]
 801c948:	68db      	ldr	r3, [r3, #12]
 801c94a:	899b      	ldrh	r3, [r3, #12]
 801c94c:	b29b      	uxth	r3, r3
 801c94e:	4618      	mov	r0, r3
 801c950:	f7fa f8b6 	bl	8016ac0 <lwip_htons>
 801c954:	4603      	mov	r3, r0
 801c956:	b2db      	uxtb	r3, r3
 801c958:	f003 0301 	and.w	r3, r3, #1
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	d022      	beq.n	801c9a6 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801c960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	68db      	ldr	r3, [r3, #12]
 801c966:	899b      	ldrh	r3, [r3, #12]
 801c968:	b29b      	uxth	r3, r3
 801c96a:	b21b      	sxth	r3, r3
 801c96c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c970:	b21c      	sxth	r4, r3
 801c972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c974:	681b      	ldr	r3, [r3, #0]
 801c976:	68db      	ldr	r3, [r3, #12]
 801c978:	899b      	ldrh	r3, [r3, #12]
 801c97a:	b29b      	uxth	r3, r3
 801c97c:	4618      	mov	r0, r3
 801c97e:	f7fa f89f 	bl	8016ac0 <lwip_htons>
 801c982:	4603      	mov	r3, r0
 801c984:	b2db      	uxtb	r3, r3
 801c986:	b29b      	uxth	r3, r3
 801c988:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801c98c:	b29b      	uxth	r3, r3
 801c98e:	4618      	mov	r0, r3
 801c990:	f7fa f896 	bl	8016ac0 <lwip_htons>
 801c994:	4603      	mov	r3, r0
 801c996:	b21b      	sxth	r3, r3
 801c998:	4323      	orrs	r3, r4
 801c99a:	b21a      	sxth	r2, r3
 801c99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c99e:	681b      	ldr	r3, [r3, #0]
 801c9a0:	68db      	ldr	r3, [r3, #12]
 801c9a2:	b292      	uxth	r2, r2
 801c9a4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c9aa:	b29a      	uxth	r2, r3
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c9b0:	4413      	add	r3, r2
 801c9b2:	b299      	uxth	r1, r3
 801c9b4:	4b3c      	ldr	r3, [pc, #240]	; (801caa8 <tcp_receive+0xf18>)
 801c9b6:	681b      	ldr	r3, [r3, #0]
 801c9b8:	b29a      	uxth	r2, r3
 801c9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	1a8a      	subs	r2, r1, r2
 801c9c0:	b292      	uxth	r2, r2
 801c9c2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801c9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	685a      	ldr	r2, [r3, #4]
 801c9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9cc:	681b      	ldr	r3, [r3, #0]
 801c9ce:	891b      	ldrh	r3, [r3, #8]
 801c9d0:	4619      	mov	r1, r3
 801c9d2:	4610      	mov	r0, r2
 801c9d4:	f7fb fb98 	bl	8018108 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801c9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9da:	681b      	ldr	r3, [r3, #0]
 801c9dc:	891c      	ldrh	r4, [r3, #8]
 801c9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	68db      	ldr	r3, [r3, #12]
 801c9e4:	899b      	ldrh	r3, [r3, #12]
 801c9e6:	b29b      	uxth	r3, r3
 801c9e8:	4618      	mov	r0, r3
 801c9ea:	f7fa f869 	bl	8016ac0 <lwip_htons>
 801c9ee:	4603      	mov	r3, r0
 801c9f0:	b2db      	uxtb	r3, r3
 801c9f2:	f003 0303 	and.w	r3, r3, #3
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d001      	beq.n	801c9fe <tcp_receive+0xe6e>
 801c9fa:	2301      	movs	r3, #1
 801c9fc:	e000      	b.n	801ca00 <tcp_receive+0xe70>
 801c9fe:	2300      	movs	r3, #0
 801ca00:	4423      	add	r3, r4
 801ca02:	b29a      	uxth	r2, r3
 801ca04:	4b2a      	ldr	r3, [pc, #168]	; (801cab0 <tcp_receive+0xf20>)
 801ca06:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ca08:	4b29      	ldr	r3, [pc, #164]	; (801cab0 <tcp_receive+0xf20>)
 801ca0a:	881b      	ldrh	r3, [r3, #0]
 801ca0c:	461a      	mov	r2, r3
 801ca0e:	4b26      	ldr	r3, [pc, #152]	; (801caa8 <tcp_receive+0xf18>)
 801ca10:	681b      	ldr	r3, [r3, #0]
 801ca12:	441a      	add	r2, r3
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca18:	6879      	ldr	r1, [r7, #4]
 801ca1a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ca1c:	440b      	add	r3, r1
 801ca1e:	429a      	cmp	r2, r3
 801ca20:	d019      	beq.n	801ca56 <tcp_receive+0xec6>
 801ca22:	4b24      	ldr	r3, [pc, #144]	; (801cab4 <tcp_receive+0xf24>)
 801ca24:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801ca28:	4923      	ldr	r1, [pc, #140]	; (801cab8 <tcp_receive+0xf28>)
 801ca2a:	4824      	ldr	r0, [pc, #144]	; (801cabc <tcp_receive+0xf2c>)
 801ca2c:	f005 fc88 	bl	8022340 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801ca30:	e011      	b.n	801ca56 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801ca32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca34:	681b      	ldr	r3, [r3, #0]
 801ca36:	63bb      	str	r3, [r7, #56]	; 0x38
 801ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	f47f aea4 	bne.w	801c788 <tcp_receive+0xbf8>
 801ca40:	e00a      	b.n	801ca58 <tcp_receive+0xec8>
                break;
 801ca42:	bf00      	nop
 801ca44:	e008      	b.n	801ca58 <tcp_receive+0xec8>
                break;
 801ca46:	bf00      	nop
 801ca48:	e006      	b.n	801ca58 <tcp_receive+0xec8>
                  break;
 801ca4a:	bf00      	nop
 801ca4c:	e004      	b.n	801ca58 <tcp_receive+0xec8>
                  break;
 801ca4e:	bf00      	nop
 801ca50:	e002      	b.n	801ca58 <tcp_receive+0xec8>
                  break;
 801ca52:	bf00      	nop
 801ca54:	e000      	b.n	801ca58 <tcp_receive+0xec8>
                break;
 801ca56:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801ca58:	6878      	ldr	r0, [r7, #4]
 801ca5a:	f001 fe8b 	bl	801e774 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801ca5e:	e003      	b.n	801ca68 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801ca60:	6878      	ldr	r0, [r7, #4]
 801ca62:	f001 fe87 	bl	801e774 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801ca66:	e01a      	b.n	801ca9e <tcp_receive+0xf0e>
 801ca68:	e019      	b.n	801ca9e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801ca6a:	4b0f      	ldr	r3, [pc, #60]	; (801caa8 <tcp_receive+0xf18>)
 801ca6c:	681a      	ldr	r2, [r3, #0]
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca72:	1ad3      	subs	r3, r2, r3
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	db0a      	blt.n	801ca8e <tcp_receive+0xefe>
 801ca78:	4b0b      	ldr	r3, [pc, #44]	; (801caa8 <tcp_receive+0xf18>)
 801ca7a:	681a      	ldr	r2, [r3, #0]
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca80:	6879      	ldr	r1, [r7, #4]
 801ca82:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ca84:	440b      	add	r3, r1
 801ca86:	1ad3      	subs	r3, r2, r3
 801ca88:	3301      	adds	r3, #1
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	dd07      	ble.n	801ca9e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	8b5b      	ldrh	r3, [r3, #26]
 801ca92:	f043 0302 	orr.w	r3, r3, #2
 801ca96:	b29a      	uxth	r2, r3
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801ca9c:	e7ff      	b.n	801ca9e <tcp_receive+0xf0e>
 801ca9e:	bf00      	nop
 801caa0:	3750      	adds	r7, #80	; 0x50
 801caa2:	46bd      	mov	sp, r7
 801caa4:	bdb0      	pop	{r4, r5, r7, pc}
 801caa6:	bf00      	nop
 801caa8:	2002f01c 	.word	0x2002f01c
 801caac:	2002effc 	.word	0x2002effc
 801cab0:	2002f026 	.word	0x2002f026
 801cab4:	080255f8 	.word	0x080255f8
 801cab8:	080259a0 	.word	0x080259a0
 801cabc:	08025644 	.word	0x08025644

0801cac0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801cac0:	b480      	push	{r7}
 801cac2:	b083      	sub	sp, #12
 801cac4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801cac6:	4b15      	ldr	r3, [pc, #84]	; (801cb1c <tcp_get_next_optbyte+0x5c>)
 801cac8:	881b      	ldrh	r3, [r3, #0]
 801caca:	1c5a      	adds	r2, r3, #1
 801cacc:	b291      	uxth	r1, r2
 801cace:	4a13      	ldr	r2, [pc, #76]	; (801cb1c <tcp_get_next_optbyte+0x5c>)
 801cad0:	8011      	strh	r1, [r2, #0]
 801cad2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801cad4:	4b12      	ldr	r3, [pc, #72]	; (801cb20 <tcp_get_next_optbyte+0x60>)
 801cad6:	681b      	ldr	r3, [r3, #0]
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d004      	beq.n	801cae6 <tcp_get_next_optbyte+0x26>
 801cadc:	4b11      	ldr	r3, [pc, #68]	; (801cb24 <tcp_get_next_optbyte+0x64>)
 801cade:	881b      	ldrh	r3, [r3, #0]
 801cae0:	88fa      	ldrh	r2, [r7, #6]
 801cae2:	429a      	cmp	r2, r3
 801cae4:	d208      	bcs.n	801caf8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801cae6:	4b10      	ldr	r3, [pc, #64]	; (801cb28 <tcp_get_next_optbyte+0x68>)
 801cae8:	681b      	ldr	r3, [r3, #0]
 801caea:	3314      	adds	r3, #20
 801caec:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801caee:	88fb      	ldrh	r3, [r7, #6]
 801caf0:	683a      	ldr	r2, [r7, #0]
 801caf2:	4413      	add	r3, r2
 801caf4:	781b      	ldrb	r3, [r3, #0]
 801caf6:	e00b      	b.n	801cb10 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801caf8:	88fb      	ldrh	r3, [r7, #6]
 801cafa:	b2da      	uxtb	r2, r3
 801cafc:	4b09      	ldr	r3, [pc, #36]	; (801cb24 <tcp_get_next_optbyte+0x64>)
 801cafe:	881b      	ldrh	r3, [r3, #0]
 801cb00:	b2db      	uxtb	r3, r3
 801cb02:	1ad3      	subs	r3, r2, r3
 801cb04:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801cb06:	4b06      	ldr	r3, [pc, #24]	; (801cb20 <tcp_get_next_optbyte+0x60>)
 801cb08:	681a      	ldr	r2, [r3, #0]
 801cb0a:	797b      	ldrb	r3, [r7, #5]
 801cb0c:	4413      	add	r3, r2
 801cb0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801cb10:	4618      	mov	r0, r3
 801cb12:	370c      	adds	r7, #12
 801cb14:	46bd      	mov	sp, r7
 801cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb1a:	4770      	bx	lr
 801cb1c:	2002f018 	.word	0x2002f018
 801cb20:	2002f014 	.word	0x2002f014
 801cb24:	2002f012 	.word	0x2002f012
 801cb28:	2002f00c 	.word	0x2002f00c

0801cb2c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801cb2c:	b580      	push	{r7, lr}
 801cb2e:	b084      	sub	sp, #16
 801cb30:	af00      	add	r7, sp, #0
 801cb32:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	d106      	bne.n	801cb48 <tcp_parseopt+0x1c>
 801cb3a:	4b32      	ldr	r3, [pc, #200]	; (801cc04 <tcp_parseopt+0xd8>)
 801cb3c:	f240 727d 	movw	r2, #1917	; 0x77d
 801cb40:	4931      	ldr	r1, [pc, #196]	; (801cc08 <tcp_parseopt+0xdc>)
 801cb42:	4832      	ldr	r0, [pc, #200]	; (801cc0c <tcp_parseopt+0xe0>)
 801cb44:	f005 fbfc 	bl	8022340 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801cb48:	4b31      	ldr	r3, [pc, #196]	; (801cc10 <tcp_parseopt+0xe4>)
 801cb4a:	881b      	ldrh	r3, [r3, #0]
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	d055      	beq.n	801cbfc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801cb50:	4b30      	ldr	r3, [pc, #192]	; (801cc14 <tcp_parseopt+0xe8>)
 801cb52:	2200      	movs	r2, #0
 801cb54:	801a      	strh	r2, [r3, #0]
 801cb56:	e045      	b.n	801cbe4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801cb58:	f7ff ffb2 	bl	801cac0 <tcp_get_next_optbyte>
 801cb5c:	4603      	mov	r3, r0
 801cb5e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801cb60:	7bfb      	ldrb	r3, [r7, #15]
 801cb62:	2b02      	cmp	r3, #2
 801cb64:	d006      	beq.n	801cb74 <tcp_parseopt+0x48>
 801cb66:	2b02      	cmp	r3, #2
 801cb68:	dc2b      	bgt.n	801cbc2 <tcp_parseopt+0x96>
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d041      	beq.n	801cbf2 <tcp_parseopt+0xc6>
 801cb6e:	2b01      	cmp	r3, #1
 801cb70:	d127      	bne.n	801cbc2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801cb72:	e037      	b.n	801cbe4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801cb74:	f7ff ffa4 	bl	801cac0 <tcp_get_next_optbyte>
 801cb78:	4603      	mov	r3, r0
 801cb7a:	2b04      	cmp	r3, #4
 801cb7c:	d13b      	bne.n	801cbf6 <tcp_parseopt+0xca>
 801cb7e:	4b25      	ldr	r3, [pc, #148]	; (801cc14 <tcp_parseopt+0xe8>)
 801cb80:	881b      	ldrh	r3, [r3, #0]
 801cb82:	3301      	adds	r3, #1
 801cb84:	4a22      	ldr	r2, [pc, #136]	; (801cc10 <tcp_parseopt+0xe4>)
 801cb86:	8812      	ldrh	r2, [r2, #0]
 801cb88:	4293      	cmp	r3, r2
 801cb8a:	da34      	bge.n	801cbf6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801cb8c:	f7ff ff98 	bl	801cac0 <tcp_get_next_optbyte>
 801cb90:	4603      	mov	r3, r0
 801cb92:	b29b      	uxth	r3, r3
 801cb94:	021b      	lsls	r3, r3, #8
 801cb96:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801cb98:	f7ff ff92 	bl	801cac0 <tcp_get_next_optbyte>
 801cb9c:	4603      	mov	r3, r0
 801cb9e:	b29a      	uxth	r2, r3
 801cba0:	89bb      	ldrh	r3, [r7, #12]
 801cba2:	4313      	orrs	r3, r2
 801cba4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801cba6:	89bb      	ldrh	r3, [r7, #12]
 801cba8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801cbac:	d804      	bhi.n	801cbb8 <tcp_parseopt+0x8c>
 801cbae:	89bb      	ldrh	r3, [r7, #12]
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d001      	beq.n	801cbb8 <tcp_parseopt+0x8c>
 801cbb4:	89ba      	ldrh	r2, [r7, #12]
 801cbb6:	e001      	b.n	801cbbc <tcp_parseopt+0x90>
 801cbb8:	f44f 7206 	mov.w	r2, #536	; 0x218
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801cbc0:	e010      	b.n	801cbe4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801cbc2:	f7ff ff7d 	bl	801cac0 <tcp_get_next_optbyte>
 801cbc6:	4603      	mov	r3, r0
 801cbc8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801cbca:	7afb      	ldrb	r3, [r7, #11]
 801cbcc:	2b01      	cmp	r3, #1
 801cbce:	d914      	bls.n	801cbfa <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801cbd0:	7afb      	ldrb	r3, [r7, #11]
 801cbd2:	b29a      	uxth	r2, r3
 801cbd4:	4b0f      	ldr	r3, [pc, #60]	; (801cc14 <tcp_parseopt+0xe8>)
 801cbd6:	881b      	ldrh	r3, [r3, #0]
 801cbd8:	4413      	add	r3, r2
 801cbda:	b29b      	uxth	r3, r3
 801cbdc:	3b02      	subs	r3, #2
 801cbde:	b29a      	uxth	r2, r3
 801cbe0:	4b0c      	ldr	r3, [pc, #48]	; (801cc14 <tcp_parseopt+0xe8>)
 801cbe2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801cbe4:	4b0b      	ldr	r3, [pc, #44]	; (801cc14 <tcp_parseopt+0xe8>)
 801cbe6:	881a      	ldrh	r2, [r3, #0]
 801cbe8:	4b09      	ldr	r3, [pc, #36]	; (801cc10 <tcp_parseopt+0xe4>)
 801cbea:	881b      	ldrh	r3, [r3, #0]
 801cbec:	429a      	cmp	r2, r3
 801cbee:	d3b3      	bcc.n	801cb58 <tcp_parseopt+0x2c>
 801cbf0:	e004      	b.n	801cbfc <tcp_parseopt+0xd0>
          return;
 801cbf2:	bf00      	nop
 801cbf4:	e002      	b.n	801cbfc <tcp_parseopt+0xd0>
            return;
 801cbf6:	bf00      	nop
 801cbf8:	e000      	b.n	801cbfc <tcp_parseopt+0xd0>
            return;
 801cbfa:	bf00      	nop
      }
    }
  }
}
 801cbfc:	3710      	adds	r7, #16
 801cbfe:	46bd      	mov	sp, r7
 801cc00:	bd80      	pop	{r7, pc}
 801cc02:	bf00      	nop
 801cc04:	080255f8 	.word	0x080255f8
 801cc08:	08025a5c 	.word	0x08025a5c
 801cc0c:	08025644 	.word	0x08025644
 801cc10:	2002f010 	.word	0x2002f010
 801cc14:	2002f018 	.word	0x2002f018

0801cc18 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801cc18:	b480      	push	{r7}
 801cc1a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801cc1c:	4b05      	ldr	r3, [pc, #20]	; (801cc34 <tcp_trigger_input_pcb_close+0x1c>)
 801cc1e:	781b      	ldrb	r3, [r3, #0]
 801cc20:	f043 0310 	orr.w	r3, r3, #16
 801cc24:	b2da      	uxtb	r2, r3
 801cc26:	4b03      	ldr	r3, [pc, #12]	; (801cc34 <tcp_trigger_input_pcb_close+0x1c>)
 801cc28:	701a      	strb	r2, [r3, #0]
}
 801cc2a:	bf00      	nop
 801cc2c:	46bd      	mov	sp, r7
 801cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc32:	4770      	bx	lr
 801cc34:	2002f029 	.word	0x2002f029

0801cc38 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801cc38:	b580      	push	{r7, lr}
 801cc3a:	b084      	sub	sp, #16
 801cc3c:	af00      	add	r7, sp, #0
 801cc3e:	60f8      	str	r0, [r7, #12]
 801cc40:	60b9      	str	r1, [r7, #8]
 801cc42:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801cc44:	68fb      	ldr	r3, [r7, #12]
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d00a      	beq.n	801cc60 <tcp_route+0x28>
 801cc4a:	68fb      	ldr	r3, [r7, #12]
 801cc4c:	7a1b      	ldrb	r3, [r3, #8]
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	d006      	beq.n	801cc60 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801cc52:	68fb      	ldr	r3, [r7, #12]
 801cc54:	7a1b      	ldrb	r3, [r3, #8]
 801cc56:	4618      	mov	r0, r3
 801cc58:	f7fb f84e 	bl	8017cf8 <netif_get_by_index>
 801cc5c:	4603      	mov	r3, r0
 801cc5e:	e003      	b.n	801cc68 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801cc60:	6878      	ldr	r0, [r7, #4]
 801cc62:	f003 fc71 	bl	8020548 <ip4_route>
 801cc66:	4603      	mov	r3, r0
  }
}
 801cc68:	4618      	mov	r0, r3
 801cc6a:	3710      	adds	r7, #16
 801cc6c:	46bd      	mov	sp, r7
 801cc6e:	bd80      	pop	{r7, pc}

0801cc70 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801cc70:	b590      	push	{r4, r7, lr}
 801cc72:	b087      	sub	sp, #28
 801cc74:	af00      	add	r7, sp, #0
 801cc76:	60f8      	str	r0, [r7, #12]
 801cc78:	60b9      	str	r1, [r7, #8]
 801cc7a:	603b      	str	r3, [r7, #0]
 801cc7c:	4613      	mov	r3, r2
 801cc7e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801cc80:	68fb      	ldr	r3, [r7, #12]
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d105      	bne.n	801cc92 <tcp_create_segment+0x22>
 801cc86:	4b44      	ldr	r3, [pc, #272]	; (801cd98 <tcp_create_segment+0x128>)
 801cc88:	22a3      	movs	r2, #163	; 0xa3
 801cc8a:	4944      	ldr	r1, [pc, #272]	; (801cd9c <tcp_create_segment+0x12c>)
 801cc8c:	4844      	ldr	r0, [pc, #272]	; (801cda0 <tcp_create_segment+0x130>)
 801cc8e:	f005 fb57 	bl	8022340 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801cc92:	68bb      	ldr	r3, [r7, #8]
 801cc94:	2b00      	cmp	r3, #0
 801cc96:	d105      	bne.n	801cca4 <tcp_create_segment+0x34>
 801cc98:	4b3f      	ldr	r3, [pc, #252]	; (801cd98 <tcp_create_segment+0x128>)
 801cc9a:	22a4      	movs	r2, #164	; 0xa4
 801cc9c:	4941      	ldr	r1, [pc, #260]	; (801cda4 <tcp_create_segment+0x134>)
 801cc9e:	4840      	ldr	r0, [pc, #256]	; (801cda0 <tcp_create_segment+0x130>)
 801cca0:	f005 fb4e 	bl	8022340 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801cca4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801cca8:	009b      	lsls	r3, r3, #2
 801ccaa:	b2db      	uxtb	r3, r3
 801ccac:	f003 0304 	and.w	r3, r3, #4
 801ccb0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801ccb2:	2003      	movs	r0, #3
 801ccb4:	f7fa fc94 	bl	80175e0 <memp_malloc>
 801ccb8:	6138      	str	r0, [r7, #16]
 801ccba:	693b      	ldr	r3, [r7, #16]
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	d104      	bne.n	801ccca <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801ccc0:	68b8      	ldr	r0, [r7, #8]
 801ccc2:	f7fb fba7 	bl	8018414 <pbuf_free>
    return NULL;
 801ccc6:	2300      	movs	r3, #0
 801ccc8:	e061      	b.n	801cd8e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801ccca:	693b      	ldr	r3, [r7, #16]
 801cccc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801ccd0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801ccd2:	693b      	ldr	r3, [r7, #16]
 801ccd4:	2200      	movs	r2, #0
 801ccd6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801ccd8:	693b      	ldr	r3, [r7, #16]
 801ccda:	68ba      	ldr	r2, [r7, #8]
 801ccdc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801ccde:	68bb      	ldr	r3, [r7, #8]
 801cce0:	891a      	ldrh	r2, [r3, #8]
 801cce2:	7dfb      	ldrb	r3, [r7, #23]
 801cce4:	b29b      	uxth	r3, r3
 801cce6:	429a      	cmp	r2, r3
 801cce8:	d205      	bcs.n	801ccf6 <tcp_create_segment+0x86>
 801ccea:	4b2b      	ldr	r3, [pc, #172]	; (801cd98 <tcp_create_segment+0x128>)
 801ccec:	22b0      	movs	r2, #176	; 0xb0
 801ccee:	492e      	ldr	r1, [pc, #184]	; (801cda8 <tcp_create_segment+0x138>)
 801ccf0:	482b      	ldr	r0, [pc, #172]	; (801cda0 <tcp_create_segment+0x130>)
 801ccf2:	f005 fb25 	bl	8022340 <iprintf>
  seg->len = p->tot_len - optlen;
 801ccf6:	68bb      	ldr	r3, [r7, #8]
 801ccf8:	891a      	ldrh	r2, [r3, #8]
 801ccfa:	7dfb      	ldrb	r3, [r7, #23]
 801ccfc:	b29b      	uxth	r3, r3
 801ccfe:	1ad3      	subs	r3, r2, r3
 801cd00:	b29a      	uxth	r2, r3
 801cd02:	693b      	ldr	r3, [r7, #16]
 801cd04:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801cd06:	2114      	movs	r1, #20
 801cd08:	68b8      	ldr	r0, [r7, #8]
 801cd0a:	f7fb faed 	bl	80182e8 <pbuf_add_header>
 801cd0e:	4603      	mov	r3, r0
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	d004      	beq.n	801cd1e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801cd14:	6938      	ldr	r0, [r7, #16]
 801cd16:	f7fd f800 	bl	8019d1a <tcp_seg_free>
    return NULL;
 801cd1a:	2300      	movs	r3, #0
 801cd1c:	e037      	b.n	801cd8e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801cd1e:	693b      	ldr	r3, [r7, #16]
 801cd20:	685b      	ldr	r3, [r3, #4]
 801cd22:	685a      	ldr	r2, [r3, #4]
 801cd24:	693b      	ldr	r3, [r7, #16]
 801cd26:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801cd28:	68fb      	ldr	r3, [r7, #12]
 801cd2a:	8ada      	ldrh	r2, [r3, #22]
 801cd2c:	693b      	ldr	r3, [r7, #16]
 801cd2e:	68dc      	ldr	r4, [r3, #12]
 801cd30:	4610      	mov	r0, r2
 801cd32:	f7f9 fec5 	bl	8016ac0 <lwip_htons>
 801cd36:	4603      	mov	r3, r0
 801cd38:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801cd3a:	68fb      	ldr	r3, [r7, #12]
 801cd3c:	8b1a      	ldrh	r2, [r3, #24]
 801cd3e:	693b      	ldr	r3, [r7, #16]
 801cd40:	68dc      	ldr	r4, [r3, #12]
 801cd42:	4610      	mov	r0, r2
 801cd44:	f7f9 febc 	bl	8016ac0 <lwip_htons>
 801cd48:	4603      	mov	r3, r0
 801cd4a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801cd4c:	693b      	ldr	r3, [r7, #16]
 801cd4e:	68dc      	ldr	r4, [r3, #12]
 801cd50:	6838      	ldr	r0, [r7, #0]
 801cd52:	f7f9 feca 	bl	8016aea <lwip_htonl>
 801cd56:	4603      	mov	r3, r0
 801cd58:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801cd5a:	7dfb      	ldrb	r3, [r7, #23]
 801cd5c:	089b      	lsrs	r3, r3, #2
 801cd5e:	b2db      	uxtb	r3, r3
 801cd60:	b29b      	uxth	r3, r3
 801cd62:	3305      	adds	r3, #5
 801cd64:	b29b      	uxth	r3, r3
 801cd66:	031b      	lsls	r3, r3, #12
 801cd68:	b29a      	uxth	r2, r3
 801cd6a:	79fb      	ldrb	r3, [r7, #7]
 801cd6c:	b29b      	uxth	r3, r3
 801cd6e:	4313      	orrs	r3, r2
 801cd70:	b29a      	uxth	r2, r3
 801cd72:	693b      	ldr	r3, [r7, #16]
 801cd74:	68dc      	ldr	r4, [r3, #12]
 801cd76:	4610      	mov	r0, r2
 801cd78:	f7f9 fea2 	bl	8016ac0 <lwip_htons>
 801cd7c:	4603      	mov	r3, r0
 801cd7e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801cd80:	693b      	ldr	r3, [r7, #16]
 801cd82:	68db      	ldr	r3, [r3, #12]
 801cd84:	2200      	movs	r2, #0
 801cd86:	749a      	strb	r2, [r3, #18]
 801cd88:	2200      	movs	r2, #0
 801cd8a:	74da      	strb	r2, [r3, #19]
  return seg;
 801cd8c:	693b      	ldr	r3, [r7, #16]
}
 801cd8e:	4618      	mov	r0, r3
 801cd90:	371c      	adds	r7, #28
 801cd92:	46bd      	mov	sp, r7
 801cd94:	bd90      	pop	{r4, r7, pc}
 801cd96:	bf00      	nop
 801cd98:	08025a78 	.word	0x08025a78
 801cd9c:	08025aac 	.word	0x08025aac
 801cda0:	08025acc 	.word	0x08025acc
 801cda4:	08025af4 	.word	0x08025af4
 801cda8:	08025b18 	.word	0x08025b18

0801cdac <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801cdac:	b580      	push	{r7, lr}
 801cdae:	b086      	sub	sp, #24
 801cdb0:	af00      	add	r7, sp, #0
 801cdb2:	607b      	str	r3, [r7, #4]
 801cdb4:	4603      	mov	r3, r0
 801cdb6:	73fb      	strb	r3, [r7, #15]
 801cdb8:	460b      	mov	r3, r1
 801cdba:	81bb      	strh	r3, [r7, #12]
 801cdbc:	4613      	mov	r3, r2
 801cdbe:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801cdc0:	89bb      	ldrh	r3, [r7, #12]
 801cdc2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d105      	bne.n	801cdd6 <tcp_pbuf_prealloc+0x2a>
 801cdca:	4b30      	ldr	r3, [pc, #192]	; (801ce8c <tcp_pbuf_prealloc+0xe0>)
 801cdcc:	22e8      	movs	r2, #232	; 0xe8
 801cdce:	4930      	ldr	r1, [pc, #192]	; (801ce90 <tcp_pbuf_prealloc+0xe4>)
 801cdd0:	4830      	ldr	r0, [pc, #192]	; (801ce94 <tcp_pbuf_prealloc+0xe8>)
 801cdd2:	f005 fab5 	bl	8022340 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801cdd6:	6a3b      	ldr	r3, [r7, #32]
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	d105      	bne.n	801cde8 <tcp_pbuf_prealloc+0x3c>
 801cddc:	4b2b      	ldr	r3, [pc, #172]	; (801ce8c <tcp_pbuf_prealloc+0xe0>)
 801cdde:	22e9      	movs	r2, #233	; 0xe9
 801cde0:	492d      	ldr	r1, [pc, #180]	; (801ce98 <tcp_pbuf_prealloc+0xec>)
 801cde2:	482c      	ldr	r0, [pc, #176]	; (801ce94 <tcp_pbuf_prealloc+0xe8>)
 801cde4:	f005 faac 	bl	8022340 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801cde8:	89ba      	ldrh	r2, [r7, #12]
 801cdea:	897b      	ldrh	r3, [r7, #10]
 801cdec:	429a      	cmp	r2, r3
 801cdee:	d221      	bcs.n	801ce34 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801cdf0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801cdf4:	f003 0302 	and.w	r3, r3, #2
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d111      	bne.n	801ce20 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801cdfc:	6a3b      	ldr	r3, [r7, #32]
 801cdfe:	8b5b      	ldrh	r3, [r3, #26]
 801ce00:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	d115      	bne.n	801ce34 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801ce08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	d007      	beq.n	801ce20 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801ce10:	6a3b      	ldr	r3, [r7, #32]
 801ce12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	d103      	bne.n	801ce20 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801ce18:	6a3b      	ldr	r3, [r7, #32]
 801ce1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801ce1c:	2b00      	cmp	r3, #0
 801ce1e:	d009      	beq.n	801ce34 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801ce20:	89bb      	ldrh	r3, [r7, #12]
 801ce22:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801ce26:	f023 0203 	bic.w	r2, r3, #3
 801ce2a:	897b      	ldrh	r3, [r7, #10]
 801ce2c:	4293      	cmp	r3, r2
 801ce2e:	bf28      	it	cs
 801ce30:	4613      	movcs	r3, r2
 801ce32:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801ce34:	8af9      	ldrh	r1, [r7, #22]
 801ce36:	7bfb      	ldrb	r3, [r7, #15]
 801ce38:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ce3c:	4618      	mov	r0, r3
 801ce3e:	f7fb f805 	bl	8017e4c <pbuf_alloc>
 801ce42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ce44:	693b      	ldr	r3, [r7, #16]
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	d101      	bne.n	801ce4e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801ce4a:	2300      	movs	r3, #0
 801ce4c:	e019      	b.n	801ce82 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801ce4e:	693b      	ldr	r3, [r7, #16]
 801ce50:	681b      	ldr	r3, [r3, #0]
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	d006      	beq.n	801ce64 <tcp_pbuf_prealloc+0xb8>
 801ce56:	4b0d      	ldr	r3, [pc, #52]	; (801ce8c <tcp_pbuf_prealloc+0xe0>)
 801ce58:	f240 120b 	movw	r2, #267	; 0x10b
 801ce5c:	490f      	ldr	r1, [pc, #60]	; (801ce9c <tcp_pbuf_prealloc+0xf0>)
 801ce5e:	480d      	ldr	r0, [pc, #52]	; (801ce94 <tcp_pbuf_prealloc+0xe8>)
 801ce60:	f005 fa6e 	bl	8022340 <iprintf>
  *oversize = p->len - length;
 801ce64:	693b      	ldr	r3, [r7, #16]
 801ce66:	895a      	ldrh	r2, [r3, #10]
 801ce68:	89bb      	ldrh	r3, [r7, #12]
 801ce6a:	1ad3      	subs	r3, r2, r3
 801ce6c:	b29a      	uxth	r2, r3
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801ce72:	693b      	ldr	r3, [r7, #16]
 801ce74:	89ba      	ldrh	r2, [r7, #12]
 801ce76:	811a      	strh	r2, [r3, #8]
 801ce78:	693b      	ldr	r3, [r7, #16]
 801ce7a:	891a      	ldrh	r2, [r3, #8]
 801ce7c:	693b      	ldr	r3, [r7, #16]
 801ce7e:	815a      	strh	r2, [r3, #10]
  return p;
 801ce80:	693b      	ldr	r3, [r7, #16]
}
 801ce82:	4618      	mov	r0, r3
 801ce84:	3718      	adds	r7, #24
 801ce86:	46bd      	mov	sp, r7
 801ce88:	bd80      	pop	{r7, pc}
 801ce8a:	bf00      	nop
 801ce8c:	08025a78 	.word	0x08025a78
 801ce90:	08025b30 	.word	0x08025b30
 801ce94:	08025acc 	.word	0x08025acc
 801ce98:	08025b54 	.word	0x08025b54
 801ce9c:	08025b74 	.word	0x08025b74

0801cea0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801cea0:	b580      	push	{r7, lr}
 801cea2:	b082      	sub	sp, #8
 801cea4:	af00      	add	r7, sp, #0
 801cea6:	6078      	str	r0, [r7, #4]
 801cea8:	460b      	mov	r3, r1
 801ceaa:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d106      	bne.n	801cec0 <tcp_write_checks+0x20>
 801ceb2:	4b33      	ldr	r3, [pc, #204]	; (801cf80 <tcp_write_checks+0xe0>)
 801ceb4:	f240 1233 	movw	r2, #307	; 0x133
 801ceb8:	4932      	ldr	r1, [pc, #200]	; (801cf84 <tcp_write_checks+0xe4>)
 801ceba:	4833      	ldr	r0, [pc, #204]	; (801cf88 <tcp_write_checks+0xe8>)
 801cebc:	f005 fa40 	bl	8022340 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	7d1b      	ldrb	r3, [r3, #20]
 801cec4:	2b04      	cmp	r3, #4
 801cec6:	d00e      	beq.n	801cee6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801cecc:	2b07      	cmp	r3, #7
 801cece:	d00a      	beq.n	801cee6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801ced4:	2b02      	cmp	r3, #2
 801ced6:	d006      	beq.n	801cee6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801ced8:	687b      	ldr	r3, [r7, #4]
 801ceda:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801cedc:	2b03      	cmp	r3, #3
 801cede:	d002      	beq.n	801cee6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801cee0:	f06f 030a 	mvn.w	r3, #10
 801cee4:	e048      	b.n	801cf78 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801cee6:	887b      	ldrh	r3, [r7, #2]
 801cee8:	2b00      	cmp	r3, #0
 801ceea:	d101      	bne.n	801cef0 <tcp_write_checks+0x50>
    return ERR_OK;
 801ceec:	2300      	movs	r3, #0
 801ceee:	e043      	b.n	801cf78 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801cef6:	887a      	ldrh	r2, [r7, #2]
 801cef8:	429a      	cmp	r2, r3
 801cefa:	d909      	bls.n	801cf10 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	8b5b      	ldrh	r3, [r3, #26]
 801cf00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cf04:	b29a      	uxth	r2, r3
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801cf0a:	f04f 33ff 	mov.w	r3, #4294967295
 801cf0e:	e033      	b.n	801cf78 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cf16:	2b08      	cmp	r3, #8
 801cf18:	d909      	bls.n	801cf2e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cf1a:	687b      	ldr	r3, [r7, #4]
 801cf1c:	8b5b      	ldrh	r3, [r3, #26]
 801cf1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cf22:	b29a      	uxth	r2, r3
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801cf28:	f04f 33ff 	mov.w	r3, #4294967295
 801cf2c:	e024      	b.n	801cf78 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801cf2e:	687b      	ldr	r3, [r7, #4]
 801cf30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	d00f      	beq.n	801cf58 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	d11a      	bne.n	801cf76 <tcp_write_checks+0xd6>
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	d116      	bne.n	801cf76 <tcp_write_checks+0xd6>
 801cf48:	4b0d      	ldr	r3, [pc, #52]	; (801cf80 <tcp_write_checks+0xe0>)
 801cf4a:	f240 1255 	movw	r2, #341	; 0x155
 801cf4e:	490f      	ldr	r1, [pc, #60]	; (801cf8c <tcp_write_checks+0xec>)
 801cf50:	480d      	ldr	r0, [pc, #52]	; (801cf88 <tcp_write_checks+0xe8>)
 801cf52:	f005 f9f5 	bl	8022340 <iprintf>
 801cf56:	e00e      	b.n	801cf76 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	d103      	bne.n	801cf68 <tcp_write_checks+0xc8>
 801cf60:	687b      	ldr	r3, [r7, #4]
 801cf62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf64:	2b00      	cmp	r3, #0
 801cf66:	d006      	beq.n	801cf76 <tcp_write_checks+0xd6>
 801cf68:	4b05      	ldr	r3, [pc, #20]	; (801cf80 <tcp_write_checks+0xe0>)
 801cf6a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801cf6e:	4908      	ldr	r1, [pc, #32]	; (801cf90 <tcp_write_checks+0xf0>)
 801cf70:	4805      	ldr	r0, [pc, #20]	; (801cf88 <tcp_write_checks+0xe8>)
 801cf72:	f005 f9e5 	bl	8022340 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801cf76:	2300      	movs	r3, #0
}
 801cf78:	4618      	mov	r0, r3
 801cf7a:	3708      	adds	r7, #8
 801cf7c:	46bd      	mov	sp, r7
 801cf7e:	bd80      	pop	{r7, pc}
 801cf80:	08025a78 	.word	0x08025a78
 801cf84:	08025b88 	.word	0x08025b88
 801cf88:	08025acc 	.word	0x08025acc
 801cf8c:	08025ba8 	.word	0x08025ba8
 801cf90:	08025be4 	.word	0x08025be4

0801cf94 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801cf94:	b590      	push	{r4, r7, lr}
 801cf96:	b09b      	sub	sp, #108	; 0x6c
 801cf98:	af04      	add	r7, sp, #16
 801cf9a:	60f8      	str	r0, [r7, #12]
 801cf9c:	60b9      	str	r1, [r7, #8]
 801cf9e:	4611      	mov	r1, r2
 801cfa0:	461a      	mov	r2, r3
 801cfa2:	460b      	mov	r3, r1
 801cfa4:	80fb      	strh	r3, [r7, #6]
 801cfa6:	4613      	mov	r3, r2
 801cfa8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801cfaa:	2300      	movs	r3, #0
 801cfac:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801cfae:	2300      	movs	r3, #0
 801cfb0:	653b      	str	r3, [r7, #80]	; 0x50
 801cfb2:	2300      	movs	r3, #0
 801cfb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 801cfb6:	2300      	movs	r3, #0
 801cfb8:	64bb      	str	r3, [r7, #72]	; 0x48
 801cfba:	2300      	movs	r3, #0
 801cfbc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801cfbe:	2300      	movs	r3, #0
 801cfc0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801cfc4:	2300      	movs	r3, #0
 801cfc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801cfca:	2300      	movs	r3, #0
 801cfcc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801cfce:	2300      	movs	r3, #0
 801cfd0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801cfd2:	2300      	movs	r3, #0
 801cfd4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801cfd6:	68fb      	ldr	r3, [r7, #12]
 801cfd8:	2b00      	cmp	r3, #0
 801cfda:	d109      	bne.n	801cff0 <tcp_write+0x5c>
 801cfdc:	4ba4      	ldr	r3, [pc, #656]	; (801d270 <tcp_write+0x2dc>)
 801cfde:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801cfe2:	49a4      	ldr	r1, [pc, #656]	; (801d274 <tcp_write+0x2e0>)
 801cfe4:	48a4      	ldr	r0, [pc, #656]	; (801d278 <tcp_write+0x2e4>)
 801cfe6:	f005 f9ab 	bl	8022340 <iprintf>
 801cfea:	f06f 030f 	mvn.w	r3, #15
 801cfee:	e32a      	b.n	801d646 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801cff0:	68fb      	ldr	r3, [r7, #12]
 801cff2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801cff6:	085b      	lsrs	r3, r3, #1
 801cff8:	b29a      	uxth	r2, r3
 801cffa:	68fb      	ldr	r3, [r7, #12]
 801cffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cffe:	4293      	cmp	r3, r2
 801d000:	bf28      	it	cs
 801d002:	4613      	movcs	r3, r2
 801d004:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801d006:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d008:	2b00      	cmp	r3, #0
 801d00a:	d102      	bne.n	801d012 <tcp_write+0x7e>
 801d00c:	68fb      	ldr	r3, [r7, #12]
 801d00e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d010:	e000      	b.n	801d014 <tcp_write+0x80>
 801d012:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d014:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801d016:	68bb      	ldr	r3, [r7, #8]
 801d018:	2b00      	cmp	r3, #0
 801d01a:	d109      	bne.n	801d030 <tcp_write+0x9c>
 801d01c:	4b94      	ldr	r3, [pc, #592]	; (801d270 <tcp_write+0x2dc>)
 801d01e:	f240 12ad 	movw	r2, #429	; 0x1ad
 801d022:	4996      	ldr	r1, [pc, #600]	; (801d27c <tcp_write+0x2e8>)
 801d024:	4894      	ldr	r0, [pc, #592]	; (801d278 <tcp_write+0x2e4>)
 801d026:	f005 f98b 	bl	8022340 <iprintf>
 801d02a:	f06f 030f 	mvn.w	r3, #15
 801d02e:	e30a      	b.n	801d646 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801d030:	88fb      	ldrh	r3, [r7, #6]
 801d032:	4619      	mov	r1, r3
 801d034:	68f8      	ldr	r0, [r7, #12]
 801d036:	f7ff ff33 	bl	801cea0 <tcp_write_checks>
 801d03a:	4603      	mov	r3, r0
 801d03c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801d040:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801d044:	2b00      	cmp	r3, #0
 801d046:	d002      	beq.n	801d04e <tcp_write+0xba>
    return err;
 801d048:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801d04c:	e2fb      	b.n	801d646 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801d04e:	68fb      	ldr	r3, [r7, #12]
 801d050:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d054:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d058:	2300      	movs	r3, #0
 801d05a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801d05e:	68fb      	ldr	r3, [r7, #12]
 801d060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d062:	2b00      	cmp	r3, #0
 801d064:	f000 80f6 	beq.w	801d254 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d068:	68fb      	ldr	r3, [r7, #12]
 801d06a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d06c:	653b      	str	r3, [r7, #80]	; 0x50
 801d06e:	e002      	b.n	801d076 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801d070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d072:	681b      	ldr	r3, [r3, #0]
 801d074:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d078:	681b      	ldr	r3, [r3, #0]
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	d1f8      	bne.n	801d070 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801d07e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d080:	7a9b      	ldrb	r3, [r3, #10]
 801d082:	009b      	lsls	r3, r3, #2
 801d084:	b29b      	uxth	r3, r3
 801d086:	f003 0304 	and.w	r3, r3, #4
 801d08a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801d08c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d08e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d090:	891b      	ldrh	r3, [r3, #8]
 801d092:	4619      	mov	r1, r3
 801d094:	8c3b      	ldrh	r3, [r7, #32]
 801d096:	440b      	add	r3, r1
 801d098:	429a      	cmp	r2, r3
 801d09a:	da06      	bge.n	801d0aa <tcp_write+0x116>
 801d09c:	4b74      	ldr	r3, [pc, #464]	; (801d270 <tcp_write+0x2dc>)
 801d09e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801d0a2:	4977      	ldr	r1, [pc, #476]	; (801d280 <tcp_write+0x2ec>)
 801d0a4:	4874      	ldr	r0, [pc, #464]	; (801d278 <tcp_write+0x2e4>)
 801d0a6:	f005 f94b 	bl	8022340 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801d0aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d0ac:	891a      	ldrh	r2, [r3, #8]
 801d0ae:	8c3b      	ldrh	r3, [r7, #32]
 801d0b0:	4413      	add	r3, r2
 801d0b2:	b29b      	uxth	r3, r3
 801d0b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d0b6:	1ad3      	subs	r3, r2, r3
 801d0b8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801d0ba:	68fb      	ldr	r3, [r7, #12]
 801d0bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d0c0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801d0c2:	8a7b      	ldrh	r3, [r7, #18]
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	d026      	beq.n	801d116 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801d0c8:	8a7b      	ldrh	r3, [r7, #18]
 801d0ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d0cc:	429a      	cmp	r2, r3
 801d0ce:	d206      	bcs.n	801d0de <tcp_write+0x14a>
 801d0d0:	4b67      	ldr	r3, [pc, #412]	; (801d270 <tcp_write+0x2dc>)
 801d0d2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801d0d6:	496b      	ldr	r1, [pc, #428]	; (801d284 <tcp_write+0x2f0>)
 801d0d8:	4867      	ldr	r0, [pc, #412]	; (801d278 <tcp_write+0x2e4>)
 801d0da:	f005 f931 	bl	8022340 <iprintf>
      seg = last_unsent;
 801d0de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d0e0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801d0e2:	8a7b      	ldrh	r3, [r7, #18]
 801d0e4:	88fa      	ldrh	r2, [r7, #6]
 801d0e6:	4293      	cmp	r3, r2
 801d0e8:	bf28      	it	cs
 801d0ea:	4613      	movcs	r3, r2
 801d0ec:	b29b      	uxth	r3, r3
 801d0ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d0f0:	4293      	cmp	r3, r2
 801d0f2:	bf28      	it	cs
 801d0f4:	4613      	movcs	r3, r2
 801d0f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801d0f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d0fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d0fe:	4413      	add	r3, r2
 801d100:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801d104:	8a7a      	ldrh	r2, [r7, #18]
 801d106:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d108:	1ad3      	subs	r3, r2, r3
 801d10a:	b29b      	uxth	r3, r3
 801d10c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801d10e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d110:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d112:	1ad3      	subs	r3, r2, r3
 801d114:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801d116:	8a7b      	ldrh	r3, [r7, #18]
 801d118:	2b00      	cmp	r3, #0
 801d11a:	d00b      	beq.n	801d134 <tcp_write+0x1a0>
 801d11c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d120:	88fb      	ldrh	r3, [r7, #6]
 801d122:	429a      	cmp	r2, r3
 801d124:	d006      	beq.n	801d134 <tcp_write+0x1a0>
 801d126:	4b52      	ldr	r3, [pc, #328]	; (801d270 <tcp_write+0x2dc>)
 801d128:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d12c:	4956      	ldr	r1, [pc, #344]	; (801d288 <tcp_write+0x2f4>)
 801d12e:	4852      	ldr	r0, [pc, #328]	; (801d278 <tcp_write+0x2e4>)
 801d130:	f005 f906 	bl	8022340 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801d134:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d138:	88fb      	ldrh	r3, [r7, #6]
 801d13a:	429a      	cmp	r2, r3
 801d13c:	f080 8167 	bcs.w	801d40e <tcp_write+0x47a>
 801d140:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d142:	2b00      	cmp	r3, #0
 801d144:	f000 8163 	beq.w	801d40e <tcp_write+0x47a>
 801d148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d14a:	891b      	ldrh	r3, [r3, #8]
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	f000 815e 	beq.w	801d40e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801d152:	88fa      	ldrh	r2, [r7, #6]
 801d154:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d158:	1ad2      	subs	r2, r2, r3
 801d15a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d15c:	4293      	cmp	r3, r2
 801d15e:	bfa8      	it	ge
 801d160:	4613      	movge	r3, r2
 801d162:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801d164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d166:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801d168:	797b      	ldrb	r3, [r7, #5]
 801d16a:	f003 0301 	and.w	r3, r3, #1
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d027      	beq.n	801d1c2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801d172:	f107 0012 	add.w	r0, r7, #18
 801d176:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d178:	8bf9      	ldrh	r1, [r7, #30]
 801d17a:	2301      	movs	r3, #1
 801d17c:	9302      	str	r3, [sp, #8]
 801d17e:	797b      	ldrb	r3, [r7, #5]
 801d180:	9301      	str	r3, [sp, #4]
 801d182:	68fb      	ldr	r3, [r7, #12]
 801d184:	9300      	str	r3, [sp, #0]
 801d186:	4603      	mov	r3, r0
 801d188:	2000      	movs	r0, #0
 801d18a:	f7ff fe0f 	bl	801cdac <tcp_pbuf_prealloc>
 801d18e:	6578      	str	r0, [r7, #84]	; 0x54
 801d190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d192:	2b00      	cmp	r3, #0
 801d194:	f000 8225 	beq.w	801d5e2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801d198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d19a:	6858      	ldr	r0, [r3, #4]
 801d19c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d1a0:	68ba      	ldr	r2, [r7, #8]
 801d1a2:	4413      	add	r3, r2
 801d1a4:	8bfa      	ldrh	r2, [r7, #30]
 801d1a6:	4619      	mov	r1, r3
 801d1a8:	f005 fa3b 	bl	8022622 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801d1ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d1ae:	f7fb f9bf 	bl	8018530 <pbuf_clen>
 801d1b2:	4603      	mov	r3, r0
 801d1b4:	461a      	mov	r2, r3
 801d1b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d1ba:	4413      	add	r3, r2
 801d1bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801d1c0:	e041      	b.n	801d246 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801d1c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d1c4:	685b      	ldr	r3, [r3, #4]
 801d1c6:	637b      	str	r3, [r7, #52]	; 0x34
 801d1c8:	e002      	b.n	801d1d0 <tcp_write+0x23c>
 801d1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1cc:	681b      	ldr	r3, [r3, #0]
 801d1ce:	637b      	str	r3, [r7, #52]	; 0x34
 801d1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1d2:	681b      	ldr	r3, [r3, #0]
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d1f8      	bne.n	801d1ca <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801d1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1da:	7b1b      	ldrb	r3, [r3, #12]
 801d1dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	d115      	bne.n	801d210 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801d1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1e6:	685b      	ldr	r3, [r3, #4]
 801d1e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d1ea:	8952      	ldrh	r2, [r2, #10]
 801d1ec:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801d1ee:	68ba      	ldr	r2, [r7, #8]
 801d1f0:	429a      	cmp	r2, r3
 801d1f2:	d10d      	bne.n	801d210 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801d1f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d006      	beq.n	801d20a <tcp_write+0x276>
 801d1fc:	4b1c      	ldr	r3, [pc, #112]	; (801d270 <tcp_write+0x2dc>)
 801d1fe:	f240 2231 	movw	r2, #561	; 0x231
 801d202:	4922      	ldr	r1, [pc, #136]	; (801d28c <tcp_write+0x2f8>)
 801d204:	481c      	ldr	r0, [pc, #112]	; (801d278 <tcp_write+0x2e4>)
 801d206:	f005 f89b 	bl	8022340 <iprintf>
          extendlen = seglen;
 801d20a:	8bfb      	ldrh	r3, [r7, #30]
 801d20c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801d20e:	e01a      	b.n	801d246 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801d210:	8bfb      	ldrh	r3, [r7, #30]
 801d212:	2201      	movs	r2, #1
 801d214:	4619      	mov	r1, r3
 801d216:	2000      	movs	r0, #0
 801d218:	f7fa fe18 	bl	8017e4c <pbuf_alloc>
 801d21c:	6578      	str	r0, [r7, #84]	; 0x54
 801d21e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d220:	2b00      	cmp	r3, #0
 801d222:	f000 81e0 	beq.w	801d5e6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801d226:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d22a:	68ba      	ldr	r2, [r7, #8]
 801d22c:	441a      	add	r2, r3
 801d22e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d230:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801d232:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d234:	f7fb f97c 	bl	8018530 <pbuf_clen>
 801d238:	4603      	mov	r3, r0
 801d23a:	461a      	mov	r2, r3
 801d23c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d240:	4413      	add	r3, r2
 801d242:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801d246:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d24a:	8bfb      	ldrh	r3, [r7, #30]
 801d24c:	4413      	add	r3, r2
 801d24e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801d252:	e0dc      	b.n	801d40e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801d254:	68fb      	ldr	r3, [r7, #12]
 801d256:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	f000 80d7 	beq.w	801d40e <tcp_write+0x47a>
 801d260:	4b03      	ldr	r3, [pc, #12]	; (801d270 <tcp_write+0x2dc>)
 801d262:	f240 224a 	movw	r2, #586	; 0x24a
 801d266:	490a      	ldr	r1, [pc, #40]	; (801d290 <tcp_write+0x2fc>)
 801d268:	4803      	ldr	r0, [pc, #12]	; (801d278 <tcp_write+0x2e4>)
 801d26a:	f005 f869 	bl	8022340 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801d26e:	e0ce      	b.n	801d40e <tcp_write+0x47a>
 801d270:	08025a78 	.word	0x08025a78
 801d274:	08025c18 	.word	0x08025c18
 801d278:	08025acc 	.word	0x08025acc
 801d27c:	08025c30 	.word	0x08025c30
 801d280:	08025c64 	.word	0x08025c64
 801d284:	08025c7c 	.word	0x08025c7c
 801d288:	08025c9c 	.word	0x08025c9c
 801d28c:	08025cbc 	.word	0x08025cbc
 801d290:	08025ce8 	.word	0x08025ce8
    struct pbuf *p;
    u16_t left = len - pos;
 801d294:	88fa      	ldrh	r2, [r7, #6]
 801d296:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d29a:	1ad3      	subs	r3, r2, r3
 801d29c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801d29e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d2a2:	b29b      	uxth	r3, r3
 801d2a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d2a6:	1ad3      	subs	r3, r2, r3
 801d2a8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801d2aa:	8b7a      	ldrh	r2, [r7, #26]
 801d2ac:	8bbb      	ldrh	r3, [r7, #28]
 801d2ae:	4293      	cmp	r3, r2
 801d2b0:	bf28      	it	cs
 801d2b2:	4613      	movcs	r3, r2
 801d2b4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801d2b6:	797b      	ldrb	r3, [r7, #5]
 801d2b8:	f003 0301 	and.w	r3, r3, #1
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	d036      	beq.n	801d32e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801d2c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d2c4:	b29a      	uxth	r2, r3
 801d2c6:	8b3b      	ldrh	r3, [r7, #24]
 801d2c8:	4413      	add	r3, r2
 801d2ca:	b299      	uxth	r1, r3
 801d2cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	bf0c      	ite	eq
 801d2d2:	2301      	moveq	r3, #1
 801d2d4:	2300      	movne	r3, #0
 801d2d6:	b2db      	uxtb	r3, r3
 801d2d8:	f107 0012 	add.w	r0, r7, #18
 801d2dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d2de:	9302      	str	r3, [sp, #8]
 801d2e0:	797b      	ldrb	r3, [r7, #5]
 801d2e2:	9301      	str	r3, [sp, #4]
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	9300      	str	r3, [sp, #0]
 801d2e8:	4603      	mov	r3, r0
 801d2ea:	2036      	movs	r0, #54	; 0x36
 801d2ec:	f7ff fd5e 	bl	801cdac <tcp_pbuf_prealloc>
 801d2f0:	6338      	str	r0, [r7, #48]	; 0x30
 801d2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	f000 8178 	beq.w	801d5ea <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801d2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2fc:	895b      	ldrh	r3, [r3, #10]
 801d2fe:	8b3a      	ldrh	r2, [r7, #24]
 801d300:	429a      	cmp	r2, r3
 801d302:	d906      	bls.n	801d312 <tcp_write+0x37e>
 801d304:	4b8c      	ldr	r3, [pc, #560]	; (801d538 <tcp_write+0x5a4>)
 801d306:	f240 2266 	movw	r2, #614	; 0x266
 801d30a:	498c      	ldr	r1, [pc, #560]	; (801d53c <tcp_write+0x5a8>)
 801d30c:	488c      	ldr	r0, [pc, #560]	; (801d540 <tcp_write+0x5ac>)
 801d30e:	f005 f817 	bl	8022340 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801d312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d314:	685a      	ldr	r2, [r3, #4]
 801d316:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d31a:	18d0      	adds	r0, r2, r3
 801d31c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d320:	68ba      	ldr	r2, [r7, #8]
 801d322:	4413      	add	r3, r2
 801d324:	8b3a      	ldrh	r2, [r7, #24]
 801d326:	4619      	mov	r1, r3
 801d328:	f005 f97b 	bl	8022622 <memcpy>
 801d32c:	e02f      	b.n	801d38e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801d32e:	8a7b      	ldrh	r3, [r7, #18]
 801d330:	2b00      	cmp	r3, #0
 801d332:	d006      	beq.n	801d342 <tcp_write+0x3ae>
 801d334:	4b80      	ldr	r3, [pc, #512]	; (801d538 <tcp_write+0x5a4>)
 801d336:	f240 2271 	movw	r2, #625	; 0x271
 801d33a:	4982      	ldr	r1, [pc, #520]	; (801d544 <tcp_write+0x5b0>)
 801d33c:	4880      	ldr	r0, [pc, #512]	; (801d540 <tcp_write+0x5ac>)
 801d33e:	f004 ffff 	bl	8022340 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801d342:	8b3b      	ldrh	r3, [r7, #24]
 801d344:	2201      	movs	r2, #1
 801d346:	4619      	mov	r1, r3
 801d348:	2036      	movs	r0, #54	; 0x36
 801d34a:	f7fa fd7f 	bl	8017e4c <pbuf_alloc>
 801d34e:	6178      	str	r0, [r7, #20]
 801d350:	697b      	ldr	r3, [r7, #20]
 801d352:	2b00      	cmp	r3, #0
 801d354:	f000 814b 	beq.w	801d5ee <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801d358:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d35c:	68ba      	ldr	r2, [r7, #8]
 801d35e:	441a      	add	r2, r3
 801d360:	697b      	ldr	r3, [r7, #20]
 801d362:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d364:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d368:	b29b      	uxth	r3, r3
 801d36a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d36e:	4619      	mov	r1, r3
 801d370:	2036      	movs	r0, #54	; 0x36
 801d372:	f7fa fd6b 	bl	8017e4c <pbuf_alloc>
 801d376:	6338      	str	r0, [r7, #48]	; 0x30
 801d378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d103      	bne.n	801d386 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801d37e:	6978      	ldr	r0, [r7, #20]
 801d380:	f7fb f848 	bl	8018414 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801d384:	e136      	b.n	801d5f4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801d386:	6979      	ldr	r1, [r7, #20]
 801d388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d38a:	f7fb f911 	bl	80185b0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801d38e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d390:	f7fb f8ce 	bl	8018530 <pbuf_clen>
 801d394:	4603      	mov	r3, r0
 801d396:	461a      	mov	r2, r3
 801d398:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d39c:	4413      	add	r3, r2
 801d39e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801d3a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d3a6:	2b09      	cmp	r3, #9
 801d3a8:	d903      	bls.n	801d3b2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801d3aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d3ac:	f7fb f832 	bl	8018414 <pbuf_free>
      goto memerr;
 801d3b0:	e120      	b.n	801d5f4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801d3b2:	68fb      	ldr	r3, [r7, #12]
 801d3b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801d3b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d3ba:	441a      	add	r2, r3
 801d3bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d3c0:	9300      	str	r3, [sp, #0]
 801d3c2:	4613      	mov	r3, r2
 801d3c4:	2200      	movs	r2, #0
 801d3c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d3c8:	68f8      	ldr	r0, [r7, #12]
 801d3ca:	f7ff fc51 	bl	801cc70 <tcp_create_segment>
 801d3ce:	64f8      	str	r0, [r7, #76]	; 0x4c
 801d3d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d3d2:	2b00      	cmp	r3, #0
 801d3d4:	f000 810d 	beq.w	801d5f2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801d3d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d102      	bne.n	801d3e4 <tcp_write+0x450>
      queue = seg;
 801d3de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d3e0:	647b      	str	r3, [r7, #68]	; 0x44
 801d3e2:	e00c      	b.n	801d3fe <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801d3e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	d106      	bne.n	801d3f8 <tcp_write+0x464>
 801d3ea:	4b53      	ldr	r3, [pc, #332]	; (801d538 <tcp_write+0x5a4>)
 801d3ec:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d3f0:	4955      	ldr	r1, [pc, #340]	; (801d548 <tcp_write+0x5b4>)
 801d3f2:	4853      	ldr	r0, [pc, #332]	; (801d540 <tcp_write+0x5ac>)
 801d3f4:	f004 ffa4 	bl	8022340 <iprintf>
      prev_seg->next = seg;
 801d3f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d3fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d3fc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801d3fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d400:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801d402:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d406:	8b3b      	ldrh	r3, [r7, #24]
 801d408:	4413      	add	r3, r2
 801d40a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801d40e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d412:	88fb      	ldrh	r3, [r7, #6]
 801d414:	429a      	cmp	r2, r3
 801d416:	f4ff af3d 	bcc.w	801d294 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801d41a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	d02c      	beq.n	801d47a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801d420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d422:	685b      	ldr	r3, [r3, #4]
 801d424:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d426:	e01e      	b.n	801d466 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801d428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d42a:	891a      	ldrh	r2, [r3, #8]
 801d42c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d42e:	4413      	add	r3, r2
 801d430:	b29a      	uxth	r2, r3
 801d432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d434:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801d436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d438:	681b      	ldr	r3, [r3, #0]
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	d110      	bne.n	801d460 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801d43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d440:	685b      	ldr	r3, [r3, #4]
 801d442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d444:	8952      	ldrh	r2, [r2, #10]
 801d446:	4413      	add	r3, r2
 801d448:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d44a:	68b9      	ldr	r1, [r7, #8]
 801d44c:	4618      	mov	r0, r3
 801d44e:	f005 f8e8 	bl	8022622 <memcpy>
        p->len += oversize_used;
 801d452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d454:	895a      	ldrh	r2, [r3, #10]
 801d456:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d458:	4413      	add	r3, r2
 801d45a:	b29a      	uxth	r2, r3
 801d45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d45e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801d460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d462:	681b      	ldr	r3, [r3, #0]
 801d464:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d468:	2b00      	cmp	r3, #0
 801d46a:	d1dd      	bne.n	801d428 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801d46c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d46e:	891a      	ldrh	r2, [r3, #8]
 801d470:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d472:	4413      	add	r3, r2
 801d474:	b29a      	uxth	r2, r3
 801d476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d478:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801d47a:	8a7a      	ldrh	r2, [r7, #18]
 801d47c:	68fb      	ldr	r3, [r7, #12]
 801d47e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801d482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d484:	2b00      	cmp	r3, #0
 801d486:	d018      	beq.n	801d4ba <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801d488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	d106      	bne.n	801d49c <tcp_write+0x508>
 801d48e:	4b2a      	ldr	r3, [pc, #168]	; (801d538 <tcp_write+0x5a4>)
 801d490:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801d494:	492d      	ldr	r1, [pc, #180]	; (801d54c <tcp_write+0x5b8>)
 801d496:	482a      	ldr	r0, [pc, #168]	; (801d540 <tcp_write+0x5ac>)
 801d498:	f004 ff52 	bl	8022340 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801d49c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d49e:	685b      	ldr	r3, [r3, #4]
 801d4a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801d4a2:	4618      	mov	r0, r3
 801d4a4:	f7fb f884 	bl	80185b0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801d4a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d4aa:	891a      	ldrh	r2, [r3, #8]
 801d4ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d4ae:	891b      	ldrh	r3, [r3, #8]
 801d4b0:	4413      	add	r3, r2
 801d4b2:	b29a      	uxth	r2, r3
 801d4b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d4b6:	811a      	strh	r2, [r3, #8]
 801d4b8:	e037      	b.n	801d52a <tcp_write+0x596>
  } else if (extendlen > 0) {
 801d4ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d4bc:	2b00      	cmp	r3, #0
 801d4be:	d034      	beq.n	801d52a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801d4c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	d003      	beq.n	801d4ce <tcp_write+0x53a>
 801d4c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d4c8:	685b      	ldr	r3, [r3, #4]
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	d106      	bne.n	801d4dc <tcp_write+0x548>
 801d4ce:	4b1a      	ldr	r3, [pc, #104]	; (801d538 <tcp_write+0x5a4>)
 801d4d0:	f240 22e6 	movw	r2, #742	; 0x2e6
 801d4d4:	491e      	ldr	r1, [pc, #120]	; (801d550 <tcp_write+0x5bc>)
 801d4d6:	481a      	ldr	r0, [pc, #104]	; (801d540 <tcp_write+0x5ac>)
 801d4d8:	f004 ff32 	bl	8022340 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801d4dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d4de:	685b      	ldr	r3, [r3, #4]
 801d4e0:	62bb      	str	r3, [r7, #40]	; 0x28
 801d4e2:	e009      	b.n	801d4f8 <tcp_write+0x564>
      p->tot_len += extendlen;
 801d4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4e6:	891a      	ldrh	r2, [r3, #8]
 801d4e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d4ea:	4413      	add	r3, r2
 801d4ec:	b29a      	uxth	r2, r3
 801d4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4f0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801d4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4f4:	681b      	ldr	r3, [r3, #0]
 801d4f6:	62bb      	str	r3, [r7, #40]	; 0x28
 801d4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4fa:	681b      	ldr	r3, [r3, #0]
 801d4fc:	2b00      	cmp	r3, #0
 801d4fe:	d1f1      	bne.n	801d4e4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801d500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d502:	891a      	ldrh	r2, [r3, #8]
 801d504:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d506:	4413      	add	r3, r2
 801d508:	b29a      	uxth	r2, r3
 801d50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d50c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801d50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d510:	895a      	ldrh	r2, [r3, #10]
 801d512:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d514:	4413      	add	r3, r2
 801d516:	b29a      	uxth	r2, r3
 801d518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d51a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801d51c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d51e:	891a      	ldrh	r2, [r3, #8]
 801d520:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d522:	4413      	add	r3, r2
 801d524:	b29a      	uxth	r2, r3
 801d526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d528:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801d52a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d111      	bne.n	801d554 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801d530:	68fb      	ldr	r3, [r7, #12]
 801d532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d534:	66da      	str	r2, [r3, #108]	; 0x6c
 801d536:	e010      	b.n	801d55a <tcp_write+0x5c6>
 801d538:	08025a78 	.word	0x08025a78
 801d53c:	08025d18 	.word	0x08025d18
 801d540:	08025acc 	.word	0x08025acc
 801d544:	08025d58 	.word	0x08025d58
 801d548:	08025d68 	.word	0x08025d68
 801d54c:	08025d7c 	.word	0x08025d7c
 801d550:	08025db4 	.word	0x08025db4
  } else {
    last_unsent->next = queue;
 801d554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d558:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801d55a:	68fb      	ldr	r3, [r7, #12]
 801d55c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801d55e:	88fb      	ldrh	r3, [r7, #6]
 801d560:	441a      	add	r2, r3
 801d562:	68fb      	ldr	r3, [r7, #12]
 801d564:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801d566:	68fb      	ldr	r3, [r7, #12]
 801d568:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801d56c:	88fb      	ldrh	r3, [r7, #6]
 801d56e:	1ad3      	subs	r3, r2, r3
 801d570:	b29a      	uxth	r2, r3
 801d572:	68fb      	ldr	r3, [r7, #12]
 801d574:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801d578:	68fb      	ldr	r3, [r7, #12]
 801d57a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801d57e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801d582:	68fb      	ldr	r3, [r7, #12]
 801d584:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d588:	2b00      	cmp	r3, #0
 801d58a:	d00e      	beq.n	801d5aa <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801d58c:	68fb      	ldr	r3, [r7, #12]
 801d58e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d590:	2b00      	cmp	r3, #0
 801d592:	d10a      	bne.n	801d5aa <tcp_write+0x616>
 801d594:	68fb      	ldr	r3, [r7, #12]
 801d596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d106      	bne.n	801d5aa <tcp_write+0x616>
 801d59c:	4b2c      	ldr	r3, [pc, #176]	; (801d650 <tcp_write+0x6bc>)
 801d59e:	f240 3212 	movw	r2, #786	; 0x312
 801d5a2:	492c      	ldr	r1, [pc, #176]	; (801d654 <tcp_write+0x6c0>)
 801d5a4:	482c      	ldr	r0, [pc, #176]	; (801d658 <tcp_write+0x6c4>)
 801d5a6:	f004 fecb 	bl	8022340 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801d5aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d5ac:	2b00      	cmp	r3, #0
 801d5ae:	d016      	beq.n	801d5de <tcp_write+0x64a>
 801d5b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d5b2:	68db      	ldr	r3, [r3, #12]
 801d5b4:	2b00      	cmp	r3, #0
 801d5b6:	d012      	beq.n	801d5de <tcp_write+0x64a>
 801d5b8:	797b      	ldrb	r3, [r7, #5]
 801d5ba:	f003 0302 	and.w	r3, r3, #2
 801d5be:	2b00      	cmp	r3, #0
 801d5c0:	d10d      	bne.n	801d5de <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801d5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d5c4:	68db      	ldr	r3, [r3, #12]
 801d5c6:	899b      	ldrh	r3, [r3, #12]
 801d5c8:	b29c      	uxth	r4, r3
 801d5ca:	2008      	movs	r0, #8
 801d5cc:	f7f9 fa78 	bl	8016ac0 <lwip_htons>
 801d5d0:	4603      	mov	r3, r0
 801d5d2:	461a      	mov	r2, r3
 801d5d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d5d6:	68db      	ldr	r3, [r3, #12]
 801d5d8:	4322      	orrs	r2, r4
 801d5da:	b292      	uxth	r2, r2
 801d5dc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801d5de:	2300      	movs	r3, #0
 801d5e0:	e031      	b.n	801d646 <tcp_write+0x6b2>
          goto memerr;
 801d5e2:	bf00      	nop
 801d5e4:	e006      	b.n	801d5f4 <tcp_write+0x660>
            goto memerr;
 801d5e6:	bf00      	nop
 801d5e8:	e004      	b.n	801d5f4 <tcp_write+0x660>
        goto memerr;
 801d5ea:	bf00      	nop
 801d5ec:	e002      	b.n	801d5f4 <tcp_write+0x660>
        goto memerr;
 801d5ee:	bf00      	nop
 801d5f0:	e000      	b.n	801d5f4 <tcp_write+0x660>
      goto memerr;
 801d5f2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d5f4:	68fb      	ldr	r3, [r7, #12]
 801d5f6:	8b5b      	ldrh	r3, [r3, #26]
 801d5f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d5fc:	b29a      	uxth	r2, r3
 801d5fe:	68fb      	ldr	r3, [r7, #12]
 801d600:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801d602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d604:	2b00      	cmp	r3, #0
 801d606:	d002      	beq.n	801d60e <tcp_write+0x67a>
    pbuf_free(concat_p);
 801d608:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d60a:	f7fa ff03 	bl	8018414 <pbuf_free>
  }
  if (queue != NULL) {
 801d60e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d610:	2b00      	cmp	r3, #0
 801d612:	d002      	beq.n	801d61a <tcp_write+0x686>
    tcp_segs_free(queue);
 801d614:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d616:	f7fc fb6b 	bl	8019cf0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801d61a:	68fb      	ldr	r3, [r7, #12]
 801d61c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d620:	2b00      	cmp	r3, #0
 801d622:	d00e      	beq.n	801d642 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801d624:	68fb      	ldr	r3, [r7, #12]
 801d626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d628:	2b00      	cmp	r3, #0
 801d62a:	d10a      	bne.n	801d642 <tcp_write+0x6ae>
 801d62c:	68fb      	ldr	r3, [r7, #12]
 801d62e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d630:	2b00      	cmp	r3, #0
 801d632:	d106      	bne.n	801d642 <tcp_write+0x6ae>
 801d634:	4b06      	ldr	r3, [pc, #24]	; (801d650 <tcp_write+0x6bc>)
 801d636:	f240 3227 	movw	r2, #807	; 0x327
 801d63a:	4906      	ldr	r1, [pc, #24]	; (801d654 <tcp_write+0x6c0>)
 801d63c:	4806      	ldr	r0, [pc, #24]	; (801d658 <tcp_write+0x6c4>)
 801d63e:	f004 fe7f 	bl	8022340 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801d642:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d646:	4618      	mov	r0, r3
 801d648:	375c      	adds	r7, #92	; 0x5c
 801d64a:	46bd      	mov	sp, r7
 801d64c:	bd90      	pop	{r4, r7, pc}
 801d64e:	bf00      	nop
 801d650:	08025a78 	.word	0x08025a78
 801d654:	08025dec 	.word	0x08025dec
 801d658:	08025acc 	.word	0x08025acc

0801d65c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801d65c:	b590      	push	{r4, r7, lr}
 801d65e:	b08b      	sub	sp, #44	; 0x2c
 801d660:	af02      	add	r7, sp, #8
 801d662:	6078      	str	r0, [r7, #4]
 801d664:	460b      	mov	r3, r1
 801d666:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801d668:	2300      	movs	r3, #0
 801d66a:	61fb      	str	r3, [r7, #28]
 801d66c:	2300      	movs	r3, #0
 801d66e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801d670:	2300      	movs	r3, #0
 801d672:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	2b00      	cmp	r3, #0
 801d678:	d106      	bne.n	801d688 <tcp_split_unsent_seg+0x2c>
 801d67a:	4b95      	ldr	r3, [pc, #596]	; (801d8d0 <tcp_split_unsent_seg+0x274>)
 801d67c:	f240 324b 	movw	r2, #843	; 0x34b
 801d680:	4994      	ldr	r1, [pc, #592]	; (801d8d4 <tcp_split_unsent_seg+0x278>)
 801d682:	4895      	ldr	r0, [pc, #596]	; (801d8d8 <tcp_split_unsent_seg+0x27c>)
 801d684:	f004 fe5c 	bl	8022340 <iprintf>

  useg = pcb->unsent;
 801d688:	687b      	ldr	r3, [r7, #4]
 801d68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d68c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801d68e:	697b      	ldr	r3, [r7, #20]
 801d690:	2b00      	cmp	r3, #0
 801d692:	d102      	bne.n	801d69a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801d694:	f04f 33ff 	mov.w	r3, #4294967295
 801d698:	e116      	b.n	801d8c8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801d69a:	887b      	ldrh	r3, [r7, #2]
 801d69c:	2b00      	cmp	r3, #0
 801d69e:	d109      	bne.n	801d6b4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801d6a0:	4b8b      	ldr	r3, [pc, #556]	; (801d8d0 <tcp_split_unsent_seg+0x274>)
 801d6a2:	f240 3253 	movw	r2, #851	; 0x353
 801d6a6:	498d      	ldr	r1, [pc, #564]	; (801d8dc <tcp_split_unsent_seg+0x280>)
 801d6a8:	488b      	ldr	r0, [pc, #556]	; (801d8d8 <tcp_split_unsent_seg+0x27c>)
 801d6aa:	f004 fe49 	bl	8022340 <iprintf>
    return ERR_VAL;
 801d6ae:	f06f 0305 	mvn.w	r3, #5
 801d6b2:	e109      	b.n	801d8c8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801d6b4:	697b      	ldr	r3, [r7, #20]
 801d6b6:	891b      	ldrh	r3, [r3, #8]
 801d6b8:	887a      	ldrh	r2, [r7, #2]
 801d6ba:	429a      	cmp	r2, r3
 801d6bc:	d301      	bcc.n	801d6c2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801d6be:	2300      	movs	r3, #0
 801d6c0:	e102      	b.n	801d8c8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d6c6:	887a      	ldrh	r2, [r7, #2]
 801d6c8:	429a      	cmp	r2, r3
 801d6ca:	d906      	bls.n	801d6da <tcp_split_unsent_seg+0x7e>
 801d6cc:	4b80      	ldr	r3, [pc, #512]	; (801d8d0 <tcp_split_unsent_seg+0x274>)
 801d6ce:	f240 325b 	movw	r2, #859	; 0x35b
 801d6d2:	4983      	ldr	r1, [pc, #524]	; (801d8e0 <tcp_split_unsent_seg+0x284>)
 801d6d4:	4880      	ldr	r0, [pc, #512]	; (801d8d8 <tcp_split_unsent_seg+0x27c>)
 801d6d6:	f004 fe33 	bl	8022340 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801d6da:	697b      	ldr	r3, [r7, #20]
 801d6dc:	891b      	ldrh	r3, [r3, #8]
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	d106      	bne.n	801d6f0 <tcp_split_unsent_seg+0x94>
 801d6e2:	4b7b      	ldr	r3, [pc, #492]	; (801d8d0 <tcp_split_unsent_seg+0x274>)
 801d6e4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801d6e8:	497e      	ldr	r1, [pc, #504]	; (801d8e4 <tcp_split_unsent_seg+0x288>)
 801d6ea:	487b      	ldr	r0, [pc, #492]	; (801d8d8 <tcp_split_unsent_seg+0x27c>)
 801d6ec:	f004 fe28 	bl	8022340 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801d6f0:	697b      	ldr	r3, [r7, #20]
 801d6f2:	7a9b      	ldrb	r3, [r3, #10]
 801d6f4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801d6f6:	7bfb      	ldrb	r3, [r7, #15]
 801d6f8:	009b      	lsls	r3, r3, #2
 801d6fa:	b2db      	uxtb	r3, r3
 801d6fc:	f003 0304 	and.w	r3, r3, #4
 801d700:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801d702:	697b      	ldr	r3, [r7, #20]
 801d704:	891a      	ldrh	r2, [r3, #8]
 801d706:	887b      	ldrh	r3, [r7, #2]
 801d708:	1ad3      	subs	r3, r2, r3
 801d70a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801d70c:	7bbb      	ldrb	r3, [r7, #14]
 801d70e:	b29a      	uxth	r2, r3
 801d710:	89bb      	ldrh	r3, [r7, #12]
 801d712:	4413      	add	r3, r2
 801d714:	b29b      	uxth	r3, r3
 801d716:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d71a:	4619      	mov	r1, r3
 801d71c:	2036      	movs	r0, #54	; 0x36
 801d71e:	f7fa fb95 	bl	8017e4c <pbuf_alloc>
 801d722:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d724:	693b      	ldr	r3, [r7, #16]
 801d726:	2b00      	cmp	r3, #0
 801d728:	f000 80b7 	beq.w	801d89a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801d72c:	697b      	ldr	r3, [r7, #20]
 801d72e:	685b      	ldr	r3, [r3, #4]
 801d730:	891a      	ldrh	r2, [r3, #8]
 801d732:	697b      	ldr	r3, [r7, #20]
 801d734:	891b      	ldrh	r3, [r3, #8]
 801d736:	1ad3      	subs	r3, r2, r3
 801d738:	b29a      	uxth	r2, r3
 801d73a:	887b      	ldrh	r3, [r7, #2]
 801d73c:	4413      	add	r3, r2
 801d73e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801d740:	697b      	ldr	r3, [r7, #20]
 801d742:	6858      	ldr	r0, [r3, #4]
 801d744:	693b      	ldr	r3, [r7, #16]
 801d746:	685a      	ldr	r2, [r3, #4]
 801d748:	7bbb      	ldrb	r3, [r7, #14]
 801d74a:	18d1      	adds	r1, r2, r3
 801d74c:	897b      	ldrh	r3, [r7, #10]
 801d74e:	89ba      	ldrh	r2, [r7, #12]
 801d750:	f7fb f856 	bl	8018800 <pbuf_copy_partial>
 801d754:	4603      	mov	r3, r0
 801d756:	461a      	mov	r2, r3
 801d758:	89bb      	ldrh	r3, [r7, #12]
 801d75a:	4293      	cmp	r3, r2
 801d75c:	f040 809f 	bne.w	801d89e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801d760:	697b      	ldr	r3, [r7, #20]
 801d762:	68db      	ldr	r3, [r3, #12]
 801d764:	899b      	ldrh	r3, [r3, #12]
 801d766:	b29b      	uxth	r3, r3
 801d768:	4618      	mov	r0, r3
 801d76a:	f7f9 f9a9 	bl	8016ac0 <lwip_htons>
 801d76e:	4603      	mov	r3, r0
 801d770:	b2db      	uxtb	r3, r3
 801d772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d776:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801d778:	2300      	movs	r3, #0
 801d77a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801d77c:	7efb      	ldrb	r3, [r7, #27]
 801d77e:	f003 0308 	and.w	r3, r3, #8
 801d782:	2b00      	cmp	r3, #0
 801d784:	d007      	beq.n	801d796 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801d786:	7efb      	ldrb	r3, [r7, #27]
 801d788:	f023 0308 	bic.w	r3, r3, #8
 801d78c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801d78e:	7ebb      	ldrb	r3, [r7, #26]
 801d790:	f043 0308 	orr.w	r3, r3, #8
 801d794:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801d796:	7efb      	ldrb	r3, [r7, #27]
 801d798:	f003 0301 	and.w	r3, r3, #1
 801d79c:	2b00      	cmp	r3, #0
 801d79e:	d007      	beq.n	801d7b0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801d7a0:	7efb      	ldrb	r3, [r7, #27]
 801d7a2:	f023 0301 	bic.w	r3, r3, #1
 801d7a6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801d7a8:	7ebb      	ldrb	r3, [r7, #26]
 801d7aa:	f043 0301 	orr.w	r3, r3, #1
 801d7ae:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801d7b0:	697b      	ldr	r3, [r7, #20]
 801d7b2:	68db      	ldr	r3, [r3, #12]
 801d7b4:	685b      	ldr	r3, [r3, #4]
 801d7b6:	4618      	mov	r0, r3
 801d7b8:	f7f9 f997 	bl	8016aea <lwip_htonl>
 801d7bc:	4602      	mov	r2, r0
 801d7be:	887b      	ldrh	r3, [r7, #2]
 801d7c0:	18d1      	adds	r1, r2, r3
 801d7c2:	7eba      	ldrb	r2, [r7, #26]
 801d7c4:	7bfb      	ldrb	r3, [r7, #15]
 801d7c6:	9300      	str	r3, [sp, #0]
 801d7c8:	460b      	mov	r3, r1
 801d7ca:	6939      	ldr	r1, [r7, #16]
 801d7cc:	6878      	ldr	r0, [r7, #4]
 801d7ce:	f7ff fa4f 	bl	801cc70 <tcp_create_segment>
 801d7d2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801d7d4:	69fb      	ldr	r3, [r7, #28]
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	d063      	beq.n	801d8a2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801d7da:	697b      	ldr	r3, [r7, #20]
 801d7dc:	685b      	ldr	r3, [r3, #4]
 801d7de:	4618      	mov	r0, r3
 801d7e0:	f7fa fea6 	bl	8018530 <pbuf_clen>
 801d7e4:	4603      	mov	r3, r0
 801d7e6:	461a      	mov	r2, r3
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d7ee:	1a9b      	subs	r3, r3, r2
 801d7f0:	b29a      	uxth	r2, r3
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801d7f8:	697b      	ldr	r3, [r7, #20]
 801d7fa:	6858      	ldr	r0, [r3, #4]
 801d7fc:	697b      	ldr	r3, [r7, #20]
 801d7fe:	685b      	ldr	r3, [r3, #4]
 801d800:	891a      	ldrh	r2, [r3, #8]
 801d802:	89bb      	ldrh	r3, [r7, #12]
 801d804:	1ad3      	subs	r3, r2, r3
 801d806:	b29b      	uxth	r3, r3
 801d808:	4619      	mov	r1, r3
 801d80a:	f7fa fc7d 	bl	8018108 <pbuf_realloc>
  useg->len -= remainder;
 801d80e:	697b      	ldr	r3, [r7, #20]
 801d810:	891a      	ldrh	r2, [r3, #8]
 801d812:	89bb      	ldrh	r3, [r7, #12]
 801d814:	1ad3      	subs	r3, r2, r3
 801d816:	b29a      	uxth	r2, r3
 801d818:	697b      	ldr	r3, [r7, #20]
 801d81a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801d81c:	697b      	ldr	r3, [r7, #20]
 801d81e:	68db      	ldr	r3, [r3, #12]
 801d820:	899b      	ldrh	r3, [r3, #12]
 801d822:	b29c      	uxth	r4, r3
 801d824:	7efb      	ldrb	r3, [r7, #27]
 801d826:	b29b      	uxth	r3, r3
 801d828:	4618      	mov	r0, r3
 801d82a:	f7f9 f949 	bl	8016ac0 <lwip_htons>
 801d82e:	4603      	mov	r3, r0
 801d830:	461a      	mov	r2, r3
 801d832:	697b      	ldr	r3, [r7, #20]
 801d834:	68db      	ldr	r3, [r3, #12]
 801d836:	4322      	orrs	r2, r4
 801d838:	b292      	uxth	r2, r2
 801d83a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801d83c:	697b      	ldr	r3, [r7, #20]
 801d83e:	685b      	ldr	r3, [r3, #4]
 801d840:	4618      	mov	r0, r3
 801d842:	f7fa fe75 	bl	8018530 <pbuf_clen>
 801d846:	4603      	mov	r3, r0
 801d848:	461a      	mov	r2, r3
 801d84a:	687b      	ldr	r3, [r7, #4]
 801d84c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d850:	4413      	add	r3, r2
 801d852:	b29a      	uxth	r2, r3
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801d85a:	69fb      	ldr	r3, [r7, #28]
 801d85c:	685b      	ldr	r3, [r3, #4]
 801d85e:	4618      	mov	r0, r3
 801d860:	f7fa fe66 	bl	8018530 <pbuf_clen>
 801d864:	4603      	mov	r3, r0
 801d866:	461a      	mov	r2, r3
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d86e:	4413      	add	r3, r2
 801d870:	b29a      	uxth	r2, r3
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801d878:	697b      	ldr	r3, [r7, #20]
 801d87a:	681a      	ldr	r2, [r3, #0]
 801d87c:	69fb      	ldr	r3, [r7, #28]
 801d87e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801d880:	697b      	ldr	r3, [r7, #20]
 801d882:	69fa      	ldr	r2, [r7, #28]
 801d884:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801d886:	69fb      	ldr	r3, [r7, #28]
 801d888:	681b      	ldr	r3, [r3, #0]
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d103      	bne.n	801d896 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	2200      	movs	r2, #0
 801d892:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801d896:	2300      	movs	r3, #0
 801d898:	e016      	b.n	801d8c8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801d89a:	bf00      	nop
 801d89c:	e002      	b.n	801d8a4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801d89e:	bf00      	nop
 801d8a0:	e000      	b.n	801d8a4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801d8a2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801d8a4:	69fb      	ldr	r3, [r7, #28]
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d006      	beq.n	801d8b8 <tcp_split_unsent_seg+0x25c>
 801d8aa:	4b09      	ldr	r3, [pc, #36]	; (801d8d0 <tcp_split_unsent_seg+0x274>)
 801d8ac:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801d8b0:	490d      	ldr	r1, [pc, #52]	; (801d8e8 <tcp_split_unsent_seg+0x28c>)
 801d8b2:	4809      	ldr	r0, [pc, #36]	; (801d8d8 <tcp_split_unsent_seg+0x27c>)
 801d8b4:	f004 fd44 	bl	8022340 <iprintf>
  if (p != NULL) {
 801d8b8:	693b      	ldr	r3, [r7, #16]
 801d8ba:	2b00      	cmp	r3, #0
 801d8bc:	d002      	beq.n	801d8c4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801d8be:	6938      	ldr	r0, [r7, #16]
 801d8c0:	f7fa fda8 	bl	8018414 <pbuf_free>
  }

  return ERR_MEM;
 801d8c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d8c8:	4618      	mov	r0, r3
 801d8ca:	3724      	adds	r7, #36	; 0x24
 801d8cc:	46bd      	mov	sp, r7
 801d8ce:	bd90      	pop	{r4, r7, pc}
 801d8d0:	08025a78 	.word	0x08025a78
 801d8d4:	08025e0c 	.word	0x08025e0c
 801d8d8:	08025acc 	.word	0x08025acc
 801d8dc:	08025e30 	.word	0x08025e30
 801d8e0:	08025e54 	.word	0x08025e54
 801d8e4:	08025e64 	.word	0x08025e64
 801d8e8:	08025e74 	.word	0x08025e74

0801d8ec <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801d8ec:	b590      	push	{r4, r7, lr}
 801d8ee:	b085      	sub	sp, #20
 801d8f0:	af00      	add	r7, sp, #0
 801d8f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	2b00      	cmp	r3, #0
 801d8f8:	d106      	bne.n	801d908 <tcp_send_fin+0x1c>
 801d8fa:	4b21      	ldr	r3, [pc, #132]	; (801d980 <tcp_send_fin+0x94>)
 801d8fc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801d900:	4920      	ldr	r1, [pc, #128]	; (801d984 <tcp_send_fin+0x98>)
 801d902:	4821      	ldr	r0, [pc, #132]	; (801d988 <tcp_send_fin+0x9c>)
 801d904:	f004 fd1c 	bl	8022340 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d90c:	2b00      	cmp	r3, #0
 801d90e:	d02e      	beq.n	801d96e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d910:	687b      	ldr	r3, [r7, #4]
 801d912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d914:	60fb      	str	r3, [r7, #12]
 801d916:	e002      	b.n	801d91e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801d918:	68fb      	ldr	r3, [r7, #12]
 801d91a:	681b      	ldr	r3, [r3, #0]
 801d91c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d91e:	68fb      	ldr	r3, [r7, #12]
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	2b00      	cmp	r3, #0
 801d924:	d1f8      	bne.n	801d918 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801d926:	68fb      	ldr	r3, [r7, #12]
 801d928:	68db      	ldr	r3, [r3, #12]
 801d92a:	899b      	ldrh	r3, [r3, #12]
 801d92c:	b29b      	uxth	r3, r3
 801d92e:	4618      	mov	r0, r3
 801d930:	f7f9 f8c6 	bl	8016ac0 <lwip_htons>
 801d934:	4603      	mov	r3, r0
 801d936:	b2db      	uxtb	r3, r3
 801d938:	f003 0307 	and.w	r3, r3, #7
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d116      	bne.n	801d96e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801d940:	68fb      	ldr	r3, [r7, #12]
 801d942:	68db      	ldr	r3, [r3, #12]
 801d944:	899b      	ldrh	r3, [r3, #12]
 801d946:	b29c      	uxth	r4, r3
 801d948:	2001      	movs	r0, #1
 801d94a:	f7f9 f8b9 	bl	8016ac0 <lwip_htons>
 801d94e:	4603      	mov	r3, r0
 801d950:	461a      	mov	r2, r3
 801d952:	68fb      	ldr	r3, [r7, #12]
 801d954:	68db      	ldr	r3, [r3, #12]
 801d956:	4322      	orrs	r2, r4
 801d958:	b292      	uxth	r2, r2
 801d95a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801d95c:	687b      	ldr	r3, [r7, #4]
 801d95e:	8b5b      	ldrh	r3, [r3, #26]
 801d960:	f043 0320 	orr.w	r3, r3, #32
 801d964:	b29a      	uxth	r2, r3
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801d96a:	2300      	movs	r3, #0
 801d96c:	e004      	b.n	801d978 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801d96e:	2101      	movs	r1, #1
 801d970:	6878      	ldr	r0, [r7, #4]
 801d972:	f000 f80b 	bl	801d98c <tcp_enqueue_flags>
 801d976:	4603      	mov	r3, r0
}
 801d978:	4618      	mov	r0, r3
 801d97a:	3714      	adds	r7, #20
 801d97c:	46bd      	mov	sp, r7
 801d97e:	bd90      	pop	{r4, r7, pc}
 801d980:	08025a78 	.word	0x08025a78
 801d984:	08025e80 	.word	0x08025e80
 801d988:	08025acc 	.word	0x08025acc

0801d98c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801d98c:	b580      	push	{r7, lr}
 801d98e:	b08a      	sub	sp, #40	; 0x28
 801d990:	af02      	add	r7, sp, #8
 801d992:	6078      	str	r0, [r7, #4]
 801d994:	460b      	mov	r3, r1
 801d996:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801d998:	2300      	movs	r3, #0
 801d99a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801d99c:	2300      	movs	r3, #0
 801d99e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801d9a0:	78fb      	ldrb	r3, [r7, #3]
 801d9a2:	f003 0303 	and.w	r3, r3, #3
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	d106      	bne.n	801d9b8 <tcp_enqueue_flags+0x2c>
 801d9aa:	4b67      	ldr	r3, [pc, #412]	; (801db48 <tcp_enqueue_flags+0x1bc>)
 801d9ac:	f240 4211 	movw	r2, #1041	; 0x411
 801d9b0:	4966      	ldr	r1, [pc, #408]	; (801db4c <tcp_enqueue_flags+0x1c0>)
 801d9b2:	4867      	ldr	r0, [pc, #412]	; (801db50 <tcp_enqueue_flags+0x1c4>)
 801d9b4:	f004 fcc4 	bl	8022340 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801d9b8:	687b      	ldr	r3, [r7, #4]
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d106      	bne.n	801d9cc <tcp_enqueue_flags+0x40>
 801d9be:	4b62      	ldr	r3, [pc, #392]	; (801db48 <tcp_enqueue_flags+0x1bc>)
 801d9c0:	f240 4213 	movw	r2, #1043	; 0x413
 801d9c4:	4963      	ldr	r1, [pc, #396]	; (801db54 <tcp_enqueue_flags+0x1c8>)
 801d9c6:	4862      	ldr	r0, [pc, #392]	; (801db50 <tcp_enqueue_flags+0x1c4>)
 801d9c8:	f004 fcba 	bl	8022340 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801d9cc:	78fb      	ldrb	r3, [r7, #3]
 801d9ce:	f003 0302 	and.w	r3, r3, #2
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	d001      	beq.n	801d9da <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801d9d6:	2301      	movs	r3, #1
 801d9d8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d9da:	7ffb      	ldrb	r3, [r7, #31]
 801d9dc:	009b      	lsls	r3, r3, #2
 801d9de:	b2db      	uxtb	r3, r3
 801d9e0:	f003 0304 	and.w	r3, r3, #4
 801d9e4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d9e6:	7dfb      	ldrb	r3, [r7, #23]
 801d9e8:	b29b      	uxth	r3, r3
 801d9ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d9ee:	4619      	mov	r1, r3
 801d9f0:	2036      	movs	r0, #54	; 0x36
 801d9f2:	f7fa fa2b 	bl	8017e4c <pbuf_alloc>
 801d9f6:	6138      	str	r0, [r7, #16]
 801d9f8:	693b      	ldr	r3, [r7, #16]
 801d9fa:	2b00      	cmp	r3, #0
 801d9fc:	d109      	bne.n	801da12 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d9fe:	687b      	ldr	r3, [r7, #4]
 801da00:	8b5b      	ldrh	r3, [r3, #26]
 801da02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801da06:	b29a      	uxth	r2, r3
 801da08:	687b      	ldr	r3, [r7, #4]
 801da0a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801da0c:	f04f 33ff 	mov.w	r3, #4294967295
 801da10:	e095      	b.n	801db3e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801da12:	693b      	ldr	r3, [r7, #16]
 801da14:	895a      	ldrh	r2, [r3, #10]
 801da16:	7dfb      	ldrb	r3, [r7, #23]
 801da18:	b29b      	uxth	r3, r3
 801da1a:	429a      	cmp	r2, r3
 801da1c:	d206      	bcs.n	801da2c <tcp_enqueue_flags+0xa0>
 801da1e:	4b4a      	ldr	r3, [pc, #296]	; (801db48 <tcp_enqueue_flags+0x1bc>)
 801da20:	f240 4239 	movw	r2, #1081	; 0x439
 801da24:	494c      	ldr	r1, [pc, #304]	; (801db58 <tcp_enqueue_flags+0x1cc>)
 801da26:	484a      	ldr	r0, [pc, #296]	; (801db50 <tcp_enqueue_flags+0x1c4>)
 801da28:	f004 fc8a 	bl	8022340 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801da30:	78fa      	ldrb	r2, [r7, #3]
 801da32:	7ffb      	ldrb	r3, [r7, #31]
 801da34:	9300      	str	r3, [sp, #0]
 801da36:	460b      	mov	r3, r1
 801da38:	6939      	ldr	r1, [r7, #16]
 801da3a:	6878      	ldr	r0, [r7, #4]
 801da3c:	f7ff f918 	bl	801cc70 <tcp_create_segment>
 801da40:	60f8      	str	r0, [r7, #12]
 801da42:	68fb      	ldr	r3, [r7, #12]
 801da44:	2b00      	cmp	r3, #0
 801da46:	d109      	bne.n	801da5c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	8b5b      	ldrh	r3, [r3, #26]
 801da4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801da50:	b29a      	uxth	r2, r3
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801da56:	f04f 33ff 	mov.w	r3, #4294967295
 801da5a:	e070      	b.n	801db3e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801da5c:	68fb      	ldr	r3, [r7, #12]
 801da5e:	68db      	ldr	r3, [r3, #12]
 801da60:	f003 0303 	and.w	r3, r3, #3
 801da64:	2b00      	cmp	r3, #0
 801da66:	d006      	beq.n	801da76 <tcp_enqueue_flags+0xea>
 801da68:	4b37      	ldr	r3, [pc, #220]	; (801db48 <tcp_enqueue_flags+0x1bc>)
 801da6a:	f240 4242 	movw	r2, #1090	; 0x442
 801da6e:	493b      	ldr	r1, [pc, #236]	; (801db5c <tcp_enqueue_flags+0x1d0>)
 801da70:	4837      	ldr	r0, [pc, #220]	; (801db50 <tcp_enqueue_flags+0x1c4>)
 801da72:	f004 fc65 	bl	8022340 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801da76:	68fb      	ldr	r3, [r7, #12]
 801da78:	891b      	ldrh	r3, [r3, #8]
 801da7a:	2b00      	cmp	r3, #0
 801da7c:	d006      	beq.n	801da8c <tcp_enqueue_flags+0x100>
 801da7e:	4b32      	ldr	r3, [pc, #200]	; (801db48 <tcp_enqueue_flags+0x1bc>)
 801da80:	f240 4243 	movw	r2, #1091	; 0x443
 801da84:	4936      	ldr	r1, [pc, #216]	; (801db60 <tcp_enqueue_flags+0x1d4>)
 801da86:	4832      	ldr	r0, [pc, #200]	; (801db50 <tcp_enqueue_flags+0x1c4>)
 801da88:	f004 fc5a 	bl	8022340 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801da90:	2b00      	cmp	r3, #0
 801da92:	d103      	bne.n	801da9c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801da94:	687b      	ldr	r3, [r7, #4]
 801da96:	68fa      	ldr	r2, [r7, #12]
 801da98:	66da      	str	r2, [r3, #108]	; 0x6c
 801da9a:	e00d      	b.n	801dab8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801daa0:	61bb      	str	r3, [r7, #24]
 801daa2:	e002      	b.n	801daaa <tcp_enqueue_flags+0x11e>
 801daa4:	69bb      	ldr	r3, [r7, #24]
 801daa6:	681b      	ldr	r3, [r3, #0]
 801daa8:	61bb      	str	r3, [r7, #24]
 801daaa:	69bb      	ldr	r3, [r7, #24]
 801daac:	681b      	ldr	r3, [r3, #0]
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d1f8      	bne.n	801daa4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801dab2:	69bb      	ldr	r3, [r7, #24]
 801dab4:	68fa      	ldr	r2, [r7, #12]
 801dab6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	2200      	movs	r2, #0
 801dabc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801dac0:	78fb      	ldrb	r3, [r7, #3]
 801dac2:	f003 0302 	and.w	r3, r3, #2
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	d104      	bne.n	801dad4 <tcp_enqueue_flags+0x148>
 801daca:	78fb      	ldrb	r3, [r7, #3]
 801dacc:	f003 0301 	and.w	r3, r3, #1
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	d004      	beq.n	801dade <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801dad8:	1c5a      	adds	r2, r3, #1
 801dada:	687b      	ldr	r3, [r7, #4]
 801dadc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801dade:	78fb      	ldrb	r3, [r7, #3]
 801dae0:	f003 0301 	and.w	r3, r3, #1
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d006      	beq.n	801daf6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	8b5b      	ldrh	r3, [r3, #26]
 801daec:	f043 0320 	orr.w	r3, r3, #32
 801daf0:	b29a      	uxth	r2, r3
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801daf6:	68fb      	ldr	r3, [r7, #12]
 801daf8:	685b      	ldr	r3, [r3, #4]
 801dafa:	4618      	mov	r0, r3
 801dafc:	f7fa fd18 	bl	8018530 <pbuf_clen>
 801db00:	4603      	mov	r3, r0
 801db02:	461a      	mov	r2, r3
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801db0a:	4413      	add	r3, r2
 801db0c:	b29a      	uxth	r2, r3
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	d00e      	beq.n	801db3c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801db1e:	687b      	ldr	r3, [r7, #4]
 801db20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801db22:	2b00      	cmp	r3, #0
 801db24:	d10a      	bne.n	801db3c <tcp_enqueue_flags+0x1b0>
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801db2a:	2b00      	cmp	r3, #0
 801db2c:	d106      	bne.n	801db3c <tcp_enqueue_flags+0x1b0>
 801db2e:	4b06      	ldr	r3, [pc, #24]	; (801db48 <tcp_enqueue_flags+0x1bc>)
 801db30:	f240 4265 	movw	r2, #1125	; 0x465
 801db34:	490b      	ldr	r1, [pc, #44]	; (801db64 <tcp_enqueue_flags+0x1d8>)
 801db36:	4806      	ldr	r0, [pc, #24]	; (801db50 <tcp_enqueue_flags+0x1c4>)
 801db38:	f004 fc02 	bl	8022340 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801db3c:	2300      	movs	r3, #0
}
 801db3e:	4618      	mov	r0, r3
 801db40:	3720      	adds	r7, #32
 801db42:	46bd      	mov	sp, r7
 801db44:	bd80      	pop	{r7, pc}
 801db46:	bf00      	nop
 801db48:	08025a78 	.word	0x08025a78
 801db4c:	08025e9c 	.word	0x08025e9c
 801db50:	08025acc 	.word	0x08025acc
 801db54:	08025ef4 	.word	0x08025ef4
 801db58:	08025f14 	.word	0x08025f14
 801db5c:	08025f50 	.word	0x08025f50
 801db60:	08025f68 	.word	0x08025f68
 801db64:	08025f94 	.word	0x08025f94

0801db68 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801db68:	b5b0      	push	{r4, r5, r7, lr}
 801db6a:	b08a      	sub	sp, #40	; 0x28
 801db6c:	af00      	add	r7, sp, #0
 801db6e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801db70:	687b      	ldr	r3, [r7, #4]
 801db72:	2b00      	cmp	r3, #0
 801db74:	d106      	bne.n	801db84 <tcp_output+0x1c>
 801db76:	4b8a      	ldr	r3, [pc, #552]	; (801dda0 <tcp_output+0x238>)
 801db78:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801db7c:	4989      	ldr	r1, [pc, #548]	; (801dda4 <tcp_output+0x23c>)
 801db7e:	488a      	ldr	r0, [pc, #552]	; (801dda8 <tcp_output+0x240>)
 801db80:	f004 fbde 	bl	8022340 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801db84:	687b      	ldr	r3, [r7, #4]
 801db86:	7d1b      	ldrb	r3, [r3, #20]
 801db88:	2b01      	cmp	r3, #1
 801db8a:	d106      	bne.n	801db9a <tcp_output+0x32>
 801db8c:	4b84      	ldr	r3, [pc, #528]	; (801dda0 <tcp_output+0x238>)
 801db8e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801db92:	4986      	ldr	r1, [pc, #536]	; (801ddac <tcp_output+0x244>)
 801db94:	4884      	ldr	r0, [pc, #528]	; (801dda8 <tcp_output+0x240>)
 801db96:	f004 fbd3 	bl	8022340 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801db9a:	4b85      	ldr	r3, [pc, #532]	; (801ddb0 <tcp_output+0x248>)
 801db9c:	681b      	ldr	r3, [r3, #0]
 801db9e:	687a      	ldr	r2, [r7, #4]
 801dba0:	429a      	cmp	r2, r3
 801dba2:	d101      	bne.n	801dba8 <tcp_output+0x40>
    return ERR_OK;
 801dba4:	2300      	movs	r3, #0
 801dba6:	e1ce      	b.n	801df46 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801dba8:	687b      	ldr	r3, [r7, #4]
 801dbaa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801dbae:	687b      	ldr	r3, [r7, #4]
 801dbb0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801dbb4:	4293      	cmp	r3, r2
 801dbb6:	bf28      	it	cs
 801dbb8:	4613      	movcs	r3, r2
 801dbba:	b29b      	uxth	r3, r3
 801dbbc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801dbbe:	687b      	ldr	r3, [r7, #4]
 801dbc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dbc2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801dbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbc6:	2b00      	cmp	r3, #0
 801dbc8:	d10b      	bne.n	801dbe2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	8b5b      	ldrh	r3, [r3, #26]
 801dbce:	f003 0302 	and.w	r3, r3, #2
 801dbd2:	2b00      	cmp	r3, #0
 801dbd4:	f000 81aa 	beq.w	801df2c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801dbd8:	6878      	ldr	r0, [r7, #4]
 801dbda:	f000 fdcb 	bl	801e774 <tcp_send_empty_ack>
 801dbde:	4603      	mov	r3, r0
 801dbe0:	e1b1      	b.n	801df46 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801dbe2:	6879      	ldr	r1, [r7, #4]
 801dbe4:	687b      	ldr	r3, [r7, #4]
 801dbe6:	3304      	adds	r3, #4
 801dbe8:	461a      	mov	r2, r3
 801dbea:	6878      	ldr	r0, [r7, #4]
 801dbec:	f7ff f824 	bl	801cc38 <tcp_route>
 801dbf0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801dbf2:	697b      	ldr	r3, [r7, #20]
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d102      	bne.n	801dbfe <tcp_output+0x96>
    return ERR_RTE;
 801dbf8:	f06f 0303 	mvn.w	r3, #3
 801dbfc:	e1a3      	b.n	801df46 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801dbfe:	687b      	ldr	r3, [r7, #4]
 801dc00:	2b00      	cmp	r3, #0
 801dc02:	d003      	beq.n	801dc0c <tcp_output+0xa4>
 801dc04:	687b      	ldr	r3, [r7, #4]
 801dc06:	681b      	ldr	r3, [r3, #0]
 801dc08:	2b00      	cmp	r3, #0
 801dc0a:	d111      	bne.n	801dc30 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801dc0c:	697b      	ldr	r3, [r7, #20]
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	d002      	beq.n	801dc18 <tcp_output+0xb0>
 801dc12:	697b      	ldr	r3, [r7, #20]
 801dc14:	3304      	adds	r3, #4
 801dc16:	e000      	b.n	801dc1a <tcp_output+0xb2>
 801dc18:	2300      	movs	r3, #0
 801dc1a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801dc1c:	693b      	ldr	r3, [r7, #16]
 801dc1e:	2b00      	cmp	r3, #0
 801dc20:	d102      	bne.n	801dc28 <tcp_output+0xc0>
      return ERR_RTE;
 801dc22:	f06f 0303 	mvn.w	r3, #3
 801dc26:	e18e      	b.n	801df46 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801dc28:	693b      	ldr	r3, [r7, #16]
 801dc2a:	681a      	ldr	r2, [r3, #0]
 801dc2c:	687b      	ldr	r3, [r7, #4]
 801dc2e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801dc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc32:	68db      	ldr	r3, [r3, #12]
 801dc34:	685b      	ldr	r3, [r3, #4]
 801dc36:	4618      	mov	r0, r3
 801dc38:	f7f8 ff57 	bl	8016aea <lwip_htonl>
 801dc3c:	4602      	mov	r2, r0
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dc42:	1ad3      	subs	r3, r2, r3
 801dc44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dc46:	8912      	ldrh	r2, [r2, #8]
 801dc48:	4413      	add	r3, r2
 801dc4a:	69ba      	ldr	r2, [r7, #24]
 801dc4c:	429a      	cmp	r2, r3
 801dc4e:	d227      	bcs.n	801dca0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801dc56:	461a      	mov	r2, r3
 801dc58:	69bb      	ldr	r3, [r7, #24]
 801dc5a:	4293      	cmp	r3, r2
 801dc5c:	d114      	bne.n	801dc88 <tcp_output+0x120>
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dc62:	2b00      	cmp	r3, #0
 801dc64:	d110      	bne.n	801dc88 <tcp_output+0x120>
 801dc66:	687b      	ldr	r3, [r7, #4]
 801dc68:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	d10b      	bne.n	801dc88 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	2200      	movs	r2, #0
 801dc74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	2201      	movs	r2, #1
 801dc7c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	2200      	movs	r2, #0
 801dc84:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801dc88:	687b      	ldr	r3, [r7, #4]
 801dc8a:	8b5b      	ldrh	r3, [r3, #26]
 801dc8c:	f003 0302 	and.w	r3, r3, #2
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	f000 814d 	beq.w	801df30 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801dc96:	6878      	ldr	r0, [r7, #4]
 801dc98:	f000 fd6c 	bl	801e774 <tcp_send_empty_ack>
 801dc9c:	4603      	mov	r3, r0
 801dc9e:	e152      	b.n	801df46 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801dca0:	687b      	ldr	r3, [r7, #4]
 801dca2:	2200      	movs	r2, #0
 801dca4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801dca8:	687b      	ldr	r3, [r7, #4]
 801dcaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dcac:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801dcae:	6a3b      	ldr	r3, [r7, #32]
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	f000 811c 	beq.w	801deee <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801dcb6:	e002      	b.n	801dcbe <tcp_output+0x156>
 801dcb8:	6a3b      	ldr	r3, [r7, #32]
 801dcba:	681b      	ldr	r3, [r3, #0]
 801dcbc:	623b      	str	r3, [r7, #32]
 801dcbe:	6a3b      	ldr	r3, [r7, #32]
 801dcc0:	681b      	ldr	r3, [r3, #0]
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	d1f8      	bne.n	801dcb8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801dcc6:	e112      	b.n	801deee <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801dcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcca:	68db      	ldr	r3, [r3, #12]
 801dccc:	899b      	ldrh	r3, [r3, #12]
 801dcce:	b29b      	uxth	r3, r3
 801dcd0:	4618      	mov	r0, r3
 801dcd2:	f7f8 fef5 	bl	8016ac0 <lwip_htons>
 801dcd6:	4603      	mov	r3, r0
 801dcd8:	b2db      	uxtb	r3, r3
 801dcda:	f003 0304 	and.w	r3, r3, #4
 801dcde:	2b00      	cmp	r3, #0
 801dce0:	d006      	beq.n	801dcf0 <tcp_output+0x188>
 801dce2:	4b2f      	ldr	r3, [pc, #188]	; (801dda0 <tcp_output+0x238>)
 801dce4:	f240 5236 	movw	r2, #1334	; 0x536
 801dce8:	4932      	ldr	r1, [pc, #200]	; (801ddb4 <tcp_output+0x24c>)
 801dcea:	482f      	ldr	r0, [pc, #188]	; (801dda8 <tcp_output+0x240>)
 801dcec:	f004 fb28 	bl	8022340 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801dcf0:	687b      	ldr	r3, [r7, #4]
 801dcf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dcf4:	2b00      	cmp	r3, #0
 801dcf6:	d01f      	beq.n	801dd38 <tcp_output+0x1d0>
 801dcf8:	687b      	ldr	r3, [r7, #4]
 801dcfa:	8b5b      	ldrh	r3, [r3, #26]
 801dcfc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801dd00:	2b00      	cmp	r3, #0
 801dd02:	d119      	bne.n	801dd38 <tcp_output+0x1d0>
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	d00b      	beq.n	801dd24 <tcp_output+0x1bc>
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dd10:	681b      	ldr	r3, [r3, #0]
 801dd12:	2b00      	cmp	r3, #0
 801dd14:	d110      	bne.n	801dd38 <tcp_output+0x1d0>
 801dd16:	687b      	ldr	r3, [r7, #4]
 801dd18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dd1a:	891a      	ldrh	r2, [r3, #8]
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dd20:	429a      	cmp	r2, r3
 801dd22:	d209      	bcs.n	801dd38 <tcp_output+0x1d0>
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801dd2a:	2b00      	cmp	r3, #0
 801dd2c:	d004      	beq.n	801dd38 <tcp_output+0x1d0>
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dd34:	2b08      	cmp	r3, #8
 801dd36:	d901      	bls.n	801dd3c <tcp_output+0x1d4>
 801dd38:	2301      	movs	r3, #1
 801dd3a:	e000      	b.n	801dd3e <tcp_output+0x1d6>
 801dd3c:	2300      	movs	r3, #0
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d106      	bne.n	801dd50 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801dd42:	687b      	ldr	r3, [r7, #4]
 801dd44:	8b5b      	ldrh	r3, [r3, #26]
 801dd46:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	f000 80e4 	beq.w	801df18 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801dd50:	687b      	ldr	r3, [r7, #4]
 801dd52:	7d1b      	ldrb	r3, [r3, #20]
 801dd54:	2b02      	cmp	r3, #2
 801dd56:	d00d      	beq.n	801dd74 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801dd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd5a:	68db      	ldr	r3, [r3, #12]
 801dd5c:	899b      	ldrh	r3, [r3, #12]
 801dd5e:	b29c      	uxth	r4, r3
 801dd60:	2010      	movs	r0, #16
 801dd62:	f7f8 fead 	bl	8016ac0 <lwip_htons>
 801dd66:	4603      	mov	r3, r0
 801dd68:	461a      	mov	r2, r3
 801dd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd6c:	68db      	ldr	r3, [r3, #12]
 801dd6e:	4322      	orrs	r2, r4
 801dd70:	b292      	uxth	r2, r2
 801dd72:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801dd74:	697a      	ldr	r2, [r7, #20]
 801dd76:	6879      	ldr	r1, [r7, #4]
 801dd78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dd7a:	f000 f909 	bl	801df90 <tcp_output_segment>
 801dd7e:	4603      	mov	r3, r0
 801dd80:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801dd82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	d016      	beq.n	801ddb8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dd8a:	687b      	ldr	r3, [r7, #4]
 801dd8c:	8b5b      	ldrh	r3, [r3, #26]
 801dd8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dd92:	b29a      	uxth	r2, r3
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	835a      	strh	r2, [r3, #26]
      return err;
 801dd98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dd9c:	e0d3      	b.n	801df46 <tcp_output+0x3de>
 801dd9e:	bf00      	nop
 801dda0:	08025a78 	.word	0x08025a78
 801dda4:	08025fbc 	.word	0x08025fbc
 801dda8:	08025acc 	.word	0x08025acc
 801ddac:	08025fd4 	.word	0x08025fd4
 801ddb0:	2002f030 	.word	0x2002f030
 801ddb4:	08025ffc 	.word	0x08025ffc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801ddb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddba:	681a      	ldr	r2, [r3, #0]
 801ddbc:	687b      	ldr	r3, [r7, #4]
 801ddbe:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	7d1b      	ldrb	r3, [r3, #20]
 801ddc4:	2b02      	cmp	r3, #2
 801ddc6:	d006      	beq.n	801ddd6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ddc8:	687b      	ldr	r3, [r7, #4]
 801ddca:	8b5b      	ldrh	r3, [r3, #26]
 801ddcc:	f023 0303 	bic.w	r3, r3, #3
 801ddd0:	b29a      	uxth	r2, r3
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ddd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddd8:	68db      	ldr	r3, [r3, #12]
 801ddda:	685b      	ldr	r3, [r3, #4]
 801dddc:	4618      	mov	r0, r3
 801ddde:	f7f8 fe84 	bl	8016aea <lwip_htonl>
 801dde2:	4604      	mov	r4, r0
 801dde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dde6:	891b      	ldrh	r3, [r3, #8]
 801dde8:	461d      	mov	r5, r3
 801ddea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddec:	68db      	ldr	r3, [r3, #12]
 801ddee:	899b      	ldrh	r3, [r3, #12]
 801ddf0:	b29b      	uxth	r3, r3
 801ddf2:	4618      	mov	r0, r3
 801ddf4:	f7f8 fe64 	bl	8016ac0 <lwip_htons>
 801ddf8:	4603      	mov	r3, r0
 801ddfa:	b2db      	uxtb	r3, r3
 801ddfc:	f003 0303 	and.w	r3, r3, #3
 801de00:	2b00      	cmp	r3, #0
 801de02:	d001      	beq.n	801de08 <tcp_output+0x2a0>
 801de04:	2301      	movs	r3, #1
 801de06:	e000      	b.n	801de0a <tcp_output+0x2a2>
 801de08:	2300      	movs	r3, #0
 801de0a:	442b      	add	r3, r5
 801de0c:	4423      	add	r3, r4
 801de0e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801de10:	687b      	ldr	r3, [r7, #4]
 801de12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801de14:	68bb      	ldr	r3, [r7, #8]
 801de16:	1ad3      	subs	r3, r2, r3
 801de18:	2b00      	cmp	r3, #0
 801de1a:	da02      	bge.n	801de22 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801de1c:	687b      	ldr	r3, [r7, #4]
 801de1e:	68ba      	ldr	r2, [r7, #8]
 801de20:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801de22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de24:	891b      	ldrh	r3, [r3, #8]
 801de26:	461c      	mov	r4, r3
 801de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de2a:	68db      	ldr	r3, [r3, #12]
 801de2c:	899b      	ldrh	r3, [r3, #12]
 801de2e:	b29b      	uxth	r3, r3
 801de30:	4618      	mov	r0, r3
 801de32:	f7f8 fe45 	bl	8016ac0 <lwip_htons>
 801de36:	4603      	mov	r3, r0
 801de38:	b2db      	uxtb	r3, r3
 801de3a:	f003 0303 	and.w	r3, r3, #3
 801de3e:	2b00      	cmp	r3, #0
 801de40:	d001      	beq.n	801de46 <tcp_output+0x2de>
 801de42:	2301      	movs	r3, #1
 801de44:	e000      	b.n	801de48 <tcp_output+0x2e0>
 801de46:	2300      	movs	r3, #0
 801de48:	4423      	add	r3, r4
 801de4a:	2b00      	cmp	r3, #0
 801de4c:	d049      	beq.n	801dee2 <tcp_output+0x37a>
      seg->next = NULL;
 801de4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de50:	2200      	movs	r2, #0
 801de52:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801de54:	687b      	ldr	r3, [r7, #4]
 801de56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801de58:	2b00      	cmp	r3, #0
 801de5a:	d105      	bne.n	801de68 <tcp_output+0x300>
        pcb->unacked = seg;
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801de60:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801de62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de64:	623b      	str	r3, [r7, #32]
 801de66:	e03f      	b.n	801dee8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801de68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de6a:	68db      	ldr	r3, [r3, #12]
 801de6c:	685b      	ldr	r3, [r3, #4]
 801de6e:	4618      	mov	r0, r3
 801de70:	f7f8 fe3b 	bl	8016aea <lwip_htonl>
 801de74:	4604      	mov	r4, r0
 801de76:	6a3b      	ldr	r3, [r7, #32]
 801de78:	68db      	ldr	r3, [r3, #12]
 801de7a:	685b      	ldr	r3, [r3, #4]
 801de7c:	4618      	mov	r0, r3
 801de7e:	f7f8 fe34 	bl	8016aea <lwip_htonl>
 801de82:	4603      	mov	r3, r0
 801de84:	1ae3      	subs	r3, r4, r3
 801de86:	2b00      	cmp	r3, #0
 801de88:	da24      	bge.n	801ded4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801de8a:	687b      	ldr	r3, [r7, #4]
 801de8c:	3370      	adds	r3, #112	; 0x70
 801de8e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801de90:	e002      	b.n	801de98 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801de92:	69fb      	ldr	r3, [r7, #28]
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801de98:	69fb      	ldr	r3, [r7, #28]
 801de9a:	681b      	ldr	r3, [r3, #0]
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	d011      	beq.n	801dec4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801dea0:	69fb      	ldr	r3, [r7, #28]
 801dea2:	681b      	ldr	r3, [r3, #0]
 801dea4:	68db      	ldr	r3, [r3, #12]
 801dea6:	685b      	ldr	r3, [r3, #4]
 801dea8:	4618      	mov	r0, r3
 801deaa:	f7f8 fe1e 	bl	8016aea <lwip_htonl>
 801deae:	4604      	mov	r4, r0
 801deb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801deb2:	68db      	ldr	r3, [r3, #12]
 801deb4:	685b      	ldr	r3, [r3, #4]
 801deb6:	4618      	mov	r0, r3
 801deb8:	f7f8 fe17 	bl	8016aea <lwip_htonl>
 801debc:	4603      	mov	r3, r0
 801debe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801dec0:	2b00      	cmp	r3, #0
 801dec2:	dbe6      	blt.n	801de92 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801dec4:	69fb      	ldr	r3, [r7, #28]
 801dec6:	681a      	ldr	r2, [r3, #0]
 801dec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801deca:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801decc:	69fb      	ldr	r3, [r7, #28]
 801dece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ded0:	601a      	str	r2, [r3, #0]
 801ded2:	e009      	b.n	801dee8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801ded4:	6a3b      	ldr	r3, [r7, #32]
 801ded6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ded8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801deda:	6a3b      	ldr	r3, [r7, #32]
 801dedc:	681b      	ldr	r3, [r3, #0]
 801dede:	623b      	str	r3, [r7, #32]
 801dee0:	e002      	b.n	801dee8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801dee2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dee4:	f7fb ff19 	bl	8019d1a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801dee8:	687b      	ldr	r3, [r7, #4]
 801deea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801deec:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801deee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801def0:	2b00      	cmp	r3, #0
 801def2:	d012      	beq.n	801df1a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801def4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801def6:	68db      	ldr	r3, [r3, #12]
 801def8:	685b      	ldr	r3, [r3, #4]
 801defa:	4618      	mov	r0, r3
 801defc:	f7f8 fdf5 	bl	8016aea <lwip_htonl>
 801df00:	4602      	mov	r2, r0
 801df02:	687b      	ldr	r3, [r7, #4]
 801df04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801df06:	1ad3      	subs	r3, r2, r3
 801df08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801df0a:	8912      	ldrh	r2, [r2, #8]
 801df0c:	4413      	add	r3, r2
  while (seg != NULL &&
 801df0e:	69ba      	ldr	r2, [r7, #24]
 801df10:	429a      	cmp	r2, r3
 801df12:	f4bf aed9 	bcs.w	801dcc8 <tcp_output+0x160>
 801df16:	e000      	b.n	801df1a <tcp_output+0x3b2>
      break;
 801df18:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801df1a:	687b      	ldr	r3, [r7, #4]
 801df1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801df1e:	2b00      	cmp	r3, #0
 801df20:	d108      	bne.n	801df34 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801df22:	687b      	ldr	r3, [r7, #4]
 801df24:	2200      	movs	r2, #0
 801df26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801df2a:	e004      	b.n	801df36 <tcp_output+0x3ce>
    goto output_done;
 801df2c:	bf00      	nop
 801df2e:	e002      	b.n	801df36 <tcp_output+0x3ce>
    goto output_done;
 801df30:	bf00      	nop
 801df32:	e000      	b.n	801df36 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801df34:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	8b5b      	ldrh	r3, [r3, #26]
 801df3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801df3e:	b29a      	uxth	r2, r3
 801df40:	687b      	ldr	r3, [r7, #4]
 801df42:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801df44:	2300      	movs	r3, #0
}
 801df46:	4618      	mov	r0, r3
 801df48:	3728      	adds	r7, #40	; 0x28
 801df4a:	46bd      	mov	sp, r7
 801df4c:	bdb0      	pop	{r4, r5, r7, pc}
 801df4e:	bf00      	nop

0801df50 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801df50:	b580      	push	{r7, lr}
 801df52:	b082      	sub	sp, #8
 801df54:	af00      	add	r7, sp, #0
 801df56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801df58:	687b      	ldr	r3, [r7, #4]
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	d106      	bne.n	801df6c <tcp_output_segment_busy+0x1c>
 801df5e:	4b09      	ldr	r3, [pc, #36]	; (801df84 <tcp_output_segment_busy+0x34>)
 801df60:	f240 529a 	movw	r2, #1434	; 0x59a
 801df64:	4908      	ldr	r1, [pc, #32]	; (801df88 <tcp_output_segment_busy+0x38>)
 801df66:	4809      	ldr	r0, [pc, #36]	; (801df8c <tcp_output_segment_busy+0x3c>)
 801df68:	f004 f9ea 	bl	8022340 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	685b      	ldr	r3, [r3, #4]
 801df70:	7b9b      	ldrb	r3, [r3, #14]
 801df72:	2b01      	cmp	r3, #1
 801df74:	d001      	beq.n	801df7a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801df76:	2301      	movs	r3, #1
 801df78:	e000      	b.n	801df7c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801df7a:	2300      	movs	r3, #0
}
 801df7c:	4618      	mov	r0, r3
 801df7e:	3708      	adds	r7, #8
 801df80:	46bd      	mov	sp, r7
 801df82:	bd80      	pop	{r7, pc}
 801df84:	08025a78 	.word	0x08025a78
 801df88:	08026014 	.word	0x08026014
 801df8c:	08025acc 	.word	0x08025acc

0801df90 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801df90:	b5b0      	push	{r4, r5, r7, lr}
 801df92:	b08c      	sub	sp, #48	; 0x30
 801df94:	af04      	add	r7, sp, #16
 801df96:	60f8      	str	r0, [r7, #12]
 801df98:	60b9      	str	r1, [r7, #8]
 801df9a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801df9c:	68fb      	ldr	r3, [r7, #12]
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	d106      	bne.n	801dfb0 <tcp_output_segment+0x20>
 801dfa2:	4b64      	ldr	r3, [pc, #400]	; (801e134 <tcp_output_segment+0x1a4>)
 801dfa4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801dfa8:	4963      	ldr	r1, [pc, #396]	; (801e138 <tcp_output_segment+0x1a8>)
 801dfaa:	4864      	ldr	r0, [pc, #400]	; (801e13c <tcp_output_segment+0x1ac>)
 801dfac:	f004 f9c8 	bl	8022340 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801dfb0:	68bb      	ldr	r3, [r7, #8]
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	d106      	bne.n	801dfc4 <tcp_output_segment+0x34>
 801dfb6:	4b5f      	ldr	r3, [pc, #380]	; (801e134 <tcp_output_segment+0x1a4>)
 801dfb8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801dfbc:	4960      	ldr	r1, [pc, #384]	; (801e140 <tcp_output_segment+0x1b0>)
 801dfbe:	485f      	ldr	r0, [pc, #380]	; (801e13c <tcp_output_segment+0x1ac>)
 801dfc0:	f004 f9be 	bl	8022340 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	2b00      	cmp	r3, #0
 801dfc8:	d106      	bne.n	801dfd8 <tcp_output_segment+0x48>
 801dfca:	4b5a      	ldr	r3, [pc, #360]	; (801e134 <tcp_output_segment+0x1a4>)
 801dfcc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801dfd0:	495c      	ldr	r1, [pc, #368]	; (801e144 <tcp_output_segment+0x1b4>)
 801dfd2:	485a      	ldr	r0, [pc, #360]	; (801e13c <tcp_output_segment+0x1ac>)
 801dfd4:	f004 f9b4 	bl	8022340 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801dfd8:	68f8      	ldr	r0, [r7, #12]
 801dfda:	f7ff ffb9 	bl	801df50 <tcp_output_segment_busy>
 801dfde:	4603      	mov	r3, r0
 801dfe0:	2b00      	cmp	r3, #0
 801dfe2:	d001      	beq.n	801dfe8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801dfe4:	2300      	movs	r3, #0
 801dfe6:	e0a1      	b.n	801e12c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801dfe8:	68bb      	ldr	r3, [r7, #8]
 801dfea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801dfec:	68fb      	ldr	r3, [r7, #12]
 801dfee:	68dc      	ldr	r4, [r3, #12]
 801dff0:	4610      	mov	r0, r2
 801dff2:	f7f8 fd7a 	bl	8016aea <lwip_htonl>
 801dff6:	4603      	mov	r3, r0
 801dff8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801dffa:	68bb      	ldr	r3, [r7, #8]
 801dffc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801dffe:	68fb      	ldr	r3, [r7, #12]
 801e000:	68dc      	ldr	r4, [r3, #12]
 801e002:	4610      	mov	r0, r2
 801e004:	f7f8 fd5c 	bl	8016ac0 <lwip_htons>
 801e008:	4603      	mov	r3, r0
 801e00a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e00c:	68bb      	ldr	r3, [r7, #8]
 801e00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e010:	68ba      	ldr	r2, [r7, #8]
 801e012:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801e014:	441a      	add	r2, r3
 801e016:	68bb      	ldr	r3, [r7, #8]
 801e018:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801e01a:	68fb      	ldr	r3, [r7, #12]
 801e01c:	68db      	ldr	r3, [r3, #12]
 801e01e:	3314      	adds	r3, #20
 801e020:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801e022:	68fb      	ldr	r3, [r7, #12]
 801e024:	7a9b      	ldrb	r3, [r3, #10]
 801e026:	f003 0301 	and.w	r3, r3, #1
 801e02a:	2b00      	cmp	r3, #0
 801e02c:	d015      	beq.n	801e05a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801e02e:	68bb      	ldr	r3, [r7, #8]
 801e030:	3304      	adds	r3, #4
 801e032:	461a      	mov	r2, r3
 801e034:	6879      	ldr	r1, [r7, #4]
 801e036:	f44f 7006 	mov.w	r0, #536	; 0x218
 801e03a:	f7fc fa33 	bl	801a4a4 <tcp_eff_send_mss_netif>
 801e03e:	4603      	mov	r3, r0
 801e040:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801e042:	8b7b      	ldrh	r3, [r7, #26]
 801e044:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801e048:	4618      	mov	r0, r3
 801e04a:	f7f8 fd4e 	bl	8016aea <lwip_htonl>
 801e04e:	4602      	mov	r2, r0
 801e050:	69fb      	ldr	r3, [r7, #28]
 801e052:	601a      	str	r2, [r3, #0]
    opts += 1;
 801e054:	69fb      	ldr	r3, [r7, #28]
 801e056:	3304      	adds	r3, #4
 801e058:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801e05a:	68bb      	ldr	r3, [r7, #8]
 801e05c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801e060:	2b00      	cmp	r3, #0
 801e062:	da02      	bge.n	801e06a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801e064:	68bb      	ldr	r3, [r7, #8]
 801e066:	2200      	movs	r2, #0
 801e068:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801e06a:	68bb      	ldr	r3, [r7, #8]
 801e06c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e06e:	2b00      	cmp	r3, #0
 801e070:	d10c      	bne.n	801e08c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801e072:	4b35      	ldr	r3, [pc, #212]	; (801e148 <tcp_output_segment+0x1b8>)
 801e074:	681a      	ldr	r2, [r3, #0]
 801e076:	68bb      	ldr	r3, [r7, #8]
 801e078:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801e07a:	68fb      	ldr	r3, [r7, #12]
 801e07c:	68db      	ldr	r3, [r3, #12]
 801e07e:	685b      	ldr	r3, [r3, #4]
 801e080:	4618      	mov	r0, r3
 801e082:	f7f8 fd32 	bl	8016aea <lwip_htonl>
 801e086:	4602      	mov	r2, r0
 801e088:	68bb      	ldr	r3, [r7, #8]
 801e08a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e08c:	68fb      	ldr	r3, [r7, #12]
 801e08e:	68da      	ldr	r2, [r3, #12]
 801e090:	68fb      	ldr	r3, [r7, #12]
 801e092:	685b      	ldr	r3, [r3, #4]
 801e094:	685b      	ldr	r3, [r3, #4]
 801e096:	1ad3      	subs	r3, r2, r3
 801e098:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801e09a:	68fb      	ldr	r3, [r7, #12]
 801e09c:	685b      	ldr	r3, [r3, #4]
 801e09e:	8959      	ldrh	r1, [r3, #10]
 801e0a0:	68fb      	ldr	r3, [r7, #12]
 801e0a2:	685b      	ldr	r3, [r3, #4]
 801e0a4:	8b3a      	ldrh	r2, [r7, #24]
 801e0a6:	1a8a      	subs	r2, r1, r2
 801e0a8:	b292      	uxth	r2, r2
 801e0aa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801e0ac:	68fb      	ldr	r3, [r7, #12]
 801e0ae:	685b      	ldr	r3, [r3, #4]
 801e0b0:	8919      	ldrh	r1, [r3, #8]
 801e0b2:	68fb      	ldr	r3, [r7, #12]
 801e0b4:	685b      	ldr	r3, [r3, #4]
 801e0b6:	8b3a      	ldrh	r2, [r7, #24]
 801e0b8:	1a8a      	subs	r2, r1, r2
 801e0ba:	b292      	uxth	r2, r2
 801e0bc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801e0be:	68fb      	ldr	r3, [r7, #12]
 801e0c0:	685b      	ldr	r3, [r3, #4]
 801e0c2:	68fa      	ldr	r2, [r7, #12]
 801e0c4:	68d2      	ldr	r2, [r2, #12]
 801e0c6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801e0c8:	68fb      	ldr	r3, [r7, #12]
 801e0ca:	68db      	ldr	r3, [r3, #12]
 801e0cc:	2200      	movs	r2, #0
 801e0ce:	741a      	strb	r2, [r3, #16]
 801e0d0:	2200      	movs	r2, #0
 801e0d2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801e0d4:	68fb      	ldr	r3, [r7, #12]
 801e0d6:	68da      	ldr	r2, [r3, #12]
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	7a9b      	ldrb	r3, [r3, #10]
 801e0dc:	f003 0301 	and.w	r3, r3, #1
 801e0e0:	2b00      	cmp	r3, #0
 801e0e2:	d001      	beq.n	801e0e8 <tcp_output_segment+0x158>
 801e0e4:	2318      	movs	r3, #24
 801e0e6:	e000      	b.n	801e0ea <tcp_output_segment+0x15a>
 801e0e8:	2314      	movs	r3, #20
 801e0ea:	4413      	add	r3, r2
 801e0ec:	69fa      	ldr	r2, [r7, #28]
 801e0ee:	429a      	cmp	r2, r3
 801e0f0:	d006      	beq.n	801e100 <tcp_output_segment+0x170>
 801e0f2:	4b10      	ldr	r3, [pc, #64]	; (801e134 <tcp_output_segment+0x1a4>)
 801e0f4:	f240 621c 	movw	r2, #1564	; 0x61c
 801e0f8:	4914      	ldr	r1, [pc, #80]	; (801e14c <tcp_output_segment+0x1bc>)
 801e0fa:	4810      	ldr	r0, [pc, #64]	; (801e13c <tcp_output_segment+0x1ac>)
 801e0fc:	f004 f920 	bl	8022340 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801e100:	68fb      	ldr	r3, [r7, #12]
 801e102:	6858      	ldr	r0, [r3, #4]
 801e104:	68b9      	ldr	r1, [r7, #8]
 801e106:	68bb      	ldr	r3, [r7, #8]
 801e108:	1d1c      	adds	r4, r3, #4
 801e10a:	68bb      	ldr	r3, [r7, #8]
 801e10c:	7add      	ldrb	r5, [r3, #11]
 801e10e:	68bb      	ldr	r3, [r7, #8]
 801e110:	7a9b      	ldrb	r3, [r3, #10]
 801e112:	687a      	ldr	r2, [r7, #4]
 801e114:	9202      	str	r2, [sp, #8]
 801e116:	2206      	movs	r2, #6
 801e118:	9201      	str	r2, [sp, #4]
 801e11a:	9300      	str	r3, [sp, #0]
 801e11c:	462b      	mov	r3, r5
 801e11e:	4622      	mov	r2, r4
 801e120:	f002 fbd0 	bl	80208c4 <ip4_output_if>
 801e124:	4603      	mov	r3, r0
 801e126:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801e128:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801e12c:	4618      	mov	r0, r3
 801e12e:	3720      	adds	r7, #32
 801e130:	46bd      	mov	sp, r7
 801e132:	bdb0      	pop	{r4, r5, r7, pc}
 801e134:	08025a78 	.word	0x08025a78
 801e138:	0802603c 	.word	0x0802603c
 801e13c:	08025acc 	.word	0x08025acc
 801e140:	0802605c 	.word	0x0802605c
 801e144:	0802607c 	.word	0x0802607c
 801e148:	2002efe4 	.word	0x2002efe4
 801e14c:	080260a0 	.word	0x080260a0

0801e150 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801e150:	b5b0      	push	{r4, r5, r7, lr}
 801e152:	b084      	sub	sp, #16
 801e154:	af00      	add	r7, sp, #0
 801e156:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	2b00      	cmp	r3, #0
 801e15c:	d106      	bne.n	801e16c <tcp_rexmit_rto_prepare+0x1c>
 801e15e:	4b31      	ldr	r3, [pc, #196]	; (801e224 <tcp_rexmit_rto_prepare+0xd4>)
 801e160:	f240 6263 	movw	r2, #1635	; 0x663
 801e164:	4930      	ldr	r1, [pc, #192]	; (801e228 <tcp_rexmit_rto_prepare+0xd8>)
 801e166:	4831      	ldr	r0, [pc, #196]	; (801e22c <tcp_rexmit_rto_prepare+0xdc>)
 801e168:	f004 f8ea 	bl	8022340 <iprintf>

  if (pcb->unacked == NULL) {
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e170:	2b00      	cmp	r3, #0
 801e172:	d102      	bne.n	801e17a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801e174:	f06f 0305 	mvn.w	r3, #5
 801e178:	e050      	b.n	801e21c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e17e:	60fb      	str	r3, [r7, #12]
 801e180:	e00b      	b.n	801e19a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801e182:	68f8      	ldr	r0, [r7, #12]
 801e184:	f7ff fee4 	bl	801df50 <tcp_output_segment_busy>
 801e188:	4603      	mov	r3, r0
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	d002      	beq.n	801e194 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801e18e:	f06f 0305 	mvn.w	r3, #5
 801e192:	e043      	b.n	801e21c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e194:	68fb      	ldr	r3, [r7, #12]
 801e196:	681b      	ldr	r3, [r3, #0]
 801e198:	60fb      	str	r3, [r7, #12]
 801e19a:	68fb      	ldr	r3, [r7, #12]
 801e19c:	681b      	ldr	r3, [r3, #0]
 801e19e:	2b00      	cmp	r3, #0
 801e1a0:	d1ef      	bne.n	801e182 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801e1a2:	68f8      	ldr	r0, [r7, #12]
 801e1a4:	f7ff fed4 	bl	801df50 <tcp_output_segment_busy>
 801e1a8:	4603      	mov	r3, r0
 801e1aa:	2b00      	cmp	r3, #0
 801e1ac:	d002      	beq.n	801e1b4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801e1ae:	f06f 0305 	mvn.w	r3, #5
 801e1b2:	e033      	b.n	801e21c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801e1b8:	68fb      	ldr	r3, [r7, #12]
 801e1ba:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	2200      	movs	r2, #0
 801e1c8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801e1ca:	687b      	ldr	r3, [r7, #4]
 801e1cc:	8b5b      	ldrh	r3, [r3, #26]
 801e1ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801e1d2:	b29a      	uxth	r2, r3
 801e1d4:	687b      	ldr	r3, [r7, #4]
 801e1d6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e1d8:	68fb      	ldr	r3, [r7, #12]
 801e1da:	68db      	ldr	r3, [r3, #12]
 801e1dc:	685b      	ldr	r3, [r3, #4]
 801e1de:	4618      	mov	r0, r3
 801e1e0:	f7f8 fc83 	bl	8016aea <lwip_htonl>
 801e1e4:	4604      	mov	r4, r0
 801e1e6:	68fb      	ldr	r3, [r7, #12]
 801e1e8:	891b      	ldrh	r3, [r3, #8]
 801e1ea:	461d      	mov	r5, r3
 801e1ec:	68fb      	ldr	r3, [r7, #12]
 801e1ee:	68db      	ldr	r3, [r3, #12]
 801e1f0:	899b      	ldrh	r3, [r3, #12]
 801e1f2:	b29b      	uxth	r3, r3
 801e1f4:	4618      	mov	r0, r3
 801e1f6:	f7f8 fc63 	bl	8016ac0 <lwip_htons>
 801e1fa:	4603      	mov	r3, r0
 801e1fc:	b2db      	uxtb	r3, r3
 801e1fe:	f003 0303 	and.w	r3, r3, #3
 801e202:	2b00      	cmp	r3, #0
 801e204:	d001      	beq.n	801e20a <tcp_rexmit_rto_prepare+0xba>
 801e206:	2301      	movs	r3, #1
 801e208:	e000      	b.n	801e20c <tcp_rexmit_rto_prepare+0xbc>
 801e20a:	2300      	movs	r3, #0
 801e20c:	442b      	add	r3, r5
 801e20e:	18e2      	adds	r2, r4, r3
 801e210:	687b      	ldr	r3, [r7, #4]
 801e212:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801e214:	687b      	ldr	r3, [r7, #4]
 801e216:	2200      	movs	r2, #0
 801e218:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801e21a:	2300      	movs	r3, #0
}
 801e21c:	4618      	mov	r0, r3
 801e21e:	3710      	adds	r7, #16
 801e220:	46bd      	mov	sp, r7
 801e222:	bdb0      	pop	{r4, r5, r7, pc}
 801e224:	08025a78 	.word	0x08025a78
 801e228:	080260b4 	.word	0x080260b4
 801e22c:	08025acc 	.word	0x08025acc

0801e230 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801e230:	b580      	push	{r7, lr}
 801e232:	b082      	sub	sp, #8
 801e234:	af00      	add	r7, sp, #0
 801e236:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801e238:	687b      	ldr	r3, [r7, #4]
 801e23a:	2b00      	cmp	r3, #0
 801e23c:	d106      	bne.n	801e24c <tcp_rexmit_rto_commit+0x1c>
 801e23e:	4b0d      	ldr	r3, [pc, #52]	; (801e274 <tcp_rexmit_rto_commit+0x44>)
 801e240:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801e244:	490c      	ldr	r1, [pc, #48]	; (801e278 <tcp_rexmit_rto_commit+0x48>)
 801e246:	480d      	ldr	r0, [pc, #52]	; (801e27c <tcp_rexmit_rto_commit+0x4c>)
 801e248:	f004 f87a 	bl	8022340 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e252:	2bff      	cmp	r3, #255	; 0xff
 801e254:	d007      	beq.n	801e266 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e25c:	3301      	adds	r3, #1
 801e25e:	b2da      	uxtb	r2, r3
 801e260:	687b      	ldr	r3, [r7, #4]
 801e262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801e266:	6878      	ldr	r0, [r7, #4]
 801e268:	f7ff fc7e 	bl	801db68 <tcp_output>
}
 801e26c:	bf00      	nop
 801e26e:	3708      	adds	r7, #8
 801e270:	46bd      	mov	sp, r7
 801e272:	bd80      	pop	{r7, pc}
 801e274:	08025a78 	.word	0x08025a78
 801e278:	080260d8 	.word	0x080260d8
 801e27c:	08025acc 	.word	0x08025acc

0801e280 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801e280:	b580      	push	{r7, lr}
 801e282:	b082      	sub	sp, #8
 801e284:	af00      	add	r7, sp, #0
 801e286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801e288:	687b      	ldr	r3, [r7, #4]
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	d106      	bne.n	801e29c <tcp_rexmit_rto+0x1c>
 801e28e:	4b0a      	ldr	r3, [pc, #40]	; (801e2b8 <tcp_rexmit_rto+0x38>)
 801e290:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801e294:	4909      	ldr	r1, [pc, #36]	; (801e2bc <tcp_rexmit_rto+0x3c>)
 801e296:	480a      	ldr	r0, [pc, #40]	; (801e2c0 <tcp_rexmit_rto+0x40>)
 801e298:	f004 f852 	bl	8022340 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801e29c:	6878      	ldr	r0, [r7, #4]
 801e29e:	f7ff ff57 	bl	801e150 <tcp_rexmit_rto_prepare>
 801e2a2:	4603      	mov	r3, r0
 801e2a4:	2b00      	cmp	r3, #0
 801e2a6:	d102      	bne.n	801e2ae <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801e2a8:	6878      	ldr	r0, [r7, #4]
 801e2aa:	f7ff ffc1 	bl	801e230 <tcp_rexmit_rto_commit>
  }
}
 801e2ae:	bf00      	nop
 801e2b0:	3708      	adds	r7, #8
 801e2b2:	46bd      	mov	sp, r7
 801e2b4:	bd80      	pop	{r7, pc}
 801e2b6:	bf00      	nop
 801e2b8:	08025a78 	.word	0x08025a78
 801e2bc:	080260fc 	.word	0x080260fc
 801e2c0:	08025acc 	.word	0x08025acc

0801e2c4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801e2c4:	b590      	push	{r4, r7, lr}
 801e2c6:	b085      	sub	sp, #20
 801e2c8:	af00      	add	r7, sp, #0
 801e2ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801e2cc:	687b      	ldr	r3, [r7, #4]
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	d106      	bne.n	801e2e0 <tcp_rexmit+0x1c>
 801e2d2:	4b2f      	ldr	r3, [pc, #188]	; (801e390 <tcp_rexmit+0xcc>)
 801e2d4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801e2d8:	492e      	ldr	r1, [pc, #184]	; (801e394 <tcp_rexmit+0xd0>)
 801e2da:	482f      	ldr	r0, [pc, #188]	; (801e398 <tcp_rexmit+0xd4>)
 801e2dc:	f004 f830 	bl	8022340 <iprintf>

  if (pcb->unacked == NULL) {
 801e2e0:	687b      	ldr	r3, [r7, #4]
 801e2e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e2e4:	2b00      	cmp	r3, #0
 801e2e6:	d102      	bne.n	801e2ee <tcp_rexmit+0x2a>
    return ERR_VAL;
 801e2e8:	f06f 0305 	mvn.w	r3, #5
 801e2ec:	e04c      	b.n	801e388 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801e2ee:	687b      	ldr	r3, [r7, #4]
 801e2f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e2f2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801e2f4:	68b8      	ldr	r0, [r7, #8]
 801e2f6:	f7ff fe2b 	bl	801df50 <tcp_output_segment_busy>
 801e2fa:	4603      	mov	r3, r0
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	d002      	beq.n	801e306 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801e300:	f06f 0305 	mvn.w	r3, #5
 801e304:	e040      	b.n	801e388 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801e306:	68bb      	ldr	r3, [r7, #8]
 801e308:	681a      	ldr	r2, [r3, #0]
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801e30e:	687b      	ldr	r3, [r7, #4]
 801e310:	336c      	adds	r3, #108	; 0x6c
 801e312:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801e314:	e002      	b.n	801e31c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801e316:	68fb      	ldr	r3, [r7, #12]
 801e318:	681b      	ldr	r3, [r3, #0]
 801e31a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801e31c:	68fb      	ldr	r3, [r7, #12]
 801e31e:	681b      	ldr	r3, [r3, #0]
 801e320:	2b00      	cmp	r3, #0
 801e322:	d011      	beq.n	801e348 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e324:	68fb      	ldr	r3, [r7, #12]
 801e326:	681b      	ldr	r3, [r3, #0]
 801e328:	68db      	ldr	r3, [r3, #12]
 801e32a:	685b      	ldr	r3, [r3, #4]
 801e32c:	4618      	mov	r0, r3
 801e32e:	f7f8 fbdc 	bl	8016aea <lwip_htonl>
 801e332:	4604      	mov	r4, r0
 801e334:	68bb      	ldr	r3, [r7, #8]
 801e336:	68db      	ldr	r3, [r3, #12]
 801e338:	685b      	ldr	r3, [r3, #4]
 801e33a:	4618      	mov	r0, r3
 801e33c:	f7f8 fbd5 	bl	8016aea <lwip_htonl>
 801e340:	4603      	mov	r3, r0
 801e342:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801e344:	2b00      	cmp	r3, #0
 801e346:	dbe6      	blt.n	801e316 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801e348:	68fb      	ldr	r3, [r7, #12]
 801e34a:	681a      	ldr	r2, [r3, #0]
 801e34c:	68bb      	ldr	r3, [r7, #8]
 801e34e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801e350:	68fb      	ldr	r3, [r7, #12]
 801e352:	68ba      	ldr	r2, [r7, #8]
 801e354:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801e356:	68bb      	ldr	r3, [r7, #8]
 801e358:	681b      	ldr	r3, [r3, #0]
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	d103      	bne.n	801e366 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801e35e:	687b      	ldr	r3, [r7, #4]
 801e360:	2200      	movs	r2, #0
 801e362:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e36c:	2bff      	cmp	r3, #255	; 0xff
 801e36e:	d007      	beq.n	801e380 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801e370:	687b      	ldr	r3, [r7, #4]
 801e372:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e376:	3301      	adds	r3, #1
 801e378:	b2da      	uxtb	r2, r3
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801e380:	687b      	ldr	r3, [r7, #4]
 801e382:	2200      	movs	r2, #0
 801e384:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801e386:	2300      	movs	r3, #0
}
 801e388:	4618      	mov	r0, r3
 801e38a:	3714      	adds	r7, #20
 801e38c:	46bd      	mov	sp, r7
 801e38e:	bd90      	pop	{r4, r7, pc}
 801e390:	08025a78 	.word	0x08025a78
 801e394:	08026118 	.word	0x08026118
 801e398:	08025acc 	.word	0x08025acc

0801e39c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801e39c:	b580      	push	{r7, lr}
 801e39e:	b082      	sub	sp, #8
 801e3a0:	af00      	add	r7, sp, #0
 801e3a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	2b00      	cmp	r3, #0
 801e3a8:	d106      	bne.n	801e3b8 <tcp_rexmit_fast+0x1c>
 801e3aa:	4b2a      	ldr	r3, [pc, #168]	; (801e454 <tcp_rexmit_fast+0xb8>)
 801e3ac:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801e3b0:	4929      	ldr	r1, [pc, #164]	; (801e458 <tcp_rexmit_fast+0xbc>)
 801e3b2:	482a      	ldr	r0, [pc, #168]	; (801e45c <tcp_rexmit_fast+0xc0>)
 801e3b4:	f003 ffc4 	bl	8022340 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801e3b8:	687b      	ldr	r3, [r7, #4]
 801e3ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e3bc:	2b00      	cmp	r3, #0
 801e3be:	d044      	beq.n	801e44a <tcp_rexmit_fast+0xae>
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	8b5b      	ldrh	r3, [r3, #26]
 801e3c4:	f003 0304 	and.w	r3, r3, #4
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d13e      	bne.n	801e44a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801e3cc:	6878      	ldr	r0, [r7, #4]
 801e3ce:	f7ff ff79 	bl	801e2c4 <tcp_rexmit>
 801e3d2:	4603      	mov	r3, r0
 801e3d4:	2b00      	cmp	r3, #0
 801e3d6:	d138      	bne.n	801e44a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801e3d8:	687b      	ldr	r3, [r7, #4]
 801e3da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801e3de:	687b      	ldr	r3, [r7, #4]
 801e3e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801e3e4:	4293      	cmp	r3, r2
 801e3e6:	bf28      	it	cs
 801e3e8:	4613      	movcs	r3, r2
 801e3ea:	b29b      	uxth	r3, r3
 801e3ec:	0fda      	lsrs	r2, r3, #31
 801e3ee:	4413      	add	r3, r2
 801e3f0:	105b      	asrs	r3, r3, #1
 801e3f2:	b29a      	uxth	r2, r3
 801e3f4:	687b      	ldr	r3, [r7, #4]
 801e3f6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801e3fa:	687b      	ldr	r3, [r7, #4]
 801e3fc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801e400:	461a      	mov	r2, r3
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e406:	005b      	lsls	r3, r3, #1
 801e408:	429a      	cmp	r2, r3
 801e40a:	d206      	bcs.n	801e41a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801e40c:	687b      	ldr	r3, [r7, #4]
 801e40e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e410:	005b      	lsls	r3, r3, #1
 801e412:	b29a      	uxth	r2, r3
 801e414:	687b      	ldr	r3, [r7, #4]
 801e416:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e424:	4619      	mov	r1, r3
 801e426:	0049      	lsls	r1, r1, #1
 801e428:	440b      	add	r3, r1
 801e42a:	b29b      	uxth	r3, r3
 801e42c:	4413      	add	r3, r2
 801e42e:	b29a      	uxth	r2, r3
 801e430:	687b      	ldr	r3, [r7, #4]
 801e432:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	8b5b      	ldrh	r3, [r3, #26]
 801e43a:	f043 0304 	orr.w	r3, r3, #4
 801e43e:	b29a      	uxth	r2, r3
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801e444:	687b      	ldr	r3, [r7, #4]
 801e446:	2200      	movs	r2, #0
 801e448:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801e44a:	bf00      	nop
 801e44c:	3708      	adds	r7, #8
 801e44e:	46bd      	mov	sp, r7
 801e450:	bd80      	pop	{r7, pc}
 801e452:	bf00      	nop
 801e454:	08025a78 	.word	0x08025a78
 801e458:	08026130 	.word	0x08026130
 801e45c:	08025acc 	.word	0x08025acc

0801e460 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801e460:	b580      	push	{r7, lr}
 801e462:	b086      	sub	sp, #24
 801e464:	af00      	add	r7, sp, #0
 801e466:	60f8      	str	r0, [r7, #12]
 801e468:	607b      	str	r3, [r7, #4]
 801e46a:	460b      	mov	r3, r1
 801e46c:	817b      	strh	r3, [r7, #10]
 801e46e:	4613      	mov	r3, r2
 801e470:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e472:	897a      	ldrh	r2, [r7, #10]
 801e474:	893b      	ldrh	r3, [r7, #8]
 801e476:	4413      	add	r3, r2
 801e478:	b29b      	uxth	r3, r3
 801e47a:	3314      	adds	r3, #20
 801e47c:	b29b      	uxth	r3, r3
 801e47e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e482:	4619      	mov	r1, r3
 801e484:	2022      	movs	r0, #34	; 0x22
 801e486:	f7f9 fce1 	bl	8017e4c <pbuf_alloc>
 801e48a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801e48c:	697b      	ldr	r3, [r7, #20]
 801e48e:	2b00      	cmp	r3, #0
 801e490:	d04d      	beq.n	801e52e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801e492:	897b      	ldrh	r3, [r7, #10]
 801e494:	3313      	adds	r3, #19
 801e496:	697a      	ldr	r2, [r7, #20]
 801e498:	8952      	ldrh	r2, [r2, #10]
 801e49a:	4293      	cmp	r3, r2
 801e49c:	db06      	blt.n	801e4ac <tcp_output_alloc_header_common+0x4c>
 801e49e:	4b26      	ldr	r3, [pc, #152]	; (801e538 <tcp_output_alloc_header_common+0xd8>)
 801e4a0:	f240 7223 	movw	r2, #1827	; 0x723
 801e4a4:	4925      	ldr	r1, [pc, #148]	; (801e53c <tcp_output_alloc_header_common+0xdc>)
 801e4a6:	4826      	ldr	r0, [pc, #152]	; (801e540 <tcp_output_alloc_header_common+0xe0>)
 801e4a8:	f003 ff4a 	bl	8022340 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801e4ac:	697b      	ldr	r3, [r7, #20]
 801e4ae:	685b      	ldr	r3, [r3, #4]
 801e4b0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801e4b2:	8c3b      	ldrh	r3, [r7, #32]
 801e4b4:	4618      	mov	r0, r3
 801e4b6:	f7f8 fb03 	bl	8016ac0 <lwip_htons>
 801e4ba:	4603      	mov	r3, r0
 801e4bc:	461a      	mov	r2, r3
 801e4be:	693b      	ldr	r3, [r7, #16]
 801e4c0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801e4c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e4c4:	4618      	mov	r0, r3
 801e4c6:	f7f8 fafb 	bl	8016ac0 <lwip_htons>
 801e4ca:	4603      	mov	r3, r0
 801e4cc:	461a      	mov	r2, r3
 801e4ce:	693b      	ldr	r3, [r7, #16]
 801e4d0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801e4d2:	693b      	ldr	r3, [r7, #16]
 801e4d4:	687a      	ldr	r2, [r7, #4]
 801e4d6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801e4d8:	68f8      	ldr	r0, [r7, #12]
 801e4da:	f7f8 fb06 	bl	8016aea <lwip_htonl>
 801e4de:	4602      	mov	r2, r0
 801e4e0:	693b      	ldr	r3, [r7, #16]
 801e4e2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801e4e4:	897b      	ldrh	r3, [r7, #10]
 801e4e6:	089b      	lsrs	r3, r3, #2
 801e4e8:	b29b      	uxth	r3, r3
 801e4ea:	3305      	adds	r3, #5
 801e4ec:	b29b      	uxth	r3, r3
 801e4ee:	031b      	lsls	r3, r3, #12
 801e4f0:	b29a      	uxth	r2, r3
 801e4f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801e4f6:	b29b      	uxth	r3, r3
 801e4f8:	4313      	orrs	r3, r2
 801e4fa:	b29b      	uxth	r3, r3
 801e4fc:	4618      	mov	r0, r3
 801e4fe:	f7f8 fadf 	bl	8016ac0 <lwip_htons>
 801e502:	4603      	mov	r3, r0
 801e504:	461a      	mov	r2, r3
 801e506:	693b      	ldr	r3, [r7, #16]
 801e508:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801e50a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e50c:	4618      	mov	r0, r3
 801e50e:	f7f8 fad7 	bl	8016ac0 <lwip_htons>
 801e512:	4603      	mov	r3, r0
 801e514:	461a      	mov	r2, r3
 801e516:	693b      	ldr	r3, [r7, #16]
 801e518:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801e51a:	693b      	ldr	r3, [r7, #16]
 801e51c:	2200      	movs	r2, #0
 801e51e:	741a      	strb	r2, [r3, #16]
 801e520:	2200      	movs	r2, #0
 801e522:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801e524:	693b      	ldr	r3, [r7, #16]
 801e526:	2200      	movs	r2, #0
 801e528:	749a      	strb	r2, [r3, #18]
 801e52a:	2200      	movs	r2, #0
 801e52c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801e52e:	697b      	ldr	r3, [r7, #20]
}
 801e530:	4618      	mov	r0, r3
 801e532:	3718      	adds	r7, #24
 801e534:	46bd      	mov	sp, r7
 801e536:	bd80      	pop	{r7, pc}
 801e538:	08025a78 	.word	0x08025a78
 801e53c:	08026150 	.word	0x08026150
 801e540:	08025acc 	.word	0x08025acc

0801e544 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801e544:	b5b0      	push	{r4, r5, r7, lr}
 801e546:	b08a      	sub	sp, #40	; 0x28
 801e548:	af04      	add	r7, sp, #16
 801e54a:	60f8      	str	r0, [r7, #12]
 801e54c:	607b      	str	r3, [r7, #4]
 801e54e:	460b      	mov	r3, r1
 801e550:	817b      	strh	r3, [r7, #10]
 801e552:	4613      	mov	r3, r2
 801e554:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801e556:	68fb      	ldr	r3, [r7, #12]
 801e558:	2b00      	cmp	r3, #0
 801e55a:	d106      	bne.n	801e56a <tcp_output_alloc_header+0x26>
 801e55c:	4b15      	ldr	r3, [pc, #84]	; (801e5b4 <tcp_output_alloc_header+0x70>)
 801e55e:	f240 7242 	movw	r2, #1858	; 0x742
 801e562:	4915      	ldr	r1, [pc, #84]	; (801e5b8 <tcp_output_alloc_header+0x74>)
 801e564:	4815      	ldr	r0, [pc, #84]	; (801e5bc <tcp_output_alloc_header+0x78>)
 801e566:	f003 feeb 	bl	8022340 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801e56a:	68fb      	ldr	r3, [r7, #12]
 801e56c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801e56e:	68fb      	ldr	r3, [r7, #12]
 801e570:	8adb      	ldrh	r3, [r3, #22]
 801e572:	68fa      	ldr	r2, [r7, #12]
 801e574:	8b12      	ldrh	r2, [r2, #24]
 801e576:	68f9      	ldr	r1, [r7, #12]
 801e578:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801e57a:	893d      	ldrh	r5, [r7, #8]
 801e57c:	897c      	ldrh	r4, [r7, #10]
 801e57e:	9103      	str	r1, [sp, #12]
 801e580:	2110      	movs	r1, #16
 801e582:	9102      	str	r1, [sp, #8]
 801e584:	9201      	str	r2, [sp, #4]
 801e586:	9300      	str	r3, [sp, #0]
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	462a      	mov	r2, r5
 801e58c:	4621      	mov	r1, r4
 801e58e:	f7ff ff67 	bl	801e460 <tcp_output_alloc_header_common>
 801e592:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801e594:	697b      	ldr	r3, [r7, #20]
 801e596:	2b00      	cmp	r3, #0
 801e598:	d006      	beq.n	801e5a8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e59a:	68fb      	ldr	r3, [r7, #12]
 801e59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e59e:	68fa      	ldr	r2, [r7, #12]
 801e5a0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801e5a2:	441a      	add	r2, r3
 801e5a4:	68fb      	ldr	r3, [r7, #12]
 801e5a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801e5a8:	697b      	ldr	r3, [r7, #20]
}
 801e5aa:	4618      	mov	r0, r3
 801e5ac:	3718      	adds	r7, #24
 801e5ae:	46bd      	mov	sp, r7
 801e5b0:	bdb0      	pop	{r4, r5, r7, pc}
 801e5b2:	bf00      	nop
 801e5b4:	08025a78 	.word	0x08025a78
 801e5b8:	08026180 	.word	0x08026180
 801e5bc:	08025acc 	.word	0x08025acc

0801e5c0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801e5c0:	b580      	push	{r7, lr}
 801e5c2:	b088      	sub	sp, #32
 801e5c4:	af00      	add	r7, sp, #0
 801e5c6:	60f8      	str	r0, [r7, #12]
 801e5c8:	60b9      	str	r1, [r7, #8]
 801e5ca:	4611      	mov	r1, r2
 801e5cc:	461a      	mov	r2, r3
 801e5ce:	460b      	mov	r3, r1
 801e5d0:	71fb      	strb	r3, [r7, #7]
 801e5d2:	4613      	mov	r3, r2
 801e5d4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801e5d6:	2300      	movs	r3, #0
 801e5d8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801e5da:	68bb      	ldr	r3, [r7, #8]
 801e5dc:	2b00      	cmp	r3, #0
 801e5de:	d106      	bne.n	801e5ee <tcp_output_fill_options+0x2e>
 801e5e0:	4b12      	ldr	r3, [pc, #72]	; (801e62c <tcp_output_fill_options+0x6c>)
 801e5e2:	f240 7256 	movw	r2, #1878	; 0x756
 801e5e6:	4912      	ldr	r1, [pc, #72]	; (801e630 <tcp_output_fill_options+0x70>)
 801e5e8:	4812      	ldr	r0, [pc, #72]	; (801e634 <tcp_output_fill_options+0x74>)
 801e5ea:	f003 fea9 	bl	8022340 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801e5ee:	68bb      	ldr	r3, [r7, #8]
 801e5f0:	685b      	ldr	r3, [r3, #4]
 801e5f2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801e5f4:	69bb      	ldr	r3, [r7, #24]
 801e5f6:	3314      	adds	r3, #20
 801e5f8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801e5fa:	8bfb      	ldrh	r3, [r7, #30]
 801e5fc:	009b      	lsls	r3, r3, #2
 801e5fe:	461a      	mov	r2, r3
 801e600:	79fb      	ldrb	r3, [r7, #7]
 801e602:	009b      	lsls	r3, r3, #2
 801e604:	f003 0304 	and.w	r3, r3, #4
 801e608:	4413      	add	r3, r2
 801e60a:	3314      	adds	r3, #20
 801e60c:	69ba      	ldr	r2, [r7, #24]
 801e60e:	4413      	add	r3, r2
 801e610:	697a      	ldr	r2, [r7, #20]
 801e612:	429a      	cmp	r2, r3
 801e614:	d006      	beq.n	801e624 <tcp_output_fill_options+0x64>
 801e616:	4b05      	ldr	r3, [pc, #20]	; (801e62c <tcp_output_fill_options+0x6c>)
 801e618:	f240 7275 	movw	r2, #1909	; 0x775
 801e61c:	4906      	ldr	r1, [pc, #24]	; (801e638 <tcp_output_fill_options+0x78>)
 801e61e:	4805      	ldr	r0, [pc, #20]	; (801e634 <tcp_output_fill_options+0x74>)
 801e620:	f003 fe8e 	bl	8022340 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801e624:	bf00      	nop
 801e626:	3720      	adds	r7, #32
 801e628:	46bd      	mov	sp, r7
 801e62a:	bd80      	pop	{r7, pc}
 801e62c:	08025a78 	.word	0x08025a78
 801e630:	080261a8 	.word	0x080261a8
 801e634:	08025acc 	.word	0x08025acc
 801e638:	080260a0 	.word	0x080260a0

0801e63c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801e63c:	b580      	push	{r7, lr}
 801e63e:	b08a      	sub	sp, #40	; 0x28
 801e640:	af04      	add	r7, sp, #16
 801e642:	60f8      	str	r0, [r7, #12]
 801e644:	60b9      	str	r1, [r7, #8]
 801e646:	607a      	str	r2, [r7, #4]
 801e648:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801e64a:	68bb      	ldr	r3, [r7, #8]
 801e64c:	2b00      	cmp	r3, #0
 801e64e:	d106      	bne.n	801e65e <tcp_output_control_segment+0x22>
 801e650:	4b1c      	ldr	r3, [pc, #112]	; (801e6c4 <tcp_output_control_segment+0x88>)
 801e652:	f240 7287 	movw	r2, #1927	; 0x787
 801e656:	491c      	ldr	r1, [pc, #112]	; (801e6c8 <tcp_output_control_segment+0x8c>)
 801e658:	481c      	ldr	r0, [pc, #112]	; (801e6cc <tcp_output_control_segment+0x90>)
 801e65a:	f003 fe71 	bl	8022340 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801e65e:	683a      	ldr	r2, [r7, #0]
 801e660:	6879      	ldr	r1, [r7, #4]
 801e662:	68f8      	ldr	r0, [r7, #12]
 801e664:	f7fe fae8 	bl	801cc38 <tcp_route>
 801e668:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801e66a:	693b      	ldr	r3, [r7, #16]
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d102      	bne.n	801e676 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801e670:	23fc      	movs	r3, #252	; 0xfc
 801e672:	75fb      	strb	r3, [r7, #23]
 801e674:	e01c      	b.n	801e6b0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801e676:	68fb      	ldr	r3, [r7, #12]
 801e678:	2b00      	cmp	r3, #0
 801e67a:	d006      	beq.n	801e68a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801e67c:	68fb      	ldr	r3, [r7, #12]
 801e67e:	7adb      	ldrb	r3, [r3, #11]
 801e680:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801e682:	68fb      	ldr	r3, [r7, #12]
 801e684:	7a9b      	ldrb	r3, [r3, #10]
 801e686:	757b      	strb	r3, [r7, #21]
 801e688:	e003      	b.n	801e692 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801e68a:	23ff      	movs	r3, #255	; 0xff
 801e68c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801e68e:	2300      	movs	r3, #0
 801e690:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801e692:	7dba      	ldrb	r2, [r7, #22]
 801e694:	693b      	ldr	r3, [r7, #16]
 801e696:	9302      	str	r3, [sp, #8]
 801e698:	2306      	movs	r3, #6
 801e69a:	9301      	str	r3, [sp, #4]
 801e69c:	7d7b      	ldrb	r3, [r7, #21]
 801e69e:	9300      	str	r3, [sp, #0]
 801e6a0:	4613      	mov	r3, r2
 801e6a2:	683a      	ldr	r2, [r7, #0]
 801e6a4:	6879      	ldr	r1, [r7, #4]
 801e6a6:	68b8      	ldr	r0, [r7, #8]
 801e6a8:	f002 f90c 	bl	80208c4 <ip4_output_if>
 801e6ac:	4603      	mov	r3, r0
 801e6ae:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801e6b0:	68b8      	ldr	r0, [r7, #8]
 801e6b2:	f7f9 feaf 	bl	8018414 <pbuf_free>
  return err;
 801e6b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801e6ba:	4618      	mov	r0, r3
 801e6bc:	3718      	adds	r7, #24
 801e6be:	46bd      	mov	sp, r7
 801e6c0:	bd80      	pop	{r7, pc}
 801e6c2:	bf00      	nop
 801e6c4:	08025a78 	.word	0x08025a78
 801e6c8:	080261d0 	.word	0x080261d0
 801e6cc:	08025acc 	.word	0x08025acc

0801e6d0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801e6d0:	b590      	push	{r4, r7, lr}
 801e6d2:	b08b      	sub	sp, #44	; 0x2c
 801e6d4:	af04      	add	r7, sp, #16
 801e6d6:	60f8      	str	r0, [r7, #12]
 801e6d8:	60b9      	str	r1, [r7, #8]
 801e6da:	607a      	str	r2, [r7, #4]
 801e6dc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801e6de:	683b      	ldr	r3, [r7, #0]
 801e6e0:	2b00      	cmp	r3, #0
 801e6e2:	d106      	bne.n	801e6f2 <tcp_rst+0x22>
 801e6e4:	4b1f      	ldr	r3, [pc, #124]	; (801e764 <tcp_rst+0x94>)
 801e6e6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801e6ea:	491f      	ldr	r1, [pc, #124]	; (801e768 <tcp_rst+0x98>)
 801e6ec:	481f      	ldr	r0, [pc, #124]	; (801e76c <tcp_rst+0x9c>)
 801e6ee:	f003 fe27 	bl	8022340 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801e6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	d106      	bne.n	801e706 <tcp_rst+0x36>
 801e6f8:	4b1a      	ldr	r3, [pc, #104]	; (801e764 <tcp_rst+0x94>)
 801e6fa:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801e6fe:	491c      	ldr	r1, [pc, #112]	; (801e770 <tcp_rst+0xa0>)
 801e700:	481a      	ldr	r0, [pc, #104]	; (801e76c <tcp_rst+0x9c>)
 801e702:	f003 fe1d 	bl	8022340 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e706:	2300      	movs	r3, #0
 801e708:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801e70a:	f246 0308 	movw	r3, #24584	; 0x6008
 801e70e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801e710:	7dfb      	ldrb	r3, [r7, #23]
 801e712:	b29c      	uxth	r4, r3
 801e714:	68b8      	ldr	r0, [r7, #8]
 801e716:	f7f8 f9e8 	bl	8016aea <lwip_htonl>
 801e71a:	4602      	mov	r2, r0
 801e71c:	8abb      	ldrh	r3, [r7, #20]
 801e71e:	9303      	str	r3, [sp, #12]
 801e720:	2314      	movs	r3, #20
 801e722:	9302      	str	r3, [sp, #8]
 801e724:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801e726:	9301      	str	r3, [sp, #4]
 801e728:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e72a:	9300      	str	r3, [sp, #0]
 801e72c:	4613      	mov	r3, r2
 801e72e:	2200      	movs	r2, #0
 801e730:	4621      	mov	r1, r4
 801e732:	6878      	ldr	r0, [r7, #4]
 801e734:	f7ff fe94 	bl	801e460 <tcp_output_alloc_header_common>
 801e738:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801e73a:	693b      	ldr	r3, [r7, #16]
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	d00c      	beq.n	801e75a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801e740:	7dfb      	ldrb	r3, [r7, #23]
 801e742:	2200      	movs	r2, #0
 801e744:	6939      	ldr	r1, [r7, #16]
 801e746:	68f8      	ldr	r0, [r7, #12]
 801e748:	f7ff ff3a 	bl	801e5c0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801e74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e74e:	683a      	ldr	r2, [r7, #0]
 801e750:	6939      	ldr	r1, [r7, #16]
 801e752:	68f8      	ldr	r0, [r7, #12]
 801e754:	f7ff ff72 	bl	801e63c <tcp_output_control_segment>
 801e758:	e000      	b.n	801e75c <tcp_rst+0x8c>
    return;
 801e75a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801e75c:	371c      	adds	r7, #28
 801e75e:	46bd      	mov	sp, r7
 801e760:	bd90      	pop	{r4, r7, pc}
 801e762:	bf00      	nop
 801e764:	08025a78 	.word	0x08025a78
 801e768:	080261fc 	.word	0x080261fc
 801e76c:	08025acc 	.word	0x08025acc
 801e770:	08026218 	.word	0x08026218

0801e774 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801e774:	b590      	push	{r4, r7, lr}
 801e776:	b087      	sub	sp, #28
 801e778:	af00      	add	r7, sp, #0
 801e77a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801e77c:	2300      	movs	r3, #0
 801e77e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801e780:	2300      	movs	r3, #0
 801e782:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801e784:	687b      	ldr	r3, [r7, #4]
 801e786:	2b00      	cmp	r3, #0
 801e788:	d106      	bne.n	801e798 <tcp_send_empty_ack+0x24>
 801e78a:	4b28      	ldr	r3, [pc, #160]	; (801e82c <tcp_send_empty_ack+0xb8>)
 801e78c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801e790:	4927      	ldr	r1, [pc, #156]	; (801e830 <tcp_send_empty_ack+0xbc>)
 801e792:	4828      	ldr	r0, [pc, #160]	; (801e834 <tcp_send_empty_ack+0xc0>)
 801e794:	f003 fdd4 	bl	8022340 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e798:	7dfb      	ldrb	r3, [r7, #23]
 801e79a:	009b      	lsls	r3, r3, #2
 801e79c:	b2db      	uxtb	r3, r3
 801e79e:	f003 0304 	and.w	r3, r3, #4
 801e7a2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801e7a4:	7d7b      	ldrb	r3, [r7, #21]
 801e7a6:	b29c      	uxth	r4, r3
 801e7a8:	687b      	ldr	r3, [r7, #4]
 801e7aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e7ac:	4618      	mov	r0, r3
 801e7ae:	f7f8 f99c 	bl	8016aea <lwip_htonl>
 801e7b2:	4603      	mov	r3, r0
 801e7b4:	2200      	movs	r2, #0
 801e7b6:	4621      	mov	r1, r4
 801e7b8:	6878      	ldr	r0, [r7, #4]
 801e7ba:	f7ff fec3 	bl	801e544 <tcp_output_alloc_header>
 801e7be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e7c0:	693b      	ldr	r3, [r7, #16]
 801e7c2:	2b00      	cmp	r3, #0
 801e7c4:	d109      	bne.n	801e7da <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	8b5b      	ldrh	r3, [r3, #26]
 801e7ca:	f043 0303 	orr.w	r3, r3, #3
 801e7ce:	b29a      	uxth	r2, r3
 801e7d0:	687b      	ldr	r3, [r7, #4]
 801e7d2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801e7d4:	f06f 0301 	mvn.w	r3, #1
 801e7d8:	e023      	b.n	801e822 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801e7da:	7dbb      	ldrb	r3, [r7, #22]
 801e7dc:	7dfa      	ldrb	r2, [r7, #23]
 801e7de:	6939      	ldr	r1, [r7, #16]
 801e7e0:	6878      	ldr	r0, [r7, #4]
 801e7e2:	f7ff feed 	bl	801e5c0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e7e6:	687a      	ldr	r2, [r7, #4]
 801e7e8:	687b      	ldr	r3, [r7, #4]
 801e7ea:	3304      	adds	r3, #4
 801e7ec:	6939      	ldr	r1, [r7, #16]
 801e7ee:	6878      	ldr	r0, [r7, #4]
 801e7f0:	f7ff ff24 	bl	801e63c <tcp_output_control_segment>
 801e7f4:	4603      	mov	r3, r0
 801e7f6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801e7f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e7fc:	2b00      	cmp	r3, #0
 801e7fe:	d007      	beq.n	801e810 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e800:	687b      	ldr	r3, [r7, #4]
 801e802:	8b5b      	ldrh	r3, [r3, #26]
 801e804:	f043 0303 	orr.w	r3, r3, #3
 801e808:	b29a      	uxth	r2, r3
 801e80a:	687b      	ldr	r3, [r7, #4]
 801e80c:	835a      	strh	r2, [r3, #26]
 801e80e:	e006      	b.n	801e81e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e810:	687b      	ldr	r3, [r7, #4]
 801e812:	8b5b      	ldrh	r3, [r3, #26]
 801e814:	f023 0303 	bic.w	r3, r3, #3
 801e818:	b29a      	uxth	r2, r3
 801e81a:	687b      	ldr	r3, [r7, #4]
 801e81c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801e81e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e822:	4618      	mov	r0, r3
 801e824:	371c      	adds	r7, #28
 801e826:	46bd      	mov	sp, r7
 801e828:	bd90      	pop	{r4, r7, pc}
 801e82a:	bf00      	nop
 801e82c:	08025a78 	.word	0x08025a78
 801e830:	08026234 	.word	0x08026234
 801e834:	08025acc 	.word	0x08025acc

0801e838 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801e838:	b590      	push	{r4, r7, lr}
 801e83a:	b087      	sub	sp, #28
 801e83c:	af00      	add	r7, sp, #0
 801e83e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e840:	2300      	movs	r3, #0
 801e842:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801e844:	687b      	ldr	r3, [r7, #4]
 801e846:	2b00      	cmp	r3, #0
 801e848:	d106      	bne.n	801e858 <tcp_keepalive+0x20>
 801e84a:	4b18      	ldr	r3, [pc, #96]	; (801e8ac <tcp_keepalive+0x74>)
 801e84c:	f640 0224 	movw	r2, #2084	; 0x824
 801e850:	4917      	ldr	r1, [pc, #92]	; (801e8b0 <tcp_keepalive+0x78>)
 801e852:	4818      	ldr	r0, [pc, #96]	; (801e8b4 <tcp_keepalive+0x7c>)
 801e854:	f003 fd74 	bl	8022340 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801e858:	7dfb      	ldrb	r3, [r7, #23]
 801e85a:	b29c      	uxth	r4, r3
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e860:	3b01      	subs	r3, #1
 801e862:	4618      	mov	r0, r3
 801e864:	f7f8 f941 	bl	8016aea <lwip_htonl>
 801e868:	4603      	mov	r3, r0
 801e86a:	2200      	movs	r2, #0
 801e86c:	4621      	mov	r1, r4
 801e86e:	6878      	ldr	r0, [r7, #4]
 801e870:	f7ff fe68 	bl	801e544 <tcp_output_alloc_header>
 801e874:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e876:	693b      	ldr	r3, [r7, #16]
 801e878:	2b00      	cmp	r3, #0
 801e87a:	d102      	bne.n	801e882 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801e87c:	f04f 33ff 	mov.w	r3, #4294967295
 801e880:	e010      	b.n	801e8a4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801e882:	7dfb      	ldrb	r3, [r7, #23]
 801e884:	2200      	movs	r2, #0
 801e886:	6939      	ldr	r1, [r7, #16]
 801e888:	6878      	ldr	r0, [r7, #4]
 801e88a:	f7ff fe99 	bl	801e5c0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e88e:	687a      	ldr	r2, [r7, #4]
 801e890:	687b      	ldr	r3, [r7, #4]
 801e892:	3304      	adds	r3, #4
 801e894:	6939      	ldr	r1, [r7, #16]
 801e896:	6878      	ldr	r0, [r7, #4]
 801e898:	f7ff fed0 	bl	801e63c <tcp_output_control_segment>
 801e89c:	4603      	mov	r3, r0
 801e89e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801e8a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e8a4:	4618      	mov	r0, r3
 801e8a6:	371c      	adds	r7, #28
 801e8a8:	46bd      	mov	sp, r7
 801e8aa:	bd90      	pop	{r4, r7, pc}
 801e8ac:	08025a78 	.word	0x08025a78
 801e8b0:	08026254 	.word	0x08026254
 801e8b4:	08025acc 	.word	0x08025acc

0801e8b8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801e8b8:	b590      	push	{r4, r7, lr}
 801e8ba:	b08b      	sub	sp, #44	; 0x2c
 801e8bc:	af00      	add	r7, sp, #0
 801e8be:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e8c0:	2300      	movs	r3, #0
 801e8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801e8c6:	687b      	ldr	r3, [r7, #4]
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	d106      	bne.n	801e8da <tcp_zero_window_probe+0x22>
 801e8cc:	4b4c      	ldr	r3, [pc, #304]	; (801ea00 <tcp_zero_window_probe+0x148>)
 801e8ce:	f640 024f 	movw	r2, #2127	; 0x84f
 801e8d2:	494c      	ldr	r1, [pc, #304]	; (801ea04 <tcp_zero_window_probe+0x14c>)
 801e8d4:	484c      	ldr	r0, [pc, #304]	; (801ea08 <tcp_zero_window_probe+0x150>)
 801e8d6:	f003 fd33 	bl	8022340 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801e8da:	687b      	ldr	r3, [r7, #4]
 801e8dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e8de:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801e8e0:	6a3b      	ldr	r3, [r7, #32]
 801e8e2:	2b00      	cmp	r3, #0
 801e8e4:	d101      	bne.n	801e8ea <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801e8e6:	2300      	movs	r3, #0
 801e8e8:	e086      	b.n	801e9f8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801e8f0:	2bff      	cmp	r3, #255	; 0xff
 801e8f2:	d007      	beq.n	801e904 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801e8fa:	3301      	adds	r3, #1
 801e8fc:	b2da      	uxtb	r2, r3
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801e904:	6a3b      	ldr	r3, [r7, #32]
 801e906:	68db      	ldr	r3, [r3, #12]
 801e908:	899b      	ldrh	r3, [r3, #12]
 801e90a:	b29b      	uxth	r3, r3
 801e90c:	4618      	mov	r0, r3
 801e90e:	f7f8 f8d7 	bl	8016ac0 <lwip_htons>
 801e912:	4603      	mov	r3, r0
 801e914:	b2db      	uxtb	r3, r3
 801e916:	f003 0301 	and.w	r3, r3, #1
 801e91a:	2b00      	cmp	r3, #0
 801e91c:	d005      	beq.n	801e92a <tcp_zero_window_probe+0x72>
 801e91e:	6a3b      	ldr	r3, [r7, #32]
 801e920:	891b      	ldrh	r3, [r3, #8]
 801e922:	2b00      	cmp	r3, #0
 801e924:	d101      	bne.n	801e92a <tcp_zero_window_probe+0x72>
 801e926:	2301      	movs	r3, #1
 801e928:	e000      	b.n	801e92c <tcp_zero_window_probe+0x74>
 801e92a:	2300      	movs	r3, #0
 801e92c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801e92e:	7ffb      	ldrb	r3, [r7, #31]
 801e930:	2b00      	cmp	r3, #0
 801e932:	bf0c      	ite	eq
 801e934:	2301      	moveq	r3, #1
 801e936:	2300      	movne	r3, #0
 801e938:	b2db      	uxtb	r3, r3
 801e93a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801e93c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e940:	b299      	uxth	r1, r3
 801e942:	6a3b      	ldr	r3, [r7, #32]
 801e944:	68db      	ldr	r3, [r3, #12]
 801e946:	685b      	ldr	r3, [r3, #4]
 801e948:	8bba      	ldrh	r2, [r7, #28]
 801e94a:	6878      	ldr	r0, [r7, #4]
 801e94c:	f7ff fdfa 	bl	801e544 <tcp_output_alloc_header>
 801e950:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801e952:	69bb      	ldr	r3, [r7, #24]
 801e954:	2b00      	cmp	r3, #0
 801e956:	d102      	bne.n	801e95e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801e958:	f04f 33ff 	mov.w	r3, #4294967295
 801e95c:	e04c      	b.n	801e9f8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801e95e:	69bb      	ldr	r3, [r7, #24]
 801e960:	685b      	ldr	r3, [r3, #4]
 801e962:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801e964:	7ffb      	ldrb	r3, [r7, #31]
 801e966:	2b00      	cmp	r3, #0
 801e968:	d011      	beq.n	801e98e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801e96a:	697b      	ldr	r3, [r7, #20]
 801e96c:	899b      	ldrh	r3, [r3, #12]
 801e96e:	b29b      	uxth	r3, r3
 801e970:	b21b      	sxth	r3, r3
 801e972:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801e976:	b21c      	sxth	r4, r3
 801e978:	2011      	movs	r0, #17
 801e97a:	f7f8 f8a1 	bl	8016ac0 <lwip_htons>
 801e97e:	4603      	mov	r3, r0
 801e980:	b21b      	sxth	r3, r3
 801e982:	4323      	orrs	r3, r4
 801e984:	b21b      	sxth	r3, r3
 801e986:	b29a      	uxth	r2, r3
 801e988:	697b      	ldr	r3, [r7, #20]
 801e98a:	819a      	strh	r2, [r3, #12]
 801e98c:	e010      	b.n	801e9b0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801e98e:	69bb      	ldr	r3, [r7, #24]
 801e990:	685b      	ldr	r3, [r3, #4]
 801e992:	3314      	adds	r3, #20
 801e994:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801e996:	6a3b      	ldr	r3, [r7, #32]
 801e998:	6858      	ldr	r0, [r3, #4]
 801e99a:	6a3b      	ldr	r3, [r7, #32]
 801e99c:	685b      	ldr	r3, [r3, #4]
 801e99e:	891a      	ldrh	r2, [r3, #8]
 801e9a0:	6a3b      	ldr	r3, [r7, #32]
 801e9a2:	891b      	ldrh	r3, [r3, #8]
 801e9a4:	1ad3      	subs	r3, r2, r3
 801e9a6:	b29b      	uxth	r3, r3
 801e9a8:	2201      	movs	r2, #1
 801e9aa:	6939      	ldr	r1, [r7, #16]
 801e9ac:	f7f9 ff28 	bl	8018800 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801e9b0:	6a3b      	ldr	r3, [r7, #32]
 801e9b2:	68db      	ldr	r3, [r3, #12]
 801e9b4:	685b      	ldr	r3, [r3, #4]
 801e9b6:	4618      	mov	r0, r3
 801e9b8:	f7f8 f897 	bl	8016aea <lwip_htonl>
 801e9bc:	4603      	mov	r3, r0
 801e9be:	3301      	adds	r3, #1
 801e9c0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e9c2:	687b      	ldr	r3, [r7, #4]
 801e9c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e9c6:	68fb      	ldr	r3, [r7, #12]
 801e9c8:	1ad3      	subs	r3, r2, r3
 801e9ca:	2b00      	cmp	r3, #0
 801e9cc:	da02      	bge.n	801e9d4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801e9ce:	687b      	ldr	r3, [r7, #4]
 801e9d0:	68fa      	ldr	r2, [r7, #12]
 801e9d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801e9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e9d8:	2200      	movs	r2, #0
 801e9da:	69b9      	ldr	r1, [r7, #24]
 801e9dc:	6878      	ldr	r0, [r7, #4]
 801e9de:	f7ff fdef 	bl	801e5c0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e9e2:	687a      	ldr	r2, [r7, #4]
 801e9e4:	687b      	ldr	r3, [r7, #4]
 801e9e6:	3304      	adds	r3, #4
 801e9e8:	69b9      	ldr	r1, [r7, #24]
 801e9ea:	6878      	ldr	r0, [r7, #4]
 801e9ec:	f7ff fe26 	bl	801e63c <tcp_output_control_segment>
 801e9f0:	4603      	mov	r3, r0
 801e9f2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801e9f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801e9f8:	4618      	mov	r0, r3
 801e9fa:	372c      	adds	r7, #44	; 0x2c
 801e9fc:	46bd      	mov	sp, r7
 801e9fe:	bd90      	pop	{r4, r7, pc}
 801ea00:	08025a78 	.word	0x08025a78
 801ea04:	08026270 	.word	0x08026270
 801ea08:	08025acc 	.word	0x08025acc

0801ea0c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801ea0c:	b580      	push	{r7, lr}
 801ea0e:	b082      	sub	sp, #8
 801ea10:	af00      	add	r7, sp, #0
 801ea12:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801ea14:	f7f9 ffe2 	bl	80189dc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801ea18:	4b0a      	ldr	r3, [pc, #40]	; (801ea44 <tcpip_tcp_timer+0x38>)
 801ea1a:	681b      	ldr	r3, [r3, #0]
 801ea1c:	2b00      	cmp	r3, #0
 801ea1e:	d103      	bne.n	801ea28 <tcpip_tcp_timer+0x1c>
 801ea20:	4b09      	ldr	r3, [pc, #36]	; (801ea48 <tcpip_tcp_timer+0x3c>)
 801ea22:	681b      	ldr	r3, [r3, #0]
 801ea24:	2b00      	cmp	r3, #0
 801ea26:	d005      	beq.n	801ea34 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801ea28:	2200      	movs	r2, #0
 801ea2a:	4908      	ldr	r1, [pc, #32]	; (801ea4c <tcpip_tcp_timer+0x40>)
 801ea2c:	20fa      	movs	r0, #250	; 0xfa
 801ea2e:	f000 f8f3 	bl	801ec18 <sys_timeout>
 801ea32:	e003      	b.n	801ea3c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801ea34:	4b06      	ldr	r3, [pc, #24]	; (801ea50 <tcpip_tcp_timer+0x44>)
 801ea36:	2200      	movs	r2, #0
 801ea38:	601a      	str	r2, [r3, #0]
  }
}
 801ea3a:	bf00      	nop
 801ea3c:	bf00      	nop
 801ea3e:	3708      	adds	r7, #8
 801ea40:	46bd      	mov	sp, r7
 801ea42:	bd80      	pop	{r7, pc}
 801ea44:	2002eff0 	.word	0x2002eff0
 801ea48:	2002eff4 	.word	0x2002eff4
 801ea4c:	0801ea0d 	.word	0x0801ea0d
 801ea50:	2002f03c 	.word	0x2002f03c

0801ea54 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801ea54:	b580      	push	{r7, lr}
 801ea56:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801ea58:	4b0a      	ldr	r3, [pc, #40]	; (801ea84 <tcp_timer_needed+0x30>)
 801ea5a:	681b      	ldr	r3, [r3, #0]
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	d10f      	bne.n	801ea80 <tcp_timer_needed+0x2c>
 801ea60:	4b09      	ldr	r3, [pc, #36]	; (801ea88 <tcp_timer_needed+0x34>)
 801ea62:	681b      	ldr	r3, [r3, #0]
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	d103      	bne.n	801ea70 <tcp_timer_needed+0x1c>
 801ea68:	4b08      	ldr	r3, [pc, #32]	; (801ea8c <tcp_timer_needed+0x38>)
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	d007      	beq.n	801ea80 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801ea70:	4b04      	ldr	r3, [pc, #16]	; (801ea84 <tcp_timer_needed+0x30>)
 801ea72:	2201      	movs	r2, #1
 801ea74:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801ea76:	2200      	movs	r2, #0
 801ea78:	4905      	ldr	r1, [pc, #20]	; (801ea90 <tcp_timer_needed+0x3c>)
 801ea7a:	20fa      	movs	r0, #250	; 0xfa
 801ea7c:	f000 f8cc 	bl	801ec18 <sys_timeout>
  }
}
 801ea80:	bf00      	nop
 801ea82:	bd80      	pop	{r7, pc}
 801ea84:	2002f03c 	.word	0x2002f03c
 801ea88:	2002eff0 	.word	0x2002eff0
 801ea8c:	2002eff4 	.word	0x2002eff4
 801ea90:	0801ea0d 	.word	0x0801ea0d

0801ea94 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801ea94:	b580      	push	{r7, lr}
 801ea96:	b086      	sub	sp, #24
 801ea98:	af00      	add	r7, sp, #0
 801ea9a:	60f8      	str	r0, [r7, #12]
 801ea9c:	60b9      	str	r1, [r7, #8]
 801ea9e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801eaa0:	200a      	movs	r0, #10
 801eaa2:	f7f8 fd9d 	bl	80175e0 <memp_malloc>
 801eaa6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801eaa8:	693b      	ldr	r3, [r7, #16]
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	d109      	bne.n	801eac2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801eaae:	693b      	ldr	r3, [r7, #16]
 801eab0:	2b00      	cmp	r3, #0
 801eab2:	d151      	bne.n	801eb58 <sys_timeout_abs+0xc4>
 801eab4:	4b2a      	ldr	r3, [pc, #168]	; (801eb60 <sys_timeout_abs+0xcc>)
 801eab6:	22be      	movs	r2, #190	; 0xbe
 801eab8:	492a      	ldr	r1, [pc, #168]	; (801eb64 <sys_timeout_abs+0xd0>)
 801eaba:	482b      	ldr	r0, [pc, #172]	; (801eb68 <sys_timeout_abs+0xd4>)
 801eabc:	f003 fc40 	bl	8022340 <iprintf>
    return;
 801eac0:	e04a      	b.n	801eb58 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801eac2:	693b      	ldr	r3, [r7, #16]
 801eac4:	2200      	movs	r2, #0
 801eac6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801eac8:	693b      	ldr	r3, [r7, #16]
 801eaca:	68ba      	ldr	r2, [r7, #8]
 801eacc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801eace:	693b      	ldr	r3, [r7, #16]
 801ead0:	687a      	ldr	r2, [r7, #4]
 801ead2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801ead4:	693b      	ldr	r3, [r7, #16]
 801ead6:	68fa      	ldr	r2, [r7, #12]
 801ead8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801eada:	4b24      	ldr	r3, [pc, #144]	; (801eb6c <sys_timeout_abs+0xd8>)
 801eadc:	681b      	ldr	r3, [r3, #0]
 801eade:	2b00      	cmp	r3, #0
 801eae0:	d103      	bne.n	801eaea <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801eae2:	4a22      	ldr	r2, [pc, #136]	; (801eb6c <sys_timeout_abs+0xd8>)
 801eae4:	693b      	ldr	r3, [r7, #16]
 801eae6:	6013      	str	r3, [r2, #0]
    return;
 801eae8:	e037      	b.n	801eb5a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801eaea:	693b      	ldr	r3, [r7, #16]
 801eaec:	685a      	ldr	r2, [r3, #4]
 801eaee:	4b1f      	ldr	r3, [pc, #124]	; (801eb6c <sys_timeout_abs+0xd8>)
 801eaf0:	681b      	ldr	r3, [r3, #0]
 801eaf2:	685b      	ldr	r3, [r3, #4]
 801eaf4:	1ad3      	subs	r3, r2, r3
 801eaf6:	0fdb      	lsrs	r3, r3, #31
 801eaf8:	f003 0301 	and.w	r3, r3, #1
 801eafc:	b2db      	uxtb	r3, r3
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	d007      	beq.n	801eb12 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801eb02:	4b1a      	ldr	r3, [pc, #104]	; (801eb6c <sys_timeout_abs+0xd8>)
 801eb04:	681a      	ldr	r2, [r3, #0]
 801eb06:	693b      	ldr	r3, [r7, #16]
 801eb08:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801eb0a:	4a18      	ldr	r2, [pc, #96]	; (801eb6c <sys_timeout_abs+0xd8>)
 801eb0c:	693b      	ldr	r3, [r7, #16]
 801eb0e:	6013      	str	r3, [r2, #0]
 801eb10:	e023      	b.n	801eb5a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801eb12:	4b16      	ldr	r3, [pc, #88]	; (801eb6c <sys_timeout_abs+0xd8>)
 801eb14:	681b      	ldr	r3, [r3, #0]
 801eb16:	617b      	str	r3, [r7, #20]
 801eb18:	e01a      	b.n	801eb50 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801eb1a:	697b      	ldr	r3, [r7, #20]
 801eb1c:	681b      	ldr	r3, [r3, #0]
 801eb1e:	2b00      	cmp	r3, #0
 801eb20:	d00b      	beq.n	801eb3a <sys_timeout_abs+0xa6>
 801eb22:	693b      	ldr	r3, [r7, #16]
 801eb24:	685a      	ldr	r2, [r3, #4]
 801eb26:	697b      	ldr	r3, [r7, #20]
 801eb28:	681b      	ldr	r3, [r3, #0]
 801eb2a:	685b      	ldr	r3, [r3, #4]
 801eb2c:	1ad3      	subs	r3, r2, r3
 801eb2e:	0fdb      	lsrs	r3, r3, #31
 801eb30:	f003 0301 	and.w	r3, r3, #1
 801eb34:	b2db      	uxtb	r3, r3
 801eb36:	2b00      	cmp	r3, #0
 801eb38:	d007      	beq.n	801eb4a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801eb3a:	697b      	ldr	r3, [r7, #20]
 801eb3c:	681a      	ldr	r2, [r3, #0]
 801eb3e:	693b      	ldr	r3, [r7, #16]
 801eb40:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801eb42:	697b      	ldr	r3, [r7, #20]
 801eb44:	693a      	ldr	r2, [r7, #16]
 801eb46:	601a      	str	r2, [r3, #0]
        break;
 801eb48:	e007      	b.n	801eb5a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801eb4a:	697b      	ldr	r3, [r7, #20]
 801eb4c:	681b      	ldr	r3, [r3, #0]
 801eb4e:	617b      	str	r3, [r7, #20]
 801eb50:	697b      	ldr	r3, [r7, #20]
 801eb52:	2b00      	cmp	r3, #0
 801eb54:	d1e1      	bne.n	801eb1a <sys_timeout_abs+0x86>
 801eb56:	e000      	b.n	801eb5a <sys_timeout_abs+0xc6>
    return;
 801eb58:	bf00      	nop
      }
    }
  }
}
 801eb5a:	3718      	adds	r7, #24
 801eb5c:	46bd      	mov	sp, r7
 801eb5e:	bd80      	pop	{r7, pc}
 801eb60:	08026294 	.word	0x08026294
 801eb64:	080262c8 	.word	0x080262c8
 801eb68:	08026308 	.word	0x08026308
 801eb6c:	2002f034 	.word	0x2002f034

0801eb70 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801eb70:	b580      	push	{r7, lr}
 801eb72:	b086      	sub	sp, #24
 801eb74:	af00      	add	r7, sp, #0
 801eb76:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801eb78:	687b      	ldr	r3, [r7, #4]
 801eb7a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801eb7c:	697b      	ldr	r3, [r7, #20]
 801eb7e:	685b      	ldr	r3, [r3, #4]
 801eb80:	4798      	blx	r3

  now = sys_now();
 801eb82:	f7e2 ff87 	bl	8001a94 <sys_now>
 801eb86:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801eb88:	697b      	ldr	r3, [r7, #20]
 801eb8a:	681a      	ldr	r2, [r3, #0]
 801eb8c:	4b0f      	ldr	r3, [pc, #60]	; (801ebcc <lwip_cyclic_timer+0x5c>)
 801eb8e:	681b      	ldr	r3, [r3, #0]
 801eb90:	4413      	add	r3, r2
 801eb92:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801eb94:	68fa      	ldr	r2, [r7, #12]
 801eb96:	693b      	ldr	r3, [r7, #16]
 801eb98:	1ad3      	subs	r3, r2, r3
 801eb9a:	0fdb      	lsrs	r3, r3, #31
 801eb9c:	f003 0301 	and.w	r3, r3, #1
 801eba0:	b2db      	uxtb	r3, r3
 801eba2:	2b00      	cmp	r3, #0
 801eba4:	d009      	beq.n	801ebba <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801eba6:	697b      	ldr	r3, [r7, #20]
 801eba8:	681a      	ldr	r2, [r3, #0]
 801ebaa:	693b      	ldr	r3, [r7, #16]
 801ebac:	4413      	add	r3, r2
 801ebae:	687a      	ldr	r2, [r7, #4]
 801ebb0:	4907      	ldr	r1, [pc, #28]	; (801ebd0 <lwip_cyclic_timer+0x60>)
 801ebb2:	4618      	mov	r0, r3
 801ebb4:	f7ff ff6e 	bl	801ea94 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801ebb8:	e004      	b.n	801ebc4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801ebba:	687a      	ldr	r2, [r7, #4]
 801ebbc:	4904      	ldr	r1, [pc, #16]	; (801ebd0 <lwip_cyclic_timer+0x60>)
 801ebbe:	68f8      	ldr	r0, [r7, #12]
 801ebc0:	f7ff ff68 	bl	801ea94 <sys_timeout_abs>
}
 801ebc4:	bf00      	nop
 801ebc6:	3718      	adds	r7, #24
 801ebc8:	46bd      	mov	sp, r7
 801ebca:	bd80      	pop	{r7, pc}
 801ebcc:	2002f038 	.word	0x2002f038
 801ebd0:	0801eb71 	.word	0x0801eb71

0801ebd4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801ebd4:	b580      	push	{r7, lr}
 801ebd6:	b082      	sub	sp, #8
 801ebd8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ebda:	2301      	movs	r3, #1
 801ebdc:	607b      	str	r3, [r7, #4]
 801ebde:	e00e      	b.n	801ebfe <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801ebe0:	4a0b      	ldr	r2, [pc, #44]	; (801ec10 <sys_timeouts_init+0x3c>)
 801ebe2:	687b      	ldr	r3, [r7, #4]
 801ebe4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801ebe8:	687b      	ldr	r3, [r7, #4]
 801ebea:	00db      	lsls	r3, r3, #3
 801ebec:	4a08      	ldr	r2, [pc, #32]	; (801ec10 <sys_timeouts_init+0x3c>)
 801ebee:	4413      	add	r3, r2
 801ebf0:	461a      	mov	r2, r3
 801ebf2:	4908      	ldr	r1, [pc, #32]	; (801ec14 <sys_timeouts_init+0x40>)
 801ebf4:	f000 f810 	bl	801ec18 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	3301      	adds	r3, #1
 801ebfc:	607b      	str	r3, [r7, #4]
 801ebfe:	687b      	ldr	r3, [r7, #4]
 801ec00:	2b02      	cmp	r3, #2
 801ec02:	d9ed      	bls.n	801ebe0 <sys_timeouts_init+0xc>
  }
}
 801ec04:	bf00      	nop
 801ec06:	bf00      	nop
 801ec08:	3708      	adds	r7, #8
 801ec0a:	46bd      	mov	sp, r7
 801ec0c:	bd80      	pop	{r7, pc}
 801ec0e:	bf00      	nop
 801ec10:	080270ac 	.word	0x080270ac
 801ec14:	0801eb71 	.word	0x0801eb71

0801ec18 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801ec18:	b580      	push	{r7, lr}
 801ec1a:	b086      	sub	sp, #24
 801ec1c:	af00      	add	r7, sp, #0
 801ec1e:	60f8      	str	r0, [r7, #12]
 801ec20:	60b9      	str	r1, [r7, #8]
 801ec22:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ec24:	68fb      	ldr	r3, [r7, #12]
 801ec26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ec2a:	d306      	bcc.n	801ec3a <sys_timeout+0x22>
 801ec2c:	4b0a      	ldr	r3, [pc, #40]	; (801ec58 <sys_timeout+0x40>)
 801ec2e:	f240 1229 	movw	r2, #297	; 0x129
 801ec32:	490a      	ldr	r1, [pc, #40]	; (801ec5c <sys_timeout+0x44>)
 801ec34:	480a      	ldr	r0, [pc, #40]	; (801ec60 <sys_timeout+0x48>)
 801ec36:	f003 fb83 	bl	8022340 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801ec3a:	f7e2 ff2b 	bl	8001a94 <sys_now>
 801ec3e:	4602      	mov	r2, r0
 801ec40:	68fb      	ldr	r3, [r7, #12]
 801ec42:	4413      	add	r3, r2
 801ec44:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ec46:	687a      	ldr	r2, [r7, #4]
 801ec48:	68b9      	ldr	r1, [r7, #8]
 801ec4a:	6978      	ldr	r0, [r7, #20]
 801ec4c:	f7ff ff22 	bl	801ea94 <sys_timeout_abs>
#endif
}
 801ec50:	bf00      	nop
 801ec52:	3718      	adds	r7, #24
 801ec54:	46bd      	mov	sp, r7
 801ec56:	bd80      	pop	{r7, pc}
 801ec58:	08026294 	.word	0x08026294
 801ec5c:	08026330 	.word	0x08026330
 801ec60:	08026308 	.word	0x08026308

0801ec64 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801ec64:	b580      	push	{r7, lr}
 801ec66:	b084      	sub	sp, #16
 801ec68:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801ec6a:	f7e2 ff13 	bl	8001a94 <sys_now>
 801ec6e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801ec70:	4b17      	ldr	r3, [pc, #92]	; (801ecd0 <sys_check_timeouts+0x6c>)
 801ec72:	681b      	ldr	r3, [r3, #0]
 801ec74:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801ec76:	68bb      	ldr	r3, [r7, #8]
 801ec78:	2b00      	cmp	r3, #0
 801ec7a:	d022      	beq.n	801ecc2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801ec7c:	68bb      	ldr	r3, [r7, #8]
 801ec7e:	685b      	ldr	r3, [r3, #4]
 801ec80:	68fa      	ldr	r2, [r7, #12]
 801ec82:	1ad3      	subs	r3, r2, r3
 801ec84:	0fdb      	lsrs	r3, r3, #31
 801ec86:	f003 0301 	and.w	r3, r3, #1
 801ec8a:	b2db      	uxtb	r3, r3
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	d11a      	bne.n	801ecc6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801ec90:	68bb      	ldr	r3, [r7, #8]
 801ec92:	681b      	ldr	r3, [r3, #0]
 801ec94:	4a0e      	ldr	r2, [pc, #56]	; (801ecd0 <sys_check_timeouts+0x6c>)
 801ec96:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801ec98:	68bb      	ldr	r3, [r7, #8]
 801ec9a:	689b      	ldr	r3, [r3, #8]
 801ec9c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801ec9e:	68bb      	ldr	r3, [r7, #8]
 801eca0:	68db      	ldr	r3, [r3, #12]
 801eca2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801eca4:	68bb      	ldr	r3, [r7, #8]
 801eca6:	685b      	ldr	r3, [r3, #4]
 801eca8:	4a0a      	ldr	r2, [pc, #40]	; (801ecd4 <sys_check_timeouts+0x70>)
 801ecaa:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801ecac:	68b9      	ldr	r1, [r7, #8]
 801ecae:	200a      	movs	r0, #10
 801ecb0:	f7f8 fd0c 	bl	80176cc <memp_free>
    if (handler != NULL) {
 801ecb4:	687b      	ldr	r3, [r7, #4]
 801ecb6:	2b00      	cmp	r3, #0
 801ecb8:	d0da      	beq.n	801ec70 <sys_check_timeouts+0xc>
      handler(arg);
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	6838      	ldr	r0, [r7, #0]
 801ecbe:	4798      	blx	r3
  do {
 801ecc0:	e7d6      	b.n	801ec70 <sys_check_timeouts+0xc>
      return;
 801ecc2:	bf00      	nop
 801ecc4:	e000      	b.n	801ecc8 <sys_check_timeouts+0x64>
      return;
 801ecc6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801ecc8:	3710      	adds	r7, #16
 801ecca:	46bd      	mov	sp, r7
 801eccc:	bd80      	pop	{r7, pc}
 801ecce:	bf00      	nop
 801ecd0:	2002f034 	.word	0x2002f034
 801ecd4:	2002f038 	.word	0x2002f038

0801ecd8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801ecd8:	b580      	push	{r7, lr}
 801ecda:	b082      	sub	sp, #8
 801ecdc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801ecde:	4b16      	ldr	r3, [pc, #88]	; (801ed38 <sys_timeouts_sleeptime+0x60>)
 801ece0:	681b      	ldr	r3, [r3, #0]
 801ece2:	2b00      	cmp	r3, #0
 801ece4:	d102      	bne.n	801ecec <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801ece6:	f04f 33ff 	mov.w	r3, #4294967295
 801ecea:	e020      	b.n	801ed2e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801ecec:	f7e2 fed2 	bl	8001a94 <sys_now>
 801ecf0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801ecf2:	4b11      	ldr	r3, [pc, #68]	; (801ed38 <sys_timeouts_sleeptime+0x60>)
 801ecf4:	681b      	ldr	r3, [r3, #0]
 801ecf6:	685a      	ldr	r2, [r3, #4]
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	1ad3      	subs	r3, r2, r3
 801ecfc:	0fdb      	lsrs	r3, r3, #31
 801ecfe:	f003 0301 	and.w	r3, r3, #1
 801ed02:	b2db      	uxtb	r3, r3
 801ed04:	2b00      	cmp	r3, #0
 801ed06:	d001      	beq.n	801ed0c <sys_timeouts_sleeptime+0x34>
    return 0;
 801ed08:	2300      	movs	r3, #0
 801ed0a:	e010      	b.n	801ed2e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801ed0c:	4b0a      	ldr	r3, [pc, #40]	; (801ed38 <sys_timeouts_sleeptime+0x60>)
 801ed0e:	681b      	ldr	r3, [r3, #0]
 801ed10:	685a      	ldr	r2, [r3, #4]
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	1ad3      	subs	r3, r2, r3
 801ed16:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801ed18:	683b      	ldr	r3, [r7, #0]
 801ed1a:	2b00      	cmp	r3, #0
 801ed1c:	da06      	bge.n	801ed2c <sys_timeouts_sleeptime+0x54>
 801ed1e:	4b07      	ldr	r3, [pc, #28]	; (801ed3c <sys_timeouts_sleeptime+0x64>)
 801ed20:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801ed24:	4906      	ldr	r1, [pc, #24]	; (801ed40 <sys_timeouts_sleeptime+0x68>)
 801ed26:	4807      	ldr	r0, [pc, #28]	; (801ed44 <sys_timeouts_sleeptime+0x6c>)
 801ed28:	f003 fb0a 	bl	8022340 <iprintf>
    return ret;
 801ed2c:	683b      	ldr	r3, [r7, #0]
  }
}
 801ed2e:	4618      	mov	r0, r3
 801ed30:	3708      	adds	r7, #8
 801ed32:	46bd      	mov	sp, r7
 801ed34:	bd80      	pop	{r7, pc}
 801ed36:	bf00      	nop
 801ed38:	2002f034 	.word	0x2002f034
 801ed3c:	08026294 	.word	0x08026294
 801ed40:	08026368 	.word	0x08026368
 801ed44:	08026308 	.word	0x08026308

0801ed48 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ed48:	b580      	push	{r7, lr}
 801ed4a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ed4c:	f003 f9f8 	bl	8022140 <rand>
 801ed50:	4603      	mov	r3, r0
 801ed52:	b29b      	uxth	r3, r3
 801ed54:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ed58:	b29b      	uxth	r3, r3
 801ed5a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ed5e:	b29a      	uxth	r2, r3
 801ed60:	4b01      	ldr	r3, [pc, #4]	; (801ed68 <udp_init+0x20>)
 801ed62:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ed64:	bf00      	nop
 801ed66:	bd80      	pop	{r7, pc}
 801ed68:	20000088 	.word	0x20000088

0801ed6c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801ed6c:	b480      	push	{r7}
 801ed6e:	b083      	sub	sp, #12
 801ed70:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801ed72:	2300      	movs	r3, #0
 801ed74:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ed76:	4b17      	ldr	r3, [pc, #92]	; (801edd4 <udp_new_port+0x68>)
 801ed78:	881b      	ldrh	r3, [r3, #0]
 801ed7a:	1c5a      	adds	r2, r3, #1
 801ed7c:	b291      	uxth	r1, r2
 801ed7e:	4a15      	ldr	r2, [pc, #84]	; (801edd4 <udp_new_port+0x68>)
 801ed80:	8011      	strh	r1, [r2, #0]
 801ed82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ed86:	4293      	cmp	r3, r2
 801ed88:	d103      	bne.n	801ed92 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801ed8a:	4b12      	ldr	r3, [pc, #72]	; (801edd4 <udp_new_port+0x68>)
 801ed8c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801ed90:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ed92:	4b11      	ldr	r3, [pc, #68]	; (801edd8 <udp_new_port+0x6c>)
 801ed94:	681b      	ldr	r3, [r3, #0]
 801ed96:	603b      	str	r3, [r7, #0]
 801ed98:	e011      	b.n	801edbe <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801ed9a:	683b      	ldr	r3, [r7, #0]
 801ed9c:	8a5a      	ldrh	r2, [r3, #18]
 801ed9e:	4b0d      	ldr	r3, [pc, #52]	; (801edd4 <udp_new_port+0x68>)
 801eda0:	881b      	ldrh	r3, [r3, #0]
 801eda2:	429a      	cmp	r2, r3
 801eda4:	d108      	bne.n	801edb8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801eda6:	88fb      	ldrh	r3, [r7, #6]
 801eda8:	3301      	adds	r3, #1
 801edaa:	80fb      	strh	r3, [r7, #6]
 801edac:	88fb      	ldrh	r3, [r7, #6]
 801edae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801edb2:	d3e0      	bcc.n	801ed76 <udp_new_port+0xa>
        return 0;
 801edb4:	2300      	movs	r3, #0
 801edb6:	e007      	b.n	801edc8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801edb8:	683b      	ldr	r3, [r7, #0]
 801edba:	68db      	ldr	r3, [r3, #12]
 801edbc:	603b      	str	r3, [r7, #0]
 801edbe:	683b      	ldr	r3, [r7, #0]
 801edc0:	2b00      	cmp	r3, #0
 801edc2:	d1ea      	bne.n	801ed9a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801edc4:	4b03      	ldr	r3, [pc, #12]	; (801edd4 <udp_new_port+0x68>)
 801edc6:	881b      	ldrh	r3, [r3, #0]
}
 801edc8:	4618      	mov	r0, r3
 801edca:	370c      	adds	r7, #12
 801edcc:	46bd      	mov	sp, r7
 801edce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edd2:	4770      	bx	lr
 801edd4:	20000088 	.word	0x20000088
 801edd8:	2002f040 	.word	0x2002f040

0801eddc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801eddc:	b580      	push	{r7, lr}
 801edde:	b084      	sub	sp, #16
 801ede0:	af00      	add	r7, sp, #0
 801ede2:	60f8      	str	r0, [r7, #12]
 801ede4:	60b9      	str	r1, [r7, #8]
 801ede6:	4613      	mov	r3, r2
 801ede8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801edea:	68fb      	ldr	r3, [r7, #12]
 801edec:	2b00      	cmp	r3, #0
 801edee:	d105      	bne.n	801edfc <udp_input_local_match+0x20>
 801edf0:	4b27      	ldr	r3, [pc, #156]	; (801ee90 <udp_input_local_match+0xb4>)
 801edf2:	2287      	movs	r2, #135	; 0x87
 801edf4:	4927      	ldr	r1, [pc, #156]	; (801ee94 <udp_input_local_match+0xb8>)
 801edf6:	4828      	ldr	r0, [pc, #160]	; (801ee98 <udp_input_local_match+0xbc>)
 801edf8:	f003 faa2 	bl	8022340 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801edfc:	68bb      	ldr	r3, [r7, #8]
 801edfe:	2b00      	cmp	r3, #0
 801ee00:	d105      	bne.n	801ee0e <udp_input_local_match+0x32>
 801ee02:	4b23      	ldr	r3, [pc, #140]	; (801ee90 <udp_input_local_match+0xb4>)
 801ee04:	2288      	movs	r2, #136	; 0x88
 801ee06:	4925      	ldr	r1, [pc, #148]	; (801ee9c <udp_input_local_match+0xc0>)
 801ee08:	4823      	ldr	r0, [pc, #140]	; (801ee98 <udp_input_local_match+0xbc>)
 801ee0a:	f003 fa99 	bl	8022340 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ee0e:	68fb      	ldr	r3, [r7, #12]
 801ee10:	7a1b      	ldrb	r3, [r3, #8]
 801ee12:	2b00      	cmp	r3, #0
 801ee14:	d00b      	beq.n	801ee2e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ee16:	68fb      	ldr	r3, [r7, #12]
 801ee18:	7a1a      	ldrb	r2, [r3, #8]
 801ee1a:	4b21      	ldr	r3, [pc, #132]	; (801eea0 <udp_input_local_match+0xc4>)
 801ee1c:	685b      	ldr	r3, [r3, #4]
 801ee1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ee22:	3301      	adds	r3, #1
 801ee24:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ee26:	429a      	cmp	r2, r3
 801ee28:	d001      	beq.n	801ee2e <udp_input_local_match+0x52>
    return 0;
 801ee2a:	2300      	movs	r3, #0
 801ee2c:	e02b      	b.n	801ee86 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801ee2e:	79fb      	ldrb	r3, [r7, #7]
 801ee30:	2b00      	cmp	r3, #0
 801ee32:	d018      	beq.n	801ee66 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ee34:	68fb      	ldr	r3, [r7, #12]
 801ee36:	2b00      	cmp	r3, #0
 801ee38:	d013      	beq.n	801ee62 <udp_input_local_match+0x86>
 801ee3a:	68fb      	ldr	r3, [r7, #12]
 801ee3c:	681b      	ldr	r3, [r3, #0]
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	d00f      	beq.n	801ee62 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ee42:	4b17      	ldr	r3, [pc, #92]	; (801eea0 <udp_input_local_match+0xc4>)
 801ee44:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ee46:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee4a:	d00a      	beq.n	801ee62 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801ee4c:	68fb      	ldr	r3, [r7, #12]
 801ee4e:	681a      	ldr	r2, [r3, #0]
 801ee50:	4b13      	ldr	r3, [pc, #76]	; (801eea0 <udp_input_local_match+0xc4>)
 801ee52:	695b      	ldr	r3, [r3, #20]
 801ee54:	405a      	eors	r2, r3
 801ee56:	68bb      	ldr	r3, [r7, #8]
 801ee58:	3308      	adds	r3, #8
 801ee5a:	681b      	ldr	r3, [r3, #0]
 801ee5c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ee5e:	2b00      	cmp	r3, #0
 801ee60:	d110      	bne.n	801ee84 <udp_input_local_match+0xa8>
          return 1;
 801ee62:	2301      	movs	r3, #1
 801ee64:	e00f      	b.n	801ee86 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ee66:	68fb      	ldr	r3, [r7, #12]
 801ee68:	2b00      	cmp	r3, #0
 801ee6a:	d009      	beq.n	801ee80 <udp_input_local_match+0xa4>
 801ee6c:	68fb      	ldr	r3, [r7, #12]
 801ee6e:	681b      	ldr	r3, [r3, #0]
 801ee70:	2b00      	cmp	r3, #0
 801ee72:	d005      	beq.n	801ee80 <udp_input_local_match+0xa4>
 801ee74:	68fb      	ldr	r3, [r7, #12]
 801ee76:	681a      	ldr	r2, [r3, #0]
 801ee78:	4b09      	ldr	r3, [pc, #36]	; (801eea0 <udp_input_local_match+0xc4>)
 801ee7a:	695b      	ldr	r3, [r3, #20]
 801ee7c:	429a      	cmp	r2, r3
 801ee7e:	d101      	bne.n	801ee84 <udp_input_local_match+0xa8>
        return 1;
 801ee80:	2301      	movs	r3, #1
 801ee82:	e000      	b.n	801ee86 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801ee84:	2300      	movs	r3, #0
}
 801ee86:	4618      	mov	r0, r3
 801ee88:	3710      	adds	r7, #16
 801ee8a:	46bd      	mov	sp, r7
 801ee8c:	bd80      	pop	{r7, pc}
 801ee8e:	bf00      	nop
 801ee90:	0802637c 	.word	0x0802637c
 801ee94:	080263ac 	.word	0x080263ac
 801ee98:	080263d0 	.word	0x080263d0
 801ee9c:	080263f8 	.word	0x080263f8
 801eea0:	2002bee4 	.word	0x2002bee4

0801eea4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801eea4:	b590      	push	{r4, r7, lr}
 801eea6:	b08d      	sub	sp, #52	; 0x34
 801eea8:	af02      	add	r7, sp, #8
 801eeaa:	6078      	str	r0, [r7, #4]
 801eeac:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801eeae:	2300      	movs	r3, #0
 801eeb0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801eeb2:	687b      	ldr	r3, [r7, #4]
 801eeb4:	2b00      	cmp	r3, #0
 801eeb6:	d105      	bne.n	801eec4 <udp_input+0x20>
 801eeb8:	4b7c      	ldr	r3, [pc, #496]	; (801f0ac <udp_input+0x208>)
 801eeba:	22cf      	movs	r2, #207	; 0xcf
 801eebc:	497c      	ldr	r1, [pc, #496]	; (801f0b0 <udp_input+0x20c>)
 801eebe:	487d      	ldr	r0, [pc, #500]	; (801f0b4 <udp_input+0x210>)
 801eec0:	f003 fa3e 	bl	8022340 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801eec4:	683b      	ldr	r3, [r7, #0]
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	d105      	bne.n	801eed6 <udp_input+0x32>
 801eeca:	4b78      	ldr	r3, [pc, #480]	; (801f0ac <udp_input+0x208>)
 801eecc:	22d0      	movs	r2, #208	; 0xd0
 801eece:	497a      	ldr	r1, [pc, #488]	; (801f0b8 <udp_input+0x214>)
 801eed0:	4878      	ldr	r0, [pc, #480]	; (801f0b4 <udp_input+0x210>)
 801eed2:	f003 fa35 	bl	8022340 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	895b      	ldrh	r3, [r3, #10]
 801eeda:	2b07      	cmp	r3, #7
 801eedc:	d803      	bhi.n	801eee6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801eede:	6878      	ldr	r0, [r7, #4]
 801eee0:	f7f9 fa98 	bl	8018414 <pbuf_free>
    goto end;
 801eee4:	e0de      	b.n	801f0a4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	685b      	ldr	r3, [r3, #4]
 801eeea:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801eeec:	4b73      	ldr	r3, [pc, #460]	; (801f0bc <udp_input+0x218>)
 801eeee:	695b      	ldr	r3, [r3, #20]
 801eef0:	4a72      	ldr	r2, [pc, #456]	; (801f0bc <udp_input+0x218>)
 801eef2:	6812      	ldr	r2, [r2, #0]
 801eef4:	4611      	mov	r1, r2
 801eef6:	4618      	mov	r0, r3
 801eef8:	f001 fdbc 	bl	8020a74 <ip4_addr_isbroadcast_u32>
 801eefc:	4603      	mov	r3, r0
 801eefe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801ef00:	697b      	ldr	r3, [r7, #20]
 801ef02:	881b      	ldrh	r3, [r3, #0]
 801ef04:	b29b      	uxth	r3, r3
 801ef06:	4618      	mov	r0, r3
 801ef08:	f7f7 fdda 	bl	8016ac0 <lwip_htons>
 801ef0c:	4603      	mov	r3, r0
 801ef0e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801ef10:	697b      	ldr	r3, [r7, #20]
 801ef12:	885b      	ldrh	r3, [r3, #2]
 801ef14:	b29b      	uxth	r3, r3
 801ef16:	4618      	mov	r0, r3
 801ef18:	f7f7 fdd2 	bl	8016ac0 <lwip_htons>
 801ef1c:	4603      	mov	r3, r0
 801ef1e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801ef20:	2300      	movs	r3, #0
 801ef22:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801ef24:	2300      	movs	r3, #0
 801ef26:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801ef28:	2300      	movs	r3, #0
 801ef2a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ef2c:	4b64      	ldr	r3, [pc, #400]	; (801f0c0 <udp_input+0x21c>)
 801ef2e:	681b      	ldr	r3, [r3, #0]
 801ef30:	627b      	str	r3, [r7, #36]	; 0x24
 801ef32:	e054      	b.n	801efde <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801ef34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef36:	8a5b      	ldrh	r3, [r3, #18]
 801ef38:	89fa      	ldrh	r2, [r7, #14]
 801ef3a:	429a      	cmp	r2, r3
 801ef3c:	d14a      	bne.n	801efd4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801ef3e:	7cfb      	ldrb	r3, [r7, #19]
 801ef40:	461a      	mov	r2, r3
 801ef42:	6839      	ldr	r1, [r7, #0]
 801ef44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ef46:	f7ff ff49 	bl	801eddc <udp_input_local_match>
 801ef4a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801ef4c:	2b00      	cmp	r3, #0
 801ef4e:	d041      	beq.n	801efd4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801ef50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef52:	7c1b      	ldrb	r3, [r3, #16]
 801ef54:	f003 0304 	and.w	r3, r3, #4
 801ef58:	2b00      	cmp	r3, #0
 801ef5a:	d11d      	bne.n	801ef98 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801ef5c:	69fb      	ldr	r3, [r7, #28]
 801ef5e:	2b00      	cmp	r3, #0
 801ef60:	d102      	bne.n	801ef68 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801ef62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef64:	61fb      	str	r3, [r7, #28]
 801ef66:	e017      	b.n	801ef98 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801ef68:	7cfb      	ldrb	r3, [r7, #19]
 801ef6a:	2b00      	cmp	r3, #0
 801ef6c:	d014      	beq.n	801ef98 <udp_input+0xf4>
 801ef6e:	4b53      	ldr	r3, [pc, #332]	; (801f0bc <udp_input+0x218>)
 801ef70:	695b      	ldr	r3, [r3, #20]
 801ef72:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ef76:	d10f      	bne.n	801ef98 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801ef78:	69fb      	ldr	r3, [r7, #28]
 801ef7a:	681a      	ldr	r2, [r3, #0]
 801ef7c:	683b      	ldr	r3, [r7, #0]
 801ef7e:	3304      	adds	r3, #4
 801ef80:	681b      	ldr	r3, [r3, #0]
 801ef82:	429a      	cmp	r2, r3
 801ef84:	d008      	beq.n	801ef98 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801ef86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef88:	681a      	ldr	r2, [r3, #0]
 801ef8a:	683b      	ldr	r3, [r7, #0]
 801ef8c:	3304      	adds	r3, #4
 801ef8e:	681b      	ldr	r3, [r3, #0]
 801ef90:	429a      	cmp	r2, r3
 801ef92:	d101      	bne.n	801ef98 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801ef94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef96:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801ef98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef9a:	8a9b      	ldrh	r3, [r3, #20]
 801ef9c:	8a3a      	ldrh	r2, [r7, #16]
 801ef9e:	429a      	cmp	r2, r3
 801efa0:	d118      	bne.n	801efd4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801efa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efa4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801efa6:	2b00      	cmp	r3, #0
 801efa8:	d005      	beq.n	801efb6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801efaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efac:	685a      	ldr	r2, [r3, #4]
 801efae:	4b43      	ldr	r3, [pc, #268]	; (801f0bc <udp_input+0x218>)
 801efb0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801efb2:	429a      	cmp	r2, r3
 801efb4:	d10e      	bne.n	801efd4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801efb6:	6a3b      	ldr	r3, [r7, #32]
 801efb8:	2b00      	cmp	r3, #0
 801efba:	d014      	beq.n	801efe6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801efbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efbe:	68da      	ldr	r2, [r3, #12]
 801efc0:	6a3b      	ldr	r3, [r7, #32]
 801efc2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801efc4:	4b3e      	ldr	r3, [pc, #248]	; (801f0c0 <udp_input+0x21c>)
 801efc6:	681a      	ldr	r2, [r3, #0]
 801efc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efca:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801efcc:	4a3c      	ldr	r2, [pc, #240]	; (801f0c0 <udp_input+0x21c>)
 801efce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efd0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801efd2:	e008      	b.n	801efe6 <udp_input+0x142>
      }
    }

    prev = pcb;
 801efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efd6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801efd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efda:	68db      	ldr	r3, [r3, #12]
 801efdc:	627b      	str	r3, [r7, #36]	; 0x24
 801efde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efe0:	2b00      	cmp	r3, #0
 801efe2:	d1a7      	bne.n	801ef34 <udp_input+0x90>
 801efe4:	e000      	b.n	801efe8 <udp_input+0x144>
        break;
 801efe6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801efe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efea:	2b00      	cmp	r3, #0
 801efec:	d101      	bne.n	801eff2 <udp_input+0x14e>
    pcb = uncon_pcb;
 801efee:	69fb      	ldr	r3, [r7, #28]
 801eff0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801eff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eff4:	2b00      	cmp	r3, #0
 801eff6:	d002      	beq.n	801effe <udp_input+0x15a>
    for_us = 1;
 801eff8:	2301      	movs	r3, #1
 801effa:	76fb      	strb	r3, [r7, #27]
 801effc:	e00a      	b.n	801f014 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801effe:	683b      	ldr	r3, [r7, #0]
 801f000:	3304      	adds	r3, #4
 801f002:	681a      	ldr	r2, [r3, #0]
 801f004:	4b2d      	ldr	r3, [pc, #180]	; (801f0bc <udp_input+0x218>)
 801f006:	695b      	ldr	r3, [r3, #20]
 801f008:	429a      	cmp	r2, r3
 801f00a:	bf0c      	ite	eq
 801f00c:	2301      	moveq	r3, #1
 801f00e:	2300      	movne	r3, #0
 801f010:	b2db      	uxtb	r3, r3
 801f012:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801f014:	7efb      	ldrb	r3, [r7, #27]
 801f016:	2b00      	cmp	r3, #0
 801f018:	d041      	beq.n	801f09e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f01a:	2108      	movs	r1, #8
 801f01c:	6878      	ldr	r0, [r7, #4]
 801f01e:	f7f9 f973 	bl	8018308 <pbuf_remove_header>
 801f022:	4603      	mov	r3, r0
 801f024:	2b00      	cmp	r3, #0
 801f026:	d00a      	beq.n	801f03e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801f028:	4b20      	ldr	r3, [pc, #128]	; (801f0ac <udp_input+0x208>)
 801f02a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801f02e:	4925      	ldr	r1, [pc, #148]	; (801f0c4 <udp_input+0x220>)
 801f030:	4820      	ldr	r0, [pc, #128]	; (801f0b4 <udp_input+0x210>)
 801f032:	f003 f985 	bl	8022340 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801f036:	6878      	ldr	r0, [r7, #4]
 801f038:	f7f9 f9ec 	bl	8018414 <pbuf_free>
      goto end;
 801f03c:	e032      	b.n	801f0a4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801f03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f040:	2b00      	cmp	r3, #0
 801f042:	d012      	beq.n	801f06a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801f044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f046:	699b      	ldr	r3, [r3, #24]
 801f048:	2b00      	cmp	r3, #0
 801f04a:	d00a      	beq.n	801f062 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801f04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f04e:	699c      	ldr	r4, [r3, #24]
 801f050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f052:	69d8      	ldr	r0, [r3, #28]
 801f054:	8a3b      	ldrh	r3, [r7, #16]
 801f056:	9300      	str	r3, [sp, #0]
 801f058:	4b1b      	ldr	r3, [pc, #108]	; (801f0c8 <udp_input+0x224>)
 801f05a:	687a      	ldr	r2, [r7, #4]
 801f05c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f05e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801f060:	e021      	b.n	801f0a6 <udp_input+0x202>
        pbuf_free(p);
 801f062:	6878      	ldr	r0, [r7, #4]
 801f064:	f7f9 f9d6 	bl	8018414 <pbuf_free>
        goto end;
 801f068:	e01c      	b.n	801f0a4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801f06a:	7cfb      	ldrb	r3, [r7, #19]
 801f06c:	2b00      	cmp	r3, #0
 801f06e:	d112      	bne.n	801f096 <udp_input+0x1f2>
 801f070:	4b12      	ldr	r3, [pc, #72]	; (801f0bc <udp_input+0x218>)
 801f072:	695b      	ldr	r3, [r3, #20]
 801f074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f078:	2be0      	cmp	r3, #224	; 0xe0
 801f07a:	d00c      	beq.n	801f096 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801f07c:	4b0f      	ldr	r3, [pc, #60]	; (801f0bc <udp_input+0x218>)
 801f07e:	899b      	ldrh	r3, [r3, #12]
 801f080:	3308      	adds	r3, #8
 801f082:	b29b      	uxth	r3, r3
 801f084:	b21b      	sxth	r3, r3
 801f086:	4619      	mov	r1, r3
 801f088:	6878      	ldr	r0, [r7, #4]
 801f08a:	f7f9 f9b0 	bl	80183ee <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801f08e:	2103      	movs	r1, #3
 801f090:	6878      	ldr	r0, [r7, #4]
 801f092:	f001 f9c5 	bl	8020420 <icmp_dest_unreach>
      pbuf_free(p);
 801f096:	6878      	ldr	r0, [r7, #4]
 801f098:	f7f9 f9bc 	bl	8018414 <pbuf_free>
  return;
 801f09c:	e003      	b.n	801f0a6 <udp_input+0x202>
    pbuf_free(p);
 801f09e:	6878      	ldr	r0, [r7, #4]
 801f0a0:	f7f9 f9b8 	bl	8018414 <pbuf_free>
  return;
 801f0a4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801f0a6:	372c      	adds	r7, #44	; 0x2c
 801f0a8:	46bd      	mov	sp, r7
 801f0aa:	bd90      	pop	{r4, r7, pc}
 801f0ac:	0802637c 	.word	0x0802637c
 801f0b0:	08026420 	.word	0x08026420
 801f0b4:	080263d0 	.word	0x080263d0
 801f0b8:	08026438 	.word	0x08026438
 801f0bc:	2002bee4 	.word	0x2002bee4
 801f0c0:	2002f040 	.word	0x2002f040
 801f0c4:	08026454 	.word	0x08026454
 801f0c8:	2002bef4 	.word	0x2002bef4

0801f0cc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801f0cc:	b580      	push	{r7, lr}
 801f0ce:	b086      	sub	sp, #24
 801f0d0:	af00      	add	r7, sp, #0
 801f0d2:	60f8      	str	r0, [r7, #12]
 801f0d4:	60b9      	str	r1, [r7, #8]
 801f0d6:	4613      	mov	r3, r2
 801f0d8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801f0da:	68bb      	ldr	r3, [r7, #8]
 801f0dc:	2b00      	cmp	r3, #0
 801f0de:	d101      	bne.n	801f0e4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801f0e0:	4b39      	ldr	r3, [pc, #228]	; (801f1c8 <udp_bind+0xfc>)
 801f0e2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801f0e4:	68fb      	ldr	r3, [r7, #12]
 801f0e6:	2b00      	cmp	r3, #0
 801f0e8:	d109      	bne.n	801f0fe <udp_bind+0x32>
 801f0ea:	4b38      	ldr	r3, [pc, #224]	; (801f1cc <udp_bind+0x100>)
 801f0ec:	f240 32b7 	movw	r2, #951	; 0x3b7
 801f0f0:	4937      	ldr	r1, [pc, #220]	; (801f1d0 <udp_bind+0x104>)
 801f0f2:	4838      	ldr	r0, [pc, #224]	; (801f1d4 <udp_bind+0x108>)
 801f0f4:	f003 f924 	bl	8022340 <iprintf>
 801f0f8:	f06f 030f 	mvn.w	r3, #15
 801f0fc:	e060      	b.n	801f1c0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801f0fe:	2300      	movs	r3, #0
 801f100:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f102:	4b35      	ldr	r3, [pc, #212]	; (801f1d8 <udp_bind+0x10c>)
 801f104:	681b      	ldr	r3, [r3, #0]
 801f106:	617b      	str	r3, [r7, #20]
 801f108:	e009      	b.n	801f11e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801f10a:	68fa      	ldr	r2, [r7, #12]
 801f10c:	697b      	ldr	r3, [r7, #20]
 801f10e:	429a      	cmp	r2, r3
 801f110:	d102      	bne.n	801f118 <udp_bind+0x4c>
      rebind = 1;
 801f112:	2301      	movs	r3, #1
 801f114:	74fb      	strb	r3, [r7, #19]
      break;
 801f116:	e005      	b.n	801f124 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f118:	697b      	ldr	r3, [r7, #20]
 801f11a:	68db      	ldr	r3, [r3, #12]
 801f11c:	617b      	str	r3, [r7, #20]
 801f11e:	697b      	ldr	r3, [r7, #20]
 801f120:	2b00      	cmp	r3, #0
 801f122:	d1f2      	bne.n	801f10a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801f124:	88fb      	ldrh	r3, [r7, #6]
 801f126:	2b00      	cmp	r3, #0
 801f128:	d109      	bne.n	801f13e <udp_bind+0x72>
    port = udp_new_port();
 801f12a:	f7ff fe1f 	bl	801ed6c <udp_new_port>
 801f12e:	4603      	mov	r3, r0
 801f130:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801f132:	88fb      	ldrh	r3, [r7, #6]
 801f134:	2b00      	cmp	r3, #0
 801f136:	d12c      	bne.n	801f192 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801f138:	f06f 0307 	mvn.w	r3, #7
 801f13c:	e040      	b.n	801f1c0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f13e:	4b26      	ldr	r3, [pc, #152]	; (801f1d8 <udp_bind+0x10c>)
 801f140:	681b      	ldr	r3, [r3, #0]
 801f142:	617b      	str	r3, [r7, #20]
 801f144:	e022      	b.n	801f18c <udp_bind+0xc0>
      if (pcb != ipcb) {
 801f146:	68fa      	ldr	r2, [r7, #12]
 801f148:	697b      	ldr	r3, [r7, #20]
 801f14a:	429a      	cmp	r2, r3
 801f14c:	d01b      	beq.n	801f186 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801f14e:	697b      	ldr	r3, [r7, #20]
 801f150:	8a5b      	ldrh	r3, [r3, #18]
 801f152:	88fa      	ldrh	r2, [r7, #6]
 801f154:	429a      	cmp	r2, r3
 801f156:	d116      	bne.n	801f186 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f158:	697b      	ldr	r3, [r7, #20]
 801f15a:	681a      	ldr	r2, [r3, #0]
 801f15c:	68bb      	ldr	r3, [r7, #8]
 801f15e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801f160:	429a      	cmp	r2, r3
 801f162:	d00d      	beq.n	801f180 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f164:	68bb      	ldr	r3, [r7, #8]
 801f166:	2b00      	cmp	r3, #0
 801f168:	d00a      	beq.n	801f180 <udp_bind+0xb4>
 801f16a:	68bb      	ldr	r3, [r7, #8]
 801f16c:	681b      	ldr	r3, [r3, #0]
 801f16e:	2b00      	cmp	r3, #0
 801f170:	d006      	beq.n	801f180 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801f172:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f174:	2b00      	cmp	r3, #0
 801f176:	d003      	beq.n	801f180 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801f178:	697b      	ldr	r3, [r7, #20]
 801f17a:	681b      	ldr	r3, [r3, #0]
 801f17c:	2b00      	cmp	r3, #0
 801f17e:	d102      	bne.n	801f186 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801f180:	f06f 0307 	mvn.w	r3, #7
 801f184:	e01c      	b.n	801f1c0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f186:	697b      	ldr	r3, [r7, #20]
 801f188:	68db      	ldr	r3, [r3, #12]
 801f18a:	617b      	str	r3, [r7, #20]
 801f18c:	697b      	ldr	r3, [r7, #20]
 801f18e:	2b00      	cmp	r3, #0
 801f190:	d1d9      	bne.n	801f146 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801f192:	68bb      	ldr	r3, [r7, #8]
 801f194:	2b00      	cmp	r3, #0
 801f196:	d002      	beq.n	801f19e <udp_bind+0xd2>
 801f198:	68bb      	ldr	r3, [r7, #8]
 801f19a:	681b      	ldr	r3, [r3, #0]
 801f19c:	e000      	b.n	801f1a0 <udp_bind+0xd4>
 801f19e:	2300      	movs	r3, #0
 801f1a0:	68fa      	ldr	r2, [r7, #12]
 801f1a2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801f1a4:	68fb      	ldr	r3, [r7, #12]
 801f1a6:	88fa      	ldrh	r2, [r7, #6]
 801f1a8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801f1aa:	7cfb      	ldrb	r3, [r7, #19]
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	d106      	bne.n	801f1be <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801f1b0:	4b09      	ldr	r3, [pc, #36]	; (801f1d8 <udp_bind+0x10c>)
 801f1b2:	681a      	ldr	r2, [r3, #0]
 801f1b4:	68fb      	ldr	r3, [r7, #12]
 801f1b6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801f1b8:	4a07      	ldr	r2, [pc, #28]	; (801f1d8 <udp_bind+0x10c>)
 801f1ba:	68fb      	ldr	r3, [r7, #12]
 801f1bc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801f1be:	2300      	movs	r3, #0
}
 801f1c0:	4618      	mov	r0, r3
 801f1c2:	3718      	adds	r7, #24
 801f1c4:	46bd      	mov	sp, r7
 801f1c6:	bd80      	pop	{r7, pc}
 801f1c8:	080270c4 	.word	0x080270c4
 801f1cc:	0802637c 	.word	0x0802637c
 801f1d0:	08026644 	.word	0x08026644
 801f1d4:	080263d0 	.word	0x080263d0
 801f1d8:	2002f040 	.word	0x2002f040

0801f1dc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801f1dc:	b580      	push	{r7, lr}
 801f1de:	b084      	sub	sp, #16
 801f1e0:	af00      	add	r7, sp, #0
 801f1e2:	60f8      	str	r0, [r7, #12]
 801f1e4:	60b9      	str	r1, [r7, #8]
 801f1e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	2b00      	cmp	r3, #0
 801f1ec:	d107      	bne.n	801f1fe <udp_recv+0x22>
 801f1ee:	4b08      	ldr	r3, [pc, #32]	; (801f210 <udp_recv+0x34>)
 801f1f0:	f240 428a 	movw	r2, #1162	; 0x48a
 801f1f4:	4907      	ldr	r1, [pc, #28]	; (801f214 <udp_recv+0x38>)
 801f1f6:	4808      	ldr	r0, [pc, #32]	; (801f218 <udp_recv+0x3c>)
 801f1f8:	f003 f8a2 	bl	8022340 <iprintf>
 801f1fc:	e005      	b.n	801f20a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801f1fe:	68fb      	ldr	r3, [r7, #12]
 801f200:	68ba      	ldr	r2, [r7, #8]
 801f202:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801f204:	68fb      	ldr	r3, [r7, #12]
 801f206:	687a      	ldr	r2, [r7, #4]
 801f208:	61da      	str	r2, [r3, #28]
}
 801f20a:	3710      	adds	r7, #16
 801f20c:	46bd      	mov	sp, r7
 801f20e:	bd80      	pop	{r7, pc}
 801f210:	0802637c 	.word	0x0802637c
 801f214:	080266b0 	.word	0x080266b0
 801f218:	080263d0 	.word	0x080263d0

0801f21c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801f21c:	b580      	push	{r7, lr}
 801f21e:	b084      	sub	sp, #16
 801f220:	af00      	add	r7, sp, #0
 801f222:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801f224:	687b      	ldr	r3, [r7, #4]
 801f226:	2b00      	cmp	r3, #0
 801f228:	d107      	bne.n	801f23a <udp_remove+0x1e>
 801f22a:	4b19      	ldr	r3, [pc, #100]	; (801f290 <udp_remove+0x74>)
 801f22c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801f230:	4918      	ldr	r1, [pc, #96]	; (801f294 <udp_remove+0x78>)
 801f232:	4819      	ldr	r0, [pc, #100]	; (801f298 <udp_remove+0x7c>)
 801f234:	f003 f884 	bl	8022340 <iprintf>
 801f238:	e026      	b.n	801f288 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801f23a:	4b18      	ldr	r3, [pc, #96]	; (801f29c <udp_remove+0x80>)
 801f23c:	681b      	ldr	r3, [r3, #0]
 801f23e:	687a      	ldr	r2, [r7, #4]
 801f240:	429a      	cmp	r2, r3
 801f242:	d105      	bne.n	801f250 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801f244:	4b15      	ldr	r3, [pc, #84]	; (801f29c <udp_remove+0x80>)
 801f246:	681b      	ldr	r3, [r3, #0]
 801f248:	68db      	ldr	r3, [r3, #12]
 801f24a:	4a14      	ldr	r2, [pc, #80]	; (801f29c <udp_remove+0x80>)
 801f24c:	6013      	str	r3, [r2, #0]
 801f24e:	e017      	b.n	801f280 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801f250:	4b12      	ldr	r3, [pc, #72]	; (801f29c <udp_remove+0x80>)
 801f252:	681b      	ldr	r3, [r3, #0]
 801f254:	60fb      	str	r3, [r7, #12]
 801f256:	e010      	b.n	801f27a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801f258:	68fb      	ldr	r3, [r7, #12]
 801f25a:	68db      	ldr	r3, [r3, #12]
 801f25c:	2b00      	cmp	r3, #0
 801f25e:	d009      	beq.n	801f274 <udp_remove+0x58>
 801f260:	68fb      	ldr	r3, [r7, #12]
 801f262:	68db      	ldr	r3, [r3, #12]
 801f264:	687a      	ldr	r2, [r7, #4]
 801f266:	429a      	cmp	r2, r3
 801f268:	d104      	bne.n	801f274 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801f26a:	687b      	ldr	r3, [r7, #4]
 801f26c:	68da      	ldr	r2, [r3, #12]
 801f26e:	68fb      	ldr	r3, [r7, #12]
 801f270:	60da      	str	r2, [r3, #12]
        break;
 801f272:	e005      	b.n	801f280 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801f274:	68fb      	ldr	r3, [r7, #12]
 801f276:	68db      	ldr	r3, [r3, #12]
 801f278:	60fb      	str	r3, [r7, #12]
 801f27a:	68fb      	ldr	r3, [r7, #12]
 801f27c:	2b00      	cmp	r3, #0
 801f27e:	d1eb      	bne.n	801f258 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801f280:	6879      	ldr	r1, [r7, #4]
 801f282:	2000      	movs	r0, #0
 801f284:	f7f8 fa22 	bl	80176cc <memp_free>
}
 801f288:	3710      	adds	r7, #16
 801f28a:	46bd      	mov	sp, r7
 801f28c:	bd80      	pop	{r7, pc}
 801f28e:	bf00      	nop
 801f290:	0802637c 	.word	0x0802637c
 801f294:	080266c8 	.word	0x080266c8
 801f298:	080263d0 	.word	0x080263d0
 801f29c:	2002f040 	.word	0x2002f040

0801f2a0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801f2a0:	b580      	push	{r7, lr}
 801f2a2:	b082      	sub	sp, #8
 801f2a4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801f2a6:	2000      	movs	r0, #0
 801f2a8:	f7f8 f99a 	bl	80175e0 <memp_malloc>
 801f2ac:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801f2ae:	687b      	ldr	r3, [r7, #4]
 801f2b0:	2b00      	cmp	r3, #0
 801f2b2:	d007      	beq.n	801f2c4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801f2b4:	2220      	movs	r2, #32
 801f2b6:	2100      	movs	r1, #0
 801f2b8:	6878      	ldr	r0, [r7, #4]
 801f2ba:	f003 f919 	bl	80224f0 <memset>
    pcb->ttl = UDP_TTL;
 801f2be:	687b      	ldr	r3, [r7, #4]
 801f2c0:	22ff      	movs	r2, #255	; 0xff
 801f2c2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801f2c4:	687b      	ldr	r3, [r7, #4]
}
 801f2c6:	4618      	mov	r0, r3
 801f2c8:	3708      	adds	r7, #8
 801f2ca:	46bd      	mov	sp, r7
 801f2cc:	bd80      	pop	{r7, pc}

0801f2ce <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801f2ce:	b580      	push	{r7, lr}
 801f2d0:	b084      	sub	sp, #16
 801f2d2:	af00      	add	r7, sp, #0
 801f2d4:	4603      	mov	r3, r0
 801f2d6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801f2d8:	f7ff ffe2 	bl	801f2a0 <udp_new>
 801f2dc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801f2de:	68fb      	ldr	r3, [r7, #12]
}
 801f2e0:	4618      	mov	r0, r3
 801f2e2:	3710      	adds	r7, #16
 801f2e4:	46bd      	mov	sp, r7
 801f2e6:	bd80      	pop	{r7, pc}

0801f2e8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801f2e8:	b480      	push	{r7}
 801f2ea:	b085      	sub	sp, #20
 801f2ec:	af00      	add	r7, sp, #0
 801f2ee:	6078      	str	r0, [r7, #4]
 801f2f0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801f2f2:	687b      	ldr	r3, [r7, #4]
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	d01e      	beq.n	801f336 <udp_netif_ip_addr_changed+0x4e>
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	2b00      	cmp	r3, #0
 801f2fe:	d01a      	beq.n	801f336 <udp_netif_ip_addr_changed+0x4e>
 801f300:	683b      	ldr	r3, [r7, #0]
 801f302:	2b00      	cmp	r3, #0
 801f304:	d017      	beq.n	801f336 <udp_netif_ip_addr_changed+0x4e>
 801f306:	683b      	ldr	r3, [r7, #0]
 801f308:	681b      	ldr	r3, [r3, #0]
 801f30a:	2b00      	cmp	r3, #0
 801f30c:	d013      	beq.n	801f336 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801f30e:	4b0d      	ldr	r3, [pc, #52]	; (801f344 <udp_netif_ip_addr_changed+0x5c>)
 801f310:	681b      	ldr	r3, [r3, #0]
 801f312:	60fb      	str	r3, [r7, #12]
 801f314:	e00c      	b.n	801f330 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801f316:	68fb      	ldr	r3, [r7, #12]
 801f318:	681a      	ldr	r2, [r3, #0]
 801f31a:	687b      	ldr	r3, [r7, #4]
 801f31c:	681b      	ldr	r3, [r3, #0]
 801f31e:	429a      	cmp	r2, r3
 801f320:	d103      	bne.n	801f32a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801f322:	683b      	ldr	r3, [r7, #0]
 801f324:	681a      	ldr	r2, [r3, #0]
 801f326:	68fb      	ldr	r3, [r7, #12]
 801f328:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801f32a:	68fb      	ldr	r3, [r7, #12]
 801f32c:	68db      	ldr	r3, [r3, #12]
 801f32e:	60fb      	str	r3, [r7, #12]
 801f330:	68fb      	ldr	r3, [r7, #12]
 801f332:	2b00      	cmp	r3, #0
 801f334:	d1ef      	bne.n	801f316 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801f336:	bf00      	nop
 801f338:	3714      	adds	r7, #20
 801f33a:	46bd      	mov	sp, r7
 801f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f340:	4770      	bx	lr
 801f342:	bf00      	nop
 801f344:	2002f040 	.word	0x2002f040

0801f348 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801f348:	b580      	push	{r7, lr}
 801f34a:	b082      	sub	sp, #8
 801f34c:	af00      	add	r7, sp, #0
 801f34e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801f350:	4915      	ldr	r1, [pc, #84]	; (801f3a8 <etharp_free_entry+0x60>)
 801f352:	687a      	ldr	r2, [r7, #4]
 801f354:	4613      	mov	r3, r2
 801f356:	005b      	lsls	r3, r3, #1
 801f358:	4413      	add	r3, r2
 801f35a:	00db      	lsls	r3, r3, #3
 801f35c:	440b      	add	r3, r1
 801f35e:	681b      	ldr	r3, [r3, #0]
 801f360:	2b00      	cmp	r3, #0
 801f362:	d013      	beq.n	801f38c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801f364:	4910      	ldr	r1, [pc, #64]	; (801f3a8 <etharp_free_entry+0x60>)
 801f366:	687a      	ldr	r2, [r7, #4]
 801f368:	4613      	mov	r3, r2
 801f36a:	005b      	lsls	r3, r3, #1
 801f36c:	4413      	add	r3, r2
 801f36e:	00db      	lsls	r3, r3, #3
 801f370:	440b      	add	r3, r1
 801f372:	681b      	ldr	r3, [r3, #0]
 801f374:	4618      	mov	r0, r3
 801f376:	f7f9 f84d 	bl	8018414 <pbuf_free>
    arp_table[i].q = NULL;
 801f37a:	490b      	ldr	r1, [pc, #44]	; (801f3a8 <etharp_free_entry+0x60>)
 801f37c:	687a      	ldr	r2, [r7, #4]
 801f37e:	4613      	mov	r3, r2
 801f380:	005b      	lsls	r3, r3, #1
 801f382:	4413      	add	r3, r2
 801f384:	00db      	lsls	r3, r3, #3
 801f386:	440b      	add	r3, r1
 801f388:	2200      	movs	r2, #0
 801f38a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801f38c:	4906      	ldr	r1, [pc, #24]	; (801f3a8 <etharp_free_entry+0x60>)
 801f38e:	687a      	ldr	r2, [r7, #4]
 801f390:	4613      	mov	r3, r2
 801f392:	005b      	lsls	r3, r3, #1
 801f394:	4413      	add	r3, r2
 801f396:	00db      	lsls	r3, r3, #3
 801f398:	440b      	add	r3, r1
 801f39a:	3314      	adds	r3, #20
 801f39c:	2200      	movs	r2, #0
 801f39e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801f3a0:	bf00      	nop
 801f3a2:	3708      	adds	r7, #8
 801f3a4:	46bd      	mov	sp, r7
 801f3a6:	bd80      	pop	{r7, pc}
 801f3a8:	2002f044 	.word	0x2002f044

0801f3ac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801f3ac:	b580      	push	{r7, lr}
 801f3ae:	b082      	sub	sp, #8
 801f3b0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f3b2:	2300      	movs	r3, #0
 801f3b4:	607b      	str	r3, [r7, #4]
 801f3b6:	e096      	b.n	801f4e6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801f3b8:	494f      	ldr	r1, [pc, #316]	; (801f4f8 <etharp_tmr+0x14c>)
 801f3ba:	687a      	ldr	r2, [r7, #4]
 801f3bc:	4613      	mov	r3, r2
 801f3be:	005b      	lsls	r3, r3, #1
 801f3c0:	4413      	add	r3, r2
 801f3c2:	00db      	lsls	r3, r3, #3
 801f3c4:	440b      	add	r3, r1
 801f3c6:	3314      	adds	r3, #20
 801f3c8:	781b      	ldrb	r3, [r3, #0]
 801f3ca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801f3cc:	78fb      	ldrb	r3, [r7, #3]
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	f000 8086 	beq.w	801f4e0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801f3d4:	4948      	ldr	r1, [pc, #288]	; (801f4f8 <etharp_tmr+0x14c>)
 801f3d6:	687a      	ldr	r2, [r7, #4]
 801f3d8:	4613      	mov	r3, r2
 801f3da:	005b      	lsls	r3, r3, #1
 801f3dc:	4413      	add	r3, r2
 801f3de:	00db      	lsls	r3, r3, #3
 801f3e0:	440b      	add	r3, r1
 801f3e2:	3312      	adds	r3, #18
 801f3e4:	881b      	ldrh	r3, [r3, #0]
 801f3e6:	3301      	adds	r3, #1
 801f3e8:	b298      	uxth	r0, r3
 801f3ea:	4943      	ldr	r1, [pc, #268]	; (801f4f8 <etharp_tmr+0x14c>)
 801f3ec:	687a      	ldr	r2, [r7, #4]
 801f3ee:	4613      	mov	r3, r2
 801f3f0:	005b      	lsls	r3, r3, #1
 801f3f2:	4413      	add	r3, r2
 801f3f4:	00db      	lsls	r3, r3, #3
 801f3f6:	440b      	add	r3, r1
 801f3f8:	3312      	adds	r3, #18
 801f3fa:	4602      	mov	r2, r0
 801f3fc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801f3fe:	493e      	ldr	r1, [pc, #248]	; (801f4f8 <etharp_tmr+0x14c>)
 801f400:	687a      	ldr	r2, [r7, #4]
 801f402:	4613      	mov	r3, r2
 801f404:	005b      	lsls	r3, r3, #1
 801f406:	4413      	add	r3, r2
 801f408:	00db      	lsls	r3, r3, #3
 801f40a:	440b      	add	r3, r1
 801f40c:	3312      	adds	r3, #18
 801f40e:	881b      	ldrh	r3, [r3, #0]
 801f410:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801f414:	d215      	bcs.n	801f442 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801f416:	4938      	ldr	r1, [pc, #224]	; (801f4f8 <etharp_tmr+0x14c>)
 801f418:	687a      	ldr	r2, [r7, #4]
 801f41a:	4613      	mov	r3, r2
 801f41c:	005b      	lsls	r3, r3, #1
 801f41e:	4413      	add	r3, r2
 801f420:	00db      	lsls	r3, r3, #3
 801f422:	440b      	add	r3, r1
 801f424:	3314      	adds	r3, #20
 801f426:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801f428:	2b01      	cmp	r3, #1
 801f42a:	d10e      	bne.n	801f44a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801f42c:	4932      	ldr	r1, [pc, #200]	; (801f4f8 <etharp_tmr+0x14c>)
 801f42e:	687a      	ldr	r2, [r7, #4]
 801f430:	4613      	mov	r3, r2
 801f432:	005b      	lsls	r3, r3, #1
 801f434:	4413      	add	r3, r2
 801f436:	00db      	lsls	r3, r3, #3
 801f438:	440b      	add	r3, r1
 801f43a:	3312      	adds	r3, #18
 801f43c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801f43e:	2b04      	cmp	r3, #4
 801f440:	d903      	bls.n	801f44a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801f442:	6878      	ldr	r0, [r7, #4]
 801f444:	f7ff ff80 	bl	801f348 <etharp_free_entry>
 801f448:	e04a      	b.n	801f4e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801f44a:	492b      	ldr	r1, [pc, #172]	; (801f4f8 <etharp_tmr+0x14c>)
 801f44c:	687a      	ldr	r2, [r7, #4]
 801f44e:	4613      	mov	r3, r2
 801f450:	005b      	lsls	r3, r3, #1
 801f452:	4413      	add	r3, r2
 801f454:	00db      	lsls	r3, r3, #3
 801f456:	440b      	add	r3, r1
 801f458:	3314      	adds	r3, #20
 801f45a:	781b      	ldrb	r3, [r3, #0]
 801f45c:	2b03      	cmp	r3, #3
 801f45e:	d10a      	bne.n	801f476 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801f460:	4925      	ldr	r1, [pc, #148]	; (801f4f8 <etharp_tmr+0x14c>)
 801f462:	687a      	ldr	r2, [r7, #4]
 801f464:	4613      	mov	r3, r2
 801f466:	005b      	lsls	r3, r3, #1
 801f468:	4413      	add	r3, r2
 801f46a:	00db      	lsls	r3, r3, #3
 801f46c:	440b      	add	r3, r1
 801f46e:	3314      	adds	r3, #20
 801f470:	2204      	movs	r2, #4
 801f472:	701a      	strb	r2, [r3, #0]
 801f474:	e034      	b.n	801f4e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801f476:	4920      	ldr	r1, [pc, #128]	; (801f4f8 <etharp_tmr+0x14c>)
 801f478:	687a      	ldr	r2, [r7, #4]
 801f47a:	4613      	mov	r3, r2
 801f47c:	005b      	lsls	r3, r3, #1
 801f47e:	4413      	add	r3, r2
 801f480:	00db      	lsls	r3, r3, #3
 801f482:	440b      	add	r3, r1
 801f484:	3314      	adds	r3, #20
 801f486:	781b      	ldrb	r3, [r3, #0]
 801f488:	2b04      	cmp	r3, #4
 801f48a:	d10a      	bne.n	801f4a2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801f48c:	491a      	ldr	r1, [pc, #104]	; (801f4f8 <etharp_tmr+0x14c>)
 801f48e:	687a      	ldr	r2, [r7, #4]
 801f490:	4613      	mov	r3, r2
 801f492:	005b      	lsls	r3, r3, #1
 801f494:	4413      	add	r3, r2
 801f496:	00db      	lsls	r3, r3, #3
 801f498:	440b      	add	r3, r1
 801f49a:	3314      	adds	r3, #20
 801f49c:	2202      	movs	r2, #2
 801f49e:	701a      	strb	r2, [r3, #0]
 801f4a0:	e01e      	b.n	801f4e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801f4a2:	4915      	ldr	r1, [pc, #84]	; (801f4f8 <etharp_tmr+0x14c>)
 801f4a4:	687a      	ldr	r2, [r7, #4]
 801f4a6:	4613      	mov	r3, r2
 801f4a8:	005b      	lsls	r3, r3, #1
 801f4aa:	4413      	add	r3, r2
 801f4ac:	00db      	lsls	r3, r3, #3
 801f4ae:	440b      	add	r3, r1
 801f4b0:	3314      	adds	r3, #20
 801f4b2:	781b      	ldrb	r3, [r3, #0]
 801f4b4:	2b01      	cmp	r3, #1
 801f4b6:	d113      	bne.n	801f4e0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801f4b8:	490f      	ldr	r1, [pc, #60]	; (801f4f8 <etharp_tmr+0x14c>)
 801f4ba:	687a      	ldr	r2, [r7, #4]
 801f4bc:	4613      	mov	r3, r2
 801f4be:	005b      	lsls	r3, r3, #1
 801f4c0:	4413      	add	r3, r2
 801f4c2:	00db      	lsls	r3, r3, #3
 801f4c4:	440b      	add	r3, r1
 801f4c6:	3308      	adds	r3, #8
 801f4c8:	6818      	ldr	r0, [r3, #0]
 801f4ca:	687a      	ldr	r2, [r7, #4]
 801f4cc:	4613      	mov	r3, r2
 801f4ce:	005b      	lsls	r3, r3, #1
 801f4d0:	4413      	add	r3, r2
 801f4d2:	00db      	lsls	r3, r3, #3
 801f4d4:	4a08      	ldr	r2, [pc, #32]	; (801f4f8 <etharp_tmr+0x14c>)
 801f4d6:	4413      	add	r3, r2
 801f4d8:	3304      	adds	r3, #4
 801f4da:	4619      	mov	r1, r3
 801f4dc:	f000 fe6e 	bl	80201bc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f4e0:	687b      	ldr	r3, [r7, #4]
 801f4e2:	3301      	adds	r3, #1
 801f4e4:	607b      	str	r3, [r7, #4]
 801f4e6:	687b      	ldr	r3, [r7, #4]
 801f4e8:	2b09      	cmp	r3, #9
 801f4ea:	f77f af65 	ble.w	801f3b8 <etharp_tmr+0xc>
      }
    }
  }
}
 801f4ee:	bf00      	nop
 801f4f0:	bf00      	nop
 801f4f2:	3708      	adds	r7, #8
 801f4f4:	46bd      	mov	sp, r7
 801f4f6:	bd80      	pop	{r7, pc}
 801f4f8:	2002f044 	.word	0x2002f044

0801f4fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801f4fc:	b580      	push	{r7, lr}
 801f4fe:	b08a      	sub	sp, #40	; 0x28
 801f500:	af00      	add	r7, sp, #0
 801f502:	60f8      	str	r0, [r7, #12]
 801f504:	460b      	mov	r3, r1
 801f506:	607a      	str	r2, [r7, #4]
 801f508:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801f50a:	230a      	movs	r3, #10
 801f50c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801f50e:	230a      	movs	r3, #10
 801f510:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801f512:	230a      	movs	r3, #10
 801f514:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801f516:	2300      	movs	r3, #0
 801f518:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801f51a:	230a      	movs	r3, #10
 801f51c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801f51e:	2300      	movs	r3, #0
 801f520:	83bb      	strh	r3, [r7, #28]
 801f522:	2300      	movs	r3, #0
 801f524:	837b      	strh	r3, [r7, #26]
 801f526:	2300      	movs	r3, #0
 801f528:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f52a:	2300      	movs	r3, #0
 801f52c:	843b      	strh	r3, [r7, #32]
 801f52e:	e0ae      	b.n	801f68e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801f530:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f534:	49a6      	ldr	r1, [pc, #664]	; (801f7d0 <etharp_find_entry+0x2d4>)
 801f536:	4613      	mov	r3, r2
 801f538:	005b      	lsls	r3, r3, #1
 801f53a:	4413      	add	r3, r2
 801f53c:	00db      	lsls	r3, r3, #3
 801f53e:	440b      	add	r3, r1
 801f540:	3314      	adds	r3, #20
 801f542:	781b      	ldrb	r3, [r3, #0]
 801f544:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801f546:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801f54a:	2b0a      	cmp	r3, #10
 801f54c:	d105      	bne.n	801f55a <etharp_find_entry+0x5e>
 801f54e:	7dfb      	ldrb	r3, [r7, #23]
 801f550:	2b00      	cmp	r3, #0
 801f552:	d102      	bne.n	801f55a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801f554:	8c3b      	ldrh	r3, [r7, #32]
 801f556:	847b      	strh	r3, [r7, #34]	; 0x22
 801f558:	e095      	b.n	801f686 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801f55a:	7dfb      	ldrb	r3, [r7, #23]
 801f55c:	2b00      	cmp	r3, #0
 801f55e:	f000 8092 	beq.w	801f686 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801f562:	7dfb      	ldrb	r3, [r7, #23]
 801f564:	2b01      	cmp	r3, #1
 801f566:	d009      	beq.n	801f57c <etharp_find_entry+0x80>
 801f568:	7dfb      	ldrb	r3, [r7, #23]
 801f56a:	2b01      	cmp	r3, #1
 801f56c:	d806      	bhi.n	801f57c <etharp_find_entry+0x80>
 801f56e:	4b99      	ldr	r3, [pc, #612]	; (801f7d4 <etharp_find_entry+0x2d8>)
 801f570:	f240 1223 	movw	r2, #291	; 0x123
 801f574:	4998      	ldr	r1, [pc, #608]	; (801f7d8 <etharp_find_entry+0x2dc>)
 801f576:	4899      	ldr	r0, [pc, #612]	; (801f7dc <etharp_find_entry+0x2e0>)
 801f578:	f002 fee2 	bl	8022340 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801f57c:	68fb      	ldr	r3, [r7, #12]
 801f57e:	2b00      	cmp	r3, #0
 801f580:	d020      	beq.n	801f5c4 <etharp_find_entry+0xc8>
 801f582:	68fb      	ldr	r3, [r7, #12]
 801f584:	6819      	ldr	r1, [r3, #0]
 801f586:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f58a:	4891      	ldr	r0, [pc, #580]	; (801f7d0 <etharp_find_entry+0x2d4>)
 801f58c:	4613      	mov	r3, r2
 801f58e:	005b      	lsls	r3, r3, #1
 801f590:	4413      	add	r3, r2
 801f592:	00db      	lsls	r3, r3, #3
 801f594:	4403      	add	r3, r0
 801f596:	3304      	adds	r3, #4
 801f598:	681b      	ldr	r3, [r3, #0]
 801f59a:	4299      	cmp	r1, r3
 801f59c:	d112      	bne.n	801f5c4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801f59e:	687b      	ldr	r3, [r7, #4]
 801f5a0:	2b00      	cmp	r3, #0
 801f5a2:	d00c      	beq.n	801f5be <etharp_find_entry+0xc2>
 801f5a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f5a8:	4989      	ldr	r1, [pc, #548]	; (801f7d0 <etharp_find_entry+0x2d4>)
 801f5aa:	4613      	mov	r3, r2
 801f5ac:	005b      	lsls	r3, r3, #1
 801f5ae:	4413      	add	r3, r2
 801f5b0:	00db      	lsls	r3, r3, #3
 801f5b2:	440b      	add	r3, r1
 801f5b4:	3308      	adds	r3, #8
 801f5b6:	681b      	ldr	r3, [r3, #0]
 801f5b8:	687a      	ldr	r2, [r7, #4]
 801f5ba:	429a      	cmp	r2, r3
 801f5bc:	d102      	bne.n	801f5c4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801f5be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f5c2:	e100      	b.n	801f7c6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801f5c4:	7dfb      	ldrb	r3, [r7, #23]
 801f5c6:	2b01      	cmp	r3, #1
 801f5c8:	d140      	bne.n	801f64c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801f5ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f5ce:	4980      	ldr	r1, [pc, #512]	; (801f7d0 <etharp_find_entry+0x2d4>)
 801f5d0:	4613      	mov	r3, r2
 801f5d2:	005b      	lsls	r3, r3, #1
 801f5d4:	4413      	add	r3, r2
 801f5d6:	00db      	lsls	r3, r3, #3
 801f5d8:	440b      	add	r3, r1
 801f5da:	681b      	ldr	r3, [r3, #0]
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	d01a      	beq.n	801f616 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801f5e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f5e4:	497a      	ldr	r1, [pc, #488]	; (801f7d0 <etharp_find_entry+0x2d4>)
 801f5e6:	4613      	mov	r3, r2
 801f5e8:	005b      	lsls	r3, r3, #1
 801f5ea:	4413      	add	r3, r2
 801f5ec:	00db      	lsls	r3, r3, #3
 801f5ee:	440b      	add	r3, r1
 801f5f0:	3312      	adds	r3, #18
 801f5f2:	881b      	ldrh	r3, [r3, #0]
 801f5f4:	8bba      	ldrh	r2, [r7, #28]
 801f5f6:	429a      	cmp	r2, r3
 801f5f8:	d845      	bhi.n	801f686 <etharp_find_entry+0x18a>
            old_queue = i;
 801f5fa:	8c3b      	ldrh	r3, [r7, #32]
 801f5fc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801f5fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f602:	4973      	ldr	r1, [pc, #460]	; (801f7d0 <etharp_find_entry+0x2d4>)
 801f604:	4613      	mov	r3, r2
 801f606:	005b      	lsls	r3, r3, #1
 801f608:	4413      	add	r3, r2
 801f60a:	00db      	lsls	r3, r3, #3
 801f60c:	440b      	add	r3, r1
 801f60e:	3312      	adds	r3, #18
 801f610:	881b      	ldrh	r3, [r3, #0]
 801f612:	83bb      	strh	r3, [r7, #28]
 801f614:	e037      	b.n	801f686 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801f616:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f61a:	496d      	ldr	r1, [pc, #436]	; (801f7d0 <etharp_find_entry+0x2d4>)
 801f61c:	4613      	mov	r3, r2
 801f61e:	005b      	lsls	r3, r3, #1
 801f620:	4413      	add	r3, r2
 801f622:	00db      	lsls	r3, r3, #3
 801f624:	440b      	add	r3, r1
 801f626:	3312      	adds	r3, #18
 801f628:	881b      	ldrh	r3, [r3, #0]
 801f62a:	8b7a      	ldrh	r2, [r7, #26]
 801f62c:	429a      	cmp	r2, r3
 801f62e:	d82a      	bhi.n	801f686 <etharp_find_entry+0x18a>
            old_pending = i;
 801f630:	8c3b      	ldrh	r3, [r7, #32]
 801f632:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801f634:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f638:	4965      	ldr	r1, [pc, #404]	; (801f7d0 <etharp_find_entry+0x2d4>)
 801f63a:	4613      	mov	r3, r2
 801f63c:	005b      	lsls	r3, r3, #1
 801f63e:	4413      	add	r3, r2
 801f640:	00db      	lsls	r3, r3, #3
 801f642:	440b      	add	r3, r1
 801f644:	3312      	adds	r3, #18
 801f646:	881b      	ldrh	r3, [r3, #0]
 801f648:	837b      	strh	r3, [r7, #26]
 801f64a:	e01c      	b.n	801f686 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801f64c:	7dfb      	ldrb	r3, [r7, #23]
 801f64e:	2b01      	cmp	r3, #1
 801f650:	d919      	bls.n	801f686 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801f652:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f656:	495e      	ldr	r1, [pc, #376]	; (801f7d0 <etharp_find_entry+0x2d4>)
 801f658:	4613      	mov	r3, r2
 801f65a:	005b      	lsls	r3, r3, #1
 801f65c:	4413      	add	r3, r2
 801f65e:	00db      	lsls	r3, r3, #3
 801f660:	440b      	add	r3, r1
 801f662:	3312      	adds	r3, #18
 801f664:	881b      	ldrh	r3, [r3, #0]
 801f666:	8b3a      	ldrh	r2, [r7, #24]
 801f668:	429a      	cmp	r2, r3
 801f66a:	d80c      	bhi.n	801f686 <etharp_find_entry+0x18a>
            old_stable = i;
 801f66c:	8c3b      	ldrh	r3, [r7, #32]
 801f66e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801f670:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f674:	4956      	ldr	r1, [pc, #344]	; (801f7d0 <etharp_find_entry+0x2d4>)
 801f676:	4613      	mov	r3, r2
 801f678:	005b      	lsls	r3, r3, #1
 801f67a:	4413      	add	r3, r2
 801f67c:	00db      	lsls	r3, r3, #3
 801f67e:	440b      	add	r3, r1
 801f680:	3312      	adds	r3, #18
 801f682:	881b      	ldrh	r3, [r3, #0]
 801f684:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f686:	8c3b      	ldrh	r3, [r7, #32]
 801f688:	3301      	adds	r3, #1
 801f68a:	b29b      	uxth	r3, r3
 801f68c:	843b      	strh	r3, [r7, #32]
 801f68e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f692:	2b09      	cmp	r3, #9
 801f694:	f77f af4c 	ble.w	801f530 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801f698:	7afb      	ldrb	r3, [r7, #11]
 801f69a:	f003 0302 	and.w	r3, r3, #2
 801f69e:	2b00      	cmp	r3, #0
 801f6a0:	d108      	bne.n	801f6b4 <etharp_find_entry+0x1b8>
 801f6a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801f6a6:	2b0a      	cmp	r3, #10
 801f6a8:	d107      	bne.n	801f6ba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801f6aa:	7afb      	ldrb	r3, [r7, #11]
 801f6ac:	f003 0301 	and.w	r3, r3, #1
 801f6b0:	2b00      	cmp	r3, #0
 801f6b2:	d102      	bne.n	801f6ba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801f6b4:	f04f 33ff 	mov.w	r3, #4294967295
 801f6b8:	e085      	b.n	801f7c6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801f6ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801f6be:	2b09      	cmp	r3, #9
 801f6c0:	dc02      	bgt.n	801f6c8 <etharp_find_entry+0x1cc>
    i = empty;
 801f6c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f6c4:	843b      	strh	r3, [r7, #32]
 801f6c6:	e039      	b.n	801f73c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801f6c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801f6cc:	2b09      	cmp	r3, #9
 801f6ce:	dc14      	bgt.n	801f6fa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801f6d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f6d2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801f6d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f6d8:	493d      	ldr	r1, [pc, #244]	; (801f7d0 <etharp_find_entry+0x2d4>)
 801f6da:	4613      	mov	r3, r2
 801f6dc:	005b      	lsls	r3, r3, #1
 801f6de:	4413      	add	r3, r2
 801f6e0:	00db      	lsls	r3, r3, #3
 801f6e2:	440b      	add	r3, r1
 801f6e4:	681b      	ldr	r3, [r3, #0]
 801f6e6:	2b00      	cmp	r3, #0
 801f6e8:	d018      	beq.n	801f71c <etharp_find_entry+0x220>
 801f6ea:	4b3a      	ldr	r3, [pc, #232]	; (801f7d4 <etharp_find_entry+0x2d8>)
 801f6ec:	f240 126d 	movw	r2, #365	; 0x16d
 801f6f0:	493b      	ldr	r1, [pc, #236]	; (801f7e0 <etharp_find_entry+0x2e4>)
 801f6f2:	483a      	ldr	r0, [pc, #232]	; (801f7dc <etharp_find_entry+0x2e0>)
 801f6f4:	f002 fe24 	bl	8022340 <iprintf>
 801f6f8:	e010      	b.n	801f71c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801f6fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801f6fe:	2b09      	cmp	r3, #9
 801f700:	dc02      	bgt.n	801f708 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801f702:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801f704:	843b      	strh	r3, [r7, #32]
 801f706:	e009      	b.n	801f71c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801f708:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801f70c:	2b09      	cmp	r3, #9
 801f70e:	dc02      	bgt.n	801f716 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801f710:	8bfb      	ldrh	r3, [r7, #30]
 801f712:	843b      	strh	r3, [r7, #32]
 801f714:	e002      	b.n	801f71c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801f716:	f04f 33ff 	mov.w	r3, #4294967295
 801f71a:	e054      	b.n	801f7c6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801f71c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f720:	2b09      	cmp	r3, #9
 801f722:	dd06      	ble.n	801f732 <etharp_find_entry+0x236>
 801f724:	4b2b      	ldr	r3, [pc, #172]	; (801f7d4 <etharp_find_entry+0x2d8>)
 801f726:	f240 127f 	movw	r2, #383	; 0x17f
 801f72a:	492e      	ldr	r1, [pc, #184]	; (801f7e4 <etharp_find_entry+0x2e8>)
 801f72c:	482b      	ldr	r0, [pc, #172]	; (801f7dc <etharp_find_entry+0x2e0>)
 801f72e:	f002 fe07 	bl	8022340 <iprintf>
    etharp_free_entry(i);
 801f732:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f736:	4618      	mov	r0, r3
 801f738:	f7ff fe06 	bl	801f348 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801f73c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f740:	2b09      	cmp	r3, #9
 801f742:	dd06      	ble.n	801f752 <etharp_find_entry+0x256>
 801f744:	4b23      	ldr	r3, [pc, #140]	; (801f7d4 <etharp_find_entry+0x2d8>)
 801f746:	f240 1283 	movw	r2, #387	; 0x183
 801f74a:	4926      	ldr	r1, [pc, #152]	; (801f7e4 <etharp_find_entry+0x2e8>)
 801f74c:	4823      	ldr	r0, [pc, #140]	; (801f7dc <etharp_find_entry+0x2e0>)
 801f74e:	f002 fdf7 	bl	8022340 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801f752:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f756:	491e      	ldr	r1, [pc, #120]	; (801f7d0 <etharp_find_entry+0x2d4>)
 801f758:	4613      	mov	r3, r2
 801f75a:	005b      	lsls	r3, r3, #1
 801f75c:	4413      	add	r3, r2
 801f75e:	00db      	lsls	r3, r3, #3
 801f760:	440b      	add	r3, r1
 801f762:	3314      	adds	r3, #20
 801f764:	781b      	ldrb	r3, [r3, #0]
 801f766:	2b00      	cmp	r3, #0
 801f768:	d006      	beq.n	801f778 <etharp_find_entry+0x27c>
 801f76a:	4b1a      	ldr	r3, [pc, #104]	; (801f7d4 <etharp_find_entry+0x2d8>)
 801f76c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801f770:	491d      	ldr	r1, [pc, #116]	; (801f7e8 <etharp_find_entry+0x2ec>)
 801f772:	481a      	ldr	r0, [pc, #104]	; (801f7dc <etharp_find_entry+0x2e0>)
 801f774:	f002 fde4 	bl	8022340 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801f778:	68fb      	ldr	r3, [r7, #12]
 801f77a:	2b00      	cmp	r3, #0
 801f77c:	d00b      	beq.n	801f796 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801f77e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f782:	68fb      	ldr	r3, [r7, #12]
 801f784:	6819      	ldr	r1, [r3, #0]
 801f786:	4812      	ldr	r0, [pc, #72]	; (801f7d0 <etharp_find_entry+0x2d4>)
 801f788:	4613      	mov	r3, r2
 801f78a:	005b      	lsls	r3, r3, #1
 801f78c:	4413      	add	r3, r2
 801f78e:	00db      	lsls	r3, r3, #3
 801f790:	4403      	add	r3, r0
 801f792:	3304      	adds	r3, #4
 801f794:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801f796:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f79a:	490d      	ldr	r1, [pc, #52]	; (801f7d0 <etharp_find_entry+0x2d4>)
 801f79c:	4613      	mov	r3, r2
 801f79e:	005b      	lsls	r3, r3, #1
 801f7a0:	4413      	add	r3, r2
 801f7a2:	00db      	lsls	r3, r3, #3
 801f7a4:	440b      	add	r3, r1
 801f7a6:	3312      	adds	r3, #18
 801f7a8:	2200      	movs	r2, #0
 801f7aa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801f7ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f7b0:	4907      	ldr	r1, [pc, #28]	; (801f7d0 <etharp_find_entry+0x2d4>)
 801f7b2:	4613      	mov	r3, r2
 801f7b4:	005b      	lsls	r3, r3, #1
 801f7b6:	4413      	add	r3, r2
 801f7b8:	00db      	lsls	r3, r3, #3
 801f7ba:	440b      	add	r3, r1
 801f7bc:	3308      	adds	r3, #8
 801f7be:	687a      	ldr	r2, [r7, #4]
 801f7c0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801f7c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801f7c6:	4618      	mov	r0, r3
 801f7c8:	3728      	adds	r7, #40	; 0x28
 801f7ca:	46bd      	mov	sp, r7
 801f7cc:	bd80      	pop	{r7, pc}
 801f7ce:	bf00      	nop
 801f7d0:	2002f044 	.word	0x2002f044
 801f7d4:	080266e0 	.word	0x080266e0
 801f7d8:	08026718 	.word	0x08026718
 801f7dc:	08026758 	.word	0x08026758
 801f7e0:	08026780 	.word	0x08026780
 801f7e4:	08026798 	.word	0x08026798
 801f7e8:	080267ac 	.word	0x080267ac

0801f7ec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801f7ec:	b580      	push	{r7, lr}
 801f7ee:	b088      	sub	sp, #32
 801f7f0:	af02      	add	r7, sp, #8
 801f7f2:	60f8      	str	r0, [r7, #12]
 801f7f4:	60b9      	str	r1, [r7, #8]
 801f7f6:	607a      	str	r2, [r7, #4]
 801f7f8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801f7fa:	68fb      	ldr	r3, [r7, #12]
 801f7fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801f800:	2b06      	cmp	r3, #6
 801f802:	d006      	beq.n	801f812 <etharp_update_arp_entry+0x26>
 801f804:	4b48      	ldr	r3, [pc, #288]	; (801f928 <etharp_update_arp_entry+0x13c>)
 801f806:	f240 12a9 	movw	r2, #425	; 0x1a9
 801f80a:	4948      	ldr	r1, [pc, #288]	; (801f92c <etharp_update_arp_entry+0x140>)
 801f80c:	4848      	ldr	r0, [pc, #288]	; (801f930 <etharp_update_arp_entry+0x144>)
 801f80e:	f002 fd97 	bl	8022340 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801f812:	68bb      	ldr	r3, [r7, #8]
 801f814:	2b00      	cmp	r3, #0
 801f816:	d012      	beq.n	801f83e <etharp_update_arp_entry+0x52>
 801f818:	68bb      	ldr	r3, [r7, #8]
 801f81a:	681b      	ldr	r3, [r3, #0]
 801f81c:	2b00      	cmp	r3, #0
 801f81e:	d00e      	beq.n	801f83e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801f820:	68bb      	ldr	r3, [r7, #8]
 801f822:	681b      	ldr	r3, [r3, #0]
 801f824:	68f9      	ldr	r1, [r7, #12]
 801f826:	4618      	mov	r0, r3
 801f828:	f001 f924 	bl	8020a74 <ip4_addr_isbroadcast_u32>
 801f82c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801f82e:	2b00      	cmp	r3, #0
 801f830:	d105      	bne.n	801f83e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801f832:	68bb      	ldr	r3, [r7, #8]
 801f834:	681b      	ldr	r3, [r3, #0]
 801f836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801f83a:	2be0      	cmp	r3, #224	; 0xe0
 801f83c:	d102      	bne.n	801f844 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801f83e:	f06f 030f 	mvn.w	r3, #15
 801f842:	e06c      	b.n	801f91e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801f844:	78fb      	ldrb	r3, [r7, #3]
 801f846:	68fa      	ldr	r2, [r7, #12]
 801f848:	4619      	mov	r1, r3
 801f84a:	68b8      	ldr	r0, [r7, #8]
 801f84c:	f7ff fe56 	bl	801f4fc <etharp_find_entry>
 801f850:	4603      	mov	r3, r0
 801f852:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801f854:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801f858:	2b00      	cmp	r3, #0
 801f85a:	da02      	bge.n	801f862 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801f85c:	8afb      	ldrh	r3, [r7, #22]
 801f85e:	b25b      	sxtb	r3, r3
 801f860:	e05d      	b.n	801f91e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801f862:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f866:	4933      	ldr	r1, [pc, #204]	; (801f934 <etharp_update_arp_entry+0x148>)
 801f868:	4613      	mov	r3, r2
 801f86a:	005b      	lsls	r3, r3, #1
 801f86c:	4413      	add	r3, r2
 801f86e:	00db      	lsls	r3, r3, #3
 801f870:	440b      	add	r3, r1
 801f872:	3314      	adds	r3, #20
 801f874:	2202      	movs	r2, #2
 801f876:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801f878:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f87c:	492d      	ldr	r1, [pc, #180]	; (801f934 <etharp_update_arp_entry+0x148>)
 801f87e:	4613      	mov	r3, r2
 801f880:	005b      	lsls	r3, r3, #1
 801f882:	4413      	add	r3, r2
 801f884:	00db      	lsls	r3, r3, #3
 801f886:	440b      	add	r3, r1
 801f888:	3308      	adds	r3, #8
 801f88a:	68fa      	ldr	r2, [r7, #12]
 801f88c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801f88e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f892:	4613      	mov	r3, r2
 801f894:	005b      	lsls	r3, r3, #1
 801f896:	4413      	add	r3, r2
 801f898:	00db      	lsls	r3, r3, #3
 801f89a:	3308      	adds	r3, #8
 801f89c:	4a25      	ldr	r2, [pc, #148]	; (801f934 <etharp_update_arp_entry+0x148>)
 801f89e:	4413      	add	r3, r2
 801f8a0:	3304      	adds	r3, #4
 801f8a2:	2206      	movs	r2, #6
 801f8a4:	6879      	ldr	r1, [r7, #4]
 801f8a6:	4618      	mov	r0, r3
 801f8a8:	f002 febb 	bl	8022622 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801f8ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f8b0:	4920      	ldr	r1, [pc, #128]	; (801f934 <etharp_update_arp_entry+0x148>)
 801f8b2:	4613      	mov	r3, r2
 801f8b4:	005b      	lsls	r3, r3, #1
 801f8b6:	4413      	add	r3, r2
 801f8b8:	00db      	lsls	r3, r3, #3
 801f8ba:	440b      	add	r3, r1
 801f8bc:	3312      	adds	r3, #18
 801f8be:	2200      	movs	r2, #0
 801f8c0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801f8c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f8c6:	491b      	ldr	r1, [pc, #108]	; (801f934 <etharp_update_arp_entry+0x148>)
 801f8c8:	4613      	mov	r3, r2
 801f8ca:	005b      	lsls	r3, r3, #1
 801f8cc:	4413      	add	r3, r2
 801f8ce:	00db      	lsls	r3, r3, #3
 801f8d0:	440b      	add	r3, r1
 801f8d2:	681b      	ldr	r3, [r3, #0]
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	d021      	beq.n	801f91c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801f8d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f8dc:	4915      	ldr	r1, [pc, #84]	; (801f934 <etharp_update_arp_entry+0x148>)
 801f8de:	4613      	mov	r3, r2
 801f8e0:	005b      	lsls	r3, r3, #1
 801f8e2:	4413      	add	r3, r2
 801f8e4:	00db      	lsls	r3, r3, #3
 801f8e6:	440b      	add	r3, r1
 801f8e8:	681b      	ldr	r3, [r3, #0]
 801f8ea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801f8ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f8f0:	4910      	ldr	r1, [pc, #64]	; (801f934 <etharp_update_arp_entry+0x148>)
 801f8f2:	4613      	mov	r3, r2
 801f8f4:	005b      	lsls	r3, r3, #1
 801f8f6:	4413      	add	r3, r2
 801f8f8:	00db      	lsls	r3, r3, #3
 801f8fa:	440b      	add	r3, r1
 801f8fc:	2200      	movs	r2, #0
 801f8fe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801f900:	68fb      	ldr	r3, [r7, #12]
 801f902:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801f906:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f90a:	9300      	str	r3, [sp, #0]
 801f90c:	687b      	ldr	r3, [r7, #4]
 801f90e:	6939      	ldr	r1, [r7, #16]
 801f910:	68f8      	ldr	r0, [r7, #12]
 801f912:	f001 ffbd 	bl	8021890 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801f916:	6938      	ldr	r0, [r7, #16]
 801f918:	f7f8 fd7c 	bl	8018414 <pbuf_free>
  }
  return ERR_OK;
 801f91c:	2300      	movs	r3, #0
}
 801f91e:	4618      	mov	r0, r3
 801f920:	3718      	adds	r7, #24
 801f922:	46bd      	mov	sp, r7
 801f924:	bd80      	pop	{r7, pc}
 801f926:	bf00      	nop
 801f928:	080266e0 	.word	0x080266e0
 801f92c:	080267d8 	.word	0x080267d8
 801f930:	08026758 	.word	0x08026758
 801f934:	2002f044 	.word	0x2002f044

0801f938 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801f938:	b580      	push	{r7, lr}
 801f93a:	b084      	sub	sp, #16
 801f93c:	af00      	add	r7, sp, #0
 801f93e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f940:	2300      	movs	r3, #0
 801f942:	60fb      	str	r3, [r7, #12]
 801f944:	e01e      	b.n	801f984 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801f946:	4913      	ldr	r1, [pc, #76]	; (801f994 <etharp_cleanup_netif+0x5c>)
 801f948:	68fa      	ldr	r2, [r7, #12]
 801f94a:	4613      	mov	r3, r2
 801f94c:	005b      	lsls	r3, r3, #1
 801f94e:	4413      	add	r3, r2
 801f950:	00db      	lsls	r3, r3, #3
 801f952:	440b      	add	r3, r1
 801f954:	3314      	adds	r3, #20
 801f956:	781b      	ldrb	r3, [r3, #0]
 801f958:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801f95a:	7afb      	ldrb	r3, [r7, #11]
 801f95c:	2b00      	cmp	r3, #0
 801f95e:	d00e      	beq.n	801f97e <etharp_cleanup_netif+0x46>
 801f960:	490c      	ldr	r1, [pc, #48]	; (801f994 <etharp_cleanup_netif+0x5c>)
 801f962:	68fa      	ldr	r2, [r7, #12]
 801f964:	4613      	mov	r3, r2
 801f966:	005b      	lsls	r3, r3, #1
 801f968:	4413      	add	r3, r2
 801f96a:	00db      	lsls	r3, r3, #3
 801f96c:	440b      	add	r3, r1
 801f96e:	3308      	adds	r3, #8
 801f970:	681b      	ldr	r3, [r3, #0]
 801f972:	687a      	ldr	r2, [r7, #4]
 801f974:	429a      	cmp	r2, r3
 801f976:	d102      	bne.n	801f97e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801f978:	68f8      	ldr	r0, [r7, #12]
 801f97a:	f7ff fce5 	bl	801f348 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f97e:	68fb      	ldr	r3, [r7, #12]
 801f980:	3301      	adds	r3, #1
 801f982:	60fb      	str	r3, [r7, #12]
 801f984:	68fb      	ldr	r3, [r7, #12]
 801f986:	2b09      	cmp	r3, #9
 801f988:	dddd      	ble.n	801f946 <etharp_cleanup_netif+0xe>
    }
  }
}
 801f98a:	bf00      	nop
 801f98c:	bf00      	nop
 801f98e:	3710      	adds	r7, #16
 801f990:	46bd      	mov	sp, r7
 801f992:	bd80      	pop	{r7, pc}
 801f994:	2002f044 	.word	0x2002f044

0801f998 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801f998:	b5b0      	push	{r4, r5, r7, lr}
 801f99a:	b08a      	sub	sp, #40	; 0x28
 801f99c:	af04      	add	r7, sp, #16
 801f99e:	6078      	str	r0, [r7, #4]
 801f9a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801f9a2:	683b      	ldr	r3, [r7, #0]
 801f9a4:	2b00      	cmp	r3, #0
 801f9a6:	d107      	bne.n	801f9b8 <etharp_input+0x20>
 801f9a8:	4b3d      	ldr	r3, [pc, #244]	; (801faa0 <etharp_input+0x108>)
 801f9aa:	f240 228a 	movw	r2, #650	; 0x28a
 801f9ae:	493d      	ldr	r1, [pc, #244]	; (801faa4 <etharp_input+0x10c>)
 801f9b0:	483d      	ldr	r0, [pc, #244]	; (801faa8 <etharp_input+0x110>)
 801f9b2:	f002 fcc5 	bl	8022340 <iprintf>
 801f9b6:	e06f      	b.n	801fa98 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801f9b8:	687b      	ldr	r3, [r7, #4]
 801f9ba:	685b      	ldr	r3, [r3, #4]
 801f9bc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801f9be:	693b      	ldr	r3, [r7, #16]
 801f9c0:	881b      	ldrh	r3, [r3, #0]
 801f9c2:	b29b      	uxth	r3, r3
 801f9c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f9c8:	d10c      	bne.n	801f9e4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801f9ca:	693b      	ldr	r3, [r7, #16]
 801f9cc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801f9ce:	2b06      	cmp	r3, #6
 801f9d0:	d108      	bne.n	801f9e4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801f9d2:	693b      	ldr	r3, [r7, #16]
 801f9d4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801f9d6:	2b04      	cmp	r3, #4
 801f9d8:	d104      	bne.n	801f9e4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801f9da:	693b      	ldr	r3, [r7, #16]
 801f9dc:	885b      	ldrh	r3, [r3, #2]
 801f9de:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801f9e0:	2b08      	cmp	r3, #8
 801f9e2:	d003      	beq.n	801f9ec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801f9e4:	6878      	ldr	r0, [r7, #4]
 801f9e6:	f7f8 fd15 	bl	8018414 <pbuf_free>
    return;
 801f9ea:	e055      	b.n	801fa98 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801f9ec:	693b      	ldr	r3, [r7, #16]
 801f9ee:	330e      	adds	r3, #14
 801f9f0:	681b      	ldr	r3, [r3, #0]
 801f9f2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801f9f4:	693b      	ldr	r3, [r7, #16]
 801f9f6:	3318      	adds	r3, #24
 801f9f8:	681b      	ldr	r3, [r3, #0]
 801f9fa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801f9fc:	683b      	ldr	r3, [r7, #0]
 801f9fe:	3304      	adds	r3, #4
 801fa00:	681b      	ldr	r3, [r3, #0]
 801fa02:	2b00      	cmp	r3, #0
 801fa04:	d102      	bne.n	801fa0c <etharp_input+0x74>
    for_us = 0;
 801fa06:	2300      	movs	r3, #0
 801fa08:	75fb      	strb	r3, [r7, #23]
 801fa0a:	e009      	b.n	801fa20 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801fa0c:	68ba      	ldr	r2, [r7, #8]
 801fa0e:	683b      	ldr	r3, [r7, #0]
 801fa10:	3304      	adds	r3, #4
 801fa12:	681b      	ldr	r3, [r3, #0]
 801fa14:	429a      	cmp	r2, r3
 801fa16:	bf0c      	ite	eq
 801fa18:	2301      	moveq	r3, #1
 801fa1a:	2300      	movne	r3, #0
 801fa1c:	b2db      	uxtb	r3, r3
 801fa1e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801fa20:	693b      	ldr	r3, [r7, #16]
 801fa22:	f103 0208 	add.w	r2, r3, #8
 801fa26:	7dfb      	ldrb	r3, [r7, #23]
 801fa28:	2b00      	cmp	r3, #0
 801fa2a:	d001      	beq.n	801fa30 <etharp_input+0x98>
 801fa2c:	2301      	movs	r3, #1
 801fa2e:	e000      	b.n	801fa32 <etharp_input+0x9a>
 801fa30:	2302      	movs	r3, #2
 801fa32:	f107 010c 	add.w	r1, r7, #12
 801fa36:	6838      	ldr	r0, [r7, #0]
 801fa38:	f7ff fed8 	bl	801f7ec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801fa3c:	693b      	ldr	r3, [r7, #16]
 801fa3e:	88db      	ldrh	r3, [r3, #6]
 801fa40:	b29b      	uxth	r3, r3
 801fa42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801fa46:	d003      	beq.n	801fa50 <etharp_input+0xb8>
 801fa48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fa4c:	d01e      	beq.n	801fa8c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801fa4e:	e020      	b.n	801fa92 <etharp_input+0xfa>
      if (for_us) {
 801fa50:	7dfb      	ldrb	r3, [r7, #23]
 801fa52:	2b00      	cmp	r3, #0
 801fa54:	d01c      	beq.n	801fa90 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801fa56:	683b      	ldr	r3, [r7, #0]
 801fa58:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801fa5c:	693b      	ldr	r3, [r7, #16]
 801fa5e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801fa62:	683b      	ldr	r3, [r7, #0]
 801fa64:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801fa68:	683b      	ldr	r3, [r7, #0]
 801fa6a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801fa6c:	693a      	ldr	r2, [r7, #16]
 801fa6e:	3208      	adds	r2, #8
        etharp_raw(netif,
 801fa70:	2102      	movs	r1, #2
 801fa72:	9103      	str	r1, [sp, #12]
 801fa74:	f107 010c 	add.w	r1, r7, #12
 801fa78:	9102      	str	r1, [sp, #8]
 801fa7a:	9201      	str	r2, [sp, #4]
 801fa7c:	9300      	str	r3, [sp, #0]
 801fa7e:	462b      	mov	r3, r5
 801fa80:	4622      	mov	r2, r4
 801fa82:	4601      	mov	r1, r0
 801fa84:	6838      	ldr	r0, [r7, #0]
 801fa86:	f000 faeb 	bl	8020060 <etharp_raw>
      break;
 801fa8a:	e001      	b.n	801fa90 <etharp_input+0xf8>
      break;
 801fa8c:	bf00      	nop
 801fa8e:	e000      	b.n	801fa92 <etharp_input+0xfa>
      break;
 801fa90:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801fa92:	6878      	ldr	r0, [r7, #4]
 801fa94:	f7f8 fcbe 	bl	8018414 <pbuf_free>
}
 801fa98:	3718      	adds	r7, #24
 801fa9a:	46bd      	mov	sp, r7
 801fa9c:	bdb0      	pop	{r4, r5, r7, pc}
 801fa9e:	bf00      	nop
 801faa0:	080266e0 	.word	0x080266e0
 801faa4:	08026830 	.word	0x08026830
 801faa8:	08026758 	.word	0x08026758

0801faac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801faac:	b580      	push	{r7, lr}
 801faae:	b086      	sub	sp, #24
 801fab0:	af02      	add	r7, sp, #8
 801fab2:	60f8      	str	r0, [r7, #12]
 801fab4:	60b9      	str	r1, [r7, #8]
 801fab6:	4613      	mov	r3, r2
 801fab8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801faba:	79fa      	ldrb	r2, [r7, #7]
 801fabc:	4944      	ldr	r1, [pc, #272]	; (801fbd0 <etharp_output_to_arp_index+0x124>)
 801fabe:	4613      	mov	r3, r2
 801fac0:	005b      	lsls	r3, r3, #1
 801fac2:	4413      	add	r3, r2
 801fac4:	00db      	lsls	r3, r3, #3
 801fac6:	440b      	add	r3, r1
 801fac8:	3314      	adds	r3, #20
 801faca:	781b      	ldrb	r3, [r3, #0]
 801facc:	2b01      	cmp	r3, #1
 801face:	d806      	bhi.n	801fade <etharp_output_to_arp_index+0x32>
 801fad0:	4b40      	ldr	r3, [pc, #256]	; (801fbd4 <etharp_output_to_arp_index+0x128>)
 801fad2:	f240 22ee 	movw	r2, #750	; 0x2ee
 801fad6:	4940      	ldr	r1, [pc, #256]	; (801fbd8 <etharp_output_to_arp_index+0x12c>)
 801fad8:	4840      	ldr	r0, [pc, #256]	; (801fbdc <etharp_output_to_arp_index+0x130>)
 801fada:	f002 fc31 	bl	8022340 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801fade:	79fa      	ldrb	r2, [r7, #7]
 801fae0:	493b      	ldr	r1, [pc, #236]	; (801fbd0 <etharp_output_to_arp_index+0x124>)
 801fae2:	4613      	mov	r3, r2
 801fae4:	005b      	lsls	r3, r3, #1
 801fae6:	4413      	add	r3, r2
 801fae8:	00db      	lsls	r3, r3, #3
 801faea:	440b      	add	r3, r1
 801faec:	3314      	adds	r3, #20
 801faee:	781b      	ldrb	r3, [r3, #0]
 801faf0:	2b02      	cmp	r3, #2
 801faf2:	d153      	bne.n	801fb9c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801faf4:	79fa      	ldrb	r2, [r7, #7]
 801faf6:	4936      	ldr	r1, [pc, #216]	; (801fbd0 <etharp_output_to_arp_index+0x124>)
 801faf8:	4613      	mov	r3, r2
 801fafa:	005b      	lsls	r3, r3, #1
 801fafc:	4413      	add	r3, r2
 801fafe:	00db      	lsls	r3, r3, #3
 801fb00:	440b      	add	r3, r1
 801fb02:	3312      	adds	r3, #18
 801fb04:	881b      	ldrh	r3, [r3, #0]
 801fb06:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801fb0a:	d919      	bls.n	801fb40 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801fb0c:	79fa      	ldrb	r2, [r7, #7]
 801fb0e:	4613      	mov	r3, r2
 801fb10:	005b      	lsls	r3, r3, #1
 801fb12:	4413      	add	r3, r2
 801fb14:	00db      	lsls	r3, r3, #3
 801fb16:	4a2e      	ldr	r2, [pc, #184]	; (801fbd0 <etharp_output_to_arp_index+0x124>)
 801fb18:	4413      	add	r3, r2
 801fb1a:	3304      	adds	r3, #4
 801fb1c:	4619      	mov	r1, r3
 801fb1e:	68f8      	ldr	r0, [r7, #12]
 801fb20:	f000 fb4c 	bl	80201bc <etharp_request>
 801fb24:	4603      	mov	r3, r0
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	d138      	bne.n	801fb9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801fb2a:	79fa      	ldrb	r2, [r7, #7]
 801fb2c:	4928      	ldr	r1, [pc, #160]	; (801fbd0 <etharp_output_to_arp_index+0x124>)
 801fb2e:	4613      	mov	r3, r2
 801fb30:	005b      	lsls	r3, r3, #1
 801fb32:	4413      	add	r3, r2
 801fb34:	00db      	lsls	r3, r3, #3
 801fb36:	440b      	add	r3, r1
 801fb38:	3314      	adds	r3, #20
 801fb3a:	2203      	movs	r2, #3
 801fb3c:	701a      	strb	r2, [r3, #0]
 801fb3e:	e02d      	b.n	801fb9c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801fb40:	79fa      	ldrb	r2, [r7, #7]
 801fb42:	4923      	ldr	r1, [pc, #140]	; (801fbd0 <etharp_output_to_arp_index+0x124>)
 801fb44:	4613      	mov	r3, r2
 801fb46:	005b      	lsls	r3, r3, #1
 801fb48:	4413      	add	r3, r2
 801fb4a:	00db      	lsls	r3, r3, #3
 801fb4c:	440b      	add	r3, r1
 801fb4e:	3312      	adds	r3, #18
 801fb50:	881b      	ldrh	r3, [r3, #0]
 801fb52:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801fb56:	d321      	bcc.n	801fb9c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801fb58:	79fa      	ldrb	r2, [r7, #7]
 801fb5a:	4613      	mov	r3, r2
 801fb5c:	005b      	lsls	r3, r3, #1
 801fb5e:	4413      	add	r3, r2
 801fb60:	00db      	lsls	r3, r3, #3
 801fb62:	4a1b      	ldr	r2, [pc, #108]	; (801fbd0 <etharp_output_to_arp_index+0x124>)
 801fb64:	4413      	add	r3, r2
 801fb66:	1d19      	adds	r1, r3, #4
 801fb68:	79fa      	ldrb	r2, [r7, #7]
 801fb6a:	4613      	mov	r3, r2
 801fb6c:	005b      	lsls	r3, r3, #1
 801fb6e:	4413      	add	r3, r2
 801fb70:	00db      	lsls	r3, r3, #3
 801fb72:	3308      	adds	r3, #8
 801fb74:	4a16      	ldr	r2, [pc, #88]	; (801fbd0 <etharp_output_to_arp_index+0x124>)
 801fb76:	4413      	add	r3, r2
 801fb78:	3304      	adds	r3, #4
 801fb7a:	461a      	mov	r2, r3
 801fb7c:	68f8      	ldr	r0, [r7, #12]
 801fb7e:	f000 fafb 	bl	8020178 <etharp_request_dst>
 801fb82:	4603      	mov	r3, r0
 801fb84:	2b00      	cmp	r3, #0
 801fb86:	d109      	bne.n	801fb9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801fb88:	79fa      	ldrb	r2, [r7, #7]
 801fb8a:	4911      	ldr	r1, [pc, #68]	; (801fbd0 <etharp_output_to_arp_index+0x124>)
 801fb8c:	4613      	mov	r3, r2
 801fb8e:	005b      	lsls	r3, r3, #1
 801fb90:	4413      	add	r3, r2
 801fb92:	00db      	lsls	r3, r3, #3
 801fb94:	440b      	add	r3, r1
 801fb96:	3314      	adds	r3, #20
 801fb98:	2203      	movs	r2, #3
 801fb9a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801fb9c:	68fb      	ldr	r3, [r7, #12]
 801fb9e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801fba2:	79fa      	ldrb	r2, [r7, #7]
 801fba4:	4613      	mov	r3, r2
 801fba6:	005b      	lsls	r3, r3, #1
 801fba8:	4413      	add	r3, r2
 801fbaa:	00db      	lsls	r3, r3, #3
 801fbac:	3308      	adds	r3, #8
 801fbae:	4a08      	ldr	r2, [pc, #32]	; (801fbd0 <etharp_output_to_arp_index+0x124>)
 801fbb0:	4413      	add	r3, r2
 801fbb2:	3304      	adds	r3, #4
 801fbb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801fbb8:	9200      	str	r2, [sp, #0]
 801fbba:	460a      	mov	r2, r1
 801fbbc:	68b9      	ldr	r1, [r7, #8]
 801fbbe:	68f8      	ldr	r0, [r7, #12]
 801fbc0:	f001 fe66 	bl	8021890 <ethernet_output>
 801fbc4:	4603      	mov	r3, r0
}
 801fbc6:	4618      	mov	r0, r3
 801fbc8:	3710      	adds	r7, #16
 801fbca:	46bd      	mov	sp, r7
 801fbcc:	bd80      	pop	{r7, pc}
 801fbce:	bf00      	nop
 801fbd0:	2002f044 	.word	0x2002f044
 801fbd4:	080266e0 	.word	0x080266e0
 801fbd8:	08026850 	.word	0x08026850
 801fbdc:	08026758 	.word	0x08026758

0801fbe0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801fbe0:	b580      	push	{r7, lr}
 801fbe2:	b08a      	sub	sp, #40	; 0x28
 801fbe4:	af02      	add	r7, sp, #8
 801fbe6:	60f8      	str	r0, [r7, #12]
 801fbe8:	60b9      	str	r1, [r7, #8]
 801fbea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801fbec:	687b      	ldr	r3, [r7, #4]
 801fbee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801fbf0:	68fb      	ldr	r3, [r7, #12]
 801fbf2:	2b00      	cmp	r3, #0
 801fbf4:	d106      	bne.n	801fc04 <etharp_output+0x24>
 801fbf6:	4b73      	ldr	r3, [pc, #460]	; (801fdc4 <etharp_output+0x1e4>)
 801fbf8:	f240 321e 	movw	r2, #798	; 0x31e
 801fbfc:	4972      	ldr	r1, [pc, #456]	; (801fdc8 <etharp_output+0x1e8>)
 801fbfe:	4873      	ldr	r0, [pc, #460]	; (801fdcc <etharp_output+0x1ec>)
 801fc00:	f002 fb9e 	bl	8022340 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801fc04:	68bb      	ldr	r3, [r7, #8]
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	d106      	bne.n	801fc18 <etharp_output+0x38>
 801fc0a:	4b6e      	ldr	r3, [pc, #440]	; (801fdc4 <etharp_output+0x1e4>)
 801fc0c:	f240 321f 	movw	r2, #799	; 0x31f
 801fc10:	496f      	ldr	r1, [pc, #444]	; (801fdd0 <etharp_output+0x1f0>)
 801fc12:	486e      	ldr	r0, [pc, #440]	; (801fdcc <etharp_output+0x1ec>)
 801fc14:	f002 fb94 	bl	8022340 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801fc18:	687b      	ldr	r3, [r7, #4]
 801fc1a:	2b00      	cmp	r3, #0
 801fc1c:	d106      	bne.n	801fc2c <etharp_output+0x4c>
 801fc1e:	4b69      	ldr	r3, [pc, #420]	; (801fdc4 <etharp_output+0x1e4>)
 801fc20:	f44f 7248 	mov.w	r2, #800	; 0x320
 801fc24:	496b      	ldr	r1, [pc, #428]	; (801fdd4 <etharp_output+0x1f4>)
 801fc26:	4869      	ldr	r0, [pc, #420]	; (801fdcc <etharp_output+0x1ec>)
 801fc28:	f002 fb8a 	bl	8022340 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801fc2c:	687b      	ldr	r3, [r7, #4]
 801fc2e:	681b      	ldr	r3, [r3, #0]
 801fc30:	68f9      	ldr	r1, [r7, #12]
 801fc32:	4618      	mov	r0, r3
 801fc34:	f000 ff1e 	bl	8020a74 <ip4_addr_isbroadcast_u32>
 801fc38:	4603      	mov	r3, r0
 801fc3a:	2b00      	cmp	r3, #0
 801fc3c:	d002      	beq.n	801fc44 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801fc3e:	4b66      	ldr	r3, [pc, #408]	; (801fdd8 <etharp_output+0x1f8>)
 801fc40:	61fb      	str	r3, [r7, #28]
 801fc42:	e0af      	b.n	801fda4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801fc44:	687b      	ldr	r3, [r7, #4]
 801fc46:	681b      	ldr	r3, [r3, #0]
 801fc48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801fc4c:	2be0      	cmp	r3, #224	; 0xe0
 801fc4e:	d118      	bne.n	801fc82 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801fc50:	2301      	movs	r3, #1
 801fc52:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801fc54:	2300      	movs	r3, #0
 801fc56:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801fc58:	235e      	movs	r3, #94	; 0x5e
 801fc5a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801fc5c:	687b      	ldr	r3, [r7, #4]
 801fc5e:	3301      	adds	r3, #1
 801fc60:	781b      	ldrb	r3, [r3, #0]
 801fc62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801fc66:	b2db      	uxtb	r3, r3
 801fc68:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801fc6a:	687b      	ldr	r3, [r7, #4]
 801fc6c:	3302      	adds	r3, #2
 801fc6e:	781b      	ldrb	r3, [r3, #0]
 801fc70:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801fc72:	687b      	ldr	r3, [r7, #4]
 801fc74:	3303      	adds	r3, #3
 801fc76:	781b      	ldrb	r3, [r3, #0]
 801fc78:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801fc7a:	f107 0310 	add.w	r3, r7, #16
 801fc7e:	61fb      	str	r3, [r7, #28]
 801fc80:	e090      	b.n	801fda4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801fc82:	687b      	ldr	r3, [r7, #4]
 801fc84:	681a      	ldr	r2, [r3, #0]
 801fc86:	68fb      	ldr	r3, [r7, #12]
 801fc88:	3304      	adds	r3, #4
 801fc8a:	681b      	ldr	r3, [r3, #0]
 801fc8c:	405a      	eors	r2, r3
 801fc8e:	68fb      	ldr	r3, [r7, #12]
 801fc90:	3308      	adds	r3, #8
 801fc92:	681b      	ldr	r3, [r3, #0]
 801fc94:	4013      	ands	r3, r2
 801fc96:	2b00      	cmp	r3, #0
 801fc98:	d012      	beq.n	801fcc0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801fc9a:	687b      	ldr	r3, [r7, #4]
 801fc9c:	681b      	ldr	r3, [r3, #0]
 801fc9e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801fca0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801fca4:	4293      	cmp	r3, r2
 801fca6:	d00b      	beq.n	801fcc0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801fca8:	68fb      	ldr	r3, [r7, #12]
 801fcaa:	330c      	adds	r3, #12
 801fcac:	681b      	ldr	r3, [r3, #0]
 801fcae:	2b00      	cmp	r3, #0
 801fcb0:	d003      	beq.n	801fcba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801fcb2:	68fb      	ldr	r3, [r7, #12]
 801fcb4:	330c      	adds	r3, #12
 801fcb6:	61bb      	str	r3, [r7, #24]
 801fcb8:	e002      	b.n	801fcc0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801fcba:	f06f 0303 	mvn.w	r3, #3
 801fcbe:	e07d      	b.n	801fdbc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801fcc0:	4b46      	ldr	r3, [pc, #280]	; (801fddc <etharp_output+0x1fc>)
 801fcc2:	781b      	ldrb	r3, [r3, #0]
 801fcc4:	4619      	mov	r1, r3
 801fcc6:	4a46      	ldr	r2, [pc, #280]	; (801fde0 <etharp_output+0x200>)
 801fcc8:	460b      	mov	r3, r1
 801fcca:	005b      	lsls	r3, r3, #1
 801fccc:	440b      	add	r3, r1
 801fcce:	00db      	lsls	r3, r3, #3
 801fcd0:	4413      	add	r3, r2
 801fcd2:	3314      	adds	r3, #20
 801fcd4:	781b      	ldrb	r3, [r3, #0]
 801fcd6:	2b01      	cmp	r3, #1
 801fcd8:	d925      	bls.n	801fd26 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801fcda:	4b40      	ldr	r3, [pc, #256]	; (801fddc <etharp_output+0x1fc>)
 801fcdc:	781b      	ldrb	r3, [r3, #0]
 801fcde:	4619      	mov	r1, r3
 801fce0:	4a3f      	ldr	r2, [pc, #252]	; (801fde0 <etharp_output+0x200>)
 801fce2:	460b      	mov	r3, r1
 801fce4:	005b      	lsls	r3, r3, #1
 801fce6:	440b      	add	r3, r1
 801fce8:	00db      	lsls	r3, r3, #3
 801fcea:	4413      	add	r3, r2
 801fcec:	3308      	adds	r3, #8
 801fcee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801fcf0:	68fa      	ldr	r2, [r7, #12]
 801fcf2:	429a      	cmp	r2, r3
 801fcf4:	d117      	bne.n	801fd26 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801fcf6:	69bb      	ldr	r3, [r7, #24]
 801fcf8:	681a      	ldr	r2, [r3, #0]
 801fcfa:	4b38      	ldr	r3, [pc, #224]	; (801fddc <etharp_output+0x1fc>)
 801fcfc:	781b      	ldrb	r3, [r3, #0]
 801fcfe:	4618      	mov	r0, r3
 801fd00:	4937      	ldr	r1, [pc, #220]	; (801fde0 <etharp_output+0x200>)
 801fd02:	4603      	mov	r3, r0
 801fd04:	005b      	lsls	r3, r3, #1
 801fd06:	4403      	add	r3, r0
 801fd08:	00db      	lsls	r3, r3, #3
 801fd0a:	440b      	add	r3, r1
 801fd0c:	3304      	adds	r3, #4
 801fd0e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801fd10:	429a      	cmp	r2, r3
 801fd12:	d108      	bne.n	801fd26 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801fd14:	4b31      	ldr	r3, [pc, #196]	; (801fddc <etharp_output+0x1fc>)
 801fd16:	781b      	ldrb	r3, [r3, #0]
 801fd18:	461a      	mov	r2, r3
 801fd1a:	68b9      	ldr	r1, [r7, #8]
 801fd1c:	68f8      	ldr	r0, [r7, #12]
 801fd1e:	f7ff fec5 	bl	801faac <etharp_output_to_arp_index>
 801fd22:	4603      	mov	r3, r0
 801fd24:	e04a      	b.n	801fdbc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801fd26:	2300      	movs	r3, #0
 801fd28:	75fb      	strb	r3, [r7, #23]
 801fd2a:	e031      	b.n	801fd90 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801fd2c:	7dfa      	ldrb	r2, [r7, #23]
 801fd2e:	492c      	ldr	r1, [pc, #176]	; (801fde0 <etharp_output+0x200>)
 801fd30:	4613      	mov	r3, r2
 801fd32:	005b      	lsls	r3, r3, #1
 801fd34:	4413      	add	r3, r2
 801fd36:	00db      	lsls	r3, r3, #3
 801fd38:	440b      	add	r3, r1
 801fd3a:	3314      	adds	r3, #20
 801fd3c:	781b      	ldrb	r3, [r3, #0]
 801fd3e:	2b01      	cmp	r3, #1
 801fd40:	d923      	bls.n	801fd8a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801fd42:	7dfa      	ldrb	r2, [r7, #23]
 801fd44:	4926      	ldr	r1, [pc, #152]	; (801fde0 <etharp_output+0x200>)
 801fd46:	4613      	mov	r3, r2
 801fd48:	005b      	lsls	r3, r3, #1
 801fd4a:	4413      	add	r3, r2
 801fd4c:	00db      	lsls	r3, r3, #3
 801fd4e:	440b      	add	r3, r1
 801fd50:	3308      	adds	r3, #8
 801fd52:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801fd54:	68fa      	ldr	r2, [r7, #12]
 801fd56:	429a      	cmp	r2, r3
 801fd58:	d117      	bne.n	801fd8a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801fd5a:	69bb      	ldr	r3, [r7, #24]
 801fd5c:	6819      	ldr	r1, [r3, #0]
 801fd5e:	7dfa      	ldrb	r2, [r7, #23]
 801fd60:	481f      	ldr	r0, [pc, #124]	; (801fde0 <etharp_output+0x200>)
 801fd62:	4613      	mov	r3, r2
 801fd64:	005b      	lsls	r3, r3, #1
 801fd66:	4413      	add	r3, r2
 801fd68:	00db      	lsls	r3, r3, #3
 801fd6a:	4403      	add	r3, r0
 801fd6c:	3304      	adds	r3, #4
 801fd6e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801fd70:	4299      	cmp	r1, r3
 801fd72:	d10a      	bne.n	801fd8a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801fd74:	4a19      	ldr	r2, [pc, #100]	; (801fddc <etharp_output+0x1fc>)
 801fd76:	7dfb      	ldrb	r3, [r7, #23]
 801fd78:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801fd7a:	7dfb      	ldrb	r3, [r7, #23]
 801fd7c:	461a      	mov	r2, r3
 801fd7e:	68b9      	ldr	r1, [r7, #8]
 801fd80:	68f8      	ldr	r0, [r7, #12]
 801fd82:	f7ff fe93 	bl	801faac <etharp_output_to_arp_index>
 801fd86:	4603      	mov	r3, r0
 801fd88:	e018      	b.n	801fdbc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801fd8a:	7dfb      	ldrb	r3, [r7, #23]
 801fd8c:	3301      	adds	r3, #1
 801fd8e:	75fb      	strb	r3, [r7, #23]
 801fd90:	7dfb      	ldrb	r3, [r7, #23]
 801fd92:	2b09      	cmp	r3, #9
 801fd94:	d9ca      	bls.n	801fd2c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801fd96:	68ba      	ldr	r2, [r7, #8]
 801fd98:	69b9      	ldr	r1, [r7, #24]
 801fd9a:	68f8      	ldr	r0, [r7, #12]
 801fd9c:	f000 f822 	bl	801fde4 <etharp_query>
 801fda0:	4603      	mov	r3, r0
 801fda2:	e00b      	b.n	801fdbc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801fda4:	68fb      	ldr	r3, [r7, #12]
 801fda6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801fdaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801fdae:	9300      	str	r3, [sp, #0]
 801fdb0:	69fb      	ldr	r3, [r7, #28]
 801fdb2:	68b9      	ldr	r1, [r7, #8]
 801fdb4:	68f8      	ldr	r0, [r7, #12]
 801fdb6:	f001 fd6b 	bl	8021890 <ethernet_output>
 801fdba:	4603      	mov	r3, r0
}
 801fdbc:	4618      	mov	r0, r3
 801fdbe:	3720      	adds	r7, #32
 801fdc0:	46bd      	mov	sp, r7
 801fdc2:	bd80      	pop	{r7, pc}
 801fdc4:	080266e0 	.word	0x080266e0
 801fdc8:	08026830 	.word	0x08026830
 801fdcc:	08026758 	.word	0x08026758
 801fdd0:	08026880 	.word	0x08026880
 801fdd4:	08026820 	.word	0x08026820
 801fdd8:	080270c8 	.word	0x080270c8
 801fddc:	2002f134 	.word	0x2002f134
 801fde0:	2002f044 	.word	0x2002f044

0801fde4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801fde4:	b580      	push	{r7, lr}
 801fde6:	b08c      	sub	sp, #48	; 0x30
 801fde8:	af02      	add	r7, sp, #8
 801fdea:	60f8      	str	r0, [r7, #12]
 801fdec:	60b9      	str	r1, [r7, #8]
 801fdee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801fdf0:	68fb      	ldr	r3, [r7, #12]
 801fdf2:	3326      	adds	r3, #38	; 0x26
 801fdf4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801fdf6:	23ff      	movs	r3, #255	; 0xff
 801fdf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801fdfc:	2300      	movs	r3, #0
 801fdfe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801fe00:	68bb      	ldr	r3, [r7, #8]
 801fe02:	681b      	ldr	r3, [r3, #0]
 801fe04:	68f9      	ldr	r1, [r7, #12]
 801fe06:	4618      	mov	r0, r3
 801fe08:	f000 fe34 	bl	8020a74 <ip4_addr_isbroadcast_u32>
 801fe0c:	4603      	mov	r3, r0
 801fe0e:	2b00      	cmp	r3, #0
 801fe10:	d10c      	bne.n	801fe2c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801fe12:	68bb      	ldr	r3, [r7, #8]
 801fe14:	681b      	ldr	r3, [r3, #0]
 801fe16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801fe1a:	2be0      	cmp	r3, #224	; 0xe0
 801fe1c:	d006      	beq.n	801fe2c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801fe1e:	68bb      	ldr	r3, [r7, #8]
 801fe20:	2b00      	cmp	r3, #0
 801fe22:	d003      	beq.n	801fe2c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801fe24:	68bb      	ldr	r3, [r7, #8]
 801fe26:	681b      	ldr	r3, [r3, #0]
 801fe28:	2b00      	cmp	r3, #0
 801fe2a:	d102      	bne.n	801fe32 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801fe2c:	f06f 030f 	mvn.w	r3, #15
 801fe30:	e101      	b.n	8020036 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801fe32:	68fa      	ldr	r2, [r7, #12]
 801fe34:	2101      	movs	r1, #1
 801fe36:	68b8      	ldr	r0, [r7, #8]
 801fe38:	f7ff fb60 	bl	801f4fc <etharp_find_entry>
 801fe3c:	4603      	mov	r3, r0
 801fe3e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801fe40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	da02      	bge.n	801fe4e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801fe48:	8a7b      	ldrh	r3, [r7, #18]
 801fe4a:	b25b      	sxtb	r3, r3
 801fe4c:	e0f3      	b.n	8020036 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801fe4e:	8a7b      	ldrh	r3, [r7, #18]
 801fe50:	2b7e      	cmp	r3, #126	; 0x7e
 801fe52:	d906      	bls.n	801fe62 <etharp_query+0x7e>
 801fe54:	4b7a      	ldr	r3, [pc, #488]	; (8020040 <etharp_query+0x25c>)
 801fe56:	f240 32c1 	movw	r2, #961	; 0x3c1
 801fe5a:	497a      	ldr	r1, [pc, #488]	; (8020044 <etharp_query+0x260>)
 801fe5c:	487a      	ldr	r0, [pc, #488]	; (8020048 <etharp_query+0x264>)
 801fe5e:	f002 fa6f 	bl	8022340 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801fe62:	8a7b      	ldrh	r3, [r7, #18]
 801fe64:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801fe66:	7c7a      	ldrb	r2, [r7, #17]
 801fe68:	4978      	ldr	r1, [pc, #480]	; (802004c <etharp_query+0x268>)
 801fe6a:	4613      	mov	r3, r2
 801fe6c:	005b      	lsls	r3, r3, #1
 801fe6e:	4413      	add	r3, r2
 801fe70:	00db      	lsls	r3, r3, #3
 801fe72:	440b      	add	r3, r1
 801fe74:	3314      	adds	r3, #20
 801fe76:	781b      	ldrb	r3, [r3, #0]
 801fe78:	2b00      	cmp	r3, #0
 801fe7a:	d115      	bne.n	801fea8 <etharp_query+0xc4>
    is_new_entry = 1;
 801fe7c:	2301      	movs	r3, #1
 801fe7e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801fe80:	7c7a      	ldrb	r2, [r7, #17]
 801fe82:	4972      	ldr	r1, [pc, #456]	; (802004c <etharp_query+0x268>)
 801fe84:	4613      	mov	r3, r2
 801fe86:	005b      	lsls	r3, r3, #1
 801fe88:	4413      	add	r3, r2
 801fe8a:	00db      	lsls	r3, r3, #3
 801fe8c:	440b      	add	r3, r1
 801fe8e:	3314      	adds	r3, #20
 801fe90:	2201      	movs	r2, #1
 801fe92:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801fe94:	7c7a      	ldrb	r2, [r7, #17]
 801fe96:	496d      	ldr	r1, [pc, #436]	; (802004c <etharp_query+0x268>)
 801fe98:	4613      	mov	r3, r2
 801fe9a:	005b      	lsls	r3, r3, #1
 801fe9c:	4413      	add	r3, r2
 801fe9e:	00db      	lsls	r3, r3, #3
 801fea0:	440b      	add	r3, r1
 801fea2:	3308      	adds	r3, #8
 801fea4:	68fa      	ldr	r2, [r7, #12]
 801fea6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801fea8:	7c7a      	ldrb	r2, [r7, #17]
 801feaa:	4968      	ldr	r1, [pc, #416]	; (802004c <etharp_query+0x268>)
 801feac:	4613      	mov	r3, r2
 801feae:	005b      	lsls	r3, r3, #1
 801feb0:	4413      	add	r3, r2
 801feb2:	00db      	lsls	r3, r3, #3
 801feb4:	440b      	add	r3, r1
 801feb6:	3314      	adds	r3, #20
 801feb8:	781b      	ldrb	r3, [r3, #0]
 801feba:	2b01      	cmp	r3, #1
 801febc:	d011      	beq.n	801fee2 <etharp_query+0xfe>
 801febe:	7c7a      	ldrb	r2, [r7, #17]
 801fec0:	4962      	ldr	r1, [pc, #392]	; (802004c <etharp_query+0x268>)
 801fec2:	4613      	mov	r3, r2
 801fec4:	005b      	lsls	r3, r3, #1
 801fec6:	4413      	add	r3, r2
 801fec8:	00db      	lsls	r3, r3, #3
 801feca:	440b      	add	r3, r1
 801fecc:	3314      	adds	r3, #20
 801fece:	781b      	ldrb	r3, [r3, #0]
 801fed0:	2b01      	cmp	r3, #1
 801fed2:	d806      	bhi.n	801fee2 <etharp_query+0xfe>
 801fed4:	4b5a      	ldr	r3, [pc, #360]	; (8020040 <etharp_query+0x25c>)
 801fed6:	f240 32cd 	movw	r2, #973	; 0x3cd
 801feda:	495d      	ldr	r1, [pc, #372]	; (8020050 <etharp_query+0x26c>)
 801fedc:	485a      	ldr	r0, [pc, #360]	; (8020048 <etharp_query+0x264>)
 801fede:	f002 fa2f 	bl	8022340 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801fee2:	6a3b      	ldr	r3, [r7, #32]
 801fee4:	2b00      	cmp	r3, #0
 801fee6:	d102      	bne.n	801feee <etharp_query+0x10a>
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	2b00      	cmp	r3, #0
 801feec:	d10c      	bne.n	801ff08 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801feee:	68b9      	ldr	r1, [r7, #8]
 801fef0:	68f8      	ldr	r0, [r7, #12]
 801fef2:	f000 f963 	bl	80201bc <etharp_request>
 801fef6:	4603      	mov	r3, r0
 801fef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801fefc:	687b      	ldr	r3, [r7, #4]
 801fefe:	2b00      	cmp	r3, #0
 801ff00:	d102      	bne.n	801ff08 <etharp_query+0x124>
      return result;
 801ff02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801ff06:	e096      	b.n	8020036 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801ff08:	687b      	ldr	r3, [r7, #4]
 801ff0a:	2b00      	cmp	r3, #0
 801ff0c:	d106      	bne.n	801ff1c <etharp_query+0x138>
 801ff0e:	4b4c      	ldr	r3, [pc, #304]	; (8020040 <etharp_query+0x25c>)
 801ff10:	f240 32e1 	movw	r2, #993	; 0x3e1
 801ff14:	494f      	ldr	r1, [pc, #316]	; (8020054 <etharp_query+0x270>)
 801ff16:	484c      	ldr	r0, [pc, #304]	; (8020048 <etharp_query+0x264>)
 801ff18:	f002 fa12 	bl	8022340 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801ff1c:	7c7a      	ldrb	r2, [r7, #17]
 801ff1e:	494b      	ldr	r1, [pc, #300]	; (802004c <etharp_query+0x268>)
 801ff20:	4613      	mov	r3, r2
 801ff22:	005b      	lsls	r3, r3, #1
 801ff24:	4413      	add	r3, r2
 801ff26:	00db      	lsls	r3, r3, #3
 801ff28:	440b      	add	r3, r1
 801ff2a:	3314      	adds	r3, #20
 801ff2c:	781b      	ldrb	r3, [r3, #0]
 801ff2e:	2b01      	cmp	r3, #1
 801ff30:	d917      	bls.n	801ff62 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801ff32:	4a49      	ldr	r2, [pc, #292]	; (8020058 <etharp_query+0x274>)
 801ff34:	7c7b      	ldrb	r3, [r7, #17]
 801ff36:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ff38:	7c7a      	ldrb	r2, [r7, #17]
 801ff3a:	4613      	mov	r3, r2
 801ff3c:	005b      	lsls	r3, r3, #1
 801ff3e:	4413      	add	r3, r2
 801ff40:	00db      	lsls	r3, r3, #3
 801ff42:	3308      	adds	r3, #8
 801ff44:	4a41      	ldr	r2, [pc, #260]	; (802004c <etharp_query+0x268>)
 801ff46:	4413      	add	r3, r2
 801ff48:	3304      	adds	r3, #4
 801ff4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ff4e:	9200      	str	r2, [sp, #0]
 801ff50:	697a      	ldr	r2, [r7, #20]
 801ff52:	6879      	ldr	r1, [r7, #4]
 801ff54:	68f8      	ldr	r0, [r7, #12]
 801ff56:	f001 fc9b 	bl	8021890 <ethernet_output>
 801ff5a:	4603      	mov	r3, r0
 801ff5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ff60:	e067      	b.n	8020032 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ff62:	7c7a      	ldrb	r2, [r7, #17]
 801ff64:	4939      	ldr	r1, [pc, #228]	; (802004c <etharp_query+0x268>)
 801ff66:	4613      	mov	r3, r2
 801ff68:	005b      	lsls	r3, r3, #1
 801ff6a:	4413      	add	r3, r2
 801ff6c:	00db      	lsls	r3, r3, #3
 801ff6e:	440b      	add	r3, r1
 801ff70:	3314      	adds	r3, #20
 801ff72:	781b      	ldrb	r3, [r3, #0]
 801ff74:	2b01      	cmp	r3, #1
 801ff76:	d15c      	bne.n	8020032 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801ff78:	2300      	movs	r3, #0
 801ff7a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801ff7c:	687b      	ldr	r3, [r7, #4]
 801ff7e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ff80:	e01c      	b.n	801ffbc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801ff82:	69fb      	ldr	r3, [r7, #28]
 801ff84:	895a      	ldrh	r2, [r3, #10]
 801ff86:	69fb      	ldr	r3, [r7, #28]
 801ff88:	891b      	ldrh	r3, [r3, #8]
 801ff8a:	429a      	cmp	r2, r3
 801ff8c:	d10a      	bne.n	801ffa4 <etharp_query+0x1c0>
 801ff8e:	69fb      	ldr	r3, [r7, #28]
 801ff90:	681b      	ldr	r3, [r3, #0]
 801ff92:	2b00      	cmp	r3, #0
 801ff94:	d006      	beq.n	801ffa4 <etharp_query+0x1c0>
 801ff96:	4b2a      	ldr	r3, [pc, #168]	; (8020040 <etharp_query+0x25c>)
 801ff98:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801ff9c:	492f      	ldr	r1, [pc, #188]	; (802005c <etharp_query+0x278>)
 801ff9e:	482a      	ldr	r0, [pc, #168]	; (8020048 <etharp_query+0x264>)
 801ffa0:	f002 f9ce 	bl	8022340 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801ffa4:	69fb      	ldr	r3, [r7, #28]
 801ffa6:	7b1b      	ldrb	r3, [r3, #12]
 801ffa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ffac:	2b00      	cmp	r3, #0
 801ffae:	d002      	beq.n	801ffb6 <etharp_query+0x1d2>
        copy_needed = 1;
 801ffb0:	2301      	movs	r3, #1
 801ffb2:	61bb      	str	r3, [r7, #24]
        break;
 801ffb4:	e005      	b.n	801ffc2 <etharp_query+0x1de>
      }
      p = p->next;
 801ffb6:	69fb      	ldr	r3, [r7, #28]
 801ffb8:	681b      	ldr	r3, [r3, #0]
 801ffba:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ffbc:	69fb      	ldr	r3, [r7, #28]
 801ffbe:	2b00      	cmp	r3, #0
 801ffc0:	d1df      	bne.n	801ff82 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801ffc2:	69bb      	ldr	r3, [r7, #24]
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	d007      	beq.n	801ffd8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801ffc8:	687a      	ldr	r2, [r7, #4]
 801ffca:	f44f 7120 	mov.w	r1, #640	; 0x280
 801ffce:	200e      	movs	r0, #14
 801ffd0:	f7f8 fc88 	bl	80188e4 <pbuf_clone>
 801ffd4:	61f8      	str	r0, [r7, #28]
 801ffd6:	e004      	b.n	801ffe2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801ffd8:	687b      	ldr	r3, [r7, #4]
 801ffda:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801ffdc:	69f8      	ldr	r0, [r7, #28]
 801ffde:	f7f8 fabf 	bl	8018560 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801ffe2:	69fb      	ldr	r3, [r7, #28]
 801ffe4:	2b00      	cmp	r3, #0
 801ffe6:	d021      	beq.n	802002c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801ffe8:	7c7a      	ldrb	r2, [r7, #17]
 801ffea:	4918      	ldr	r1, [pc, #96]	; (802004c <etharp_query+0x268>)
 801ffec:	4613      	mov	r3, r2
 801ffee:	005b      	lsls	r3, r3, #1
 801fff0:	4413      	add	r3, r2
 801fff2:	00db      	lsls	r3, r3, #3
 801fff4:	440b      	add	r3, r1
 801fff6:	681b      	ldr	r3, [r3, #0]
 801fff8:	2b00      	cmp	r3, #0
 801fffa:	d00a      	beq.n	8020012 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801fffc:	7c7a      	ldrb	r2, [r7, #17]
 801fffe:	4913      	ldr	r1, [pc, #76]	; (802004c <etharp_query+0x268>)
 8020000:	4613      	mov	r3, r2
 8020002:	005b      	lsls	r3, r3, #1
 8020004:	4413      	add	r3, r2
 8020006:	00db      	lsls	r3, r3, #3
 8020008:	440b      	add	r3, r1
 802000a:	681b      	ldr	r3, [r3, #0]
 802000c:	4618      	mov	r0, r3
 802000e:	f7f8 fa01 	bl	8018414 <pbuf_free>
      }
      arp_table[i].q = p;
 8020012:	7c7a      	ldrb	r2, [r7, #17]
 8020014:	490d      	ldr	r1, [pc, #52]	; (802004c <etharp_query+0x268>)
 8020016:	4613      	mov	r3, r2
 8020018:	005b      	lsls	r3, r3, #1
 802001a:	4413      	add	r3, r2
 802001c:	00db      	lsls	r3, r3, #3
 802001e:	440b      	add	r3, r1
 8020020:	69fa      	ldr	r2, [r7, #28]
 8020022:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8020024:	2300      	movs	r3, #0
 8020026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802002a:	e002      	b.n	8020032 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 802002c:	23ff      	movs	r3, #255	; 0xff
 802002e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8020032:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8020036:	4618      	mov	r0, r3
 8020038:	3728      	adds	r7, #40	; 0x28
 802003a:	46bd      	mov	sp, r7
 802003c:	bd80      	pop	{r7, pc}
 802003e:	bf00      	nop
 8020040:	080266e0 	.word	0x080266e0
 8020044:	0802688c 	.word	0x0802688c
 8020048:	08026758 	.word	0x08026758
 802004c:	2002f044 	.word	0x2002f044
 8020050:	0802689c 	.word	0x0802689c
 8020054:	08026880 	.word	0x08026880
 8020058:	2002f134 	.word	0x2002f134
 802005c:	080268c4 	.word	0x080268c4

08020060 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8020060:	b580      	push	{r7, lr}
 8020062:	b08a      	sub	sp, #40	; 0x28
 8020064:	af02      	add	r7, sp, #8
 8020066:	60f8      	str	r0, [r7, #12]
 8020068:	60b9      	str	r1, [r7, #8]
 802006a:	607a      	str	r2, [r7, #4]
 802006c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 802006e:	2300      	movs	r3, #0
 8020070:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020072:	68fb      	ldr	r3, [r7, #12]
 8020074:	2b00      	cmp	r3, #0
 8020076:	d106      	bne.n	8020086 <etharp_raw+0x26>
 8020078:	4b3a      	ldr	r3, [pc, #232]	; (8020164 <etharp_raw+0x104>)
 802007a:	f240 4257 	movw	r2, #1111	; 0x457
 802007e:	493a      	ldr	r1, [pc, #232]	; (8020168 <etharp_raw+0x108>)
 8020080:	483a      	ldr	r0, [pc, #232]	; (802016c <etharp_raw+0x10c>)
 8020082:	f002 f95d 	bl	8022340 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8020086:	f44f 7220 	mov.w	r2, #640	; 0x280
 802008a:	211c      	movs	r1, #28
 802008c:	200e      	movs	r0, #14
 802008e:	f7f7 fedd 	bl	8017e4c <pbuf_alloc>
 8020092:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8020094:	69bb      	ldr	r3, [r7, #24]
 8020096:	2b00      	cmp	r3, #0
 8020098:	d102      	bne.n	80200a0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 802009a:	f04f 33ff 	mov.w	r3, #4294967295
 802009e:	e05d      	b.n	802015c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80200a0:	69bb      	ldr	r3, [r7, #24]
 80200a2:	895b      	ldrh	r3, [r3, #10]
 80200a4:	2b1b      	cmp	r3, #27
 80200a6:	d806      	bhi.n	80200b6 <etharp_raw+0x56>
 80200a8:	4b2e      	ldr	r3, [pc, #184]	; (8020164 <etharp_raw+0x104>)
 80200aa:	f240 4262 	movw	r2, #1122	; 0x462
 80200ae:	4930      	ldr	r1, [pc, #192]	; (8020170 <etharp_raw+0x110>)
 80200b0:	482e      	ldr	r0, [pc, #184]	; (802016c <etharp_raw+0x10c>)
 80200b2:	f002 f945 	bl	8022340 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80200b6:	69bb      	ldr	r3, [r7, #24]
 80200b8:	685b      	ldr	r3, [r3, #4]
 80200ba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80200bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80200be:	4618      	mov	r0, r3
 80200c0:	f7f6 fcfe 	bl	8016ac0 <lwip_htons>
 80200c4:	4603      	mov	r3, r0
 80200c6:	461a      	mov	r2, r3
 80200c8:	697b      	ldr	r3, [r7, #20]
 80200ca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80200cc:	68fb      	ldr	r3, [r7, #12]
 80200ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80200d2:	2b06      	cmp	r3, #6
 80200d4:	d006      	beq.n	80200e4 <etharp_raw+0x84>
 80200d6:	4b23      	ldr	r3, [pc, #140]	; (8020164 <etharp_raw+0x104>)
 80200d8:	f240 4269 	movw	r2, #1129	; 0x469
 80200dc:	4925      	ldr	r1, [pc, #148]	; (8020174 <etharp_raw+0x114>)
 80200de:	4823      	ldr	r0, [pc, #140]	; (802016c <etharp_raw+0x10c>)
 80200e0:	f002 f92e 	bl	8022340 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80200e4:	697b      	ldr	r3, [r7, #20]
 80200e6:	3308      	adds	r3, #8
 80200e8:	2206      	movs	r2, #6
 80200ea:	6839      	ldr	r1, [r7, #0]
 80200ec:	4618      	mov	r0, r3
 80200ee:	f002 fa98 	bl	8022622 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80200f2:	697b      	ldr	r3, [r7, #20]
 80200f4:	3312      	adds	r3, #18
 80200f6:	2206      	movs	r2, #6
 80200f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80200fa:	4618      	mov	r0, r3
 80200fc:	f002 fa91 	bl	8022622 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8020100:	697b      	ldr	r3, [r7, #20]
 8020102:	330e      	adds	r3, #14
 8020104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020106:	6812      	ldr	r2, [r2, #0]
 8020108:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 802010a:	697b      	ldr	r3, [r7, #20]
 802010c:	3318      	adds	r3, #24
 802010e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020110:	6812      	ldr	r2, [r2, #0]
 8020112:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8020114:	697b      	ldr	r3, [r7, #20]
 8020116:	2200      	movs	r2, #0
 8020118:	701a      	strb	r2, [r3, #0]
 802011a:	2200      	movs	r2, #0
 802011c:	f042 0201 	orr.w	r2, r2, #1
 8020120:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8020122:	697b      	ldr	r3, [r7, #20]
 8020124:	2200      	movs	r2, #0
 8020126:	f042 0208 	orr.w	r2, r2, #8
 802012a:	709a      	strb	r2, [r3, #2]
 802012c:	2200      	movs	r2, #0
 802012e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8020130:	697b      	ldr	r3, [r7, #20]
 8020132:	2206      	movs	r2, #6
 8020134:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8020136:	697b      	ldr	r3, [r7, #20]
 8020138:	2204      	movs	r2, #4
 802013a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 802013c:	f640 0306 	movw	r3, #2054	; 0x806
 8020140:	9300      	str	r3, [sp, #0]
 8020142:	687b      	ldr	r3, [r7, #4]
 8020144:	68ba      	ldr	r2, [r7, #8]
 8020146:	69b9      	ldr	r1, [r7, #24]
 8020148:	68f8      	ldr	r0, [r7, #12]
 802014a:	f001 fba1 	bl	8021890 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 802014e:	69b8      	ldr	r0, [r7, #24]
 8020150:	f7f8 f960 	bl	8018414 <pbuf_free>
  p = NULL;
 8020154:	2300      	movs	r3, #0
 8020156:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8020158:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 802015c:	4618      	mov	r0, r3
 802015e:	3720      	adds	r7, #32
 8020160:	46bd      	mov	sp, r7
 8020162:	bd80      	pop	{r7, pc}
 8020164:	080266e0 	.word	0x080266e0
 8020168:	08026830 	.word	0x08026830
 802016c:	08026758 	.word	0x08026758
 8020170:	080268e0 	.word	0x080268e0
 8020174:	08026914 	.word	0x08026914

08020178 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8020178:	b580      	push	{r7, lr}
 802017a:	b088      	sub	sp, #32
 802017c:	af04      	add	r7, sp, #16
 802017e:	60f8      	str	r0, [r7, #12]
 8020180:	60b9      	str	r1, [r7, #8]
 8020182:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020184:	68fb      	ldr	r3, [r7, #12]
 8020186:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 802018a:	68fb      	ldr	r3, [r7, #12]
 802018c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8020190:	68fb      	ldr	r3, [r7, #12]
 8020192:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020194:	2201      	movs	r2, #1
 8020196:	9203      	str	r2, [sp, #12]
 8020198:	68ba      	ldr	r2, [r7, #8]
 802019a:	9202      	str	r2, [sp, #8]
 802019c:	4a06      	ldr	r2, [pc, #24]	; (80201b8 <etharp_request_dst+0x40>)
 802019e:	9201      	str	r2, [sp, #4]
 80201a0:	9300      	str	r3, [sp, #0]
 80201a2:	4603      	mov	r3, r0
 80201a4:	687a      	ldr	r2, [r7, #4]
 80201a6:	68f8      	ldr	r0, [r7, #12]
 80201a8:	f7ff ff5a 	bl	8020060 <etharp_raw>
 80201ac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80201ae:	4618      	mov	r0, r3
 80201b0:	3710      	adds	r7, #16
 80201b2:	46bd      	mov	sp, r7
 80201b4:	bd80      	pop	{r7, pc}
 80201b6:	bf00      	nop
 80201b8:	080270d0 	.word	0x080270d0

080201bc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80201bc:	b580      	push	{r7, lr}
 80201be:	b082      	sub	sp, #8
 80201c0:	af00      	add	r7, sp, #0
 80201c2:	6078      	str	r0, [r7, #4]
 80201c4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80201c6:	4a05      	ldr	r2, [pc, #20]	; (80201dc <etharp_request+0x20>)
 80201c8:	6839      	ldr	r1, [r7, #0]
 80201ca:	6878      	ldr	r0, [r7, #4]
 80201cc:	f7ff ffd4 	bl	8020178 <etharp_request_dst>
 80201d0:	4603      	mov	r3, r0
}
 80201d2:	4618      	mov	r0, r3
 80201d4:	3708      	adds	r7, #8
 80201d6:	46bd      	mov	sp, r7
 80201d8:	bd80      	pop	{r7, pc}
 80201da:	bf00      	nop
 80201dc:	080270c8 	.word	0x080270c8

080201e0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80201e0:	b580      	push	{r7, lr}
 80201e2:	b08e      	sub	sp, #56	; 0x38
 80201e4:	af04      	add	r7, sp, #16
 80201e6:	6078      	str	r0, [r7, #4]
 80201e8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80201ea:	4b87      	ldr	r3, [pc, #540]	; (8020408 <icmp_input+0x228>)
 80201ec:	689b      	ldr	r3, [r3, #8]
 80201ee:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80201f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80201f2:	781b      	ldrb	r3, [r3, #0]
 80201f4:	f003 030f 	and.w	r3, r3, #15
 80201f8:	b2db      	uxtb	r3, r3
 80201fa:	009b      	lsls	r3, r3, #2
 80201fc:	b2db      	uxtb	r3, r3
 80201fe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8020200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020202:	2b13      	cmp	r3, #19
 8020204:	f240 80e8 	bls.w	80203d8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8020208:	687b      	ldr	r3, [r7, #4]
 802020a:	895b      	ldrh	r3, [r3, #10]
 802020c:	2b03      	cmp	r3, #3
 802020e:	f240 80e5 	bls.w	80203dc <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8020212:	687b      	ldr	r3, [r7, #4]
 8020214:	685b      	ldr	r3, [r3, #4]
 8020216:	781b      	ldrb	r3, [r3, #0]
 8020218:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 802021c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8020220:	2b00      	cmp	r3, #0
 8020222:	f000 80d2 	beq.w	80203ca <icmp_input+0x1ea>
 8020226:	2b08      	cmp	r3, #8
 8020228:	f040 80d2 	bne.w	80203d0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 802022c:	4b77      	ldr	r3, [pc, #476]	; (802040c <icmp_input+0x22c>)
 802022e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020230:	4b75      	ldr	r3, [pc, #468]	; (8020408 <icmp_input+0x228>)
 8020232:	695b      	ldr	r3, [r3, #20]
 8020234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020238:	2be0      	cmp	r3, #224	; 0xe0
 802023a:	f000 80d6 	beq.w	80203ea <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 802023e:	4b72      	ldr	r3, [pc, #456]	; (8020408 <icmp_input+0x228>)
 8020240:	695b      	ldr	r3, [r3, #20]
 8020242:	4a71      	ldr	r2, [pc, #452]	; (8020408 <icmp_input+0x228>)
 8020244:	6812      	ldr	r2, [r2, #0]
 8020246:	4611      	mov	r1, r2
 8020248:	4618      	mov	r0, r3
 802024a:	f000 fc13 	bl	8020a74 <ip4_addr_isbroadcast_u32>
 802024e:	4603      	mov	r3, r0
 8020250:	2b00      	cmp	r3, #0
 8020252:	f040 80cc 	bne.w	80203ee <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8020256:	687b      	ldr	r3, [r7, #4]
 8020258:	891b      	ldrh	r3, [r3, #8]
 802025a:	2b07      	cmp	r3, #7
 802025c:	f240 80c0 	bls.w	80203e0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8020260:	6878      	ldr	r0, [r7, #4]
 8020262:	f7f6 fcca 	bl	8016bfa <inet_chksum_pbuf>
 8020266:	4603      	mov	r3, r0
 8020268:	2b00      	cmp	r3, #0
 802026a:	d003      	beq.n	8020274 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 802026c:	6878      	ldr	r0, [r7, #4]
 802026e:	f7f8 f8d1 	bl	8018414 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8020272:	e0c5      	b.n	8020400 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020274:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020276:	330e      	adds	r3, #14
 8020278:	4619      	mov	r1, r3
 802027a:	6878      	ldr	r0, [r7, #4]
 802027c:	f7f8 f834 	bl	80182e8 <pbuf_add_header>
 8020280:	4603      	mov	r3, r0
 8020282:	2b00      	cmp	r3, #0
 8020284:	d04b      	beq.n	802031e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8020286:	687b      	ldr	r3, [r7, #4]
 8020288:	891a      	ldrh	r2, [r3, #8]
 802028a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802028c:	4413      	add	r3, r2
 802028e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8020290:	687b      	ldr	r3, [r7, #4]
 8020292:	891b      	ldrh	r3, [r3, #8]
 8020294:	8b7a      	ldrh	r2, [r7, #26]
 8020296:	429a      	cmp	r2, r3
 8020298:	f0c0 80ab 	bcc.w	80203f2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 802029c:	8b7b      	ldrh	r3, [r7, #26]
 802029e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80202a2:	4619      	mov	r1, r3
 80202a4:	200e      	movs	r0, #14
 80202a6:	f7f7 fdd1 	bl	8017e4c <pbuf_alloc>
 80202aa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80202ac:	697b      	ldr	r3, [r7, #20]
 80202ae:	2b00      	cmp	r3, #0
 80202b0:	f000 80a1 	beq.w	80203f6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80202b4:	697b      	ldr	r3, [r7, #20]
 80202b6:	895b      	ldrh	r3, [r3, #10]
 80202b8:	461a      	mov	r2, r3
 80202ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80202bc:	3308      	adds	r3, #8
 80202be:	429a      	cmp	r2, r3
 80202c0:	d203      	bcs.n	80202ca <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80202c2:	6978      	ldr	r0, [r7, #20]
 80202c4:	f7f8 f8a6 	bl	8018414 <pbuf_free>
          goto icmperr;
 80202c8:	e096      	b.n	80203f8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80202ca:	697b      	ldr	r3, [r7, #20]
 80202cc:	685b      	ldr	r3, [r3, #4]
 80202ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80202d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80202d2:	4618      	mov	r0, r3
 80202d4:	f002 f9a5 	bl	8022622 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80202d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80202da:	4619      	mov	r1, r3
 80202dc:	6978      	ldr	r0, [r7, #20]
 80202de:	f7f8 f813 	bl	8018308 <pbuf_remove_header>
 80202e2:	4603      	mov	r3, r0
 80202e4:	2b00      	cmp	r3, #0
 80202e6:	d009      	beq.n	80202fc <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80202e8:	4b49      	ldr	r3, [pc, #292]	; (8020410 <icmp_input+0x230>)
 80202ea:	22b6      	movs	r2, #182	; 0xb6
 80202ec:	4949      	ldr	r1, [pc, #292]	; (8020414 <icmp_input+0x234>)
 80202ee:	484a      	ldr	r0, [pc, #296]	; (8020418 <icmp_input+0x238>)
 80202f0:	f002 f826 	bl	8022340 <iprintf>
          pbuf_free(r);
 80202f4:	6978      	ldr	r0, [r7, #20]
 80202f6:	f7f8 f88d 	bl	8018414 <pbuf_free>
          goto icmperr;
 80202fa:	e07d      	b.n	80203f8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80202fc:	6879      	ldr	r1, [r7, #4]
 80202fe:	6978      	ldr	r0, [r7, #20]
 8020300:	f7f8 f9ac 	bl	801865c <pbuf_copy>
 8020304:	4603      	mov	r3, r0
 8020306:	2b00      	cmp	r3, #0
 8020308:	d003      	beq.n	8020312 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 802030a:	6978      	ldr	r0, [r7, #20]
 802030c:	f7f8 f882 	bl	8018414 <pbuf_free>
          goto icmperr;
 8020310:	e072      	b.n	80203f8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8020312:	6878      	ldr	r0, [r7, #4]
 8020314:	f7f8 f87e 	bl	8018414 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8020318:	697b      	ldr	r3, [r7, #20]
 802031a:	607b      	str	r3, [r7, #4]
 802031c:	e00f      	b.n	802033e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802031e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020320:	330e      	adds	r3, #14
 8020322:	4619      	mov	r1, r3
 8020324:	6878      	ldr	r0, [r7, #4]
 8020326:	f7f7 ffef 	bl	8018308 <pbuf_remove_header>
 802032a:	4603      	mov	r3, r0
 802032c:	2b00      	cmp	r3, #0
 802032e:	d006      	beq.n	802033e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8020330:	4b37      	ldr	r3, [pc, #220]	; (8020410 <icmp_input+0x230>)
 8020332:	22c7      	movs	r2, #199	; 0xc7
 8020334:	4939      	ldr	r1, [pc, #228]	; (802041c <icmp_input+0x23c>)
 8020336:	4838      	ldr	r0, [pc, #224]	; (8020418 <icmp_input+0x238>)
 8020338:	f002 f802 	bl	8022340 <iprintf>
          goto icmperr;
 802033c:	e05c      	b.n	80203f8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 802033e:	687b      	ldr	r3, [r7, #4]
 8020340:	685b      	ldr	r3, [r3, #4]
 8020342:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8020344:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020346:	4619      	mov	r1, r3
 8020348:	6878      	ldr	r0, [r7, #4]
 802034a:	f7f7 ffcd 	bl	80182e8 <pbuf_add_header>
 802034e:	4603      	mov	r3, r0
 8020350:	2b00      	cmp	r3, #0
 8020352:	d13c      	bne.n	80203ce <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8020354:	687b      	ldr	r3, [r7, #4]
 8020356:	685b      	ldr	r3, [r3, #4]
 8020358:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 802035a:	69fb      	ldr	r3, [r7, #28]
 802035c:	681a      	ldr	r2, [r3, #0]
 802035e:	68fb      	ldr	r3, [r7, #12]
 8020360:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8020362:	4b29      	ldr	r3, [pc, #164]	; (8020408 <icmp_input+0x228>)
 8020364:	691a      	ldr	r2, [r3, #16]
 8020366:	68fb      	ldr	r3, [r7, #12]
 8020368:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 802036a:	693b      	ldr	r3, [r7, #16]
 802036c:	2200      	movs	r2, #0
 802036e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8020370:	693b      	ldr	r3, [r7, #16]
 8020372:	885b      	ldrh	r3, [r3, #2]
 8020374:	b29b      	uxth	r3, r3
 8020376:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 802037a:	4293      	cmp	r3, r2
 802037c:	d907      	bls.n	802038e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 802037e:	693b      	ldr	r3, [r7, #16]
 8020380:	885b      	ldrh	r3, [r3, #2]
 8020382:	b29b      	uxth	r3, r3
 8020384:	3309      	adds	r3, #9
 8020386:	b29a      	uxth	r2, r3
 8020388:	693b      	ldr	r3, [r7, #16]
 802038a:	805a      	strh	r2, [r3, #2]
 802038c:	e006      	b.n	802039c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 802038e:	693b      	ldr	r3, [r7, #16]
 8020390:	885b      	ldrh	r3, [r3, #2]
 8020392:	b29b      	uxth	r3, r3
 8020394:	3308      	adds	r3, #8
 8020396:	b29a      	uxth	r2, r3
 8020398:	693b      	ldr	r3, [r7, #16]
 802039a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 802039c:	68fb      	ldr	r3, [r7, #12]
 802039e:	22ff      	movs	r2, #255	; 0xff
 80203a0:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80203a2:	68fb      	ldr	r3, [r7, #12]
 80203a4:	2200      	movs	r2, #0
 80203a6:	729a      	strb	r2, [r3, #10]
 80203a8:	2200      	movs	r2, #0
 80203aa:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80203ac:	683b      	ldr	r3, [r7, #0]
 80203ae:	9302      	str	r3, [sp, #8]
 80203b0:	2301      	movs	r3, #1
 80203b2:	9301      	str	r3, [sp, #4]
 80203b4:	2300      	movs	r3, #0
 80203b6:	9300      	str	r3, [sp, #0]
 80203b8:	23ff      	movs	r3, #255	; 0xff
 80203ba:	2200      	movs	r2, #0
 80203bc:	69f9      	ldr	r1, [r7, #28]
 80203be:	6878      	ldr	r0, [r7, #4]
 80203c0:	f000 fa80 	bl	80208c4 <ip4_output_if>
 80203c4:	4603      	mov	r3, r0
 80203c6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80203c8:	e001      	b.n	80203ce <icmp_input+0x1ee>
      break;
 80203ca:	bf00      	nop
 80203cc:	e000      	b.n	80203d0 <icmp_input+0x1f0>
      break;
 80203ce:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80203d0:	6878      	ldr	r0, [r7, #4]
 80203d2:	f7f8 f81f 	bl	8018414 <pbuf_free>
  return;
 80203d6:	e013      	b.n	8020400 <icmp_input+0x220>
    goto lenerr;
 80203d8:	bf00      	nop
 80203da:	e002      	b.n	80203e2 <icmp_input+0x202>
    goto lenerr;
 80203dc:	bf00      	nop
 80203de:	e000      	b.n	80203e2 <icmp_input+0x202>
        goto lenerr;
 80203e0:	bf00      	nop
lenerr:
  pbuf_free(p);
 80203e2:	6878      	ldr	r0, [r7, #4]
 80203e4:	f7f8 f816 	bl	8018414 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80203e8:	e00a      	b.n	8020400 <icmp_input+0x220>
        goto icmperr;
 80203ea:	bf00      	nop
 80203ec:	e004      	b.n	80203f8 <icmp_input+0x218>
        goto icmperr;
 80203ee:	bf00      	nop
 80203f0:	e002      	b.n	80203f8 <icmp_input+0x218>
          goto icmperr;
 80203f2:	bf00      	nop
 80203f4:	e000      	b.n	80203f8 <icmp_input+0x218>
          goto icmperr;
 80203f6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80203f8:	6878      	ldr	r0, [r7, #4]
 80203fa:	f7f8 f80b 	bl	8018414 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80203fe:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8020400:	3728      	adds	r7, #40	; 0x28
 8020402:	46bd      	mov	sp, r7
 8020404:	bd80      	pop	{r7, pc}
 8020406:	bf00      	nop
 8020408:	2002bee4 	.word	0x2002bee4
 802040c:	2002bef8 	.word	0x2002bef8
 8020410:	08026958 	.word	0x08026958
 8020414:	08026990 	.word	0x08026990
 8020418:	080269c8 	.word	0x080269c8
 802041c:	080269f0 	.word	0x080269f0

08020420 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8020420:	b580      	push	{r7, lr}
 8020422:	b082      	sub	sp, #8
 8020424:	af00      	add	r7, sp, #0
 8020426:	6078      	str	r0, [r7, #4]
 8020428:	460b      	mov	r3, r1
 802042a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 802042c:	78fb      	ldrb	r3, [r7, #3]
 802042e:	461a      	mov	r2, r3
 8020430:	2103      	movs	r1, #3
 8020432:	6878      	ldr	r0, [r7, #4]
 8020434:	f000 f814 	bl	8020460 <icmp_send_response>
}
 8020438:	bf00      	nop
 802043a:	3708      	adds	r7, #8
 802043c:	46bd      	mov	sp, r7
 802043e:	bd80      	pop	{r7, pc}

08020440 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8020440:	b580      	push	{r7, lr}
 8020442:	b082      	sub	sp, #8
 8020444:	af00      	add	r7, sp, #0
 8020446:	6078      	str	r0, [r7, #4]
 8020448:	460b      	mov	r3, r1
 802044a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 802044c:	78fb      	ldrb	r3, [r7, #3]
 802044e:	461a      	mov	r2, r3
 8020450:	210b      	movs	r1, #11
 8020452:	6878      	ldr	r0, [r7, #4]
 8020454:	f000 f804 	bl	8020460 <icmp_send_response>
}
 8020458:	bf00      	nop
 802045a:	3708      	adds	r7, #8
 802045c:	46bd      	mov	sp, r7
 802045e:	bd80      	pop	{r7, pc}

08020460 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8020460:	b580      	push	{r7, lr}
 8020462:	b08c      	sub	sp, #48	; 0x30
 8020464:	af04      	add	r7, sp, #16
 8020466:	6078      	str	r0, [r7, #4]
 8020468:	460b      	mov	r3, r1
 802046a:	70fb      	strb	r3, [r7, #3]
 802046c:	4613      	mov	r3, r2
 802046e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8020470:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020474:	2124      	movs	r1, #36	; 0x24
 8020476:	2022      	movs	r0, #34	; 0x22
 8020478:	f7f7 fce8 	bl	8017e4c <pbuf_alloc>
 802047c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 802047e:	69fb      	ldr	r3, [r7, #28]
 8020480:	2b00      	cmp	r3, #0
 8020482:	d056      	beq.n	8020532 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8020484:	69fb      	ldr	r3, [r7, #28]
 8020486:	895b      	ldrh	r3, [r3, #10]
 8020488:	2b23      	cmp	r3, #35	; 0x23
 802048a:	d806      	bhi.n	802049a <icmp_send_response+0x3a>
 802048c:	4b2b      	ldr	r3, [pc, #172]	; (802053c <icmp_send_response+0xdc>)
 802048e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8020492:	492b      	ldr	r1, [pc, #172]	; (8020540 <icmp_send_response+0xe0>)
 8020494:	482b      	ldr	r0, [pc, #172]	; (8020544 <icmp_send_response+0xe4>)
 8020496:	f001 ff53 	bl	8022340 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 802049a:	687b      	ldr	r3, [r7, #4]
 802049c:	685b      	ldr	r3, [r3, #4]
 802049e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80204a0:	69fb      	ldr	r3, [r7, #28]
 80204a2:	685b      	ldr	r3, [r3, #4]
 80204a4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80204a6:	697b      	ldr	r3, [r7, #20]
 80204a8:	78fa      	ldrb	r2, [r7, #3]
 80204aa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80204ac:	697b      	ldr	r3, [r7, #20]
 80204ae:	78ba      	ldrb	r2, [r7, #2]
 80204b0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80204b2:	697b      	ldr	r3, [r7, #20]
 80204b4:	2200      	movs	r2, #0
 80204b6:	711a      	strb	r2, [r3, #4]
 80204b8:	2200      	movs	r2, #0
 80204ba:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80204bc:	697b      	ldr	r3, [r7, #20]
 80204be:	2200      	movs	r2, #0
 80204c0:	719a      	strb	r2, [r3, #6]
 80204c2:	2200      	movs	r2, #0
 80204c4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80204c6:	69fb      	ldr	r3, [r7, #28]
 80204c8:	685b      	ldr	r3, [r3, #4]
 80204ca:	f103 0008 	add.w	r0, r3, #8
 80204ce:	687b      	ldr	r3, [r7, #4]
 80204d0:	685b      	ldr	r3, [r3, #4]
 80204d2:	221c      	movs	r2, #28
 80204d4:	4619      	mov	r1, r3
 80204d6:	f002 f8a4 	bl	8022622 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80204da:	69bb      	ldr	r3, [r7, #24]
 80204dc:	68db      	ldr	r3, [r3, #12]
 80204de:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80204e0:	f107 030c 	add.w	r3, r7, #12
 80204e4:	4618      	mov	r0, r3
 80204e6:	f000 f82f 	bl	8020548 <ip4_route>
 80204ea:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80204ec:	693b      	ldr	r3, [r7, #16]
 80204ee:	2b00      	cmp	r3, #0
 80204f0:	d01b      	beq.n	802052a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80204f2:	697b      	ldr	r3, [r7, #20]
 80204f4:	2200      	movs	r2, #0
 80204f6:	709a      	strb	r2, [r3, #2]
 80204f8:	2200      	movs	r2, #0
 80204fa:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80204fc:	69fb      	ldr	r3, [r7, #28]
 80204fe:	895b      	ldrh	r3, [r3, #10]
 8020500:	4619      	mov	r1, r3
 8020502:	6978      	ldr	r0, [r7, #20]
 8020504:	f7f6 fb67 	bl	8016bd6 <inet_chksum>
 8020508:	4603      	mov	r3, r0
 802050a:	461a      	mov	r2, r3
 802050c:	697b      	ldr	r3, [r7, #20]
 802050e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8020510:	f107 020c 	add.w	r2, r7, #12
 8020514:	693b      	ldr	r3, [r7, #16]
 8020516:	9302      	str	r3, [sp, #8]
 8020518:	2301      	movs	r3, #1
 802051a:	9301      	str	r3, [sp, #4]
 802051c:	2300      	movs	r3, #0
 802051e:	9300      	str	r3, [sp, #0]
 8020520:	23ff      	movs	r3, #255	; 0xff
 8020522:	2100      	movs	r1, #0
 8020524:	69f8      	ldr	r0, [r7, #28]
 8020526:	f000 f9cd 	bl	80208c4 <ip4_output_if>
  }
  pbuf_free(q);
 802052a:	69f8      	ldr	r0, [r7, #28]
 802052c:	f7f7 ff72 	bl	8018414 <pbuf_free>
 8020530:	e000      	b.n	8020534 <icmp_send_response+0xd4>
    return;
 8020532:	bf00      	nop
}
 8020534:	3720      	adds	r7, #32
 8020536:	46bd      	mov	sp, r7
 8020538:	bd80      	pop	{r7, pc}
 802053a:	bf00      	nop
 802053c:	08026958 	.word	0x08026958
 8020540:	08026a24 	.word	0x08026a24
 8020544:	080269c8 	.word	0x080269c8

08020548 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8020548:	b480      	push	{r7}
 802054a:	b085      	sub	sp, #20
 802054c:	af00      	add	r7, sp, #0
 802054e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8020550:	4b33      	ldr	r3, [pc, #204]	; (8020620 <ip4_route+0xd8>)
 8020552:	681b      	ldr	r3, [r3, #0]
 8020554:	60fb      	str	r3, [r7, #12]
 8020556:	e036      	b.n	80205c6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8020558:	68fb      	ldr	r3, [r7, #12]
 802055a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802055e:	f003 0301 	and.w	r3, r3, #1
 8020562:	b2db      	uxtb	r3, r3
 8020564:	2b00      	cmp	r3, #0
 8020566:	d02b      	beq.n	80205c0 <ip4_route+0x78>
 8020568:	68fb      	ldr	r3, [r7, #12]
 802056a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802056e:	089b      	lsrs	r3, r3, #2
 8020570:	f003 0301 	and.w	r3, r3, #1
 8020574:	b2db      	uxtb	r3, r3
 8020576:	2b00      	cmp	r3, #0
 8020578:	d022      	beq.n	80205c0 <ip4_route+0x78>
 802057a:	68fb      	ldr	r3, [r7, #12]
 802057c:	3304      	adds	r3, #4
 802057e:	681b      	ldr	r3, [r3, #0]
 8020580:	2b00      	cmp	r3, #0
 8020582:	d01d      	beq.n	80205c0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8020584:	687b      	ldr	r3, [r7, #4]
 8020586:	681a      	ldr	r2, [r3, #0]
 8020588:	68fb      	ldr	r3, [r7, #12]
 802058a:	3304      	adds	r3, #4
 802058c:	681b      	ldr	r3, [r3, #0]
 802058e:	405a      	eors	r2, r3
 8020590:	68fb      	ldr	r3, [r7, #12]
 8020592:	3308      	adds	r3, #8
 8020594:	681b      	ldr	r3, [r3, #0]
 8020596:	4013      	ands	r3, r2
 8020598:	2b00      	cmp	r3, #0
 802059a:	d101      	bne.n	80205a0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 802059c:	68fb      	ldr	r3, [r7, #12]
 802059e:	e038      	b.n	8020612 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80205a0:	68fb      	ldr	r3, [r7, #12]
 80205a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80205a6:	f003 0302 	and.w	r3, r3, #2
 80205aa:	2b00      	cmp	r3, #0
 80205ac:	d108      	bne.n	80205c0 <ip4_route+0x78>
 80205ae:	687b      	ldr	r3, [r7, #4]
 80205b0:	681a      	ldr	r2, [r3, #0]
 80205b2:	68fb      	ldr	r3, [r7, #12]
 80205b4:	330c      	adds	r3, #12
 80205b6:	681b      	ldr	r3, [r3, #0]
 80205b8:	429a      	cmp	r2, r3
 80205ba:	d101      	bne.n	80205c0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80205bc:	68fb      	ldr	r3, [r7, #12]
 80205be:	e028      	b.n	8020612 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80205c0:	68fb      	ldr	r3, [r7, #12]
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	60fb      	str	r3, [r7, #12]
 80205c6:	68fb      	ldr	r3, [r7, #12]
 80205c8:	2b00      	cmp	r3, #0
 80205ca:	d1c5      	bne.n	8020558 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80205cc:	4b15      	ldr	r3, [pc, #84]	; (8020624 <ip4_route+0xdc>)
 80205ce:	681b      	ldr	r3, [r3, #0]
 80205d0:	2b00      	cmp	r3, #0
 80205d2:	d01a      	beq.n	802060a <ip4_route+0xc2>
 80205d4:	4b13      	ldr	r3, [pc, #76]	; (8020624 <ip4_route+0xdc>)
 80205d6:	681b      	ldr	r3, [r3, #0]
 80205d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80205dc:	f003 0301 	and.w	r3, r3, #1
 80205e0:	2b00      	cmp	r3, #0
 80205e2:	d012      	beq.n	802060a <ip4_route+0xc2>
 80205e4:	4b0f      	ldr	r3, [pc, #60]	; (8020624 <ip4_route+0xdc>)
 80205e6:	681b      	ldr	r3, [r3, #0]
 80205e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80205ec:	f003 0304 	and.w	r3, r3, #4
 80205f0:	2b00      	cmp	r3, #0
 80205f2:	d00a      	beq.n	802060a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80205f4:	4b0b      	ldr	r3, [pc, #44]	; (8020624 <ip4_route+0xdc>)
 80205f6:	681b      	ldr	r3, [r3, #0]
 80205f8:	3304      	adds	r3, #4
 80205fa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	d004      	beq.n	802060a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8020600:	687b      	ldr	r3, [r7, #4]
 8020602:	681b      	ldr	r3, [r3, #0]
 8020604:	b2db      	uxtb	r3, r3
 8020606:	2b7f      	cmp	r3, #127	; 0x7f
 8020608:	d101      	bne.n	802060e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 802060a:	2300      	movs	r3, #0
 802060c:	e001      	b.n	8020612 <ip4_route+0xca>
  }

  return netif_default;
 802060e:	4b05      	ldr	r3, [pc, #20]	; (8020624 <ip4_route+0xdc>)
 8020610:	681b      	ldr	r3, [r3, #0]
}
 8020612:	4618      	mov	r0, r3
 8020614:	3714      	adds	r7, #20
 8020616:	46bd      	mov	sp, r7
 8020618:	f85d 7b04 	ldr.w	r7, [sp], #4
 802061c:	4770      	bx	lr
 802061e:	bf00      	nop
 8020620:	2002efd8 	.word	0x2002efd8
 8020624:	2002efdc 	.word	0x2002efdc

08020628 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8020628:	b580      	push	{r7, lr}
 802062a:	b082      	sub	sp, #8
 802062c:	af00      	add	r7, sp, #0
 802062e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8020630:	687b      	ldr	r3, [r7, #4]
 8020632:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8020636:	f003 0301 	and.w	r3, r3, #1
 802063a:	b2db      	uxtb	r3, r3
 802063c:	2b00      	cmp	r3, #0
 802063e:	d016      	beq.n	802066e <ip4_input_accept+0x46>
 8020640:	687b      	ldr	r3, [r7, #4]
 8020642:	3304      	adds	r3, #4
 8020644:	681b      	ldr	r3, [r3, #0]
 8020646:	2b00      	cmp	r3, #0
 8020648:	d011      	beq.n	802066e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802064a:	4b0b      	ldr	r3, [pc, #44]	; (8020678 <ip4_input_accept+0x50>)
 802064c:	695a      	ldr	r2, [r3, #20]
 802064e:	687b      	ldr	r3, [r7, #4]
 8020650:	3304      	adds	r3, #4
 8020652:	681b      	ldr	r3, [r3, #0]
 8020654:	429a      	cmp	r2, r3
 8020656:	d008      	beq.n	802066a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8020658:	4b07      	ldr	r3, [pc, #28]	; (8020678 <ip4_input_accept+0x50>)
 802065a:	695b      	ldr	r3, [r3, #20]
 802065c:	6879      	ldr	r1, [r7, #4]
 802065e:	4618      	mov	r0, r3
 8020660:	f000 fa08 	bl	8020a74 <ip4_addr_isbroadcast_u32>
 8020664:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8020666:	2b00      	cmp	r3, #0
 8020668:	d001      	beq.n	802066e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 802066a:	2301      	movs	r3, #1
 802066c:	e000      	b.n	8020670 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802066e:	2300      	movs	r3, #0
}
 8020670:	4618      	mov	r0, r3
 8020672:	3708      	adds	r7, #8
 8020674:	46bd      	mov	sp, r7
 8020676:	bd80      	pop	{r7, pc}
 8020678:	2002bee4 	.word	0x2002bee4

0802067c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 802067c:	b580      	push	{r7, lr}
 802067e:	b086      	sub	sp, #24
 8020680:	af00      	add	r7, sp, #0
 8020682:	6078      	str	r0, [r7, #4]
 8020684:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8020686:	687b      	ldr	r3, [r7, #4]
 8020688:	685b      	ldr	r3, [r3, #4]
 802068a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 802068c:	697b      	ldr	r3, [r7, #20]
 802068e:	781b      	ldrb	r3, [r3, #0]
 8020690:	091b      	lsrs	r3, r3, #4
 8020692:	b2db      	uxtb	r3, r3
 8020694:	2b04      	cmp	r3, #4
 8020696:	d004      	beq.n	80206a2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8020698:	6878      	ldr	r0, [r7, #4]
 802069a:	f7f7 febb 	bl	8018414 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 802069e:	2300      	movs	r3, #0
 80206a0:	e107      	b.n	80208b2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80206a2:	697b      	ldr	r3, [r7, #20]
 80206a4:	781b      	ldrb	r3, [r3, #0]
 80206a6:	f003 030f 	and.w	r3, r3, #15
 80206aa:	b2db      	uxtb	r3, r3
 80206ac:	009b      	lsls	r3, r3, #2
 80206ae:	b2db      	uxtb	r3, r3
 80206b0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80206b2:	697b      	ldr	r3, [r7, #20]
 80206b4:	885b      	ldrh	r3, [r3, #2]
 80206b6:	b29b      	uxth	r3, r3
 80206b8:	4618      	mov	r0, r3
 80206ba:	f7f6 fa01 	bl	8016ac0 <lwip_htons>
 80206be:	4603      	mov	r3, r0
 80206c0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80206c2:	687b      	ldr	r3, [r7, #4]
 80206c4:	891b      	ldrh	r3, [r3, #8]
 80206c6:	89ba      	ldrh	r2, [r7, #12]
 80206c8:	429a      	cmp	r2, r3
 80206ca:	d204      	bcs.n	80206d6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80206cc:	89bb      	ldrh	r3, [r7, #12]
 80206ce:	4619      	mov	r1, r3
 80206d0:	6878      	ldr	r0, [r7, #4]
 80206d2:	f7f7 fd19 	bl	8018108 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80206d6:	687b      	ldr	r3, [r7, #4]
 80206d8:	895b      	ldrh	r3, [r3, #10]
 80206da:	89fa      	ldrh	r2, [r7, #14]
 80206dc:	429a      	cmp	r2, r3
 80206de:	d807      	bhi.n	80206f0 <ip4_input+0x74>
 80206e0:	687b      	ldr	r3, [r7, #4]
 80206e2:	891b      	ldrh	r3, [r3, #8]
 80206e4:	89ba      	ldrh	r2, [r7, #12]
 80206e6:	429a      	cmp	r2, r3
 80206e8:	d802      	bhi.n	80206f0 <ip4_input+0x74>
 80206ea:	89fb      	ldrh	r3, [r7, #14]
 80206ec:	2b13      	cmp	r3, #19
 80206ee:	d804      	bhi.n	80206fa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80206f0:	6878      	ldr	r0, [r7, #4]
 80206f2:	f7f7 fe8f 	bl	8018414 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80206f6:	2300      	movs	r3, #0
 80206f8:	e0db      	b.n	80208b2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80206fa:	697b      	ldr	r3, [r7, #20]
 80206fc:	691b      	ldr	r3, [r3, #16]
 80206fe:	4a6f      	ldr	r2, [pc, #444]	; (80208bc <ip4_input+0x240>)
 8020700:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8020702:	697b      	ldr	r3, [r7, #20]
 8020704:	68db      	ldr	r3, [r3, #12]
 8020706:	4a6d      	ldr	r2, [pc, #436]	; (80208bc <ip4_input+0x240>)
 8020708:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802070a:	4b6c      	ldr	r3, [pc, #432]	; (80208bc <ip4_input+0x240>)
 802070c:	695b      	ldr	r3, [r3, #20]
 802070e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020712:	2be0      	cmp	r3, #224	; 0xe0
 8020714:	d112      	bne.n	802073c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8020716:	683b      	ldr	r3, [r7, #0]
 8020718:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802071c:	f003 0301 	and.w	r3, r3, #1
 8020720:	b2db      	uxtb	r3, r3
 8020722:	2b00      	cmp	r3, #0
 8020724:	d007      	beq.n	8020736 <ip4_input+0xba>
 8020726:	683b      	ldr	r3, [r7, #0]
 8020728:	3304      	adds	r3, #4
 802072a:	681b      	ldr	r3, [r3, #0]
 802072c:	2b00      	cmp	r3, #0
 802072e:	d002      	beq.n	8020736 <ip4_input+0xba>
      netif = inp;
 8020730:	683b      	ldr	r3, [r7, #0]
 8020732:	613b      	str	r3, [r7, #16]
 8020734:	e02a      	b.n	802078c <ip4_input+0x110>
    } else {
      netif = NULL;
 8020736:	2300      	movs	r3, #0
 8020738:	613b      	str	r3, [r7, #16]
 802073a:	e027      	b.n	802078c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 802073c:	6838      	ldr	r0, [r7, #0]
 802073e:	f7ff ff73 	bl	8020628 <ip4_input_accept>
 8020742:	4603      	mov	r3, r0
 8020744:	2b00      	cmp	r3, #0
 8020746:	d002      	beq.n	802074e <ip4_input+0xd2>
      netif = inp;
 8020748:	683b      	ldr	r3, [r7, #0]
 802074a:	613b      	str	r3, [r7, #16]
 802074c:	e01e      	b.n	802078c <ip4_input+0x110>
    } else {
      netif = NULL;
 802074e:	2300      	movs	r3, #0
 8020750:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8020752:	4b5a      	ldr	r3, [pc, #360]	; (80208bc <ip4_input+0x240>)
 8020754:	695b      	ldr	r3, [r3, #20]
 8020756:	b2db      	uxtb	r3, r3
 8020758:	2b7f      	cmp	r3, #127	; 0x7f
 802075a:	d017      	beq.n	802078c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 802075c:	4b58      	ldr	r3, [pc, #352]	; (80208c0 <ip4_input+0x244>)
 802075e:	681b      	ldr	r3, [r3, #0]
 8020760:	613b      	str	r3, [r7, #16]
 8020762:	e00e      	b.n	8020782 <ip4_input+0x106>
          if (netif == inp) {
 8020764:	693a      	ldr	r2, [r7, #16]
 8020766:	683b      	ldr	r3, [r7, #0]
 8020768:	429a      	cmp	r2, r3
 802076a:	d006      	beq.n	802077a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 802076c:	6938      	ldr	r0, [r7, #16]
 802076e:	f7ff ff5b 	bl	8020628 <ip4_input_accept>
 8020772:	4603      	mov	r3, r0
 8020774:	2b00      	cmp	r3, #0
 8020776:	d108      	bne.n	802078a <ip4_input+0x10e>
 8020778:	e000      	b.n	802077c <ip4_input+0x100>
            continue;
 802077a:	bf00      	nop
        NETIF_FOREACH(netif) {
 802077c:	693b      	ldr	r3, [r7, #16]
 802077e:	681b      	ldr	r3, [r3, #0]
 8020780:	613b      	str	r3, [r7, #16]
 8020782:	693b      	ldr	r3, [r7, #16]
 8020784:	2b00      	cmp	r3, #0
 8020786:	d1ed      	bne.n	8020764 <ip4_input+0xe8>
 8020788:	e000      	b.n	802078c <ip4_input+0x110>
            break;
 802078a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 802078c:	4b4b      	ldr	r3, [pc, #300]	; (80208bc <ip4_input+0x240>)
 802078e:	691b      	ldr	r3, [r3, #16]
 8020790:	6839      	ldr	r1, [r7, #0]
 8020792:	4618      	mov	r0, r3
 8020794:	f000 f96e 	bl	8020a74 <ip4_addr_isbroadcast_u32>
 8020798:	4603      	mov	r3, r0
 802079a:	2b00      	cmp	r3, #0
 802079c:	d105      	bne.n	80207aa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 802079e:	4b47      	ldr	r3, [pc, #284]	; (80208bc <ip4_input+0x240>)
 80207a0:	691b      	ldr	r3, [r3, #16]
 80207a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80207a6:	2be0      	cmp	r3, #224	; 0xe0
 80207a8:	d104      	bne.n	80207b4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80207aa:	6878      	ldr	r0, [r7, #4]
 80207ac:	f7f7 fe32 	bl	8018414 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80207b0:	2300      	movs	r3, #0
 80207b2:	e07e      	b.n	80208b2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80207b4:	693b      	ldr	r3, [r7, #16]
 80207b6:	2b00      	cmp	r3, #0
 80207b8:	d104      	bne.n	80207c4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80207ba:	6878      	ldr	r0, [r7, #4]
 80207bc:	f7f7 fe2a 	bl	8018414 <pbuf_free>
    return ERR_OK;
 80207c0:	2300      	movs	r3, #0
 80207c2:	e076      	b.n	80208b2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80207c4:	697b      	ldr	r3, [r7, #20]
 80207c6:	88db      	ldrh	r3, [r3, #6]
 80207c8:	b29b      	uxth	r3, r3
 80207ca:	461a      	mov	r2, r3
 80207cc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80207d0:	4013      	ands	r3, r2
 80207d2:	2b00      	cmp	r3, #0
 80207d4:	d00b      	beq.n	80207ee <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80207d6:	6878      	ldr	r0, [r7, #4]
 80207d8:	f000 fc92 	bl	8021100 <ip4_reass>
 80207dc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80207de:	687b      	ldr	r3, [r7, #4]
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	d101      	bne.n	80207e8 <ip4_input+0x16c>
      return ERR_OK;
 80207e4:	2300      	movs	r3, #0
 80207e6:	e064      	b.n	80208b2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80207e8:	687b      	ldr	r3, [r7, #4]
 80207ea:	685b      	ldr	r3, [r3, #4]
 80207ec:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80207ee:	4a33      	ldr	r2, [pc, #204]	; (80208bc <ip4_input+0x240>)
 80207f0:	693b      	ldr	r3, [r7, #16]
 80207f2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80207f4:	4a31      	ldr	r2, [pc, #196]	; (80208bc <ip4_input+0x240>)
 80207f6:	683b      	ldr	r3, [r7, #0]
 80207f8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80207fa:	4a30      	ldr	r2, [pc, #192]	; (80208bc <ip4_input+0x240>)
 80207fc:	697b      	ldr	r3, [r7, #20]
 80207fe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8020800:	697b      	ldr	r3, [r7, #20]
 8020802:	781b      	ldrb	r3, [r3, #0]
 8020804:	f003 030f 	and.w	r3, r3, #15
 8020808:	b2db      	uxtb	r3, r3
 802080a:	009b      	lsls	r3, r3, #2
 802080c:	b2db      	uxtb	r3, r3
 802080e:	b29a      	uxth	r2, r3
 8020810:	4b2a      	ldr	r3, [pc, #168]	; (80208bc <ip4_input+0x240>)
 8020812:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8020814:	89fb      	ldrh	r3, [r7, #14]
 8020816:	4619      	mov	r1, r3
 8020818:	6878      	ldr	r0, [r7, #4]
 802081a:	f7f7 fd75 	bl	8018308 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 802081e:	697b      	ldr	r3, [r7, #20]
 8020820:	7a5b      	ldrb	r3, [r3, #9]
 8020822:	2b11      	cmp	r3, #17
 8020824:	d006      	beq.n	8020834 <ip4_input+0x1b8>
 8020826:	2b11      	cmp	r3, #17
 8020828:	dc13      	bgt.n	8020852 <ip4_input+0x1d6>
 802082a:	2b01      	cmp	r3, #1
 802082c:	d00c      	beq.n	8020848 <ip4_input+0x1cc>
 802082e:	2b06      	cmp	r3, #6
 8020830:	d005      	beq.n	802083e <ip4_input+0x1c2>
 8020832:	e00e      	b.n	8020852 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8020834:	6839      	ldr	r1, [r7, #0]
 8020836:	6878      	ldr	r0, [r7, #4]
 8020838:	f7fe fb34 	bl	801eea4 <udp_input>
        break;
 802083c:	e026      	b.n	802088c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 802083e:	6839      	ldr	r1, [r7, #0]
 8020840:	6878      	ldr	r0, [r7, #4]
 8020842:	f7f9 feed 	bl	801a620 <tcp_input>
        break;
 8020846:	e021      	b.n	802088c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8020848:	6839      	ldr	r1, [r7, #0]
 802084a:	6878      	ldr	r0, [r7, #4]
 802084c:	f7ff fcc8 	bl	80201e0 <icmp_input>
        break;
 8020850:	e01c      	b.n	802088c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8020852:	4b1a      	ldr	r3, [pc, #104]	; (80208bc <ip4_input+0x240>)
 8020854:	695b      	ldr	r3, [r3, #20]
 8020856:	6939      	ldr	r1, [r7, #16]
 8020858:	4618      	mov	r0, r3
 802085a:	f000 f90b 	bl	8020a74 <ip4_addr_isbroadcast_u32>
 802085e:	4603      	mov	r3, r0
 8020860:	2b00      	cmp	r3, #0
 8020862:	d10f      	bne.n	8020884 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020864:	4b15      	ldr	r3, [pc, #84]	; (80208bc <ip4_input+0x240>)
 8020866:	695b      	ldr	r3, [r3, #20]
 8020868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802086c:	2be0      	cmp	r3, #224	; 0xe0
 802086e:	d009      	beq.n	8020884 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8020870:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8020874:	4619      	mov	r1, r3
 8020876:	6878      	ldr	r0, [r7, #4]
 8020878:	f7f7 fdb9 	bl	80183ee <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 802087c:	2102      	movs	r1, #2
 802087e:	6878      	ldr	r0, [r7, #4]
 8020880:	f7ff fdce 	bl	8020420 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8020884:	6878      	ldr	r0, [r7, #4]
 8020886:	f7f7 fdc5 	bl	8018414 <pbuf_free>
        break;
 802088a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 802088c:	4b0b      	ldr	r3, [pc, #44]	; (80208bc <ip4_input+0x240>)
 802088e:	2200      	movs	r2, #0
 8020890:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8020892:	4b0a      	ldr	r3, [pc, #40]	; (80208bc <ip4_input+0x240>)
 8020894:	2200      	movs	r2, #0
 8020896:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8020898:	4b08      	ldr	r3, [pc, #32]	; (80208bc <ip4_input+0x240>)
 802089a:	2200      	movs	r2, #0
 802089c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 802089e:	4b07      	ldr	r3, [pc, #28]	; (80208bc <ip4_input+0x240>)
 80208a0:	2200      	movs	r2, #0
 80208a2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80208a4:	4b05      	ldr	r3, [pc, #20]	; (80208bc <ip4_input+0x240>)
 80208a6:	2200      	movs	r2, #0
 80208a8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80208aa:	4b04      	ldr	r3, [pc, #16]	; (80208bc <ip4_input+0x240>)
 80208ac:	2200      	movs	r2, #0
 80208ae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80208b0:	2300      	movs	r3, #0
}
 80208b2:	4618      	mov	r0, r3
 80208b4:	3718      	adds	r7, #24
 80208b6:	46bd      	mov	sp, r7
 80208b8:	bd80      	pop	{r7, pc}
 80208ba:	bf00      	nop
 80208bc:	2002bee4 	.word	0x2002bee4
 80208c0:	2002efd8 	.word	0x2002efd8

080208c4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80208c4:	b580      	push	{r7, lr}
 80208c6:	b08a      	sub	sp, #40	; 0x28
 80208c8:	af04      	add	r7, sp, #16
 80208ca:	60f8      	str	r0, [r7, #12]
 80208cc:	60b9      	str	r1, [r7, #8]
 80208ce:	607a      	str	r2, [r7, #4]
 80208d0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80208d2:	68bb      	ldr	r3, [r7, #8]
 80208d4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80208d6:	687b      	ldr	r3, [r7, #4]
 80208d8:	2b00      	cmp	r3, #0
 80208da:	d009      	beq.n	80208f0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80208dc:	68bb      	ldr	r3, [r7, #8]
 80208de:	2b00      	cmp	r3, #0
 80208e0:	d003      	beq.n	80208ea <ip4_output_if+0x26>
 80208e2:	68bb      	ldr	r3, [r7, #8]
 80208e4:	681b      	ldr	r3, [r3, #0]
 80208e6:	2b00      	cmp	r3, #0
 80208e8:	d102      	bne.n	80208f0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80208ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208ec:	3304      	adds	r3, #4
 80208ee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80208f0:	78fa      	ldrb	r2, [r7, #3]
 80208f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80208f4:	9302      	str	r3, [sp, #8]
 80208f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80208fa:	9301      	str	r3, [sp, #4]
 80208fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8020900:	9300      	str	r3, [sp, #0]
 8020902:	4613      	mov	r3, r2
 8020904:	687a      	ldr	r2, [r7, #4]
 8020906:	6979      	ldr	r1, [r7, #20]
 8020908:	68f8      	ldr	r0, [r7, #12]
 802090a:	f000 f805 	bl	8020918 <ip4_output_if_src>
 802090e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8020910:	4618      	mov	r0, r3
 8020912:	3718      	adds	r7, #24
 8020914:	46bd      	mov	sp, r7
 8020916:	bd80      	pop	{r7, pc}

08020918 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8020918:	b580      	push	{r7, lr}
 802091a:	b088      	sub	sp, #32
 802091c:	af00      	add	r7, sp, #0
 802091e:	60f8      	str	r0, [r7, #12]
 8020920:	60b9      	str	r1, [r7, #8]
 8020922:	607a      	str	r2, [r7, #4]
 8020924:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8020926:	68fb      	ldr	r3, [r7, #12]
 8020928:	7b9b      	ldrb	r3, [r3, #14]
 802092a:	2b01      	cmp	r3, #1
 802092c:	d006      	beq.n	802093c <ip4_output_if_src+0x24>
 802092e:	4b4b      	ldr	r3, [pc, #300]	; (8020a5c <ip4_output_if_src+0x144>)
 8020930:	f44f 7255 	mov.w	r2, #852	; 0x354
 8020934:	494a      	ldr	r1, [pc, #296]	; (8020a60 <ip4_output_if_src+0x148>)
 8020936:	484b      	ldr	r0, [pc, #300]	; (8020a64 <ip4_output_if_src+0x14c>)
 8020938:	f001 fd02 	bl	8022340 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 802093c:	687b      	ldr	r3, [r7, #4]
 802093e:	2b00      	cmp	r3, #0
 8020940:	d060      	beq.n	8020a04 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8020942:	2314      	movs	r3, #20
 8020944:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8020946:	2114      	movs	r1, #20
 8020948:	68f8      	ldr	r0, [r7, #12]
 802094a:	f7f7 fccd 	bl	80182e8 <pbuf_add_header>
 802094e:	4603      	mov	r3, r0
 8020950:	2b00      	cmp	r3, #0
 8020952:	d002      	beq.n	802095a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8020954:	f06f 0301 	mvn.w	r3, #1
 8020958:	e07c      	b.n	8020a54 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 802095a:	68fb      	ldr	r3, [r7, #12]
 802095c:	685b      	ldr	r3, [r3, #4]
 802095e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8020960:	68fb      	ldr	r3, [r7, #12]
 8020962:	895b      	ldrh	r3, [r3, #10]
 8020964:	2b13      	cmp	r3, #19
 8020966:	d806      	bhi.n	8020976 <ip4_output_if_src+0x5e>
 8020968:	4b3c      	ldr	r3, [pc, #240]	; (8020a5c <ip4_output_if_src+0x144>)
 802096a:	f44f 7262 	mov.w	r2, #904	; 0x388
 802096e:	493e      	ldr	r1, [pc, #248]	; (8020a68 <ip4_output_if_src+0x150>)
 8020970:	483c      	ldr	r0, [pc, #240]	; (8020a64 <ip4_output_if_src+0x14c>)
 8020972:	f001 fce5 	bl	8022340 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8020976:	69fb      	ldr	r3, [r7, #28]
 8020978:	78fa      	ldrb	r2, [r7, #3]
 802097a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 802097c:	69fb      	ldr	r3, [r7, #28]
 802097e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8020982:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8020984:	687b      	ldr	r3, [r7, #4]
 8020986:	681a      	ldr	r2, [r3, #0]
 8020988:	69fb      	ldr	r3, [r7, #28]
 802098a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 802098c:	8b7b      	ldrh	r3, [r7, #26]
 802098e:	089b      	lsrs	r3, r3, #2
 8020990:	b29b      	uxth	r3, r3
 8020992:	b2db      	uxtb	r3, r3
 8020994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020998:	b2da      	uxtb	r2, r3
 802099a:	69fb      	ldr	r3, [r7, #28]
 802099c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 802099e:	69fb      	ldr	r3, [r7, #28]
 80209a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80209a4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80209a6:	68fb      	ldr	r3, [r7, #12]
 80209a8:	891b      	ldrh	r3, [r3, #8]
 80209aa:	4618      	mov	r0, r3
 80209ac:	f7f6 f888 	bl	8016ac0 <lwip_htons>
 80209b0:	4603      	mov	r3, r0
 80209b2:	461a      	mov	r2, r3
 80209b4:	69fb      	ldr	r3, [r7, #28]
 80209b6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80209b8:	69fb      	ldr	r3, [r7, #28]
 80209ba:	2200      	movs	r2, #0
 80209bc:	719a      	strb	r2, [r3, #6]
 80209be:	2200      	movs	r2, #0
 80209c0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80209c2:	4b2a      	ldr	r3, [pc, #168]	; (8020a6c <ip4_output_if_src+0x154>)
 80209c4:	881b      	ldrh	r3, [r3, #0]
 80209c6:	4618      	mov	r0, r3
 80209c8:	f7f6 f87a 	bl	8016ac0 <lwip_htons>
 80209cc:	4603      	mov	r3, r0
 80209ce:	461a      	mov	r2, r3
 80209d0:	69fb      	ldr	r3, [r7, #28]
 80209d2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80209d4:	4b25      	ldr	r3, [pc, #148]	; (8020a6c <ip4_output_if_src+0x154>)
 80209d6:	881b      	ldrh	r3, [r3, #0]
 80209d8:	3301      	adds	r3, #1
 80209da:	b29a      	uxth	r2, r3
 80209dc:	4b23      	ldr	r3, [pc, #140]	; (8020a6c <ip4_output_if_src+0x154>)
 80209de:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80209e0:	68bb      	ldr	r3, [r7, #8]
 80209e2:	2b00      	cmp	r3, #0
 80209e4:	d104      	bne.n	80209f0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80209e6:	4b22      	ldr	r3, [pc, #136]	; (8020a70 <ip4_output_if_src+0x158>)
 80209e8:	681a      	ldr	r2, [r3, #0]
 80209ea:	69fb      	ldr	r3, [r7, #28]
 80209ec:	60da      	str	r2, [r3, #12]
 80209ee:	e003      	b.n	80209f8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80209f0:	68bb      	ldr	r3, [r7, #8]
 80209f2:	681a      	ldr	r2, [r3, #0]
 80209f4:	69fb      	ldr	r3, [r7, #28]
 80209f6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80209f8:	69fb      	ldr	r3, [r7, #28]
 80209fa:	2200      	movs	r2, #0
 80209fc:	729a      	strb	r2, [r3, #10]
 80209fe:	2200      	movs	r2, #0
 8020a00:	72da      	strb	r2, [r3, #11]
 8020a02:	e00f      	b.n	8020a24 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8020a04:	68fb      	ldr	r3, [r7, #12]
 8020a06:	895b      	ldrh	r3, [r3, #10]
 8020a08:	2b13      	cmp	r3, #19
 8020a0a:	d802      	bhi.n	8020a12 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8020a0c:	f06f 0301 	mvn.w	r3, #1
 8020a10:	e020      	b.n	8020a54 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8020a12:	68fb      	ldr	r3, [r7, #12]
 8020a14:	685b      	ldr	r3, [r3, #4]
 8020a16:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8020a18:	69fb      	ldr	r3, [r7, #28]
 8020a1a:	691b      	ldr	r3, [r3, #16]
 8020a1c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8020a1e:	f107 0314 	add.w	r3, r7, #20
 8020a22:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8020a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020a26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8020a28:	2b00      	cmp	r3, #0
 8020a2a:	d00c      	beq.n	8020a46 <ip4_output_if_src+0x12e>
 8020a2c:	68fb      	ldr	r3, [r7, #12]
 8020a2e:	891a      	ldrh	r2, [r3, #8]
 8020a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020a32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8020a34:	429a      	cmp	r2, r3
 8020a36:	d906      	bls.n	8020a46 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8020a38:	687a      	ldr	r2, [r7, #4]
 8020a3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8020a3c:	68f8      	ldr	r0, [r7, #12]
 8020a3e:	f000 fd53 	bl	80214e8 <ip4_frag>
 8020a42:	4603      	mov	r3, r0
 8020a44:	e006      	b.n	8020a54 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8020a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020a48:	695b      	ldr	r3, [r3, #20]
 8020a4a:	687a      	ldr	r2, [r7, #4]
 8020a4c:	68f9      	ldr	r1, [r7, #12]
 8020a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020a50:	4798      	blx	r3
 8020a52:	4603      	mov	r3, r0
}
 8020a54:	4618      	mov	r0, r3
 8020a56:	3720      	adds	r7, #32
 8020a58:	46bd      	mov	sp, r7
 8020a5a:	bd80      	pop	{r7, pc}
 8020a5c:	08026a50 	.word	0x08026a50
 8020a60:	08026a84 	.word	0x08026a84
 8020a64:	08026a90 	.word	0x08026a90
 8020a68:	08026ab8 	.word	0x08026ab8
 8020a6c:	2002f136 	.word	0x2002f136
 8020a70:	080270c4 	.word	0x080270c4

08020a74 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8020a74:	b480      	push	{r7}
 8020a76:	b085      	sub	sp, #20
 8020a78:	af00      	add	r7, sp, #0
 8020a7a:	6078      	str	r0, [r7, #4]
 8020a7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8020a7e:	687b      	ldr	r3, [r7, #4]
 8020a80:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8020a82:	687b      	ldr	r3, [r7, #4]
 8020a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020a88:	d002      	beq.n	8020a90 <ip4_addr_isbroadcast_u32+0x1c>
 8020a8a:	687b      	ldr	r3, [r7, #4]
 8020a8c:	2b00      	cmp	r3, #0
 8020a8e:	d101      	bne.n	8020a94 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8020a90:	2301      	movs	r3, #1
 8020a92:	e02a      	b.n	8020aea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8020a94:	683b      	ldr	r3, [r7, #0]
 8020a96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8020a9a:	f003 0302 	and.w	r3, r3, #2
 8020a9e:	2b00      	cmp	r3, #0
 8020aa0:	d101      	bne.n	8020aa6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8020aa2:	2300      	movs	r3, #0
 8020aa4:	e021      	b.n	8020aea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8020aa6:	683b      	ldr	r3, [r7, #0]
 8020aa8:	3304      	adds	r3, #4
 8020aaa:	681b      	ldr	r3, [r3, #0]
 8020aac:	687a      	ldr	r2, [r7, #4]
 8020aae:	429a      	cmp	r2, r3
 8020ab0:	d101      	bne.n	8020ab6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8020ab2:	2300      	movs	r3, #0
 8020ab4:	e019      	b.n	8020aea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8020ab6:	68fa      	ldr	r2, [r7, #12]
 8020ab8:	683b      	ldr	r3, [r7, #0]
 8020aba:	3304      	adds	r3, #4
 8020abc:	681b      	ldr	r3, [r3, #0]
 8020abe:	405a      	eors	r2, r3
 8020ac0:	683b      	ldr	r3, [r7, #0]
 8020ac2:	3308      	adds	r3, #8
 8020ac4:	681b      	ldr	r3, [r3, #0]
 8020ac6:	4013      	ands	r3, r2
 8020ac8:	2b00      	cmp	r3, #0
 8020aca:	d10d      	bne.n	8020ae8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8020acc:	683b      	ldr	r3, [r7, #0]
 8020ace:	3308      	adds	r3, #8
 8020ad0:	681b      	ldr	r3, [r3, #0]
 8020ad2:	43da      	mvns	r2, r3
 8020ad4:	687b      	ldr	r3, [r7, #4]
 8020ad6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8020ad8:	683b      	ldr	r3, [r7, #0]
 8020ada:	3308      	adds	r3, #8
 8020adc:	681b      	ldr	r3, [r3, #0]
 8020ade:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8020ae0:	429a      	cmp	r2, r3
 8020ae2:	d101      	bne.n	8020ae8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8020ae4:	2301      	movs	r3, #1
 8020ae6:	e000      	b.n	8020aea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8020ae8:	2300      	movs	r3, #0
  }
}
 8020aea:	4618      	mov	r0, r3
 8020aec:	3714      	adds	r7, #20
 8020aee:	46bd      	mov	sp, r7
 8020af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020af4:	4770      	bx	lr
	...

08020af8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8020af8:	b580      	push	{r7, lr}
 8020afa:	b084      	sub	sp, #16
 8020afc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8020afe:	2300      	movs	r3, #0
 8020b00:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8020b02:	4b12      	ldr	r3, [pc, #72]	; (8020b4c <ip_reass_tmr+0x54>)
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8020b08:	e018      	b.n	8020b3c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8020b0a:	68fb      	ldr	r3, [r7, #12]
 8020b0c:	7fdb      	ldrb	r3, [r3, #31]
 8020b0e:	2b00      	cmp	r3, #0
 8020b10:	d00b      	beq.n	8020b2a <ip_reass_tmr+0x32>
      r->timer--;
 8020b12:	68fb      	ldr	r3, [r7, #12]
 8020b14:	7fdb      	ldrb	r3, [r3, #31]
 8020b16:	3b01      	subs	r3, #1
 8020b18:	b2da      	uxtb	r2, r3
 8020b1a:	68fb      	ldr	r3, [r7, #12]
 8020b1c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8020b1e:	68fb      	ldr	r3, [r7, #12]
 8020b20:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8020b22:	68fb      	ldr	r3, [r7, #12]
 8020b24:	681b      	ldr	r3, [r3, #0]
 8020b26:	60fb      	str	r3, [r7, #12]
 8020b28:	e008      	b.n	8020b3c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8020b2a:	68fb      	ldr	r3, [r7, #12]
 8020b2c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8020b2e:	68fb      	ldr	r3, [r7, #12]
 8020b30:	681b      	ldr	r3, [r3, #0]
 8020b32:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8020b34:	68b9      	ldr	r1, [r7, #8]
 8020b36:	6878      	ldr	r0, [r7, #4]
 8020b38:	f000 f80a 	bl	8020b50 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8020b3c:	68fb      	ldr	r3, [r7, #12]
 8020b3e:	2b00      	cmp	r3, #0
 8020b40:	d1e3      	bne.n	8020b0a <ip_reass_tmr+0x12>
    }
  }
}
 8020b42:	bf00      	nop
 8020b44:	bf00      	nop
 8020b46:	3710      	adds	r7, #16
 8020b48:	46bd      	mov	sp, r7
 8020b4a:	bd80      	pop	{r7, pc}
 8020b4c:	2002f138 	.word	0x2002f138

08020b50 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8020b50:	b580      	push	{r7, lr}
 8020b52:	b088      	sub	sp, #32
 8020b54:	af00      	add	r7, sp, #0
 8020b56:	6078      	str	r0, [r7, #4]
 8020b58:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8020b5a:	2300      	movs	r3, #0
 8020b5c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8020b5e:	683a      	ldr	r2, [r7, #0]
 8020b60:	687b      	ldr	r3, [r7, #4]
 8020b62:	429a      	cmp	r2, r3
 8020b64:	d105      	bne.n	8020b72 <ip_reass_free_complete_datagram+0x22>
 8020b66:	4b45      	ldr	r3, [pc, #276]	; (8020c7c <ip_reass_free_complete_datagram+0x12c>)
 8020b68:	22ab      	movs	r2, #171	; 0xab
 8020b6a:	4945      	ldr	r1, [pc, #276]	; (8020c80 <ip_reass_free_complete_datagram+0x130>)
 8020b6c:	4845      	ldr	r0, [pc, #276]	; (8020c84 <ip_reass_free_complete_datagram+0x134>)
 8020b6e:	f001 fbe7 	bl	8022340 <iprintf>
  if (prev != NULL) {
 8020b72:	683b      	ldr	r3, [r7, #0]
 8020b74:	2b00      	cmp	r3, #0
 8020b76:	d00a      	beq.n	8020b8e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8020b78:	683b      	ldr	r3, [r7, #0]
 8020b7a:	681b      	ldr	r3, [r3, #0]
 8020b7c:	687a      	ldr	r2, [r7, #4]
 8020b7e:	429a      	cmp	r2, r3
 8020b80:	d005      	beq.n	8020b8e <ip_reass_free_complete_datagram+0x3e>
 8020b82:	4b3e      	ldr	r3, [pc, #248]	; (8020c7c <ip_reass_free_complete_datagram+0x12c>)
 8020b84:	22ad      	movs	r2, #173	; 0xad
 8020b86:	4940      	ldr	r1, [pc, #256]	; (8020c88 <ip_reass_free_complete_datagram+0x138>)
 8020b88:	483e      	ldr	r0, [pc, #248]	; (8020c84 <ip_reass_free_complete_datagram+0x134>)
 8020b8a:	f001 fbd9 	bl	8022340 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8020b8e:	687b      	ldr	r3, [r7, #4]
 8020b90:	685b      	ldr	r3, [r3, #4]
 8020b92:	685b      	ldr	r3, [r3, #4]
 8020b94:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8020b96:	697b      	ldr	r3, [r7, #20]
 8020b98:	889b      	ldrh	r3, [r3, #4]
 8020b9a:	b29b      	uxth	r3, r3
 8020b9c:	2b00      	cmp	r3, #0
 8020b9e:	d12a      	bne.n	8020bf6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8020ba0:	687b      	ldr	r3, [r7, #4]
 8020ba2:	685b      	ldr	r3, [r3, #4]
 8020ba4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8020ba6:	697b      	ldr	r3, [r7, #20]
 8020ba8:	681a      	ldr	r2, [r3, #0]
 8020baa:	687b      	ldr	r3, [r7, #4]
 8020bac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8020bae:	69bb      	ldr	r3, [r7, #24]
 8020bb0:	6858      	ldr	r0, [r3, #4]
 8020bb2:	687b      	ldr	r3, [r7, #4]
 8020bb4:	3308      	adds	r3, #8
 8020bb6:	2214      	movs	r2, #20
 8020bb8:	4619      	mov	r1, r3
 8020bba:	f001 fd32 	bl	8022622 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8020bbe:	2101      	movs	r1, #1
 8020bc0:	69b8      	ldr	r0, [r7, #24]
 8020bc2:	f7ff fc3d 	bl	8020440 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8020bc6:	69b8      	ldr	r0, [r7, #24]
 8020bc8:	f7f7 fcb2 	bl	8018530 <pbuf_clen>
 8020bcc:	4603      	mov	r3, r0
 8020bce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8020bd0:	8bfa      	ldrh	r2, [r7, #30]
 8020bd2:	8a7b      	ldrh	r3, [r7, #18]
 8020bd4:	4413      	add	r3, r2
 8020bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020bda:	db05      	blt.n	8020be8 <ip_reass_free_complete_datagram+0x98>
 8020bdc:	4b27      	ldr	r3, [pc, #156]	; (8020c7c <ip_reass_free_complete_datagram+0x12c>)
 8020bde:	22bc      	movs	r2, #188	; 0xbc
 8020be0:	492a      	ldr	r1, [pc, #168]	; (8020c8c <ip_reass_free_complete_datagram+0x13c>)
 8020be2:	4828      	ldr	r0, [pc, #160]	; (8020c84 <ip_reass_free_complete_datagram+0x134>)
 8020be4:	f001 fbac 	bl	8022340 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8020be8:	8bfa      	ldrh	r2, [r7, #30]
 8020bea:	8a7b      	ldrh	r3, [r7, #18]
 8020bec:	4413      	add	r3, r2
 8020bee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8020bf0:	69b8      	ldr	r0, [r7, #24]
 8020bf2:	f7f7 fc0f 	bl	8018414 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8020bf6:	687b      	ldr	r3, [r7, #4]
 8020bf8:	685b      	ldr	r3, [r3, #4]
 8020bfa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8020bfc:	e01f      	b.n	8020c3e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8020bfe:	69bb      	ldr	r3, [r7, #24]
 8020c00:	685b      	ldr	r3, [r3, #4]
 8020c02:	617b      	str	r3, [r7, #20]
    pcur = p;
 8020c04:	69bb      	ldr	r3, [r7, #24]
 8020c06:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8020c08:	697b      	ldr	r3, [r7, #20]
 8020c0a:	681b      	ldr	r3, [r3, #0]
 8020c0c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8020c0e:	68f8      	ldr	r0, [r7, #12]
 8020c10:	f7f7 fc8e 	bl	8018530 <pbuf_clen>
 8020c14:	4603      	mov	r3, r0
 8020c16:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8020c18:	8bfa      	ldrh	r2, [r7, #30]
 8020c1a:	8a7b      	ldrh	r3, [r7, #18]
 8020c1c:	4413      	add	r3, r2
 8020c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020c22:	db05      	blt.n	8020c30 <ip_reass_free_complete_datagram+0xe0>
 8020c24:	4b15      	ldr	r3, [pc, #84]	; (8020c7c <ip_reass_free_complete_datagram+0x12c>)
 8020c26:	22cc      	movs	r2, #204	; 0xcc
 8020c28:	4918      	ldr	r1, [pc, #96]	; (8020c8c <ip_reass_free_complete_datagram+0x13c>)
 8020c2a:	4816      	ldr	r0, [pc, #88]	; (8020c84 <ip_reass_free_complete_datagram+0x134>)
 8020c2c:	f001 fb88 	bl	8022340 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8020c30:	8bfa      	ldrh	r2, [r7, #30]
 8020c32:	8a7b      	ldrh	r3, [r7, #18]
 8020c34:	4413      	add	r3, r2
 8020c36:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8020c38:	68f8      	ldr	r0, [r7, #12]
 8020c3a:	f7f7 fbeb 	bl	8018414 <pbuf_free>
  while (p != NULL) {
 8020c3e:	69bb      	ldr	r3, [r7, #24]
 8020c40:	2b00      	cmp	r3, #0
 8020c42:	d1dc      	bne.n	8020bfe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8020c44:	6839      	ldr	r1, [r7, #0]
 8020c46:	6878      	ldr	r0, [r7, #4]
 8020c48:	f000 f8c2 	bl	8020dd0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8020c4c:	4b10      	ldr	r3, [pc, #64]	; (8020c90 <ip_reass_free_complete_datagram+0x140>)
 8020c4e:	881b      	ldrh	r3, [r3, #0]
 8020c50:	8bfa      	ldrh	r2, [r7, #30]
 8020c52:	429a      	cmp	r2, r3
 8020c54:	d905      	bls.n	8020c62 <ip_reass_free_complete_datagram+0x112>
 8020c56:	4b09      	ldr	r3, [pc, #36]	; (8020c7c <ip_reass_free_complete_datagram+0x12c>)
 8020c58:	22d2      	movs	r2, #210	; 0xd2
 8020c5a:	490e      	ldr	r1, [pc, #56]	; (8020c94 <ip_reass_free_complete_datagram+0x144>)
 8020c5c:	4809      	ldr	r0, [pc, #36]	; (8020c84 <ip_reass_free_complete_datagram+0x134>)
 8020c5e:	f001 fb6f 	bl	8022340 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8020c62:	4b0b      	ldr	r3, [pc, #44]	; (8020c90 <ip_reass_free_complete_datagram+0x140>)
 8020c64:	881a      	ldrh	r2, [r3, #0]
 8020c66:	8bfb      	ldrh	r3, [r7, #30]
 8020c68:	1ad3      	subs	r3, r2, r3
 8020c6a:	b29a      	uxth	r2, r3
 8020c6c:	4b08      	ldr	r3, [pc, #32]	; (8020c90 <ip_reass_free_complete_datagram+0x140>)
 8020c6e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8020c70:	8bfb      	ldrh	r3, [r7, #30]
}
 8020c72:	4618      	mov	r0, r3
 8020c74:	3720      	adds	r7, #32
 8020c76:	46bd      	mov	sp, r7
 8020c78:	bd80      	pop	{r7, pc}
 8020c7a:	bf00      	nop
 8020c7c:	08026ae8 	.word	0x08026ae8
 8020c80:	08026b24 	.word	0x08026b24
 8020c84:	08026b30 	.word	0x08026b30
 8020c88:	08026b58 	.word	0x08026b58
 8020c8c:	08026b6c 	.word	0x08026b6c
 8020c90:	2002f13c 	.word	0x2002f13c
 8020c94:	08026b8c 	.word	0x08026b8c

08020c98 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8020c98:	b580      	push	{r7, lr}
 8020c9a:	b08a      	sub	sp, #40	; 0x28
 8020c9c:	af00      	add	r7, sp, #0
 8020c9e:	6078      	str	r0, [r7, #4]
 8020ca0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8020ca2:	2300      	movs	r3, #0
 8020ca4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8020ca6:	2300      	movs	r3, #0
 8020ca8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8020caa:	2300      	movs	r3, #0
 8020cac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8020cae:	2300      	movs	r3, #0
 8020cb0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8020cb2:	2300      	movs	r3, #0
 8020cb4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8020cb6:	4b28      	ldr	r3, [pc, #160]	; (8020d58 <ip_reass_remove_oldest_datagram+0xc0>)
 8020cb8:	681b      	ldr	r3, [r3, #0]
 8020cba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8020cbc:	e030      	b.n	8020d20 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8020cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cc0:	695a      	ldr	r2, [r3, #20]
 8020cc2:	687b      	ldr	r3, [r7, #4]
 8020cc4:	68db      	ldr	r3, [r3, #12]
 8020cc6:	429a      	cmp	r2, r3
 8020cc8:	d10c      	bne.n	8020ce4 <ip_reass_remove_oldest_datagram+0x4c>
 8020cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ccc:	699a      	ldr	r2, [r3, #24]
 8020cce:	687b      	ldr	r3, [r7, #4]
 8020cd0:	691b      	ldr	r3, [r3, #16]
 8020cd2:	429a      	cmp	r2, r3
 8020cd4:	d106      	bne.n	8020ce4 <ip_reass_remove_oldest_datagram+0x4c>
 8020cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cd8:	899a      	ldrh	r2, [r3, #12]
 8020cda:	687b      	ldr	r3, [r7, #4]
 8020cdc:	889b      	ldrh	r3, [r3, #4]
 8020cde:	b29b      	uxth	r3, r3
 8020ce0:	429a      	cmp	r2, r3
 8020ce2:	d014      	beq.n	8020d0e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8020ce4:	693b      	ldr	r3, [r7, #16]
 8020ce6:	3301      	adds	r3, #1
 8020ce8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8020cea:	6a3b      	ldr	r3, [r7, #32]
 8020cec:	2b00      	cmp	r3, #0
 8020cee:	d104      	bne.n	8020cfa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8020cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cf2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8020cf4:	69fb      	ldr	r3, [r7, #28]
 8020cf6:	61bb      	str	r3, [r7, #24]
 8020cf8:	e009      	b.n	8020d0e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8020cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cfc:	7fda      	ldrb	r2, [r3, #31]
 8020cfe:	6a3b      	ldr	r3, [r7, #32]
 8020d00:	7fdb      	ldrb	r3, [r3, #31]
 8020d02:	429a      	cmp	r2, r3
 8020d04:	d803      	bhi.n	8020d0e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8020d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d08:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8020d0a:	69fb      	ldr	r3, [r7, #28]
 8020d0c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8020d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d10:	681b      	ldr	r3, [r3, #0]
 8020d12:	2b00      	cmp	r3, #0
 8020d14:	d001      	beq.n	8020d1a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8020d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d18:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8020d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d1c:	681b      	ldr	r3, [r3, #0]
 8020d1e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8020d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d22:	2b00      	cmp	r3, #0
 8020d24:	d1cb      	bne.n	8020cbe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8020d26:	6a3b      	ldr	r3, [r7, #32]
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	d008      	beq.n	8020d3e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8020d2c:	69b9      	ldr	r1, [r7, #24]
 8020d2e:	6a38      	ldr	r0, [r7, #32]
 8020d30:	f7ff ff0e 	bl	8020b50 <ip_reass_free_complete_datagram>
 8020d34:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8020d36:	697a      	ldr	r2, [r7, #20]
 8020d38:	68fb      	ldr	r3, [r7, #12]
 8020d3a:	4413      	add	r3, r2
 8020d3c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8020d3e:	697a      	ldr	r2, [r7, #20]
 8020d40:	683b      	ldr	r3, [r7, #0]
 8020d42:	429a      	cmp	r2, r3
 8020d44:	da02      	bge.n	8020d4c <ip_reass_remove_oldest_datagram+0xb4>
 8020d46:	693b      	ldr	r3, [r7, #16]
 8020d48:	2b01      	cmp	r3, #1
 8020d4a:	dcac      	bgt.n	8020ca6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8020d4c:	697b      	ldr	r3, [r7, #20]
}
 8020d4e:	4618      	mov	r0, r3
 8020d50:	3728      	adds	r7, #40	; 0x28
 8020d52:	46bd      	mov	sp, r7
 8020d54:	bd80      	pop	{r7, pc}
 8020d56:	bf00      	nop
 8020d58:	2002f138 	.word	0x2002f138

08020d5c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8020d5c:	b580      	push	{r7, lr}
 8020d5e:	b084      	sub	sp, #16
 8020d60:	af00      	add	r7, sp, #0
 8020d62:	6078      	str	r0, [r7, #4]
 8020d64:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8020d66:	2004      	movs	r0, #4
 8020d68:	f7f6 fc3a 	bl	80175e0 <memp_malloc>
 8020d6c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8020d6e:	68fb      	ldr	r3, [r7, #12]
 8020d70:	2b00      	cmp	r3, #0
 8020d72:	d110      	bne.n	8020d96 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8020d74:	6839      	ldr	r1, [r7, #0]
 8020d76:	6878      	ldr	r0, [r7, #4]
 8020d78:	f7ff ff8e 	bl	8020c98 <ip_reass_remove_oldest_datagram>
 8020d7c:	4602      	mov	r2, r0
 8020d7e:	683b      	ldr	r3, [r7, #0]
 8020d80:	4293      	cmp	r3, r2
 8020d82:	dc03      	bgt.n	8020d8c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8020d84:	2004      	movs	r0, #4
 8020d86:	f7f6 fc2b 	bl	80175e0 <memp_malloc>
 8020d8a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8020d8c:	68fb      	ldr	r3, [r7, #12]
 8020d8e:	2b00      	cmp	r3, #0
 8020d90:	d101      	bne.n	8020d96 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8020d92:	2300      	movs	r3, #0
 8020d94:	e016      	b.n	8020dc4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8020d96:	2220      	movs	r2, #32
 8020d98:	2100      	movs	r1, #0
 8020d9a:	68f8      	ldr	r0, [r7, #12]
 8020d9c:	f001 fba8 	bl	80224f0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8020da0:	68fb      	ldr	r3, [r7, #12]
 8020da2:	220f      	movs	r2, #15
 8020da4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8020da6:	4b09      	ldr	r3, [pc, #36]	; (8020dcc <ip_reass_enqueue_new_datagram+0x70>)
 8020da8:	681a      	ldr	r2, [r3, #0]
 8020daa:	68fb      	ldr	r3, [r7, #12]
 8020dac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8020dae:	4a07      	ldr	r2, [pc, #28]	; (8020dcc <ip_reass_enqueue_new_datagram+0x70>)
 8020db0:	68fb      	ldr	r3, [r7, #12]
 8020db2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8020db4:	68fb      	ldr	r3, [r7, #12]
 8020db6:	3308      	adds	r3, #8
 8020db8:	2214      	movs	r2, #20
 8020dba:	6879      	ldr	r1, [r7, #4]
 8020dbc:	4618      	mov	r0, r3
 8020dbe:	f001 fc30 	bl	8022622 <memcpy>
  return ipr;
 8020dc2:	68fb      	ldr	r3, [r7, #12]
}
 8020dc4:	4618      	mov	r0, r3
 8020dc6:	3710      	adds	r7, #16
 8020dc8:	46bd      	mov	sp, r7
 8020dca:	bd80      	pop	{r7, pc}
 8020dcc:	2002f138 	.word	0x2002f138

08020dd0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8020dd0:	b580      	push	{r7, lr}
 8020dd2:	b082      	sub	sp, #8
 8020dd4:	af00      	add	r7, sp, #0
 8020dd6:	6078      	str	r0, [r7, #4]
 8020dd8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8020dda:	4b10      	ldr	r3, [pc, #64]	; (8020e1c <ip_reass_dequeue_datagram+0x4c>)
 8020ddc:	681b      	ldr	r3, [r3, #0]
 8020dde:	687a      	ldr	r2, [r7, #4]
 8020de0:	429a      	cmp	r2, r3
 8020de2:	d104      	bne.n	8020dee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8020de4:	687b      	ldr	r3, [r7, #4]
 8020de6:	681b      	ldr	r3, [r3, #0]
 8020de8:	4a0c      	ldr	r2, [pc, #48]	; (8020e1c <ip_reass_dequeue_datagram+0x4c>)
 8020dea:	6013      	str	r3, [r2, #0]
 8020dec:	e00d      	b.n	8020e0a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8020dee:	683b      	ldr	r3, [r7, #0]
 8020df0:	2b00      	cmp	r3, #0
 8020df2:	d106      	bne.n	8020e02 <ip_reass_dequeue_datagram+0x32>
 8020df4:	4b0a      	ldr	r3, [pc, #40]	; (8020e20 <ip_reass_dequeue_datagram+0x50>)
 8020df6:	f240 1245 	movw	r2, #325	; 0x145
 8020dfa:	490a      	ldr	r1, [pc, #40]	; (8020e24 <ip_reass_dequeue_datagram+0x54>)
 8020dfc:	480a      	ldr	r0, [pc, #40]	; (8020e28 <ip_reass_dequeue_datagram+0x58>)
 8020dfe:	f001 fa9f 	bl	8022340 <iprintf>
    prev->next = ipr->next;
 8020e02:	687b      	ldr	r3, [r7, #4]
 8020e04:	681a      	ldr	r2, [r3, #0]
 8020e06:	683b      	ldr	r3, [r7, #0]
 8020e08:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8020e0a:	6879      	ldr	r1, [r7, #4]
 8020e0c:	2004      	movs	r0, #4
 8020e0e:	f7f6 fc5d 	bl	80176cc <memp_free>
}
 8020e12:	bf00      	nop
 8020e14:	3708      	adds	r7, #8
 8020e16:	46bd      	mov	sp, r7
 8020e18:	bd80      	pop	{r7, pc}
 8020e1a:	bf00      	nop
 8020e1c:	2002f138 	.word	0x2002f138
 8020e20:	08026ae8 	.word	0x08026ae8
 8020e24:	08026bb0 	.word	0x08026bb0
 8020e28:	08026b30 	.word	0x08026b30

08020e2c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8020e2c:	b580      	push	{r7, lr}
 8020e2e:	b08c      	sub	sp, #48	; 0x30
 8020e30:	af00      	add	r7, sp, #0
 8020e32:	60f8      	str	r0, [r7, #12]
 8020e34:	60b9      	str	r1, [r7, #8]
 8020e36:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8020e38:	2300      	movs	r3, #0
 8020e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8020e3c:	2301      	movs	r3, #1
 8020e3e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8020e40:	68bb      	ldr	r3, [r7, #8]
 8020e42:	685b      	ldr	r3, [r3, #4]
 8020e44:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8020e46:	69fb      	ldr	r3, [r7, #28]
 8020e48:	885b      	ldrh	r3, [r3, #2]
 8020e4a:	b29b      	uxth	r3, r3
 8020e4c:	4618      	mov	r0, r3
 8020e4e:	f7f5 fe37 	bl	8016ac0 <lwip_htons>
 8020e52:	4603      	mov	r3, r0
 8020e54:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8020e56:	69fb      	ldr	r3, [r7, #28]
 8020e58:	781b      	ldrb	r3, [r3, #0]
 8020e5a:	f003 030f 	and.w	r3, r3, #15
 8020e5e:	b2db      	uxtb	r3, r3
 8020e60:	009b      	lsls	r3, r3, #2
 8020e62:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8020e64:	7e7b      	ldrb	r3, [r7, #25]
 8020e66:	b29b      	uxth	r3, r3
 8020e68:	8b7a      	ldrh	r2, [r7, #26]
 8020e6a:	429a      	cmp	r2, r3
 8020e6c:	d202      	bcs.n	8020e74 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8020e72:	e135      	b.n	80210e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8020e74:	7e7b      	ldrb	r3, [r7, #25]
 8020e76:	b29b      	uxth	r3, r3
 8020e78:	8b7a      	ldrh	r2, [r7, #26]
 8020e7a:	1ad3      	subs	r3, r2, r3
 8020e7c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8020e7e:	69fb      	ldr	r3, [r7, #28]
 8020e80:	88db      	ldrh	r3, [r3, #6]
 8020e82:	b29b      	uxth	r3, r3
 8020e84:	4618      	mov	r0, r3
 8020e86:	f7f5 fe1b 	bl	8016ac0 <lwip_htons>
 8020e8a:	4603      	mov	r3, r0
 8020e8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020e90:	b29b      	uxth	r3, r3
 8020e92:	00db      	lsls	r3, r3, #3
 8020e94:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8020e96:	68bb      	ldr	r3, [r7, #8]
 8020e98:	685b      	ldr	r3, [r3, #4]
 8020e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8020e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020e9e:	2200      	movs	r2, #0
 8020ea0:	701a      	strb	r2, [r3, #0]
 8020ea2:	2200      	movs	r2, #0
 8020ea4:	705a      	strb	r2, [r3, #1]
 8020ea6:	2200      	movs	r2, #0
 8020ea8:	709a      	strb	r2, [r3, #2]
 8020eaa:	2200      	movs	r2, #0
 8020eac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8020eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020eb0:	8afa      	ldrh	r2, [r7, #22]
 8020eb2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8020eb4:	8afa      	ldrh	r2, [r7, #22]
 8020eb6:	8b7b      	ldrh	r3, [r7, #26]
 8020eb8:	4413      	add	r3, r2
 8020eba:	b29a      	uxth	r2, r3
 8020ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ebe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8020ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ec2:	88db      	ldrh	r3, [r3, #6]
 8020ec4:	b29b      	uxth	r3, r3
 8020ec6:	8afa      	ldrh	r2, [r7, #22]
 8020ec8:	429a      	cmp	r2, r3
 8020eca:	d902      	bls.n	8020ed2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8020ed0:	e106      	b.n	80210e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8020ed2:	68fb      	ldr	r3, [r7, #12]
 8020ed4:	685b      	ldr	r3, [r3, #4]
 8020ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8020ed8:	e068      	b.n	8020fac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8020eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020edc:	685b      	ldr	r3, [r3, #4]
 8020ede:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8020ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ee2:	889b      	ldrh	r3, [r3, #4]
 8020ee4:	b29a      	uxth	r2, r3
 8020ee6:	693b      	ldr	r3, [r7, #16]
 8020ee8:	889b      	ldrh	r3, [r3, #4]
 8020eea:	b29b      	uxth	r3, r3
 8020eec:	429a      	cmp	r2, r3
 8020eee:	d235      	bcs.n	8020f5c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8020ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020ef4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8020ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	d020      	beq.n	8020f3e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8020efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020efe:	889b      	ldrh	r3, [r3, #4]
 8020f00:	b29a      	uxth	r2, r3
 8020f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f04:	88db      	ldrh	r3, [r3, #6]
 8020f06:	b29b      	uxth	r3, r3
 8020f08:	429a      	cmp	r2, r3
 8020f0a:	d307      	bcc.n	8020f1c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8020f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020f0e:	88db      	ldrh	r3, [r3, #6]
 8020f10:	b29a      	uxth	r2, r3
 8020f12:	693b      	ldr	r3, [r7, #16]
 8020f14:	889b      	ldrh	r3, [r3, #4]
 8020f16:	b29b      	uxth	r3, r3
 8020f18:	429a      	cmp	r2, r3
 8020f1a:	d902      	bls.n	8020f22 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8020f20:	e0de      	b.n	80210e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8020f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f24:	68ba      	ldr	r2, [r7, #8]
 8020f26:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8020f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f2a:	88db      	ldrh	r3, [r3, #6]
 8020f2c:	b29a      	uxth	r2, r3
 8020f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020f30:	889b      	ldrh	r3, [r3, #4]
 8020f32:	b29b      	uxth	r3, r3
 8020f34:	429a      	cmp	r2, r3
 8020f36:	d03d      	beq.n	8020fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8020f38:	2300      	movs	r3, #0
 8020f3a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8020f3c:	e03a      	b.n	8020fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8020f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020f40:	88db      	ldrh	r3, [r3, #6]
 8020f42:	b29a      	uxth	r2, r3
 8020f44:	693b      	ldr	r3, [r7, #16]
 8020f46:	889b      	ldrh	r3, [r3, #4]
 8020f48:	b29b      	uxth	r3, r3
 8020f4a:	429a      	cmp	r2, r3
 8020f4c:	d902      	bls.n	8020f54 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8020f52:	e0c5      	b.n	80210e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8020f54:	68fb      	ldr	r3, [r7, #12]
 8020f56:	68ba      	ldr	r2, [r7, #8]
 8020f58:	605a      	str	r2, [r3, #4]
      break;
 8020f5a:	e02b      	b.n	8020fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8020f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020f5e:	889b      	ldrh	r3, [r3, #4]
 8020f60:	b29a      	uxth	r2, r3
 8020f62:	693b      	ldr	r3, [r7, #16]
 8020f64:	889b      	ldrh	r3, [r3, #4]
 8020f66:	b29b      	uxth	r3, r3
 8020f68:	429a      	cmp	r2, r3
 8020f6a:	d102      	bne.n	8020f72 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8020f70:	e0b6      	b.n	80210e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8020f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020f74:	889b      	ldrh	r3, [r3, #4]
 8020f76:	b29a      	uxth	r2, r3
 8020f78:	693b      	ldr	r3, [r7, #16]
 8020f7a:	88db      	ldrh	r3, [r3, #6]
 8020f7c:	b29b      	uxth	r3, r3
 8020f7e:	429a      	cmp	r2, r3
 8020f80:	d202      	bcs.n	8020f88 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020f82:	f04f 33ff 	mov.w	r3, #4294967295
 8020f86:	e0ab      	b.n	80210e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8020f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f8a:	2b00      	cmp	r3, #0
 8020f8c:	d009      	beq.n	8020fa2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8020f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020f90:	88db      	ldrh	r3, [r3, #6]
 8020f92:	b29a      	uxth	r2, r3
 8020f94:	693b      	ldr	r3, [r7, #16]
 8020f96:	889b      	ldrh	r3, [r3, #4]
 8020f98:	b29b      	uxth	r3, r3
 8020f9a:	429a      	cmp	r2, r3
 8020f9c:	d001      	beq.n	8020fa2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8020f9e:	2300      	movs	r3, #0
 8020fa0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8020fa2:	693b      	ldr	r3, [r7, #16]
 8020fa4:	681b      	ldr	r3, [r3, #0]
 8020fa6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8020fa8:	693b      	ldr	r3, [r7, #16]
 8020faa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8020fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020fae:	2b00      	cmp	r3, #0
 8020fb0:	d193      	bne.n	8020eda <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8020fb2:	e000      	b.n	8020fb6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8020fb4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8020fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020fb8:	2b00      	cmp	r3, #0
 8020fba:	d12d      	bne.n	8021018 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8020fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020fbe:	2b00      	cmp	r3, #0
 8020fc0:	d01c      	beq.n	8020ffc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8020fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020fc4:	88db      	ldrh	r3, [r3, #6]
 8020fc6:	b29a      	uxth	r2, r3
 8020fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020fca:	889b      	ldrh	r3, [r3, #4]
 8020fcc:	b29b      	uxth	r3, r3
 8020fce:	429a      	cmp	r2, r3
 8020fd0:	d906      	bls.n	8020fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8020fd2:	4b45      	ldr	r3, [pc, #276]	; (80210e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8020fd4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8020fd8:	4944      	ldr	r1, [pc, #272]	; (80210ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8020fda:	4845      	ldr	r0, [pc, #276]	; (80210f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8020fdc:	f001 f9b0 	bl	8022340 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8020fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020fe2:	68ba      	ldr	r2, [r7, #8]
 8020fe4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8020fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020fe8:	88db      	ldrh	r3, [r3, #6]
 8020fea:	b29a      	uxth	r2, r3
 8020fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020fee:	889b      	ldrh	r3, [r3, #4]
 8020ff0:	b29b      	uxth	r3, r3
 8020ff2:	429a      	cmp	r2, r3
 8020ff4:	d010      	beq.n	8021018 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8020ff6:	2300      	movs	r3, #0
 8020ff8:	623b      	str	r3, [r7, #32]
 8020ffa:	e00d      	b.n	8021018 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8020ffc:	68fb      	ldr	r3, [r7, #12]
 8020ffe:	685b      	ldr	r3, [r3, #4]
 8021000:	2b00      	cmp	r3, #0
 8021002:	d006      	beq.n	8021012 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8021004:	4b38      	ldr	r3, [pc, #224]	; (80210e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021006:	f44f 72df 	mov.w	r2, #446	; 0x1be
 802100a:	493a      	ldr	r1, [pc, #232]	; (80210f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 802100c:	4838      	ldr	r0, [pc, #224]	; (80210f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802100e:	f001 f997 	bl	8022340 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8021012:	68fb      	ldr	r3, [r7, #12]
 8021014:	68ba      	ldr	r2, [r7, #8]
 8021016:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8021018:	687b      	ldr	r3, [r7, #4]
 802101a:	2b00      	cmp	r3, #0
 802101c:	d105      	bne.n	802102a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 802101e:	68fb      	ldr	r3, [r7, #12]
 8021020:	7f9b      	ldrb	r3, [r3, #30]
 8021022:	f003 0301 	and.w	r3, r3, #1
 8021026:	2b00      	cmp	r3, #0
 8021028:	d059      	beq.n	80210de <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 802102a:	6a3b      	ldr	r3, [r7, #32]
 802102c:	2b00      	cmp	r3, #0
 802102e:	d04f      	beq.n	80210d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8021030:	68fb      	ldr	r3, [r7, #12]
 8021032:	685b      	ldr	r3, [r3, #4]
 8021034:	2b00      	cmp	r3, #0
 8021036:	d006      	beq.n	8021046 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8021038:	68fb      	ldr	r3, [r7, #12]
 802103a:	685b      	ldr	r3, [r3, #4]
 802103c:	685b      	ldr	r3, [r3, #4]
 802103e:	889b      	ldrh	r3, [r3, #4]
 8021040:	b29b      	uxth	r3, r3
 8021042:	2b00      	cmp	r3, #0
 8021044:	d002      	beq.n	802104c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8021046:	2300      	movs	r3, #0
 8021048:	623b      	str	r3, [r7, #32]
 802104a:	e041      	b.n	80210d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 802104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802104e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8021050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021052:	681b      	ldr	r3, [r3, #0]
 8021054:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021056:	e012      	b.n	802107e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8021058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802105a:	685b      	ldr	r3, [r3, #4]
 802105c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 802105e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021060:	88db      	ldrh	r3, [r3, #6]
 8021062:	b29a      	uxth	r2, r3
 8021064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021066:	889b      	ldrh	r3, [r3, #4]
 8021068:	b29b      	uxth	r3, r3
 802106a:	429a      	cmp	r2, r3
 802106c:	d002      	beq.n	8021074 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 802106e:	2300      	movs	r3, #0
 8021070:	623b      	str	r3, [r7, #32]
            break;
 8021072:	e007      	b.n	8021084 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8021074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021076:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8021078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802107a:	681b      	ldr	r3, [r3, #0]
 802107c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021080:	2b00      	cmp	r3, #0
 8021082:	d1e9      	bne.n	8021058 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8021084:	6a3b      	ldr	r3, [r7, #32]
 8021086:	2b00      	cmp	r3, #0
 8021088:	d022      	beq.n	80210d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 802108a:	68fb      	ldr	r3, [r7, #12]
 802108c:	685b      	ldr	r3, [r3, #4]
 802108e:	2b00      	cmp	r3, #0
 8021090:	d106      	bne.n	80210a0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8021092:	4b15      	ldr	r3, [pc, #84]	; (80210e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021094:	f240 12df 	movw	r2, #479	; 0x1df
 8021098:	4917      	ldr	r1, [pc, #92]	; (80210f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 802109a:	4815      	ldr	r0, [pc, #84]	; (80210f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802109c:	f001 f950 	bl	8022340 <iprintf>
          LWIP_ASSERT("sanity check",
 80210a0:	68fb      	ldr	r3, [r7, #12]
 80210a2:	685b      	ldr	r3, [r3, #4]
 80210a4:	685b      	ldr	r3, [r3, #4]
 80210a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80210a8:	429a      	cmp	r2, r3
 80210aa:	d106      	bne.n	80210ba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80210ac:	4b0e      	ldr	r3, [pc, #56]	; (80210e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80210ae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80210b2:	4911      	ldr	r1, [pc, #68]	; (80210f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80210b4:	480e      	ldr	r0, [pc, #56]	; (80210f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80210b6:	f001 f943 	bl	8022340 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80210ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210bc:	681b      	ldr	r3, [r3, #0]
 80210be:	2b00      	cmp	r3, #0
 80210c0:	d006      	beq.n	80210d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80210c2:	4b09      	ldr	r3, [pc, #36]	; (80210e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80210c4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80210c8:	490c      	ldr	r1, [pc, #48]	; (80210fc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80210ca:	4809      	ldr	r0, [pc, #36]	; (80210f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80210cc:	f001 f938 	bl	8022340 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80210d0:	6a3b      	ldr	r3, [r7, #32]
 80210d2:	2b00      	cmp	r3, #0
 80210d4:	bf14      	ite	ne
 80210d6:	2301      	movne	r3, #1
 80210d8:	2300      	moveq	r3, #0
 80210da:	b2db      	uxtb	r3, r3
 80210dc:	e000      	b.n	80210e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80210de:	2300      	movs	r3, #0
}
 80210e0:	4618      	mov	r0, r3
 80210e2:	3730      	adds	r7, #48	; 0x30
 80210e4:	46bd      	mov	sp, r7
 80210e6:	bd80      	pop	{r7, pc}
 80210e8:	08026ae8 	.word	0x08026ae8
 80210ec:	08026bcc 	.word	0x08026bcc
 80210f0:	08026b30 	.word	0x08026b30
 80210f4:	08026bec 	.word	0x08026bec
 80210f8:	08026c24 	.word	0x08026c24
 80210fc:	08026c34 	.word	0x08026c34

08021100 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8021100:	b580      	push	{r7, lr}
 8021102:	b08e      	sub	sp, #56	; 0x38
 8021104:	af00      	add	r7, sp, #0
 8021106:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8021108:	687b      	ldr	r3, [r7, #4]
 802110a:	685b      	ldr	r3, [r3, #4]
 802110c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 802110e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021110:	781b      	ldrb	r3, [r3, #0]
 8021112:	f003 030f 	and.w	r3, r3, #15
 8021116:	b2db      	uxtb	r3, r3
 8021118:	009b      	lsls	r3, r3, #2
 802111a:	b2db      	uxtb	r3, r3
 802111c:	2b14      	cmp	r3, #20
 802111e:	f040 8171 	bne.w	8021404 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8021122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021124:	88db      	ldrh	r3, [r3, #6]
 8021126:	b29b      	uxth	r3, r3
 8021128:	4618      	mov	r0, r3
 802112a:	f7f5 fcc9 	bl	8016ac0 <lwip_htons>
 802112e:	4603      	mov	r3, r0
 8021130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021134:	b29b      	uxth	r3, r3
 8021136:	00db      	lsls	r3, r3, #3
 8021138:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802113a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802113c:	885b      	ldrh	r3, [r3, #2]
 802113e:	b29b      	uxth	r3, r3
 8021140:	4618      	mov	r0, r3
 8021142:	f7f5 fcbd 	bl	8016ac0 <lwip_htons>
 8021146:	4603      	mov	r3, r0
 8021148:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 802114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802114c:	781b      	ldrb	r3, [r3, #0]
 802114e:	f003 030f 	and.w	r3, r3, #15
 8021152:	b2db      	uxtb	r3, r3
 8021154:	009b      	lsls	r3, r3, #2
 8021156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 802115a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802115e:	b29b      	uxth	r3, r3
 8021160:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021162:	429a      	cmp	r2, r3
 8021164:	f0c0 8150 	bcc.w	8021408 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8021168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802116c:	b29b      	uxth	r3, r3
 802116e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021170:	1ad3      	subs	r3, r2, r3
 8021172:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8021174:	6878      	ldr	r0, [r7, #4]
 8021176:	f7f7 f9db 	bl	8018530 <pbuf_clen>
 802117a:	4603      	mov	r3, r0
 802117c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802117e:	4b8c      	ldr	r3, [pc, #560]	; (80213b0 <ip4_reass+0x2b0>)
 8021180:	881b      	ldrh	r3, [r3, #0]
 8021182:	461a      	mov	r2, r3
 8021184:	8c3b      	ldrh	r3, [r7, #32]
 8021186:	4413      	add	r3, r2
 8021188:	2b0a      	cmp	r3, #10
 802118a:	dd10      	ble.n	80211ae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802118c:	8c3b      	ldrh	r3, [r7, #32]
 802118e:	4619      	mov	r1, r3
 8021190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021192:	f7ff fd81 	bl	8020c98 <ip_reass_remove_oldest_datagram>
 8021196:	4603      	mov	r3, r0
 8021198:	2b00      	cmp	r3, #0
 802119a:	f000 8137 	beq.w	802140c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 802119e:	4b84      	ldr	r3, [pc, #528]	; (80213b0 <ip4_reass+0x2b0>)
 80211a0:	881b      	ldrh	r3, [r3, #0]
 80211a2:	461a      	mov	r2, r3
 80211a4:	8c3b      	ldrh	r3, [r7, #32]
 80211a6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80211a8:	2b0a      	cmp	r3, #10
 80211aa:	f300 812f 	bgt.w	802140c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80211ae:	4b81      	ldr	r3, [pc, #516]	; (80213b4 <ip4_reass+0x2b4>)
 80211b0:	681b      	ldr	r3, [r3, #0]
 80211b2:	633b      	str	r3, [r7, #48]	; 0x30
 80211b4:	e015      	b.n	80211e2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80211b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211b8:	695a      	ldr	r2, [r3, #20]
 80211ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211bc:	68db      	ldr	r3, [r3, #12]
 80211be:	429a      	cmp	r2, r3
 80211c0:	d10c      	bne.n	80211dc <ip4_reass+0xdc>
 80211c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211c4:	699a      	ldr	r2, [r3, #24]
 80211c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211c8:	691b      	ldr	r3, [r3, #16]
 80211ca:	429a      	cmp	r2, r3
 80211cc:	d106      	bne.n	80211dc <ip4_reass+0xdc>
 80211ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211d0:	899a      	ldrh	r2, [r3, #12]
 80211d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211d4:	889b      	ldrh	r3, [r3, #4]
 80211d6:	b29b      	uxth	r3, r3
 80211d8:	429a      	cmp	r2, r3
 80211da:	d006      	beq.n	80211ea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80211dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211de:	681b      	ldr	r3, [r3, #0]
 80211e0:	633b      	str	r3, [r7, #48]	; 0x30
 80211e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211e4:	2b00      	cmp	r3, #0
 80211e6:	d1e6      	bne.n	80211b6 <ip4_reass+0xb6>
 80211e8:	e000      	b.n	80211ec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80211ea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80211ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211ee:	2b00      	cmp	r3, #0
 80211f0:	d109      	bne.n	8021206 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80211f2:	8c3b      	ldrh	r3, [r7, #32]
 80211f4:	4619      	mov	r1, r3
 80211f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80211f8:	f7ff fdb0 	bl	8020d5c <ip_reass_enqueue_new_datagram>
 80211fc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80211fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021200:	2b00      	cmp	r3, #0
 8021202:	d11c      	bne.n	802123e <ip4_reass+0x13e>
      goto nullreturn;
 8021204:	e105      	b.n	8021412 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021208:	88db      	ldrh	r3, [r3, #6]
 802120a:	b29b      	uxth	r3, r3
 802120c:	4618      	mov	r0, r3
 802120e:	f7f5 fc57 	bl	8016ac0 <lwip_htons>
 8021212:	4603      	mov	r3, r0
 8021214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021218:	2b00      	cmp	r3, #0
 802121a:	d110      	bne.n	802123e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 802121c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802121e:	89db      	ldrh	r3, [r3, #14]
 8021220:	4618      	mov	r0, r3
 8021222:	f7f5 fc4d 	bl	8016ac0 <lwip_htons>
 8021226:	4603      	mov	r3, r0
 8021228:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802122c:	2b00      	cmp	r3, #0
 802122e:	d006      	beq.n	802123e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8021230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021232:	3308      	adds	r3, #8
 8021234:	2214      	movs	r2, #20
 8021236:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021238:	4618      	mov	r0, r3
 802123a:	f001 f9f2 	bl	8022622 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 802123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021240:	88db      	ldrh	r3, [r3, #6]
 8021242:	b29b      	uxth	r3, r3
 8021244:	f003 0320 	and.w	r3, r3, #32
 8021248:	2b00      	cmp	r3, #0
 802124a:	bf0c      	ite	eq
 802124c:	2301      	moveq	r3, #1
 802124e:	2300      	movne	r3, #0
 8021250:	b2db      	uxtb	r3, r3
 8021252:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8021254:	69fb      	ldr	r3, [r7, #28]
 8021256:	2b00      	cmp	r3, #0
 8021258:	d00e      	beq.n	8021278 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 802125a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802125c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802125e:	4413      	add	r3, r2
 8021260:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8021262:	8b7a      	ldrh	r2, [r7, #26]
 8021264:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021266:	429a      	cmp	r2, r3
 8021268:	f0c0 80a0 	bcc.w	80213ac <ip4_reass+0x2ac>
 802126c:	8b7b      	ldrh	r3, [r7, #26]
 802126e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8021272:	4293      	cmp	r3, r2
 8021274:	f200 809a 	bhi.w	80213ac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8021278:	69fa      	ldr	r2, [r7, #28]
 802127a:	6879      	ldr	r1, [r7, #4]
 802127c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802127e:	f7ff fdd5 	bl	8020e2c <ip_reass_chain_frag_into_datagram_and_validate>
 8021282:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8021284:	697b      	ldr	r3, [r7, #20]
 8021286:	f1b3 3fff 	cmp.w	r3, #4294967295
 802128a:	f000 809b 	beq.w	80213c4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802128e:	4b48      	ldr	r3, [pc, #288]	; (80213b0 <ip4_reass+0x2b0>)
 8021290:	881a      	ldrh	r2, [r3, #0]
 8021292:	8c3b      	ldrh	r3, [r7, #32]
 8021294:	4413      	add	r3, r2
 8021296:	b29a      	uxth	r2, r3
 8021298:	4b45      	ldr	r3, [pc, #276]	; (80213b0 <ip4_reass+0x2b0>)
 802129a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 802129c:	69fb      	ldr	r3, [r7, #28]
 802129e:	2b00      	cmp	r3, #0
 80212a0:	d00d      	beq.n	80212be <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80212a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80212a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80212a6:	4413      	add	r3, r2
 80212a8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80212aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212ac:	8a7a      	ldrh	r2, [r7, #18]
 80212ae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80212b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212b2:	7f9b      	ldrb	r3, [r3, #30]
 80212b4:	f043 0301 	orr.w	r3, r3, #1
 80212b8:	b2da      	uxtb	r2, r3
 80212ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212bc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80212be:	697b      	ldr	r3, [r7, #20]
 80212c0:	2b01      	cmp	r3, #1
 80212c2:	d171      	bne.n	80213a8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80212c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212c6:	8b9b      	ldrh	r3, [r3, #28]
 80212c8:	3314      	adds	r3, #20
 80212ca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80212cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212ce:	685b      	ldr	r3, [r3, #4]
 80212d0:	685b      	ldr	r3, [r3, #4]
 80212d2:	681b      	ldr	r3, [r3, #0]
 80212d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80212d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212d8:	685b      	ldr	r3, [r3, #4]
 80212da:	685b      	ldr	r3, [r3, #4]
 80212dc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80212de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212e0:	3308      	adds	r3, #8
 80212e2:	2214      	movs	r2, #20
 80212e4:	4619      	mov	r1, r3
 80212e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80212e8:	f001 f99b 	bl	8022622 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80212ec:	8a3b      	ldrh	r3, [r7, #16]
 80212ee:	4618      	mov	r0, r3
 80212f0:	f7f5 fbe6 	bl	8016ac0 <lwip_htons>
 80212f4:	4603      	mov	r3, r0
 80212f6:	461a      	mov	r2, r3
 80212f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80212fa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80212fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80212fe:	2200      	movs	r2, #0
 8021300:	719a      	strb	r2, [r3, #6]
 8021302:	2200      	movs	r2, #0
 8021304:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8021306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021308:	2200      	movs	r2, #0
 802130a:	729a      	strb	r2, [r3, #10]
 802130c:	2200      	movs	r2, #0
 802130e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8021310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021312:	685b      	ldr	r3, [r3, #4]
 8021314:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8021316:	e00d      	b.n	8021334 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8021318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802131a:	685b      	ldr	r3, [r3, #4]
 802131c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 802131e:	2114      	movs	r1, #20
 8021320:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8021322:	f7f6 fff1 	bl	8018308 <pbuf_remove_header>
      pbuf_cat(p, r);
 8021326:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021328:	6878      	ldr	r0, [r7, #4]
 802132a:	f7f7 f941 	bl	80185b0 <pbuf_cat>
      r = iprh->next_pbuf;
 802132e:	68fb      	ldr	r3, [r7, #12]
 8021330:	681b      	ldr	r3, [r3, #0]
 8021332:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8021334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021336:	2b00      	cmp	r3, #0
 8021338:	d1ee      	bne.n	8021318 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 802133a:	4b1e      	ldr	r3, [pc, #120]	; (80213b4 <ip4_reass+0x2b4>)
 802133c:	681b      	ldr	r3, [r3, #0]
 802133e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021340:	429a      	cmp	r2, r3
 8021342:	d102      	bne.n	802134a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8021344:	2300      	movs	r3, #0
 8021346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021348:	e010      	b.n	802136c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802134a:	4b1a      	ldr	r3, [pc, #104]	; (80213b4 <ip4_reass+0x2b4>)
 802134c:	681b      	ldr	r3, [r3, #0]
 802134e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021350:	e007      	b.n	8021362 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8021352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021354:	681b      	ldr	r3, [r3, #0]
 8021356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021358:	429a      	cmp	r2, r3
 802135a:	d006      	beq.n	802136a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802135e:	681b      	ldr	r3, [r3, #0]
 8021360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021364:	2b00      	cmp	r3, #0
 8021366:	d1f4      	bne.n	8021352 <ip4_reass+0x252>
 8021368:	e000      	b.n	802136c <ip4_reass+0x26c>
          break;
 802136a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 802136c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802136e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021370:	f7ff fd2e 	bl	8020dd0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8021374:	6878      	ldr	r0, [r7, #4]
 8021376:	f7f7 f8db 	bl	8018530 <pbuf_clen>
 802137a:	4603      	mov	r3, r0
 802137c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802137e:	4b0c      	ldr	r3, [pc, #48]	; (80213b0 <ip4_reass+0x2b0>)
 8021380:	881b      	ldrh	r3, [r3, #0]
 8021382:	8c3a      	ldrh	r2, [r7, #32]
 8021384:	429a      	cmp	r2, r3
 8021386:	d906      	bls.n	8021396 <ip4_reass+0x296>
 8021388:	4b0b      	ldr	r3, [pc, #44]	; (80213b8 <ip4_reass+0x2b8>)
 802138a:	f240 229b 	movw	r2, #667	; 0x29b
 802138e:	490b      	ldr	r1, [pc, #44]	; (80213bc <ip4_reass+0x2bc>)
 8021390:	480b      	ldr	r0, [pc, #44]	; (80213c0 <ip4_reass+0x2c0>)
 8021392:	f000 ffd5 	bl	8022340 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8021396:	4b06      	ldr	r3, [pc, #24]	; (80213b0 <ip4_reass+0x2b0>)
 8021398:	881a      	ldrh	r2, [r3, #0]
 802139a:	8c3b      	ldrh	r3, [r7, #32]
 802139c:	1ad3      	subs	r3, r2, r3
 802139e:	b29a      	uxth	r2, r3
 80213a0:	4b03      	ldr	r3, [pc, #12]	; (80213b0 <ip4_reass+0x2b0>)
 80213a2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80213a4:	687b      	ldr	r3, [r7, #4]
 80213a6:	e038      	b.n	802141a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80213a8:	2300      	movs	r3, #0
 80213aa:	e036      	b.n	802141a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80213ac:	bf00      	nop
 80213ae:	e00a      	b.n	80213c6 <ip4_reass+0x2c6>
 80213b0:	2002f13c 	.word	0x2002f13c
 80213b4:	2002f138 	.word	0x2002f138
 80213b8:	08026ae8 	.word	0x08026ae8
 80213bc:	08026c58 	.word	0x08026c58
 80213c0:	08026b30 	.word	0x08026b30
    goto nullreturn_ipr;
 80213c4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80213c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213c8:	2b00      	cmp	r3, #0
 80213ca:	d106      	bne.n	80213da <ip4_reass+0x2da>
 80213cc:	4b15      	ldr	r3, [pc, #84]	; (8021424 <ip4_reass+0x324>)
 80213ce:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80213d2:	4915      	ldr	r1, [pc, #84]	; (8021428 <ip4_reass+0x328>)
 80213d4:	4815      	ldr	r0, [pc, #84]	; (802142c <ip4_reass+0x32c>)
 80213d6:	f000 ffb3 	bl	8022340 <iprintf>
  if (ipr->p == NULL) {
 80213da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213dc:	685b      	ldr	r3, [r3, #4]
 80213de:	2b00      	cmp	r3, #0
 80213e0:	d116      	bne.n	8021410 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80213e2:	4b13      	ldr	r3, [pc, #76]	; (8021430 <ip4_reass+0x330>)
 80213e4:	681b      	ldr	r3, [r3, #0]
 80213e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80213e8:	429a      	cmp	r2, r3
 80213ea:	d006      	beq.n	80213fa <ip4_reass+0x2fa>
 80213ec:	4b0d      	ldr	r3, [pc, #52]	; (8021424 <ip4_reass+0x324>)
 80213ee:	f240 22ab 	movw	r2, #683	; 0x2ab
 80213f2:	4910      	ldr	r1, [pc, #64]	; (8021434 <ip4_reass+0x334>)
 80213f4:	480d      	ldr	r0, [pc, #52]	; (802142c <ip4_reass+0x32c>)
 80213f6:	f000 ffa3 	bl	8022340 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80213fa:	2100      	movs	r1, #0
 80213fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80213fe:	f7ff fce7 	bl	8020dd0 <ip_reass_dequeue_datagram>
 8021402:	e006      	b.n	8021412 <ip4_reass+0x312>
    goto nullreturn;
 8021404:	bf00      	nop
 8021406:	e004      	b.n	8021412 <ip4_reass+0x312>
    goto nullreturn;
 8021408:	bf00      	nop
 802140a:	e002      	b.n	8021412 <ip4_reass+0x312>
      goto nullreturn;
 802140c:	bf00      	nop
 802140e:	e000      	b.n	8021412 <ip4_reass+0x312>
  }

nullreturn:
 8021410:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8021412:	6878      	ldr	r0, [r7, #4]
 8021414:	f7f6 fffe 	bl	8018414 <pbuf_free>
  return NULL;
 8021418:	2300      	movs	r3, #0
}
 802141a:	4618      	mov	r0, r3
 802141c:	3738      	adds	r7, #56	; 0x38
 802141e:	46bd      	mov	sp, r7
 8021420:	bd80      	pop	{r7, pc}
 8021422:	bf00      	nop
 8021424:	08026ae8 	.word	0x08026ae8
 8021428:	08026c74 	.word	0x08026c74
 802142c:	08026b30 	.word	0x08026b30
 8021430:	2002f138 	.word	0x2002f138
 8021434:	08026c80 	.word	0x08026c80

08021438 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8021438:	b580      	push	{r7, lr}
 802143a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 802143c:	2005      	movs	r0, #5
 802143e:	f7f6 f8cf 	bl	80175e0 <memp_malloc>
 8021442:	4603      	mov	r3, r0
}
 8021444:	4618      	mov	r0, r3
 8021446:	bd80      	pop	{r7, pc}

08021448 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8021448:	b580      	push	{r7, lr}
 802144a:	b082      	sub	sp, #8
 802144c:	af00      	add	r7, sp, #0
 802144e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8021450:	687b      	ldr	r3, [r7, #4]
 8021452:	2b00      	cmp	r3, #0
 8021454:	d106      	bne.n	8021464 <ip_frag_free_pbuf_custom_ref+0x1c>
 8021456:	4b07      	ldr	r3, [pc, #28]	; (8021474 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8021458:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 802145c:	4906      	ldr	r1, [pc, #24]	; (8021478 <ip_frag_free_pbuf_custom_ref+0x30>)
 802145e:	4807      	ldr	r0, [pc, #28]	; (802147c <ip_frag_free_pbuf_custom_ref+0x34>)
 8021460:	f000 ff6e 	bl	8022340 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8021464:	6879      	ldr	r1, [r7, #4]
 8021466:	2005      	movs	r0, #5
 8021468:	f7f6 f930 	bl	80176cc <memp_free>
}
 802146c:	bf00      	nop
 802146e:	3708      	adds	r7, #8
 8021470:	46bd      	mov	sp, r7
 8021472:	bd80      	pop	{r7, pc}
 8021474:	08026ae8 	.word	0x08026ae8
 8021478:	08026ca0 	.word	0x08026ca0
 802147c:	08026b30 	.word	0x08026b30

08021480 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8021480:	b580      	push	{r7, lr}
 8021482:	b084      	sub	sp, #16
 8021484:	af00      	add	r7, sp, #0
 8021486:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8021488:	687b      	ldr	r3, [r7, #4]
 802148a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 802148c:	68fb      	ldr	r3, [r7, #12]
 802148e:	2b00      	cmp	r3, #0
 8021490:	d106      	bne.n	80214a0 <ipfrag_free_pbuf_custom+0x20>
 8021492:	4b11      	ldr	r3, [pc, #68]	; (80214d8 <ipfrag_free_pbuf_custom+0x58>)
 8021494:	f240 22ce 	movw	r2, #718	; 0x2ce
 8021498:	4910      	ldr	r1, [pc, #64]	; (80214dc <ipfrag_free_pbuf_custom+0x5c>)
 802149a:	4811      	ldr	r0, [pc, #68]	; (80214e0 <ipfrag_free_pbuf_custom+0x60>)
 802149c:	f000 ff50 	bl	8022340 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80214a0:	68fa      	ldr	r2, [r7, #12]
 80214a2:	687b      	ldr	r3, [r7, #4]
 80214a4:	429a      	cmp	r2, r3
 80214a6:	d006      	beq.n	80214b6 <ipfrag_free_pbuf_custom+0x36>
 80214a8:	4b0b      	ldr	r3, [pc, #44]	; (80214d8 <ipfrag_free_pbuf_custom+0x58>)
 80214aa:	f240 22cf 	movw	r2, #719	; 0x2cf
 80214ae:	490d      	ldr	r1, [pc, #52]	; (80214e4 <ipfrag_free_pbuf_custom+0x64>)
 80214b0:	480b      	ldr	r0, [pc, #44]	; (80214e0 <ipfrag_free_pbuf_custom+0x60>)
 80214b2:	f000 ff45 	bl	8022340 <iprintf>
  if (pcr->original != NULL) {
 80214b6:	68fb      	ldr	r3, [r7, #12]
 80214b8:	695b      	ldr	r3, [r3, #20]
 80214ba:	2b00      	cmp	r3, #0
 80214bc:	d004      	beq.n	80214c8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80214be:	68fb      	ldr	r3, [r7, #12]
 80214c0:	695b      	ldr	r3, [r3, #20]
 80214c2:	4618      	mov	r0, r3
 80214c4:	f7f6 ffa6 	bl	8018414 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80214c8:	68f8      	ldr	r0, [r7, #12]
 80214ca:	f7ff ffbd 	bl	8021448 <ip_frag_free_pbuf_custom_ref>
}
 80214ce:	bf00      	nop
 80214d0:	3710      	adds	r7, #16
 80214d2:	46bd      	mov	sp, r7
 80214d4:	bd80      	pop	{r7, pc}
 80214d6:	bf00      	nop
 80214d8:	08026ae8 	.word	0x08026ae8
 80214dc:	08026cac 	.word	0x08026cac
 80214e0:	08026b30 	.word	0x08026b30
 80214e4:	08026cb8 	.word	0x08026cb8

080214e8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80214e8:	b580      	push	{r7, lr}
 80214ea:	b094      	sub	sp, #80	; 0x50
 80214ec:	af02      	add	r7, sp, #8
 80214ee:	60f8      	str	r0, [r7, #12]
 80214f0:	60b9      	str	r1, [r7, #8]
 80214f2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80214f4:	2300      	movs	r3, #0
 80214f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80214fa:	68bb      	ldr	r3, [r7, #8]
 80214fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80214fe:	3b14      	subs	r3, #20
 8021500:	2b00      	cmp	r3, #0
 8021502:	da00      	bge.n	8021506 <ip4_frag+0x1e>
 8021504:	3307      	adds	r3, #7
 8021506:	10db      	asrs	r3, r3, #3
 8021508:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 802150a:	2314      	movs	r3, #20
 802150c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802150e:	68fb      	ldr	r3, [r7, #12]
 8021510:	685b      	ldr	r3, [r3, #4]
 8021512:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8021514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021516:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8021518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802151a:	781b      	ldrb	r3, [r3, #0]
 802151c:	f003 030f 	and.w	r3, r3, #15
 8021520:	b2db      	uxtb	r3, r3
 8021522:	009b      	lsls	r3, r3, #2
 8021524:	b2db      	uxtb	r3, r3
 8021526:	2b14      	cmp	r3, #20
 8021528:	d002      	beq.n	8021530 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 802152a:	f06f 0305 	mvn.w	r3, #5
 802152e:	e110      	b.n	8021752 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8021530:	68fb      	ldr	r3, [r7, #12]
 8021532:	895b      	ldrh	r3, [r3, #10]
 8021534:	2b13      	cmp	r3, #19
 8021536:	d809      	bhi.n	802154c <ip4_frag+0x64>
 8021538:	4b88      	ldr	r3, [pc, #544]	; (802175c <ip4_frag+0x274>)
 802153a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 802153e:	4988      	ldr	r1, [pc, #544]	; (8021760 <ip4_frag+0x278>)
 8021540:	4888      	ldr	r0, [pc, #544]	; (8021764 <ip4_frag+0x27c>)
 8021542:	f000 fefd 	bl	8022340 <iprintf>
 8021546:	f06f 0305 	mvn.w	r3, #5
 802154a:	e102      	b.n	8021752 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802154c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802154e:	88db      	ldrh	r3, [r3, #6]
 8021550:	b29b      	uxth	r3, r3
 8021552:	4618      	mov	r0, r3
 8021554:	f7f5 fab4 	bl	8016ac0 <lwip_htons>
 8021558:	4603      	mov	r3, r0
 802155a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 802155c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802155e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021562:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8021566:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802156c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 802156e:	68fb      	ldr	r3, [r7, #12]
 8021570:	891b      	ldrh	r3, [r3, #8]
 8021572:	3b14      	subs	r3, #20
 8021574:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8021578:	e0e1      	b.n	802173e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802157a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802157c:	00db      	lsls	r3, r3, #3
 802157e:	b29b      	uxth	r3, r3
 8021580:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021584:	4293      	cmp	r3, r2
 8021586:	bf28      	it	cs
 8021588:	4613      	movcs	r3, r2
 802158a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 802158c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021590:	2114      	movs	r1, #20
 8021592:	200e      	movs	r0, #14
 8021594:	f7f6 fc5a 	bl	8017e4c <pbuf_alloc>
 8021598:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 802159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802159c:	2b00      	cmp	r3, #0
 802159e:	f000 80d5 	beq.w	802174c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80215a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80215a4:	895b      	ldrh	r3, [r3, #10]
 80215a6:	2b13      	cmp	r3, #19
 80215a8:	d806      	bhi.n	80215b8 <ip4_frag+0xd0>
 80215aa:	4b6c      	ldr	r3, [pc, #432]	; (802175c <ip4_frag+0x274>)
 80215ac:	f44f 7249 	mov.w	r2, #804	; 0x324
 80215b0:	496d      	ldr	r1, [pc, #436]	; (8021768 <ip4_frag+0x280>)
 80215b2:	486c      	ldr	r0, [pc, #432]	; (8021764 <ip4_frag+0x27c>)
 80215b4:	f000 fec4 	bl	8022340 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80215b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80215ba:	685b      	ldr	r3, [r3, #4]
 80215bc:	2214      	movs	r2, #20
 80215be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80215c0:	4618      	mov	r0, r3
 80215c2:	f001 f82e 	bl	8022622 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80215c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80215c8:	685b      	ldr	r3, [r3, #4]
 80215ca:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80215cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80215ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80215d2:	e064      	b.n	802169e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80215d4:	68fb      	ldr	r3, [r7, #12]
 80215d6:	895a      	ldrh	r2, [r3, #10]
 80215d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80215da:	1ad3      	subs	r3, r2, r3
 80215dc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80215de:	68fb      	ldr	r3, [r7, #12]
 80215e0:	895b      	ldrh	r3, [r3, #10]
 80215e2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80215e4:	429a      	cmp	r2, r3
 80215e6:	d906      	bls.n	80215f6 <ip4_frag+0x10e>
 80215e8:	4b5c      	ldr	r3, [pc, #368]	; (802175c <ip4_frag+0x274>)
 80215ea:	f240 322d 	movw	r2, #813	; 0x32d
 80215ee:	495f      	ldr	r1, [pc, #380]	; (802176c <ip4_frag+0x284>)
 80215f0:	485c      	ldr	r0, [pc, #368]	; (8021764 <ip4_frag+0x27c>)
 80215f2:	f000 fea5 	bl	8022340 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80215f6:	8bfa      	ldrh	r2, [r7, #30]
 80215f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80215fc:	4293      	cmp	r3, r2
 80215fe:	bf28      	it	cs
 8021600:	4613      	movcs	r3, r2
 8021602:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8021606:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802160a:	2b00      	cmp	r3, #0
 802160c:	d105      	bne.n	802161a <ip4_frag+0x132>
        poff = 0;
 802160e:	2300      	movs	r3, #0
 8021610:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8021612:	68fb      	ldr	r3, [r7, #12]
 8021614:	681b      	ldr	r3, [r3, #0]
 8021616:	60fb      	str	r3, [r7, #12]
        continue;
 8021618:	e041      	b.n	802169e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 802161a:	f7ff ff0d 	bl	8021438 <ip_frag_alloc_pbuf_custom_ref>
 802161e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8021620:	69bb      	ldr	r3, [r7, #24]
 8021622:	2b00      	cmp	r3, #0
 8021624:	d103      	bne.n	802162e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8021626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021628:	f7f6 fef4 	bl	8018414 <pbuf_free>
        goto memerr;
 802162c:	e08f      	b.n	802174e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802162e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8021630:	68fb      	ldr	r3, [r7, #12]
 8021632:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8021634:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021636:	4413      	add	r3, r2
 8021638:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 802163c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8021640:	9201      	str	r2, [sp, #4]
 8021642:	9300      	str	r3, [sp, #0]
 8021644:	4603      	mov	r3, r0
 8021646:	2241      	movs	r2, #65	; 0x41
 8021648:	2000      	movs	r0, #0
 802164a:	f7f6 fd29 	bl	80180a0 <pbuf_alloced_custom>
 802164e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8021650:	697b      	ldr	r3, [r7, #20]
 8021652:	2b00      	cmp	r3, #0
 8021654:	d106      	bne.n	8021664 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8021656:	69b8      	ldr	r0, [r7, #24]
 8021658:	f7ff fef6 	bl	8021448 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 802165c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802165e:	f7f6 fed9 	bl	8018414 <pbuf_free>
        goto memerr;
 8021662:	e074      	b.n	802174e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8021664:	68f8      	ldr	r0, [r7, #12]
 8021666:	f7f6 ff7b 	bl	8018560 <pbuf_ref>
      pcr->original = p;
 802166a:	69bb      	ldr	r3, [r7, #24]
 802166c:	68fa      	ldr	r2, [r7, #12]
 802166e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8021670:	69bb      	ldr	r3, [r7, #24]
 8021672:	4a3f      	ldr	r2, [pc, #252]	; (8021770 <ip4_frag+0x288>)
 8021674:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8021676:	6979      	ldr	r1, [r7, #20]
 8021678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802167a:	f7f6 ff99 	bl	80185b0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 802167e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8021682:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8021686:	1ad3      	subs	r3, r2, r3
 8021688:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 802168c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021690:	2b00      	cmp	r3, #0
 8021692:	d004      	beq.n	802169e <ip4_frag+0x1b6>
        poff = 0;
 8021694:	2300      	movs	r3, #0
 8021696:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8021698:	68fb      	ldr	r3, [r7, #12]
 802169a:	681b      	ldr	r3, [r3, #0]
 802169c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 802169e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80216a2:	2b00      	cmp	r3, #0
 80216a4:	d196      	bne.n	80215d4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80216a6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80216a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80216ac:	4413      	add	r3, r2
 80216ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80216b0:	68bb      	ldr	r3, [r7, #8]
 80216b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80216b4:	f1a3 0213 	sub.w	r2, r3, #19
 80216b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80216bc:	429a      	cmp	r2, r3
 80216be:	bfcc      	ite	gt
 80216c0:	2301      	movgt	r3, #1
 80216c2:	2300      	movle	r3, #0
 80216c4:	b2db      	uxtb	r3, r3
 80216c6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80216c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80216cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80216d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80216d2:	6a3b      	ldr	r3, [r7, #32]
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	d002      	beq.n	80216de <ip4_frag+0x1f6>
 80216d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216da:	2b00      	cmp	r3, #0
 80216dc:	d003      	beq.n	80216e6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80216de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80216e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80216e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80216e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80216e8:	4618      	mov	r0, r3
 80216ea:	f7f5 f9e9 	bl	8016ac0 <lwip_htons>
 80216ee:	4603      	mov	r3, r0
 80216f0:	461a      	mov	r2, r3
 80216f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216f4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80216f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80216f8:	3314      	adds	r3, #20
 80216fa:	b29b      	uxth	r3, r3
 80216fc:	4618      	mov	r0, r3
 80216fe:	f7f5 f9df 	bl	8016ac0 <lwip_htons>
 8021702:	4603      	mov	r3, r0
 8021704:	461a      	mov	r2, r3
 8021706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021708:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 802170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802170c:	2200      	movs	r2, #0
 802170e:	729a      	strb	r2, [r3, #10]
 8021710:	2200      	movs	r2, #0
 8021712:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8021714:	68bb      	ldr	r3, [r7, #8]
 8021716:	695b      	ldr	r3, [r3, #20]
 8021718:	687a      	ldr	r2, [r7, #4]
 802171a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802171c:	68b8      	ldr	r0, [r7, #8]
 802171e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8021720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021722:	f7f6 fe77 	bl	8018414 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8021726:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802172a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802172c:	1ad3      	subs	r3, r2, r3
 802172e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8021732:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8021736:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021738:	4413      	add	r3, r2
 802173a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 802173e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021742:	2b00      	cmp	r3, #0
 8021744:	f47f af19 	bne.w	802157a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8021748:	2300      	movs	r3, #0
 802174a:	e002      	b.n	8021752 <ip4_frag+0x26a>
      goto memerr;
 802174c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802174e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021752:	4618      	mov	r0, r3
 8021754:	3748      	adds	r7, #72	; 0x48
 8021756:	46bd      	mov	sp, r7
 8021758:	bd80      	pop	{r7, pc}
 802175a:	bf00      	nop
 802175c:	08026ae8 	.word	0x08026ae8
 8021760:	08026cc4 	.word	0x08026cc4
 8021764:	08026b30 	.word	0x08026b30
 8021768:	08026ce0 	.word	0x08026ce0
 802176c:	08026d00 	.word	0x08026d00
 8021770:	08021481 	.word	0x08021481

08021774 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8021774:	b580      	push	{r7, lr}
 8021776:	b086      	sub	sp, #24
 8021778:	af00      	add	r7, sp, #0
 802177a:	6078      	str	r0, [r7, #4]
 802177c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802177e:	230e      	movs	r3, #14
 8021780:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8021782:	687b      	ldr	r3, [r7, #4]
 8021784:	895b      	ldrh	r3, [r3, #10]
 8021786:	2b0e      	cmp	r3, #14
 8021788:	d96e      	bls.n	8021868 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 802178a:	687b      	ldr	r3, [r7, #4]
 802178c:	7bdb      	ldrb	r3, [r3, #15]
 802178e:	2b00      	cmp	r3, #0
 8021790:	d106      	bne.n	80217a0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8021792:	683b      	ldr	r3, [r7, #0]
 8021794:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8021798:	3301      	adds	r3, #1
 802179a:	b2da      	uxtb	r2, r3
 802179c:	687b      	ldr	r3, [r7, #4]
 802179e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80217a0:	687b      	ldr	r3, [r7, #4]
 80217a2:	685b      	ldr	r3, [r3, #4]
 80217a4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80217a6:	693b      	ldr	r3, [r7, #16]
 80217a8:	7b1a      	ldrb	r2, [r3, #12]
 80217aa:	7b5b      	ldrb	r3, [r3, #13]
 80217ac:	021b      	lsls	r3, r3, #8
 80217ae:	4313      	orrs	r3, r2
 80217b0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80217b2:	693b      	ldr	r3, [r7, #16]
 80217b4:	781b      	ldrb	r3, [r3, #0]
 80217b6:	f003 0301 	and.w	r3, r3, #1
 80217ba:	2b00      	cmp	r3, #0
 80217bc:	d023      	beq.n	8021806 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80217be:	693b      	ldr	r3, [r7, #16]
 80217c0:	781b      	ldrb	r3, [r3, #0]
 80217c2:	2b01      	cmp	r3, #1
 80217c4:	d10f      	bne.n	80217e6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80217c6:	693b      	ldr	r3, [r7, #16]
 80217c8:	785b      	ldrb	r3, [r3, #1]
 80217ca:	2b00      	cmp	r3, #0
 80217cc:	d11b      	bne.n	8021806 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80217ce:	693b      	ldr	r3, [r7, #16]
 80217d0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80217d2:	2b5e      	cmp	r3, #94	; 0x5e
 80217d4:	d117      	bne.n	8021806 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80217d6:	687b      	ldr	r3, [r7, #4]
 80217d8:	7b5b      	ldrb	r3, [r3, #13]
 80217da:	f043 0310 	orr.w	r3, r3, #16
 80217de:	b2da      	uxtb	r2, r3
 80217e0:	687b      	ldr	r3, [r7, #4]
 80217e2:	735a      	strb	r2, [r3, #13]
 80217e4:	e00f      	b.n	8021806 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80217e6:	693b      	ldr	r3, [r7, #16]
 80217e8:	2206      	movs	r2, #6
 80217ea:	4928      	ldr	r1, [pc, #160]	; (802188c <ethernet_input+0x118>)
 80217ec:	4618      	mov	r0, r3
 80217ee:	f000 fe55 	bl	802249c <memcmp>
 80217f2:	4603      	mov	r3, r0
 80217f4:	2b00      	cmp	r3, #0
 80217f6:	d106      	bne.n	8021806 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80217f8:	687b      	ldr	r3, [r7, #4]
 80217fa:	7b5b      	ldrb	r3, [r3, #13]
 80217fc:	f043 0308 	orr.w	r3, r3, #8
 8021800:	b2da      	uxtb	r2, r3
 8021802:	687b      	ldr	r3, [r7, #4]
 8021804:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8021806:	89fb      	ldrh	r3, [r7, #14]
 8021808:	2b08      	cmp	r3, #8
 802180a:	d003      	beq.n	8021814 <ethernet_input+0xa0>
 802180c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8021810:	d014      	beq.n	802183c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8021812:	e032      	b.n	802187a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8021814:	683b      	ldr	r3, [r7, #0]
 8021816:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802181a:	f003 0308 	and.w	r3, r3, #8
 802181e:	2b00      	cmp	r3, #0
 8021820:	d024      	beq.n	802186c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8021822:	8afb      	ldrh	r3, [r7, #22]
 8021824:	4619      	mov	r1, r3
 8021826:	6878      	ldr	r0, [r7, #4]
 8021828:	f7f6 fd6e 	bl	8018308 <pbuf_remove_header>
 802182c:	4603      	mov	r3, r0
 802182e:	2b00      	cmp	r3, #0
 8021830:	d11e      	bne.n	8021870 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8021832:	6839      	ldr	r1, [r7, #0]
 8021834:	6878      	ldr	r0, [r7, #4]
 8021836:	f7fe ff21 	bl	802067c <ip4_input>
      break;
 802183a:	e013      	b.n	8021864 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 802183c:	683b      	ldr	r3, [r7, #0]
 802183e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021842:	f003 0308 	and.w	r3, r3, #8
 8021846:	2b00      	cmp	r3, #0
 8021848:	d014      	beq.n	8021874 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802184a:	8afb      	ldrh	r3, [r7, #22]
 802184c:	4619      	mov	r1, r3
 802184e:	6878      	ldr	r0, [r7, #4]
 8021850:	f7f6 fd5a 	bl	8018308 <pbuf_remove_header>
 8021854:	4603      	mov	r3, r0
 8021856:	2b00      	cmp	r3, #0
 8021858:	d10e      	bne.n	8021878 <ethernet_input+0x104>
        etharp_input(p, netif);
 802185a:	6839      	ldr	r1, [r7, #0]
 802185c:	6878      	ldr	r0, [r7, #4]
 802185e:	f7fe f89b 	bl	801f998 <etharp_input>
      break;
 8021862:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8021864:	2300      	movs	r3, #0
 8021866:	e00c      	b.n	8021882 <ethernet_input+0x10e>
    goto free_and_return;
 8021868:	bf00      	nop
 802186a:	e006      	b.n	802187a <ethernet_input+0x106>
        goto free_and_return;
 802186c:	bf00      	nop
 802186e:	e004      	b.n	802187a <ethernet_input+0x106>
        goto free_and_return;
 8021870:	bf00      	nop
 8021872:	e002      	b.n	802187a <ethernet_input+0x106>
        goto free_and_return;
 8021874:	bf00      	nop
 8021876:	e000      	b.n	802187a <ethernet_input+0x106>
        goto free_and_return;
 8021878:	bf00      	nop

free_and_return:
  pbuf_free(p);
 802187a:	6878      	ldr	r0, [r7, #4]
 802187c:	f7f6 fdca 	bl	8018414 <pbuf_free>
  return ERR_OK;
 8021880:	2300      	movs	r3, #0
}
 8021882:	4618      	mov	r0, r3
 8021884:	3718      	adds	r7, #24
 8021886:	46bd      	mov	sp, r7
 8021888:	bd80      	pop	{r7, pc}
 802188a:	bf00      	nop
 802188c:	080270c8 	.word	0x080270c8

08021890 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8021890:	b580      	push	{r7, lr}
 8021892:	b086      	sub	sp, #24
 8021894:	af00      	add	r7, sp, #0
 8021896:	60f8      	str	r0, [r7, #12]
 8021898:	60b9      	str	r1, [r7, #8]
 802189a:	607a      	str	r2, [r7, #4]
 802189c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802189e:	8c3b      	ldrh	r3, [r7, #32]
 80218a0:	4618      	mov	r0, r3
 80218a2:	f7f5 f90d 	bl	8016ac0 <lwip_htons>
 80218a6:	4603      	mov	r3, r0
 80218a8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80218aa:	210e      	movs	r1, #14
 80218ac:	68b8      	ldr	r0, [r7, #8]
 80218ae:	f7f6 fd1b 	bl	80182e8 <pbuf_add_header>
 80218b2:	4603      	mov	r3, r0
 80218b4:	2b00      	cmp	r3, #0
 80218b6:	d125      	bne.n	8021904 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80218b8:	68bb      	ldr	r3, [r7, #8]
 80218ba:	685b      	ldr	r3, [r3, #4]
 80218bc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80218be:	693b      	ldr	r3, [r7, #16]
 80218c0:	8afa      	ldrh	r2, [r7, #22]
 80218c2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80218c4:	693b      	ldr	r3, [r7, #16]
 80218c6:	2206      	movs	r2, #6
 80218c8:	6839      	ldr	r1, [r7, #0]
 80218ca:	4618      	mov	r0, r3
 80218cc:	f000 fea9 	bl	8022622 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80218d0:	693b      	ldr	r3, [r7, #16]
 80218d2:	3306      	adds	r3, #6
 80218d4:	2206      	movs	r2, #6
 80218d6:	6879      	ldr	r1, [r7, #4]
 80218d8:	4618      	mov	r0, r3
 80218da:	f000 fea2 	bl	8022622 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80218de:	68fb      	ldr	r3, [r7, #12]
 80218e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80218e4:	2b06      	cmp	r3, #6
 80218e6:	d006      	beq.n	80218f6 <ethernet_output+0x66>
 80218e8:	4b0a      	ldr	r3, [pc, #40]	; (8021914 <ethernet_output+0x84>)
 80218ea:	f44f 7299 	mov.w	r2, #306	; 0x132
 80218ee:	490a      	ldr	r1, [pc, #40]	; (8021918 <ethernet_output+0x88>)
 80218f0:	480a      	ldr	r0, [pc, #40]	; (802191c <ethernet_output+0x8c>)
 80218f2:	f000 fd25 	bl	8022340 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80218f6:	68fb      	ldr	r3, [r7, #12]
 80218f8:	699b      	ldr	r3, [r3, #24]
 80218fa:	68b9      	ldr	r1, [r7, #8]
 80218fc:	68f8      	ldr	r0, [r7, #12]
 80218fe:	4798      	blx	r3
 8021900:	4603      	mov	r3, r0
 8021902:	e002      	b.n	802190a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8021904:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8021906:	f06f 0301 	mvn.w	r3, #1
}
 802190a:	4618      	mov	r0, r3
 802190c:	3718      	adds	r7, #24
 802190e:	46bd      	mov	sp, r7
 8021910:	bd80      	pop	{r7, pc}
 8021912:	bf00      	nop
 8021914:	08026d10 	.word	0x08026d10
 8021918:	08026d48 	.word	0x08026d48
 802191c:	08026d7c 	.word	0x08026d7c

08021920 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8021920:	b580      	push	{r7, lr}
 8021922:	b082      	sub	sp, #8
 8021924:	af00      	add	r7, sp, #0
 8021926:	6078      	str	r0, [r7, #4]
 8021928:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 802192a:	683b      	ldr	r3, [r7, #0]
 802192c:	2200      	movs	r2, #0
 802192e:	2104      	movs	r1, #4
 8021930:	4618      	mov	r0, r3
 8021932:	f7ef fbf4 	bl	801111e <osMessageQueueNew>
 8021936:	4602      	mov	r2, r0
 8021938:	687b      	ldr	r3, [r7, #4]
 802193a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 802193c:	687b      	ldr	r3, [r7, #4]
 802193e:	681b      	ldr	r3, [r3, #0]
 8021940:	2b00      	cmp	r3, #0
 8021942:	d102      	bne.n	802194a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8021944:	f04f 33ff 	mov.w	r3, #4294967295
 8021948:	e000      	b.n	802194c <sys_mbox_new+0x2c>

  return ERR_OK;
 802194a:	2300      	movs	r3, #0
}
 802194c:	4618      	mov	r0, r3
 802194e:	3708      	adds	r7, #8
 8021950:	46bd      	mov	sp, r7
 8021952:	bd80      	pop	{r7, pc}

08021954 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8021954:	b580      	push	{r7, lr}
 8021956:	b082      	sub	sp, #8
 8021958:	af00      	add	r7, sp, #0
 802195a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 802195c:	687b      	ldr	r3, [r7, #4]
 802195e:	681b      	ldr	r3, [r3, #0]
 8021960:	4618      	mov	r0, r3
 8021962:	f7ef fd01 	bl	8011368 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8021966:	687b      	ldr	r3, [r7, #4]
 8021968:	681b      	ldr	r3, [r3, #0]
 802196a:	4618      	mov	r0, r3
 802196c:	f7ef fd1b 	bl	80113a6 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8021970:	bf00      	nop
 8021972:	3708      	adds	r7, #8
 8021974:	46bd      	mov	sp, r7
 8021976:	bd80      	pop	{r7, pc}

08021978 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8021978:	b580      	push	{r7, lr}
 802197a:	b084      	sub	sp, #16
 802197c:	af00      	add	r7, sp, #0
 802197e:	6078      	str	r0, [r7, #4]
 8021980:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8021982:	687b      	ldr	r3, [r7, #4]
 8021984:	6818      	ldr	r0, [r3, #0]
 8021986:	4639      	mov	r1, r7
 8021988:	2300      	movs	r3, #0
 802198a:	2200      	movs	r2, #0
 802198c:	f7ef fc3a 	bl	8011204 <osMessageQueuePut>
 8021990:	4603      	mov	r3, r0
 8021992:	2b00      	cmp	r3, #0
 8021994:	d102      	bne.n	802199c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8021996:	2300      	movs	r3, #0
 8021998:	73fb      	strb	r3, [r7, #15]
 802199a:	e001      	b.n	80219a0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 802199c:	23ff      	movs	r3, #255	; 0xff
 802199e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80219a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80219a4:	4618      	mov	r0, r3
 80219a6:	3710      	adds	r7, #16
 80219a8:	46bd      	mov	sp, r7
 80219aa:	bd80      	pop	{r7, pc}

080219ac <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80219ac:	b580      	push	{r7, lr}
 80219ae:	b086      	sub	sp, #24
 80219b0:	af00      	add	r7, sp, #0
 80219b2:	60f8      	str	r0, [r7, #12]
 80219b4:	60b9      	str	r1, [r7, #8]
 80219b6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80219b8:	f7ef f8b0 	bl	8010b1c <osKernelGetTickCount>
 80219bc:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80219be:	687b      	ldr	r3, [r7, #4]
 80219c0:	2b00      	cmp	r3, #0
 80219c2:	d013      	beq.n	80219ec <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80219c4:	68fb      	ldr	r3, [r7, #12]
 80219c6:	6818      	ldr	r0, [r3, #0]
 80219c8:	687b      	ldr	r3, [r7, #4]
 80219ca:	2200      	movs	r2, #0
 80219cc:	68b9      	ldr	r1, [r7, #8]
 80219ce:	f7ef fc73 	bl	80112b8 <osMessageQueueGet>
 80219d2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80219d4:	693b      	ldr	r3, [r7, #16]
 80219d6:	2b00      	cmp	r3, #0
 80219d8:	d105      	bne.n	80219e6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80219da:	f7ef f89f 	bl	8010b1c <osKernelGetTickCount>
 80219de:	4602      	mov	r2, r0
 80219e0:	697b      	ldr	r3, [r7, #20]
 80219e2:	1ad3      	subs	r3, r2, r3
 80219e4:	e00f      	b.n	8021a06 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80219e6:	f04f 33ff 	mov.w	r3, #4294967295
 80219ea:	e00c      	b.n	8021a06 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80219ec:	68fb      	ldr	r3, [r7, #12]
 80219ee:	6818      	ldr	r0, [r3, #0]
 80219f0:	f04f 33ff 	mov.w	r3, #4294967295
 80219f4:	2200      	movs	r2, #0
 80219f6:	68b9      	ldr	r1, [r7, #8]
 80219f8:	f7ef fc5e 	bl	80112b8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80219fc:	f7ef f88e 	bl	8010b1c <osKernelGetTickCount>
 8021a00:	4602      	mov	r2, r0
 8021a02:	697b      	ldr	r3, [r7, #20]
 8021a04:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8021a06:	4618      	mov	r0, r3
 8021a08:	3718      	adds	r7, #24
 8021a0a:	46bd      	mov	sp, r7
 8021a0c:	bd80      	pop	{r7, pc}

08021a0e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8021a0e:	b580      	push	{r7, lr}
 8021a10:	b082      	sub	sp, #8
 8021a12:	af00      	add	r7, sp, #0
 8021a14:	6078      	str	r0, [r7, #4]
 8021a16:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8021a18:	687b      	ldr	r3, [r7, #4]
 8021a1a:	6818      	ldr	r0, [r3, #0]
 8021a1c:	2300      	movs	r3, #0
 8021a1e:	2200      	movs	r2, #0
 8021a20:	6839      	ldr	r1, [r7, #0]
 8021a22:	f7ef fc49 	bl	80112b8 <osMessageQueueGet>
 8021a26:	4603      	mov	r3, r0
 8021a28:	2b00      	cmp	r3, #0
 8021a2a:	d101      	bne.n	8021a30 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8021a2c:	2300      	movs	r3, #0
 8021a2e:	e001      	b.n	8021a34 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8021a30:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8021a34:	4618      	mov	r0, r3
 8021a36:	3708      	adds	r7, #8
 8021a38:	46bd      	mov	sp, r7
 8021a3a:	bd80      	pop	{r7, pc}

08021a3c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8021a3c:	b480      	push	{r7}
 8021a3e:	b083      	sub	sp, #12
 8021a40:	af00      	add	r7, sp, #0
 8021a42:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8021a44:	687b      	ldr	r3, [r7, #4]
 8021a46:	681b      	ldr	r3, [r3, #0]
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	d101      	bne.n	8021a50 <sys_mbox_valid+0x14>
    return 0;
 8021a4c:	2300      	movs	r3, #0
 8021a4e:	e000      	b.n	8021a52 <sys_mbox_valid+0x16>
  else
    return 1;
 8021a50:	2301      	movs	r3, #1
}
 8021a52:	4618      	mov	r0, r3
 8021a54:	370c      	adds	r7, #12
 8021a56:	46bd      	mov	sp, r7
 8021a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a5c:	4770      	bx	lr

08021a5e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8021a5e:	b480      	push	{r7}
 8021a60:	b083      	sub	sp, #12
 8021a62:	af00      	add	r7, sp, #0
 8021a64:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8021a66:	687b      	ldr	r3, [r7, #4]
 8021a68:	2200      	movs	r2, #0
 8021a6a:	601a      	str	r2, [r3, #0]
}
 8021a6c:	bf00      	nop
 8021a6e:	370c      	adds	r7, #12
 8021a70:	46bd      	mov	sp, r7
 8021a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a76:	4770      	bx	lr

08021a78 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8021a78:	b580      	push	{r7, lr}
 8021a7a:	b082      	sub	sp, #8
 8021a7c:	af00      	add	r7, sp, #0
 8021a7e:	6078      	str	r0, [r7, #4]
 8021a80:	460b      	mov	r3, r1
 8021a82:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8021a84:	78fb      	ldrb	r3, [r7, #3]
 8021a86:	2200      	movs	r2, #0
 8021a88:	4619      	mov	r1, r3
 8021a8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8021a8e:	f7ef fa10 	bl	8010eb2 <osSemaphoreNew>
 8021a92:	4602      	mov	r2, r0
 8021a94:	687b      	ldr	r3, [r7, #4]
 8021a96:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	681b      	ldr	r3, [r3, #0]
 8021a9c:	2b00      	cmp	r3, #0
 8021a9e:	d102      	bne.n	8021aa6 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8021aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8021aa4:	e009      	b.n	8021aba <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8021aa6:	78fb      	ldrb	r3, [r7, #3]
 8021aa8:	2b00      	cmp	r3, #0
 8021aaa:	d105      	bne.n	8021ab8 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8021aac:	687b      	ldr	r3, [r7, #4]
 8021aae:	681b      	ldr	r3, [r3, #0]
 8021ab0:	2100      	movs	r1, #0
 8021ab2:	4618      	mov	r0, r3
 8021ab4:	f7ef fa86 	bl	8010fc4 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8021ab8:	2300      	movs	r3, #0
}
 8021aba:	4618      	mov	r0, r3
 8021abc:	3708      	adds	r7, #8
 8021abe:	46bd      	mov	sp, r7
 8021ac0:	bd80      	pop	{r7, pc}

08021ac2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8021ac2:	b580      	push	{r7, lr}
 8021ac4:	b084      	sub	sp, #16
 8021ac6:	af00      	add	r7, sp, #0
 8021ac8:	6078      	str	r0, [r7, #4]
 8021aca:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8021acc:	f7ef f826 	bl	8010b1c <osKernelGetTickCount>
 8021ad0:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8021ad2:	683b      	ldr	r3, [r7, #0]
 8021ad4:	2b00      	cmp	r3, #0
 8021ad6:	d011      	beq.n	8021afc <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8021ad8:	687b      	ldr	r3, [r7, #4]
 8021ada:	681b      	ldr	r3, [r3, #0]
 8021adc:	6839      	ldr	r1, [r7, #0]
 8021ade:	4618      	mov	r0, r3
 8021ae0:	f7ef fa70 	bl	8010fc4 <osSemaphoreAcquire>
 8021ae4:	4603      	mov	r3, r0
 8021ae6:	2b00      	cmp	r3, #0
 8021ae8:	d105      	bne.n	8021af6 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8021aea:	f7ef f817 	bl	8010b1c <osKernelGetTickCount>
 8021aee:	4602      	mov	r2, r0
 8021af0:	68fb      	ldr	r3, [r7, #12]
 8021af2:	1ad3      	subs	r3, r2, r3
 8021af4:	e012      	b.n	8021b1c <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8021af6:	f04f 33ff 	mov.w	r3, #4294967295
 8021afa:	e00f      	b.n	8021b1c <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8021afc:	bf00      	nop
 8021afe:	687b      	ldr	r3, [r7, #4]
 8021b00:	681b      	ldr	r3, [r3, #0]
 8021b02:	f04f 31ff 	mov.w	r1, #4294967295
 8021b06:	4618      	mov	r0, r3
 8021b08:	f7ef fa5c 	bl	8010fc4 <osSemaphoreAcquire>
 8021b0c:	4603      	mov	r3, r0
 8021b0e:	2b00      	cmp	r3, #0
 8021b10:	d1f5      	bne.n	8021afe <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8021b12:	f7ef f803 	bl	8010b1c <osKernelGetTickCount>
 8021b16:	4602      	mov	r2, r0
 8021b18:	68fb      	ldr	r3, [r7, #12]
 8021b1a:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8021b1c:	4618      	mov	r0, r3
 8021b1e:	3710      	adds	r7, #16
 8021b20:	46bd      	mov	sp, r7
 8021b22:	bd80      	pop	{r7, pc}

08021b24 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8021b24:	b580      	push	{r7, lr}
 8021b26:	b082      	sub	sp, #8
 8021b28:	af00      	add	r7, sp, #0
 8021b2a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8021b2c:	687b      	ldr	r3, [r7, #4]
 8021b2e:	681b      	ldr	r3, [r3, #0]
 8021b30:	4618      	mov	r0, r3
 8021b32:	f7ef fa93 	bl	801105c <osSemaphoreRelease>
}
 8021b36:	bf00      	nop
 8021b38:	3708      	adds	r7, #8
 8021b3a:	46bd      	mov	sp, r7
 8021b3c:	bd80      	pop	{r7, pc}

08021b3e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8021b3e:	b580      	push	{r7, lr}
 8021b40:	b082      	sub	sp, #8
 8021b42:	af00      	add	r7, sp, #0
 8021b44:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8021b46:	687b      	ldr	r3, [r7, #4]
 8021b48:	681b      	ldr	r3, [r3, #0]
 8021b4a:	4618      	mov	r0, r3
 8021b4c:	f7ef fac4 	bl	80110d8 <osSemaphoreDelete>
}
 8021b50:	bf00      	nop
 8021b52:	3708      	adds	r7, #8
 8021b54:	46bd      	mov	sp, r7
 8021b56:	bd80      	pop	{r7, pc}

08021b58 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8021b58:	b480      	push	{r7}
 8021b5a:	b083      	sub	sp, #12
 8021b5c:	af00      	add	r7, sp, #0
 8021b5e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8021b60:	687b      	ldr	r3, [r7, #4]
 8021b62:	681b      	ldr	r3, [r3, #0]
 8021b64:	2b00      	cmp	r3, #0
 8021b66:	d101      	bne.n	8021b6c <sys_sem_valid+0x14>
    return 0;
 8021b68:	2300      	movs	r3, #0
 8021b6a:	e000      	b.n	8021b6e <sys_sem_valid+0x16>
  else
    return 1;
 8021b6c:	2301      	movs	r3, #1
}
 8021b6e:	4618      	mov	r0, r3
 8021b70:	370c      	adds	r7, #12
 8021b72:	46bd      	mov	sp, r7
 8021b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b78:	4770      	bx	lr

08021b7a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8021b7a:	b480      	push	{r7}
 8021b7c:	b083      	sub	sp, #12
 8021b7e:	af00      	add	r7, sp, #0
 8021b80:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8021b82:	687b      	ldr	r3, [r7, #4]
 8021b84:	2200      	movs	r2, #0
 8021b86:	601a      	str	r2, [r3, #0]
}
 8021b88:	bf00      	nop
 8021b8a:	370c      	adds	r7, #12
 8021b8c:	46bd      	mov	sp, r7
 8021b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b92:	4770      	bx	lr

08021b94 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8021b94:	b580      	push	{r7, lr}
 8021b96:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8021b98:	2000      	movs	r0, #0
 8021b9a:	f7ef f87f 	bl	8010c9c <osMutexNew>
 8021b9e:	4603      	mov	r3, r0
 8021ba0:	4a01      	ldr	r2, [pc, #4]	; (8021ba8 <sys_init+0x14>)
 8021ba2:	6013      	str	r3, [r2, #0]
#endif
}
 8021ba4:	bf00      	nop
 8021ba6:	bd80      	pop	{r7, pc}
 8021ba8:	2002f140 	.word	0x2002f140

08021bac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8021bac:	b580      	push	{r7, lr}
 8021bae:	b082      	sub	sp, #8
 8021bb0:	af00      	add	r7, sp, #0
 8021bb2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8021bb4:	2000      	movs	r0, #0
 8021bb6:	f7ef f871 	bl	8010c9c <osMutexNew>
 8021bba:	4602      	mov	r2, r0
 8021bbc:	687b      	ldr	r3, [r7, #4]
 8021bbe:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8021bc0:	687b      	ldr	r3, [r7, #4]
 8021bc2:	681b      	ldr	r3, [r3, #0]
 8021bc4:	2b00      	cmp	r3, #0
 8021bc6:	d102      	bne.n	8021bce <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8021bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8021bcc:	e000      	b.n	8021bd0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8021bce:	2300      	movs	r3, #0
}
 8021bd0:	4618      	mov	r0, r3
 8021bd2:	3708      	adds	r7, #8
 8021bd4:	46bd      	mov	sp, r7
 8021bd6:	bd80      	pop	{r7, pc}

08021bd8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8021bd8:	b580      	push	{r7, lr}
 8021bda:	b082      	sub	sp, #8
 8021bdc:	af00      	add	r7, sp, #0
 8021bde:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8021be0:	687b      	ldr	r3, [r7, #4]
 8021be2:	681b      	ldr	r3, [r3, #0]
 8021be4:	f04f 31ff 	mov.w	r1, #4294967295
 8021be8:	4618      	mov	r0, r3
 8021bea:	f7ef f8dc 	bl	8010da6 <osMutexAcquire>
#endif
}
 8021bee:	bf00      	nop
 8021bf0:	3708      	adds	r7, #8
 8021bf2:	46bd      	mov	sp, r7
 8021bf4:	bd80      	pop	{r7, pc}

08021bf6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8021bf6:	b580      	push	{r7, lr}
 8021bf8:	b082      	sub	sp, #8
 8021bfa:	af00      	add	r7, sp, #0
 8021bfc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8021bfe:	687b      	ldr	r3, [r7, #4]
 8021c00:	681b      	ldr	r3, [r3, #0]
 8021c02:	4618      	mov	r0, r3
 8021c04:	f7ef f919 	bl	8010e3a <osMutexRelease>
}
 8021c08:	bf00      	nop
 8021c0a:	3708      	adds	r7, #8
 8021c0c:	46bd      	mov	sp, r7
 8021c0e:	bd80      	pop	{r7, pc}

08021c10 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8021c10:	b580      	push	{r7, lr}
 8021c12:	b08e      	sub	sp, #56	; 0x38
 8021c14:	af00      	add	r7, sp, #0
 8021c16:	60f8      	str	r0, [r7, #12]
 8021c18:	60b9      	str	r1, [r7, #8]
 8021c1a:	607a      	str	r2, [r7, #4]
 8021c1c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8021c1e:	f107 0314 	add.w	r3, r7, #20
 8021c22:	2224      	movs	r2, #36	; 0x24
 8021c24:	2100      	movs	r1, #0
 8021c26:	4618      	mov	r0, r3
 8021c28:	f000 fc62 	bl	80224f0 <memset>
 8021c2c:	68fb      	ldr	r3, [r7, #12]
 8021c2e:	617b      	str	r3, [r7, #20]
 8021c30:	683b      	ldr	r3, [r7, #0]
 8021c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8021c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021c36:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8021c38:	f107 0314 	add.w	r3, r7, #20
 8021c3c:	461a      	mov	r2, r3
 8021c3e:	6879      	ldr	r1, [r7, #4]
 8021c40:	68b8      	ldr	r0, [r7, #8]
 8021c42:	f7ee ff7f 	bl	8010b44 <osThreadNew>
 8021c46:	4603      	mov	r3, r0
#endif
}
 8021c48:	4618      	mov	r0, r3
 8021c4a:	3738      	adds	r7, #56	; 0x38
 8021c4c:	46bd      	mov	sp, r7
 8021c4e:	bd80      	pop	{r7, pc}

08021c50 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8021c50:	b580      	push	{r7, lr}
 8021c52:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8021c54:	4b04      	ldr	r3, [pc, #16]	; (8021c68 <sys_arch_protect+0x18>)
 8021c56:	681b      	ldr	r3, [r3, #0]
 8021c58:	f04f 31ff 	mov.w	r1, #4294967295
 8021c5c:	4618      	mov	r0, r3
 8021c5e:	f7ef f8a2 	bl	8010da6 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8021c62:	2301      	movs	r3, #1
}
 8021c64:	4618      	mov	r0, r3
 8021c66:	bd80      	pop	{r7, pc}
 8021c68:	2002f140 	.word	0x2002f140

08021c6c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8021c6c:	b580      	push	{r7, lr}
 8021c6e:	b082      	sub	sp, #8
 8021c70:	af00      	add	r7, sp, #0
 8021c72:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8021c74:	4b04      	ldr	r3, [pc, #16]	; (8021c88 <sys_arch_unprotect+0x1c>)
 8021c76:	681b      	ldr	r3, [r3, #0]
 8021c78:	4618      	mov	r0, r3
 8021c7a:	f7ef f8de 	bl	8010e3a <osMutexRelease>
}
 8021c7e:	bf00      	nop
 8021c80:	3708      	adds	r7, #8
 8021c82:	46bd      	mov	sp, r7
 8021c84:	bd80      	pop	{r7, pc}
 8021c86:	bf00      	nop
 8021c88:	2002f140 	.word	0x2002f140

08021c8c <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
 8021c8c:	b580      	push	{r7, lr}
 8021c8e:	b084      	sub	sp, #16
 8021c90:	af00      	add	r7, sp, #0
 8021c92:	60f8      	str	r0, [r7, #12]
 8021c94:	60b9      	str	r1, [r7, #8]
 8021c96:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8021c98:	68fb      	ldr	r3, [r7, #12]
 8021c9a:	2b00      	cmp	r3, #0
 8021c9c:	d005      	beq.n	8021caa <lwrb_init+0x1e>
 8021c9e:	68bb      	ldr	r3, [r7, #8]
 8021ca0:	2b00      	cmp	r3, #0
 8021ca2:	d002      	beq.n	8021caa <lwrb_init+0x1e>
 8021ca4:	687b      	ldr	r3, [r7, #4]
 8021ca6:	2b00      	cmp	r3, #0
 8021ca8:	d101      	bne.n	8021cae <lwrb_init+0x22>
        return 0;
 8021caa:	2300      	movs	r3, #0
 8021cac:	e00b      	b.n	8021cc6 <lwrb_init+0x3a>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 8021cae:	2214      	movs	r2, #20
 8021cb0:	2100      	movs	r1, #0
 8021cb2:	68f8      	ldr	r0, [r7, #12]
 8021cb4:	f000 fc1c 	bl	80224f0 <memset>

    buff->size = size;
 8021cb8:	68fb      	ldr	r3, [r7, #12]
 8021cba:	687a      	ldr	r2, [r7, #4]
 8021cbc:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8021cbe:	68fb      	ldr	r3, [r7, #12]
 8021cc0:	68ba      	ldr	r2, [r7, #8]
 8021cc2:	601a      	str	r2, [r3, #0]
#if LWRB_USE_MAGIC
    buff->magic1 = BUF_MAGIC1;
    buff->magic2 = BUF_MAGIC2;
#endif /* LWRB_USE_MAGIC */

    return 1;
 8021cc4:	2301      	movs	r3, #1
}
 8021cc6:	4618      	mov	r0, r3
 8021cc8:	3710      	adds	r7, #16
 8021cca:	46bd      	mov	sp, r7
 8021ccc:	bd80      	pop	{r7, pc}

08021cce <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Buffer handle
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(LWRB_VOLATILE lwrb_t* buff, lwrb_evt_fn evt_fn) {
 8021cce:	b480      	push	{r7}
 8021cd0:	b083      	sub	sp, #12
 8021cd2:	af00      	add	r7, sp, #0
 8021cd4:	6078      	str	r0, [r7, #4]
 8021cd6:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 8021cd8:	687b      	ldr	r3, [r7, #4]
 8021cda:	2b00      	cmp	r3, #0
 8021cdc:	d00a      	beq.n	8021cf4 <lwrb_set_evt_fn+0x26>
 8021cde:	687b      	ldr	r3, [r7, #4]
 8021ce0:	681b      	ldr	r3, [r3, #0]
 8021ce2:	2b00      	cmp	r3, #0
 8021ce4:	d006      	beq.n	8021cf4 <lwrb_set_evt_fn+0x26>
 8021ce6:	687b      	ldr	r3, [r7, #4]
 8021ce8:	685b      	ldr	r3, [r3, #4]
 8021cea:	2b00      	cmp	r3, #0
 8021cec:	d002      	beq.n	8021cf4 <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 8021cee:	687b      	ldr	r3, [r7, #4]
 8021cf0:	683a      	ldr	r2, [r7, #0]
 8021cf2:	611a      	str	r2, [r3, #16]
    }
}
 8021cf4:	bf00      	nop
 8021cf6:	370c      	adds	r7, #12
 8021cf8:	46bd      	mov	sp, r7
 8021cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cfe:	4770      	bx	lr

08021d00 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 8021d00:	b580      	push	{r7, lr}
 8021d02:	b088      	sub	sp, #32
 8021d04:	af00      	add	r7, sp, #0
 8021d06:	60f8      	str	r0, [r7, #12]
 8021d08:	60b9      	str	r1, [r7, #8]
 8021d0a:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8021d0c:	68bb      	ldr	r3, [r7, #8]
 8021d0e:	61bb      	str	r3, [r7, #24]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8021d10:	68fb      	ldr	r3, [r7, #12]
 8021d12:	2b00      	cmp	r3, #0
 8021d14:	d00d      	beq.n	8021d32 <lwrb_write+0x32>
 8021d16:	68fb      	ldr	r3, [r7, #12]
 8021d18:	681b      	ldr	r3, [r3, #0]
 8021d1a:	2b00      	cmp	r3, #0
 8021d1c:	d009      	beq.n	8021d32 <lwrb_write+0x32>
 8021d1e:	68fb      	ldr	r3, [r7, #12]
 8021d20:	685b      	ldr	r3, [r3, #4]
 8021d22:	2b00      	cmp	r3, #0
 8021d24:	d005      	beq.n	8021d32 <lwrb_write+0x32>
 8021d26:	68bb      	ldr	r3, [r7, #8]
 8021d28:	2b00      	cmp	r3, #0
 8021d2a:	d002      	beq.n	8021d32 <lwrb_write+0x32>
 8021d2c:	687b      	ldr	r3, [r7, #4]
 8021d2e:	2b00      	cmp	r3, #0
 8021d30:	d101      	bne.n	8021d36 <lwrb_write+0x36>
        return 0;
 8021d32:	2300      	movs	r3, #0
 8021d34:	e059      	b.n	8021dea <lwrb_write+0xea>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 8021d36:	68f8      	ldr	r0, [r7, #12]
 8021d38:	f000 f85b 	bl	8021df2 <lwrb_get_free>
 8021d3c:	61f8      	str	r0, [r7, #28]

		if (free < btw) {
 8021d3e:	69fa      	ldr	r2, [r7, #28]
 8021d40:	687b      	ldr	r3, [r7, #4]
 8021d42:	429a      	cmp	r2, r3
 8021d44:	d20d      	bcs.n	8021d62 <lwrb_write+0x62>
			BUF_SEND_EVT(buff, LWRB_EVT_FULL, free);
 8021d46:	68fb      	ldr	r3, [r7, #12]
 8021d48:	691b      	ldr	r3, [r3, #16]
 8021d4a:	2b00      	cmp	r3, #0
 8021d4c:	d005      	beq.n	8021d5a <lwrb_write+0x5a>
 8021d4e:	68fb      	ldr	r3, [r7, #12]
 8021d50:	691b      	ldr	r3, [r3, #16]
 8021d52:	69fa      	ldr	r2, [r7, #28]
 8021d54:	2102      	movs	r1, #2
 8021d56:	68f8      	ldr	r0, [r7, #12]
 8021d58:	4798      	blx	r3
			free = lwrb_get_free(buff);
 8021d5a:	68f8      	ldr	r0, [r7, #12]
 8021d5c:	f000 f849 	bl	8021df2 <lwrb_get_free>
 8021d60:	61f8      	str	r0, [r7, #28]
		}
		
    btw = BUF_MIN(free, btw);
 8021d62:	687a      	ldr	r2, [r7, #4]
 8021d64:	69fb      	ldr	r3, [r7, #28]
 8021d66:	4293      	cmp	r3, r2
 8021d68:	bf28      	it	cs
 8021d6a:	4613      	movcs	r3, r2
 8021d6c:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8021d6e:	687b      	ldr	r3, [r7, #4]
 8021d70:	2b00      	cmp	r3, #0
 8021d72:	d101      	bne.n	8021d78 <lwrb_write+0x78>
        return 0;
 8021d74:	2300      	movs	r3, #0
 8021d76:	e038      	b.n	8021dea <lwrb_write+0xea>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8021d78:	68fb      	ldr	r3, [r7, #12]
 8021d7a:	685a      	ldr	r2, [r3, #4]
 8021d7c:	68fb      	ldr	r3, [r7, #12]
 8021d7e:	68db      	ldr	r3, [r3, #12]
 8021d80:	1ad3      	subs	r3, r2, r3
 8021d82:	687a      	ldr	r2, [r7, #4]
 8021d84:	4293      	cmp	r3, r2
 8021d86:	bf28      	it	cs
 8021d88:	4613      	movcs	r3, r2
 8021d8a:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8021d8c:	68fb      	ldr	r3, [r7, #12]
 8021d8e:	681a      	ldr	r2, [r3, #0]
 8021d90:	68fb      	ldr	r3, [r7, #12]
 8021d92:	68db      	ldr	r3, [r3, #12]
 8021d94:	4413      	add	r3, r2
 8021d96:	697a      	ldr	r2, [r7, #20]
 8021d98:	69b9      	ldr	r1, [r7, #24]
 8021d9a:	4618      	mov	r0, r3
 8021d9c:	f000 fc41 	bl	8022622 <memcpy>
    buff->w += tocopy;
 8021da0:	68fb      	ldr	r3, [r7, #12]
 8021da2:	68da      	ldr	r2, [r3, #12]
 8021da4:	697b      	ldr	r3, [r7, #20]
 8021da6:	441a      	add	r2, r3
 8021da8:	68fb      	ldr	r3, [r7, #12]
 8021daa:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 8021dac:	687a      	ldr	r2, [r7, #4]
 8021dae:	697b      	ldr	r3, [r7, #20]
 8021db0:	1ad3      	subs	r3, r2, r3
 8021db2:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8021db4:	687b      	ldr	r3, [r7, #4]
 8021db6:	2b00      	cmp	r3, #0
 8021db8:	d00b      	beq.n	8021dd2 <lwrb_write+0xd2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8021dba:	68fb      	ldr	r3, [r7, #12]
 8021dbc:	6818      	ldr	r0, [r3, #0]
 8021dbe:	69ba      	ldr	r2, [r7, #24]
 8021dc0:	697b      	ldr	r3, [r7, #20]
 8021dc2:	4413      	add	r3, r2
 8021dc4:	687a      	ldr	r2, [r7, #4]
 8021dc6:	4619      	mov	r1, r3
 8021dc8:	f000 fc2b 	bl	8022622 <memcpy>
        buff->w = btw;
 8021dcc:	68fb      	ldr	r3, [r7, #12]
 8021dce:	687a      	ldr	r2, [r7, #4]
 8021dd0:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8021dd2:	68fb      	ldr	r3, [r7, #12]
 8021dd4:	68da      	ldr	r2, [r3, #12]
 8021dd6:	68fb      	ldr	r3, [r7, #12]
 8021dd8:	685b      	ldr	r3, [r3, #4]
 8021dda:	429a      	cmp	r2, r3
 8021ddc:	d302      	bcc.n	8021de4 <lwrb_write+0xe4>
        buff->w = 0;
 8021dde:	68fb      	ldr	r3, [r7, #12]
 8021de0:	2200      	movs	r2, #0
 8021de2:	60da      	str	r2, [r3, #12]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
    return tocopy + btw;
 8021de4:	697a      	ldr	r2, [r7, #20]
 8021de6:	687b      	ldr	r3, [r7, #4]
 8021de8:	4413      	add	r3, r2
}
 8021dea:	4618      	mov	r0, r3
 8021dec:	3720      	adds	r7, #32
 8021dee:	46bd      	mov	sp, r7
 8021df0:	bd80      	pop	{r7, pc}

08021df2 <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 8021df2:	b480      	push	{r7}
 8021df4:	b087      	sub	sp, #28
 8021df6:	af00      	add	r7, sp, #0
 8021df8:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8021dfa:	687b      	ldr	r3, [r7, #4]
 8021dfc:	2b00      	cmp	r3, #0
 8021dfe:	d007      	beq.n	8021e10 <lwrb_get_free+0x1e>
 8021e00:	687b      	ldr	r3, [r7, #4]
 8021e02:	681b      	ldr	r3, [r3, #0]
 8021e04:	2b00      	cmp	r3, #0
 8021e06:	d003      	beq.n	8021e10 <lwrb_get_free+0x1e>
 8021e08:	687b      	ldr	r3, [r7, #4]
 8021e0a:	685b      	ldr	r3, [r3, #4]
 8021e0c:	2b00      	cmp	r3, #0
 8021e0e:	d101      	bne.n	8021e14 <lwrb_get_free+0x22>
        return 0;
 8021e10:	2300      	movs	r3, #0
 8021e12:	e01f      	b.n	8021e54 <lwrb_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8021e14:	687b      	ldr	r3, [r7, #4]
 8021e16:	68db      	ldr	r3, [r3, #12]
 8021e18:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8021e1a:	687b      	ldr	r3, [r7, #4]
 8021e1c:	689b      	ldr	r3, [r3, #8]
 8021e1e:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8021e20:	693a      	ldr	r2, [r7, #16]
 8021e22:	68fb      	ldr	r3, [r7, #12]
 8021e24:	429a      	cmp	r2, r3
 8021e26:	d103      	bne.n	8021e30 <lwrb_get_free+0x3e>
        size = buff->size;
 8021e28:	687b      	ldr	r3, [r7, #4]
 8021e2a:	685b      	ldr	r3, [r3, #4]
 8021e2c:	617b      	str	r3, [r7, #20]
 8021e2e:	e00f      	b.n	8021e50 <lwrb_get_free+0x5e>
    } else if (r > w) {
 8021e30:	68fa      	ldr	r2, [r7, #12]
 8021e32:	693b      	ldr	r3, [r7, #16]
 8021e34:	429a      	cmp	r2, r3
 8021e36:	d904      	bls.n	8021e42 <lwrb_get_free+0x50>
        size = r - w;
 8021e38:	68fa      	ldr	r2, [r7, #12]
 8021e3a:	693b      	ldr	r3, [r7, #16]
 8021e3c:	1ad3      	subs	r3, r2, r3
 8021e3e:	617b      	str	r3, [r7, #20]
 8021e40:	e006      	b.n	8021e50 <lwrb_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 8021e42:	687b      	ldr	r3, [r7, #4]
 8021e44:	685a      	ldr	r2, [r3, #4]
 8021e46:	68f9      	ldr	r1, [r7, #12]
 8021e48:	693b      	ldr	r3, [r7, #16]
 8021e4a:	1acb      	subs	r3, r1, r3
 8021e4c:	4413      	add	r3, r2
 8021e4e:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8021e50:	697b      	ldr	r3, [r7, #20]
 8021e52:	3b01      	subs	r3, #1
}
 8021e54:	4618      	mov	r0, r3
 8021e56:	371c      	adds	r7, #28
 8021e58:	46bd      	mov	sp, r7
 8021e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e5e:	4770      	bx	lr

08021e60 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 8021e60:	b480      	push	{r7}
 8021e62:	b087      	sub	sp, #28
 8021e64:	af00      	add	r7, sp, #0
 8021e66:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8021e68:	687b      	ldr	r3, [r7, #4]
 8021e6a:	2b00      	cmp	r3, #0
 8021e6c:	d007      	beq.n	8021e7e <lwrb_get_full+0x1e>
 8021e6e:	687b      	ldr	r3, [r7, #4]
 8021e70:	681b      	ldr	r3, [r3, #0]
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	d003      	beq.n	8021e7e <lwrb_get_full+0x1e>
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	685b      	ldr	r3, [r3, #4]
 8021e7a:	2b00      	cmp	r3, #0
 8021e7c:	d101      	bne.n	8021e82 <lwrb_get_full+0x22>
        return 0;
 8021e7e:	2300      	movs	r3, #0
 8021e80:	e01d      	b.n	8021ebe <lwrb_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8021e82:	687b      	ldr	r3, [r7, #4]
 8021e84:	68db      	ldr	r3, [r3, #12]
 8021e86:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	689b      	ldr	r3, [r3, #8]
 8021e8c:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8021e8e:	693a      	ldr	r2, [r7, #16]
 8021e90:	68fb      	ldr	r3, [r7, #12]
 8021e92:	429a      	cmp	r2, r3
 8021e94:	d102      	bne.n	8021e9c <lwrb_get_full+0x3c>
        size = 0;
 8021e96:	2300      	movs	r3, #0
 8021e98:	617b      	str	r3, [r7, #20]
 8021e9a:	e00f      	b.n	8021ebc <lwrb_get_full+0x5c>
    } else if (w > r) {
 8021e9c:	693a      	ldr	r2, [r7, #16]
 8021e9e:	68fb      	ldr	r3, [r7, #12]
 8021ea0:	429a      	cmp	r2, r3
 8021ea2:	d904      	bls.n	8021eae <lwrb_get_full+0x4e>
        size = w - r;
 8021ea4:	693a      	ldr	r2, [r7, #16]
 8021ea6:	68fb      	ldr	r3, [r7, #12]
 8021ea8:	1ad3      	subs	r3, r2, r3
 8021eaa:	617b      	str	r3, [r7, #20]
 8021eac:	e006      	b.n	8021ebc <lwrb_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 8021eae:	687b      	ldr	r3, [r7, #4]
 8021eb0:	685a      	ldr	r2, [r3, #4]
 8021eb2:	6939      	ldr	r1, [r7, #16]
 8021eb4:	68fb      	ldr	r3, [r7, #12]
 8021eb6:	1acb      	subs	r3, r1, r3
 8021eb8:	4413      	add	r3, r2
 8021eba:	617b      	str	r3, [r7, #20]
    }
    return size;
 8021ebc:	697b      	ldr	r3, [r7, #20]
}
 8021ebe:	4618      	mov	r0, r3
 8021ec0:	371c      	adds	r7, #28
 8021ec2:	46bd      	mov	sp, r7
 8021ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ec8:	4770      	bx	lr

08021eca <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 8021eca:	b480      	push	{r7}
 8021ecc:	b083      	sub	sp, #12
 8021ece:	af00      	add	r7, sp, #0
 8021ed0:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8021ed2:	687b      	ldr	r3, [r7, #4]
 8021ed4:	2b00      	cmp	r3, #0
 8021ed6:	d007      	beq.n	8021ee8 <lwrb_get_linear_block_read_address+0x1e>
 8021ed8:	687b      	ldr	r3, [r7, #4]
 8021eda:	681b      	ldr	r3, [r3, #0]
 8021edc:	2b00      	cmp	r3, #0
 8021ede:	d003      	beq.n	8021ee8 <lwrb_get_linear_block_read_address+0x1e>
 8021ee0:	687b      	ldr	r3, [r7, #4]
 8021ee2:	685b      	ldr	r3, [r3, #4]
 8021ee4:	2b00      	cmp	r3, #0
 8021ee6:	d101      	bne.n	8021eec <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 8021ee8:	2300      	movs	r3, #0
 8021eea:	e004      	b.n	8021ef6 <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 8021eec:	687b      	ldr	r3, [r7, #4]
 8021eee:	681a      	ldr	r2, [r3, #0]
 8021ef0:	687b      	ldr	r3, [r7, #4]
 8021ef2:	689b      	ldr	r3, [r3, #8]
 8021ef4:	4413      	add	r3, r2
}
 8021ef6:	4618      	mov	r0, r3
 8021ef8:	370c      	adds	r7, #12
 8021efa:	46bd      	mov	sp, r7
 8021efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f00:	4770      	bx	lr

08021f02 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 8021f02:	b480      	push	{r7}
 8021f04:	b087      	sub	sp, #28
 8021f06:	af00      	add	r7, sp, #0
 8021f08:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8021f0a:	687b      	ldr	r3, [r7, #4]
 8021f0c:	2b00      	cmp	r3, #0
 8021f0e:	d007      	beq.n	8021f20 <lwrb_get_linear_block_read_length+0x1e>
 8021f10:	687b      	ldr	r3, [r7, #4]
 8021f12:	681b      	ldr	r3, [r3, #0]
 8021f14:	2b00      	cmp	r3, #0
 8021f16:	d003      	beq.n	8021f20 <lwrb_get_linear_block_read_length+0x1e>
 8021f18:	687b      	ldr	r3, [r7, #4]
 8021f1a:	685b      	ldr	r3, [r3, #4]
 8021f1c:	2b00      	cmp	r3, #0
 8021f1e:	d101      	bne.n	8021f24 <lwrb_get_linear_block_read_length+0x22>
        return 0;
 8021f20:	2300      	movs	r3, #0
 8021f22:	e01b      	b.n	8021f5c <lwrb_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8021f24:	687b      	ldr	r3, [r7, #4]
 8021f26:	68db      	ldr	r3, [r3, #12]
 8021f28:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8021f2a:	687b      	ldr	r3, [r7, #4]
 8021f2c:	689b      	ldr	r3, [r3, #8]
 8021f2e:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8021f30:	693a      	ldr	r2, [r7, #16]
 8021f32:	68fb      	ldr	r3, [r7, #12]
 8021f34:	429a      	cmp	r2, r3
 8021f36:	d904      	bls.n	8021f42 <lwrb_get_linear_block_read_length+0x40>
        len = w - r;
 8021f38:	693a      	ldr	r2, [r7, #16]
 8021f3a:	68fb      	ldr	r3, [r7, #12]
 8021f3c:	1ad3      	subs	r3, r2, r3
 8021f3e:	617b      	str	r3, [r7, #20]
 8021f40:	e00b      	b.n	8021f5a <lwrb_get_linear_block_read_length+0x58>
    } else if (r > w) {
 8021f42:	68fa      	ldr	r2, [r7, #12]
 8021f44:	693b      	ldr	r3, [r7, #16]
 8021f46:	429a      	cmp	r2, r3
 8021f48:	d905      	bls.n	8021f56 <lwrb_get_linear_block_read_length+0x54>
        len = buff->size - r;
 8021f4a:	687b      	ldr	r3, [r7, #4]
 8021f4c:	685a      	ldr	r2, [r3, #4]
 8021f4e:	68fb      	ldr	r3, [r7, #12]
 8021f50:	1ad3      	subs	r3, r2, r3
 8021f52:	617b      	str	r3, [r7, #20]
 8021f54:	e001      	b.n	8021f5a <lwrb_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 8021f56:	2300      	movs	r3, #0
 8021f58:	617b      	str	r3, [r7, #20]
    }
    return len;
 8021f5a:	697b      	ldr	r3, [r7, #20]
}
 8021f5c:	4618      	mov	r0, r3
 8021f5e:	371c      	adds	r7, #28
 8021f60:	46bd      	mov	sp, r7
 8021f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f66:	4770      	bx	lr

08021f68 <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 8021f68:	b580      	push	{r7, lr}
 8021f6a:	b084      	sub	sp, #16
 8021f6c:	af00      	add	r7, sp, #0
 8021f6e:	6078      	str	r0, [r7, #4]
 8021f70:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8021f72:	687b      	ldr	r3, [r7, #4]
 8021f74:	2b00      	cmp	r3, #0
 8021f76:	d00a      	beq.n	8021f8e <lwrb_skip+0x26>
 8021f78:	687b      	ldr	r3, [r7, #4]
 8021f7a:	681b      	ldr	r3, [r3, #0]
 8021f7c:	2b00      	cmp	r3, #0
 8021f7e:	d006      	beq.n	8021f8e <lwrb_skip+0x26>
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	685b      	ldr	r3, [r3, #4]
 8021f84:	2b00      	cmp	r3, #0
 8021f86:	d002      	beq.n	8021f8e <lwrb_skip+0x26>
 8021f88:	683b      	ldr	r3, [r7, #0]
 8021f8a:	2b00      	cmp	r3, #0
 8021f8c:	d101      	bne.n	8021f92 <lwrb_skip+0x2a>
        return 0;
 8021f8e:	2300      	movs	r3, #0
 8021f90:	e01d      	b.n	8021fce <lwrb_skip+0x66>
    }

    full = lwrb_get_full(buff);
 8021f92:	6878      	ldr	r0, [r7, #4]
 8021f94:	f7ff ff64 	bl	8021e60 <lwrb_get_full>
 8021f98:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);
 8021f9a:	683a      	ldr	r2, [r7, #0]
 8021f9c:	68fb      	ldr	r3, [r7, #12]
 8021f9e:	4293      	cmp	r3, r2
 8021fa0:	bf28      	it	cs
 8021fa2:	4613      	movcs	r3, r2
 8021fa4:	603b      	str	r3, [r7, #0]
    buff->r += len;
 8021fa6:	687b      	ldr	r3, [r7, #4]
 8021fa8:	689a      	ldr	r2, [r3, #8]
 8021faa:	683b      	ldr	r3, [r7, #0]
 8021fac:	441a      	add	r2, r3
 8021fae:	687b      	ldr	r3, [r7, #4]
 8021fb0:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {
 8021fb2:	687b      	ldr	r3, [r7, #4]
 8021fb4:	689a      	ldr	r2, [r3, #8]
 8021fb6:	687b      	ldr	r3, [r7, #4]
 8021fb8:	685b      	ldr	r3, [r3, #4]
 8021fba:	429a      	cmp	r2, r3
 8021fbc:	d306      	bcc.n	8021fcc <lwrb_skip+0x64>
        buff->r -= buff->size;
 8021fbe:	687b      	ldr	r3, [r7, #4]
 8021fc0:	689a      	ldr	r2, [r3, #8]
 8021fc2:	687b      	ldr	r3, [r7, #4]
 8021fc4:	685b      	ldr	r3, [r3, #4]
 8021fc6:	1ad2      	subs	r2, r2, r3
 8021fc8:	687b      	ldr	r3, [r7, #4]
 8021fca:	609a      	str	r2, [r3, #8]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
    return len;
 8021fcc:	683b      	ldr	r3, [r7, #0]
}
 8021fce:	4618      	mov	r0, r3
 8021fd0:	3710      	adds	r7, #16
 8021fd2:	46bd      	mov	sp, r7
 8021fd4:	bd80      	pop	{r7, pc}
	...

08021fd8 <malloc>:
 8021fd8:	4b02      	ldr	r3, [pc, #8]	; (8021fe4 <malloc+0xc>)
 8021fda:	4601      	mov	r1, r0
 8021fdc:	6818      	ldr	r0, [r3, #0]
 8021fde:	f000 b823 	b.w	8022028 <_malloc_r>
 8021fe2:	bf00      	nop
 8021fe4:	200000e4 	.word	0x200000e4

08021fe8 <sbrk_aligned>:
 8021fe8:	b570      	push	{r4, r5, r6, lr}
 8021fea:	4e0e      	ldr	r6, [pc, #56]	; (8022024 <sbrk_aligned+0x3c>)
 8021fec:	460c      	mov	r4, r1
 8021fee:	4605      	mov	r5, r0
 8021ff0:	6831      	ldr	r1, [r6, #0]
 8021ff2:	b911      	cbnz	r1, 8021ffa <sbrk_aligned+0x12>
 8021ff4:	f000 facc 	bl	8022590 <_sbrk_r>
 8021ff8:	6030      	str	r0, [r6, #0]
 8021ffa:	4621      	mov	r1, r4
 8021ffc:	4628      	mov	r0, r5
 8021ffe:	f000 fac7 	bl	8022590 <_sbrk_r>
 8022002:	1c43      	adds	r3, r0, #1
 8022004:	d00a      	beq.n	802201c <sbrk_aligned+0x34>
 8022006:	1cc4      	adds	r4, r0, #3
 8022008:	f024 0403 	bic.w	r4, r4, #3
 802200c:	42a0      	cmp	r0, r4
 802200e:	d007      	beq.n	8022020 <sbrk_aligned+0x38>
 8022010:	1a21      	subs	r1, r4, r0
 8022012:	4628      	mov	r0, r5
 8022014:	f000 fabc 	bl	8022590 <_sbrk_r>
 8022018:	3001      	adds	r0, #1
 802201a:	d101      	bne.n	8022020 <sbrk_aligned+0x38>
 802201c:	f04f 34ff 	mov.w	r4, #4294967295
 8022020:	4620      	mov	r0, r4
 8022022:	bd70      	pop	{r4, r5, r6, pc}
 8022024:	2002f148 	.word	0x2002f148

08022028 <_malloc_r>:
 8022028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802202c:	1ccd      	adds	r5, r1, #3
 802202e:	4607      	mov	r7, r0
 8022030:	f025 0503 	bic.w	r5, r5, #3
 8022034:	3508      	adds	r5, #8
 8022036:	2d0c      	cmp	r5, #12
 8022038:	bf38      	it	cc
 802203a:	250c      	movcc	r5, #12
 802203c:	2d00      	cmp	r5, #0
 802203e:	db01      	blt.n	8022044 <_malloc_r+0x1c>
 8022040:	42a9      	cmp	r1, r5
 8022042:	d905      	bls.n	8022050 <_malloc_r+0x28>
 8022044:	230c      	movs	r3, #12
 8022046:	2600      	movs	r6, #0
 8022048:	603b      	str	r3, [r7, #0]
 802204a:	4630      	mov	r0, r6
 802204c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022050:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8022124 <_malloc_r+0xfc>
 8022054:	f000 f868 	bl	8022128 <__malloc_lock>
 8022058:	f8d8 3000 	ldr.w	r3, [r8]
 802205c:	461c      	mov	r4, r3
 802205e:	bb5c      	cbnz	r4, 80220b8 <_malloc_r+0x90>
 8022060:	4629      	mov	r1, r5
 8022062:	4638      	mov	r0, r7
 8022064:	f7ff ffc0 	bl	8021fe8 <sbrk_aligned>
 8022068:	1c43      	adds	r3, r0, #1
 802206a:	4604      	mov	r4, r0
 802206c:	d155      	bne.n	802211a <_malloc_r+0xf2>
 802206e:	f8d8 4000 	ldr.w	r4, [r8]
 8022072:	4626      	mov	r6, r4
 8022074:	2e00      	cmp	r6, #0
 8022076:	d145      	bne.n	8022104 <_malloc_r+0xdc>
 8022078:	2c00      	cmp	r4, #0
 802207a:	d048      	beq.n	802210e <_malloc_r+0xe6>
 802207c:	6823      	ldr	r3, [r4, #0]
 802207e:	4631      	mov	r1, r6
 8022080:	4638      	mov	r0, r7
 8022082:	eb04 0903 	add.w	r9, r4, r3
 8022086:	f000 fa83 	bl	8022590 <_sbrk_r>
 802208a:	4581      	cmp	r9, r0
 802208c:	d13f      	bne.n	802210e <_malloc_r+0xe6>
 802208e:	6821      	ldr	r1, [r4, #0]
 8022090:	4638      	mov	r0, r7
 8022092:	1a6d      	subs	r5, r5, r1
 8022094:	4629      	mov	r1, r5
 8022096:	f7ff ffa7 	bl	8021fe8 <sbrk_aligned>
 802209a:	3001      	adds	r0, #1
 802209c:	d037      	beq.n	802210e <_malloc_r+0xe6>
 802209e:	6823      	ldr	r3, [r4, #0]
 80220a0:	442b      	add	r3, r5
 80220a2:	6023      	str	r3, [r4, #0]
 80220a4:	f8d8 3000 	ldr.w	r3, [r8]
 80220a8:	2b00      	cmp	r3, #0
 80220aa:	d038      	beq.n	802211e <_malloc_r+0xf6>
 80220ac:	685a      	ldr	r2, [r3, #4]
 80220ae:	42a2      	cmp	r2, r4
 80220b0:	d12b      	bne.n	802210a <_malloc_r+0xe2>
 80220b2:	2200      	movs	r2, #0
 80220b4:	605a      	str	r2, [r3, #4]
 80220b6:	e00f      	b.n	80220d8 <_malloc_r+0xb0>
 80220b8:	6822      	ldr	r2, [r4, #0]
 80220ba:	1b52      	subs	r2, r2, r5
 80220bc:	d41f      	bmi.n	80220fe <_malloc_r+0xd6>
 80220be:	2a0b      	cmp	r2, #11
 80220c0:	d917      	bls.n	80220f2 <_malloc_r+0xca>
 80220c2:	1961      	adds	r1, r4, r5
 80220c4:	42a3      	cmp	r3, r4
 80220c6:	6025      	str	r5, [r4, #0]
 80220c8:	bf18      	it	ne
 80220ca:	6059      	strne	r1, [r3, #4]
 80220cc:	6863      	ldr	r3, [r4, #4]
 80220ce:	bf08      	it	eq
 80220d0:	f8c8 1000 	streq.w	r1, [r8]
 80220d4:	5162      	str	r2, [r4, r5]
 80220d6:	604b      	str	r3, [r1, #4]
 80220d8:	f104 060b 	add.w	r6, r4, #11
 80220dc:	4638      	mov	r0, r7
 80220de:	f000 f829 	bl	8022134 <__malloc_unlock>
 80220e2:	1d23      	adds	r3, r4, #4
 80220e4:	f026 0607 	bic.w	r6, r6, #7
 80220e8:	1af2      	subs	r2, r6, r3
 80220ea:	d0ae      	beq.n	802204a <_malloc_r+0x22>
 80220ec:	1b9b      	subs	r3, r3, r6
 80220ee:	50a3      	str	r3, [r4, r2]
 80220f0:	e7ab      	b.n	802204a <_malloc_r+0x22>
 80220f2:	42a3      	cmp	r3, r4
 80220f4:	6862      	ldr	r2, [r4, #4]
 80220f6:	d1dd      	bne.n	80220b4 <_malloc_r+0x8c>
 80220f8:	f8c8 2000 	str.w	r2, [r8]
 80220fc:	e7ec      	b.n	80220d8 <_malloc_r+0xb0>
 80220fe:	4623      	mov	r3, r4
 8022100:	6864      	ldr	r4, [r4, #4]
 8022102:	e7ac      	b.n	802205e <_malloc_r+0x36>
 8022104:	4634      	mov	r4, r6
 8022106:	6876      	ldr	r6, [r6, #4]
 8022108:	e7b4      	b.n	8022074 <_malloc_r+0x4c>
 802210a:	4613      	mov	r3, r2
 802210c:	e7cc      	b.n	80220a8 <_malloc_r+0x80>
 802210e:	230c      	movs	r3, #12
 8022110:	4638      	mov	r0, r7
 8022112:	603b      	str	r3, [r7, #0]
 8022114:	f000 f80e 	bl	8022134 <__malloc_unlock>
 8022118:	e797      	b.n	802204a <_malloc_r+0x22>
 802211a:	6025      	str	r5, [r4, #0]
 802211c:	e7dc      	b.n	80220d8 <_malloc_r+0xb0>
 802211e:	605b      	str	r3, [r3, #4]
 8022120:	deff      	udf	#255	; 0xff
 8022122:	bf00      	nop
 8022124:	2002f144 	.word	0x2002f144

08022128 <__malloc_lock>:
 8022128:	4801      	ldr	r0, [pc, #4]	; (8022130 <__malloc_lock+0x8>)
 802212a:	f000 ba78 	b.w	802261e <__retarget_lock_acquire_recursive>
 802212e:	bf00      	nop
 8022130:	2002f28c 	.word	0x2002f28c

08022134 <__malloc_unlock>:
 8022134:	4801      	ldr	r0, [pc, #4]	; (802213c <__malloc_unlock+0x8>)
 8022136:	f000 ba73 	b.w	8022620 <__retarget_lock_release_recursive>
 802213a:	bf00      	nop
 802213c:	2002f28c 	.word	0x2002f28c

08022140 <rand>:
 8022140:	4b16      	ldr	r3, [pc, #88]	; (802219c <rand+0x5c>)
 8022142:	b510      	push	{r4, lr}
 8022144:	681c      	ldr	r4, [r3, #0]
 8022146:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022148:	b9b3      	cbnz	r3, 8022178 <rand+0x38>
 802214a:	2018      	movs	r0, #24
 802214c:	f7ff ff44 	bl	8021fd8 <malloc>
 8022150:	4602      	mov	r2, r0
 8022152:	6320      	str	r0, [r4, #48]	; 0x30
 8022154:	b920      	cbnz	r0, 8022160 <rand+0x20>
 8022156:	4b12      	ldr	r3, [pc, #72]	; (80221a0 <rand+0x60>)
 8022158:	2152      	movs	r1, #82	; 0x52
 802215a:	4812      	ldr	r0, [pc, #72]	; (80221a4 <rand+0x64>)
 802215c:	f000 fa6e 	bl	802263c <__assert_func>
 8022160:	4911      	ldr	r1, [pc, #68]	; (80221a8 <rand+0x68>)
 8022162:	4b12      	ldr	r3, [pc, #72]	; (80221ac <rand+0x6c>)
 8022164:	e9c0 1300 	strd	r1, r3, [r0]
 8022168:	4b11      	ldr	r3, [pc, #68]	; (80221b0 <rand+0x70>)
 802216a:	2100      	movs	r1, #0
 802216c:	6083      	str	r3, [r0, #8]
 802216e:	230b      	movs	r3, #11
 8022170:	8183      	strh	r3, [r0, #12]
 8022172:	2001      	movs	r0, #1
 8022174:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8022178:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802217a:	480e      	ldr	r0, [pc, #56]	; (80221b4 <rand+0x74>)
 802217c:	690b      	ldr	r3, [r1, #16]
 802217e:	694c      	ldr	r4, [r1, #20]
 8022180:	4a0d      	ldr	r2, [pc, #52]	; (80221b8 <rand+0x78>)
 8022182:	4358      	muls	r0, r3
 8022184:	fb02 0004 	mla	r0, r2, r4, r0
 8022188:	fba3 3202 	umull	r3, r2, r3, r2
 802218c:	3301      	adds	r3, #1
 802218e:	eb40 0002 	adc.w	r0, r0, r2
 8022192:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8022196:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802219a:	bd10      	pop	{r4, pc}
 802219c:	200000e4 	.word	0x200000e4
 80221a0:	080270d6 	.word	0x080270d6
 80221a4:	080270ed 	.word	0x080270ed
 80221a8:	abcd330e 	.word	0xabcd330e
 80221ac:	e66d1234 	.word	0xe66d1234
 80221b0:	0005deec 	.word	0x0005deec
 80221b4:	5851f42d 	.word	0x5851f42d
 80221b8:	4c957f2d 	.word	0x4c957f2d

080221bc <std>:
 80221bc:	2300      	movs	r3, #0
 80221be:	b510      	push	{r4, lr}
 80221c0:	4604      	mov	r4, r0
 80221c2:	6083      	str	r3, [r0, #8]
 80221c4:	8181      	strh	r1, [r0, #12]
 80221c6:	4619      	mov	r1, r3
 80221c8:	6643      	str	r3, [r0, #100]	; 0x64
 80221ca:	81c2      	strh	r2, [r0, #14]
 80221cc:	2208      	movs	r2, #8
 80221ce:	6183      	str	r3, [r0, #24]
 80221d0:	e9c0 3300 	strd	r3, r3, [r0]
 80221d4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80221d8:	305c      	adds	r0, #92	; 0x5c
 80221da:	f000 f989 	bl	80224f0 <memset>
 80221de:	4b0d      	ldr	r3, [pc, #52]	; (8022214 <std+0x58>)
 80221e0:	6224      	str	r4, [r4, #32]
 80221e2:	6263      	str	r3, [r4, #36]	; 0x24
 80221e4:	4b0c      	ldr	r3, [pc, #48]	; (8022218 <std+0x5c>)
 80221e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80221e8:	4b0c      	ldr	r3, [pc, #48]	; (802221c <std+0x60>)
 80221ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80221ec:	4b0c      	ldr	r3, [pc, #48]	; (8022220 <std+0x64>)
 80221ee:	6323      	str	r3, [r4, #48]	; 0x30
 80221f0:	4b0c      	ldr	r3, [pc, #48]	; (8022224 <std+0x68>)
 80221f2:	429c      	cmp	r4, r3
 80221f4:	d006      	beq.n	8022204 <std+0x48>
 80221f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80221fa:	4294      	cmp	r4, r2
 80221fc:	d002      	beq.n	8022204 <std+0x48>
 80221fe:	33d0      	adds	r3, #208	; 0xd0
 8022200:	429c      	cmp	r4, r3
 8022202:	d105      	bne.n	8022210 <std+0x54>
 8022204:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8022208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802220c:	f000 ba06 	b.w	802261c <__retarget_lock_init_recursive>
 8022210:	bd10      	pop	{r4, pc}
 8022212:	bf00      	nop
 8022214:	08022365 	.word	0x08022365
 8022218:	08022387 	.word	0x08022387
 802221c:	080223bf 	.word	0x080223bf
 8022220:	080223e3 	.word	0x080223e3
 8022224:	2002f14c 	.word	0x2002f14c

08022228 <stdio_exit_handler>:
 8022228:	4a02      	ldr	r2, [pc, #8]	; (8022234 <stdio_exit_handler+0xc>)
 802222a:	4903      	ldr	r1, [pc, #12]	; (8022238 <stdio_exit_handler+0x10>)
 802222c:	4803      	ldr	r0, [pc, #12]	; (802223c <stdio_exit_handler+0x14>)
 802222e:	f000 b869 	b.w	8022304 <_fwalk_sglue>
 8022232:	bf00      	nop
 8022234:	2000008c 	.word	0x2000008c
 8022238:	08023075 	.word	0x08023075
 802223c:	20000098 	.word	0x20000098

08022240 <cleanup_stdio>:
 8022240:	6841      	ldr	r1, [r0, #4]
 8022242:	4b0c      	ldr	r3, [pc, #48]	; (8022274 <cleanup_stdio+0x34>)
 8022244:	4299      	cmp	r1, r3
 8022246:	b510      	push	{r4, lr}
 8022248:	4604      	mov	r4, r0
 802224a:	d001      	beq.n	8022250 <cleanup_stdio+0x10>
 802224c:	f000 ff12 	bl	8023074 <_fflush_r>
 8022250:	68a1      	ldr	r1, [r4, #8]
 8022252:	4b09      	ldr	r3, [pc, #36]	; (8022278 <cleanup_stdio+0x38>)
 8022254:	4299      	cmp	r1, r3
 8022256:	d002      	beq.n	802225e <cleanup_stdio+0x1e>
 8022258:	4620      	mov	r0, r4
 802225a:	f000 ff0b 	bl	8023074 <_fflush_r>
 802225e:	68e1      	ldr	r1, [r4, #12]
 8022260:	4b06      	ldr	r3, [pc, #24]	; (802227c <cleanup_stdio+0x3c>)
 8022262:	4299      	cmp	r1, r3
 8022264:	d004      	beq.n	8022270 <cleanup_stdio+0x30>
 8022266:	4620      	mov	r0, r4
 8022268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802226c:	f000 bf02 	b.w	8023074 <_fflush_r>
 8022270:	bd10      	pop	{r4, pc}
 8022272:	bf00      	nop
 8022274:	2002f14c 	.word	0x2002f14c
 8022278:	2002f1b4 	.word	0x2002f1b4
 802227c:	2002f21c 	.word	0x2002f21c

08022280 <global_stdio_init.part.0>:
 8022280:	b510      	push	{r4, lr}
 8022282:	4b0b      	ldr	r3, [pc, #44]	; (80222b0 <global_stdio_init.part.0+0x30>)
 8022284:	2104      	movs	r1, #4
 8022286:	4c0b      	ldr	r4, [pc, #44]	; (80222b4 <global_stdio_init.part.0+0x34>)
 8022288:	4a0b      	ldr	r2, [pc, #44]	; (80222b8 <global_stdio_init.part.0+0x38>)
 802228a:	4620      	mov	r0, r4
 802228c:	601a      	str	r2, [r3, #0]
 802228e:	2200      	movs	r2, #0
 8022290:	f7ff ff94 	bl	80221bc <std>
 8022294:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8022298:	2201      	movs	r2, #1
 802229a:	2109      	movs	r1, #9
 802229c:	f7ff ff8e 	bl	80221bc <std>
 80222a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80222a4:	2202      	movs	r2, #2
 80222a6:	2112      	movs	r1, #18
 80222a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80222ac:	f7ff bf86 	b.w	80221bc <std>
 80222b0:	2002f284 	.word	0x2002f284
 80222b4:	2002f14c 	.word	0x2002f14c
 80222b8:	08022229 	.word	0x08022229

080222bc <__sfp_lock_acquire>:
 80222bc:	4801      	ldr	r0, [pc, #4]	; (80222c4 <__sfp_lock_acquire+0x8>)
 80222be:	f000 b9ae 	b.w	802261e <__retarget_lock_acquire_recursive>
 80222c2:	bf00      	nop
 80222c4:	2002f28d 	.word	0x2002f28d

080222c8 <__sfp_lock_release>:
 80222c8:	4801      	ldr	r0, [pc, #4]	; (80222d0 <__sfp_lock_release+0x8>)
 80222ca:	f000 b9a9 	b.w	8022620 <__retarget_lock_release_recursive>
 80222ce:	bf00      	nop
 80222d0:	2002f28d 	.word	0x2002f28d

080222d4 <__sinit>:
 80222d4:	b510      	push	{r4, lr}
 80222d6:	4604      	mov	r4, r0
 80222d8:	f7ff fff0 	bl	80222bc <__sfp_lock_acquire>
 80222dc:	6a23      	ldr	r3, [r4, #32]
 80222de:	b11b      	cbz	r3, 80222e8 <__sinit+0x14>
 80222e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80222e4:	f7ff bff0 	b.w	80222c8 <__sfp_lock_release>
 80222e8:	4b04      	ldr	r3, [pc, #16]	; (80222fc <__sinit+0x28>)
 80222ea:	6223      	str	r3, [r4, #32]
 80222ec:	4b04      	ldr	r3, [pc, #16]	; (8022300 <__sinit+0x2c>)
 80222ee:	681b      	ldr	r3, [r3, #0]
 80222f0:	2b00      	cmp	r3, #0
 80222f2:	d1f5      	bne.n	80222e0 <__sinit+0xc>
 80222f4:	f7ff ffc4 	bl	8022280 <global_stdio_init.part.0>
 80222f8:	e7f2      	b.n	80222e0 <__sinit+0xc>
 80222fa:	bf00      	nop
 80222fc:	08022241 	.word	0x08022241
 8022300:	2002f284 	.word	0x2002f284

08022304 <_fwalk_sglue>:
 8022304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022308:	4607      	mov	r7, r0
 802230a:	4688      	mov	r8, r1
 802230c:	4614      	mov	r4, r2
 802230e:	2600      	movs	r6, #0
 8022310:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022314:	f1b9 0901 	subs.w	r9, r9, #1
 8022318:	d505      	bpl.n	8022326 <_fwalk_sglue+0x22>
 802231a:	6824      	ldr	r4, [r4, #0]
 802231c:	2c00      	cmp	r4, #0
 802231e:	d1f7      	bne.n	8022310 <_fwalk_sglue+0xc>
 8022320:	4630      	mov	r0, r6
 8022322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022326:	89ab      	ldrh	r3, [r5, #12]
 8022328:	2b01      	cmp	r3, #1
 802232a:	d907      	bls.n	802233c <_fwalk_sglue+0x38>
 802232c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022330:	3301      	adds	r3, #1
 8022332:	d003      	beq.n	802233c <_fwalk_sglue+0x38>
 8022334:	4629      	mov	r1, r5
 8022336:	4638      	mov	r0, r7
 8022338:	47c0      	blx	r8
 802233a:	4306      	orrs	r6, r0
 802233c:	3568      	adds	r5, #104	; 0x68
 802233e:	e7e9      	b.n	8022314 <_fwalk_sglue+0x10>

08022340 <iprintf>:
 8022340:	b40f      	push	{r0, r1, r2, r3}
 8022342:	b507      	push	{r0, r1, r2, lr}
 8022344:	4906      	ldr	r1, [pc, #24]	; (8022360 <iprintf+0x20>)
 8022346:	ab04      	add	r3, sp, #16
 8022348:	6808      	ldr	r0, [r1, #0]
 802234a:	f853 2b04 	ldr.w	r2, [r3], #4
 802234e:	6881      	ldr	r1, [r0, #8]
 8022350:	9301      	str	r3, [sp, #4]
 8022352:	f000 fb5f 	bl	8022a14 <_vfiprintf_r>
 8022356:	b003      	add	sp, #12
 8022358:	f85d eb04 	ldr.w	lr, [sp], #4
 802235c:	b004      	add	sp, #16
 802235e:	4770      	bx	lr
 8022360:	200000e4 	.word	0x200000e4

08022364 <__sread>:
 8022364:	b510      	push	{r4, lr}
 8022366:	460c      	mov	r4, r1
 8022368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802236c:	f000 f8fe 	bl	802256c <_read_r>
 8022370:	2800      	cmp	r0, #0
 8022372:	bfab      	itete	ge
 8022374:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022376:	89a3      	ldrhlt	r3, [r4, #12]
 8022378:	181b      	addge	r3, r3, r0
 802237a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802237e:	bfac      	ite	ge
 8022380:	6563      	strge	r3, [r4, #84]	; 0x54
 8022382:	81a3      	strhlt	r3, [r4, #12]
 8022384:	bd10      	pop	{r4, pc}

08022386 <__swrite>:
 8022386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802238a:	461f      	mov	r7, r3
 802238c:	898b      	ldrh	r3, [r1, #12]
 802238e:	4605      	mov	r5, r0
 8022390:	460c      	mov	r4, r1
 8022392:	05db      	lsls	r3, r3, #23
 8022394:	4616      	mov	r6, r2
 8022396:	d505      	bpl.n	80223a4 <__swrite+0x1e>
 8022398:	2302      	movs	r3, #2
 802239a:	2200      	movs	r2, #0
 802239c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80223a0:	f000 f8d2 	bl	8022548 <_lseek_r>
 80223a4:	89a3      	ldrh	r3, [r4, #12]
 80223a6:	4632      	mov	r2, r6
 80223a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80223ac:	4628      	mov	r0, r5
 80223ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80223b2:	81a3      	strh	r3, [r4, #12]
 80223b4:	463b      	mov	r3, r7
 80223b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80223ba:	f000 b8f9 	b.w	80225b0 <_write_r>

080223be <__sseek>:
 80223be:	b510      	push	{r4, lr}
 80223c0:	460c      	mov	r4, r1
 80223c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80223c6:	f000 f8bf 	bl	8022548 <_lseek_r>
 80223ca:	1c43      	adds	r3, r0, #1
 80223cc:	89a3      	ldrh	r3, [r4, #12]
 80223ce:	bf15      	itete	ne
 80223d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80223d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80223d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80223da:	81a3      	strheq	r3, [r4, #12]
 80223dc:	bf18      	it	ne
 80223de:	81a3      	strhne	r3, [r4, #12]
 80223e0:	bd10      	pop	{r4, pc}

080223e2 <__sclose>:
 80223e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80223e6:	f000 b89f 	b.w	8022528 <_close_r>

080223ea <_vsniprintf_r>:
 80223ea:	b530      	push	{r4, r5, lr}
 80223ec:	4614      	mov	r4, r2
 80223ee:	b09b      	sub	sp, #108	; 0x6c
 80223f0:	4605      	mov	r5, r0
 80223f2:	461a      	mov	r2, r3
 80223f4:	2c00      	cmp	r4, #0
 80223f6:	da05      	bge.n	8022404 <_vsniprintf_r+0x1a>
 80223f8:	238b      	movs	r3, #139	; 0x8b
 80223fa:	6003      	str	r3, [r0, #0]
 80223fc:	f04f 30ff 	mov.w	r0, #4294967295
 8022400:	b01b      	add	sp, #108	; 0x6c
 8022402:	bd30      	pop	{r4, r5, pc}
 8022404:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022408:	9100      	str	r1, [sp, #0]
 802240a:	9104      	str	r1, [sp, #16]
 802240c:	4669      	mov	r1, sp
 802240e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8022412:	bf14      	ite	ne
 8022414:	f104 33ff 	addne.w	r3, r4, #4294967295
 8022418:	4623      	moveq	r3, r4
 802241a:	9302      	str	r3, [sp, #8]
 802241c:	9305      	str	r3, [sp, #20]
 802241e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022422:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022426:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022428:	f000 f9cc 	bl	80227c4 <_svfiprintf_r>
 802242c:	1c43      	adds	r3, r0, #1
 802242e:	bfbc      	itt	lt
 8022430:	238b      	movlt	r3, #139	; 0x8b
 8022432:	602b      	strlt	r3, [r5, #0]
 8022434:	2c00      	cmp	r4, #0
 8022436:	d0e3      	beq.n	8022400 <_vsniprintf_r+0x16>
 8022438:	9b00      	ldr	r3, [sp, #0]
 802243a:	2200      	movs	r2, #0
 802243c:	701a      	strb	r2, [r3, #0]
 802243e:	e7df      	b.n	8022400 <_vsniprintf_r+0x16>

08022440 <vsniprintf>:
 8022440:	b507      	push	{r0, r1, r2, lr}
 8022442:	9300      	str	r3, [sp, #0]
 8022444:	4613      	mov	r3, r2
 8022446:	460a      	mov	r2, r1
 8022448:	4601      	mov	r1, r0
 802244a:	4803      	ldr	r0, [pc, #12]	; (8022458 <vsniprintf+0x18>)
 802244c:	6800      	ldr	r0, [r0, #0]
 802244e:	f7ff ffcc 	bl	80223ea <_vsniprintf_r>
 8022452:	b003      	add	sp, #12
 8022454:	f85d fb04 	ldr.w	pc, [sp], #4
 8022458:	200000e4 	.word	0x200000e4

0802245c <_vsiprintf_r>:
 802245c:	b500      	push	{lr}
 802245e:	b09b      	sub	sp, #108	; 0x6c
 8022460:	9100      	str	r1, [sp, #0]
 8022462:	9104      	str	r1, [sp, #16]
 8022464:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022468:	9105      	str	r1, [sp, #20]
 802246a:	9102      	str	r1, [sp, #8]
 802246c:	4905      	ldr	r1, [pc, #20]	; (8022484 <_vsiprintf_r+0x28>)
 802246e:	9103      	str	r1, [sp, #12]
 8022470:	4669      	mov	r1, sp
 8022472:	f000 f9a7 	bl	80227c4 <_svfiprintf_r>
 8022476:	9b00      	ldr	r3, [sp, #0]
 8022478:	2200      	movs	r2, #0
 802247a:	701a      	strb	r2, [r3, #0]
 802247c:	b01b      	add	sp, #108	; 0x6c
 802247e:	f85d fb04 	ldr.w	pc, [sp], #4
 8022482:	bf00      	nop
 8022484:	ffff0208 	.word	0xffff0208

08022488 <vsiprintf>:
 8022488:	4613      	mov	r3, r2
 802248a:	460a      	mov	r2, r1
 802248c:	4601      	mov	r1, r0
 802248e:	4802      	ldr	r0, [pc, #8]	; (8022498 <vsiprintf+0x10>)
 8022490:	6800      	ldr	r0, [r0, #0]
 8022492:	f7ff bfe3 	b.w	802245c <_vsiprintf_r>
 8022496:	bf00      	nop
 8022498:	200000e4 	.word	0x200000e4

0802249c <memcmp>:
 802249c:	3901      	subs	r1, #1
 802249e:	4402      	add	r2, r0
 80224a0:	b510      	push	{r4, lr}
 80224a2:	4290      	cmp	r0, r2
 80224a4:	d101      	bne.n	80224aa <memcmp+0xe>
 80224a6:	2000      	movs	r0, #0
 80224a8:	e005      	b.n	80224b6 <memcmp+0x1a>
 80224aa:	7803      	ldrb	r3, [r0, #0]
 80224ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80224b0:	42a3      	cmp	r3, r4
 80224b2:	d001      	beq.n	80224b8 <memcmp+0x1c>
 80224b4:	1b18      	subs	r0, r3, r4
 80224b6:	bd10      	pop	{r4, pc}
 80224b8:	3001      	adds	r0, #1
 80224ba:	e7f2      	b.n	80224a2 <memcmp+0x6>

080224bc <memmove>:
 80224bc:	4288      	cmp	r0, r1
 80224be:	b510      	push	{r4, lr}
 80224c0:	eb01 0402 	add.w	r4, r1, r2
 80224c4:	d902      	bls.n	80224cc <memmove+0x10>
 80224c6:	4284      	cmp	r4, r0
 80224c8:	4623      	mov	r3, r4
 80224ca:	d807      	bhi.n	80224dc <memmove+0x20>
 80224cc:	1e43      	subs	r3, r0, #1
 80224ce:	42a1      	cmp	r1, r4
 80224d0:	d008      	beq.n	80224e4 <memmove+0x28>
 80224d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80224d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80224da:	e7f8      	b.n	80224ce <memmove+0x12>
 80224dc:	4402      	add	r2, r0
 80224de:	4601      	mov	r1, r0
 80224e0:	428a      	cmp	r2, r1
 80224e2:	d100      	bne.n	80224e6 <memmove+0x2a>
 80224e4:	bd10      	pop	{r4, pc}
 80224e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80224ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80224ee:	e7f7      	b.n	80224e0 <memmove+0x24>

080224f0 <memset>:
 80224f0:	4402      	add	r2, r0
 80224f2:	4603      	mov	r3, r0
 80224f4:	4293      	cmp	r3, r2
 80224f6:	d100      	bne.n	80224fa <memset+0xa>
 80224f8:	4770      	bx	lr
 80224fa:	f803 1b01 	strb.w	r1, [r3], #1
 80224fe:	e7f9      	b.n	80224f4 <memset+0x4>

08022500 <strncpy>:
 8022500:	3901      	subs	r1, #1
 8022502:	4603      	mov	r3, r0
 8022504:	b510      	push	{r4, lr}
 8022506:	b132      	cbz	r2, 8022516 <strncpy+0x16>
 8022508:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802250c:	3a01      	subs	r2, #1
 802250e:	f803 4b01 	strb.w	r4, [r3], #1
 8022512:	2c00      	cmp	r4, #0
 8022514:	d1f7      	bne.n	8022506 <strncpy+0x6>
 8022516:	441a      	add	r2, r3
 8022518:	2100      	movs	r1, #0
 802251a:	4293      	cmp	r3, r2
 802251c:	d100      	bne.n	8022520 <strncpy+0x20>
 802251e:	bd10      	pop	{r4, pc}
 8022520:	f803 1b01 	strb.w	r1, [r3], #1
 8022524:	e7f9      	b.n	802251a <strncpy+0x1a>
	...

08022528 <_close_r>:
 8022528:	b538      	push	{r3, r4, r5, lr}
 802252a:	2300      	movs	r3, #0
 802252c:	4d05      	ldr	r5, [pc, #20]	; (8022544 <_close_r+0x1c>)
 802252e:	4604      	mov	r4, r0
 8022530:	4608      	mov	r0, r1
 8022532:	602b      	str	r3, [r5, #0]
 8022534:	f7de fde5 	bl	8001102 <_close>
 8022538:	1c43      	adds	r3, r0, #1
 802253a:	d102      	bne.n	8022542 <_close_r+0x1a>
 802253c:	682b      	ldr	r3, [r5, #0]
 802253e:	b103      	cbz	r3, 8022542 <_close_r+0x1a>
 8022540:	6023      	str	r3, [r4, #0]
 8022542:	bd38      	pop	{r3, r4, r5, pc}
 8022544:	2002f288 	.word	0x2002f288

08022548 <_lseek_r>:
 8022548:	b538      	push	{r3, r4, r5, lr}
 802254a:	4604      	mov	r4, r0
 802254c:	4d06      	ldr	r5, [pc, #24]	; (8022568 <_lseek_r+0x20>)
 802254e:	4608      	mov	r0, r1
 8022550:	4611      	mov	r1, r2
 8022552:	2200      	movs	r2, #0
 8022554:	602a      	str	r2, [r5, #0]
 8022556:	461a      	mov	r2, r3
 8022558:	f7de fdfa 	bl	8001150 <_lseek>
 802255c:	1c43      	adds	r3, r0, #1
 802255e:	d102      	bne.n	8022566 <_lseek_r+0x1e>
 8022560:	682b      	ldr	r3, [r5, #0]
 8022562:	b103      	cbz	r3, 8022566 <_lseek_r+0x1e>
 8022564:	6023      	str	r3, [r4, #0]
 8022566:	bd38      	pop	{r3, r4, r5, pc}
 8022568:	2002f288 	.word	0x2002f288

0802256c <_read_r>:
 802256c:	b538      	push	{r3, r4, r5, lr}
 802256e:	4604      	mov	r4, r0
 8022570:	4d06      	ldr	r5, [pc, #24]	; (802258c <_read_r+0x20>)
 8022572:	4608      	mov	r0, r1
 8022574:	4611      	mov	r1, r2
 8022576:	2200      	movs	r2, #0
 8022578:	602a      	str	r2, [r5, #0]
 802257a:	461a      	mov	r2, r3
 802257c:	f7de fd88 	bl	8001090 <_read>
 8022580:	1c43      	adds	r3, r0, #1
 8022582:	d102      	bne.n	802258a <_read_r+0x1e>
 8022584:	682b      	ldr	r3, [r5, #0]
 8022586:	b103      	cbz	r3, 802258a <_read_r+0x1e>
 8022588:	6023      	str	r3, [r4, #0]
 802258a:	bd38      	pop	{r3, r4, r5, pc}
 802258c:	2002f288 	.word	0x2002f288

08022590 <_sbrk_r>:
 8022590:	b538      	push	{r3, r4, r5, lr}
 8022592:	2300      	movs	r3, #0
 8022594:	4d05      	ldr	r5, [pc, #20]	; (80225ac <_sbrk_r+0x1c>)
 8022596:	4604      	mov	r4, r0
 8022598:	4608      	mov	r0, r1
 802259a:	602b      	str	r3, [r5, #0]
 802259c:	f7de fde6 	bl	800116c <_sbrk>
 80225a0:	1c43      	adds	r3, r0, #1
 80225a2:	d102      	bne.n	80225aa <_sbrk_r+0x1a>
 80225a4:	682b      	ldr	r3, [r5, #0]
 80225a6:	b103      	cbz	r3, 80225aa <_sbrk_r+0x1a>
 80225a8:	6023      	str	r3, [r4, #0]
 80225aa:	bd38      	pop	{r3, r4, r5, pc}
 80225ac:	2002f288 	.word	0x2002f288

080225b0 <_write_r>:
 80225b0:	b538      	push	{r3, r4, r5, lr}
 80225b2:	4604      	mov	r4, r0
 80225b4:	4d06      	ldr	r5, [pc, #24]	; (80225d0 <_write_r+0x20>)
 80225b6:	4608      	mov	r0, r1
 80225b8:	4611      	mov	r1, r2
 80225ba:	2200      	movs	r2, #0
 80225bc:	602a      	str	r2, [r5, #0]
 80225be:	461a      	mov	r2, r3
 80225c0:	f7de fd83 	bl	80010ca <_write>
 80225c4:	1c43      	adds	r3, r0, #1
 80225c6:	d102      	bne.n	80225ce <_write_r+0x1e>
 80225c8:	682b      	ldr	r3, [r5, #0]
 80225ca:	b103      	cbz	r3, 80225ce <_write_r+0x1e>
 80225cc:	6023      	str	r3, [r4, #0]
 80225ce:	bd38      	pop	{r3, r4, r5, pc}
 80225d0:	2002f288 	.word	0x2002f288

080225d4 <__libc_init_array>:
 80225d4:	b570      	push	{r4, r5, r6, lr}
 80225d6:	4d0d      	ldr	r5, [pc, #52]	; (802260c <__libc_init_array+0x38>)
 80225d8:	2600      	movs	r6, #0
 80225da:	4c0d      	ldr	r4, [pc, #52]	; (8022610 <__libc_init_array+0x3c>)
 80225dc:	1b64      	subs	r4, r4, r5
 80225de:	10a4      	asrs	r4, r4, #2
 80225e0:	42a6      	cmp	r6, r4
 80225e2:	d109      	bne.n	80225f8 <__libc_init_array+0x24>
 80225e4:	4d0b      	ldr	r5, [pc, #44]	; (8022614 <__libc_init_array+0x40>)
 80225e6:	2600      	movs	r6, #0
 80225e8:	4c0b      	ldr	r4, [pc, #44]	; (8022618 <__libc_init_array+0x44>)
 80225ea:	f000 ff27 	bl	802343c <_init>
 80225ee:	1b64      	subs	r4, r4, r5
 80225f0:	10a4      	asrs	r4, r4, #2
 80225f2:	42a6      	cmp	r6, r4
 80225f4:	d105      	bne.n	8022602 <__libc_init_array+0x2e>
 80225f6:	bd70      	pop	{r4, r5, r6, pc}
 80225f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80225fc:	3601      	adds	r6, #1
 80225fe:	4798      	blx	r3
 8022600:	e7ee      	b.n	80225e0 <__libc_init_array+0xc>
 8022602:	f855 3b04 	ldr.w	r3, [r5], #4
 8022606:	3601      	adds	r6, #1
 8022608:	4798      	blx	r3
 802260a:	e7f2      	b.n	80225f2 <__libc_init_array+0x1e>
 802260c:	080271bc 	.word	0x080271bc
 8022610:	080271bc 	.word	0x080271bc
 8022614:	080271bc 	.word	0x080271bc
 8022618:	080271c0 	.word	0x080271c0

0802261c <__retarget_lock_init_recursive>:
 802261c:	4770      	bx	lr

0802261e <__retarget_lock_acquire_recursive>:
 802261e:	4770      	bx	lr

08022620 <__retarget_lock_release_recursive>:
 8022620:	4770      	bx	lr

08022622 <memcpy>:
 8022622:	440a      	add	r2, r1
 8022624:	1e43      	subs	r3, r0, #1
 8022626:	4291      	cmp	r1, r2
 8022628:	d100      	bne.n	802262c <memcpy+0xa>
 802262a:	4770      	bx	lr
 802262c:	b510      	push	{r4, lr}
 802262e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022632:	4291      	cmp	r1, r2
 8022634:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022638:	d1f9      	bne.n	802262e <memcpy+0xc>
 802263a:	bd10      	pop	{r4, pc}

0802263c <__assert_func>:
 802263c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802263e:	4614      	mov	r4, r2
 8022640:	461a      	mov	r2, r3
 8022642:	4b09      	ldr	r3, [pc, #36]	; (8022668 <__assert_func+0x2c>)
 8022644:	4605      	mov	r5, r0
 8022646:	681b      	ldr	r3, [r3, #0]
 8022648:	68d8      	ldr	r0, [r3, #12]
 802264a:	b14c      	cbz	r4, 8022660 <__assert_func+0x24>
 802264c:	4b07      	ldr	r3, [pc, #28]	; (802266c <__assert_func+0x30>)
 802264e:	9100      	str	r1, [sp, #0]
 8022650:	4907      	ldr	r1, [pc, #28]	; (8022670 <__assert_func+0x34>)
 8022652:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022656:	462b      	mov	r3, r5
 8022658:	f000 fd34 	bl	80230c4 <fiprintf>
 802265c:	f000 fde8 	bl	8023230 <abort>
 8022660:	4b04      	ldr	r3, [pc, #16]	; (8022674 <__assert_func+0x38>)
 8022662:	461c      	mov	r4, r3
 8022664:	e7f3      	b.n	802264e <__assert_func+0x12>
 8022666:	bf00      	nop
 8022668:	200000e4 	.word	0x200000e4
 802266c:	08027145 	.word	0x08027145
 8022670:	08027152 	.word	0x08027152
 8022674:	08027180 	.word	0x08027180

08022678 <_free_r>:
 8022678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802267a:	2900      	cmp	r1, #0
 802267c:	d043      	beq.n	8022706 <_free_r+0x8e>
 802267e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022682:	1f0c      	subs	r4, r1, #4
 8022684:	9001      	str	r0, [sp, #4]
 8022686:	2b00      	cmp	r3, #0
 8022688:	bfb8      	it	lt
 802268a:	18e4      	addlt	r4, r4, r3
 802268c:	f7ff fd4c 	bl	8022128 <__malloc_lock>
 8022690:	4a1e      	ldr	r2, [pc, #120]	; (802270c <_free_r+0x94>)
 8022692:	9801      	ldr	r0, [sp, #4]
 8022694:	6813      	ldr	r3, [r2, #0]
 8022696:	b933      	cbnz	r3, 80226a6 <_free_r+0x2e>
 8022698:	6063      	str	r3, [r4, #4]
 802269a:	6014      	str	r4, [r2, #0]
 802269c:	b003      	add	sp, #12
 802269e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80226a2:	f7ff bd47 	b.w	8022134 <__malloc_unlock>
 80226a6:	42a3      	cmp	r3, r4
 80226a8:	d908      	bls.n	80226bc <_free_r+0x44>
 80226aa:	6825      	ldr	r5, [r4, #0]
 80226ac:	1961      	adds	r1, r4, r5
 80226ae:	428b      	cmp	r3, r1
 80226b0:	bf01      	itttt	eq
 80226b2:	6819      	ldreq	r1, [r3, #0]
 80226b4:	685b      	ldreq	r3, [r3, #4]
 80226b6:	1949      	addeq	r1, r1, r5
 80226b8:	6021      	streq	r1, [r4, #0]
 80226ba:	e7ed      	b.n	8022698 <_free_r+0x20>
 80226bc:	461a      	mov	r2, r3
 80226be:	685b      	ldr	r3, [r3, #4]
 80226c0:	b10b      	cbz	r3, 80226c6 <_free_r+0x4e>
 80226c2:	42a3      	cmp	r3, r4
 80226c4:	d9fa      	bls.n	80226bc <_free_r+0x44>
 80226c6:	6811      	ldr	r1, [r2, #0]
 80226c8:	1855      	adds	r5, r2, r1
 80226ca:	42a5      	cmp	r5, r4
 80226cc:	d10b      	bne.n	80226e6 <_free_r+0x6e>
 80226ce:	6824      	ldr	r4, [r4, #0]
 80226d0:	4421      	add	r1, r4
 80226d2:	1854      	adds	r4, r2, r1
 80226d4:	6011      	str	r1, [r2, #0]
 80226d6:	42a3      	cmp	r3, r4
 80226d8:	d1e0      	bne.n	802269c <_free_r+0x24>
 80226da:	681c      	ldr	r4, [r3, #0]
 80226dc:	685b      	ldr	r3, [r3, #4]
 80226de:	440c      	add	r4, r1
 80226e0:	6053      	str	r3, [r2, #4]
 80226e2:	6014      	str	r4, [r2, #0]
 80226e4:	e7da      	b.n	802269c <_free_r+0x24>
 80226e6:	d902      	bls.n	80226ee <_free_r+0x76>
 80226e8:	230c      	movs	r3, #12
 80226ea:	6003      	str	r3, [r0, #0]
 80226ec:	e7d6      	b.n	802269c <_free_r+0x24>
 80226ee:	6825      	ldr	r5, [r4, #0]
 80226f0:	1961      	adds	r1, r4, r5
 80226f2:	428b      	cmp	r3, r1
 80226f4:	bf02      	ittt	eq
 80226f6:	6819      	ldreq	r1, [r3, #0]
 80226f8:	685b      	ldreq	r3, [r3, #4]
 80226fa:	1949      	addeq	r1, r1, r5
 80226fc:	6063      	str	r3, [r4, #4]
 80226fe:	bf08      	it	eq
 8022700:	6021      	streq	r1, [r4, #0]
 8022702:	6054      	str	r4, [r2, #4]
 8022704:	e7ca      	b.n	802269c <_free_r+0x24>
 8022706:	b003      	add	sp, #12
 8022708:	bd30      	pop	{r4, r5, pc}
 802270a:	bf00      	nop
 802270c:	2002f144 	.word	0x2002f144

08022710 <__ssputs_r>:
 8022710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022714:	461f      	mov	r7, r3
 8022716:	688e      	ldr	r6, [r1, #8]
 8022718:	4682      	mov	sl, r0
 802271a:	460c      	mov	r4, r1
 802271c:	42be      	cmp	r6, r7
 802271e:	4690      	mov	r8, r2
 8022720:	680b      	ldr	r3, [r1, #0]
 8022722:	d82c      	bhi.n	802277e <__ssputs_r+0x6e>
 8022724:	898a      	ldrh	r2, [r1, #12]
 8022726:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802272a:	d026      	beq.n	802277a <__ssputs_r+0x6a>
 802272c:	6965      	ldr	r5, [r4, #20]
 802272e:	6909      	ldr	r1, [r1, #16]
 8022730:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022734:	eba3 0901 	sub.w	r9, r3, r1
 8022738:	1c7b      	adds	r3, r7, #1
 802273a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802273e:	444b      	add	r3, r9
 8022740:	106d      	asrs	r5, r5, #1
 8022742:	429d      	cmp	r5, r3
 8022744:	bf38      	it	cc
 8022746:	461d      	movcc	r5, r3
 8022748:	0553      	lsls	r3, r2, #21
 802274a:	d527      	bpl.n	802279c <__ssputs_r+0x8c>
 802274c:	4629      	mov	r1, r5
 802274e:	f7ff fc6b 	bl	8022028 <_malloc_r>
 8022752:	4606      	mov	r6, r0
 8022754:	b360      	cbz	r0, 80227b0 <__ssputs_r+0xa0>
 8022756:	464a      	mov	r2, r9
 8022758:	6921      	ldr	r1, [r4, #16]
 802275a:	f7ff ff62 	bl	8022622 <memcpy>
 802275e:	89a3      	ldrh	r3, [r4, #12]
 8022760:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022768:	81a3      	strh	r3, [r4, #12]
 802276a:	6126      	str	r6, [r4, #16]
 802276c:	444e      	add	r6, r9
 802276e:	6165      	str	r5, [r4, #20]
 8022770:	eba5 0509 	sub.w	r5, r5, r9
 8022774:	6026      	str	r6, [r4, #0]
 8022776:	463e      	mov	r6, r7
 8022778:	60a5      	str	r5, [r4, #8]
 802277a:	42be      	cmp	r6, r7
 802277c:	d900      	bls.n	8022780 <__ssputs_r+0x70>
 802277e:	463e      	mov	r6, r7
 8022780:	4632      	mov	r2, r6
 8022782:	4641      	mov	r1, r8
 8022784:	6820      	ldr	r0, [r4, #0]
 8022786:	f7ff fe99 	bl	80224bc <memmove>
 802278a:	68a3      	ldr	r3, [r4, #8]
 802278c:	2000      	movs	r0, #0
 802278e:	1b9b      	subs	r3, r3, r6
 8022790:	60a3      	str	r3, [r4, #8]
 8022792:	6823      	ldr	r3, [r4, #0]
 8022794:	4433      	add	r3, r6
 8022796:	6023      	str	r3, [r4, #0]
 8022798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802279c:	462a      	mov	r2, r5
 802279e:	f000 fd4e 	bl	802323e <_realloc_r>
 80227a2:	4606      	mov	r6, r0
 80227a4:	2800      	cmp	r0, #0
 80227a6:	d1e0      	bne.n	802276a <__ssputs_r+0x5a>
 80227a8:	6921      	ldr	r1, [r4, #16]
 80227aa:	4650      	mov	r0, sl
 80227ac:	f7ff ff64 	bl	8022678 <_free_r>
 80227b0:	230c      	movs	r3, #12
 80227b2:	f04f 30ff 	mov.w	r0, #4294967295
 80227b6:	f8ca 3000 	str.w	r3, [sl]
 80227ba:	89a3      	ldrh	r3, [r4, #12]
 80227bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80227c0:	81a3      	strh	r3, [r4, #12]
 80227c2:	e7e9      	b.n	8022798 <__ssputs_r+0x88>

080227c4 <_svfiprintf_r>:
 80227c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227c8:	4698      	mov	r8, r3
 80227ca:	898b      	ldrh	r3, [r1, #12]
 80227cc:	b09d      	sub	sp, #116	; 0x74
 80227ce:	4607      	mov	r7, r0
 80227d0:	061b      	lsls	r3, r3, #24
 80227d2:	460d      	mov	r5, r1
 80227d4:	4614      	mov	r4, r2
 80227d6:	d50e      	bpl.n	80227f6 <_svfiprintf_r+0x32>
 80227d8:	690b      	ldr	r3, [r1, #16]
 80227da:	b963      	cbnz	r3, 80227f6 <_svfiprintf_r+0x32>
 80227dc:	2140      	movs	r1, #64	; 0x40
 80227de:	f7ff fc23 	bl	8022028 <_malloc_r>
 80227e2:	6028      	str	r0, [r5, #0]
 80227e4:	6128      	str	r0, [r5, #16]
 80227e6:	b920      	cbnz	r0, 80227f2 <_svfiprintf_r+0x2e>
 80227e8:	230c      	movs	r3, #12
 80227ea:	603b      	str	r3, [r7, #0]
 80227ec:	f04f 30ff 	mov.w	r0, #4294967295
 80227f0:	e0d0      	b.n	8022994 <_svfiprintf_r+0x1d0>
 80227f2:	2340      	movs	r3, #64	; 0x40
 80227f4:	616b      	str	r3, [r5, #20]
 80227f6:	2300      	movs	r3, #0
 80227f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80227fc:	f04f 0901 	mov.w	r9, #1
 8022800:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80229ac <_svfiprintf_r+0x1e8>
 8022804:	9309      	str	r3, [sp, #36]	; 0x24
 8022806:	2320      	movs	r3, #32
 8022808:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802280c:	2330      	movs	r3, #48	; 0x30
 802280e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022812:	4623      	mov	r3, r4
 8022814:	469a      	mov	sl, r3
 8022816:	f813 2b01 	ldrb.w	r2, [r3], #1
 802281a:	b10a      	cbz	r2, 8022820 <_svfiprintf_r+0x5c>
 802281c:	2a25      	cmp	r2, #37	; 0x25
 802281e:	d1f9      	bne.n	8022814 <_svfiprintf_r+0x50>
 8022820:	ebba 0b04 	subs.w	fp, sl, r4
 8022824:	d00b      	beq.n	802283e <_svfiprintf_r+0x7a>
 8022826:	465b      	mov	r3, fp
 8022828:	4622      	mov	r2, r4
 802282a:	4629      	mov	r1, r5
 802282c:	4638      	mov	r0, r7
 802282e:	f7ff ff6f 	bl	8022710 <__ssputs_r>
 8022832:	3001      	adds	r0, #1
 8022834:	f000 80a9 	beq.w	802298a <_svfiprintf_r+0x1c6>
 8022838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802283a:	445a      	add	r2, fp
 802283c:	9209      	str	r2, [sp, #36]	; 0x24
 802283e:	f89a 3000 	ldrb.w	r3, [sl]
 8022842:	2b00      	cmp	r3, #0
 8022844:	f000 80a1 	beq.w	802298a <_svfiprintf_r+0x1c6>
 8022848:	2300      	movs	r3, #0
 802284a:	f04f 32ff 	mov.w	r2, #4294967295
 802284e:	f10a 0a01 	add.w	sl, sl, #1
 8022852:	9304      	str	r3, [sp, #16]
 8022854:	9307      	str	r3, [sp, #28]
 8022856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802285a:	931a      	str	r3, [sp, #104]	; 0x68
 802285c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022860:	4654      	mov	r4, sl
 8022862:	2205      	movs	r2, #5
 8022864:	4851      	ldr	r0, [pc, #324]	; (80229ac <_svfiprintf_r+0x1e8>)
 8022866:	f814 1b01 	ldrb.w	r1, [r4], #1
 802286a:	f000 fcd3 	bl	8023214 <memchr>
 802286e:	9a04      	ldr	r2, [sp, #16]
 8022870:	b9d8      	cbnz	r0, 80228aa <_svfiprintf_r+0xe6>
 8022872:	06d0      	lsls	r0, r2, #27
 8022874:	bf44      	itt	mi
 8022876:	2320      	movmi	r3, #32
 8022878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802287c:	0711      	lsls	r1, r2, #28
 802287e:	bf44      	itt	mi
 8022880:	232b      	movmi	r3, #43	; 0x2b
 8022882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022886:	f89a 3000 	ldrb.w	r3, [sl]
 802288a:	2b2a      	cmp	r3, #42	; 0x2a
 802288c:	d015      	beq.n	80228ba <_svfiprintf_r+0xf6>
 802288e:	9a07      	ldr	r2, [sp, #28]
 8022890:	4654      	mov	r4, sl
 8022892:	2000      	movs	r0, #0
 8022894:	f04f 0c0a 	mov.w	ip, #10
 8022898:	4621      	mov	r1, r4
 802289a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802289e:	3b30      	subs	r3, #48	; 0x30
 80228a0:	2b09      	cmp	r3, #9
 80228a2:	d94d      	bls.n	8022940 <_svfiprintf_r+0x17c>
 80228a4:	b1b0      	cbz	r0, 80228d4 <_svfiprintf_r+0x110>
 80228a6:	9207      	str	r2, [sp, #28]
 80228a8:	e014      	b.n	80228d4 <_svfiprintf_r+0x110>
 80228aa:	eba0 0308 	sub.w	r3, r0, r8
 80228ae:	46a2      	mov	sl, r4
 80228b0:	fa09 f303 	lsl.w	r3, r9, r3
 80228b4:	4313      	orrs	r3, r2
 80228b6:	9304      	str	r3, [sp, #16]
 80228b8:	e7d2      	b.n	8022860 <_svfiprintf_r+0x9c>
 80228ba:	9b03      	ldr	r3, [sp, #12]
 80228bc:	1d19      	adds	r1, r3, #4
 80228be:	681b      	ldr	r3, [r3, #0]
 80228c0:	2b00      	cmp	r3, #0
 80228c2:	9103      	str	r1, [sp, #12]
 80228c4:	bfbb      	ittet	lt
 80228c6:	425b      	neglt	r3, r3
 80228c8:	f042 0202 	orrlt.w	r2, r2, #2
 80228cc:	9307      	strge	r3, [sp, #28]
 80228ce:	9307      	strlt	r3, [sp, #28]
 80228d0:	bfb8      	it	lt
 80228d2:	9204      	strlt	r2, [sp, #16]
 80228d4:	7823      	ldrb	r3, [r4, #0]
 80228d6:	2b2e      	cmp	r3, #46	; 0x2e
 80228d8:	d10c      	bne.n	80228f4 <_svfiprintf_r+0x130>
 80228da:	7863      	ldrb	r3, [r4, #1]
 80228dc:	2b2a      	cmp	r3, #42	; 0x2a
 80228de:	d134      	bne.n	802294a <_svfiprintf_r+0x186>
 80228e0:	9b03      	ldr	r3, [sp, #12]
 80228e2:	3402      	adds	r4, #2
 80228e4:	1d1a      	adds	r2, r3, #4
 80228e6:	681b      	ldr	r3, [r3, #0]
 80228e8:	2b00      	cmp	r3, #0
 80228ea:	9203      	str	r2, [sp, #12]
 80228ec:	bfb8      	it	lt
 80228ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80228f2:	9305      	str	r3, [sp, #20]
 80228f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80229bc <_svfiprintf_r+0x1f8>
 80228f8:	2203      	movs	r2, #3
 80228fa:	7821      	ldrb	r1, [r4, #0]
 80228fc:	4650      	mov	r0, sl
 80228fe:	f000 fc89 	bl	8023214 <memchr>
 8022902:	b138      	cbz	r0, 8022914 <_svfiprintf_r+0x150>
 8022904:	eba0 000a 	sub.w	r0, r0, sl
 8022908:	2240      	movs	r2, #64	; 0x40
 802290a:	9b04      	ldr	r3, [sp, #16]
 802290c:	3401      	adds	r4, #1
 802290e:	4082      	lsls	r2, r0
 8022910:	4313      	orrs	r3, r2
 8022912:	9304      	str	r3, [sp, #16]
 8022914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022918:	2206      	movs	r2, #6
 802291a:	4825      	ldr	r0, [pc, #148]	; (80229b0 <_svfiprintf_r+0x1ec>)
 802291c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022920:	f000 fc78 	bl	8023214 <memchr>
 8022924:	2800      	cmp	r0, #0
 8022926:	d038      	beq.n	802299a <_svfiprintf_r+0x1d6>
 8022928:	4b22      	ldr	r3, [pc, #136]	; (80229b4 <_svfiprintf_r+0x1f0>)
 802292a:	bb1b      	cbnz	r3, 8022974 <_svfiprintf_r+0x1b0>
 802292c:	9b03      	ldr	r3, [sp, #12]
 802292e:	3307      	adds	r3, #7
 8022930:	f023 0307 	bic.w	r3, r3, #7
 8022934:	3308      	adds	r3, #8
 8022936:	9303      	str	r3, [sp, #12]
 8022938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802293a:	4433      	add	r3, r6
 802293c:	9309      	str	r3, [sp, #36]	; 0x24
 802293e:	e768      	b.n	8022812 <_svfiprintf_r+0x4e>
 8022940:	fb0c 3202 	mla	r2, ip, r2, r3
 8022944:	460c      	mov	r4, r1
 8022946:	2001      	movs	r0, #1
 8022948:	e7a6      	b.n	8022898 <_svfiprintf_r+0xd4>
 802294a:	2300      	movs	r3, #0
 802294c:	3401      	adds	r4, #1
 802294e:	f04f 0c0a 	mov.w	ip, #10
 8022952:	4619      	mov	r1, r3
 8022954:	9305      	str	r3, [sp, #20]
 8022956:	4620      	mov	r0, r4
 8022958:	f810 2b01 	ldrb.w	r2, [r0], #1
 802295c:	3a30      	subs	r2, #48	; 0x30
 802295e:	2a09      	cmp	r2, #9
 8022960:	d903      	bls.n	802296a <_svfiprintf_r+0x1a6>
 8022962:	2b00      	cmp	r3, #0
 8022964:	d0c6      	beq.n	80228f4 <_svfiprintf_r+0x130>
 8022966:	9105      	str	r1, [sp, #20]
 8022968:	e7c4      	b.n	80228f4 <_svfiprintf_r+0x130>
 802296a:	fb0c 2101 	mla	r1, ip, r1, r2
 802296e:	4604      	mov	r4, r0
 8022970:	2301      	movs	r3, #1
 8022972:	e7f0      	b.n	8022956 <_svfiprintf_r+0x192>
 8022974:	ab03      	add	r3, sp, #12
 8022976:	462a      	mov	r2, r5
 8022978:	a904      	add	r1, sp, #16
 802297a:	4638      	mov	r0, r7
 802297c:	9300      	str	r3, [sp, #0]
 802297e:	4b0e      	ldr	r3, [pc, #56]	; (80229b8 <_svfiprintf_r+0x1f4>)
 8022980:	f3af 8000 	nop.w
 8022984:	1c42      	adds	r2, r0, #1
 8022986:	4606      	mov	r6, r0
 8022988:	d1d6      	bne.n	8022938 <_svfiprintf_r+0x174>
 802298a:	89ab      	ldrh	r3, [r5, #12]
 802298c:	065b      	lsls	r3, r3, #25
 802298e:	f53f af2d 	bmi.w	80227ec <_svfiprintf_r+0x28>
 8022992:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022994:	b01d      	add	sp, #116	; 0x74
 8022996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802299a:	ab03      	add	r3, sp, #12
 802299c:	462a      	mov	r2, r5
 802299e:	a904      	add	r1, sp, #16
 80229a0:	4638      	mov	r0, r7
 80229a2:	9300      	str	r3, [sp, #0]
 80229a4:	4b04      	ldr	r3, [pc, #16]	; (80229b8 <_svfiprintf_r+0x1f4>)
 80229a6:	f000 f9c1 	bl	8022d2c <_printf_i>
 80229aa:	e7eb      	b.n	8022984 <_svfiprintf_r+0x1c0>
 80229ac:	08027181 	.word	0x08027181
 80229b0:	0802718b 	.word	0x0802718b
 80229b4:	00000000 	.word	0x00000000
 80229b8:	08022711 	.word	0x08022711
 80229bc:	08027187 	.word	0x08027187

080229c0 <__sfputc_r>:
 80229c0:	6893      	ldr	r3, [r2, #8]
 80229c2:	3b01      	subs	r3, #1
 80229c4:	2b00      	cmp	r3, #0
 80229c6:	6093      	str	r3, [r2, #8]
 80229c8:	b410      	push	{r4}
 80229ca:	da08      	bge.n	80229de <__sfputc_r+0x1e>
 80229cc:	6994      	ldr	r4, [r2, #24]
 80229ce:	42a3      	cmp	r3, r4
 80229d0:	db01      	blt.n	80229d6 <__sfputc_r+0x16>
 80229d2:	290a      	cmp	r1, #10
 80229d4:	d103      	bne.n	80229de <__sfputc_r+0x1e>
 80229d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80229da:	f000 bb85 	b.w	80230e8 <__swbuf_r>
 80229de:	6813      	ldr	r3, [r2, #0]
 80229e0:	1c58      	adds	r0, r3, #1
 80229e2:	6010      	str	r0, [r2, #0]
 80229e4:	4608      	mov	r0, r1
 80229e6:	7019      	strb	r1, [r3, #0]
 80229e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80229ec:	4770      	bx	lr

080229ee <__sfputs_r>:
 80229ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80229f0:	4606      	mov	r6, r0
 80229f2:	460f      	mov	r7, r1
 80229f4:	4614      	mov	r4, r2
 80229f6:	18d5      	adds	r5, r2, r3
 80229f8:	42ac      	cmp	r4, r5
 80229fa:	d101      	bne.n	8022a00 <__sfputs_r+0x12>
 80229fc:	2000      	movs	r0, #0
 80229fe:	e007      	b.n	8022a10 <__sfputs_r+0x22>
 8022a00:	463a      	mov	r2, r7
 8022a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022a06:	4630      	mov	r0, r6
 8022a08:	f7ff ffda 	bl	80229c0 <__sfputc_r>
 8022a0c:	1c43      	adds	r3, r0, #1
 8022a0e:	d1f3      	bne.n	80229f8 <__sfputs_r+0xa>
 8022a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022a14 <_vfiprintf_r>:
 8022a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a18:	460d      	mov	r5, r1
 8022a1a:	b09d      	sub	sp, #116	; 0x74
 8022a1c:	4614      	mov	r4, r2
 8022a1e:	4698      	mov	r8, r3
 8022a20:	4606      	mov	r6, r0
 8022a22:	b118      	cbz	r0, 8022a2c <_vfiprintf_r+0x18>
 8022a24:	6a03      	ldr	r3, [r0, #32]
 8022a26:	b90b      	cbnz	r3, 8022a2c <_vfiprintf_r+0x18>
 8022a28:	f7ff fc54 	bl	80222d4 <__sinit>
 8022a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022a2e:	07d9      	lsls	r1, r3, #31
 8022a30:	d405      	bmi.n	8022a3e <_vfiprintf_r+0x2a>
 8022a32:	89ab      	ldrh	r3, [r5, #12]
 8022a34:	059a      	lsls	r2, r3, #22
 8022a36:	d402      	bmi.n	8022a3e <_vfiprintf_r+0x2a>
 8022a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022a3a:	f7ff fdf0 	bl	802261e <__retarget_lock_acquire_recursive>
 8022a3e:	89ab      	ldrh	r3, [r5, #12]
 8022a40:	071b      	lsls	r3, r3, #28
 8022a42:	d501      	bpl.n	8022a48 <_vfiprintf_r+0x34>
 8022a44:	692b      	ldr	r3, [r5, #16]
 8022a46:	b99b      	cbnz	r3, 8022a70 <_vfiprintf_r+0x5c>
 8022a48:	4629      	mov	r1, r5
 8022a4a:	4630      	mov	r0, r6
 8022a4c:	f000 fb8a 	bl	8023164 <__swsetup_r>
 8022a50:	b170      	cbz	r0, 8022a70 <_vfiprintf_r+0x5c>
 8022a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022a54:	07dc      	lsls	r4, r3, #31
 8022a56:	d504      	bpl.n	8022a62 <_vfiprintf_r+0x4e>
 8022a58:	f04f 30ff 	mov.w	r0, #4294967295
 8022a5c:	b01d      	add	sp, #116	; 0x74
 8022a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a62:	89ab      	ldrh	r3, [r5, #12]
 8022a64:	0598      	lsls	r0, r3, #22
 8022a66:	d4f7      	bmi.n	8022a58 <_vfiprintf_r+0x44>
 8022a68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022a6a:	f7ff fdd9 	bl	8022620 <__retarget_lock_release_recursive>
 8022a6e:	e7f3      	b.n	8022a58 <_vfiprintf_r+0x44>
 8022a70:	2300      	movs	r3, #0
 8022a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8022a76:	f04f 0901 	mov.w	r9, #1
 8022a7a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8022c34 <_vfiprintf_r+0x220>
 8022a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8022a80:	2320      	movs	r3, #32
 8022a82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022a86:	2330      	movs	r3, #48	; 0x30
 8022a88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022a8c:	4623      	mov	r3, r4
 8022a8e:	469a      	mov	sl, r3
 8022a90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022a94:	b10a      	cbz	r2, 8022a9a <_vfiprintf_r+0x86>
 8022a96:	2a25      	cmp	r2, #37	; 0x25
 8022a98:	d1f9      	bne.n	8022a8e <_vfiprintf_r+0x7a>
 8022a9a:	ebba 0b04 	subs.w	fp, sl, r4
 8022a9e:	d00b      	beq.n	8022ab8 <_vfiprintf_r+0xa4>
 8022aa0:	465b      	mov	r3, fp
 8022aa2:	4622      	mov	r2, r4
 8022aa4:	4629      	mov	r1, r5
 8022aa6:	4630      	mov	r0, r6
 8022aa8:	f7ff ffa1 	bl	80229ee <__sfputs_r>
 8022aac:	3001      	adds	r0, #1
 8022aae:	f000 80a9 	beq.w	8022c04 <_vfiprintf_r+0x1f0>
 8022ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022ab4:	445a      	add	r2, fp
 8022ab6:	9209      	str	r2, [sp, #36]	; 0x24
 8022ab8:	f89a 3000 	ldrb.w	r3, [sl]
 8022abc:	2b00      	cmp	r3, #0
 8022abe:	f000 80a1 	beq.w	8022c04 <_vfiprintf_r+0x1f0>
 8022ac2:	2300      	movs	r3, #0
 8022ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8022ac8:	f10a 0a01 	add.w	sl, sl, #1
 8022acc:	9304      	str	r3, [sp, #16]
 8022ace:	9307      	str	r3, [sp, #28]
 8022ad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022ad4:	931a      	str	r3, [sp, #104]	; 0x68
 8022ad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022ada:	4654      	mov	r4, sl
 8022adc:	2205      	movs	r2, #5
 8022ade:	4855      	ldr	r0, [pc, #340]	; (8022c34 <_vfiprintf_r+0x220>)
 8022ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022ae4:	f000 fb96 	bl	8023214 <memchr>
 8022ae8:	9a04      	ldr	r2, [sp, #16]
 8022aea:	b9d8      	cbnz	r0, 8022b24 <_vfiprintf_r+0x110>
 8022aec:	06d1      	lsls	r1, r2, #27
 8022aee:	bf44      	itt	mi
 8022af0:	2320      	movmi	r3, #32
 8022af2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022af6:	0713      	lsls	r3, r2, #28
 8022af8:	bf44      	itt	mi
 8022afa:	232b      	movmi	r3, #43	; 0x2b
 8022afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022b00:	f89a 3000 	ldrb.w	r3, [sl]
 8022b04:	2b2a      	cmp	r3, #42	; 0x2a
 8022b06:	d015      	beq.n	8022b34 <_vfiprintf_r+0x120>
 8022b08:	9a07      	ldr	r2, [sp, #28]
 8022b0a:	4654      	mov	r4, sl
 8022b0c:	2000      	movs	r0, #0
 8022b0e:	f04f 0c0a 	mov.w	ip, #10
 8022b12:	4621      	mov	r1, r4
 8022b14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022b18:	3b30      	subs	r3, #48	; 0x30
 8022b1a:	2b09      	cmp	r3, #9
 8022b1c:	d94d      	bls.n	8022bba <_vfiprintf_r+0x1a6>
 8022b1e:	b1b0      	cbz	r0, 8022b4e <_vfiprintf_r+0x13a>
 8022b20:	9207      	str	r2, [sp, #28]
 8022b22:	e014      	b.n	8022b4e <_vfiprintf_r+0x13a>
 8022b24:	eba0 0308 	sub.w	r3, r0, r8
 8022b28:	46a2      	mov	sl, r4
 8022b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8022b2e:	4313      	orrs	r3, r2
 8022b30:	9304      	str	r3, [sp, #16]
 8022b32:	e7d2      	b.n	8022ada <_vfiprintf_r+0xc6>
 8022b34:	9b03      	ldr	r3, [sp, #12]
 8022b36:	1d19      	adds	r1, r3, #4
 8022b38:	681b      	ldr	r3, [r3, #0]
 8022b3a:	2b00      	cmp	r3, #0
 8022b3c:	9103      	str	r1, [sp, #12]
 8022b3e:	bfbb      	ittet	lt
 8022b40:	425b      	neglt	r3, r3
 8022b42:	f042 0202 	orrlt.w	r2, r2, #2
 8022b46:	9307      	strge	r3, [sp, #28]
 8022b48:	9307      	strlt	r3, [sp, #28]
 8022b4a:	bfb8      	it	lt
 8022b4c:	9204      	strlt	r2, [sp, #16]
 8022b4e:	7823      	ldrb	r3, [r4, #0]
 8022b50:	2b2e      	cmp	r3, #46	; 0x2e
 8022b52:	d10c      	bne.n	8022b6e <_vfiprintf_r+0x15a>
 8022b54:	7863      	ldrb	r3, [r4, #1]
 8022b56:	2b2a      	cmp	r3, #42	; 0x2a
 8022b58:	d134      	bne.n	8022bc4 <_vfiprintf_r+0x1b0>
 8022b5a:	9b03      	ldr	r3, [sp, #12]
 8022b5c:	3402      	adds	r4, #2
 8022b5e:	1d1a      	adds	r2, r3, #4
 8022b60:	681b      	ldr	r3, [r3, #0]
 8022b62:	2b00      	cmp	r3, #0
 8022b64:	9203      	str	r2, [sp, #12]
 8022b66:	bfb8      	it	lt
 8022b68:	f04f 33ff 	movlt.w	r3, #4294967295
 8022b6c:	9305      	str	r3, [sp, #20]
 8022b6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8022c44 <_vfiprintf_r+0x230>
 8022b72:	2203      	movs	r2, #3
 8022b74:	7821      	ldrb	r1, [r4, #0]
 8022b76:	4650      	mov	r0, sl
 8022b78:	f000 fb4c 	bl	8023214 <memchr>
 8022b7c:	b138      	cbz	r0, 8022b8e <_vfiprintf_r+0x17a>
 8022b7e:	eba0 000a 	sub.w	r0, r0, sl
 8022b82:	2240      	movs	r2, #64	; 0x40
 8022b84:	9b04      	ldr	r3, [sp, #16]
 8022b86:	3401      	adds	r4, #1
 8022b88:	4082      	lsls	r2, r0
 8022b8a:	4313      	orrs	r3, r2
 8022b8c:	9304      	str	r3, [sp, #16]
 8022b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022b92:	2206      	movs	r2, #6
 8022b94:	4828      	ldr	r0, [pc, #160]	; (8022c38 <_vfiprintf_r+0x224>)
 8022b96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022b9a:	f000 fb3b 	bl	8023214 <memchr>
 8022b9e:	2800      	cmp	r0, #0
 8022ba0:	d03f      	beq.n	8022c22 <_vfiprintf_r+0x20e>
 8022ba2:	4b26      	ldr	r3, [pc, #152]	; (8022c3c <_vfiprintf_r+0x228>)
 8022ba4:	bb1b      	cbnz	r3, 8022bee <_vfiprintf_r+0x1da>
 8022ba6:	9b03      	ldr	r3, [sp, #12]
 8022ba8:	3307      	adds	r3, #7
 8022baa:	f023 0307 	bic.w	r3, r3, #7
 8022bae:	3308      	adds	r3, #8
 8022bb0:	9303      	str	r3, [sp, #12]
 8022bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bb4:	443b      	add	r3, r7
 8022bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8022bb8:	e768      	b.n	8022a8c <_vfiprintf_r+0x78>
 8022bba:	fb0c 3202 	mla	r2, ip, r2, r3
 8022bbe:	460c      	mov	r4, r1
 8022bc0:	2001      	movs	r0, #1
 8022bc2:	e7a6      	b.n	8022b12 <_vfiprintf_r+0xfe>
 8022bc4:	2300      	movs	r3, #0
 8022bc6:	3401      	adds	r4, #1
 8022bc8:	f04f 0c0a 	mov.w	ip, #10
 8022bcc:	4619      	mov	r1, r3
 8022bce:	9305      	str	r3, [sp, #20]
 8022bd0:	4620      	mov	r0, r4
 8022bd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022bd6:	3a30      	subs	r2, #48	; 0x30
 8022bd8:	2a09      	cmp	r2, #9
 8022bda:	d903      	bls.n	8022be4 <_vfiprintf_r+0x1d0>
 8022bdc:	2b00      	cmp	r3, #0
 8022bde:	d0c6      	beq.n	8022b6e <_vfiprintf_r+0x15a>
 8022be0:	9105      	str	r1, [sp, #20]
 8022be2:	e7c4      	b.n	8022b6e <_vfiprintf_r+0x15a>
 8022be4:	fb0c 2101 	mla	r1, ip, r1, r2
 8022be8:	4604      	mov	r4, r0
 8022bea:	2301      	movs	r3, #1
 8022bec:	e7f0      	b.n	8022bd0 <_vfiprintf_r+0x1bc>
 8022bee:	ab03      	add	r3, sp, #12
 8022bf0:	462a      	mov	r2, r5
 8022bf2:	a904      	add	r1, sp, #16
 8022bf4:	4630      	mov	r0, r6
 8022bf6:	9300      	str	r3, [sp, #0]
 8022bf8:	4b11      	ldr	r3, [pc, #68]	; (8022c40 <_vfiprintf_r+0x22c>)
 8022bfa:	f3af 8000 	nop.w
 8022bfe:	4607      	mov	r7, r0
 8022c00:	1c78      	adds	r0, r7, #1
 8022c02:	d1d6      	bne.n	8022bb2 <_vfiprintf_r+0x19e>
 8022c04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022c06:	07d9      	lsls	r1, r3, #31
 8022c08:	d405      	bmi.n	8022c16 <_vfiprintf_r+0x202>
 8022c0a:	89ab      	ldrh	r3, [r5, #12]
 8022c0c:	059a      	lsls	r2, r3, #22
 8022c0e:	d402      	bmi.n	8022c16 <_vfiprintf_r+0x202>
 8022c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022c12:	f7ff fd05 	bl	8022620 <__retarget_lock_release_recursive>
 8022c16:	89ab      	ldrh	r3, [r5, #12]
 8022c18:	065b      	lsls	r3, r3, #25
 8022c1a:	f53f af1d 	bmi.w	8022a58 <_vfiprintf_r+0x44>
 8022c1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022c20:	e71c      	b.n	8022a5c <_vfiprintf_r+0x48>
 8022c22:	ab03      	add	r3, sp, #12
 8022c24:	462a      	mov	r2, r5
 8022c26:	a904      	add	r1, sp, #16
 8022c28:	4630      	mov	r0, r6
 8022c2a:	9300      	str	r3, [sp, #0]
 8022c2c:	4b04      	ldr	r3, [pc, #16]	; (8022c40 <_vfiprintf_r+0x22c>)
 8022c2e:	f000 f87d 	bl	8022d2c <_printf_i>
 8022c32:	e7e4      	b.n	8022bfe <_vfiprintf_r+0x1ea>
 8022c34:	08027181 	.word	0x08027181
 8022c38:	0802718b 	.word	0x0802718b
 8022c3c:	00000000 	.word	0x00000000
 8022c40:	080229ef 	.word	0x080229ef
 8022c44:	08027187 	.word	0x08027187

08022c48 <_printf_common>:
 8022c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022c4c:	4616      	mov	r6, r2
 8022c4e:	4699      	mov	r9, r3
 8022c50:	688a      	ldr	r2, [r1, #8]
 8022c52:	4607      	mov	r7, r0
 8022c54:	690b      	ldr	r3, [r1, #16]
 8022c56:	460c      	mov	r4, r1
 8022c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022c5c:	4293      	cmp	r3, r2
 8022c5e:	bfb8      	it	lt
 8022c60:	4613      	movlt	r3, r2
 8022c62:	6033      	str	r3, [r6, #0]
 8022c64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022c68:	b10a      	cbz	r2, 8022c6e <_printf_common+0x26>
 8022c6a:	3301      	adds	r3, #1
 8022c6c:	6033      	str	r3, [r6, #0]
 8022c6e:	6823      	ldr	r3, [r4, #0]
 8022c70:	0699      	lsls	r1, r3, #26
 8022c72:	bf42      	ittt	mi
 8022c74:	6833      	ldrmi	r3, [r6, #0]
 8022c76:	3302      	addmi	r3, #2
 8022c78:	6033      	strmi	r3, [r6, #0]
 8022c7a:	6825      	ldr	r5, [r4, #0]
 8022c7c:	f015 0506 	ands.w	r5, r5, #6
 8022c80:	d106      	bne.n	8022c90 <_printf_common+0x48>
 8022c82:	f104 0a19 	add.w	sl, r4, #25
 8022c86:	68e3      	ldr	r3, [r4, #12]
 8022c88:	6832      	ldr	r2, [r6, #0]
 8022c8a:	1a9b      	subs	r3, r3, r2
 8022c8c:	42ab      	cmp	r3, r5
 8022c8e:	dc2b      	bgt.n	8022ce8 <_printf_common+0xa0>
 8022c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022c94:	1e13      	subs	r3, r2, #0
 8022c96:	6822      	ldr	r2, [r4, #0]
 8022c98:	bf18      	it	ne
 8022c9a:	2301      	movne	r3, #1
 8022c9c:	0692      	lsls	r2, r2, #26
 8022c9e:	d430      	bmi.n	8022d02 <_printf_common+0xba>
 8022ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022ca4:	4649      	mov	r1, r9
 8022ca6:	4638      	mov	r0, r7
 8022ca8:	47c0      	blx	r8
 8022caa:	3001      	adds	r0, #1
 8022cac:	d023      	beq.n	8022cf6 <_printf_common+0xae>
 8022cae:	6823      	ldr	r3, [r4, #0]
 8022cb0:	341a      	adds	r4, #26
 8022cb2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8022cb6:	f003 0306 	and.w	r3, r3, #6
 8022cba:	2b04      	cmp	r3, #4
 8022cbc:	bf0a      	itet	eq
 8022cbe:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8022cc2:	2500      	movne	r5, #0
 8022cc4:	6833      	ldreq	r3, [r6, #0]
 8022cc6:	f04f 0600 	mov.w	r6, #0
 8022cca:	bf08      	it	eq
 8022ccc:	1aed      	subeq	r5, r5, r3
 8022cce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8022cd2:	bf08      	it	eq
 8022cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022cd8:	4293      	cmp	r3, r2
 8022cda:	bfc4      	itt	gt
 8022cdc:	1a9b      	subgt	r3, r3, r2
 8022cde:	18ed      	addgt	r5, r5, r3
 8022ce0:	42b5      	cmp	r5, r6
 8022ce2:	d11a      	bne.n	8022d1a <_printf_common+0xd2>
 8022ce4:	2000      	movs	r0, #0
 8022ce6:	e008      	b.n	8022cfa <_printf_common+0xb2>
 8022ce8:	2301      	movs	r3, #1
 8022cea:	4652      	mov	r2, sl
 8022cec:	4649      	mov	r1, r9
 8022cee:	4638      	mov	r0, r7
 8022cf0:	47c0      	blx	r8
 8022cf2:	3001      	adds	r0, #1
 8022cf4:	d103      	bne.n	8022cfe <_printf_common+0xb6>
 8022cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8022cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022cfe:	3501      	adds	r5, #1
 8022d00:	e7c1      	b.n	8022c86 <_printf_common+0x3e>
 8022d02:	18e1      	adds	r1, r4, r3
 8022d04:	1c5a      	adds	r2, r3, #1
 8022d06:	2030      	movs	r0, #48	; 0x30
 8022d08:	3302      	adds	r3, #2
 8022d0a:	4422      	add	r2, r4
 8022d0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022d10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022d14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022d18:	e7c2      	b.n	8022ca0 <_printf_common+0x58>
 8022d1a:	2301      	movs	r3, #1
 8022d1c:	4622      	mov	r2, r4
 8022d1e:	4649      	mov	r1, r9
 8022d20:	4638      	mov	r0, r7
 8022d22:	47c0      	blx	r8
 8022d24:	3001      	adds	r0, #1
 8022d26:	d0e6      	beq.n	8022cf6 <_printf_common+0xae>
 8022d28:	3601      	adds	r6, #1
 8022d2a:	e7d9      	b.n	8022ce0 <_printf_common+0x98>

08022d2c <_printf_i>:
 8022d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022d30:	7e0f      	ldrb	r7, [r1, #24]
 8022d32:	4691      	mov	r9, r2
 8022d34:	4680      	mov	r8, r0
 8022d36:	460c      	mov	r4, r1
 8022d38:	2f78      	cmp	r7, #120	; 0x78
 8022d3a:	469a      	mov	sl, r3
 8022d3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022d3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8022d42:	d807      	bhi.n	8022d54 <_printf_i+0x28>
 8022d44:	2f62      	cmp	r7, #98	; 0x62
 8022d46:	d80a      	bhi.n	8022d5e <_printf_i+0x32>
 8022d48:	2f00      	cmp	r7, #0
 8022d4a:	f000 80d3 	beq.w	8022ef4 <_printf_i+0x1c8>
 8022d4e:	2f58      	cmp	r7, #88	; 0x58
 8022d50:	f000 80bf 	beq.w	8022ed2 <_printf_i+0x1a6>
 8022d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022d58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022d5c:	e03a      	b.n	8022dd4 <_printf_i+0xa8>
 8022d5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022d62:	2b15      	cmp	r3, #21
 8022d64:	d8f6      	bhi.n	8022d54 <_printf_i+0x28>
 8022d66:	a101      	add	r1, pc, #4	; (adr r1, 8022d6c <_printf_i+0x40>)
 8022d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022d6c:	08022dc5 	.word	0x08022dc5
 8022d70:	08022dd9 	.word	0x08022dd9
 8022d74:	08022d55 	.word	0x08022d55
 8022d78:	08022d55 	.word	0x08022d55
 8022d7c:	08022d55 	.word	0x08022d55
 8022d80:	08022d55 	.word	0x08022d55
 8022d84:	08022dd9 	.word	0x08022dd9
 8022d88:	08022d55 	.word	0x08022d55
 8022d8c:	08022d55 	.word	0x08022d55
 8022d90:	08022d55 	.word	0x08022d55
 8022d94:	08022d55 	.word	0x08022d55
 8022d98:	08022edb 	.word	0x08022edb
 8022d9c:	08022e05 	.word	0x08022e05
 8022da0:	08022e97 	.word	0x08022e97
 8022da4:	08022d55 	.word	0x08022d55
 8022da8:	08022d55 	.word	0x08022d55
 8022dac:	08022efd 	.word	0x08022efd
 8022db0:	08022d55 	.word	0x08022d55
 8022db4:	08022e05 	.word	0x08022e05
 8022db8:	08022d55 	.word	0x08022d55
 8022dbc:	08022d55 	.word	0x08022d55
 8022dc0:	08022e9f 	.word	0x08022e9f
 8022dc4:	682b      	ldr	r3, [r5, #0]
 8022dc6:	1d1a      	adds	r2, r3, #4
 8022dc8:	681b      	ldr	r3, [r3, #0]
 8022dca:	602a      	str	r2, [r5, #0]
 8022dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022dd4:	2301      	movs	r3, #1
 8022dd6:	e09e      	b.n	8022f16 <_printf_i+0x1ea>
 8022dd8:	6820      	ldr	r0, [r4, #0]
 8022dda:	682b      	ldr	r3, [r5, #0]
 8022ddc:	0607      	lsls	r7, r0, #24
 8022dde:	f103 0104 	add.w	r1, r3, #4
 8022de2:	6029      	str	r1, [r5, #0]
 8022de4:	d501      	bpl.n	8022dea <_printf_i+0xbe>
 8022de6:	681e      	ldr	r6, [r3, #0]
 8022de8:	e003      	b.n	8022df2 <_printf_i+0xc6>
 8022dea:	0646      	lsls	r6, r0, #25
 8022dec:	d5fb      	bpl.n	8022de6 <_printf_i+0xba>
 8022dee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8022df2:	2e00      	cmp	r6, #0
 8022df4:	da03      	bge.n	8022dfe <_printf_i+0xd2>
 8022df6:	232d      	movs	r3, #45	; 0x2d
 8022df8:	4276      	negs	r6, r6
 8022dfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022dfe:	4859      	ldr	r0, [pc, #356]	; (8022f64 <_printf_i+0x238>)
 8022e00:	230a      	movs	r3, #10
 8022e02:	e012      	b.n	8022e2a <_printf_i+0xfe>
 8022e04:	682b      	ldr	r3, [r5, #0]
 8022e06:	6820      	ldr	r0, [r4, #0]
 8022e08:	1d19      	adds	r1, r3, #4
 8022e0a:	6029      	str	r1, [r5, #0]
 8022e0c:	0605      	lsls	r5, r0, #24
 8022e0e:	d501      	bpl.n	8022e14 <_printf_i+0xe8>
 8022e10:	681e      	ldr	r6, [r3, #0]
 8022e12:	e002      	b.n	8022e1a <_printf_i+0xee>
 8022e14:	0641      	lsls	r1, r0, #25
 8022e16:	d5fb      	bpl.n	8022e10 <_printf_i+0xe4>
 8022e18:	881e      	ldrh	r6, [r3, #0]
 8022e1a:	2f6f      	cmp	r7, #111	; 0x6f
 8022e1c:	4851      	ldr	r0, [pc, #324]	; (8022f64 <_printf_i+0x238>)
 8022e1e:	bf0c      	ite	eq
 8022e20:	2308      	moveq	r3, #8
 8022e22:	230a      	movne	r3, #10
 8022e24:	2100      	movs	r1, #0
 8022e26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022e2a:	6865      	ldr	r5, [r4, #4]
 8022e2c:	2d00      	cmp	r5, #0
 8022e2e:	60a5      	str	r5, [r4, #8]
 8022e30:	bfa2      	ittt	ge
 8022e32:	6821      	ldrge	r1, [r4, #0]
 8022e34:	f021 0104 	bicge.w	r1, r1, #4
 8022e38:	6021      	strge	r1, [r4, #0]
 8022e3a:	b90e      	cbnz	r6, 8022e40 <_printf_i+0x114>
 8022e3c:	2d00      	cmp	r5, #0
 8022e3e:	d04a      	beq.n	8022ed6 <_printf_i+0x1aa>
 8022e40:	4615      	mov	r5, r2
 8022e42:	fbb6 f1f3 	udiv	r1, r6, r3
 8022e46:	fb03 6711 	mls	r7, r3, r1, r6
 8022e4a:	5dc7      	ldrb	r7, [r0, r7]
 8022e4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8022e50:	4637      	mov	r7, r6
 8022e52:	460e      	mov	r6, r1
 8022e54:	42bb      	cmp	r3, r7
 8022e56:	d9f4      	bls.n	8022e42 <_printf_i+0x116>
 8022e58:	2b08      	cmp	r3, #8
 8022e5a:	d10b      	bne.n	8022e74 <_printf_i+0x148>
 8022e5c:	6823      	ldr	r3, [r4, #0]
 8022e5e:	07de      	lsls	r6, r3, #31
 8022e60:	d508      	bpl.n	8022e74 <_printf_i+0x148>
 8022e62:	6923      	ldr	r3, [r4, #16]
 8022e64:	6861      	ldr	r1, [r4, #4]
 8022e66:	4299      	cmp	r1, r3
 8022e68:	bfde      	ittt	le
 8022e6a:	2330      	movle	r3, #48	; 0x30
 8022e6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022e70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8022e74:	1b52      	subs	r2, r2, r5
 8022e76:	6122      	str	r2, [r4, #16]
 8022e78:	464b      	mov	r3, r9
 8022e7a:	aa03      	add	r2, sp, #12
 8022e7c:	4621      	mov	r1, r4
 8022e7e:	4640      	mov	r0, r8
 8022e80:	f8cd a000 	str.w	sl, [sp]
 8022e84:	f7ff fee0 	bl	8022c48 <_printf_common>
 8022e88:	3001      	adds	r0, #1
 8022e8a:	d149      	bne.n	8022f20 <_printf_i+0x1f4>
 8022e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8022e90:	b004      	add	sp, #16
 8022e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e96:	6823      	ldr	r3, [r4, #0]
 8022e98:	f043 0320 	orr.w	r3, r3, #32
 8022e9c:	6023      	str	r3, [r4, #0]
 8022e9e:	2778      	movs	r7, #120	; 0x78
 8022ea0:	4831      	ldr	r0, [pc, #196]	; (8022f68 <_printf_i+0x23c>)
 8022ea2:	6823      	ldr	r3, [r4, #0]
 8022ea4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022ea8:	061f      	lsls	r7, r3, #24
 8022eaa:	6829      	ldr	r1, [r5, #0]
 8022eac:	f851 6b04 	ldr.w	r6, [r1], #4
 8022eb0:	d402      	bmi.n	8022eb8 <_printf_i+0x18c>
 8022eb2:	065f      	lsls	r7, r3, #25
 8022eb4:	bf48      	it	mi
 8022eb6:	b2b6      	uxthmi	r6, r6
 8022eb8:	07df      	lsls	r7, r3, #31
 8022eba:	6029      	str	r1, [r5, #0]
 8022ebc:	bf44      	itt	mi
 8022ebe:	f043 0320 	orrmi.w	r3, r3, #32
 8022ec2:	6023      	strmi	r3, [r4, #0]
 8022ec4:	b91e      	cbnz	r6, 8022ece <_printf_i+0x1a2>
 8022ec6:	6823      	ldr	r3, [r4, #0]
 8022ec8:	f023 0320 	bic.w	r3, r3, #32
 8022ecc:	6023      	str	r3, [r4, #0]
 8022ece:	2310      	movs	r3, #16
 8022ed0:	e7a8      	b.n	8022e24 <_printf_i+0xf8>
 8022ed2:	4824      	ldr	r0, [pc, #144]	; (8022f64 <_printf_i+0x238>)
 8022ed4:	e7e5      	b.n	8022ea2 <_printf_i+0x176>
 8022ed6:	4615      	mov	r5, r2
 8022ed8:	e7be      	b.n	8022e58 <_printf_i+0x12c>
 8022eda:	682b      	ldr	r3, [r5, #0]
 8022edc:	6826      	ldr	r6, [r4, #0]
 8022ede:	1d18      	adds	r0, r3, #4
 8022ee0:	6961      	ldr	r1, [r4, #20]
 8022ee2:	6028      	str	r0, [r5, #0]
 8022ee4:	0635      	lsls	r5, r6, #24
 8022ee6:	681b      	ldr	r3, [r3, #0]
 8022ee8:	d501      	bpl.n	8022eee <_printf_i+0x1c2>
 8022eea:	6019      	str	r1, [r3, #0]
 8022eec:	e002      	b.n	8022ef4 <_printf_i+0x1c8>
 8022eee:	0670      	lsls	r0, r6, #25
 8022ef0:	d5fb      	bpl.n	8022eea <_printf_i+0x1be>
 8022ef2:	8019      	strh	r1, [r3, #0]
 8022ef4:	2300      	movs	r3, #0
 8022ef6:	4615      	mov	r5, r2
 8022ef8:	6123      	str	r3, [r4, #16]
 8022efa:	e7bd      	b.n	8022e78 <_printf_i+0x14c>
 8022efc:	682b      	ldr	r3, [r5, #0]
 8022efe:	2100      	movs	r1, #0
 8022f00:	1d1a      	adds	r2, r3, #4
 8022f02:	602a      	str	r2, [r5, #0]
 8022f04:	681d      	ldr	r5, [r3, #0]
 8022f06:	6862      	ldr	r2, [r4, #4]
 8022f08:	4628      	mov	r0, r5
 8022f0a:	f000 f983 	bl	8023214 <memchr>
 8022f0e:	b108      	cbz	r0, 8022f14 <_printf_i+0x1e8>
 8022f10:	1b40      	subs	r0, r0, r5
 8022f12:	6060      	str	r0, [r4, #4]
 8022f14:	6863      	ldr	r3, [r4, #4]
 8022f16:	6123      	str	r3, [r4, #16]
 8022f18:	2300      	movs	r3, #0
 8022f1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022f1e:	e7ab      	b.n	8022e78 <_printf_i+0x14c>
 8022f20:	6923      	ldr	r3, [r4, #16]
 8022f22:	462a      	mov	r2, r5
 8022f24:	4649      	mov	r1, r9
 8022f26:	4640      	mov	r0, r8
 8022f28:	47d0      	blx	sl
 8022f2a:	3001      	adds	r0, #1
 8022f2c:	d0ae      	beq.n	8022e8c <_printf_i+0x160>
 8022f2e:	6823      	ldr	r3, [r4, #0]
 8022f30:	079b      	lsls	r3, r3, #30
 8022f32:	d413      	bmi.n	8022f5c <_printf_i+0x230>
 8022f34:	68e0      	ldr	r0, [r4, #12]
 8022f36:	9b03      	ldr	r3, [sp, #12]
 8022f38:	4298      	cmp	r0, r3
 8022f3a:	bfb8      	it	lt
 8022f3c:	4618      	movlt	r0, r3
 8022f3e:	e7a7      	b.n	8022e90 <_printf_i+0x164>
 8022f40:	2301      	movs	r3, #1
 8022f42:	4632      	mov	r2, r6
 8022f44:	4649      	mov	r1, r9
 8022f46:	4640      	mov	r0, r8
 8022f48:	47d0      	blx	sl
 8022f4a:	3001      	adds	r0, #1
 8022f4c:	d09e      	beq.n	8022e8c <_printf_i+0x160>
 8022f4e:	3501      	adds	r5, #1
 8022f50:	68e3      	ldr	r3, [r4, #12]
 8022f52:	9903      	ldr	r1, [sp, #12]
 8022f54:	1a5b      	subs	r3, r3, r1
 8022f56:	42ab      	cmp	r3, r5
 8022f58:	dcf2      	bgt.n	8022f40 <_printf_i+0x214>
 8022f5a:	e7eb      	b.n	8022f34 <_printf_i+0x208>
 8022f5c:	2500      	movs	r5, #0
 8022f5e:	f104 0619 	add.w	r6, r4, #25
 8022f62:	e7f5      	b.n	8022f50 <_printf_i+0x224>
 8022f64:	08027192 	.word	0x08027192
 8022f68:	080271a3 	.word	0x080271a3

08022f6c <__sflush_r>:
 8022f6c:	898a      	ldrh	r2, [r1, #12]
 8022f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022f72:	4605      	mov	r5, r0
 8022f74:	0710      	lsls	r0, r2, #28
 8022f76:	460c      	mov	r4, r1
 8022f78:	d458      	bmi.n	802302c <__sflush_r+0xc0>
 8022f7a:	684b      	ldr	r3, [r1, #4]
 8022f7c:	2b00      	cmp	r3, #0
 8022f7e:	dc05      	bgt.n	8022f8c <__sflush_r+0x20>
 8022f80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022f82:	2b00      	cmp	r3, #0
 8022f84:	dc02      	bgt.n	8022f8c <__sflush_r+0x20>
 8022f86:	2000      	movs	r0, #0
 8022f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022f8e:	2e00      	cmp	r6, #0
 8022f90:	d0f9      	beq.n	8022f86 <__sflush_r+0x1a>
 8022f92:	2300      	movs	r3, #0
 8022f94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022f98:	682f      	ldr	r7, [r5, #0]
 8022f9a:	6a21      	ldr	r1, [r4, #32]
 8022f9c:	602b      	str	r3, [r5, #0]
 8022f9e:	d032      	beq.n	8023006 <__sflush_r+0x9a>
 8022fa0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022fa2:	89a3      	ldrh	r3, [r4, #12]
 8022fa4:	075a      	lsls	r2, r3, #29
 8022fa6:	d505      	bpl.n	8022fb4 <__sflush_r+0x48>
 8022fa8:	6863      	ldr	r3, [r4, #4]
 8022faa:	1ac0      	subs	r0, r0, r3
 8022fac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022fae:	b10b      	cbz	r3, 8022fb4 <__sflush_r+0x48>
 8022fb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022fb2:	1ac0      	subs	r0, r0, r3
 8022fb4:	2300      	movs	r3, #0
 8022fb6:	4602      	mov	r2, r0
 8022fb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022fba:	4628      	mov	r0, r5
 8022fbc:	6a21      	ldr	r1, [r4, #32]
 8022fbe:	47b0      	blx	r6
 8022fc0:	1c43      	adds	r3, r0, #1
 8022fc2:	89a3      	ldrh	r3, [r4, #12]
 8022fc4:	d106      	bne.n	8022fd4 <__sflush_r+0x68>
 8022fc6:	6829      	ldr	r1, [r5, #0]
 8022fc8:	291d      	cmp	r1, #29
 8022fca:	d82b      	bhi.n	8023024 <__sflush_r+0xb8>
 8022fcc:	4a28      	ldr	r2, [pc, #160]	; (8023070 <__sflush_r+0x104>)
 8022fce:	410a      	asrs	r2, r1
 8022fd0:	07d6      	lsls	r6, r2, #31
 8022fd2:	d427      	bmi.n	8023024 <__sflush_r+0xb8>
 8022fd4:	2200      	movs	r2, #0
 8022fd6:	04d9      	lsls	r1, r3, #19
 8022fd8:	6062      	str	r2, [r4, #4]
 8022fda:	6922      	ldr	r2, [r4, #16]
 8022fdc:	6022      	str	r2, [r4, #0]
 8022fde:	d504      	bpl.n	8022fea <__sflush_r+0x7e>
 8022fe0:	1c42      	adds	r2, r0, #1
 8022fe2:	d101      	bne.n	8022fe8 <__sflush_r+0x7c>
 8022fe4:	682b      	ldr	r3, [r5, #0]
 8022fe6:	b903      	cbnz	r3, 8022fea <__sflush_r+0x7e>
 8022fe8:	6560      	str	r0, [r4, #84]	; 0x54
 8022fea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022fec:	602f      	str	r7, [r5, #0]
 8022fee:	2900      	cmp	r1, #0
 8022ff0:	d0c9      	beq.n	8022f86 <__sflush_r+0x1a>
 8022ff2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022ff6:	4299      	cmp	r1, r3
 8022ff8:	d002      	beq.n	8023000 <__sflush_r+0x94>
 8022ffa:	4628      	mov	r0, r5
 8022ffc:	f7ff fb3c 	bl	8022678 <_free_r>
 8023000:	2000      	movs	r0, #0
 8023002:	6360      	str	r0, [r4, #52]	; 0x34
 8023004:	e7c0      	b.n	8022f88 <__sflush_r+0x1c>
 8023006:	2301      	movs	r3, #1
 8023008:	4628      	mov	r0, r5
 802300a:	47b0      	blx	r6
 802300c:	1c41      	adds	r1, r0, #1
 802300e:	d1c8      	bne.n	8022fa2 <__sflush_r+0x36>
 8023010:	682b      	ldr	r3, [r5, #0]
 8023012:	2b00      	cmp	r3, #0
 8023014:	d0c5      	beq.n	8022fa2 <__sflush_r+0x36>
 8023016:	2b1d      	cmp	r3, #29
 8023018:	d001      	beq.n	802301e <__sflush_r+0xb2>
 802301a:	2b16      	cmp	r3, #22
 802301c:	d101      	bne.n	8023022 <__sflush_r+0xb6>
 802301e:	602f      	str	r7, [r5, #0]
 8023020:	e7b1      	b.n	8022f86 <__sflush_r+0x1a>
 8023022:	89a3      	ldrh	r3, [r4, #12]
 8023024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023028:	81a3      	strh	r3, [r4, #12]
 802302a:	e7ad      	b.n	8022f88 <__sflush_r+0x1c>
 802302c:	690f      	ldr	r7, [r1, #16]
 802302e:	2f00      	cmp	r7, #0
 8023030:	d0a9      	beq.n	8022f86 <__sflush_r+0x1a>
 8023032:	0793      	lsls	r3, r2, #30
 8023034:	680e      	ldr	r6, [r1, #0]
 8023036:	600f      	str	r7, [r1, #0]
 8023038:	bf0c      	ite	eq
 802303a:	694b      	ldreq	r3, [r1, #20]
 802303c:	2300      	movne	r3, #0
 802303e:	eba6 0807 	sub.w	r8, r6, r7
 8023042:	608b      	str	r3, [r1, #8]
 8023044:	f1b8 0f00 	cmp.w	r8, #0
 8023048:	dd9d      	ble.n	8022f86 <__sflush_r+0x1a>
 802304a:	4643      	mov	r3, r8
 802304c:	463a      	mov	r2, r7
 802304e:	6a21      	ldr	r1, [r4, #32]
 8023050:	4628      	mov	r0, r5
 8023052:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023054:	47b0      	blx	r6
 8023056:	2800      	cmp	r0, #0
 8023058:	dc06      	bgt.n	8023068 <__sflush_r+0xfc>
 802305a:	89a3      	ldrh	r3, [r4, #12]
 802305c:	f04f 30ff 	mov.w	r0, #4294967295
 8023060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023064:	81a3      	strh	r3, [r4, #12]
 8023066:	e78f      	b.n	8022f88 <__sflush_r+0x1c>
 8023068:	4407      	add	r7, r0
 802306a:	eba8 0800 	sub.w	r8, r8, r0
 802306e:	e7e9      	b.n	8023044 <__sflush_r+0xd8>
 8023070:	dfbffffe 	.word	0xdfbffffe

08023074 <_fflush_r>:
 8023074:	b538      	push	{r3, r4, r5, lr}
 8023076:	690b      	ldr	r3, [r1, #16]
 8023078:	4605      	mov	r5, r0
 802307a:	460c      	mov	r4, r1
 802307c:	b913      	cbnz	r3, 8023084 <_fflush_r+0x10>
 802307e:	2500      	movs	r5, #0
 8023080:	4628      	mov	r0, r5
 8023082:	bd38      	pop	{r3, r4, r5, pc}
 8023084:	b118      	cbz	r0, 802308e <_fflush_r+0x1a>
 8023086:	6a03      	ldr	r3, [r0, #32]
 8023088:	b90b      	cbnz	r3, 802308e <_fflush_r+0x1a>
 802308a:	f7ff f923 	bl	80222d4 <__sinit>
 802308e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023092:	2b00      	cmp	r3, #0
 8023094:	d0f3      	beq.n	802307e <_fflush_r+0xa>
 8023096:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023098:	07d0      	lsls	r0, r2, #31
 802309a:	d404      	bmi.n	80230a6 <_fflush_r+0x32>
 802309c:	0599      	lsls	r1, r3, #22
 802309e:	d402      	bmi.n	80230a6 <_fflush_r+0x32>
 80230a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80230a2:	f7ff fabc 	bl	802261e <__retarget_lock_acquire_recursive>
 80230a6:	4628      	mov	r0, r5
 80230a8:	4621      	mov	r1, r4
 80230aa:	f7ff ff5f 	bl	8022f6c <__sflush_r>
 80230ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80230b0:	4605      	mov	r5, r0
 80230b2:	07da      	lsls	r2, r3, #31
 80230b4:	d4e4      	bmi.n	8023080 <_fflush_r+0xc>
 80230b6:	89a3      	ldrh	r3, [r4, #12]
 80230b8:	059b      	lsls	r3, r3, #22
 80230ba:	d4e1      	bmi.n	8023080 <_fflush_r+0xc>
 80230bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80230be:	f7ff faaf 	bl	8022620 <__retarget_lock_release_recursive>
 80230c2:	e7dd      	b.n	8023080 <_fflush_r+0xc>

080230c4 <fiprintf>:
 80230c4:	b40e      	push	{r1, r2, r3}
 80230c6:	b503      	push	{r0, r1, lr}
 80230c8:	ab03      	add	r3, sp, #12
 80230ca:	4601      	mov	r1, r0
 80230cc:	4805      	ldr	r0, [pc, #20]	; (80230e4 <fiprintf+0x20>)
 80230ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80230d2:	6800      	ldr	r0, [r0, #0]
 80230d4:	9301      	str	r3, [sp, #4]
 80230d6:	f7ff fc9d 	bl	8022a14 <_vfiprintf_r>
 80230da:	b002      	add	sp, #8
 80230dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80230e0:	b003      	add	sp, #12
 80230e2:	4770      	bx	lr
 80230e4:	200000e4 	.word	0x200000e4

080230e8 <__swbuf_r>:
 80230e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80230ea:	460e      	mov	r6, r1
 80230ec:	4614      	mov	r4, r2
 80230ee:	4605      	mov	r5, r0
 80230f0:	b118      	cbz	r0, 80230fa <__swbuf_r+0x12>
 80230f2:	6a03      	ldr	r3, [r0, #32]
 80230f4:	b90b      	cbnz	r3, 80230fa <__swbuf_r+0x12>
 80230f6:	f7ff f8ed 	bl	80222d4 <__sinit>
 80230fa:	69a3      	ldr	r3, [r4, #24]
 80230fc:	60a3      	str	r3, [r4, #8]
 80230fe:	89a3      	ldrh	r3, [r4, #12]
 8023100:	071a      	lsls	r2, r3, #28
 8023102:	d525      	bpl.n	8023150 <__swbuf_r+0x68>
 8023104:	6923      	ldr	r3, [r4, #16]
 8023106:	b31b      	cbz	r3, 8023150 <__swbuf_r+0x68>
 8023108:	6823      	ldr	r3, [r4, #0]
 802310a:	b2f6      	uxtb	r6, r6
 802310c:	6922      	ldr	r2, [r4, #16]
 802310e:	4637      	mov	r7, r6
 8023110:	1a98      	subs	r0, r3, r2
 8023112:	6963      	ldr	r3, [r4, #20]
 8023114:	4283      	cmp	r3, r0
 8023116:	dc04      	bgt.n	8023122 <__swbuf_r+0x3a>
 8023118:	4621      	mov	r1, r4
 802311a:	4628      	mov	r0, r5
 802311c:	f7ff ffaa 	bl	8023074 <_fflush_r>
 8023120:	b9e0      	cbnz	r0, 802315c <__swbuf_r+0x74>
 8023122:	68a3      	ldr	r3, [r4, #8]
 8023124:	3b01      	subs	r3, #1
 8023126:	60a3      	str	r3, [r4, #8]
 8023128:	6823      	ldr	r3, [r4, #0]
 802312a:	1c5a      	adds	r2, r3, #1
 802312c:	6022      	str	r2, [r4, #0]
 802312e:	701e      	strb	r6, [r3, #0]
 8023130:	1c43      	adds	r3, r0, #1
 8023132:	6962      	ldr	r2, [r4, #20]
 8023134:	429a      	cmp	r2, r3
 8023136:	d004      	beq.n	8023142 <__swbuf_r+0x5a>
 8023138:	89a3      	ldrh	r3, [r4, #12]
 802313a:	07db      	lsls	r3, r3, #31
 802313c:	d506      	bpl.n	802314c <__swbuf_r+0x64>
 802313e:	2e0a      	cmp	r6, #10
 8023140:	d104      	bne.n	802314c <__swbuf_r+0x64>
 8023142:	4621      	mov	r1, r4
 8023144:	4628      	mov	r0, r5
 8023146:	f7ff ff95 	bl	8023074 <_fflush_r>
 802314a:	b938      	cbnz	r0, 802315c <__swbuf_r+0x74>
 802314c:	4638      	mov	r0, r7
 802314e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023150:	4621      	mov	r1, r4
 8023152:	4628      	mov	r0, r5
 8023154:	f000 f806 	bl	8023164 <__swsetup_r>
 8023158:	2800      	cmp	r0, #0
 802315a:	d0d5      	beq.n	8023108 <__swbuf_r+0x20>
 802315c:	f04f 37ff 	mov.w	r7, #4294967295
 8023160:	e7f4      	b.n	802314c <__swbuf_r+0x64>
	...

08023164 <__swsetup_r>:
 8023164:	b538      	push	{r3, r4, r5, lr}
 8023166:	4b2a      	ldr	r3, [pc, #168]	; (8023210 <__swsetup_r+0xac>)
 8023168:	4605      	mov	r5, r0
 802316a:	460c      	mov	r4, r1
 802316c:	6818      	ldr	r0, [r3, #0]
 802316e:	b118      	cbz	r0, 8023178 <__swsetup_r+0x14>
 8023170:	6a03      	ldr	r3, [r0, #32]
 8023172:	b90b      	cbnz	r3, 8023178 <__swsetup_r+0x14>
 8023174:	f7ff f8ae 	bl	80222d4 <__sinit>
 8023178:	89a3      	ldrh	r3, [r4, #12]
 802317a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802317e:	0718      	lsls	r0, r3, #28
 8023180:	d422      	bmi.n	80231c8 <__swsetup_r+0x64>
 8023182:	06d9      	lsls	r1, r3, #27
 8023184:	d407      	bmi.n	8023196 <__swsetup_r+0x32>
 8023186:	2309      	movs	r3, #9
 8023188:	602b      	str	r3, [r5, #0]
 802318a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802318e:	f04f 30ff 	mov.w	r0, #4294967295
 8023192:	81a3      	strh	r3, [r4, #12]
 8023194:	e034      	b.n	8023200 <__swsetup_r+0x9c>
 8023196:	0758      	lsls	r0, r3, #29
 8023198:	d512      	bpl.n	80231c0 <__swsetup_r+0x5c>
 802319a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802319c:	b141      	cbz	r1, 80231b0 <__swsetup_r+0x4c>
 802319e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80231a2:	4299      	cmp	r1, r3
 80231a4:	d002      	beq.n	80231ac <__swsetup_r+0x48>
 80231a6:	4628      	mov	r0, r5
 80231a8:	f7ff fa66 	bl	8022678 <_free_r>
 80231ac:	2300      	movs	r3, #0
 80231ae:	6363      	str	r3, [r4, #52]	; 0x34
 80231b0:	89a3      	ldrh	r3, [r4, #12]
 80231b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80231b6:	81a3      	strh	r3, [r4, #12]
 80231b8:	2300      	movs	r3, #0
 80231ba:	6063      	str	r3, [r4, #4]
 80231bc:	6923      	ldr	r3, [r4, #16]
 80231be:	6023      	str	r3, [r4, #0]
 80231c0:	89a3      	ldrh	r3, [r4, #12]
 80231c2:	f043 0308 	orr.w	r3, r3, #8
 80231c6:	81a3      	strh	r3, [r4, #12]
 80231c8:	6923      	ldr	r3, [r4, #16]
 80231ca:	b94b      	cbnz	r3, 80231e0 <__swsetup_r+0x7c>
 80231cc:	89a3      	ldrh	r3, [r4, #12]
 80231ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80231d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80231d6:	d003      	beq.n	80231e0 <__swsetup_r+0x7c>
 80231d8:	4621      	mov	r1, r4
 80231da:	4628      	mov	r0, r5
 80231dc:	f000 f883 	bl	80232e6 <__smakebuf_r>
 80231e0:	89a0      	ldrh	r0, [r4, #12]
 80231e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80231e6:	f010 0301 	ands.w	r3, r0, #1
 80231ea:	d00a      	beq.n	8023202 <__swsetup_r+0x9e>
 80231ec:	2300      	movs	r3, #0
 80231ee:	60a3      	str	r3, [r4, #8]
 80231f0:	6963      	ldr	r3, [r4, #20]
 80231f2:	425b      	negs	r3, r3
 80231f4:	61a3      	str	r3, [r4, #24]
 80231f6:	6923      	ldr	r3, [r4, #16]
 80231f8:	b943      	cbnz	r3, 802320c <__swsetup_r+0xa8>
 80231fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80231fe:	d1c4      	bne.n	802318a <__swsetup_r+0x26>
 8023200:	bd38      	pop	{r3, r4, r5, pc}
 8023202:	0781      	lsls	r1, r0, #30
 8023204:	bf58      	it	pl
 8023206:	6963      	ldrpl	r3, [r4, #20]
 8023208:	60a3      	str	r3, [r4, #8]
 802320a:	e7f4      	b.n	80231f6 <__swsetup_r+0x92>
 802320c:	2000      	movs	r0, #0
 802320e:	e7f7      	b.n	8023200 <__swsetup_r+0x9c>
 8023210:	200000e4 	.word	0x200000e4

08023214 <memchr>:
 8023214:	b2c9      	uxtb	r1, r1
 8023216:	4402      	add	r2, r0
 8023218:	b510      	push	{r4, lr}
 802321a:	4290      	cmp	r0, r2
 802321c:	4603      	mov	r3, r0
 802321e:	d101      	bne.n	8023224 <memchr+0x10>
 8023220:	2300      	movs	r3, #0
 8023222:	e003      	b.n	802322c <memchr+0x18>
 8023224:	781c      	ldrb	r4, [r3, #0]
 8023226:	3001      	adds	r0, #1
 8023228:	428c      	cmp	r4, r1
 802322a:	d1f6      	bne.n	802321a <memchr+0x6>
 802322c:	4618      	mov	r0, r3
 802322e:	bd10      	pop	{r4, pc}

08023230 <abort>:
 8023230:	2006      	movs	r0, #6
 8023232:	b508      	push	{r3, lr}
 8023234:	f000 f8bc 	bl	80233b0 <raise>
 8023238:	2001      	movs	r0, #1
 802323a:	f7dd ff1f 	bl	800107c <_exit>

0802323e <_realloc_r>:
 802323e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023242:	4680      	mov	r8, r0
 8023244:	4614      	mov	r4, r2
 8023246:	460e      	mov	r6, r1
 8023248:	b921      	cbnz	r1, 8023254 <_realloc_r+0x16>
 802324a:	4611      	mov	r1, r2
 802324c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023250:	f7fe beea 	b.w	8022028 <_malloc_r>
 8023254:	b92a      	cbnz	r2, 8023262 <_realloc_r+0x24>
 8023256:	4625      	mov	r5, r4
 8023258:	f7ff fa0e 	bl	8022678 <_free_r>
 802325c:	4628      	mov	r0, r5
 802325e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023262:	f000 f8e3 	bl	802342c <_malloc_usable_size_r>
 8023266:	4284      	cmp	r4, r0
 8023268:	4607      	mov	r7, r0
 802326a:	d802      	bhi.n	8023272 <_realloc_r+0x34>
 802326c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8023270:	d812      	bhi.n	8023298 <_realloc_r+0x5a>
 8023272:	4621      	mov	r1, r4
 8023274:	4640      	mov	r0, r8
 8023276:	f7fe fed7 	bl	8022028 <_malloc_r>
 802327a:	4605      	mov	r5, r0
 802327c:	2800      	cmp	r0, #0
 802327e:	d0ed      	beq.n	802325c <_realloc_r+0x1e>
 8023280:	42bc      	cmp	r4, r7
 8023282:	4622      	mov	r2, r4
 8023284:	4631      	mov	r1, r6
 8023286:	bf28      	it	cs
 8023288:	463a      	movcs	r2, r7
 802328a:	f7ff f9ca 	bl	8022622 <memcpy>
 802328e:	4631      	mov	r1, r6
 8023290:	4640      	mov	r0, r8
 8023292:	f7ff f9f1 	bl	8022678 <_free_r>
 8023296:	e7e1      	b.n	802325c <_realloc_r+0x1e>
 8023298:	4635      	mov	r5, r6
 802329a:	e7df      	b.n	802325c <_realloc_r+0x1e>

0802329c <__swhatbuf_r>:
 802329c:	b570      	push	{r4, r5, r6, lr}
 802329e:	460c      	mov	r4, r1
 80232a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80232a4:	b096      	sub	sp, #88	; 0x58
 80232a6:	4615      	mov	r5, r2
 80232a8:	2900      	cmp	r1, #0
 80232aa:	461e      	mov	r6, r3
 80232ac:	da0c      	bge.n	80232c8 <__swhatbuf_r+0x2c>
 80232ae:	89a3      	ldrh	r3, [r4, #12]
 80232b0:	2100      	movs	r1, #0
 80232b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80232b6:	bf0c      	ite	eq
 80232b8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80232bc:	2340      	movne	r3, #64	; 0x40
 80232be:	2000      	movs	r0, #0
 80232c0:	6031      	str	r1, [r6, #0]
 80232c2:	602b      	str	r3, [r5, #0]
 80232c4:	b016      	add	sp, #88	; 0x58
 80232c6:	bd70      	pop	{r4, r5, r6, pc}
 80232c8:	466a      	mov	r2, sp
 80232ca:	f000 f879 	bl	80233c0 <_fstat_r>
 80232ce:	2800      	cmp	r0, #0
 80232d0:	dbed      	blt.n	80232ae <__swhatbuf_r+0x12>
 80232d2:	9901      	ldr	r1, [sp, #4]
 80232d4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80232d8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80232dc:	4259      	negs	r1, r3
 80232de:	4159      	adcs	r1, r3
 80232e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80232e4:	e7eb      	b.n	80232be <__swhatbuf_r+0x22>

080232e6 <__smakebuf_r>:
 80232e6:	898b      	ldrh	r3, [r1, #12]
 80232e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80232ea:	079d      	lsls	r5, r3, #30
 80232ec:	4606      	mov	r6, r0
 80232ee:	460c      	mov	r4, r1
 80232f0:	d507      	bpl.n	8023302 <__smakebuf_r+0x1c>
 80232f2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80232f6:	6023      	str	r3, [r4, #0]
 80232f8:	6123      	str	r3, [r4, #16]
 80232fa:	2301      	movs	r3, #1
 80232fc:	6163      	str	r3, [r4, #20]
 80232fe:	b002      	add	sp, #8
 8023300:	bd70      	pop	{r4, r5, r6, pc}
 8023302:	ab01      	add	r3, sp, #4
 8023304:	466a      	mov	r2, sp
 8023306:	f7ff ffc9 	bl	802329c <__swhatbuf_r>
 802330a:	9900      	ldr	r1, [sp, #0]
 802330c:	4605      	mov	r5, r0
 802330e:	4630      	mov	r0, r6
 8023310:	f7fe fe8a 	bl	8022028 <_malloc_r>
 8023314:	b948      	cbnz	r0, 802332a <__smakebuf_r+0x44>
 8023316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802331a:	059a      	lsls	r2, r3, #22
 802331c:	d4ef      	bmi.n	80232fe <__smakebuf_r+0x18>
 802331e:	f023 0303 	bic.w	r3, r3, #3
 8023322:	f043 0302 	orr.w	r3, r3, #2
 8023326:	81a3      	strh	r3, [r4, #12]
 8023328:	e7e3      	b.n	80232f2 <__smakebuf_r+0xc>
 802332a:	89a3      	ldrh	r3, [r4, #12]
 802332c:	6020      	str	r0, [r4, #0]
 802332e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023332:	6120      	str	r0, [r4, #16]
 8023334:	81a3      	strh	r3, [r4, #12]
 8023336:	9b00      	ldr	r3, [sp, #0]
 8023338:	6163      	str	r3, [r4, #20]
 802333a:	9b01      	ldr	r3, [sp, #4]
 802333c:	b15b      	cbz	r3, 8023356 <__smakebuf_r+0x70>
 802333e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023342:	4630      	mov	r0, r6
 8023344:	f000 f84e 	bl	80233e4 <_isatty_r>
 8023348:	b128      	cbz	r0, 8023356 <__smakebuf_r+0x70>
 802334a:	89a3      	ldrh	r3, [r4, #12]
 802334c:	f023 0303 	bic.w	r3, r3, #3
 8023350:	f043 0301 	orr.w	r3, r3, #1
 8023354:	81a3      	strh	r3, [r4, #12]
 8023356:	89a3      	ldrh	r3, [r4, #12]
 8023358:	431d      	orrs	r5, r3
 802335a:	81a5      	strh	r5, [r4, #12]
 802335c:	e7cf      	b.n	80232fe <__smakebuf_r+0x18>

0802335e <_raise_r>:
 802335e:	291f      	cmp	r1, #31
 8023360:	b538      	push	{r3, r4, r5, lr}
 8023362:	4604      	mov	r4, r0
 8023364:	460d      	mov	r5, r1
 8023366:	d904      	bls.n	8023372 <_raise_r+0x14>
 8023368:	2316      	movs	r3, #22
 802336a:	6003      	str	r3, [r0, #0]
 802336c:	f04f 30ff 	mov.w	r0, #4294967295
 8023370:	bd38      	pop	{r3, r4, r5, pc}
 8023372:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8023374:	b112      	cbz	r2, 802337c <_raise_r+0x1e>
 8023376:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802337a:	b94b      	cbnz	r3, 8023390 <_raise_r+0x32>
 802337c:	4620      	mov	r0, r4
 802337e:	f000 f853 	bl	8023428 <_getpid_r>
 8023382:	462a      	mov	r2, r5
 8023384:	4601      	mov	r1, r0
 8023386:	4620      	mov	r0, r4
 8023388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802338c:	f000 b83a 	b.w	8023404 <_kill_r>
 8023390:	2b01      	cmp	r3, #1
 8023392:	d00a      	beq.n	80233aa <_raise_r+0x4c>
 8023394:	1c59      	adds	r1, r3, #1
 8023396:	d103      	bne.n	80233a0 <_raise_r+0x42>
 8023398:	2316      	movs	r3, #22
 802339a:	6003      	str	r3, [r0, #0]
 802339c:	2001      	movs	r0, #1
 802339e:	e7e7      	b.n	8023370 <_raise_r+0x12>
 80233a0:	2400      	movs	r4, #0
 80233a2:	4628      	mov	r0, r5
 80233a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80233a8:	4798      	blx	r3
 80233aa:	2000      	movs	r0, #0
 80233ac:	e7e0      	b.n	8023370 <_raise_r+0x12>
	...

080233b0 <raise>:
 80233b0:	4b02      	ldr	r3, [pc, #8]	; (80233bc <raise+0xc>)
 80233b2:	4601      	mov	r1, r0
 80233b4:	6818      	ldr	r0, [r3, #0]
 80233b6:	f7ff bfd2 	b.w	802335e <_raise_r>
 80233ba:	bf00      	nop
 80233bc:	200000e4 	.word	0x200000e4

080233c0 <_fstat_r>:
 80233c0:	b538      	push	{r3, r4, r5, lr}
 80233c2:	2300      	movs	r3, #0
 80233c4:	4d06      	ldr	r5, [pc, #24]	; (80233e0 <_fstat_r+0x20>)
 80233c6:	4604      	mov	r4, r0
 80233c8:	4608      	mov	r0, r1
 80233ca:	4611      	mov	r1, r2
 80233cc:	602b      	str	r3, [r5, #0]
 80233ce:	f7dd fea4 	bl	800111a <_fstat>
 80233d2:	1c43      	adds	r3, r0, #1
 80233d4:	d102      	bne.n	80233dc <_fstat_r+0x1c>
 80233d6:	682b      	ldr	r3, [r5, #0]
 80233d8:	b103      	cbz	r3, 80233dc <_fstat_r+0x1c>
 80233da:	6023      	str	r3, [r4, #0]
 80233dc:	bd38      	pop	{r3, r4, r5, pc}
 80233de:	bf00      	nop
 80233e0:	2002f288 	.word	0x2002f288

080233e4 <_isatty_r>:
 80233e4:	b538      	push	{r3, r4, r5, lr}
 80233e6:	2300      	movs	r3, #0
 80233e8:	4d05      	ldr	r5, [pc, #20]	; (8023400 <_isatty_r+0x1c>)
 80233ea:	4604      	mov	r4, r0
 80233ec:	4608      	mov	r0, r1
 80233ee:	602b      	str	r3, [r5, #0]
 80233f0:	f7dd fea3 	bl	800113a <_isatty>
 80233f4:	1c43      	adds	r3, r0, #1
 80233f6:	d102      	bne.n	80233fe <_isatty_r+0x1a>
 80233f8:	682b      	ldr	r3, [r5, #0]
 80233fa:	b103      	cbz	r3, 80233fe <_isatty_r+0x1a>
 80233fc:	6023      	str	r3, [r4, #0]
 80233fe:	bd38      	pop	{r3, r4, r5, pc}
 8023400:	2002f288 	.word	0x2002f288

08023404 <_kill_r>:
 8023404:	b538      	push	{r3, r4, r5, lr}
 8023406:	2300      	movs	r3, #0
 8023408:	4d06      	ldr	r5, [pc, #24]	; (8023424 <_kill_r+0x20>)
 802340a:	4604      	mov	r4, r0
 802340c:	4608      	mov	r0, r1
 802340e:	4611      	mov	r1, r2
 8023410:	602b      	str	r3, [r5, #0]
 8023412:	f7dd fe21 	bl	8001058 <_kill>
 8023416:	1c43      	adds	r3, r0, #1
 8023418:	d102      	bne.n	8023420 <_kill_r+0x1c>
 802341a:	682b      	ldr	r3, [r5, #0]
 802341c:	b103      	cbz	r3, 8023420 <_kill_r+0x1c>
 802341e:	6023      	str	r3, [r4, #0]
 8023420:	bd38      	pop	{r3, r4, r5, pc}
 8023422:	bf00      	nop
 8023424:	2002f288 	.word	0x2002f288

08023428 <_getpid_r>:
 8023428:	f7dd be0e 	b.w	8001048 <_getpid>

0802342c <_malloc_usable_size_r>:
 802342c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023430:	1f18      	subs	r0, r3, #4
 8023432:	2b00      	cmp	r3, #0
 8023434:	bfbc      	itt	lt
 8023436:	580b      	ldrlt	r3, [r1, r0]
 8023438:	18c0      	addlt	r0, r0, r3
 802343a:	4770      	bx	lr

0802343c <_init>:
 802343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802343e:	bf00      	nop
 8023440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023442:	bc08      	pop	{r3}
 8023444:	469e      	mov	lr, r3
 8023446:	4770      	bx	lr

08023448 <_fini>:
 8023448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802344a:	bf00      	nop
 802344c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802344e:	bc08      	pop	{r3}
 8023450:	469e      	mov	lr, r3
 8023452:	4770      	bx	lr
