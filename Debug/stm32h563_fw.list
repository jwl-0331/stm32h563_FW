
stm32h563_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024fbc  08000250  08000250  00010250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .Table4CLI    00000030  0802520c  0802520c  0003520c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       000049e8  0802523c  0802523c  0003523c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08029c24  08029c24  0004012c  2**0
                  CONTENTS
  5 .ARM          00000008  08029c24  08029c24  00039c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08029c2c  08029c2c  0004012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08029c2c  08029c2c  00039c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08029c30  08029c30  00039c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000012c  20050000  08029c34  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0002ef40  2005012c  08029d60  0004012c  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  2007f06c  08029d60  0004f06c  2**0
                  ALLOC
 12 .lwip_sec     00000200  20040000  20040000  00050000  2**2
                  ALLOC
 13 .ARM.attributes 00000036  00000000  00000000  0004012c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00040162  2**0
                  CONTENTS, READONLY
 15 .debug_info   0004bb79  00000000  00000000  000401a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000b338  00000000  00000000  0008bd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000037f0  00000000  00000000  00097058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002bbd  00000000  00000000  0009a848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004ad35  00000000  00000000  0009d405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000587dd  00000000  00000000  000e813a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00178fd9  00000000  00000000  00140917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000f3e8  00000000  00000000  002b98f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004b  00000000  00000000  002c8cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2005012c 	.word	0x2005012c
 800026c:	00000000 	.word	0x00000000
 8000270:	080251f4 	.word	0x080251f4

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20050130 	.word	0x20050130
 800028c:	080251f4 	.word	0x080251f4

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b982 	b.w	80005d0 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ea:	460d      	mov	r5, r1
 80002ec:	4604      	mov	r4, r0
 80002ee:	460f      	mov	r7, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d146      	bne.n	8000382 <__udivmoddi4+0x9e>
 80002f4:	428a      	cmp	r2, r1
 80002f6:	4694      	mov	ip, r2
 80002f8:	d95e      	bls.n	80003b8 <__udivmoddi4+0xd4>
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	b143      	cbz	r3, 8000312 <__udivmoddi4+0x2e>
 8000300:	fa02 fc03 	lsl.w	ip, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	409c      	lsls	r4, r3
 800030c:	fa20 f202 	lsr.w	r2, r0, r2
 8000310:	4317      	orrs	r7, r2
 8000312:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000316:	fa1f f58c 	uxth.w	r5, ip
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fbb7 f1fe 	udiv	r1, r7, lr
 8000320:	fb0e 7711 	mls	r7, lr, r1, r7
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800032c:	4290      	cmp	r0, r2
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x5e>
 8000330:	eb1c 0202 	adds.w	r2, ip, r2
 8000334:	f101 37ff 	add.w	r7, r1, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x5c>
 800033a:	4290      	cmp	r0, r2
 800033c:	f200 8134 	bhi.w	80005a8 <__udivmoddi4+0x2c4>
 8000340:	4639      	mov	r1, r7
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	fb00 f505 	mul.w	r5, r0, r5
 8000352:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000356:	42a5      	cmp	r5, r4
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x88>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x86>
 8000364:	42a5      	cmp	r5, r4
 8000366:	f200 8119 	bhi.w	800059c <__udivmoddi4+0x2b8>
 800036a:	4610      	mov	r0, r2
 800036c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	2100      	movs	r1, #0
 8000374:	b11e      	cbz	r6, 800037e <__udivmoddi4+0x9a>
 8000376:	40dc      	lsrs	r4, r3
 8000378:	2300      	movs	r3, #0
 800037a:	e9c6 4300 	strd	r4, r3, [r6]
 800037e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0xb4>
 8000386:	2e00      	cmp	r6, #0
 8000388:	f000 80fc 	beq.w	8000584 <__udivmoddi4+0x2a0>
 800038c:	2100      	movs	r1, #0
 800038e:	e9c6 0500 	strd	r0, r5, [r6]
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	d14c      	bne.n	800043a <__udivmoddi4+0x156>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f0c0 80f2 	bcc.w	800058a <__udivmoddi4+0x2a6>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f240 80ef 	bls.w	800058a <__udivmoddi4+0x2a6>
 80003ac:	4608      	mov	r0, r1
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0e5      	beq.n	800037e <__udivmoddi4+0x9a>
 80003b2:	e9c6 4700 	strd	r4, r7, [r6]
 80003b6:	e7e2      	b.n	800037e <__udivmoddi4+0x9a>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xd8>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f382 	clz	r3, r2
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 809f 	bne.w	8000504 <__udivmoddi4+0x220>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f5fe 	udiv	r5, r2, lr
 80003d6:	fb0e 2015 	mls	r0, lr, r5, r2
 80003da:	0c22      	lsrs	r2, r4, #16
 80003dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e0:	fb07 f005 	mul.w	r0, r7, r5
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d90f      	bls.n	8000408 <__udivmoddi4+0x124>
 80003e8:	eb1c 0202 	adds.w	r2, ip, r2
 80003ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f0:	bf2c      	ite	cs
 80003f2:	f04f 0901 	movcs.w	r9, #1
 80003f6:	f04f 0900 	movcc.w	r9, #0
 80003fa:	4290      	cmp	r0, r2
 80003fc:	d903      	bls.n	8000406 <__udivmoddi4+0x122>
 80003fe:	f1b9 0f00 	cmp.w	r9, #0
 8000402:	f000 80ce 	beq.w	80005a2 <__udivmoddi4+0x2be>
 8000406:	4645      	mov	r5, r8
 8000408:	1a12      	subs	r2, r2, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000410:	fb0e 2210 	mls	r2, lr, r0, r2
 8000414:	fb00 f707 	mul.w	r7, r0, r7
 8000418:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800041c:	42a7      	cmp	r7, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x14e>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 32ff 	add.w	r2, r0, #4294967295
 8000428:	d202      	bcs.n	8000430 <__udivmoddi4+0x14c>
 800042a:	42a7      	cmp	r7, r4
 800042c:	f200 80b3 	bhi.w	8000596 <__udivmoddi4+0x2b2>
 8000430:	4610      	mov	r0, r2
 8000432:	1be4      	subs	r4, r4, r7
 8000434:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000438:	e79c      	b.n	8000374 <__udivmoddi4+0x90>
 800043a:	f1c1 0420 	rsb	r4, r1, #32
 800043e:	408b      	lsls	r3, r1
 8000440:	fa05 fc01 	lsl.w	ip, r5, r1
 8000444:	fa22 f704 	lsr.w	r7, r2, r4
 8000448:	40e5      	lsrs	r5, r4
 800044a:	408a      	lsls	r2, r1
 800044c:	431f      	orrs	r7, r3
 800044e:	fa20 f304 	lsr.w	r3, r0, r4
 8000452:	4088      	lsls	r0, r1
 8000454:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000458:	ea43 030c 	orr.w	r3, r3, ip
 800045c:	fa1f fc87 	uxth.w	ip, r7
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb5 fef8 	udiv	lr, r5, r8
 8000468:	fb08 551e 	mls	r5, r8, lr, r5
 800046c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000470:	fb0e f90c 	mul.w	r9, lr, ip
 8000474:	45a9      	cmp	r9, r5
 8000476:	d90e      	bls.n	8000496 <__udivmoddi4+0x1b2>
 8000478:	197d      	adds	r5, r7, r5
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	bf2c      	ite	cs
 8000480:	f04f 0b01 	movcs.w	fp, #1
 8000484:	f04f 0b00 	movcc.w	fp, #0
 8000488:	45a9      	cmp	r9, r5
 800048a:	d903      	bls.n	8000494 <__udivmoddi4+0x1b0>
 800048c:	f1bb 0f00 	cmp.w	fp, #0
 8000490:	f000 808d 	beq.w	80005ae <__udivmoddi4+0x2ca>
 8000494:	46d6      	mov	lr, sl
 8000496:	eba5 0509 	sub.w	r5, r5, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb5 f3f8 	udiv	r3, r5, r8
 80004a2:	fb08 5513 	mls	r5, r8, r3, r5
 80004a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004aa:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004ae:	45ac      	cmp	ip, r5
 80004b0:	d906      	bls.n	80004c0 <__udivmoddi4+0x1dc>
 80004b2:	197d      	adds	r5, r7, r5
 80004b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x1da>
 80004ba:	45ac      	cmp	ip, r5
 80004bc:	d87e      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004be:	4643      	mov	r3, r8
 80004c0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004c4:	eba5 050c 	sub.w	r5, r5, ip
 80004c8:	fba3 9802 	umull	r9, r8, r3, r2
 80004cc:	4545      	cmp	r5, r8
 80004ce:	46ce      	mov	lr, r9
 80004d0:	46c4      	mov	ip, r8
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x1f6>
 80004d4:	d106      	bne.n	80004e4 <__udivmoddi4+0x200>
 80004d6:	4548      	cmp	r0, r9
 80004d8:	d204      	bcs.n	80004e4 <__udivmoddi4+0x200>
 80004da:	3b01      	subs	r3, #1
 80004dc:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e0:	eb68 0c07 	sbc.w	ip, r8, r7
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d06f      	beq.n	80005c8 <__udivmoddi4+0x2e4>
 80004e8:	ebb0 020e 	subs.w	r2, r0, lr
 80004ec:	eb65 050c 	sbc.w	r5, r5, ip
 80004f0:	40ca      	lsrs	r2, r1
 80004f2:	fa05 f404 	lsl.w	r4, r5, r4
 80004f6:	40cd      	lsrs	r5, r1
 80004f8:	4618      	mov	r0, r3
 80004fa:	4314      	orrs	r4, r2
 80004fc:	2100      	movs	r1, #0
 80004fe:	e9c6 4500 	strd	r4, r5, [r6]
 8000502:	e73c      	b.n	800037e <__udivmoddi4+0x9a>
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	f1c3 0220 	rsb	r2, r3, #32
 800050c:	4099      	lsls	r1, r3
 800050e:	409c      	lsls	r4, r3
 8000510:	40d5      	lsrs	r5, r2
 8000512:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000516:	fa20 f202 	lsr.w	r2, r0, r2
 800051a:	fa1f f78c 	uxth.w	r7, ip
 800051e:	fbb5 f0fe 	udiv	r0, r5, lr
 8000522:	430a      	orrs	r2, r1
 8000524:	fb0e 5510 	mls	r5, lr, r0, r5
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052e:	fb00 f507 	mul.w	r5, r0, r7
 8000532:	428d      	cmp	r5, r1
 8000534:	d90e      	bls.n	8000554 <__udivmoddi4+0x270>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	bf2c      	ite	cs
 8000540:	f04f 0901 	movcs.w	r9, #1
 8000544:	f04f 0900 	movcc.w	r9, #0
 8000548:	428d      	cmp	r5, r1
 800054a:	d902      	bls.n	8000552 <__udivmoddi4+0x26e>
 800054c:	f1b9 0f00 	cmp.w	r9, #0
 8000550:	d031      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 8000552:	4640      	mov	r0, r8
 8000554:	1b49      	subs	r1, r1, r5
 8000556:	b292      	uxth	r2, r2
 8000558:	fbb1 f5fe 	udiv	r5, r1, lr
 800055c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000560:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000564:	fb05 f107 	mul.w	r1, r5, r7
 8000568:	4291      	cmp	r1, r2
 800056a:	d907      	bls.n	800057c <__udivmoddi4+0x298>
 800056c:	eb1c 0202 	adds.w	r2, ip, r2
 8000570:	f105 38ff 	add.w	r8, r5, #4294967295
 8000574:	d201      	bcs.n	800057a <__udivmoddi4+0x296>
 8000576:	4291      	cmp	r1, r2
 8000578:	d823      	bhi.n	80005c2 <__udivmoddi4+0x2de>
 800057a:	4645      	mov	r5, r8
 800057c:	1a52      	subs	r2, r2, r1
 800057e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000582:	e726      	b.n	80003d2 <__udivmoddi4+0xee>
 8000584:	4631      	mov	r1, r6
 8000586:	4630      	mov	r0, r6
 8000588:	e6f9      	b.n	800037e <__udivmoddi4+0x9a>
 800058a:	1a84      	subs	r4, r0, r2
 800058c:	eb65 0203 	sbc.w	r2, r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	4617      	mov	r7, r2
 8000594:	e70b      	b.n	80003ae <__udivmoddi4+0xca>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74a      	b.n	8000432 <__udivmoddi4+0x14e>
 800059c:	4464      	add	r4, ip
 800059e:	3802      	subs	r0, #2
 80005a0:	e6e4      	b.n	800036c <__udivmoddi4+0x88>
 80005a2:	3d02      	subs	r5, #2
 80005a4:	4462      	add	r2, ip
 80005a6:	e72f      	b.n	8000408 <__udivmoddi4+0x124>
 80005a8:	3902      	subs	r1, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e6c9      	b.n	8000342 <__udivmoddi4+0x5e>
 80005ae:	f1ae 0e02 	sub.w	lr, lr, #2
 80005b2:	443d      	add	r5, r7
 80005b4:	e76f      	b.n	8000496 <__udivmoddi4+0x1b2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4461      	add	r1, ip
 80005ba:	e7cb      	b.n	8000554 <__udivmoddi4+0x270>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443d      	add	r5, r7
 80005c0:	e77e      	b.n	80004c0 <__udivmoddi4+0x1dc>
 80005c2:	3d02      	subs	r5, #2
 80005c4:	4462      	add	r2, ip
 80005c6:	e7d9      	b.n	800057c <__udivmoddi4+0x298>
 80005c8:	4618      	mov	r0, r3
 80005ca:	4631      	mov	r1, r6
 80005cc:	e6d7      	b.n	800037e <__udivmoddi4+0x9a>
 80005ce:	bf00      	nop

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <AppMain>:
    HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET);
  }
}

void AppMain()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af02      	add	r7, sp, #8
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80005da:	b662      	cpsie	i
}
 80005dc:	bf00      	nop
  __enable_irq();

  RESET_Init();
 80005de:	f003 fac9 	bl	8003b74 <RESET_Init>
  LED_Init();
 80005e2:	f003 fa17 	bl	8003a14 <LED_Init>
  LED_SimpleAnimation();
 80005e6:	f003 fa6f 	bl	8003ac8 <LED_SimpleAnimation>

  svDebugInit();
 80005ea:	f003 fcd9 	bl	8003fa0 <svDebugInit>
  UART_Init(_DEF_UART1, 115200);
 80005ee:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005f2:	2000      	movs	r0, #0
 80005f4:	f003 fb26 	bl	8003c44 <UART_Init>

  CAN_Init();
 80005f8:	f001 ff5a 	bl	80024b0 <CAN_Init>
  CAN_Open(_DEF_CAN1, CAN_NORMAL, CAN_CLASSIC, CAN_1M, CAN_2M);
 80005fc:	2305      	movs	r3, #5
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2000      	movs	r0, #0
 8000608:	f001 ffd6 	bl	80025b8 <CAN_Open>

  //ethernetif_notify_conn_changed(&gnetif);

  // Chk Reset Count
  //uint32_t pre_time = HAL_GetTick();
  DebugMsg(DEBUGMSG_APP, "\r\n<< svCLI TEST : >>\r\n");
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <AppMain+0x84>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <AppMain+0x46>
 8000614:	4811      	ldr	r0, [pc, #68]	; (800065c <AppMain+0x88>)
 8000616:	f003 fcf7 	bl	8004008 <svDebugMessage>
  /* Init scheduler */
  osKernelInitialize();
 800061a:	f010 fcdb 	bl	8010fd4 <osKernelInitialize>

  g_hTaskMain = osThreadNew(TaskMain, NULL, &TaskMain_attributes);
 800061e:	4a10      	ldr	r2, [pc, #64]	; (8000660 <AppMain+0x8c>)
 8000620:	2100      	movs	r1, #0
 8000622:	4810      	ldr	r0, [pc, #64]	; (8000664 <AppMain+0x90>)
 8000624:	f010 fd3a 	bl	801109c <osThreadNew>
 8000628:	4603      	mov	r3, r0
 800062a:	4a0f      	ldr	r2, [pc, #60]	; (8000668 <AppMain+0x94>)
 800062c:	6013      	str	r3, [r2, #0]
  echoTaskHandle = osThreadNew(StartEchoTask, NULL, &echoTask_attributes);
 800062e:	4a0f      	ldr	r2, [pc, #60]	; (800066c <AppMain+0x98>)
 8000630:	2100      	movs	r1, #0
 8000632:	480f      	ldr	r0, [pc, #60]	; (8000670 <AppMain+0x9c>)
 8000634:	f010 fd32 	bl	801109c <osThreadNew>
 8000638:	4603      	mov	r3, r0
 800063a:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <AppMain+0xa0>)
 800063c:	6013      	str	r3, [r2, #0]
  tcpClientTaskHandle = osThreadNew(StartTcpClientTask, NULL, &tcpClientTask_attributes);
 800063e:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <AppMain+0xa4>)
 8000640:	2100      	movs	r1, #0
 8000642:	480e      	ldr	r0, [pc, #56]	; (800067c <AppMain+0xa8>)
 8000644:	f010 fd2a 	bl	801109c <osThreadNew>
 8000648:	4603      	mov	r3, r0
 800064a:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <AppMain+0xac>)
 800064c:	6013      	str	r3, [r2, #0]

  osKernelStart();
 800064e:	f010 fce7 	bl	8011020 <osKernelStart>
  while(1)
  {
    /* End OF ECHO SERVER  */


    svDebugProcess();
 8000652:	f003 fc4d 	bl	8003ef0 <svDebugProcess>
 8000656:	e7fc      	b.n	8000652 <AppMain+0x7e>
 8000658:	2005003c 	.word	0x2005003c
 800065c:	08025264 	.word	0x08025264
 8000660:	08029780 	.word	0x08029780
 8000664:	08000685 	.word	0x08000685
 8000668:	20050148 	.word	0x20050148
 800066c:	080297a4 	.word	0x080297a4
 8000670:	080006ad 	.word	0x080006ad
 8000674:	2005014c 	.word	0x2005014c
 8000678:	080297c8 	.word	0x080297c8
 800067c:	080007a5 	.word	0x080007a5
 8000680:	20050150 	.word	0x20050150

08000684 <TaskMain>:
    */
  }
}

void TaskMain(void* argument)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  MX_LWIP_Init();
 800068c:	f000 ff84 	bl	8001598 <MX_LWIP_Init>

  //echoTaskHandle = osThreadNew(StartEchoTask, NULL, &echoTask_attributes);
  //tcpClientTaskHandle = osThreadNew(StartTcpClientTask, NULL, &tcpClientTask_attributes);
  for(;;)
  {
    svDebugProcess();
 8000690:	f003 fc2e 	bl	8003ef0 <svDebugProcess>
    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin); //toggle running led
 8000694:	2101      	movs	r1, #1
 8000696:	4804      	ldr	r0, [pc, #16]	; (80006a8 <TaskMain+0x24>)
 8000698:	f007 f84c 	bl	8007734 <HAL_GPIO_TogglePin>
    osDelay(500);
 800069c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a0:	f010 fd8e 	bl	80111c0 <osDelay>
    svDebugProcess();
 80006a4:	e7f4      	b.n	8000690 <TaskMain+0xc>
 80006a6:	bf00      	nop
 80006a8:	42020400 	.word	0x42020400

080006ac <StartEchoTask>:
  }

}

void StartEchoTask(void const *argument)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	6078      	str	r0, [r7, #4]
  void *data;
  u16_t len;

  LWIP_UNUSED_ARG(argument);

  conn = netconn_new(NETCONN_TCP); //new tcp netconn , create new connection
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	2010      	movs	r0, #16
 80006ba:	f014 fa15 	bl	8014ae8 <netconn_new_with_proto_and_callback>
 80006be:	61f8      	str	r0, [r7, #28]

  if (conn != NULL)
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d062      	beq.n	800078c <StartEchoTask+0xe0>
  {
    err = netconn_bind(conn, NULL, 7); //bind to port 7
 80006c6:	2207      	movs	r2, #7
 80006c8:	2100      	movs	r1, #0
 80006ca:	69f8      	ldr	r0, [r7, #28]
 80006cc:	f014 fac6 	bl	8014c5c <netconn_bind>
 80006d0:	4603      	mov	r3, r0
 80006d2:	76fb      	strb	r3, [r7, #27]

    if (err == ERR_OK)
 80006d4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d153      	bne.n	8000784 <StartEchoTask+0xd8>
    {
      netconn_listen(conn); //listen at port 7
 80006dc:	21ff      	movs	r1, #255	; 0xff
 80006de:	69f8      	ldr	r0, [r7, #28]
 80006e0:	f014 fb2c 	bl	8014d3c <netconn_listen_with_backlog>

      while (1)
      {
        accept_err = netconn_accept(conn, &newconn); //accept new connection
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	4619      	mov	r1, r3
 80006ea:	69f8      	ldr	r0, [r7, #28]
 80006ec:	f014 fb52 	bl	8014d94 <netconn_accept>
 80006f0:	4603      	mov	r3, r0
 80006f2:	76bb      	strb	r3, [r7, #26]

        if (accept_err == ERR_OK) //accept ok
 80006f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f3      	bne.n	80006e4 <StartEchoTask+0x38>
        {
          DebugMsg(DEBUGMSG_APP, "\r\nTCP Connected\r\n");
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <StartEchoTask+0xe8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d92c      	bls.n	800075e <StartEchoTask+0xb2>
 8000704:	4824      	ldr	r0, [pc, #144]	; (8000798 <StartEchoTask+0xec>)
 8000706:	f003 fc7f 	bl	8004008 <svDebugMessage>
          while (netconn_recv(newconn, &buf) == ERR_OK) //receive data
 800070a:	e028      	b.n	800075e <StartEchoTask+0xb2>
          {
            do
            {
              netbuf_data(buf, &data, &len); //receive data pointer & length  buf -> data
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	f107 020a 	add.w	r2, r7, #10
 8000712:	f107 010c 	add.w	r1, r7, #12
 8000716:	4618      	mov	r0, r3
 8000718:	f016 fcb2 	bl	8017080 <netbuf_data>
              DebugMsg(DEBUGMSG_APP, "\r\nMSG FROM Client: %s\r\n",data);
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <StartEchoTask+0xe8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d904      	bls.n	800072e <StartEchoTask+0x82>
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4619      	mov	r1, r3
 8000728:	481c      	ldr	r0, [pc, #112]	; (800079c <StartEchoTask+0xf0>)
 800072a:	f003 fc6d 	bl	8004008 <svDebugMessage>
              netconn_write(newconn, data, len, NETCONN_COPY); //echo back to the client
 800072e:	6978      	ldr	r0, [r7, #20]
 8000730:	68f9      	ldr	r1, [r7, #12]
 8000732:	897b      	ldrh	r3, [r7, #10]
 8000734:	461a      	mov	r2, r3
 8000736:	2300      	movs	r3, #0
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2301      	movs	r3, #1
 800073c:	f014 fdc4 	bl	80152c8 <netconn_write_partly>

              HAL_GPIO_TogglePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin); //toggle data led
 8000740:	2110      	movs	r1, #16
 8000742:	4817      	ldr	r0, [pc, #92]	; (80007a0 <StartEchoTask+0xf4>)
 8000744:	f006 fff6 	bl	8007734 <HAL_GPIO_TogglePin>
            }
            while (netbuf_next(buf) >= 0); //check buffer empty
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	4618      	mov	r0, r3
 800074c:	f016 fce2 	bl	8017114 <netbuf_next>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	dada      	bge.n	800070c <StartEchoTask+0x60>

            netbuf_delete(buf); //clear buffer
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	4618      	mov	r0, r3
 800075a:	f016 fc71 	bl	8017040 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) //receive data
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	f107 0210 	add.w	r2, r7, #16
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f014 fd34 	bl	80151d4 <netconn_recv>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d0cc      	beq.n	800070c <StartEchoTask+0x60>
          }

          netconn_close(newconn); //close session
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	4618      	mov	r0, r3
 8000776:	f014 fea9 	bl	80154cc <netconn_close>
          netconn_delete(newconn); //free memory
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	4618      	mov	r0, r3
 800077e:	f014 fa51 	bl	8014c24 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn); //accept new connection
 8000782:	e7af      	b.n	80006e4 <StartEchoTask+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn); //free memory
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	4618      	mov	r0, r3
 8000788:	f014 fa4c 	bl	8014c24 <netconn_delete>
    }
  }
}
 800078c:	bf00      	nop
 800078e:	3720      	adds	r7, #32
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2005003c 	.word	0x2005003c
 8000798:	0802527c 	.word	0x0802527c
 800079c:	08025290 	.word	0x08025290
 80007a0:	42021400 	.word	0x42021400

080007a4 <StartTcpClientTask>:

void StartTcpClientTask(void const *argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	6078      	str	r0, [r7, #4]

  LWIP_UNUSED_ARG(argument);

  while (1)
  {
    if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 80007ac:	4b51      	ldr	r3, [pc, #324]	; (80008f4 <StartTcpClientTask+0x150>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d007      	beq.n	80007c4 <StartTcpClientTask+0x20>
 80007b4:	4b4f      	ldr	r3, [pc, #316]	; (80008f4 <StartTcpClientTask+0x150>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d003      	beq.n	80007c4 <StartTcpClientTask+0x20>
 80007bc:	4b4d      	ldr	r3, [pc, #308]	; (80008f4 <StartTcpClientTask+0x150>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d104      	bne.n	80007ce <StartTcpClientTask+0x2a>
    {
      osDelay(1000);
 80007c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c8:	f010 fcfa 	bl	80111c0 <osDelay>
      continue;
 80007cc:	e090      	b.n	80008f0 <StartTcpClientTask+0x14c>
    }
    else //valid ip address
    {
      osDelay(100); //request interval
 80007ce:	2064      	movs	r0, #100	; 0x64
 80007d0:	f010 fcf6 	bl	80111c0 <osDelay>
    }

    nRead = 0; //clear indexes
 80007d4:	2300      	movs	r3, #0
 80007d6:	83fb      	strh	r3, [r7, #30]
    nWritten = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	83bb      	strh	r3, [r7, #28]

    conn = netconn_new(NETCONN_TCP); //new tcp netconn
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	2010      	movs	r0, #16
 80007e2:	f014 f981 	bl	8014ae8 <netconn_new_with_proto_and_callback>
 80007e6:	61b8      	str	r0, [r7, #24]

    if (conn != NULL)
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0de      	beq.n	80007ac <StartTcpClientTask+0x8>
    {
      IP4_ADDR(&server_addr, SERVER_IP1, SERVER_IP2, SERVER_IP3, SERVER_IP4); //server ip
 80007ee:	4b42      	ldr	r3, [pc, #264]	; (80008f8 <StartTcpClientTask+0x154>)
 80007f0:	4a42      	ldr	r2, [pc, #264]	; (80008fc <StartTcpClientTask+0x158>)
 80007f2:	601a      	str	r2, [r3, #0]
      err = netconn_connect(conn, &server_addr, SERVER_PORT); //connect to the server
 80007f4:	f240 42d2 	movw	r2, #1234	; 0x4d2
 80007f8:	493f      	ldr	r1, [pc, #252]	; (80008f8 <StartTcpClientTask+0x154>)
 80007fa:	69b8      	ldr	r0, [r7, #24]
 80007fc:	f014 fa66 	bl	8014ccc <netconn_connect>
 8000800:	4603      	mov	r3, r0
 8000802:	75fb      	strb	r3, [r7, #23]

      if (err != ERR_OK)
 8000804:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d003      	beq.n	8000814 <StartTcpClientTask+0x70>
      {
        netconn_delete(conn); //free memory
 800080c:	69b8      	ldr	r0, [r7, #24]
 800080e:	f014 fa09 	bl	8014c24 <netconn_delete>
        continue;
 8000812:	e06d      	b.n	80008f0 <StartTcpClientTask+0x14c>
      }

      memset(&packet, 0, sizeof(struct time_packet));
 8000814:	2205      	movs	r2, #5
 8000816:	2100      	movs	r1, #0
 8000818:	4839      	ldr	r0, [pc, #228]	; (8000900 <StartTcpClientTask+0x15c>)
 800081a:	f023 fda7 	bl	802436c <memset>
      packet.minute = 30;
      packet.second = 0;
      packet.dummy[0] = 11;
      packet.tail = 0xEA; //tail
      */
      packet.dummy[0] = 'H';
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <StartTcpClientTask+0x15c>)
 8000820:	2248      	movs	r2, #72	; 0x48
 8000822:	701a      	strb	r2, [r3, #0]
      packet.dummy[1] = 'E';
 8000824:	4b36      	ldr	r3, [pc, #216]	; (8000900 <StartTcpClientTask+0x15c>)
 8000826:	2245      	movs	r2, #69	; 0x45
 8000828:	705a      	strb	r2, [r3, #1]
      packet.dummy[2] = 'L';
 800082a:	4b35      	ldr	r3, [pc, #212]	; (8000900 <StartTcpClientTask+0x15c>)
 800082c:	224c      	movs	r2, #76	; 0x4c
 800082e:	709a      	strb	r2, [r3, #2]
      packet.dummy[3] = 'L';
 8000830:	4b33      	ldr	r3, [pc, #204]	; (8000900 <StartTcpClientTask+0x15c>)
 8000832:	224c      	movs	r2, #76	; 0x4c
 8000834:	70da      	strb	r2, [r3, #3]
      packet.dummy[4] = 'O';
 8000836:	4b32      	ldr	r3, [pc, #200]	; (8000900 <StartTcpClientTask+0x15c>)
 8000838:	224f      	movs	r2, #79	; 0x4f
 800083a:	711a      	strb	r2, [r3, #4]

      do
      {
        if (netconn_write_partly(
            conn, //connection
            (const void*) (&packet + nWritten), //buffer pointer
 800083c:	8bba      	ldrh	r2, [r7, #28]
 800083e:	4613      	mov	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	4a2e      	ldr	r2, [pc, #184]	; (8000900 <StartTcpClientTask+0x15c>)
 8000846:	1899      	adds	r1, r3, r2
        if (netconn_write_partly(
 8000848:	8bbb      	ldrh	r3, [r7, #28]
 800084a:	f1c3 0205 	rsb	r2, r3, #5
 800084e:	f107 030a 	add.w	r3, r7, #10
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2300      	movs	r3, #0
 8000856:	69b8      	ldr	r0, [r7, #24]
 8000858:	f014 fd36 	bl	80152c8 <netconn_write_partly>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d006      	beq.n	8000870 <StartTcpClientTask+0xcc>
            (sizeof(struct time_packet) - nWritten), //buffer length
            NETCONN_NOFLAG, //no copy
            (size_t*) &len) != ERR_OK) //written len
        {
          netconn_close(conn); //close session
 8000862:	69b8      	ldr	r0, [r7, #24]
 8000864:	f014 fe32 	bl	80154cc <netconn_close>
          netconn_delete(conn); //free memory
 8000868:	69b8      	ldr	r0, [r7, #24]
 800086a:	f014 f9db 	bl	8014c24 <netconn_delete>
          continue;
 800086e:	e003      	b.n	8000878 <StartTcpClientTask+0xd4>
        }
        else
        {
          nWritten += len;  // write buffer index++
 8000870:	897a      	ldrh	r2, [r7, #10]
 8000872:	8bbb      	ldrh	r3, [r7, #28]
 8000874:	4413      	add	r3, r2
 8000876:	83bb      	strh	r3, [r7, #28]
        }
      }
      while (nWritten < sizeof(struct time_packet)); //send request
 8000878:	8bbb      	ldrh	r3, [r7, #28]
 800087a:	2b04      	cmp	r3, #4
 800087c:	d9de      	bls.n	800083c <StartTcpClientTask+0x98>

      while (netconn_recv(conn, &buf) == ERR_OK) //receive the response
 800087e:	e021      	b.n	80008c4 <StartTcpClientTask+0x120>
      {
        do
        {
          netbuf_data(buf, &data, &len); //receive data pointer & length
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	f107 020a 	add.w	r2, r7, #10
 8000886:	f107 010c 	add.w	r1, r7, #12
 800088a:	4618      	mov	r0, r3
 800088c:	f016 fbf8 	bl	8017080 <netbuf_data>

          memcpy(&packet + nRead, data, len);
 8000890:	8bfa      	ldrh	r2, [r7, #30]
 8000892:	4613      	mov	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	4a19      	ldr	r2, [pc, #100]	; (8000900 <StartTcpClientTask+0x15c>)
 800089a:	4413      	add	r3, r2
 800089c:	68f9      	ldr	r1, [r7, #12]
 800089e:	897a      	ldrh	r2, [r7, #10]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f023 fdfc 	bl	802449e <memcpy>
          nRead += len;
 80008a6:	897a      	ldrh	r2, [r7, #10]
 80008a8:	8bfb      	ldrh	r3, [r7, #30]
 80008aa:	4413      	add	r3, r2
 80008ac:	83fb      	strh	r3, [r7, #30]
        }
        while (netbuf_next(buf) >= 0); //check buffer empty
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f016 fc2f 	bl	8017114 <netbuf_next>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	dae1      	bge.n	8000880 <StartTcpClientTask+0xdc>
        netbuf_delete(buf); //clear buffer
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	4618      	mov	r0, r3
 80008c0:	f016 fbbe 	bl	8017040 <netbuf_delete>
      while (netconn_recv(conn, &buf) == ERR_OK) //receive the response
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	69b8      	ldr	r0, [r7, #24]
 80008cc:	f014 fc82 	bl	80151d4 <netconn_recv>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d0d4      	beq.n	8000880 <StartTcpClientTask+0xdc>
      }

      if (nRead == sizeof(struct time_packet) )//&& packet.type == RESP) //if received length is valid
 80008d6:	8bfb      	ldrh	r3, [r7, #30]
 80008d8:	2b05      	cmp	r3, #5
 80008da:	d103      	bne.n	80008e4 <StartTcpClientTask+0x140>
      {
        //printf("%04d-%02d-%02d %02d:%02d:%02d\n", packet.year + 2000, packet.month, packet.day, packet.hour, packet.minute, packet.second); //print time information
        HAL_GPIO_TogglePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin); //toggle data led
 80008dc:	2110      	movs	r1, #16
 80008de:	4809      	ldr	r0, [pc, #36]	; (8000904 <StartTcpClientTask+0x160>)
 80008e0:	f006 ff28 	bl	8007734 <HAL_GPIO_TogglePin>
      }

      netconn_close(conn); //close session
 80008e4:	69b8      	ldr	r0, [r7, #24]
 80008e6:	f014 fdf1 	bl	80154cc <netconn_close>
      netconn_delete(conn); //free memory
 80008ea:	69b8      	ldr	r0, [r7, #24]
 80008ec:	f014 f99a 	bl	8014c24 <netconn_delete>
    if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 80008f0:	e75c      	b.n	80007ac <StartTcpClientTask+0x8>
 80008f2:	bf00      	nop
 80008f4:	200502e0 	.word	0x200502e0
 80008f8:	20050154 	.word	0x20050154
 80008fc:	2adba8c0 	.word	0x2adba8c0
 8000900:	20050158 	.word	0x20050158
 8000904:	42021400 	.word	0x42021400

08000908 <HAL_GPIO_EXTI_Rising_Callback>:
    }
  }
}

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == USER_BUTTON_Pin)
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000918:	d103      	bne.n	8000922 <HAL_GPIO_EXTI_Rising_Callback+0x1a>
  {
    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 800091a:	2101      	movs	r1, #1
 800091c:	4803      	ldr	r0, [pc, #12]	; (800092c <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 800091e:	f006 ff09 	bl	8007734 <HAL_GPIO_TogglePin>
  }
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	42020400 	.word	0x42020400

08000930 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, char *pcTaskName)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
  /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */

  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_SET); //turn on red led when detects stack overflow
 800093a:	2201      	movs	r2, #1
 800093c:	2110      	movs	r1, #16
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <vApplicationStackOverflowHook+0x1c>)
 8000940:	f006 fee0 	bl	8007704 <HAL_GPIO_WritePin>
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	42021800 	.word	0x42021800

08000950 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000958:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800095c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	2b00      	cmp	r3, #0
 8000966:	d013      	beq.n	8000990 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000968:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800096c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000970:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00b      	beq.n	8000990 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000978:	e000      	b.n	800097c <ITM_SendChar+0x2c>
    {
      __NOP();
 800097a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800097c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0f9      	beq.n	800097a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000986:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000990:	687b      	ldr	r3, [r7, #4]
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* print 를 이용한 SWV 출력 */
int _write(int file, char *ptr, int len)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	60f8      	str	r0, [r7, #12]
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
 80009ae:	e009      	b.n	80009c4 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	60ba      	str	r2, [r7, #8]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ffc9 	bl	8000950 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3301      	adds	r3, #1
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbf1      	blt.n	80009b0 <_write+0x12>
  }
  return len;
 80009cc:	687b      	ldr	r3, [r7, #4]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009dc:	f003 fb4a 	bl	8004074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e0:	f000 f812 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e4:	f000 f92e 	bl	8000c44 <MX_GPIO_Init>
  MX_FLASH_Init();
 80009e8:	f000 f878 	bl	8000adc <MX_FLASH_Init>
  MX_ICACHE_Init();
 80009ec:	f000 f888 	bl	8000b00 <MX_ICACHE_Init>
  //MX_USART2_UART_Init();
  //MX_RTC_Init();
  MX_LPUART1_UART_Init();
 80009f0:	f000 f892 	bl	8000b18 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80009f4:	f000 f8da 	bl	8000bac <MX_USART3_UART_Init>
  //MX_FDCAN1_Init();
  //MX_ETH_Init();
  /* USER CODE BEGIN 2 */
  printf("Don't remove this printf to prevent hard fault.\r\n");
 80009f8:	4802      	ldr	r0, [pc, #8]	; (8000a04 <main+0x2c>)
 80009fa:	f023 fb53 	bl	80240a4 <puts>
  /* Start scheduler */
  osKernelStart();
#endif

#if 1
  AppMain();
 80009fe:	f7ff fde9 	bl	80005d4 <AppMain>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <main+0x2a>
 8000a04:	080252b4 	.word	0x080252b4

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b09c      	sub	sp, #112	; 0x70
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	2250      	movs	r2, #80	; 0x50
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f023 fca8 	bl	802436c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
 8000a2c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a30:	691b      	ldr	r3, [r3, #16]
 8000a32:	4a29      	ldr	r2, [pc, #164]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a34:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a38:	6113      	str	r3, [r2, #16]
 8000a3a:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a3c:	691b      	ldr	r3, [r3, #16]
 8000a3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a46:	bf00      	nop
 8000a48:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <SystemClock_Config+0xd0>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	f003 0308 	and.w	r3, r3, #8
 8000a50:	2b08      	cmp	r3, #8
 8000a52:	d1f9      	bne.n	8000a48 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a54:	2309      	movs	r3, #9
 8000a56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8000a58:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000a62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a64:	2302      	movs	r3, #2
 8000a66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000a70:	2314      	movs	r3, #20
 8000a72:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000a80:	230c      	movs	r3, #12
 8000a82:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 0320 	add.w	r3, r7, #32
 8000a90:	4618      	mov	r0, r3
 8000a92:	f006 feab 	bl	80077ec <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a9c:	f000 f9f2 	bl	8000e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa0:	231f      	movs	r3, #31
 8000aa2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	2103      	movs	r1, #3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f007 facc 	bl	800805c <HAL_RCC_ClockConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000aca:	f000 f9db 	bl	8000e84 <Error_Handler>
  }
}
 8000ace:	bf00      	nop
 8000ad0:	3770      	adds	r7, #112	; 0x70
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	44020800 	.word	0x44020800

08000adc <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 8000ae0:	f006 fa88 	bl	8006ff4 <HAL_FLASH_Unlock>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 8000aea:	f000 f9cb 	bl	8000e84 <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 8000aee:	f006 faa7 	bl	8007040 <HAL_FLASH_Lock>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 8000af8:	f000 f9c4 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000b04:	f006 fe62 	bl	80077cc <HAL_ICACHE_Enable>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000b0e:	f000 f9b9 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b1c:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <MX_LPUART1_UART_Init+0x88>)
 8000b1e:	4a21      	ldr	r2, [pc, #132]	; (8000ba4 <MX_LPUART1_UART_Init+0x8c>)
 8000b20:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b22:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <MX_LPUART1_UART_Init+0x88>)
 8000b24:	4a20      	ldr	r2, [pc, #128]	; (8000ba8 <MX_LPUART1_UART_Init+0x90>)
 8000b26:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b28:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <MX_LPUART1_UART_Init+0x88>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MX_LPUART1_UART_Init+0x88>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_LPUART1_UART_Init+0x88>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_LPUART1_UART_Init+0x88>)
 8000b3c:	220c      	movs	r2, #12
 8000b3e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_LPUART1_UART_Init+0x88>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_LPUART1_UART_Init+0x88>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_LPUART1_UART_Init+0x88>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_LPUART1_UART_Init+0x88>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b58:	4811      	ldr	r0, [pc, #68]	; (8000ba0 <MX_LPUART1_UART_Init+0x88>)
 8000b5a:	f00d fa5f 	bl	800e01c <HAL_UART_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000b64:	f000 f98e 	bl	8000e84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <MX_LPUART1_UART_Init+0x88>)
 8000b6c:	f00f f995 	bl	800fe9a <HAL_UARTEx_SetTxFifoThreshold>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000b76:	f000 f985 	bl	8000e84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <MX_LPUART1_UART_Init+0x88>)
 8000b7e:	f00f f9ca 	bl	800ff16 <HAL_UARTEx_SetRxFifoThreshold>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000b88:	f000 f97c 	bl	8000e84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_LPUART1_UART_Init+0x88>)
 8000b8e:	f00f f94b 	bl	800fe28 <HAL_UARTEx_DisableFifoMode>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000b98:	f000 f974 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20050160 	.word	0x20050160
 8000ba4:	44002400 	.word	0x44002400
 8000ba8:	00033324 	.word	0x00033324

08000bac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bb2:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <MX_USART3_UART_Init+0x94>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bf6:	f00d fa11 	bl	800e01c <HAL_UART_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c00:	f000 f940 	bl	8000e84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	480d      	ldr	r0, [pc, #52]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000c08:	f00f f947 	bl	800fe9a <HAL_UARTEx_SetTxFifoThreshold>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c12:	f000 f937 	bl	8000e84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4808      	ldr	r0, [pc, #32]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000c1a:	f00f f97c 	bl	800ff16 <HAL_UARTEx_SetRxFifoThreshold>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c24:	f000 f92e 	bl	8000e84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000c2a:	f00f f8fd 	bl	800fe28 <HAL_UARTEx_DisableFifoMode>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c34:	f000 f926 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200501f4 	.word	0x200501f4
 8000c40:	40004800 	.word	0x40004800

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08e      	sub	sp, #56	; 0x38
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5a:	4b6b      	ldr	r3, [pc, #428]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c60:	4a69      	ldr	r2, [pc, #420]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c6a:	4b67      	ldr	r3, [pc, #412]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c70:	f003 0310 	and.w	r3, r3, #16
 8000c74:	623b      	str	r3, [r7, #32]
 8000c76:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c78:	4b63      	ldr	r3, [pc, #396]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c7e:	4a62      	ldr	r2, [pc, #392]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c88:	4b5f      	ldr	r3, [pc, #380]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	61fb      	str	r3, [r7, #28]
 8000c94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c96:	4b5c      	ldr	r3, [pc, #368]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c9c:	4a5a      	ldr	r2, [pc, #360]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000c9e:	f043 0320 	orr.w	r3, r3, #32
 8000ca2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ca6:	4b58      	ldr	r3, [pc, #352]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cac:	f003 0320 	and.w	r3, r3, #32
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb4:	4b54      	ldr	r3, [pc, #336]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cba:	4a53      	ldr	r2, [pc, #332]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cc4:	4b50      	ldr	r3, [pc, #320]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b4d      	ldr	r3, [pc, #308]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cd8:	4a4b      	ldr	r2, [pc, #300]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ce2:	4b49      	ldr	r3, [pc, #292]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf0:	4b45      	ldr	r3, [pc, #276]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cf6:	4a44      	ldr	r2, [pc, #272]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d00:	4b41      	ldr	r3, [pc, #260]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	4b3e      	ldr	r3, [pc, #248]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d14:	4a3c      	ldr	r2, [pc, #240]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000d16:	f043 0308 	orr.w	r3, r3, #8
 8000d1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d1e:	4b3a      	ldr	r3, [pc, #232]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2c:	4b36      	ldr	r3, [pc, #216]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d32:	4a35      	ldr	r2, [pc, #212]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d38:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d3c:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <MX_GPIO_Init+0x1c4>)
 8000d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	482f      	ldr	r0, [pc, #188]	; (8000e0c <MX_GPIO_Init+0x1c8>)
 8000d50:	f006 fcd8 	bl	8007704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2101      	movs	r1, #1
 8000d58:	482d      	ldr	r0, [pc, #180]	; (8000e10 <MX_GPIO_Init+0x1cc>)
 8000d5a:	f006 fcd3 	bl	8007704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2110      	movs	r1, #16
 8000d62:	482c      	ldr	r0, [pc, #176]	; (8000e14 <MX_GPIO_Init+0x1d0>)
 8000d64:	f006 fcce 	bl	8007704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <MX_GPIO_Init+0x1d4>)
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4827      	ldr	r0, [pc, #156]	; (8000e1c <MX_GPIO_Init+0x1d8>)
 8000d7e:	f006 fb6f 	bl	8007460 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d82:	2310      	movs	r3, #16
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d96:	4619      	mov	r1, r3
 8000d98:	481c      	ldr	r0, [pc, #112]	; (8000e0c <MX_GPIO_Init+0x1c8>)
 8000d9a:	f006 fb61 	bl	8007460 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4816      	ldr	r0, [pc, #88]	; (8000e10 <MX_GPIO_Init+0x1cc>)
 8000db6:	f006 fb53 	bl	8007460 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000dba:	2310      	movs	r3, #16
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4810      	ldr	r0, [pc, #64]	; (8000e14 <MX_GPIO_Init+0x1d0>)
 8000dd2:	f006 fb45 	bl	8007460 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_GPIO_Init+0x1d4>)
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de6:	4619      	mov	r1, r3
 8000de8:	480a      	ldr	r0, [pc, #40]	; (8000e14 <MX_GPIO_Init+0x1d0>)
 8000dea:	f006 fb39 	bl	8007460 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2105      	movs	r1, #5
 8000df2:	2018      	movs	r0, #24
 8000df4:	f003 fa76 	bl	80042e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000df8:	2018      	movs	r0, #24
 8000dfa:	f003 fa8d 	bl	8004318 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dfe:	bf00      	nop
 8000e00:	3738      	adds	r7, #56	; 0x38
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	44020c00 	.word	0x44020c00
 8000e0c:	42021400 	.word	0x42021400
 8000e10:	42020400 	.word	0x42020400
 8000e14:	42021800 	.word	0x42021800
 8000e18:	10110000 	.word	0x10110000
 8000e1c:	42020800 	.word	0x42020800

08000e20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d101      	bne.n	8000e36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e32:	f003 f945 	bl	80040c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d104      	bne.n	8000e4a <HAL_TIM_PeriodElapsedCallback+0x2a>
      MilliTimer++;
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e48:	6013      	str	r3, [r2, #0]
  }

  timeCounter++;
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e52:	6013      	str	r3, [r2, #0]
  if(timeCounter > 1000)
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e5c:	d905      	bls.n	8000e6a <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    timeFlag = TRUE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
    timeCounter = 0;
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END Callback 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40001000 	.word	0x40001000
 8000e78:	2007ef1c 	.word	0x2007ef1c
 8000e7c:	2005028c 	.word	0x2005028c
 8000e80:	20050288 	.word	0x20050288

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <Error_Handler+0x8>

08000e8e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	210f      	movs	r1, #15
 8000e96:	f06f 0001 	mvn.w	r0, #1
 8000e9a:	f003 fa23 	bl	80042e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b0d0      	sub	sp, #320	; 0x140
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000eae:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000eb2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ec8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	f023 fa49 	bl	802436c <memset>
  if(huart->Instance==LPUART1)
 8000eda:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ede:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a9e      	ldr	r2, [pc, #632]	; (8001160 <HAL_UART_MspInit+0x2bc>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d15e      	bne.n	8000faa <HAL_UART_MspInit+0x106>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000eec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ef0:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000ef4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8000f00:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f04:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	4618      	mov	r0, r3
 8000f14:	f007 fc1c 	bl	8008750 <HAL_RCCEx_PeriphCLKConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000f1e:	f7ff ffb1 	bl	8000e84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f22:	4b90      	ldr	r3, [pc, #576]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 8000f24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f28:	4a8e      	ldr	r2, [pc, #568]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 8000f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f2e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000f32:	4b8c      	ldr	r3, [pc, #560]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 8000f34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f38:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000f3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f40:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f4a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f4e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b84      	ldr	r3, [pc, #528]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 8000f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f56:	4a83      	ldr	r2, [pc, #524]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f60:	4b80      	ldr	r3, [pc, #512]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 8000f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f66:	f003 0202 	and.w	r2, r3, #2
 8000f6a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000f78:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000f7c:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f7e:	23c0      	movs	r3, #192	; 0xc0
 8000f80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f96:	2308      	movs	r3, #8
 8000f98:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4871      	ldr	r0, [pc, #452]	; (8001168 <HAL_UART_MspInit+0x2c4>)
 8000fa4:	f006 fa5c 	bl	8007460 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fa8:	e0d5      	b.n	8001156 <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART2)
 8000faa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000fae:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a6d      	ldr	r2, [pc, #436]	; (800116c <HAL_UART_MspInit+0x2c8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d165      	bne.n	8001088 <HAL_UART_MspInit+0x1e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fbc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000fc0:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000fc4:	f04f 0202 	mov.w	r2, #2
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fd0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000fd4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000fd8:	2200      	movs	r2, #0
 8000fda:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fdc:	f107 0320 	add.w	r3, r7, #32
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f007 fbb5 	bl	8008750 <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8000fec:	f7ff ff4a 	bl	8000e84 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff0:	4b5c      	ldr	r3, [pc, #368]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 8000ff2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ff6:	4a5b      	ldr	r2, [pc, #364]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001000:	4b58      	ldr	r3, [pc, #352]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 8001002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001006:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 800100a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800100e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001018:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800101c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800101e:	4b51      	ldr	r3, [pc, #324]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 8001020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001024:	4a4f      	ldr	r2, [pc, #316]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 8001026:	f043 0308 	orr.w	r3, r3, #8
 800102a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800102e:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 8001030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001034:	f003 0208 	and.w	r2, r3, #8
 8001038:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800103c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800104a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800104c:	2360      	movs	r3, #96	; 0x60
 800104e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001064:	2307      	movs	r3, #7
 8001066:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800106e:	4619      	mov	r1, r3
 8001070:	483f      	ldr	r0, [pc, #252]	; (8001170 <HAL_UART_MspInit+0x2cc>)
 8001072:	f006 f9f5 	bl	8007460 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2105      	movs	r1, #5
 800107a:	203b      	movs	r0, #59	; 0x3b
 800107c:	f003 f932 	bl	80042e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001080:	203b      	movs	r0, #59	; 0x3b
 8001082:	f003 f949 	bl	8004318 <HAL_NVIC_EnableIRQ>
}
 8001086:	e066      	b.n	8001156 <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART3)
 8001088:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800108c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a37      	ldr	r2, [pc, #220]	; (8001174 <HAL_UART_MspInit+0x2d0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d15d      	bne.n	8001156 <HAL_UART_MspInit+0x2b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800109a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800109e:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80010a2:	f04f 0204 	mov.w	r2, #4
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80010b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80010b6:	2200      	movs	r2, #0
 80010b8:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	4618      	mov	r0, r3
 80010c0:	f007 fb46 	bl	8008750 <HAL_RCCEx_PeriphCLKConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_UART_MspInit+0x22a>
      Error_Handler();
 80010ca:	f7ff fedb 	bl	8000e84 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 80010d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010d4:	4a23      	ldr	r2, [pc, #140]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 80010d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 80010e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010e4:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 80010e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80010ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80010f6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80010fa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 80010fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001102:	4a18      	ldr	r2, [pc, #96]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_UART_MspInit+0x2c0>)
 800110e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001112:	f003 0208 	and.w	r2, r3, #8
 8001116:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800111a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001124:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001128:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800112a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800112e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001144:	2307      	movs	r3, #7
 8001146:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800114e:	4619      	mov	r1, r3
 8001150:	4807      	ldr	r0, [pc, #28]	; (8001170 <HAL_UART_MspInit+0x2cc>)
 8001152:	f006 f985 	bl	8007460 <HAL_GPIO_Init>
}
 8001156:	bf00      	nop
 8001158:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	44002400 	.word	0x44002400
 8001164:	44020c00 	.word	0x44020c00
 8001168:	42020400 	.word	0x42020400
 800116c:	40004400 	.word	0x40004400
 8001170:	42020c00 	.word	0x42020c00
 8001174:	40004800 	.word	0x40004800

08001178 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001180:	4b33      	ldr	r3, [pc, #204]	; (8001250 <HAL_InitTick+0xd8>)
 8001182:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001186:	4a32      	ldr	r2, [pc, #200]	; (8001250 <HAL_InitTick+0xd8>)
 8001188:	f043 0310 	orr.w	r3, r3, #16
 800118c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001190:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <HAL_InitTick+0xd8>)
 8001192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800119e:	f107 020c 	add.w	r2, r7, #12
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f007 fa99 	bl	80086e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011b8:	f007 fa50 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 80011bc:	6378      	str	r0, [r7, #52]	; 0x34
 80011be:	e004      	b.n	80011ca <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011c0:	f007 fa4c 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 80011c4:	4603      	mov	r3, r0
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 80011ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011cc:	095b      	lsrs	r3, r3, #5
 80011ce:	4a21      	ldr	r2, [pc, #132]	; (8001254 <HAL_InitTick+0xdc>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	09db      	lsrs	r3, r3, #7
 80011d6:	3b01      	subs	r3, #1
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <HAL_InitTick+0xe0>)
 80011dc:	4a1f      	ldr	r2, [pc, #124]	; (800125c <HAL_InitTick+0xe4>)
 80011de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 80011e0:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <HAL_InitTick+0xe0>)
 80011e2:	2263      	movs	r2, #99	; 0x63
 80011e4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011e6:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <HAL_InitTick+0xe0>)
 80011e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <HAL_InitTick+0xe0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_InitTick+0xe0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80011f8:	4817      	ldr	r0, [pc, #92]	; (8001258 <HAL_InitTick+0xe0>)
 80011fa:	f00c fb29 	bl	800d850 <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001204:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001208:	2b00      	cmp	r3, #0
 800120a:	d118      	bne.n	800123e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800120c:	4812      	ldr	r0, [pc, #72]	; (8001258 <HAL_InitTick+0xe0>)
 800120e:	f00c fb81 	bl	800d914 <HAL_TIM_Base_Start_IT>
 8001212:	4603      	mov	r3, r0
 8001214:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001218:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10e      	bne.n	800123e <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b0f      	cmp	r3, #15
 8001224:	d808      	bhi.n	8001238 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001226:	2200      	movs	r2, #0
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	2031      	movs	r0, #49	; 0x31
 800122c:	f003 f85a 	bl	80042e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001230:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <HAL_InitTick+0xe8>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e002      	b.n	800123e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800123e:	2031      	movs	r0, #49	; 0x31
 8001240:	f003 f86a 	bl	8004318 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8001244:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001248:	4618      	mov	r0, r3
 800124a:	3738      	adds	r7, #56	; 0x38
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	44020c00 	.word	0x44020c00
 8001254:	0a7c5ac5 	.word	0x0a7c5ac5
 8001258:	20050290 	.word	0x20050290
 800125c:	40001000 	.word	0x40001000
 8001260:	20050040 	.word	0x20050040

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001268:	e7fe      	b.n	8001268 <NMI_Handler+0x4>

0800126a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <MemManage_Handler+0x4>

08001276 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <UsageFault_Handler+0x4>

08001282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001294:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001298:	f006 fa66 	bl	8007768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <TIM6_IRQHandler+0x10>)
 80012a6:	f00c fbe3 	bl	800da70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20050290 	.word	0x20050290

080012b4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <ETH_IRQHandler+0x10>)
 80012ba:	f003 fca7 	bl	8004c0c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20054cf4 	.word	0x20054cf4

080012c8 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet Wakeup global interrupt.
  */
void ETH_WKUP_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <ETH_WKUP_IRQHandler+0x10>)
 80012ce:	f003 fc9d 	bl	8004c0c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20054cf4 	.word	0x20054cf4

080012dc <USART2_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <USART2_IRQHandler+0x10>)
 80012e2:	f00c ffeb 	bl	800e2bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200553b0 	.word	0x200553b0

080012f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return 1;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <_kill>:

int _kill(int pid, int sig)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <_kill+0x20>)
 800130c:	2216      	movs	r2, #22
 800130e:	601a      	str	r2, [r3, #0]
  return -1;
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	2007f064 	.word	0x2007f064

08001324 <_exit>:

void _exit (int status)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ffe5 	bl	8001300 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001336:	e7fe      	b.n	8001336 <_exit+0x12>

08001338 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	e00a      	b.n	8001360 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800134a:	f3af 8000 	nop.w
 800134e:	4601      	mov	r1, r0
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	60ba      	str	r2, [r7, #8]
 8001356:	b2ca      	uxtb	r2, r1
 8001358:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbf0      	blt.n	800134a <_read+0x12>
  }

  return len;
 8001368:	687b      	ldr	r3, [r7, #4]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800139a:	605a      	str	r2, [r3, #4]
  return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_isatty>:

int _isatty(int file)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d205      	bcs.n	8001418 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <_sbrk+0x6c>)
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a06      	ldr	r2, [pc, #24]	; (8001440 <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	200a0000 	.word	0x200a0000
 800143c:	00000800 	.word	0x00000800
 8001440:	200502dc 	.word	0x200502dc
 8001444:	2007f070 	.word	0x2007f070
 8001448:	2007f064 	.word	0x2007f064

0800144c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001452:	4b35      	ldr	r3, [pc, #212]	; (8001528 <SystemInit+0xdc>)
 8001454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001458:	4a33      	ldr	r2, [pc, #204]	; (8001528 <SystemInit+0xdc>)
 800145a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800145e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001462:	4b32      	ldr	r3, [pc, #200]	; (800152c <SystemInit+0xe0>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001468:	4b30      	ldr	r3, [pc, #192]	; (800152c <SystemInit+0xe0>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800146e:	4b2f      	ldr	r3, [pc, #188]	; (800152c <SystemInit+0xe0>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001474:	4b2d      	ldr	r3, [pc, #180]	; (800152c <SystemInit+0xe0>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	492c      	ldr	r1, [pc, #176]	; (800152c <SystemInit+0xe0>)
 800147a:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <SystemInit+0xe4>)
 800147c:	4013      	ands	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001480:	4b2a      	ldr	r3, [pc, #168]	; (800152c <SystemInit+0xe0>)
 8001482:	2200      	movs	r2, #0
 8001484:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001486:	4b29      	ldr	r3, [pc, #164]	; (800152c <SystemInit+0xe0>)
 8001488:	2200      	movs	r2, #0
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <SystemInit+0xe0>)
 800148e:	2200      	movs	r2, #0
 8001490:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <SystemInit+0xe0>)
 8001494:	4a27      	ldr	r2, [pc, #156]	; (8001534 <SystemInit+0xe8>)
 8001496:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001498:	4b24      	ldr	r3, [pc, #144]	; (800152c <SystemInit+0xe0>)
 800149a:	2200      	movs	r2, #0
 800149c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800149e:	4b23      	ldr	r3, [pc, #140]	; (800152c <SystemInit+0xe0>)
 80014a0:	4a24      	ldr	r2, [pc, #144]	; (8001534 <SystemInit+0xe8>)
 80014a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80014a4:	4b21      	ldr	r3, [pc, #132]	; (800152c <SystemInit+0xe0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <SystemInit+0xe0>)
 80014ac:	4a21      	ldr	r2, [pc, #132]	; (8001534 <SystemInit+0xe8>)
 80014ae:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <SystemInit+0xe0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <SystemInit+0xe0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <SystemInit+0xe0>)
 80014bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <SystemInit+0xe0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <SystemInit+0xdc>)
 80014ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ce:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <SystemInit+0xec>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80014d8:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80014e0:	d003      	beq.n	80014ea <SystemInit+0x9e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80014e8:	d117      	bne.n	800151a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <SystemInit+0xec>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <SystemInit+0xec>)
 80014f8:	4a10      	ldr	r2, [pc, #64]	; (800153c <SystemInit+0xf0>)
 80014fa:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <SystemInit+0xec>)
 80014fe:	4a10      	ldr	r2, [pc, #64]	; (8001540 <SystemInit+0xf4>)
 8001500:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <SystemInit+0xec>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <SystemInit+0xec>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <SystemInit+0xec>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a09      	ldr	r2, [pc, #36]	; (8001538 <SystemInit+0xec>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	61d3      	str	r3, [r2, #28]
  }
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00
 800152c:	44020c00 	.word	0x44020c00
 8001530:	eae2eae3 	.word	0xeae2eae3
 8001534:	01010280 	.word	0x01010280
 8001538:	40022000 	.word	0x40022000
 800153c:	08192a3b 	.word	0x08192a3b
 8001540:	4c5d6e7f 	.word	0x4c5d6e7f

08001544 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001546:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001548:	f7ff ff80 	bl	800144c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <LoopForever+0x6>)
  ldr r1, =_edata
 800154e:	490d      	ldr	r1, [pc, #52]	; (8001584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <LoopForever+0xe>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001564:	4c0a      	ldr	r4, [pc, #40]	; (8001590 <LoopForever+0x16>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001572:	f022 ff6d 	bl	8024450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001576:	f7ff fa2f 	bl	80009d8 <main>

0800157a <LoopForever>:

LoopForever:
    b LoopForever
 800157a:	e7fe      	b.n	800157a <LoopForever>
  ldr   r0, =_estack
 800157c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001580:	20050000 	.word	0x20050000
  ldr r1, =_edata
 8001584:	2005012c 	.word	0x2005012c
  ldr r2, =_sidata
 8001588:	08029c34 	.word	0x08029c34
  ldr r2, =_sbss
 800158c:	2005012c 	.word	0x2005012c
  ldr r4, =_ebss
 8001590:	2007f06c 	.word	0x2007f06c

08001594 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC1_IRQHandler>
	...

08001598 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800159e:	4b98      	ldr	r3, [pc, #608]	; (8001800 <MX_LWIP_Init+0x268>)
 80015a0:	22c0      	movs	r2, #192	; 0xc0
 80015a2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80015a4:	4b96      	ldr	r3, [pc, #600]	; (8001800 <MX_LWIP_Init+0x268>)
 80015a6:	22a8      	movs	r2, #168	; 0xa8
 80015a8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 219;
 80015aa:	4b95      	ldr	r3, [pc, #596]	; (8001800 <MX_LWIP_Init+0x268>)
 80015ac:	22db      	movs	r2, #219	; 0xdb
 80015ae:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 120;
 80015b0:	4b93      	ldr	r3, [pc, #588]	; (8001800 <MX_LWIP_Init+0x268>)
 80015b2:	2278      	movs	r2, #120	; 0x78
 80015b4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80015b6:	4b93      	ldr	r3, [pc, #588]	; (8001804 <MX_LWIP_Init+0x26c>)
 80015b8:	22ff      	movs	r2, #255	; 0xff
 80015ba:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80015bc:	4b91      	ldr	r3, [pc, #580]	; (8001804 <MX_LWIP_Init+0x26c>)
 80015be:	22ff      	movs	r2, #255	; 0xff
 80015c0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80015c2:	4b90      	ldr	r3, [pc, #576]	; (8001804 <MX_LWIP_Init+0x26c>)
 80015c4:	22ff      	movs	r2, #255	; 0xff
 80015c6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80015c8:	4b8e      	ldr	r3, [pc, #568]	; (8001804 <MX_LWIP_Init+0x26c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80015ce:	4b8e      	ldr	r3, [pc, #568]	; (8001808 <MX_LWIP_Init+0x270>)
 80015d0:	22c0      	movs	r2, #192	; 0xc0
 80015d2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80015d4:	4b8c      	ldr	r3, [pc, #560]	; (8001808 <MX_LWIP_Init+0x270>)
 80015d6:	22a8      	movs	r2, #168	; 0xa8
 80015d8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 219;
 80015da:	4b8b      	ldr	r3, [pc, #556]	; (8001808 <MX_LWIP_Init+0x270>)
 80015dc:	22db      	movs	r2, #219	; 0xdb
 80015de:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80015e0:	4b89      	ldr	r3, [pc, #548]	; (8001808 <MX_LWIP_Init+0x270>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80015e6:	2100      	movs	r1, #0
 80015e8:	2000      	movs	r0, #0
 80015ea:	f015 ff31 	bl	8017450 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80015ee:	4b84      	ldr	r3, [pc, #528]	; (8001800 <MX_LWIP_Init+0x268>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	061a      	lsls	r2, r3, #24
 80015f4:	4b82      	ldr	r3, [pc, #520]	; (8001800 <MX_LWIP_Init+0x268>)
 80015f6:	785b      	ldrb	r3, [r3, #1]
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	431a      	orrs	r2, r3
 80015fc:	4b80      	ldr	r3, [pc, #512]	; (8001800 <MX_LWIP_Init+0x268>)
 80015fe:	789b      	ldrb	r3, [r3, #2]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	4313      	orrs	r3, r2
 8001604:	4a7e      	ldr	r2, [pc, #504]	; (8001800 <MX_LWIP_Init+0x268>)
 8001606:	78d2      	ldrb	r2, [r2, #3]
 8001608:	4313      	orrs	r3, r2
 800160a:	061a      	lsls	r2, r3, #24
 800160c:	4b7c      	ldr	r3, [pc, #496]	; (8001800 <MX_LWIP_Init+0x268>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	0619      	lsls	r1, r3, #24
 8001612:	4b7b      	ldr	r3, [pc, #492]	; (8001800 <MX_LWIP_Init+0x268>)
 8001614:	785b      	ldrb	r3, [r3, #1]
 8001616:	041b      	lsls	r3, r3, #16
 8001618:	4319      	orrs	r1, r3
 800161a:	4b79      	ldr	r3, [pc, #484]	; (8001800 <MX_LWIP_Init+0x268>)
 800161c:	789b      	ldrb	r3, [r3, #2]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	430b      	orrs	r3, r1
 8001622:	4977      	ldr	r1, [pc, #476]	; (8001800 <MX_LWIP_Init+0x268>)
 8001624:	78c9      	ldrb	r1, [r1, #3]
 8001626:	430b      	orrs	r3, r1
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800162e:	431a      	orrs	r2, r3
 8001630:	4b73      	ldr	r3, [pc, #460]	; (8001800 <MX_LWIP_Init+0x268>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	0619      	lsls	r1, r3, #24
 8001636:	4b72      	ldr	r3, [pc, #456]	; (8001800 <MX_LWIP_Init+0x268>)
 8001638:	785b      	ldrb	r3, [r3, #1]
 800163a:	041b      	lsls	r3, r3, #16
 800163c:	4319      	orrs	r1, r3
 800163e:	4b70      	ldr	r3, [pc, #448]	; (8001800 <MX_LWIP_Init+0x268>)
 8001640:	789b      	ldrb	r3, [r3, #2]
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	430b      	orrs	r3, r1
 8001646:	496e      	ldr	r1, [pc, #440]	; (8001800 <MX_LWIP_Init+0x268>)
 8001648:	78c9      	ldrb	r1, [r1, #3]
 800164a:	430b      	orrs	r3, r1
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001652:	431a      	orrs	r2, r3
 8001654:	4b6a      	ldr	r3, [pc, #424]	; (8001800 <MX_LWIP_Init+0x268>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	0619      	lsls	r1, r3, #24
 800165a:	4b69      	ldr	r3, [pc, #420]	; (8001800 <MX_LWIP_Init+0x268>)
 800165c:	785b      	ldrb	r3, [r3, #1]
 800165e:	041b      	lsls	r3, r3, #16
 8001660:	4319      	orrs	r1, r3
 8001662:	4b67      	ldr	r3, [pc, #412]	; (8001800 <MX_LWIP_Init+0x268>)
 8001664:	789b      	ldrb	r3, [r3, #2]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	430b      	orrs	r3, r1
 800166a:	4965      	ldr	r1, [pc, #404]	; (8001800 <MX_LWIP_Init+0x268>)
 800166c:	78c9      	ldrb	r1, [r1, #3]
 800166e:	430b      	orrs	r3, r1
 8001670:	0e1b      	lsrs	r3, r3, #24
 8001672:	4313      	orrs	r3, r2
 8001674:	4a65      	ldr	r2, [pc, #404]	; (800180c <MX_LWIP_Init+0x274>)
 8001676:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8001678:	4b62      	ldr	r3, [pc, #392]	; (8001804 <MX_LWIP_Init+0x26c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	061a      	lsls	r2, r3, #24
 800167e:	4b61      	ldr	r3, [pc, #388]	; (8001804 <MX_LWIP_Init+0x26c>)
 8001680:	785b      	ldrb	r3, [r3, #1]
 8001682:	041b      	lsls	r3, r3, #16
 8001684:	431a      	orrs	r2, r3
 8001686:	4b5f      	ldr	r3, [pc, #380]	; (8001804 <MX_LWIP_Init+0x26c>)
 8001688:	789b      	ldrb	r3, [r3, #2]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	4313      	orrs	r3, r2
 800168e:	4a5d      	ldr	r2, [pc, #372]	; (8001804 <MX_LWIP_Init+0x26c>)
 8001690:	78d2      	ldrb	r2, [r2, #3]
 8001692:	4313      	orrs	r3, r2
 8001694:	061a      	lsls	r2, r3, #24
 8001696:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <MX_LWIP_Init+0x26c>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	0619      	lsls	r1, r3, #24
 800169c:	4b59      	ldr	r3, [pc, #356]	; (8001804 <MX_LWIP_Init+0x26c>)
 800169e:	785b      	ldrb	r3, [r3, #1]
 80016a0:	041b      	lsls	r3, r3, #16
 80016a2:	4319      	orrs	r1, r3
 80016a4:	4b57      	ldr	r3, [pc, #348]	; (8001804 <MX_LWIP_Init+0x26c>)
 80016a6:	789b      	ldrb	r3, [r3, #2]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	430b      	orrs	r3, r1
 80016ac:	4955      	ldr	r1, [pc, #340]	; (8001804 <MX_LWIP_Init+0x26c>)
 80016ae:	78c9      	ldrb	r1, [r1, #3]
 80016b0:	430b      	orrs	r3, r1
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80016b8:	431a      	orrs	r2, r3
 80016ba:	4b52      	ldr	r3, [pc, #328]	; (8001804 <MX_LWIP_Init+0x26c>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	0619      	lsls	r1, r3, #24
 80016c0:	4b50      	ldr	r3, [pc, #320]	; (8001804 <MX_LWIP_Init+0x26c>)
 80016c2:	785b      	ldrb	r3, [r3, #1]
 80016c4:	041b      	lsls	r3, r3, #16
 80016c6:	4319      	orrs	r1, r3
 80016c8:	4b4e      	ldr	r3, [pc, #312]	; (8001804 <MX_LWIP_Init+0x26c>)
 80016ca:	789b      	ldrb	r3, [r3, #2]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	430b      	orrs	r3, r1
 80016d0:	494c      	ldr	r1, [pc, #304]	; (8001804 <MX_LWIP_Init+0x26c>)
 80016d2:	78c9      	ldrb	r1, [r1, #3]
 80016d4:	430b      	orrs	r3, r1
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80016dc:	431a      	orrs	r2, r3
 80016de:	4b49      	ldr	r3, [pc, #292]	; (8001804 <MX_LWIP_Init+0x26c>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	0619      	lsls	r1, r3, #24
 80016e4:	4b47      	ldr	r3, [pc, #284]	; (8001804 <MX_LWIP_Init+0x26c>)
 80016e6:	785b      	ldrb	r3, [r3, #1]
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	4319      	orrs	r1, r3
 80016ec:	4b45      	ldr	r3, [pc, #276]	; (8001804 <MX_LWIP_Init+0x26c>)
 80016ee:	789b      	ldrb	r3, [r3, #2]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	430b      	orrs	r3, r1
 80016f4:	4943      	ldr	r1, [pc, #268]	; (8001804 <MX_LWIP_Init+0x26c>)
 80016f6:	78c9      	ldrb	r1, [r1, #3]
 80016f8:	430b      	orrs	r3, r1
 80016fa:	0e1b      	lsrs	r3, r3, #24
 80016fc:	4313      	orrs	r3, r2
 80016fe:	4a44      	ldr	r2, [pc, #272]	; (8001810 <MX_LWIP_Init+0x278>)
 8001700:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <MX_LWIP_Init+0x270>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	061a      	lsls	r2, r3, #24
 8001708:	4b3f      	ldr	r3, [pc, #252]	; (8001808 <MX_LWIP_Init+0x270>)
 800170a:	785b      	ldrb	r3, [r3, #1]
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	431a      	orrs	r2, r3
 8001710:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <MX_LWIP_Init+0x270>)
 8001712:	789b      	ldrb	r3, [r3, #2]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	4313      	orrs	r3, r2
 8001718:	4a3b      	ldr	r2, [pc, #236]	; (8001808 <MX_LWIP_Init+0x270>)
 800171a:	78d2      	ldrb	r2, [r2, #3]
 800171c:	4313      	orrs	r3, r2
 800171e:	061a      	lsls	r2, r3, #24
 8001720:	4b39      	ldr	r3, [pc, #228]	; (8001808 <MX_LWIP_Init+0x270>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	0619      	lsls	r1, r3, #24
 8001726:	4b38      	ldr	r3, [pc, #224]	; (8001808 <MX_LWIP_Init+0x270>)
 8001728:	785b      	ldrb	r3, [r3, #1]
 800172a:	041b      	lsls	r3, r3, #16
 800172c:	4319      	orrs	r1, r3
 800172e:	4b36      	ldr	r3, [pc, #216]	; (8001808 <MX_LWIP_Init+0x270>)
 8001730:	789b      	ldrb	r3, [r3, #2]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	430b      	orrs	r3, r1
 8001736:	4934      	ldr	r1, [pc, #208]	; (8001808 <MX_LWIP_Init+0x270>)
 8001738:	78c9      	ldrb	r1, [r1, #3]
 800173a:	430b      	orrs	r3, r1
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001742:	431a      	orrs	r2, r3
 8001744:	4b30      	ldr	r3, [pc, #192]	; (8001808 <MX_LWIP_Init+0x270>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	0619      	lsls	r1, r3, #24
 800174a:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <MX_LWIP_Init+0x270>)
 800174c:	785b      	ldrb	r3, [r3, #1]
 800174e:	041b      	lsls	r3, r3, #16
 8001750:	4319      	orrs	r1, r3
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <MX_LWIP_Init+0x270>)
 8001754:	789b      	ldrb	r3, [r3, #2]
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	430b      	orrs	r3, r1
 800175a:	492b      	ldr	r1, [pc, #172]	; (8001808 <MX_LWIP_Init+0x270>)
 800175c:	78c9      	ldrb	r1, [r1, #3]
 800175e:	430b      	orrs	r3, r1
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001766:	431a      	orrs	r2, r3
 8001768:	4b27      	ldr	r3, [pc, #156]	; (8001808 <MX_LWIP_Init+0x270>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	0619      	lsls	r1, r3, #24
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <MX_LWIP_Init+0x270>)
 8001770:	785b      	ldrb	r3, [r3, #1]
 8001772:	041b      	lsls	r3, r3, #16
 8001774:	4319      	orrs	r1, r3
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <MX_LWIP_Init+0x270>)
 8001778:	789b      	ldrb	r3, [r3, #2]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	430b      	orrs	r3, r1
 800177e:	4922      	ldr	r1, [pc, #136]	; (8001808 <MX_LWIP_Init+0x270>)
 8001780:	78c9      	ldrb	r1, [r1, #3]
 8001782:	430b      	orrs	r3, r1
 8001784:	0e1b      	lsrs	r3, r3, #24
 8001786:	4313      	orrs	r3, r2
 8001788:	4a22      	ldr	r2, [pc, #136]	; (8001814 <MX_LWIP_Init+0x27c>)
 800178a:	6013      	str	r3, [r2, #0]

  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <MX_LWIP_Init+0x280>)
 800178e:	9302      	str	r3, [sp, #8]
 8001790:	4b22      	ldr	r3, [pc, #136]	; (800181c <MX_LWIP_Init+0x284>)
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	2300      	movs	r3, #0
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <MX_LWIP_Init+0x27c>)
 800179a:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <MX_LWIP_Init+0x278>)
 800179c:	491b      	ldr	r1, [pc, #108]	; (800180c <MX_LWIP_Init+0x274>)
 800179e:	4820      	ldr	r0, [pc, #128]	; (8001820 <MX_LWIP_Init+0x288>)
 80017a0:	f016 fdd6 	bl	8018350 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80017a4:	481e      	ldr	r0, [pc, #120]	; (8001820 <MX_LWIP_Init+0x288>)
 80017a6:	f017 f867 	bl	8018878 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80017aa:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <MX_LWIP_Init+0x288>)
 80017ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80017bc:	4818      	ldr	r0, [pc, #96]	; (8001820 <MX_LWIP_Init+0x288>)
 80017be:	f017 f87f 	bl	80188c0 <netif_set_up>
 80017c2:	e002      	b.n	80017ca <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80017c4:	4816      	ldr	r0, [pc, #88]	; (8001820 <MX_LWIP_Init+0x288>)
 80017c6:	f017 f8e7 	bl	8018998 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80017ca:	4916      	ldr	r1, [pc, #88]	; (8001824 <MX_LWIP_Init+0x28c>)
 80017cc:	4814      	ldr	r0, [pc, #80]	; (8001820 <MX_LWIP_Init+0x288>)
 80017ce:	f017 f979 	bl	8018ac4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
  /* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80017d2:	2224      	movs	r2, #36	; 0x24
 80017d4:	2100      	movs	r1, #0
 80017d6:	4814      	ldr	r0, [pc, #80]	; (8001828 <MX_LWIP_Init+0x290>)
 80017d8:	f022 fdc8 	bl	802436c <memset>
  attributes.name = "EthLink";
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <MX_LWIP_Init+0x290>)
 80017de:	4a13      	ldr	r2, [pc, #76]	; (800182c <MX_LWIP_Init+0x294>)
 80017e0:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_LWIP_Init+0x290>)
 80017e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e8:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_LWIP_Init+0x290>)
 80017ec:	2210      	movs	r2, #16
 80017ee:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80017f0:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <MX_LWIP_Init+0x290>)
 80017f2:	490b      	ldr	r1, [pc, #44]	; (8001820 <MX_LWIP_Init+0x288>)
 80017f4:	480e      	ldr	r0, [pc, #56]	; (8001830 <MX_LWIP_Init+0x298>)
 80017f6:	f00f fc51 	bl	801109c <osThreadNew>
  /* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20050320 	.word	0x20050320
 8001804:	20050324 	.word	0x20050324
 8001808:	20050328 	.word	0x20050328
 800180c:	20050314 	.word	0x20050314
 8001810:	20050318 	.word	0x20050318
 8001814:	2005031c 	.word	0x2005031c
 8001818:	08017361 	.word	0x08017361
 800181c:	08001cd9 	.word	0x08001cd9
 8001820:	200502e0 	.word	0x200502e0
 8001824:	08001835 	.word	0x08001835
 8001828:	2005032c 	.word	0x2005032c
 800182c:	080252e8 	.word	0x080252e8
 8001830:	08001fdd 	.word	0x08001fdd

08001834 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <HAL_ETH_RxCpltCallback+0x1c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f00f fead 	bl	80115b4 <osSemaphoreRelease>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20054cec 	.word	0x20054cec

08001868 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <HAL_ETH_TxCpltCallback+0x1c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f00f fe9d 	bl	80115b4 <osSemaphoreRelease>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20054cf0 	.word	0x20054cf0

08001888 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f003 fde7 	bl	8005464 <HAL_ETH_GetDMAError>
 8001896:	4603      	mov	r3, r0
 8001898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189c:	2b80      	cmp	r3, #128	; 0x80
 800189e:	d104      	bne.n	80018aa <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <HAL_ETH_ErrorCallback+0x2c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f00f fe85 	bl	80115b4 <osSemaphoreRelease>
  }
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20054cec 	.word	0x20054cec

080018b8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b0aa      	sub	sp, #168	; 0xa8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	2264      	movs	r2, #100	; 0x64
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f022 fd46 	bl	802436c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80018e0:	4b85      	ldr	r3, [pc, #532]	; (8001af8 <low_level_init+0x240>)
 80018e2:	4a86      	ldr	r2, [pc, #536]	; (8001afc <low_level_init+0x244>)
 80018e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80018e6:	2300      	movs	r3, #0
 80018e8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80018ee:	23e1      	movs	r3, #225	; 0xe1
 80018f0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80018f2:	2300      	movs	r3, #0
 80018f4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80018f6:	2300      	movs	r3, #0
 80018f8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80018fa:	2300      	movs	r3, #0
 80018fc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80018fe:	4a7e      	ldr	r2, [pc, #504]	; (8001af8 <low_level_init+0x240>)
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001906:	4b7c      	ldr	r3, [pc, #496]	; (8001af8 <low_level_init+0x240>)
 8001908:	2201      	movs	r2, #1
 800190a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800190c:	4b7a      	ldr	r3, [pc, #488]	; (8001af8 <low_level_init+0x240>)
 800190e:	4a7c      	ldr	r2, [pc, #496]	; (8001b00 <low_level_init+0x248>)
 8001910:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001912:	4b79      	ldr	r3, [pc, #484]	; (8001af8 <low_level_init+0x240>)
 8001914:	4a7b      	ldr	r2, [pc, #492]	; (8001b04 <low_level_init+0x24c>)
 8001916:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8001918:	4b77      	ldr	r3, [pc, #476]	; (8001af8 <low_level_init+0x240>)
 800191a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800191e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8001920:	4875      	ldr	r0, [pc, #468]	; (8001af8 <low_level_init+0x240>)
 8001922:	f002 fdad 	bl	8004480 <HAL_ETH_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800192c:	2238      	movs	r2, #56	; 0x38
 800192e:	2100      	movs	r1, #0
 8001930:	4875      	ldr	r0, [pc, #468]	; (8001b08 <low_level_init+0x250>)
 8001932:	f022 fd1b 	bl	802436c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001936:	4b74      	ldr	r3, [pc, #464]	; (8001b08 <low_level_init+0x250>)
 8001938:	2221      	movs	r2, #33	; 0x21
 800193a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800193c:	4b72      	ldr	r3, [pc, #456]	; (8001b08 <low_level_init+0x250>)
 800193e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001942:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001944:	4b70      	ldr	r3, [pc, #448]	; (8001b08 <low_level_init+0x250>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800194a:	4870      	ldr	r0, [pc, #448]	; (8001b0c <low_level_init+0x254>)
 800194c:	f016 fb7c 	bl	8018048 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2206      	movs	r2, #6
 8001954:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8001958:	4b67      	ldr	r3, [pc, #412]	; (8001af8 <low_level_init+0x240>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8001964:	4b64      	ldr	r3, [pc, #400]	; (8001af8 <low_level_init+0x240>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	785a      	ldrb	r2, [r3, #1]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8001970:	4b61      	ldr	r3, [pc, #388]	; (8001af8 <low_level_init+0x240>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	789a      	ldrb	r2, [r3, #2]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800197c:	4b5e      	ldr	r3, [pc, #376]	; (8001af8 <low_level_init+0x240>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	78da      	ldrb	r2, [r3, #3]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8001988:	4b5b      	ldr	r3, [pc, #364]	; (8001af8 <low_level_init+0x240>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	791a      	ldrb	r2, [r3, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8001994:	4b58      	ldr	r3, [pc, #352]	; (8001af8 <low_level_init+0x240>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	795a      	ldrb	r2, [r3, #5]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80019a6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80019ae:	f043 030a 	orr.w	r3, r3, #10
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2101      	movs	r1, #1
 80019be:	2001      	movs	r0, #1
 80019c0:	f00f fd23 	bl	801140a <osSemaphoreNew>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <low_level_init+0x258>)
 80019c8:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2101      	movs	r1, #1
 80019ce:	2001      	movs	r0, #1
 80019d0:	f00f fd1b 	bl	801140a <osSemaphoreNew>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4a4f      	ldr	r2, [pc, #316]	; (8001b14 <low_level_init+0x25c>)
 80019d8:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80019da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019de:	2224      	movs	r2, #36	; 0x24
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f022 fcc2 	bl	802436c <memset>
  attributes.name = "EthIf";
 80019e8:	4b4b      	ldr	r3, [pc, #300]	; (8001b18 <low_level_init+0x260>)
 80019ea:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80019ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 80019f4:	2330      	movs	r3, #48	; 0x30
 80019f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 80019fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019fe:	461a      	mov	r2, r3
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4846      	ldr	r0, [pc, #280]	; (8001b1c <low_level_init+0x264>)
 8001a04:	f00f fb4a 	bl	801109c <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8001a08:	4945      	ldr	r1, [pc, #276]	; (8001b20 <low_level_init+0x268>)
 8001a0a:	4846      	ldr	r0, [pc, #280]	; (8001b24 <low_level_init+0x26c>)
 8001a0c:	f000 fbef 	bl	80021ee <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8001a10:	4844      	ldr	r0, [pc, #272]	; (8001b24 <low_level_init+0x26c>)
 8001a12:	f000 fc1e 	bl	8002252 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8001a16:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d165      	bne.n	8001aea <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001a1e:	4841      	ldr	r0, [pc, #260]	; (8001b24 <low_level_init+0x26c>)
 8001a20:	f000 fcbf 	bl	80023a2 <LAN8742_GetLinkState>
 8001a24:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8001a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	dc06      	bgt.n	8001a3e <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f017 f817 	bl	8018a64 <netif_set_link_down>
      netif_set_down(netif);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f016 ffae 	bl	8018998 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8001a3c:	e057      	b.n	8001aee <low_level_init+0x236>
      switch (PHYLinkState)
 8001a3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a42:	3b02      	subs	r3, #2
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d82b      	bhi.n	8001aa0 <low_level_init+0x1e8>
 8001a48:	a201      	add	r2, pc, #4	; (adr r2, 8001a50 <low_level_init+0x198>)
 8001a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4e:	bf00      	nop
 8001a50:	08001a61 	.word	0x08001a61
 8001a54:	08001a73 	.word	0x08001a73
 8001a58:	08001a83 	.word	0x08001a83
 8001a5c:	08001a93 	.word	0x08001a93
        duplex = ETH_FULLDUPLEX_MODE;
 8001a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8001a68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8001a70:	e01f      	b.n	8001ab2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8001a78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8001a80:	e017      	b.n	8001ab2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8001a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8001a90:	e00f      	b.n	8001ab2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8001a9e:	e008      	b.n	8001ab2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8001aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8001aa8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8001ab0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8001ab2:	f107 0310 	add.w	r3, r7, #16
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480f      	ldr	r0, [pc, #60]	; (8001af8 <low_level_init+0x240>)
 8001aba:	f003 fa7d 	bl	8004fb8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8001abe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8001ac4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4809      	ldr	r0, [pc, #36]	; (8001af8 <low_level_init+0x240>)
 8001ad2:	f003 fc45 	bl	8005360 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8001ad6:	4808      	ldr	r0, [pc, #32]	; (8001af8 <low_level_init+0x240>)
 8001ad8:	f002 fdb8 	bl	800464c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f016 feef 	bl	80188c0 <netif_set_up>
    netif_set_link_up(netif);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f016 ff8a 	bl	80189fc <netif_set_link_up>
}
 8001ae8:	e001      	b.n	8001aee <low_level_init+0x236>
    Error_Handler();
 8001aea:	f7ff f9cb 	bl	8000e84 <Error_Handler>
}
 8001aee:	bf00      	nop
 8001af0:	37a8      	adds	r7, #168	; 0xa8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20054cf4 	.word	0x20054cf4
 8001afc:	40028000 	.word	0x40028000
 8001b00:	20040060 	.word	0x20040060
 8001b04:	20040000 	.word	0x20040000
 8001b08:	20054da4 	.word	0x20054da4
 8001b0c:	08029804 	.word	0x08029804
 8001b10:	20054cec 	.word	0x20054cec
 8001b14:	20054cf0 	.word	0x20054cf0
 8001b18:	08025308 	.word	0x08025308
 8001b1c:	08001c85 	.word	0x08001c85
 8001b20:	20050004 	.word	0x20050004
 8001b24:	20054ddc 	.word	0x20054ddc

08001b28 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b092      	sub	sp, #72	; 0x48
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	2230      	movs	r2, #48	; 0x30
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f022 fc0f 	bl	802436c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	2230      	movs	r2, #48	; 0x30
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f022 fc08 	bl	802436c <memset>

  for(q = p; q != NULL; q = q->next)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8001b60:	e045      	b.n	8001bee <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8001b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d902      	bls.n	8001b6e <low_level_output+0x46>
      return ERR_IF;
 8001b68:	f06f 030b 	mvn.w	r3, #11
 8001b6c:	e065      	b.n	8001c3a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8001b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b70:	6859      	ldr	r1, [r3, #4]
 8001b72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	3348      	adds	r3, #72	; 0x48
 8001b7e:	443b      	add	r3, r7
 8001b80:	3b3c      	subs	r3, #60	; 0x3c
 8001b82:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8001b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b86:	895b      	ldrh	r3, [r3, #10]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	3348      	adds	r3, #72	; 0x48
 8001b96:	443b      	add	r3, r7
 8001b98:	3b38      	subs	r3, #56	; 0x38
 8001b9a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8001b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d011      	beq.n	8001bc6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8001ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba4:	1e5a      	subs	r2, r3, #1
 8001ba6:	f107 000c 	add.w	r0, r7, #12
 8001baa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001bac:	460b      	mov	r3, r1
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	440b      	add	r3, r1
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	18c1      	adds	r1, r0, r3
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	3348      	adds	r3, #72	; 0x48
 8001bc0:	443b      	add	r3, r7
 8001bc2:	3b34      	subs	r3, #52	; 0x34
 8001bc4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8001bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8001bce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	3348      	adds	r3, #72	; 0x48
 8001bda:	443b      	add	r3, r7
 8001bdc:	3b34      	subs	r3, #52	; 0x34
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
    }

    i++;
 8001be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001be4:	3301      	adds	r3, #1
 8001be6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8001be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	643b      	str	r3, [r7, #64]	; 0x40
 8001bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1b6      	bne.n	8001b62 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	891b      	ldrh	r3, [r3, #8]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <low_level_output+0x11c>)
 8001bfc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8001bfe:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <low_level_output+0x11c>)
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8001c06:	4a0f      	ldr	r2, [pc, #60]	; (8001c44 <low_level_output+0x11c>)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8001c0c:	6838      	ldr	r0, [r7, #0]
 8001c0e:	f017 fbad 	bl	801936c <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8001c12:	490c      	ldr	r1, [pc, #48]	; (8001c44 <low_level_output+0x11c>)
 8001c14:	480c      	ldr	r0, [pc, #48]	; (8001c48 <low_level_output+0x120>)
 8001c16:	f002 fe1f 	bl	8004858 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8001c1a:	bf00      	nop
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <low_level_output+0x124>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	4618      	mov	r0, r3
 8001c26:	f00f fc79 	bl	801151c <osSemaphoreAcquire>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f5      	bne.n	8001c1c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8001c30:	4805      	ldr	r0, [pc, #20]	; (8001c48 <low_level_output+0x120>)
 8001c32:	f002 ff90 	bl	8004b56 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8001c36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3748      	adds	r7, #72	; 0x48
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20054da4 	.word	0x20054da4
 8001c48:	20054cf4 	.word	0x20054cf4
 8001c4c:	20054cf0 	.word	0x20054cf0

08001c50 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <low_level_input+0x2c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <low_level_input+0x30>)
 8001c6c:	f002 fe45 	bl	80048fa <HAL_ETH_ReadData>
  }

  return p;
 8001c70:	68fb      	ldr	r3, [r7, #12]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20054ce8 	.word	0x20054ce8
 8001c80:	20054cf4 	.word	0x20054cf4

08001c84 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <ethernetif_input+0x50>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f00f fc3d 	bl	801151c <osSemaphoreAcquire>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f5      	bne.n	8001c94 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8001ca8:	68b8      	ldr	r0, [r7, #8]
 8001caa:	f7ff ffd1 	bl	8001c50 <low_level_input>
 8001cae:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00a      	beq.n	8001ccc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	4798      	blx	r3
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f017 faaa 	bl	8019220 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1ea      	bne.n	8001ca8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8001cd2:	e7df      	b.n	8001c94 <ethernetif_input+0x10>
 8001cd4:	20054cec 	.word	0x20054cec

08001cd8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d106      	bne.n	8001cf4 <ethernetif_init+0x1c>
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <ethernetif_init+0x48>)
 8001ce8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001cec:	490d      	ldr	r1, [pc, #52]	; (8001d24 <ethernetif_init+0x4c>)
 8001cee:	480e      	ldr	r0, [pc, #56]	; (8001d28 <ethernetif_init+0x50>)
 8001cf0:	f022 f96a 	bl	8023fc8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2273      	movs	r2, #115	; 0x73
 8001cf8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2274      	movs	r2, #116	; 0x74
 8001d00:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <ethernetif_init+0x54>)
 8001d08:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <ethernetif_init+0x58>)
 8001d0e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fdd1 	bl	80018b8 <low_level_init>

  return ERR_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	08025310 	.word	0x08025310
 8001d24:	08025338 	.word	0x08025338
 8001d28:	08025348 	.word	0x08025348
 8001d2c:	080213c5 	.word	0x080213c5
 8001d30:	08001b29 	.word	0x08001b29

08001d34 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8001d40:	68f9      	ldr	r1, [r7, #12]
 8001d42:	4809      	ldr	r0, [pc, #36]	; (8001d68 <pbuf_free_custom+0x34>)
 8001d44:	f016 faae 	bl	80182a4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <pbuf_free_custom+0x38>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d107      	bne.n	8001d60 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <pbuf_free_custom+0x38>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <pbuf_free_custom+0x3c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f00f fc2a 	bl	80115b4 <osSemaphoreRelease>
  }
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	08029804 	.word	0x08029804
 8001d6c:	20054ce8 	.word	0x20054ce8
 8001d70:	20054cec 	.word	0x20054cec

08001d74 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001d78:	f002 f9b6 	bl	80040e8 <HAL_GetTick>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08e      	sub	sp, #56	; 0x38
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a61      	ldr	r2, [pc, #388]	; (8001f28 <HAL_ETH_MspInit+0x1a4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	f040 80bb 	bne.w	8001f1e <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001da8:	4b60      	ldr	r3, [pc, #384]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dae:	4a5f      	ldr	r2, [pc, #380]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001db0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001db8:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dc2:	623b      	str	r3, [r7, #32]
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8001dc6:	4b59      	ldr	r3, [pc, #356]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dcc:	4a57      	ldr	r2, [pc, #348]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001dce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dd2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001dd6:	4b55      	ldr	r3, [pc, #340]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8001de4:	4b51      	ldr	r3, [pc, #324]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dea:	4a50      	ldr	r2, [pc, #320]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001dec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001df4:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e02:	4b4a      	ldr	r3, [pc, #296]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e08:	4a48      	ldr	r2, [pc, #288]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e12:	4b46      	ldr	r3, [pc, #280]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e20:	4b42      	ldr	r3, [pc, #264]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e26:	4a41      	ldr	r2, [pc, #260]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e30:	4b3e      	ldr	r3, [pc, #248]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e44:	4a39      	ldr	r2, [pc, #228]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e4e:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e5c:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e62:	4a32      	ldr	r2, [pc, #200]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <HAL_ETH_MspInit+0x1a8>)
 8001e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e7a:	2332      	movs	r3, #50	; 0x32
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e8a:	230b      	movs	r3, #11
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e92:	4619      	mov	r1, r3
 8001e94:	4826      	ldr	r0, [pc, #152]	; (8001f30 <HAL_ETH_MspInit+0x1ac>)
 8001e96:	f005 fae3 	bl	8007460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e9a:	2386      	movs	r3, #134	; 0x86
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eaa:	230b      	movs	r3, #11
 8001eac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	481f      	ldr	r0, [pc, #124]	; (8001f34 <HAL_ETH_MspInit+0x1b0>)
 8001eb6:	f005 fad3 	bl	8007460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ecc:	230b      	movs	r3, #11
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4818      	ldr	r0, [pc, #96]	; (8001f38 <HAL_ETH_MspInit+0x1b4>)
 8001ed8:	f005 fac2 	bl	8007460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001edc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eee:	230b      	movs	r3, #11
 8001ef0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4810      	ldr	r0, [pc, #64]	; (8001f3c <HAL_ETH_MspInit+0x1b8>)
 8001efa:	f005 fab1 	bl	8007460 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2105      	movs	r1, #5
 8001f02:	206a      	movs	r0, #106	; 0x6a
 8001f04:	f002 f9ee 	bl	80042e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001f08:	206a      	movs	r0, #106	; 0x6a
 8001f0a:	f002 fa05 	bl	8004318 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2105      	movs	r1, #5
 8001f12:	206b      	movs	r0, #107	; 0x6b
 8001f14:	f002 f9e6 	bl	80042e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8001f18:	206b      	movs	r0, #107	; 0x6b
 8001f1a:	f002 f9fd 	bl	8004318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001f1e:	bf00      	nop
 8001f20:	3738      	adds	r7, #56	; 0x38
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40028000 	.word	0x40028000
 8001f2c:	44020c00 	.word	0x44020c00
 8001f30:	42020800 	.word	0x42020800
 8001f34:	42020000 	.word	0x42020000
 8001f38:	42020400 	.word	0x42020400
 8001f3c:	42021800 	.word	0x42021800

08001f40 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <ETH_PHY_IO_Init+0x10>)
 8001f46:	f003 fa25 	bl	8005394 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20054cf4 	.word	0x20054cf4

08001f54 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	68f9      	ldr	r1, [r7, #12]
 8001f76:	4807      	ldr	r0, [pc, #28]	; (8001f94 <ETH_PHY_IO_ReadReg+0x30>)
 8001f78:	f002 ff76 	bl	8004e68 <HAL_ETH_ReadPHYRegister>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
 8001f86:	e000      	b.n	8001f8a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20054cf4 	.word	0x20054cf4

08001f98 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	68f9      	ldr	r1, [r7, #12]
 8001faa:	4807      	ldr	r0, [pc, #28]	; (8001fc8 <ETH_PHY_IO_WriteReg+0x30>)
 8001fac:	f002 ffb0 	bl	8004f10 <HAL_ETH_WritePHYRegister>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fba:	e000      	b.n	8001fbe <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20054cf4 	.word	0x20054cf4

08001fcc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001fd0:	f002 f88a 	bl	80040e8 <HAL_GetTick>
 8001fd4:	4603      	mov	r3, r0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b0a0      	sub	sp, #128	; 0x80
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8001fe4:	f107 0308 	add.w	r3, r7, #8
 8001fe8:	2264      	movs	r2, #100	; 0x64
 8001fea:	2100      	movs	r1, #0
 8001fec:	4618      	mov	r0, r3
 8001fee:	f022 f9bd 	bl	802436c <memset>
  int32_t PHYLinkState = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ffe:	2300      	movs	r3, #0
 8002000:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8002006:	483a      	ldr	r0, [pc, #232]	; (80020f0 <ethernet_link_thread+0x114>)
 8002008:	f000 f9cb 	bl	80023a2 <LAN8742_GetLinkState>
 800200c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800200e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002010:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00c      	beq.n	800203a <ethernet_link_thread+0x5e>
 8002020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002022:	2b01      	cmp	r3, #1
 8002024:	dc09      	bgt.n	800203a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8002026:	4833      	ldr	r0, [pc, #204]	; (80020f4 <ethernet_link_thread+0x118>)
 8002028:	f002 fb9e 	bl	8004768 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800202c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800202e:	f016 fcb3 	bl	8018998 <netif_set_down>
    netif_set_link_down(netif);
 8002032:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002034:	f016 fd16 	bl	8018a64 <netif_set_link_down>
 8002038:	e055      	b.n	80020e6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800203a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800203c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d14e      	bne.n	80020e6 <ethernet_link_thread+0x10a>
 8002048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800204a:	2b01      	cmp	r3, #1
 800204c:	dd4b      	ble.n	80020e6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800204e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002050:	3b02      	subs	r3, #2
 8002052:	2b03      	cmp	r3, #3
 8002054:	d82a      	bhi.n	80020ac <ethernet_link_thread+0xd0>
 8002056:	a201      	add	r2, pc, #4	; (adr r2, 800205c <ethernet_link_thread+0x80>)
 8002058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205c:	0800206d 	.word	0x0800206d
 8002060:	0800207f 	.word	0x0800207f
 8002064:	0800208f 	.word	0x0800208f
 8002068:	0800209f 	.word	0x0800209f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800206c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002070:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8002072:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002076:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8002078:	2301      	movs	r3, #1
 800207a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800207c:	e017      	b.n	80020ae <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800207e:	2300      	movs	r3, #0
 8002080:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8002082:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002086:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8002088:	2301      	movs	r3, #1
 800208a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800208c:	e00f      	b.n	80020ae <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800208e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002092:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8002094:	2300      	movs	r3, #0
 8002096:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8002098:	2301      	movs	r3, #1
 800209a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800209c:	e007      	b.n	80020ae <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800209e:	2300      	movs	r3, #0
 80020a0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80020a2:	2300      	movs	r3, #0
 80020a4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80020aa:	e000      	b.n	80020ae <ethernet_link_thread+0xd2>
    default:
      break;
 80020ac:	bf00      	nop
    }

    if(linkchanged)
 80020ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d018      	beq.n	80020e6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80020b4:	f107 0308 	add.w	r3, r7, #8
 80020b8:	4619      	mov	r1, r3
 80020ba:	480e      	ldr	r0, [pc, #56]	; (80020f4 <ethernet_link_thread+0x118>)
 80020bc:	f002 ff7c 	bl	8004fb8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80020c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020c2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80020c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020c6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80020c8:	f107 0308 	add.w	r3, r7, #8
 80020cc:	4619      	mov	r1, r3
 80020ce:	4809      	ldr	r0, [pc, #36]	; (80020f4 <ethernet_link_thread+0x118>)
 80020d0:	f003 f946 	bl	8005360 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80020d4:	4807      	ldr	r0, [pc, #28]	; (80020f4 <ethernet_link_thread+0x118>)
 80020d6:	f002 fab9 	bl	800464c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80020da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80020dc:	f016 fbf0 	bl	80188c0 <netif_set_up>
      netif_set_link_up(netif);
 80020e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80020e2:	f016 fc8b 	bl	80189fc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80020e6:	2064      	movs	r0, #100	; 0x64
 80020e8:	f00f f86a 	bl	80111c0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80020ec:	e78b      	b.n	8002006 <ethernet_link_thread+0x2a>
 80020ee:	bf00      	nop
 80020f0:	20054ddc 	.word	0x20054ddc
 80020f4:	20054cf4 	.word	0x20054cf4

080020f8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8002100:	4812      	ldr	r0, [pc, #72]	; (800214c <HAL_ETH_RxAllocateCallback+0x54>)
 8002102:	f016 f855 	bl	80181b0 <memp_malloc_pool>
 8002106:	60f8      	str	r0, [r7, #12]
  if (p)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d014      	beq.n	8002138 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f103 0220 	add.w	r2, r3, #32
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4a0d      	ldr	r2, [pc, #52]	; (8002150 <HAL_ETH_RxAllocateCallback+0x58>)
 800211c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002126:	9201      	str	r2, [sp, #4]
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2241      	movs	r2, #65	; 0x41
 800212e:	2100      	movs	r1, #0
 8002130:	2000      	movs	r0, #0
 8002132:	f016 febb 	bl	8018eac <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8002136:	e005      	b.n	8002144 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_ETH_RxAllocateCallback+0x5c>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
}
 8002144:	bf00      	nop
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	08029804 	.word	0x08029804
 8002150:	08001d35 	.word	0x08001d35
 8002154:	20054ce8 	.word	0x20054ce8

08002158 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3b20      	subs	r3, #32
 8002176:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	2200      	movs	r2, #0
 8002182:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d103      	bne.n	800219a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	e003      	b.n	80021a2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	69fa      	ldr	r2, [r7, #28]
 80021a6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	e009      	b.n	80021c4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	891a      	ldrh	r2, [r3, #8]
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	4413      	add	r3, r2
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	61fb      	str	r3, [r7, #28]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f2      	bne.n	80021b0 <HAL_ETH_RxLinkCallback+0x58>

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
//  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 80021ca:	bf00      	nop
 80021cc:	bf00      	nop
 80021ce:	3724      	adds	r7, #36	; 0x24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f017 f81d 	bl	8019220 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00b      	beq.n	8002216 <LAN8742_RegisterBusIO+0x28>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <LAN8742_RegisterBusIO+0x28>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <LAN8742_RegisterBusIO+0x28>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d102      	bne.n	800221c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	e014      	b.n	8002246 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d17c      	bne.n	800236c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2220      	movs	r2, #32
 8002284:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	e01c      	b.n	80022c6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f107 0208 	add.w	r2, r7, #8
 8002294:	2112      	movs	r1, #18
 8002296:	6978      	ldr	r0, [r7, #20]
 8002298:	4798      	blx	r3
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	da03      	bge.n	80022a8 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80022a0:	f06f 0304 	mvn.w	r3, #4
 80022a4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80022a6:	e00b      	b.n	80022c0 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d105      	bne.n	80022c0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
         break;
 80022be:	e005      	b.n	80022cc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3301      	adds	r3, #1
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b1f      	cmp	r3, #31
 80022ca:	d9df      	bls.n	800228c <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b1f      	cmp	r3, #31
 80022d2:	d902      	bls.n	80022da <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80022d4:	f06f 0302 	mvn.w	r3, #2
 80022d8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d145      	bne.n	800236c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6810      	ldr	r0, [r2, #0]
 80022e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022ec:	2100      	movs	r1, #0
 80022ee:	4798      	blx	r3
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db37      	blt.n	8002366 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6810      	ldr	r0, [r2, #0]
 80022fe:	f107 0208 	add.w	r2, r7, #8
 8002302:	2100      	movs	r1, #0
 8002304:	4798      	blx	r3
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	db28      	blt.n	800235e <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4798      	blx	r3
 8002312:	4603      	mov	r3, r0
 8002314:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002316:	e01c      	b.n	8002352 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4798      	blx	r3
 800231e:	4603      	mov	r3, r0
 8002320:	461a      	mov	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800232a:	d80e      	bhi.n	800234a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6810      	ldr	r0, [r2, #0]
 8002334:	f107 0208 	add.w	r2, r7, #8
 8002338:	2100      	movs	r1, #0
 800233a:	4798      	blx	r3
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	da07      	bge.n	8002352 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8002342:	f06f 0304 	mvn.w	r3, #4
 8002346:	613b      	str	r3, [r7, #16]
                 break;
 8002348:	e010      	b.n	800236c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800234a:	f06f 0301 	mvn.w	r3, #1
 800234e:	613b      	str	r3, [r7, #16]
               break;
 8002350:	e00c      	b.n	800236c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1dd      	bne.n	8002318 <LAN8742_Init+0xc6>
 800235c:	e006      	b.n	800236c <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800235e:	f06f 0304 	mvn.w	r3, #4
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	e002      	b.n	800236c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002366:	f06f 0303 	mvn.w	r3, #3
 800236a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d112      	bne.n	8002398 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	4798      	blx	r3
 8002378:	4603      	mov	r3, r0
 800237a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800237c:	bf00      	nop
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	4798      	blx	r3
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002390:	d9f5      	bls.n	800237e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	605a      	str	r2, [r3, #4]
   }

   return status;
 8002398:	693b      	ldr	r3, [r7, #16]
 }
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6810      	ldr	r0, [r2, #0]
 80023b6:	f107 020c 	add.w	r2, r7, #12
 80023ba:	2101      	movs	r1, #1
 80023bc:	4798      	blx	r3
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	da02      	bge.n	80023ca <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80023c4:	f06f 0304 	mvn.w	r3, #4
 80023c8:	e06e      	b.n	80024a8 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6810      	ldr	r0, [r2, #0]
 80023d2:	f107 020c 	add.w	r2, r7, #12
 80023d6:	2101      	movs	r1, #1
 80023d8:	4798      	blx	r3
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	da02      	bge.n	80023e6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80023e0:	f06f 0304 	mvn.w	r3, #4
 80023e4:	e060      	b.n	80024a8 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e059      	b.n	80024a8 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6810      	ldr	r0, [r2, #0]
 80023fc:	f107 020c 	add.w	r2, r7, #12
 8002400:	2100      	movs	r1, #0
 8002402:	4798      	blx	r3
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	da02      	bge.n	8002410 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800240a:	f06f 0304 	mvn.w	r3, #4
 800240e:	e04b      	b.n	80024a8 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d11b      	bne.n	8002452 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d006      	beq.n	8002432 <LAN8742_GetLinkState+0x90>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800242e:	2302      	movs	r3, #2
 8002430:	e03a      	b.n	80024a8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800243c:	2303      	movs	r3, #3
 800243e:	e033      	b.n	80024a8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800244a:	2304      	movs	r3, #4
 800244c:	e02c      	b.n	80024a8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800244e:	2305      	movs	r3, #5
 8002450:	e02a      	b.n	80024a8 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6810      	ldr	r0, [r2, #0]
 800245a:	f107 020c 	add.w	r2, r7, #12
 800245e:	211f      	movs	r1, #31
 8002460:	4798      	blx	r3
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	da02      	bge.n	800246e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002468:	f06f 0304 	mvn.w	r3, #4
 800246c:	e01c      	b.n	80024a8 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002478:	2306      	movs	r3, #6
 800247a:	e015      	b.n	80024a8 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 031c 	and.w	r3, r3, #28
 8002482:	2b18      	cmp	r3, #24
 8002484:	d101      	bne.n	800248a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002486:	2302      	movs	r3, #2
 8002488:	e00e      	b.n	80024a8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f003 031c 	and.w	r3, r3, #28
 8002490:	2b08      	cmp	r3, #8
 8002492:	d101      	bne.n	8002498 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002494:	2303      	movs	r3, #3
 8002496:	e007      	b.n	80024a8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 031c 	and.w	r3, r3, #28
 800249e:	2b14      	cmp	r3, #20
 80024a0:	d101      	bne.n	80024a6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80024a2:	2304      	movs	r3, #4
 80024a4:	e000      	b.n	80024a8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80024a6:	2305      	movs	r3, #5
    }
  }
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <CAN_Init>:
static volatile uint32_t err_int_cnt = 0;

static void CAN_ErrUpdate(uint8_t ch);

BOOL     CAN_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 80024b6:	2301      	movs	r3, #1
 80024b8:	603b      	str	r3, [r7, #0]

  for(int i=0; i<CAN_MAX_CH; i++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	e070      	b.n	80025a2 <CAN_Init+0xf2>
  {
    can_tbl[i].is_init = TRUE;
 80024c0:	4a3c      	ldr	r2, [pc, #240]	; (80025b4 <CAN_Init+0x104>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f240 516c 	movw	r1, #1388	; 0x56c
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
    can_tbl[i].is_open = TRUE;
 80024d2:	4a38      	ldr	r2, [pc, #224]	; (80025b4 <CAN_Init+0x104>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f240 516c 	movw	r1, #1388	; 0x56c
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	3304      	adds	r3, #4
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
    can_tbl[i].err_code = CAN_ERR_NONE;
 80024e6:	4a33      	ldr	r2, [pc, #204]	; (80025b4 <CAN_Init+0x104>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f240 516c 	movw	r1, #1388	; 0x56c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	3308      	adds	r3, #8
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
    can_tbl[i].state = 0;
 80024fa:	4a2e      	ldr	r2, [pc, #184]	; (80025b4 <CAN_Init+0x104>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f240 516c 	movw	r1, #1388	; 0x56c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	330c      	adds	r3, #12
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
    can_tbl[i].recovery_cnt = 0;
 800250e:	4a29      	ldr	r2, [pc, #164]	; (80025b4 <CAN_Init+0x104>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f240 516c 	movw	r1, #1388	; 0x56c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	3310      	adds	r3, #16
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

    can_tbl[i].q_rx_full_cnt = 0;
 8002522:	4a24      	ldr	r2, [pc, #144]	; (80025b4 <CAN_Init+0x104>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f240 516c 	movw	r1, #1388	; 0x56c
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	3314      	adds	r3, #20
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
    can_tbl[i].q_tx_full_cnt = 0;
 8002536:	4a1f      	ldr	r2, [pc, #124]	; (80025b4 <CAN_Init+0x104>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f240 516c 	movw	r1, #1388	; 0x56c
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	4413      	add	r3, r2
 8002544:	3318      	adds	r3, #24
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_full_cnt = 0;
 800254a:	4a1a      	ldr	r2, [pc, #104]	; (80025b4 <CAN_Init+0x104>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	331c      	adds	r3, #28
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_lost_cnt = 0;
 800255e:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <CAN_Init+0x104>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f240 516c 	movw	r1, #1388	; 0x56c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	3320      	adds	r3, #32
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]

    qbufferCreateBySize(&can_tbl[i].q_msg, (uint8_t *)&can_tbl[i].can_msg[0], sizeof(CAN_MSG_t), CAN_MSG_RX_BUF_MAX);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f240 526c 	movw	r2, #1388	; 0x56c
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	3398      	adds	r3, #152	; 0x98
 800257e:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <CAN_Init+0x104>)
 8002580:	1898      	adds	r0, r3, r2
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f240 526c 	movw	r2, #1388	; 0x56c
 8002588:	fb02 f303 	mul.w	r3, r2, r3
 800258c:	33a8      	adds	r3, #168	; 0xa8
 800258e:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <CAN_Init+0x104>)
 8002590:	4413      	add	r3, r2
 8002592:	1d19      	adds	r1, r3, #4
 8002594:	2310      	movs	r3, #16
 8002596:	224c      	movs	r2, #76	; 0x4c
 8002598:	f00d fd4a 	bl	8010030 <qbufferCreateBySize>
  for(int i=0; i<CAN_MAX_CH; i++)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3301      	adds	r3, #1
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	dd8b      	ble.n	80024c0 <CAN_Init+0x10>

  }
  return ret;
 80025a8:	683b      	ldr	r3, [r7, #0]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20054dfc 	.word	0x20054dfc

080025b8 <CAN_Open>:

BOOL     CAN_Open(uint8_t ch, CAN_MODE_t mode, CAN_FRAME_t frame, CAN_BAUD_t baud, CAN_BAUD_t baud_data)
{
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b089      	sub	sp, #36	; 0x24
 80025bc:	af02      	add	r7, sp, #8
 80025be:	4604      	mov	r4, r0
 80025c0:	4608      	mov	r0, r1
 80025c2:	4611      	mov	r1, r2
 80025c4:	461a      	mov	r2, r3
 80025c6:	4623      	mov	r3, r4
 80025c8:	71fb      	strb	r3, [r7, #7]
 80025ca:	4603      	mov	r3, r0
 80025cc:	71bb      	strb	r3, [r7, #6]
 80025ce:	460b      	mov	r3, r1
 80025d0:	717b      	strb	r3, [r7, #5]
 80025d2:	4613      	mov	r3, r2
 80025d4:	713b      	strb	r3, [r7, #4]
  BOOL ret = TRUE;
 80025d6:	2301      	movs	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
  FDCAN_HandleTypeDef  *p_can;
  uint32_t tdc_offset;

  p_can = &can_tbl[ch].hfdcan;
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	f240 526c 	movw	r2, #1388	; 0x56c
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	3330      	adds	r3, #48	; 0x30
 80025e6:	4a90      	ldr	r2, [pc, #576]	; (8002828 <CAN_Open+0x270>)
 80025e8:	4413      	add	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
  if(ch >= CAN_MAX_CH) return FALSE;
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <CAN_Open+0x3e>
 80025f2:	2300      	movs	r3, #0
 80025f4:	e114      	b.n	8002820 <CAN_Open+0x268>

  switch(ch)
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f040 80a8 	bne.w	800274e <CAN_Open+0x196>
  {
    case _DEF_CAN1:
      p_can->Instance = FDCAN1;
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4a8a      	ldr	r2, [pc, #552]	; (800282c <CAN_Open+0x274>)
 8002602:	601a      	str	r2, [r3, #0]
      p_can->Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	2200      	movs	r2, #0
 8002608:	605a      	str	r2, [r3, #4]
      p_can->Init.FrameFormat = frame_tbl[frame];
 800260a:	797b      	ldrb	r3, [r7, #5]
 800260c:	4a88      	ldr	r2, [pc, #544]	; (8002830 <CAN_Open+0x278>)
 800260e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	609a      	str	r2, [r3, #8]
      p_can->Init.Mode = mode_tbl[mode];
 8002616:	79bb      	ldrb	r3, [r7, #6]
 8002618:	4a86      	ldr	r2, [pc, #536]	; (8002834 <CAN_Open+0x27c>)
 800261a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	60da      	str	r2, [r3, #12]
      p_can->Init.AutoRetransmission = ENABLE;
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2201      	movs	r2, #1
 8002626:	741a      	strb	r2, [r3, #16]
      p_can->Init.TransmitPause = ENABLE;
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2201      	movs	r2, #1
 800262c:	745a      	strb	r2, [r3, #17]
      p_can->Init.ProtocolException = ENABLE;
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	2201      	movs	r2, #1
 8002632:	749a      	strb	r2, [r3, #18]
      p_can->Init.NominalPrescaler = p_baud_normal[baud].prescaler;
 8002634:	4b80      	ldr	r3, [pc, #512]	; (8002838 <CAN_Open+0x280>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	793b      	ldrb	r3, [r7, #4]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	4413      	add	r3, r2
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	615a      	str	r2, [r3, #20]
      p_can->Init.NominalSyncJumpWidth = p_baud_normal[baud].sjw;
 8002644:	4b7c      	ldr	r3, [pc, #496]	; (8002838 <CAN_Open+0x280>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	793b      	ldrb	r3, [r7, #4]
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	4413      	add	r3, r2
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	619a      	str	r2, [r3, #24]
      p_can->Init.NominalTimeSeg1 = p_baud_normal[baud].tseg1;
 8002654:	4b78      	ldr	r3, [pc, #480]	; (8002838 <CAN_Open+0x280>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	793b      	ldrb	r3, [r7, #4]
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	4413      	add	r3, r2
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	61da      	str	r2, [r3, #28]
      p_can->Init.NominalTimeSeg2 = p_baud_normal[baud].tseg2;
 8002664:	4b74      	ldr	r3, [pc, #464]	; (8002838 <CAN_Open+0x280>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	793b      	ldrb	r3, [r7, #4]
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	4413      	add	r3, r2
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	621a      	str	r2, [r3, #32]
      p_can->Init.DataPrescaler = p_baud_data[baud_data].prescaler;
 8002674:	4b71      	ldr	r3, [pc, #452]	; (800283c <CAN_Open+0x284>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	4413      	add	r3, r2
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	625a      	str	r2, [r3, #36]	; 0x24
      p_can->Init.DataSyncJumpWidth = p_baud_data[baud_data].sjw;
 8002686:	4b6d      	ldr	r3, [pc, #436]	; (800283c <CAN_Open+0x284>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	4413      	add	r3, r2
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
      p_can->Init.DataTimeSeg1 = p_baud_data[baud_data].tseg1;
 8002698:	4b68      	ldr	r3, [pc, #416]	; (800283c <CAN_Open+0x284>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	4413      	add	r3, r2
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	62da      	str	r2, [r3, #44]	; 0x2c
      p_can->Init.DataTimeSeg2 = p_baud_data[baud_data].tseg2;
 80026aa:	4b64      	ldr	r3, [pc, #400]	; (800283c <CAN_Open+0x284>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	4413      	add	r3, r2
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	631a      	str	r2, [r3, #48]	; 0x30
      p_can->Init.StdFiltersNbr = 28;
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	221c      	movs	r2, #28
 80026c0:	635a      	str	r2, [r3, #52]	; 0x34
      p_can->Init.ExtFiltersNbr = 8;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	2208      	movs	r2, #8
 80026c6:	639a      	str	r2, [r3, #56]	; 0x38
      p_can->Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION; //FIFO MODE
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	2200      	movs	r2, #0
 80026cc:	63da      	str	r2, [r3, #60]	; 0x3c
      can_tbl[ch].mode                  = mode;
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	4a55      	ldr	r2, [pc, #340]	; (8002828 <CAN_Open+0x270>)
 80026d2:	f240 516c 	movw	r1, #1388	; 0x56c
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	4413      	add	r3, r2
 80026dc:	332c      	adds	r3, #44	; 0x2c
 80026de:	79ba      	ldrb	r2, [r7, #6]
 80026e0:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].frame                 = frame;
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	4a50      	ldr	r2, [pc, #320]	; (8002828 <CAN_Open+0x270>)
 80026e6:	f240 516c 	movw	r1, #1388	; 0x56c
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	332d      	adds	r3, #45	; 0x2d
 80026f2:	797a      	ldrb	r2, [r7, #5]
 80026f4:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud                  = baud;
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	4a4b      	ldr	r2, [pc, #300]	; (8002828 <CAN_Open+0x270>)
 80026fa:	f240 516c 	movw	r1, #1388	; 0x56c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	332e      	adds	r3, #46	; 0x2e
 8002706:	793a      	ldrb	r2, [r7, #4]
 8002708:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud_data             = baud_data;
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	4a46      	ldr	r2, [pc, #280]	; (8002828 <CAN_Open+0x270>)
 800270e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	332f      	adds	r3, #47	; 0x2f
 800271a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800271e:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].fifo_idx              = FDCAN_RX_FIFO0;
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	4a41      	ldr	r2, [pc, #260]	; (8002828 <CAN_Open+0x270>)
 8002724:	f240 516c 	movw	r1, #1388	; 0x56c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	3324      	adds	r3, #36	; 0x24
 8002730:	2240      	movs	r2, #64	; 0x40
 8002732:	601a      	str	r2, [r3, #0]
      can_tbl[ch].enable_int            = FDCAN_IT_LIST_RX_FIFO0 |
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	4a3c      	ldr	r2, [pc, #240]	; (8002828 <CAN_Open+0x270>)
 8002738:	f240 516c 	movw	r1, #1388	; 0x56c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	3328      	adds	r3, #40	; 0x28
 8002744:	4a3e      	ldr	r2, [pc, #248]	; (8002840 <CAN_Open+0x288>)
 8002746:	601a      	str	r2, [r3, #0]
                                          FDCAN_IT_BUS_OFF |
                                          FDCAN_IT_ERROR_WARNING |
                                          FDCAN_IT_ERROR_PASSIVE;

      ret = TRUE;
 8002748:	2301      	movs	r3, #1
 800274a:	617b      	str	r3, [r7, #20]

      break;
 800274c:	bf00      	nop
  }

  if(ret != TRUE)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d001      	beq.n	8002758 <CAN_Open+0x1a0>
  {
    return FALSE;
 8002754:	2300      	movs	r3, #0
 8002756:	e063      	b.n	8002820 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_Init(p_can) != HAL_OK)
 8002758:	6938      	ldr	r0, [r7, #16]
 800275a:	f003 fc03 	bl	8005f64 <HAL_FDCAN_Init>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <CAN_Open+0x1b0>
  {
    return FALSE;
 8002764:	2300      	movs	r3, #0
 8002766:	e05b      	b.n	8002820 <CAN_Open+0x268>
  }

  CAN_ConfigFilter(ch, 0, CAN_STD, 0x0000, 0x0000);
 8002768:	79f8      	ldrb	r0, [r7, #7]
 800276a:	2300      	movs	r3, #0
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2300      	movs	r3, #0
 8002770:	2200      	movs	r2, #0
 8002772:	2100      	movs	r1, #0
 8002774:	f000 f866 	bl	8002844 <CAN_ConfigFilter>
  CAN_ConfigFilter(ch, 0, CAN_EXT, 0x0000, 0x0000);
 8002778:	79f8      	ldrb	r0, [r7, #7]
 800277a:	2300      	movs	r3, #0
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2300      	movs	r3, #0
 8002780:	2201      	movs	r2, #1
 8002782:	2100      	movs	r1, #0
 8002784:	f000 f85e 	bl	8002844 <CAN_ConfigFilter>

  if (HAL_FDCAN_ConfigGlobalFilter(p_can, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8002788:	2300      	movs	r3, #0
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	2300      	movs	r3, #0
 800278e:	2202      	movs	r2, #2
 8002790:	2102      	movs	r1, #2
 8002792:	6938      	ldr	r0, [r7, #16]
 8002794:	f003 fd9a 	bl	80062cc <HAL_FDCAN_ConfigGlobalFilter>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <CAN_Open+0x1ea>
  {
    return FALSE;
 800279e:	2300      	movs	r3, #0
 80027a0:	e03e      	b.n	8002820 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_ActivateNotification(p_can, can_tbl[ch].enable_int, 0) != HAL_OK)
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	4a20      	ldr	r2, [pc, #128]	; (8002828 <CAN_Open+0x270>)
 80027a6:	f240 516c 	movw	r1, #1388	; 0x56c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	3328      	adds	r3, #40	; 0x28
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2200      	movs	r2, #0
 80027b6:	4619      	mov	r1, r3
 80027b8:	6938      	ldr	r0, [r7, #16]
 80027ba:	f004 f866 	bl	800688a <HAL_FDCAN_ActivateNotification>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <CAN_Open+0x210>
  {
    return FALSE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e02b      	b.n	8002820 <CAN_Open+0x268>
  }


  tdc_offset = p_can->Init.DataPrescaler * p_can->Init.DataTimeSeg1;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027d0:	fb02 f303 	mul.w	r3, r2, r3
 80027d4:	60fb      	str	r3, [r7, #12]

  if (HAL_FDCAN_ConfigTxDelayCompensation(p_can, tdc_offset, 0) != HAL_OK) return FALSE;
 80027d6:	2200      	movs	r2, #0
 80027d8:	68f9      	ldr	r1, [r7, #12]
 80027da:	6938      	ldr	r0, [r7, #16]
 80027dc:	f003 fda7 	bl	800632e <HAL_FDCAN_ConfigTxDelayCompensation>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <CAN_Open+0x232>
 80027e6:	2300      	movs	r3, #0
 80027e8:	e01a      	b.n	8002820 <CAN_Open+0x268>
  if (HAL_FDCAN_EnableTxDelayCompensation(p_can) != HAL_OK)                return FALSE;
 80027ea:	6938      	ldr	r0, [r7, #16]
 80027ec:	f003 fdc1 	bl	8006372 <HAL_FDCAN_EnableTxDelayCompensation>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <CAN_Open+0x242>
 80027f6:	2300      	movs	r3, #0
 80027f8:	e012      	b.n	8002820 <CAN_Open+0x268>

  if (HAL_FDCAN_Start(p_can) != HAL_OK)
 80027fa:	6938      	ldr	r0, [r7, #16]
 80027fc:	f003 fdda 	bl	80063b4 <HAL_FDCAN_Start>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <CAN_Open+0x252>
  {
    return FALSE;
 8002806:	2300      	movs	r3, #0
 8002808:	e00a      	b.n	8002820 <CAN_Open+0x268>
  }

  can_tbl[ch].is_open = TRUE;
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	4a06      	ldr	r2, [pc, #24]	; (8002828 <CAN_Open+0x270>)
 800280e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	3304      	adds	r3, #4
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

  return ret;
 800281e:	697b      	ldr	r3, [r7, #20]
}
 8002820:	4618      	mov	r0, r3
 8002822:	371c      	adds	r7, #28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd90      	pop	{r4, r7, pc}
 8002828:	20054dfc 	.word	0x20054dfc
 800282c:	4000a400 	.word	0x4000a400
 8002830:	08029968 	.word	0x08029968
 8002834:	08029974 	.word	0x08029974
 8002838:	20050018 	.word	0x20050018
 800283c:	2005001c 	.word	0x2005001c
 8002840:	000e0007 	.word	0x000e0007

08002844 <CAN_ConfigFilter>:
void     CAN_Close(uint8_t ch)
{

}
BOOL     CAN_ConfigFilter(uint8_t ch, uint8_t index, CAN_ID_TYPE_t id_type, uint32_t id, uint32_t id_mask)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	; 0x28
 8002848:	af00      	add	r7, sp, #0
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	4603      	mov	r3, r0
 800284e:	71fb      	strb	r3, [r7, #7]
 8002850:	460b      	mov	r3, r1
 8002852:	71bb      	strb	r3, [r7, #6]
 8002854:	4613      	mov	r3, r2
 8002856:	717b      	strb	r3, [r7, #5]
  BOOL ret = FALSE;
 8002858:	2300      	movs	r3, #0
 800285a:	627b      	str	r3, [r7, #36]	; 0x24

  FDCAN_FilterTypeDef sFilterConfig;

  if (ch >= CAN_MAX_CH) return FALSE;
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <CAN_ConfigFilter+0x22>
 8002862:	2300      	movs	r3, #0
 8002864:	e034      	b.n	80028d0 <CAN_ConfigFilter+0x8c>


  if (id_type == CAN_STD)
 8002866:	797b      	ldrb	r3, [r7, #5]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <CAN_ConfigFilter+0x2e>
  {
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e002      	b.n	8002878 <CAN_ConfigFilter+0x34>
  }
  else
  {
    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8002872:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002876:	60fb      	str	r3, [r7, #12]
  }

  if (can_tbl[ch].fifo_idx == FDCAN_RX_FIFO0)
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	4a17      	ldr	r2, [pc, #92]	; (80028d8 <CAN_ConfigFilter+0x94>)
 800287c:	f240 516c 	movw	r1, #1388	; 0x56c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	3324      	adds	r3, #36	; 0x24
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b40      	cmp	r3, #64	; 0x40
 800288c:	d102      	bne.n	8002894 <CAN_ConfigFilter+0x50>
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO0;
 800288e:	2301      	movs	r3, #1
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	e001      	b.n	8002898 <CAN_ConfigFilter+0x54>
  }
  else
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO1;
 8002894:	2302      	movs	r3, #2
 8002896:	61bb      	str	r3, [r7, #24]
  }

  sFilterConfig.FilterIndex   = index;
 8002898:	79bb      	ldrb	r3, [r7, #6]
 800289a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterType    = FDCAN_FILTER_MASK; //Classic filter
 800289c:	2302      	movs	r3, #2
 800289e:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterID1     = id;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterID2     = id_mask;
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	623b      	str	r3, [r7, #32]


  if (HAL_FDCAN_ConfigFilter(&can_tbl[ch].hfdcan, &sFilterConfig) == HAL_OK)
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	f240 526c 	movw	r2, #1388	; 0x56c
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	3330      	adds	r3, #48	; 0x30
 80028b4:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <CAN_ConfigFilter+0x94>)
 80028b6:	4413      	add	r3, r2
 80028b8:	f107 020c 	add.w	r2, r7, #12
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 fcaa 	bl	8006218 <HAL_FDCAN_ConfigFilter>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <CAN_ConfigFilter+0x8a>
  {
    ret = TRUE;
 80028ca:	2301      	movs	r3, #1
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3728      	adds	r7, #40	; 0x28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20054dfc 	.word	0x20054dfc

080028dc <CAN_MsgAvailable>:

uint32_t CAN_MsgAvailable(uint8_t ch)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return 0;
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d901      	bls.n	80028f0 <CAN_MsgAvailable+0x14>
 80028ec:	2300      	movs	r3, #0
 80028ee:	e00b      	b.n	8002908 <CAN_MsgAvailable+0x2c>

  return qbufferAvailable(&can_tbl[ch].q_msg);
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	f240 526c 	movw	r2, #1388	; 0x56c
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	3398      	adds	r3, #152	; 0x98
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <CAN_MsgAvailable+0x34>)
 80028fe:	4413      	add	r3, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f00d fc78 	bl	80101f6 <qbufferAvailable>
 8002906:	4603      	mov	r3, r0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20054dfc 	.word	0x20054dfc

08002914 <CAN_MsgWrite>:
  p_msg->length  = dlc_len_tbl[dlc];
  return TRUE;
}

BOOL     CAN_MsgWrite(uint8_t ch, CAN_MSG_t *p_msg, uint32_t timeout)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b090      	sub	sp, #64	; 0x40
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	73fb      	strb	r3, [r7, #15]
  {
    FDCAN_HandleTypeDef  *p_can;
    FDCAN_TxHeaderTypeDef tx_header;
    uint32_t pre_time;
    BOOL ret = TRUE;
 8002922:	2301      	movs	r3, #1
 8002924:	63fb      	str	r3, [r7, #60]	; 0x3c


    if(ch > CAN_MAX_CH) return FALSE;
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d901      	bls.n	8002930 <CAN_MsgWrite+0x1c>
 800292c:	2300      	movs	r3, #0
 800292e:	e083      	b.n	8002a38 <CAN_MsgWrite+0x124>

    if (can_tbl[ch].err_code & CAN_ERR_BUS_OFF) return FALSE;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	4a43      	ldr	r2, [pc, #268]	; (8002a40 <CAN_MsgWrite+0x12c>)
 8002934:	f240 516c 	movw	r1, #1388	; 0x56c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	3308      	adds	r3, #8
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <CAN_MsgWrite+0x3a>
 800294a:	2300      	movs	r3, #0
 800294c:	e074      	b.n	8002a38 <CAN_MsgWrite+0x124>


    p_can = &can_tbl[ch].hfdcan;
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	f240 526c 	movw	r2, #1388	; 0x56c
 8002954:	fb02 f303 	mul.w	r3, r2, r3
 8002958:	3330      	adds	r3, #48	; 0x30
 800295a:	4a39      	ldr	r2, [pc, #228]	; (8002a40 <CAN_MsgWrite+0x12c>)
 800295c:	4413      	add	r3, r2
 800295e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch(p_msg->id_type)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <CAN_MsgWrite+0x5c>
 800296a:	2b01      	cmp	r3, #1
 800296c:	d003      	beq.n	8002976 <CAN_MsgWrite+0x62>
 800296e:	e006      	b.n	800297e <CAN_MsgWrite+0x6a>
    {
      case CAN_STD :
        tx_header.IdType = FDCAN_STANDARD_ID;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
        break;
 8002974:	e003      	b.n	800297e <CAN_MsgWrite+0x6a>

      case CAN_EXT :
        tx_header.IdType = FDCAN_EXTENDED_ID;
 8002976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800297a:	617b      	str	r3, [r7, #20]
        break;
 800297c:	bf00      	nop
    }

    switch(p_msg->frame)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002984:	2b02      	cmp	r3, #2
 8002986:	d011      	beq.n	80029ac <CAN_MsgWrite+0x98>
 8002988:	2b02      	cmp	r3, #2
 800298a:	dc16      	bgt.n	80029ba <CAN_MsgWrite+0xa6>
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <CAN_MsgWrite+0x82>
 8002990:	2b01      	cmp	r3, #1
 8002992:	d005      	beq.n	80029a0 <CAN_MsgWrite+0x8c>
 8002994:	e011      	b.n	80029ba <CAN_MsgWrite+0xa6>
    {
      case CAN_CLASSIC:
        tx_header.FDFormat      = FDCAN_CLASSIC_CAN;
 8002996:	2300      	movs	r3, #0
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 800299a:	2300      	movs	r3, #0
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800299e:	e00c      	b.n	80029ba <CAN_MsgWrite+0xa6>

      case CAN_FD_NO_BRS:
        tx_header.FDFormat      = FDCAN_FD_CAN;
 80029a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80029a6:	2300      	movs	r3, #0
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80029aa:	e006      	b.n	80029ba <CAN_MsgWrite+0xa6>

      case CAN_FD_BRS:
        tx_header.FDFormat      = FDCAN_FD_CAN;
 80029ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
        tx_header.BitRateSwitch = FDCAN_BRS_ON;
 80029b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80029b8:	bf00      	nop
    }

    tx_header.Identifier          = p_msg->id;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	613b      	str	r3, [r7, #16]
    tx_header.MessageMarker       = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	633b      	str	r3, [r7, #48]	; 0x30
    tx_header.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	623b      	str	r3, [r7, #32]
    tx_header.TxFrameType         = FDCAN_DATA_FRAME;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
    tx_header.DataLength          = dlc_tbl[p_msg->dlc];
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <CAN_MsgWrite+0x130>)
 80029da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029de:	61fb      	str	r3, [r7, #28]


    if (HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 80029e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80029e2:	f003 ff40 	bl	8006866 <HAL_FDCAN_GetTxFifoFreeLevel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <CAN_MsgWrite+0xdc>
    {
      return FALSE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e023      	b.n	8002a38 <CAN_MsgWrite+0x124>
    }


    pre_time = HAL_GetTick();
 80029f0:	f001 fb7a 	bl	80040e8 <HAL_GetTick>
 80029f4:	6378      	str	r0, [r7, #52]	; 0x34
    if(HAL_FDCAN_AddMessageToTxFifoQ(p_can, &tx_header, p_msg->data) == HAL_OK)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	1d9a      	adds	r2, r3, #6
 80029fa:	f107 0310 	add.w	r3, r7, #16
 80029fe:	4619      	mov	r1, r3
 8002a00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a02:	f003 fd6f 	bl	80064e4 <HAL_FDCAN_AddMessageToTxFifoQ>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d112      	bne.n	8002a32 <CAN_MsgWrite+0x11e>
    {
      /* Wait transmission complete */
      while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8002a0c:	e00a      	b.n	8002a24 <CAN_MsgWrite+0x110>
      {
        if (HAL_GetTick()-pre_time >= timeout)
 8002a0e:	f001 fb6b 	bl	80040e8 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d802      	bhi.n	8002a24 <CAN_MsgWrite+0x110>
        {
          ret = FALSE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8002a22:	e008      	b.n	8002a36 <CAN_MsgWrite+0x122>
      while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8002a24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a26:	f003 ff1e 	bl	8006866 <HAL_FDCAN_GetTxFifoFreeLevel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0ee      	beq.n	8002a0e <CAN_MsgWrite+0xfa>
 8002a30:	e001      	b.n	8002a36 <CAN_MsgWrite+0x122>
        }
      }
    }
    else
    {
      ret = FALSE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    return ret;
 8002a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  }
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3740      	adds	r7, #64	; 0x40
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20054dfc 	.word	0x20054dfc
 8002a44:	08029928 	.word	0x08029928

08002a48 <CAN_MsgRead>:
BOOL     CAN_MsgRead(uint8_t ch, CAN_MSG_t *p_msg)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	6039      	str	r1, [r7, #0]
 8002a52:	71fb      	strb	r3, [r7, #7]
  BOOL ret = TRUE;
 8002a54:	2301      	movs	r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]

  if(ch > CAN_MAX_CH) return 0;
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d901      	bls.n	8002a62 <CAN_MsgRead+0x1a>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e00e      	b.n	8002a80 <CAN_MsgRead+0x38>

  ret = qbufferRead(&can_tbl[ch].q_msg, (uint8_t *)p_msg, 1);
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	f240 526c 	movw	r2, #1388	; 0x56c
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	3398      	adds	r3, #152	; 0x98
 8002a6e:	4a06      	ldr	r2, [pc, #24]	; (8002a88 <CAN_MsgRead+0x40>)
 8002a70:	4413      	add	r3, r2
 8002a72:	2201      	movs	r2, #1
 8002a74:	6839      	ldr	r1, [r7, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f00d fb52 	bl	8010120 <qbufferRead>
 8002a7c:	60f8      	str	r0, [r7, #12]

  return ret;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20054dfc 	.word	0x20054dfc

08002a8c <CAN_GetRxErrCount>:

uint16_t CAN_GetRxErrCount(uint8_t ch)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d901      	bls.n	8002aa4 <CAN_GetRxErrCount+0x18>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e015      	b.n	8002ad0 <CAN_GetRxErrCount+0x44>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	f240 526c 	movw	r2, #1388	; 0x56c
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	3330      	adds	r3, #48	; 0x30
 8002ab0:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <CAN_GetRxErrCount+0x4c>)
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f107 020c 	add.w	r2, r7, #12
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 feae 	bl	800681c <HAL_FDCAN_GetErrorCounters>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 8002ac4:	7f7b      	ldrb	r3, [r7, #29]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <CAN_GetRxErrCount+0x42>
  {
    ret = error_counters.RxErrorCnt;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 8002ace:	8bfb      	ldrh	r3, [r7, #30]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3720      	adds	r7, #32
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20054dfc 	.word	0x20054dfc

08002adc <CAN_GetTxErrCount>:
uint16_t CAN_GetTxErrCount(uint8_t ch)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d901      	bls.n	8002af4 <CAN_GetTxErrCount+0x18>
 8002af0:	2300      	movs	r3, #0
 8002af2:	e015      	b.n	8002b20 <CAN_GetTxErrCount+0x44>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	f240 526c 	movw	r2, #1388	; 0x56c
 8002afa:	fb02 f303 	mul.w	r3, r2, r3
 8002afe:	3330      	adds	r3, #48	; 0x30
 8002b00:	4a09      	ldr	r2, [pc, #36]	; (8002b28 <CAN_GetTxErrCount+0x4c>)
 8002b02:	4413      	add	r3, r2
 8002b04:	f107 020c 	add.w	r2, r7, #12
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fe86 	bl	800681c <HAL_FDCAN_GetErrorCounters>
 8002b10:	4603      	mov	r3, r0
 8002b12:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 8002b14:	7f7b      	ldrb	r3, [r7, #29]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <CAN_GetTxErrCount+0x42>
  {
    ret = error_counters.TxErrorCnt;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 8002b1e:	8bfb      	ldrh	r3, [r7, #30]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3720      	adds	r7, #32
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20054dfc 	.word	0x20054dfc

08002b2c <CAN_RxFifoCallback>:
  return HAL_FDCAN_GetState(&can_tbl[ch].hfdcan);
}


void CAN_RxFifoCallback(uint8_t ch, FDCAN_HandleTypeDef *hfdcan)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08e      	sub	sp, #56	; 0x38
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	6039      	str	r1, [r7, #0]
 8002b36:	71fb      	strb	r3, [r7, #7]
  CAN_MSG_t *rx_buf;
  FDCAN_RxHeaderTypeDef rx_header;


  rx_buf  = (CAN_MSG_t *)qbufferPeekWrite(&can_tbl[ch].q_msg);
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	f240 526c 	movw	r2, #1388	; 0x56c
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	3398      	adds	r3, #152	; 0x98
 8002b44:	4a4b      	ldr	r2, [pc, #300]	; (8002c74 <CAN_RxFifoCallback+0x148>)
 8002b46:	4413      	add	r3, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f00d fb41 	bl	80101d0 <qbufferPeekWrite>
 8002b4e:	6378      	str	r0, [r7, #52]	; 0x34

  if (HAL_FDCAN_GetRxMessage(hfdcan, can_tbl[ch].fifo_idx, &rx_header, rx_buf->data) == HAL_OK)
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	4a48      	ldr	r2, [pc, #288]	; (8002c74 <CAN_RxFifoCallback+0x148>)
 8002b54:	f240 516c 	movw	r1, #1388	; 0x56c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3324      	adds	r3, #36	; 0x24
 8002b60:	6819      	ldr	r1, [r3, #0]
 8002b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b64:	3306      	adds	r3, #6
 8002b66:	f107 020c 	add.w	r2, r7, #12
 8002b6a:	6838      	ldr	r0, [r7, #0]
 8002b6c:	f003 fcfe 	bl	800656c <HAL_FDCAN_GetRxMessage>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d179      	bne.n	8002c6a <CAN_RxFifoCallback+0x13e>
  {
    if(rx_header.IdType == FDCAN_STANDARD_ID)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d107      	bne.n	8002b8c <CAN_RxFifoCallback+0x60>
    {
      rx_buf->id      = rx_header.Identifier;
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b80:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_STD;
 8002b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8002b8a:	e006      	b.n	8002b9a <CAN_RxFifoCallback+0x6e>
    }
    else
    {
      rx_buf->id      = rx_header.Identifier;
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b90:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_EXT;
 8002b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    }
    rx_buf->length = dlc_len_tbl[(rx_header.DataLength >> 16) & 0x0F];
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	4a35      	ldr	r2, [pc, #212]	; (8002c78 <CAN_RxFifoCallback+0x14c>)
 8002ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bac:	809a      	strh	r2, [r3, #4]


    if (rx_header.FDFormat == FDCAN_FD_CAN)
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bb4:	d10d      	bne.n	8002bd2 <CAN_RxFifoCallback+0xa6>
    {
      if (rx_header.BitRateSwitch == FDCAN_BRS_ON)
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bbc:	d104      	bne.n	8002bc8 <CAN_RxFifoCallback+0x9c>
      {
        rx_buf->frame = CAN_FD_BRS;
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002bc6:	e008      	b.n	8002bda <CAN_RxFifoCallback+0xae>
      }
      else
      {
        rx_buf->frame = CAN_FD_NO_BRS;
 8002bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002bd0:	e003      	b.n	8002bda <CAN_RxFifoCallback+0xae>
      }
    }
    else
    {
      rx_buf->frame = CAN_CLASSIC;
 8002bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    }

    if (qbufferWrite(&can_tbl[ch].q_msg, NULL, 1) != TRUE)
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	f240 526c 	movw	r2, #1388	; 0x56c
 8002be0:	fb02 f303 	mul.w	r3, r2, r3
 8002be4:	3398      	adds	r3, #152	; 0x98
 8002be6:	4a23      	ldr	r2, [pc, #140]	; (8002c74 <CAN_RxFifoCallback+0x148>)
 8002be8:	4413      	add	r3, r2
 8002bea:	2201      	movs	r2, #1
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f00d fa3d 	bl	801006e <qbufferWrite>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d011      	beq.n	8002c1e <CAN_RxFifoCallback+0xf2>
    {
      can_tbl[ch].q_rx_full_cnt++;
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	491d      	ldr	r1, [pc, #116]	; (8002c74 <CAN_RxFifoCallback+0x148>)
 8002bfe:	f240 526c 	movw	r2, #1388	; 0x56c
 8002c02:	fb03 f202 	mul.w	r2, r3, r2
 8002c06:	440a      	add	r2, r1
 8002c08:	3214      	adds	r2, #20
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	3201      	adds	r2, #1
 8002c0e:	4919      	ldr	r1, [pc, #100]	; (8002c74 <CAN_RxFifoCallback+0x148>)
 8002c10:	f240 506c 	movw	r0, #1388	; 0x56c
 8002c14:	fb00 f303 	mul.w	r3, r0, r3
 8002c18:	440b      	add	r3, r1
 8002c1a:	3314      	adds	r3, #20
 8002c1c:	601a      	str	r2, [r3, #0]
    }

    if( can_tbl[ch].handler != NULL )
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <CAN_RxFifoCallback+0x148>)
 8002c22:	f240 516c 	movw	r1, #1388	; 0x56c
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3394      	adds	r3, #148	; 0x94
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d01a      	beq.n	8002c6a <CAN_RxFifoCallback+0x13e>
    {
      if ((*can_tbl[ch].handler)((void *)rx_buf) == TRUE)
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	4a0f      	ldr	r2, [pc, #60]	; (8002c74 <CAN_RxFifoCallback+0x148>)
 8002c38:	f240 516c 	movw	r1, #1388	; 0x56c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	3394      	adds	r3, #148	; 0x94
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c48:	4798      	blx	r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d10c      	bne.n	8002c6a <CAN_RxFifoCallback+0x13e>
      {
        qbufferRead(&can_tbl[ch].q_msg, NULL, 1);
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	f240 526c 	movw	r2, #1388	; 0x56c
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	3398      	adds	r3, #152	; 0x98
 8002c5c:	4a05      	ldr	r2, [pc, #20]	; (8002c74 <CAN_RxFifoCallback+0x148>)
 8002c5e:	4413      	add	r3, r2
 8002c60:	2201      	movs	r2, #1
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f00d fa5b 	bl	8010120 <qbufferRead>
      }
    }
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	3738      	adds	r7, #56	; 0x38
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20054dfc 	.word	0x20054dfc
 8002c78:	080298e8 	.word	0x080298e8

08002c7c <CAN_Recovery>:

  can_tbl[ch].handler = NULL;
}

void CAN_Recovery(uint8_t ch)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return;
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d828      	bhi.n	8002cde <CAN_Recovery+0x62>

  HAL_FDCAN_Stop(&can_tbl[ch].hfdcan);
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	f240 526c 	movw	r2, #1388	; 0x56c
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	3330      	adds	r3, #48	; 0x30
 8002c98:	4a13      	ldr	r2, [pc, #76]	; (8002ce8 <CAN_Recovery+0x6c>)
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f003 fbb1 	bl	8006404 <HAL_FDCAN_Stop>
  HAL_FDCAN_Start(&can_tbl[ch].hfdcan);
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f240 526c 	movw	r2, #1388	; 0x56c
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	3330      	adds	r3, #48	; 0x30
 8002cae:	4a0e      	ldr	r2, [pc, #56]	; (8002ce8 <CAN_Recovery+0x6c>)
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 fb7e 	bl	80063b4 <HAL_FDCAN_Start>

  can_tbl[ch].recovery_cnt++;
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	490b      	ldr	r1, [pc, #44]	; (8002ce8 <CAN_Recovery+0x6c>)
 8002cbc:	f240 526c 	movw	r2, #1388	; 0x56c
 8002cc0:	fb03 f202 	mul.w	r2, r3, r2
 8002cc4:	440a      	add	r2, r1
 8002cc6:	3210      	adds	r2, #16
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	3201      	adds	r2, #1
 8002ccc:	4906      	ldr	r1, [pc, #24]	; (8002ce8 <CAN_Recovery+0x6c>)
 8002cce:	f240 506c 	movw	r0, #1388	; 0x56c
 8002cd2:	fb00 f303 	mul.w	r3, r0, r3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3310      	adds	r3, #16
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e000      	b.n	8002ce0 <CAN_Recovery+0x64>
  if(ch > CAN_MAX_CH) return;
 8002cde:	bf00      	nop
}
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20054dfc 	.word	0x20054dfc

08002cec <CAN_Update>:

BOOL     CAN_Update(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
  BOOL ret = FALSE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
  CAN_TBL_t *p_can;

  for (int i=0; i<CAN_MAX_CH; i++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	e02f      	b.n	8002d5c <CAN_Update+0x70>
  {
    p_can = &can_tbl[i];
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f240 526c 	movw	r2, #1388	; 0x56c
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	4a19      	ldr	r2, [pc, #100]	; (8002d6c <CAN_Update+0x80>)
 8002d08:	4413      	add	r3, r2
 8002d0a:	607b      	str	r3, [r7, #4]


    switch(p_can->state)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	7b1b      	ldrb	r3, [r3, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <CAN_Update+0x2e>
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d011      	beq.n	8002d3c <CAN_Update+0x50>
 8002d18:	e01d      	b.n	8002d56 <CAN_Update+0x6a>
    {
      case 0:
        if (p_can->err_code & CAN_ERR_BUS_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d014      	beq.n	8002d50 <CAN_Update+0x64>
        {
          CAN_Recovery(i);
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ffa6 	bl	8002c7c <CAN_Recovery>
          p_can->state = 1;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	731a      	strb	r2, [r3, #12]
          ret = TRUE;
 8002d36:	2301      	movs	r3, #1
 8002d38:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002d3a:	e009      	b.n	8002d50 <CAN_Update+0x64>

      case 1:
        if ((p_can->err_code & CAN_ERR_BUS_OFF) == 0)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d105      	bne.n	8002d54 <CAN_Update+0x68>
        {
          p_can->state = 0;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	731a      	strb	r2, [r3, #12]
        }
        break;
 8002d4e:	e001      	b.n	8002d54 <CAN_Update+0x68>
        break;
 8002d50:	bf00      	nop
 8002d52:	e000      	b.n	8002d56 <CAN_Update+0x6a>
        break;
 8002d54:	bf00      	nop
  for (int i=0; i<CAN_MAX_CH; i++)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	ddcc      	ble.n	8002cfc <CAN_Update+0x10>
    }
  }

  return ret;
 8002d62:	68fb      	ldr	r3, [r7, #12]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20054dfc 	.word	0x20054dfc

08002d70 <CAN_ErrPrint>:

  can_tbl[ch].err_code = CAN_ERR_NONE;
}

void     CAN_ErrPrint(uint8_t ch)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
  uint32_t err_code;


  if(ch > CAN_MAX_CH) return;
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d822      	bhi.n	8002dc6 <CAN_ErrPrint+0x56>

  err_code = can_tbl[ch].err_code;
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <CAN_ErrPrint+0x60>)
 8002d84:	f240 516c 	movw	r1, #1388	; 0x56c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3308      	adds	r3, #8
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	60fb      	str	r3, [r7, #12]

  if (err_code & CAN_ERR_PASSIVE) UART_Printf("  ERR : CAN_ERR_PASSIVE\n");
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <CAN_ErrPrint+0x34>
 8002d9e:	480d      	ldr	r0, [pc, #52]	; (8002dd4 <CAN_ErrPrint+0x64>)
 8002da0:	f001 f81c 	bl	8003ddc <UART_Printf>
  if (err_code & CAN_ERR_WARNING) UART_Printf("  ERR : CAN_ERR_WARNING\n");
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <CAN_ErrPrint+0x44>
 8002dae:	480a      	ldr	r0, [pc, #40]	; (8002dd8 <CAN_ErrPrint+0x68>)
 8002db0:	f001 f814 	bl	8003ddc <UART_Printf>
  if (err_code & CAN_ERR_BUS_OFF) UART_Printf("  ERR : CAN_ERR_BUS_OFF\n");
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <CAN_ErrPrint+0x58>
 8002dbe:	4807      	ldr	r0, [pc, #28]	; (8002ddc <CAN_ErrPrint+0x6c>)
 8002dc0:	f001 f80c 	bl	8003ddc <UART_Printf>
 8002dc4:	e000      	b.n	8002dc8 <CAN_ErrPrint+0x58>
  if(ch > CAN_MAX_CH) return;
 8002dc6:	bf00      	nop
}
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20054dfc 	.word	0x20054dfc
 8002dd4:	08025370 	.word	0x08025370
 8002dd8:	0802538c 	.word	0x0802538c
 8002ddc:	080253a8 	.word	0x080253a8

08002de0 <CAN_ErrUpdate>:

void CAN_ErrUpdate(uint8_t ch)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08e      	sub	sp, #56	; 0x38
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
  FDCAN_ProtocolStatusTypeDef protocol_status;

  HAL_FDCAN_GetProtocolStatus(&can_tbl[ch].hfdcan, &protocol_status);
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	f240 526c 	movw	r2, #1388	; 0x56c
 8002df0:	fb02 f303 	mul.w	r3, r2, r3
 8002df4:	3330      	adds	r3, #48	; 0x30
 8002df6:	4a48      	ldr	r2, [pc, #288]	; (8002f18 <CAN_ErrUpdate+0x138>)
 8002df8:	4413      	add	r3, r2
 8002dfa:	f107 020c 	add.w	r2, r7, #12
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f003 fcbb 	bl	800677c <HAL_FDCAN_GetProtocolStatus>

  if (protocol_status.ErrorPassive)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d014      	beq.n	8002e36 <CAN_ErrUpdate+0x56>
  {
    can_tbl[ch].err_code |= CAN_ERR_PASSIVE;
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	4a42      	ldr	r2, [pc, #264]	; (8002f18 <CAN_ErrUpdate+0x138>)
 8002e10:	f240 516c 	movw	r1, #1388	; 0x56c
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	4413      	add	r3, r2
 8002e1a:	3308      	adds	r3, #8
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	493c      	ldr	r1, [pc, #240]	; (8002f18 <CAN_ErrUpdate+0x138>)
 8002e26:	f240 506c 	movw	r0, #1388	; 0x56c
 8002e2a:	fb00 f303 	mul.w	r3, r0, r3
 8002e2e:	440b      	add	r3, r1
 8002e30:	3308      	adds	r3, #8
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e013      	b.n	8002e5e <CAN_ErrUpdate+0x7e>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_PASSIVE;
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	4a37      	ldr	r2, [pc, #220]	; (8002f18 <CAN_ErrUpdate+0x138>)
 8002e3a:	f240 516c 	movw	r1, #1388	; 0x56c
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	3308      	adds	r3, #8
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	f022 0201 	bic.w	r2, r2, #1
 8002e4e:	4932      	ldr	r1, [pc, #200]	; (8002f18 <CAN_ErrUpdate+0x138>)
 8002e50:	f240 506c 	movw	r0, #1388	; 0x56c
 8002e54:	fb00 f303 	mul.w	r3, r0, r3
 8002e58:	440b      	add	r3, r1
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.Warning)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d014      	beq.n	8002e8e <CAN_ErrUpdate+0xae>
  {
    can_tbl[ch].err_code |= CAN_ERR_WARNING;
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	4a2c      	ldr	r2, [pc, #176]	; (8002f18 <CAN_ErrUpdate+0x138>)
 8002e68:	f240 516c 	movw	r1, #1388	; 0x56c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3308      	adds	r3, #8
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	f042 0202 	orr.w	r2, r2, #2
 8002e7c:	4926      	ldr	r1, [pc, #152]	; (8002f18 <CAN_ErrUpdate+0x138>)
 8002e7e:	f240 506c 	movw	r0, #1388	; 0x56c
 8002e82:	fb00 f303 	mul.w	r3, r0, r3
 8002e86:	440b      	add	r3, r1
 8002e88:	3308      	adds	r3, #8
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	e013      	b.n	8002eb6 <CAN_ErrUpdate+0xd6>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_WARNING;
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	4a21      	ldr	r2, [pc, #132]	; (8002f18 <CAN_ErrUpdate+0x138>)
 8002e92:	f240 516c 	movw	r1, #1388	; 0x56c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3308      	adds	r3, #8
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	f022 0202 	bic.w	r2, r2, #2
 8002ea6:	491c      	ldr	r1, [pc, #112]	; (8002f18 <CAN_ErrUpdate+0x138>)
 8002ea8:	f240 506c 	movw	r0, #1388	; 0x56c
 8002eac:	fb00 f303 	mul.w	r3, r0, r3
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3308      	adds	r3, #8
 8002eb4:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.BusOff)
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d014      	beq.n	8002ee6 <CAN_ErrUpdate+0x106>
  {
    can_tbl[ch].err_code |= CAN_ERR_BUS_OFF;
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	4a16      	ldr	r2, [pc, #88]	; (8002f18 <CAN_ErrUpdate+0x138>)
 8002ec0:	f240 516c 	movw	r1, #1388	; 0x56c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	3308      	adds	r3, #8
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	f042 0204 	orr.w	r2, r2, #4
 8002ed4:	4910      	ldr	r1, [pc, #64]	; (8002f18 <CAN_ErrUpdate+0x138>)
 8002ed6:	f240 506c 	movw	r0, #1388	; 0x56c
 8002eda:	fb00 f303 	mul.w	r3, r0, r3
 8002ede:	440b      	add	r3, r1
 8002ee0:	3308      	adds	r3, #8
 8002ee2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
  }
}
 8002ee4:	e013      	b.n	8002f0e <CAN_ErrUpdate+0x12e>
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	4a0b      	ldr	r2, [pc, #44]	; (8002f18 <CAN_ErrUpdate+0x138>)
 8002eea:	f240 516c 	movw	r1, #1388	; 0x56c
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3308      	adds	r3, #8
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	f022 0204 	bic.w	r2, r2, #4
 8002efe:	4906      	ldr	r1, [pc, #24]	; (8002f18 <CAN_ErrUpdate+0x138>)
 8002f00:	f240 506c 	movw	r0, #1388	; 0x56c
 8002f04:	fb00 f303 	mul.w	r3, r0, r3
 8002f08:	440b      	add	r3, r1
 8002f0a:	3308      	adds	r3, #8
 8002f0c:	601a      	str	r2, [r3, #0]
}
 8002f0e:	bf00      	nop
 8002f10:	3738      	adds	r7, #56	; 0x38
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20054dfc 	.word	0x20054dfc

08002f1c <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint8_t ch = _DEF_CAN1;
 8002f26:	2300      	movs	r3, #0
 8002f28:	73fb      	strb	r3, [r7, #15]

  CAN_ErrUpdate(ch);
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff57 	bl	8002de0 <CAN_ErrUpdate>
}
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <HAL_FDCAN_ErrorCallback>:
void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint8_t ch = _DEF_CAN1;
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]

  err_int_cnt++;
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_FDCAN_ErrorCallback+0x54>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <HAL_FDCAN_ErrorCallback+0x54>)
 8002f50:	6013      	str	r3, [r2, #0]

  if (hfdcan->ErrorCode > 0)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d013      	beq.n	8002f82 <HAL_FDCAN_ErrorCallback+0x46>
  {
    can_tbl[ch].err_code |= CAN_ERR_ETC;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <HAL_FDCAN_ErrorCallback+0x58>)
 8002f5e:	f240 516c 	movw	r1, #1388	; 0x56c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	3308      	adds	r3, #8
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	f042 0210 	orr.w	r2, r2, #16
 8002f72:	4908      	ldr	r1, [pc, #32]	; (8002f94 <HAL_FDCAN_ErrorCallback+0x58>)
 8002f74:	f240 506c 	movw	r0, #1388	; 0x56c
 8002f78:	fb00 f303 	mul.w	r3, r0, r3
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3308      	adds	r3, #8
 8002f80:	601a      	str	r2, [r3, #0]
  }
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20055368 	.word	0x20055368
 8002f94:	20054dfc 	.word	0x20054dfc

08002f98 <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  HAL_FDCAN_IRQHandler(&can_tbl[_DEF_CAN1].hfdcan);
 8002f9c:	4802      	ldr	r0, [pc, #8]	; (8002fa8 <FDCAN1_IT0_IRQHandler+0x10>)
 8002f9e:	f003 fd5a 	bl	8006a56 <HAL_FDCAN_IRQHandler>
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20054e2c 	.word	0x20054e2c

08002fac <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_FDCAN_RxFifo0Callback+0x1c>
  {
    CAN_RxFifoCallback(_DEF_CAN1, hfdcan);
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f7ff fdb2 	bl	8002b2c <CAN_RxFifoCallback>
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_FULL) != RESET)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d004      	beq.n	8002fdc <HAL_FDCAN_RxFifo0Callback+0x30>
  {
    can_tbl[_DEF_CAN1].fifo_full_cnt++;
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	4a07      	ldr	r2, [pc, #28]	; (8002ff8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002fda:	61d3      	str	r3, [r2, #28]
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_MESSAGE_LOST) != RESET)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d004      	beq.n	8002ff0 <HAL_FDCAN_RxFifo0Callback+0x44>
  {
    can_tbl[_DEF_CAN1].fifo_lost_cnt++;
 8002fe6:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	3301      	adds	r3, #1
 8002fec:	4a02      	ldr	r2, [pc, #8]	; (8002ff8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8002fee:	6213      	str	r3, [r2, #32]
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20054dfc 	.word	0x20054dfc

08002ffc <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b0cc      	sub	sp, #304	; 0x130
 8003000:	af00      	add	r7, sp, #0
 8003002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003006:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800300a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800301c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003020:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003024:	4618      	mov	r0, r3
 8003026:	f44f 7384 	mov.w	r3, #264	; 0x108
 800302a:	461a      	mov	r2, r3
 800302c:	2100      	movs	r1, #0
 800302e:	f021 f99d 	bl	802436c <memset>
  if(hfdcan->Instance==FDCAN1)
 8003032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003036:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a37      	ldr	r2, [pc, #220]	; (800311c <HAL_FDCAN_MspInit+0x120>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d166      	bne.n	8003112 <HAL_FDCAN_MspInit+0x116>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003048:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0304 	mov.w	r3, #4
 8003054:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8003058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800305c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003060:	2200      	movs	r2, #0
 8003062:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003066:	f107 0310 	add.w	r3, r7, #16
 800306a:	4618      	mov	r0, r3
 800306c:	f005 fb70 	bl	8008750 <HAL_RCCEx_PeriphCLKConfig>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_FDCAN_MspInit+0x7e>
    {
      Error_Handler();
 8003076:	f7fd ff05 	bl	8000e84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800307a:	4b29      	ldr	r3, [pc, #164]	; (8003120 <HAL_FDCAN_MspInit+0x124>)
 800307c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003080:	4a27      	ldr	r2, [pc, #156]	; (8003120 <HAL_FDCAN_MspInit+0x124>)
 8003082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003086:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 800308a:	4b25      	ldr	r3, [pc, #148]	; (8003120 <HAL_FDCAN_MspInit+0x124>)
 800308c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003090:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8003094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003098:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030a2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80030a6:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_FDCAN_MspInit+0x124>)
 80030aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030ae:	4a1c      	ldr	r2, [pc, #112]	; (8003120 <HAL_FDCAN_MspInit+0x124>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_FDCAN_MspInit+0x124>)
 80030ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030be:	f003 0201 	and.w	r2, r3, #1
 80030c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80030d0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80030d4:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80030d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80030da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030de:	2302      	movs	r3, #2
 80030e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80030f0:	2309      	movs	r3, #9
 80030f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80030fa:	4619      	mov	r1, r3
 80030fc:	4809      	ldr	r0, [pc, #36]	; (8003124 <HAL_FDCAN_MspInit+0x128>)
 80030fe:	f004 f9af 	bl	8007460 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8003102:	2200      	movs	r2, #0
 8003104:	2105      	movs	r1, #5
 8003106:	2027      	movs	r0, #39	; 0x27
 8003108:	f001 f8ec 	bl	80042e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800310c:	2027      	movs	r0, #39	; 0x27
 800310e:	f001 f903 	bl	8004318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8003112:	bf00      	nop
 8003114:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	4000a400 	.word	0x4000a400
 8003120:	44020c00 	.word	0x44020c00
 8003124:	42020000 	.word	0x42020000

08003128 <CLI_FDCANTest>:
}

#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (CAN_TEST, "CAN", "CAN [1(INFO),2(READ),3(SEND)] [SEND ID]", CLI_FDCANTest)
static void CLI_FDCANTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b0a1      	sub	sp, #132	; 0x84
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  BOOL ret = FALSE;
 8003136:	2300      	movs	r3, #0
 8003138:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (nCount == 2)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b02      	cmp	r3, #2
 800313e:	f040 822b 	bne.w	8003598 <CLI_FDCANTest+0x470>
  {
    switch(nFirst)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b03      	cmp	r3, #3
 8003146:	f000 80d3 	beq.w	80032f0 <CLI_FDCANTest+0x1c8>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b03      	cmp	r3, #3
 800314e:	f200 8223 	bhi.w	8003598 <CLI_FDCANTest+0x470>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d003      	beq.n	8003160 <CLI_FDCANTest+0x38>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d062      	beq.n	8003224 <CLI_FDCANTest+0xfc>
          }
        }
        ret = TRUE;
    }
  }
}
 800315e:	e21b      	b.n	8003598 <CLI_FDCANTest+0x470>
        for (int i=0; i<CAN_MAX_CH; i++)
 8003160:	2300      	movs	r3, #0
 8003162:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003164:	e057      	b.n	8003216 <CLI_FDCANTest+0xee>
          DebugMsg(DEBUGMSG_CLI,"is_open       : %d\n", can_tbl[i].is_open);
 8003166:	4b94      	ldr	r3, [pc, #592]	; (80033b8 <CLI_FDCANTest+0x290>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00c      	beq.n	8003188 <CLI_FDCANTest+0x60>
 800316e:	4a93      	ldr	r2, [pc, #588]	; (80033bc <CLI_FDCANTest+0x294>)
 8003170:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003172:	f240 516c 	movw	r1, #1388	; 0x56c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	3304      	adds	r3, #4
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4619      	mov	r1, r3
 8003182:	488f      	ldr	r0, [pc, #572]	; (80033c0 <CLI_FDCANTest+0x298>)
 8003184:	f000 ff40 	bl	8004008 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_rx_full_cnt : %d\n", can_tbl[i].q_rx_full_cnt);
 8003188:	4b8b      	ldr	r3, [pc, #556]	; (80033b8 <CLI_FDCANTest+0x290>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00c      	beq.n	80031aa <CLI_FDCANTest+0x82>
 8003190:	4a8a      	ldr	r2, [pc, #552]	; (80033bc <CLI_FDCANTest+0x294>)
 8003192:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003194:	f240 516c 	movw	r1, #1388	; 0x56c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	3314      	adds	r3, #20
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4619      	mov	r1, r3
 80031a4:	4887      	ldr	r0, [pc, #540]	; (80033c4 <CLI_FDCANTest+0x29c>)
 80031a6:	f000 ff2f 	bl	8004008 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_tx_full_cnt : %d\n", can_tbl[i].q_tx_full_cnt);
 80031aa:	4b83      	ldr	r3, [pc, #524]	; (80033b8 <CLI_FDCANTest+0x290>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00c      	beq.n	80031cc <CLI_FDCANTest+0xa4>
 80031b2:	4a82      	ldr	r2, [pc, #520]	; (80033bc <CLI_FDCANTest+0x294>)
 80031b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031b6:	f240 516c 	movw	r1, #1388	; 0x56c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3318      	adds	r3, #24
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4619      	mov	r1, r3
 80031c6:	4880      	ldr	r0, [pc, #512]	; (80033c8 <CLI_FDCANTest+0x2a0>)
 80031c8:	f000 ff1e 	bl	8004008 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_full_cnt : %d\n", can_tbl[i].fifo_full_cnt);
 80031cc:	4b7a      	ldr	r3, [pc, #488]	; (80033b8 <CLI_FDCANTest+0x290>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00c      	beq.n	80031ee <CLI_FDCANTest+0xc6>
 80031d4:	4a79      	ldr	r2, [pc, #484]	; (80033bc <CLI_FDCANTest+0x294>)
 80031d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031d8:	f240 516c 	movw	r1, #1388	; 0x56c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	331c      	adds	r3, #28
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4619      	mov	r1, r3
 80031e8:	4878      	ldr	r0, [pc, #480]	; (80033cc <CLI_FDCANTest+0x2a4>)
 80031ea:	f000 ff0d 	bl	8004008 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_lost_cnt : %d\n", can_tbl[i].fifo_lost_cnt);
 80031ee:	4b72      	ldr	r3, [pc, #456]	; (80033b8 <CLI_FDCANTest+0x290>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00c      	beq.n	8003210 <CLI_FDCANTest+0xe8>
 80031f6:	4a71      	ldr	r2, [pc, #452]	; (80033bc <CLI_FDCANTest+0x294>)
 80031f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031fa:	f240 516c 	movw	r1, #1388	; 0x56c
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	4413      	add	r3, r2
 8003204:	3320      	adds	r3, #32
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4619      	mov	r1, r3
 800320a:	4871      	ldr	r0, [pc, #452]	; (80033d0 <CLI_FDCANTest+0x2a8>)
 800320c:	f000 fefc 	bl	8004008 <svDebugMessage>
        for (int i=0; i<CAN_MAX_CH; i++)
 8003210:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003212:	3301      	adds	r3, #1
 8003214:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003216:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003218:	2b00      	cmp	r3, #0
 800321a:	dda4      	ble.n	8003166 <CLI_FDCANTest+0x3e>
        ret = TRUE;
 800321c:	2301      	movs	r3, #1
 800321e:	65fb      	str	r3, [r7, #92]	; 0x5c
        break;
 8003220:	bf00      	nop
}
 8003222:	e1b9      	b.n	8003598 <CLI_FDCANTest+0x470>
        uint32_t index = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	67bb      	str	r3, [r7, #120]	; 0x78
        while(svCLI_KeepLoop())
 8003228:	e05d      	b.n	80032e6 <CLI_FDCANTest+0x1be>
          if (CAN_MsgAvailable(_DEF_CAN1))
 800322a:	2000      	movs	r0, #0
 800322c:	f7ff fb56 	bl	80028dc <CAN_MsgAvailable>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d057      	beq.n	80032e6 <CLI_FDCANTest+0x1be>
            CAN_MsgRead(_DEF_CAN1, &msg);
 8003236:	f107 0310 	add.w	r3, r7, #16
 800323a:	4619      	mov	r1, r3
 800323c:	2000      	movs	r0, #0
 800323e:	f7ff fc03 	bl	8002a48 <CAN_MsgRead>
            index %= 1000;
 8003242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003244:	4a63      	ldr	r2, [pc, #396]	; (80033d4 <CLI_FDCANTest+0x2ac>)
 8003246:	fba2 1203 	umull	r1, r2, r2, r3
 800324a:	0992      	lsrs	r2, r2, #6
 800324c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003250:	fb01 f202 	mul.w	r2, r1, r2
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	67bb      	str	r3, [r7, #120]	; 0x78
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", index++);
 8003258:	4b57      	ldr	r3, [pc, #348]	; (80033b8 <CLI_FDCANTest+0x290>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d006      	beq.n	800326e <CLI_FDCANTest+0x146>
 8003260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	67ba      	str	r2, [r7, #120]	; 0x78
 8003266:	4619      	mov	r1, r3
 8003268:	485b      	ldr	r0, [pc, #364]	; (80033d8 <CLI_FDCANTest+0x2b0>)
 800326a:	f000 fecd 	bl	8004008 <svDebugMessage>
            if (msg.id_type == CAN_STD)
 800326e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003272:	2b00      	cmp	r3, #0
 8003274:	d107      	bne.n	8003286 <CLI_FDCANTest+0x15e>
              DebugMsg(DEBUGMSG_CLI,"std ");
 8003276:	4b50      	ldr	r3, [pc, #320]	; (80033b8 <CLI_FDCANTest+0x290>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <CLI_FDCANTest+0x16c>
 800327e:	4857      	ldr	r0, [pc, #348]	; (80033dc <CLI_FDCANTest+0x2b4>)
 8003280:	f000 fec2 	bl	8004008 <svDebugMessage>
 8003284:	e006      	b.n	8003294 <CLI_FDCANTest+0x16c>
              DebugMsg(DEBUGMSG_CLI,"ext ");
 8003286:	4b4c      	ldr	r3, [pc, #304]	; (80033b8 <CLI_FDCANTest+0x290>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <CLI_FDCANTest+0x16c>
 800328e:	4854      	ldr	r0, [pc, #336]	; (80033e0 <CLI_FDCANTest+0x2b8>)
 8003290:	f000 feba 	bl	8004008 <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 8003294:	4b48      	ldr	r3, [pc, #288]	; (80033b8 <CLI_FDCANTest+0x290>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <CLI_FDCANTest+0x180>
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	8aba      	ldrh	r2, [r7, #20]
 80032a0:	4619      	mov	r1, r3
 80032a2:	4850      	ldr	r0, [pc, #320]	; (80033e4 <CLI_FDCANTest+0x2bc>)
 80032a4:	f000 feb0 	bl	8004008 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 80032a8:	2300      	movs	r3, #0
 80032aa:	677b      	str	r3, [r7, #116]	; 0x74
 80032ac:	e00f      	b.n	80032ce <CLI_FDCANTest+0x1a6>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 80032ae:	4b42      	ldr	r3, [pc, #264]	; (80033b8 <CLI_FDCANTest+0x290>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <CLI_FDCANTest+0x1a0>
 80032b6:	f107 0216 	add.w	r2, r7, #22
 80032ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032bc:	4413      	add	r3, r2
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	4619      	mov	r1, r3
 80032c2:	4849      	ldr	r0, [pc, #292]	; (80033e8 <CLI_FDCANTest+0x2c0>)
 80032c4:	f000 fea0 	bl	8004008 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 80032c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ca:	3301      	adds	r3, #1
 80032cc:	677b      	str	r3, [r7, #116]	; 0x74
 80032ce:	8abb      	ldrh	r3, [r7, #20]
 80032d0:	461a      	mov	r2, r3
 80032d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d4:	4293      	cmp	r3, r2
 80032d6:	dbea      	blt.n	80032ae <CLI_FDCANTest+0x186>
            DebugMsg(DEBUGMSG_CLI,"\n");
 80032d8:	4b37      	ldr	r3, [pc, #220]	; (80033b8 <CLI_FDCANTest+0x290>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <CLI_FDCANTest+0x1be>
 80032e0:	4842      	ldr	r0, [pc, #264]	; (80033ec <CLI_FDCANTest+0x2c4>)
 80032e2:	f000 fe91 	bl	8004008 <svDebugMessage>
        while(svCLI_KeepLoop())
 80032e6:	f00d f88d 	bl	8010404 <svCLI_KeepLoop>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d19c      	bne.n	800322a <CLI_FDCANTest+0x102>
        uint32_t num = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	66fb      	str	r3, [r7, #108]	; 0x6c
        err_code = can_tbl[_DEF_CAN1].err_code;
 80032f4:	4b31      	ldr	r3, [pc, #196]	; (80033bc <CLI_FDCANTest+0x294>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	66bb      	str	r3, [r7, #104]	; 0x68
        while(svCLI_KeepLoop())
 80032fa:	e145      	b.n	8003588 <CLI_FDCANTest+0x460>
          if (HAL_GetTick()-pre_time >= 1000)
 80032fc:	f000 fef4 	bl	80040e8 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800330a:	f0c0 80be 	bcc.w	800348a <CLI_FDCANTest+0x362>
            pre_time = HAL_GetTick();
 800330e:	f000 feeb 	bl	80040e8 <HAL_GetTick>
 8003312:	6738      	str	r0, [r7, #112]	; 0x70
            msg.frame   = CAN_CLASSIC;
 8003314:	2300      	movs	r3, #0
 8003316:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
            msg.id_type = CAN_EXT;
 800331a:	2301      	movs	r3, #1
 800331c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            msg.dlc     = CAN_DLC_2;
 8003320:	2302      	movs	r3, #2
 8003322:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            msg.id      = nAddress;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	613b      	str	r3, [r7, #16]
            msg.length  = 2;
 800332a:	2302      	movs	r3, #2
 800332c:	82bb      	strh	r3, [r7, #20]
            msg.data[0] = 1;
 800332e:	2301      	movs	r3, #1
 8003330:	75bb      	strb	r3, [r7, #22]
            msg.data[1] = 2;
 8003332:	2302      	movs	r3, #2
 8003334:	75fb      	strb	r3, [r7, #23]
            if (CAN_MsgWrite(_DEF_CAN1, &msg, 10) > 0)
 8003336:	f107 0310 	add.w	r3, r7, #16
 800333a:	220a      	movs	r2, #10
 800333c:	4619      	mov	r1, r3
 800333e:	2000      	movs	r0, #0
 8003340:	f7ff fae8 	bl	8002914 <CAN_MsgWrite>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d070      	beq.n	800342c <CLI_FDCANTest+0x304>
              index %= 1000;
 800334a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800334c:	4a21      	ldr	r2, [pc, #132]	; (80033d4 <CLI_FDCANTest+0x2ac>)
 800334e:	fba2 1203 	umull	r1, r2, r2, r3
 8003352:	0992      	lsrs	r2, r2, #6
 8003354:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003358:	fb01 f202 	mul.w	r2, r1, r2
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	67bb      	str	r3, [r7, #120]	; 0x78
              DebugMsg(DEBUGMSG_CLI,"%03d(T) -> id ", num++);
 8003360:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <CLI_FDCANTest+0x290>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d006      	beq.n	8003376 <CLI_FDCANTest+0x24e>
 8003368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800336e:	4619      	mov	r1, r3
 8003370:	481f      	ldr	r0, [pc, #124]	; (80033f0 <CLI_FDCANTest+0x2c8>)
 8003372:	f000 fe49 	bl	8004008 <svDebugMessage>
              if (msg.id_type == CAN_STD)
 8003376:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800337a:	2b00      	cmp	r3, #0
 800337c:	d107      	bne.n	800338e <CLI_FDCANTest+0x266>
                DebugMsg(DEBUGMSG_CLI,"std ");
 800337e:	4b0e      	ldr	r3, [pc, #56]	; (80033b8 <CLI_FDCANTest+0x290>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <CLI_FDCANTest+0x274>
 8003386:	4815      	ldr	r0, [pc, #84]	; (80033dc <CLI_FDCANTest+0x2b4>)
 8003388:	f000 fe3e 	bl	8004008 <svDebugMessage>
 800338c:	e006      	b.n	800339c <CLI_FDCANTest+0x274>
                DebugMsg(DEBUGMSG_CLI,"ext ");
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <CLI_FDCANTest+0x290>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <CLI_FDCANTest+0x274>
 8003396:	4812      	ldr	r0, [pc, #72]	; (80033e0 <CLI_FDCANTest+0x2b8>)
 8003398:	f000 fe36 	bl	8004008 <svDebugMessage>
              DebugMsg(DEBUGMSG_CLI, ": 0x%08X, L:%02d, ", msg.id, msg.length);
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <CLI_FDCANTest+0x290>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <CLI_FDCANTest+0x288>
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	8aba      	ldrh	r2, [r7, #20]
 80033a8:	4619      	mov	r1, r3
 80033aa:	480e      	ldr	r0, [pc, #56]	; (80033e4 <CLI_FDCANTest+0x2bc>)
 80033ac:	f000 fe2c 	bl	8004008 <svDebugMessage>
              for (int i=0; i<msg.length; i++)
 80033b0:	2300      	movs	r3, #0
 80033b2:	667b      	str	r3, [r7, #100]	; 0x64
 80033b4:	e02e      	b.n	8003414 <CLI_FDCANTest+0x2ec>
 80033b6:	bf00      	nop
 80033b8:	2005003c 	.word	0x2005003c
 80033bc:	20054dfc 	.word	0x20054dfc
 80033c0:	080253f0 	.word	0x080253f0
 80033c4:	08025404 	.word	0x08025404
 80033c8:	08025418 	.word	0x08025418
 80033cc:	0802542c 	.word	0x0802542c
 80033d0:	08025440 	.word	0x08025440
 80033d4:	10624dd3 	.word	0x10624dd3
 80033d8:	08025454 	.word	0x08025454
 80033dc:	08025464 	.word	0x08025464
 80033e0:	0802546c 	.word	0x0802546c
 80033e4:	08025474 	.word	0x08025474
 80033e8:	08025488 	.word	0x08025488
 80033ec:	08025490 	.word	0x08025490
 80033f0:	08025494 	.word	0x08025494
                DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 80033f4:	4b6a      	ldr	r3, [pc, #424]	; (80035a0 <CLI_FDCANTest+0x478>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <CLI_FDCANTest+0x2e6>
 80033fc:	f107 0216 	add.w	r2, r7, #22
 8003400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003402:	4413      	add	r3, r2
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	4619      	mov	r1, r3
 8003408:	4866      	ldr	r0, [pc, #408]	; (80035a4 <CLI_FDCANTest+0x47c>)
 800340a:	f000 fdfd 	bl	8004008 <svDebugMessage>
              for (int i=0; i<msg.length; i++)
 800340e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003410:	3301      	adds	r3, #1
 8003412:	667b      	str	r3, [r7, #100]	; 0x64
 8003414:	8abb      	ldrh	r3, [r7, #20]
 8003416:	461a      	mov	r2, r3
 8003418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800341a:	4293      	cmp	r3, r2
 800341c:	dbea      	blt.n	80033f4 <CLI_FDCANTest+0x2cc>
              DebugMsg(DEBUGMSG_CLI,"\n");
 800341e:	4b60      	ldr	r3, [pc, #384]	; (80035a0 <CLI_FDCANTest+0x478>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <CLI_FDCANTest+0x304>
 8003426:	4860      	ldr	r0, [pc, #384]	; (80035a8 <CLI_FDCANTest+0x480>)
 8003428:	f000 fdee 	bl	8004008 <svDebugMessage>
            if (CAN_GetRxErrCount(_DEF_CAN1) > 0 || CAN_GetTxErrCount(_DEF_CAN1) > 0)
 800342c:	2000      	movs	r0, #0
 800342e:	f7ff fb2d 	bl	8002a8c <CAN_GetRxErrCount>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <CLI_FDCANTest+0x31c>
 8003438:	2000      	movs	r0, #0
 800343a:	f7ff fb4f 	bl	8002adc <CAN_GetTxErrCount>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d011      	beq.n	8003468 <CLI_FDCANTest+0x340>
              DebugMsg(DEBUGMSG_CLI,"ErrCnt : %d, %d\n", CAN_GetRxErrCount(_DEF_CAN1), CAN_GetTxErrCount(_DEF_CAN1));
 8003444:	4b56      	ldr	r3, [pc, #344]	; (80035a0 <CLI_FDCANTest+0x478>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00d      	beq.n	8003468 <CLI_FDCANTest+0x340>
 800344c:	2000      	movs	r0, #0
 800344e:	f7ff fb1d 	bl	8002a8c <CAN_GetRxErrCount>
 8003452:	4603      	mov	r3, r0
 8003454:	461c      	mov	r4, r3
 8003456:	2000      	movs	r0, #0
 8003458:	f7ff fb40 	bl	8002adc <CAN_GetTxErrCount>
 800345c:	4603      	mov	r3, r0
 800345e:	461a      	mov	r2, r3
 8003460:	4621      	mov	r1, r4
 8003462:	4852      	ldr	r0, [pc, #328]	; (80035ac <CLI_FDCANTest+0x484>)
 8003464:	f000 fdd0 	bl	8004008 <svDebugMessage>
            if (err_int_cnt > 0)
 8003468:	4b51      	ldr	r3, [pc, #324]	; (80035b0 <CLI_FDCANTest+0x488>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00c      	beq.n	800348a <CLI_FDCANTest+0x362>
              DebugMsg(DEBUGMSG_CLI,"Cnt : %d\n",err_int_cnt);
 8003470:	4b4b      	ldr	r3, [pc, #300]	; (80035a0 <CLI_FDCANTest+0x478>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <CLI_FDCANTest+0x35c>
 8003478:	4b4d      	ldr	r3, [pc, #308]	; (80035b0 <CLI_FDCANTest+0x488>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4619      	mov	r1, r3
 800347e:	484d      	ldr	r0, [pc, #308]	; (80035b4 <CLI_FDCANTest+0x48c>)
 8003480:	f000 fdc2 	bl	8004008 <svDebugMessage>
              err_int_cnt = 0;
 8003484:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <CLI_FDCANTest+0x488>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
          if (can_tbl[_DEF_CAN1].err_code != err_code)
 800348a:	4b4b      	ldr	r3, [pc, #300]	; (80035b8 <CLI_FDCANTest+0x490>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003490:	429a      	cmp	r2, r3
 8003492:	d00f      	beq.n	80034b4 <CLI_FDCANTest+0x38c>
            DebugMsg(DEBUGMSG_CLI, "ErrCode : 0x%X\n", can_tbl[_DEF_CAN1].err_code);
 8003494:	4b42      	ldr	r3, [pc, #264]	; (80035a0 <CLI_FDCANTest+0x478>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <CLI_FDCANTest+0x380>
 800349c:	4b46      	ldr	r3, [pc, #280]	; (80035b8 <CLI_FDCANTest+0x490>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4619      	mov	r1, r3
 80034a2:	4846      	ldr	r0, [pc, #280]	; (80035bc <CLI_FDCANTest+0x494>)
 80034a4:	f000 fdb0 	bl	8004008 <svDebugMessage>
            CAN_ErrPrint(_DEF_CAN1);
 80034a8:	2000      	movs	r0, #0
 80034aa:	f7ff fc61 	bl	8002d70 <CAN_ErrPrint>
            err_code = can_tbl[_DEF_CAN1].err_code;
 80034ae:	4b42      	ldr	r3, [pc, #264]	; (80035b8 <CLI_FDCANTest+0x490>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	66bb      	str	r3, [r7, #104]	; 0x68
          if (CAN_Update())
 80034b4:	f7ff fc1a 	bl	8002cec <CAN_Update>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d006      	beq.n	80034cc <CLI_FDCANTest+0x3a4>
            DebugMsg(DEBUGMSG_CLI,"BusOff Recovery\n");
 80034be:	4b38      	ldr	r3, [pc, #224]	; (80035a0 <CLI_FDCANTest+0x478>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <CLI_FDCANTest+0x3a4>
 80034c6:	483e      	ldr	r0, [pc, #248]	; (80035c0 <CLI_FDCANTest+0x498>)
 80034c8:	f000 fd9e 	bl	8004008 <svDebugMessage>
          if (CAN_MsgAvailable(_DEF_CAN1))
 80034cc:	2000      	movs	r0, #0
 80034ce:	f7ff fa05 	bl	80028dc <CAN_MsgAvailable>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d057      	beq.n	8003588 <CLI_FDCANTest+0x460>
            CAN_MsgRead(_DEF_CAN1, &msg);
 80034d8:	f107 0310 	add.w	r3, r7, #16
 80034dc:	4619      	mov	r1, r3
 80034de:	2000      	movs	r0, #0
 80034e0:	f7ff fab2 	bl	8002a48 <CAN_MsgRead>
            index %= 1000;
 80034e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034e6:	4a37      	ldr	r2, [pc, #220]	; (80035c4 <CLI_FDCANTest+0x49c>)
 80034e8:	fba2 1203 	umull	r1, r2, r2, r3
 80034ec:	0992      	lsrs	r2, r2, #6
 80034ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80034f2:	fb01 f202 	mul.w	r2, r1, r2
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	67bb      	str	r3, [r7, #120]	; 0x78
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", num++);
 80034fa:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <CLI_FDCANTest+0x478>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d006      	beq.n	8003510 <CLI_FDCANTest+0x3e8>
 8003502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003508:	4619      	mov	r1, r3
 800350a:	482f      	ldr	r0, [pc, #188]	; (80035c8 <CLI_FDCANTest+0x4a0>)
 800350c:	f000 fd7c 	bl	8004008 <svDebugMessage>
            if (msg.id_type == CAN_STD)
 8003510:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003514:	2b00      	cmp	r3, #0
 8003516:	d107      	bne.n	8003528 <CLI_FDCANTest+0x400>
              DebugMsg(DEBUGMSG_CLI, "std ");
 8003518:	4b21      	ldr	r3, [pc, #132]	; (80035a0 <CLI_FDCANTest+0x478>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <CLI_FDCANTest+0x40e>
 8003520:	482a      	ldr	r0, [pc, #168]	; (80035cc <CLI_FDCANTest+0x4a4>)
 8003522:	f000 fd71 	bl	8004008 <svDebugMessage>
 8003526:	e006      	b.n	8003536 <CLI_FDCANTest+0x40e>
              DebugMsg(DEBUGMSG_CLI, "ext ");
 8003528:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <CLI_FDCANTest+0x478>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <CLI_FDCANTest+0x40e>
 8003530:	4827      	ldr	r0, [pc, #156]	; (80035d0 <CLI_FDCANTest+0x4a8>)
 8003532:	f000 fd69 	bl	8004008 <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 8003536:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <CLI_FDCANTest+0x478>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <CLI_FDCANTest+0x422>
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	8aba      	ldrh	r2, [r7, #20]
 8003542:	4619      	mov	r1, r3
 8003544:	4823      	ldr	r0, [pc, #140]	; (80035d4 <CLI_FDCANTest+0x4ac>)
 8003546:	f000 fd5f 	bl	8004008 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 800354a:	2300      	movs	r3, #0
 800354c:	663b      	str	r3, [r7, #96]	; 0x60
 800354e:	e00f      	b.n	8003570 <CLI_FDCANTest+0x448>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 8003550:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <CLI_FDCANTest+0x478>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <CLI_FDCANTest+0x442>
 8003558:	f107 0216 	add.w	r2, r7, #22
 800355c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800355e:	4413      	add	r3, r2
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	4619      	mov	r1, r3
 8003564:	480f      	ldr	r0, [pc, #60]	; (80035a4 <CLI_FDCANTest+0x47c>)
 8003566:	f000 fd4f 	bl	8004008 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 800356a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800356c:	3301      	adds	r3, #1
 800356e:	663b      	str	r3, [r7, #96]	; 0x60
 8003570:	8abb      	ldrh	r3, [r7, #20]
 8003572:	461a      	mov	r2, r3
 8003574:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003576:	4293      	cmp	r3, r2
 8003578:	dbea      	blt.n	8003550 <CLI_FDCANTest+0x428>
            DebugMsg(DEBUGMSG_CLI,"\n");
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <CLI_FDCANTest+0x478>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <CLI_FDCANTest+0x460>
 8003582:	4809      	ldr	r0, [pc, #36]	; (80035a8 <CLI_FDCANTest+0x480>)
 8003584:	f000 fd40 	bl	8004008 <svDebugMessage>
        while(svCLI_KeepLoop())
 8003588:	f00c ff3c 	bl	8010404 <svCLI_KeepLoop>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	f47f aeb4 	bne.w	80032fc <CLI_FDCANTest+0x1d4>
        ret = TRUE;
 8003594:	2301      	movs	r3, #1
 8003596:	65fb      	str	r3, [r7, #92]	; 0x5c
}
 8003598:	bf00      	nop
 800359a:	3784      	adds	r7, #132	; 0x84
 800359c:	46bd      	mov	sp, r7
 800359e:	bd90      	pop	{r4, r7, pc}
 80035a0:	2005003c 	.word	0x2005003c
 80035a4:	08025488 	.word	0x08025488
 80035a8:	08025490 	.word	0x08025490
 80035ac:	080254a4 	.word	0x080254a4
 80035b0:	20055368 	.word	0x20055368
 80035b4:	080254b8 	.word	0x080254b8
 80035b8:	20054dfc 	.word	0x20054dfc
 80035bc:	080254c4 	.word	0x080254c4
 80035c0:	080254d4 	.word	0x080254d4
 80035c4:	10624dd3 	.word	0x10624dd3
 80035c8:	08025454 	.word	0x08025454
 80035cc:	08025464 	.word	0x08025464
 80035d0:	0802546c 	.word	0x0802546c
 80035d4:	08025474 	.word	0x08025474

080035d8 <Flash_Erase>:


  return ret;
}
BOOL Flash_Erase(uint32_t addr, uint32_t length)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08c      	sub	sp, #48	; 0x30
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  BOOL ret = FALSE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24

  int32_t start_sector = -1;
 80035e6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t end_sector = -1;
 80035ec:	f04f 33ff 	mov.w	r3, #4294967295
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_FLASH_Unlock();
 80035f2:	f003 fcff 	bl	8006ff4 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTCHANGEERR);
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <Flash_Erase+0xb0>)
 80035f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80035fc:	631a      	str	r2, [r3, #48]	; 0x30

  start_sector = -1;
 80035fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
  end_sector = -1;
 8003604:	f04f 33ff 	mov.w	r3, #4294967295
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 800360a:	2300      	movs	r3, #0
 800360c:	623b      	str	r3, [r7, #32]
 800360e:	e013      	b.n	8003638 <Flash_Erase+0x60>
  {
    if(Flash_InSector(i, addr, length) == TRUE)
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	b29b      	uxth	r3, r3
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4618      	mov	r0, r3
 800361a:	f000 f837 	bl	800368c <Flash_InSector>
 800361e:	4603      	mov	r3, r0
 8003620:	2b01      	cmp	r3, #1
 8003622:	d106      	bne.n	8003632 <Flash_Erase+0x5a>
    {
      if(start_sector < 0)
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003626:	2b00      	cmp	r3, #0
 8003628:	da01      	bge.n	800362e <Flash_Erase+0x56>
      {
        start_sector = i;
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      end_sector = i;
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	3301      	adds	r3, #1
 8003636:	623b      	str	r3, [r7, #32]
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	2b7f      	cmp	r3, #127	; 0x7f
 800363c:	dde8      	ble.n	8003610 <Flash_Erase+0x38>
    }
  }

  if(start_sector >= 0)
 800363e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003640:	2b00      	cmp	r3, #0
 8003642:	db19      	blt.n	8003678 <Flash_Erase+0xa0>
    HAL_StatusTypeDef status;
    // TypeErase : Mass or Page Erase ,Banks :   Page/PageAddress:  Nbpages:
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t SectorError;
    //@ref FLASH_Type_Erase
    EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8003644:	2304      	movs	r3, #4
 8003646:	60fb      	str	r3, [r7, #12]
    //@ref FLASH_Banks  - FLASH_BANK_BOTH  , 1
    EraseInit.Banks = FLASH_BANK_BOTH;
 8003648:	2303      	movs	r3, #3
 800364a:	613b      	str	r3, [r7, #16]
    EraseInit.Sector = start_sector;    // sector 번호 OR sector address , 확인해야댐 (페이지 번호를 주거나, 지우는 주소를 주거나)
 800364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364e:	617b      	str	r3, [r7, #20]
    EraseInit.NbSectors = (end_sector - start_sector) + 1;     // 페이지 개수 (시작 페이지 부터 몇개의 페이지를 지울 것인가)
 8003650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	3301      	adds	r3, #1
 8003658:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 800365a:	f107 0208 	add.w	r2, r7, #8
 800365e:	f107 030c 	add.w	r3, r7, #12
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f003 fdf7 	bl	8007258 <HAL_FLASHEx_Erase>
 800366a:	4603      	mov	r3, r0
 800366c:	77fb      	strb	r3, [r7, #31]

    if(status == HAL_OK)
 800366e:	7ffb      	ldrb	r3, [r7, #31]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <Flash_Erase+0xa0>
    {
      ret = TRUE;
 8003674:	2301      	movs	r3, #1
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  HAL_FLASH_Lock();
 8003678:	f003 fce2 	bl	8007040 <HAL_FLASH_Lock>
  return ret;
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800367e:	4618      	mov	r0, r3
 8003680:	3730      	adds	r7, #48	; 0x30
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40022000 	.word	0x40022000

0800368c <Flash_InSector>:
BOOL Flash_InSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 800368c:	b480      	push	{r7}
 800368e:	b08b      	sub	sp, #44	; 0x2c
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	81fb      	strh	r3, [r7, #14]
  BOOL ret = FALSE;
 800369a:	2300      	movs	r3, #0
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = FLASH_BASE + (sector_num * FLASH_SECTOR_SIZE);
 800369e:	89fb      	ldrh	r3, [r7, #14]
 80036a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80036a4:	035b      	lsls	r3, r3, #13
 80036a6:	623b      	str	r3, [r7, #32]
  sector_end   = sector_start + FLASH_SECTOR_SIZE - 1;
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80036ae:	331f      	adds	r3, #31
 80036b0:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4413      	add	r3, r2
 80036bc:	3b01      	subs	r3, #1
 80036be:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 80036c0:	6a3a      	ldr	r2, [r7, #32]
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d305      	bcc.n	80036d4 <Flash_InSector+0x48>
 80036c8:	6a3a      	ldr	r2, [r7, #32]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d801      	bhi.n	80036d4 <Flash_InSector+0x48>
  {
    ret = TRUE;
 80036d0:	2301      	movs	r3, #1
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d305      	bcc.n	80036e8 <Flash_InSector+0x5c>
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d801      	bhi.n	80036e8 <Flash_InSector+0x5c>
  {
    ret = TRUE;
 80036e4:	2301      	movs	r3, #1
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d305      	bcc.n	80036fc <Flash_InSector+0x70>
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d801      	bhi.n	80036fc <Flash_InSector+0x70>
  {
    ret = TRUE;
 80036f8:	2301      	movs	r3, #1
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	429a      	cmp	r2, r3
 8003702:	d305      	bcc.n	8003710 <Flash_InSector+0x84>
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	429a      	cmp	r2, r3
 800370a:	d801      	bhi.n	8003710 <Flash_InSector+0x84>
  {
    ret = TRUE;
 800370c:	2301      	movs	r3, #1
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003712:	4618      	mov	r0, r3
 8003714:	372c      	adds	r7, #44	; 0x2c
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <Flash_Write>:

BOOL Flash_Write(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b092      	sub	sp, #72	; 0x48
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800372a:	2301      	movs	r3, #1
 800372c:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t buf[32];
  uint32_t offset;
  HAL_StatusTypeDef status;

  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Unlock();
 800372e:	f003 fc61 	bl	8006ff4 <HAL_FLASH_Unlock>

  index = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	643b      	str	r3, [r7, #64]	; 0x40
  offset = addr % FLASH_WRITE_SIZE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	63fb      	str	r3, [r7, #60]	; 0x3c


  if(offset != 0 || length < FLASH_WRITE_SIZE)
 800373e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d103      	bne.n	800374c <Flash_Write+0x2e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b0f      	cmp	r3, #15
 8003748:	f200 808e 	bhi.w	8003868 <Flash_Write+0x14a>
  {
    write_addr = addr - offset;
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 8003754:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003756:	f107 0310 	add.w	r3, r7, #16
 800375a:	2210      	movs	r2, #16
 800375c:	4618      	mov	r0, r3
 800375e:	f020 fe9e 	bl	802449e <memcpy>
    memcpy(&buf[offset], &p_data[0], constrain(FLASH_WRITE_SIZE-offset, 0, length));
 8003762:	f107 0210 	add.w	r2, r7, #16
 8003766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003768:	18d0      	adds	r0, r2, r3
 800376a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376c:	f1c3 0210 	rsb	r2, r3, #16
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4293      	cmp	r3, r2
 8003774:	bf28      	it	cs
 8003776:	4613      	movcs	r3, r2
 8003778:	461a      	mov	r2, r3
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	f020 fe8f 	bl	802449e <memcpy>

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 8003780:	f107 0310 	add.w	r3, r7, #16
 8003784:	461a      	mov	r2, r3
 8003786:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003788:	2002      	movs	r0, #2
 800378a:	f003 fbbb 	bl	8006f04 <HAL_FLASH_Program>
 800378e:	4603      	mov	r3, r0
 8003790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status != HAL_OK)
 8003794:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <Flash_Write+0x82>
    {
      return FALSE;
 800379c:	2300      	movs	r3, #0
 800379e:	e06c      	b.n	800387a <Flash_Write+0x15c>
    }

    if (offset == 0 && length < FLASH_WRITE_SIZE)
 80037a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d107      	bne.n	80037b6 <Flash_Write+0x98>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b0f      	cmp	r3, #15
 80037aa:	d804      	bhi.n	80037b6 <Flash_Write+0x98>
    {
      index += length;
 80037ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4413      	add	r3, r2
 80037b2:	643b      	str	r3, [r7, #64]	; 0x40
 80037b4:	e004      	b.n	80037c0 <Flash_Write+0xa2>
    }
    else
    {
      index += (FLASH_WRITE_SIZE - offset);
 80037b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	3310      	adds	r3, #16
 80037be:	643b      	str	r3, [r7, #64]	; 0x40
    }
  }
  while(index < length)
 80037c0:	e052      	b.n	8003868 <Flash_Write+0x14a>
  {
    write_length = constrain(length - index, 0, FLASH_WRITE_SIZE);
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b10      	cmp	r3, #16
 80037ca:	bf28      	it	cs
 80037cc:	2310      	movcs	r3, #16
 80037ce:	633b      	str	r3, [r7, #48]	; 0x30

    if (write_length == FLASH_WRITE_SIZE)
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d117      	bne.n	8003806 <Flash_Write+0xe8>
    {
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, addr + index, (uint32_t)&p_data[index]);
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037da:	18d1      	adds	r1, r2, r3
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e0:	4413      	add	r3, r2
 80037e2:	461a      	mov	r2, r3
 80037e4:	2002      	movs	r0, #2
 80037e6:	f003 fb8d 	bl	8006f04 <HAL_FLASH_Program>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 80037f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <Flash_Write+0xe0>
      {
        ret = FALSE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80037fc:	e03a      	b.n	8003874 <Flash_Write+0x156>
      }
      index += write_length;
 80037fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	4413      	add	r3, r2
 8003804:	643b      	str	r3, [r7, #64]	; 0x40
    }

    if ((length - index) > 0 && (length - index) < FLASH_WRITE_SIZE)
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380a:	429a      	cmp	r2, r3
 800380c:	d02c      	beq.n	8003868 <Flash_Write+0x14a>
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b0f      	cmp	r3, #15
 8003816:	d827      	bhi.n	8003868 <Flash_Write+0x14a>
    {
      offset = length - index;
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	63fb      	str	r3, [r7, #60]	; 0x3c
      write_addr = addr + index;
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003824:	4413      	add	r3, r2
 8003826:	63bb      	str	r3, [r7, #56]	; 0x38
      memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 8003828:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800382a:	f107 0310 	add.w	r3, r7, #16
 800382e:	2210      	movs	r2, #16
 8003830:	4618      	mov	r0, r3
 8003832:	f020 fe34 	bl	802449e <memcpy>
      memcpy(&buf[0], &p_data[index], offset);
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800383a:	18d1      	adds	r1, r2, r3
 800383c:	f107 0310 	add.w	r3, r7, #16
 8003840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003842:	4618      	mov	r0, r3
 8003844:	f020 fe2b 	bl	802449e <memcpy>

      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 8003848:	f107 0310 	add.w	r3, r7, #16
 800384c:	461a      	mov	r2, r3
 800384e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003850:	2002      	movs	r0, #2
 8003852:	f003 fb57 	bl	8006f04 <HAL_FLASH_Program>
 8003856:	4603      	mov	r3, r0
 8003858:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 800385c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003860:	2b00      	cmp	r3, #0
 8003862:	d006      	beq.n	8003872 <Flash_Write+0x154>
      {
        return FALSE;
 8003864:	2300      	movs	r3, #0
 8003866:	e008      	b.n	800387a <Flash_Write+0x15c>
  while(index < length)
 8003868:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	429a      	cmp	r2, r3
 800386e:	d3a8      	bcc.n	80037c2 <Flash_Write+0xa4>
 8003870:	e000      	b.n	8003874 <Flash_Write+0x156>
      }
      break;
 8003872:	bf00      	nop
    }
  }
  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Lock();
 8003874:	f003 fbe4 	bl	8007040 <HAL_FLASH_Lock>
  return ret;
 8003878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800387a:	4618      	mov	r0, r3
 800387c:	3748      	adds	r7, #72	; 0x48
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <Flash_Read>:
BOOL Flash_Read(uint32_t addr, uint32_t *p_data, uint32_t length)
{
 8003882:	b480      	push	{r7}
 8003884:	b089      	sub	sp, #36	; 0x24
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800388e:	2301      	movs	r3, #1
 8003890:	61bb      	str	r3, [r7, #24]

  // 1byte 데이터 포인터
  uint8_t *p_byte = (uint8_t *)addr;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	617b      	str	r3, [r7, #20]

  for(int i=0; i < length; i++)
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
 800389a:	e00c      	b.n	80038b6 <Flash_Read+0x34>
  {
    p_data[i] = p_byte[i];
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4413      	add	r3, r2
 80038a2:	7819      	ldrb	r1, [r3, #0]
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	4413      	add	r3, r2
 80038ac:	460a      	mov	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]
  for(int i=0; i < length; i++)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	3301      	adds	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d8ee      	bhi.n	800389c <Flash_Read+0x1a>
  }



  return ret;
 80038be:	69bb      	ldr	r3, [r7, #24]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3724      	adds	r7, #36	; 0x24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <CLI_FlashTest>:

// Read, Erase, Write
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (FLASH_TEST, "Flash", "Flash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]", CLI_FlashTest)
static void CLI_FlashTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b09a      	sub	sp, #104	; 0x68
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
  if(nCount == 2)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	f040 8085 	bne.w	80039ec <CLI_FlashTest+0x120>
  {
    switch(nFirst)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d049      	beq.n	800397c <CLI_FlashTest+0xb0>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d871      	bhi.n	80039d2 <CLI_FlashTest+0x106>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d003      	beq.n	80038fc <CLI_FlashTest+0x30>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d029      	beq.n	800394e <CLI_FlashTest+0x82>
 80038fa:	e06a      	b.n	80039d2 <CLI_FlashTest+0x106>
    {
      case 1:
        uint32_t rbuf[16];
        DebugMsg(DEBUGMSG_CLI,"=============================================\r\n");
 80038fc:	4b3d      	ldr	r3, [pc, #244]	; (80039f4 <CLI_FlashTest+0x128>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <CLI_FlashTest+0x3e>
 8003904:	483c      	ldr	r0, [pc, #240]	; (80039f8 <CLI_FlashTest+0x12c>)
 8003906:	f000 fb7f 	bl	8004008 <svDebugMessage>
        Flash_Read(nAddress, &rbuf[0],16);
 800390a:	f107 0310 	add.w	r3, r7, #16
 800390e:	2210      	movs	r2, #16
 8003910:	4619      	mov	r1, r3
 8003912:	6838      	ldr	r0, [r7, #0]
 8003914:	f7ff ffb5 	bl	8003882 <Flash_Read>
        for(int i=0; i<16; i++)
 8003918:	2300      	movs	r3, #0
 800391a:	667b      	str	r3, [r7, #100]	; 0x64
 800391c:	e013      	b.n	8003946 <CLI_FlashTest+0x7a>
        {
          DebugMsg(DEBUGMSG_CLI, "0x%X : 0x%X\n", nAddress + i, rbuf[i]);
 800391e:	4b35      	ldr	r3, [pc, #212]	; (80039f4 <CLI_FlashTest+0x128>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00c      	beq.n	8003940 <CLI_FlashTest+0x74>
 8003926:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	18d1      	adds	r1, r2, r3
 800392c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	3368      	adds	r3, #104	; 0x68
 8003932:	443b      	add	r3, r7
 8003934:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8003938:	461a      	mov	r2, r3
 800393a:	4830      	ldr	r0, [pc, #192]	; (80039fc <CLI_FlashTest+0x130>)
 800393c:	f000 fb64 	bl	8004008 <svDebugMessage>
        for(int i=0; i<16; i++)
 8003940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003942:	3301      	adds	r3, #1
 8003944:	667b      	str	r3, [r7, #100]	; 0x64
 8003946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003948:	2b0f      	cmp	r3, #15
 800394a:	dde8      	ble.n	800391e <CLI_FlashTest+0x52>
        }
        break;
 800394c:	e04e      	b.n	80039ec <CLI_FlashTest+0x120>
      case 2:
        if(Flash_Erase(nAddress, 16) == TRUE)
 800394e:	2110      	movs	r1, #16
 8003950:	6838      	ldr	r0, [r7, #0]
 8003952:	f7ff fe41 	bl	80035d8 <Flash_Erase>
 8003956:	4603      	mov	r3, r0
 8003958:	2b01      	cmp	r3, #1
 800395a:	d107      	bne.n	800396c <CLI_FlashTest+0xa0>
        {
          DebugMsg(DEBUGMSG_CLI, "Erase OK\n");
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <CLI_FlashTest+0x128>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d03e      	beq.n	80039e2 <CLI_FlashTest+0x116>
 8003964:	4826      	ldr	r0, [pc, #152]	; (8003a00 <CLI_FlashTest+0x134>)
 8003966:	f000 fb4f 	bl	8004008 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
        }
        break;
 800396a:	e03a      	b.n	80039e2 <CLI_FlashTest+0x116>
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
 800396c:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <CLI_FlashTest+0x128>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d036      	beq.n	80039e2 <CLI_FlashTest+0x116>
 8003974:	4823      	ldr	r0, [pc, #140]	; (8003a04 <CLI_FlashTest+0x138>)
 8003976:	f000 fb47 	bl	8004008 <svDebugMessage>
        break;
 800397a:	e032      	b.n	80039e2 <CLI_FlashTest+0x116>
      case 3:
        uint8_t wbuf[16];
        for(int i=0; i<16; i++)
 800397c:	2300      	movs	r3, #0
 800397e:	663b      	str	r3, [r7, #96]	; 0x60
 8003980:	e00a      	b.n	8003998 <CLI_FlashTest+0xcc>
        {
          wbuf[i] = i;
 8003982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003984:	b2d9      	uxtb	r1, r3
 8003986:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800398a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800398c:	4413      	add	r3, r2
 800398e:	460a      	mov	r2, r1
 8003990:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<16; i++)
 8003992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003994:	3301      	adds	r3, #1
 8003996:	663b      	str	r3, [r7, #96]	; 0x60
 8003998:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800399a:	2b0f      	cmp	r3, #15
 800399c:	ddf1      	ble.n	8003982 <CLI_FlashTest+0xb6>
        }
        if(Flash_Write(nAddress, wbuf, 16) == TRUE)
 800399e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039a2:	2210      	movs	r2, #16
 80039a4:	4619      	mov	r1, r3
 80039a6:	6838      	ldr	r0, [r7, #0]
 80039a8:	f7ff feb9 	bl	800371e <Flash_Write>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d107      	bne.n	80039c2 <CLI_FlashTest+0xf6>
        {
          DebugMsg(DEBUGMSG_CLI, "Write OK\n");
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <CLI_FlashTest+0x128>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d015      	beq.n	80039e6 <CLI_FlashTest+0x11a>
 80039ba:	4813      	ldr	r0, [pc, #76]	; (8003a08 <CLI_FlashTest+0x13c>)
 80039bc:	f000 fb24 	bl	8004008 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
        }
        break;
 80039c0:	e011      	b.n	80039e6 <CLI_FlashTest+0x11a>
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
 80039c2:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <CLI_FlashTest+0x128>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00d      	beq.n	80039e6 <CLI_FlashTest+0x11a>
 80039ca:	4810      	ldr	r0, [pc, #64]	; (8003a0c <CLI_FlashTest+0x140>)
 80039cc:	f000 fb1c 	bl	8004008 <svDebugMessage>
        break;
 80039d0:	e009      	b.n	80039e6 <CLI_FlashTest+0x11a>
      default:
        DebugMsg(DEBUGMSG_CLI,"\r\nFlash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]\r\n");
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <CLI_FlashTest+0x128>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d007      	beq.n	80039ea <CLI_FlashTest+0x11e>
 80039da:	480d      	ldr	r0, [pc, #52]	; (8003a10 <CLI_FlashTest+0x144>)
 80039dc:	f000 fb14 	bl	8004008 <svDebugMessage>
        break;
 80039e0:	e003      	b.n	80039ea <CLI_FlashTest+0x11e>
        break;
 80039e2:	bf00      	nop
 80039e4:	e002      	b.n	80039ec <CLI_FlashTest+0x120>
        break;
 80039e6:	bf00      	nop
 80039e8:	e000      	b.n	80039ec <CLI_FlashTest+0x120>
        break;
 80039ea:	bf00      	nop
    }
  }
}
 80039ec:	bf00      	nop
 80039ee:	3768      	adds	r7, #104	; 0x68
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	2005003c 	.word	0x2005003c
 80039f8:	0802552c 	.word	0x0802552c
 80039fc:	0802555c 	.word	0x0802555c
 8003a00:	0802556c 	.word	0x0802556c
 8003a04:	08025578 	.word	0x08025578
 8003a08:	08025584 	.word	0x08025584
 8003a0c:	08025590 	.word	0x08025590
 8003a10:	0802559c 	.word	0x0802559c

08003a14 <LED_Init>:
static BOOL s_bLEDInit = FALSE;
static BOOL s_bLEDEnable = FALSE;

// Function Declarations
void LED_Init(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  s_bLEDInit = TRUE;
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <LED_Init+0x1c>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
  s_bLEDEnable = TRUE;
 8003a1e:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <LED_Init+0x20>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	2005536c 	.word	0x2005536c
 8003a34:	20055370 	.word	0x20055370

08003a38 <LED_OnOff>:
{
  s_bLEDEnable = bEnable;
}

void LED_OnOff(LED_e eLED, BOOL bOn)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	6039      	str	r1, [r7, #0]
 8003a42:	71fb      	strb	r3, [r7, #7]
  if(FALSE == s_bLEDEnable)
 8003a44:	4b1b      	ldr	r3, [pc, #108]	; (8003ab4 <LED_OnOff+0x7c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d02d      	beq.n	8003aa8 <LED_OnOff+0x70>
    return;
  }

  GPIO_TypeDef* LED_GPIO_Port;
  uint16_t LED_GPIO_Pin;
  if(s_bLEDInit)
 8003a4c:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <LED_OnOff+0x80>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02c      	beq.n	8003aae <LED_OnOff+0x76>
  {
    switch(eLED){
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d010      	beq.n	8003a7c <LED_OnOff+0x44>
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	dc26      	bgt.n	8003aac <LED_OnOff+0x74>
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d002      	beq.n	8003a68 <LED_OnOff+0x30>
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d005      	beq.n	8003a72 <LED_OnOff+0x3a>
      case LED3_RED:
        LED_GPIO_Port = LED3_RED_GPIO_Port;
        LED_GPIO_Pin = LED3_RED_Pin;
        break;
      default:
        return;
 8003a66:	e021      	b.n	8003aac <LED_OnOff+0x74>
        LED_GPIO_Port = LED1_GREEN_GPIO_Port;
 8003a68:	4b14      	ldr	r3, [pc, #80]	; (8003abc <LED_OnOff+0x84>)
 8003a6a:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED1_GREEN_Pin;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	817b      	strh	r3, [r7, #10]
        break;
 8003a70:	e009      	b.n	8003a86 <LED_OnOff+0x4e>
        LED_GPIO_Port = LED2_YELLOW_GPIO_Port;
 8003a72:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <LED_OnOff+0x88>)
 8003a74:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED2_YELLOW_Pin;
 8003a76:	2310      	movs	r3, #16
 8003a78:	817b      	strh	r3, [r7, #10]
        break;
 8003a7a:	e004      	b.n	8003a86 <LED_OnOff+0x4e>
        LED_GPIO_Port = LED3_RED_GPIO_Port;
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <LED_OnOff+0x8c>)
 8003a7e:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED3_RED_Pin;
 8003a80:	2310      	movs	r3, #16
 8003a82:	817b      	strh	r3, [r7, #10]
        break;
 8003a84:	bf00      	nop
        break;
    }
    if(bOn)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d006      	beq.n	8003a9a <LED_OnOff+0x62>
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_SET);
 8003a8c:	897b      	ldrh	r3, [r7, #10]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	4619      	mov	r1, r3
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f003 fe36 	bl	8007704 <HAL_GPIO_WritePin>
 8003a98:	e009      	b.n	8003aae <LED_OnOff+0x76>
    }
    else
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_RESET);
 8003a9a:	897b      	ldrh	r3, [r7, #10]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f003 fe2f 	bl	8007704 <HAL_GPIO_WritePin>
 8003aa6:	e002      	b.n	8003aae <LED_OnOff+0x76>
    return;
 8003aa8:	bf00      	nop
 8003aaa:	e000      	b.n	8003aae <LED_OnOff+0x76>
        return;
 8003aac:	bf00      	nop
    }
  }
}
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	20055370 	.word	0x20055370
 8003ab8:	2005536c 	.word	0x2005536c
 8003abc:	42020400 	.word	0x42020400
 8003ac0:	42021400 	.word	0x42021400
 8003ac4:	42021800 	.word	0x42021800

08003ac8 <LED_SimpleAnimation>:
  LED_OnOff(LED2_YELLOW, bOn);
  LED_OnOff(LED3_RED, bOn);
}

void LED_SimpleAnimation(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
  for(int i =0; i<3; i++)
 8003ace:	2300      	movs	r3, #0
 8003ad0:	607b      	str	r3, [r7, #4]
 8003ad2:	e02c      	b.n	8003b2e <LED_SimpleAnimation+0x66>
  {
    LED_OnOff(LED1_GREEN, TRUE);
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f7ff ffae 	bl	8003a38 <LED_OnOff>
    HAL_Delay(50);
 8003adc:	2032      	movs	r0, #50	; 0x32
 8003ade:	f000 fb0f 	bl	8004100 <HAL_Delay>
    LED_OnOff(LED1_GREEN, FALSE);
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f7ff ffa7 	bl	8003a38 <LED_OnOff>
    HAL_Delay(50);
 8003aea:	2032      	movs	r0, #50	; 0x32
 8003aec:	f000 fb08 	bl	8004100 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, TRUE);
 8003af0:	2101      	movs	r1, #1
 8003af2:	2002      	movs	r0, #2
 8003af4:	f7ff ffa0 	bl	8003a38 <LED_OnOff>
    HAL_Delay(50);
 8003af8:	2032      	movs	r0, #50	; 0x32
 8003afa:	f000 fb01 	bl	8004100 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, FALSE);
 8003afe:	2100      	movs	r1, #0
 8003b00:	2002      	movs	r0, #2
 8003b02:	f7ff ff99 	bl	8003a38 <LED_OnOff>
    HAL_Delay(50);
 8003b06:	2032      	movs	r0, #50	; 0x32
 8003b08:	f000 fafa 	bl	8004100 <HAL_Delay>
    LED_OnOff(LED3_RED, TRUE);
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	2003      	movs	r0, #3
 8003b10:	f7ff ff92 	bl	8003a38 <LED_OnOff>
    HAL_Delay(50);
 8003b14:	2032      	movs	r0, #50	; 0x32
 8003b16:	f000 faf3 	bl	8004100 <HAL_Delay>
    LED_OnOff(LED3_RED, FALSE);
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	2003      	movs	r0, #3
 8003b1e:	f7ff ff8b 	bl	8003a38 <LED_OnOff>
    HAL_Delay(50);
 8003b22:	2032      	movs	r0, #50	; 0x32
 8003b24:	f000 faec 	bl	8004100 <HAL_Delay>
  for(int i =0; i<3; i++)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	ddcf      	ble.n	8003ad4 <LED_SimpleAnimation+0xc>
  }
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <CLI_LEDTest>:
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (LED_TEST,"LED","LED [1~11] [0,1,2] ",CLI_LEDTest);

static void CLI_LEDTest(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	603b      	str	r3, [r7, #0]
  if (nCount == 2) {
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d10b      	bne.n	8003b6a <CLI_LEDTest+0x2c>
    LED_OnOff((LED_e)nFirst, (BOOL)(nSecond != 0));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	bf14      	ite	ne
 8003b5c:	2301      	movne	r3, #1
 8003b5e:	2300      	moveq	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f7ff ff67 	bl	8003a38 <LED_OnOff>
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <RESET_Init>:
  }
}


BOOL RESET_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	603b      	str	r3, [r7, #0]
  BOOL is_debug = FALSE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	607b      	str	r3, [r7, #4]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 8003b82:	4b1c      	ldr	r3, [pc, #112]	; (8003bf4 <RESET_Init+0x80>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <RESET_Init+0x1e>
  {
    is_debug = TRUE;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	607b      	str	r3, [r7, #4]
  }
  RTC_WriteBackupReg(RESET_REG_COUNT+1, RESET_REG_MAGICNUMBER);
 8003b92:	4919      	ldr	r1, [pc, #100]	; (8003bf8 <RESET_Init+0x84>)
 8003b94:	2002      	movs	r0, #2
 8003b96:	f000 f845 	bl	8003c24 <RTC_WriteBackupReg>
  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if((RCC->RSR & (1<<26) && is_debug != TRUE) && RTC_ReadBackupReg(RESET_REG_COUNT+1) == RESET_REG_MAGICNUMBER)
 8003b9a:	4b18      	ldr	r3, [pc, #96]	; (8003bfc <RESET_Init+0x88>)
 8003b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ba0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01c      	beq.n	8003be2 <RESET_Init+0x6e>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d019      	beq.n	8003be2 <RESET_Init+0x6e>
 8003bae:	2002      	movs	r0, #2
 8003bb0:	f000 f828 	bl	8003c04 <RTC_ReadBackupReg>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	4a10      	ldr	r2, [pc, #64]	; (8003bf8 <RESET_Init+0x84>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d112      	bne.n	8003be2 <RESET_Init+0x6e>
  {
    RTC_WriteBackupReg(RESET_REG_COUNT, RTC_ReadBackupReg(RESET_REG_COUNT) + 1);
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	f000 f821 	bl	8003c04 <RTC_ReadBackupReg>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	2001      	movs	r0, #1
 8003bca:	f000 f82b 	bl	8003c24 <RTC_WriteBackupReg>
    HAL_Delay(500); // 500 m delay
 8003bce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bd2:	f000 fa95 	bl	8004100 <HAL_Delay>
    s_ResetCount = RTC_ReadBackupReg(RESET_REG_COUNT);
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	f000 f814 	bl	8003c04 <RTC_ReadBackupReg>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <RESET_Init+0x8c>)
 8003be0:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  RTC_WriteBackupReg(RESET_REG_COUNT, 0);
 8003be2:	2100      	movs	r1, #0
 8003be4:	2001      	movs	r0, #1
 8003be6:	f000 f81d 	bl	8003c24 <RTC_WriteBackupReg>

  return ret;
 8003bea:	683b      	ldr	r3, [r7, #0]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	e000edf0 	.word	0xe000edf0
 8003bf8:	20240215 	.word	0x20240215
 8003bfc:	44020c00 	.word	0x44020c00
 8003c00:	20055374 	.word	0x20055374

08003c04 <RTC_ReadBackupReg>:
#include "RTC.h"

RTC_HandleTypeDef hrtc;

uint32_t RTC_ReadBackupReg(uint32_t index)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	4804      	ldr	r0, [pc, #16]	; (8003c20 <RTC_ReadBackupReg+0x1c>)
 8003c10:	f009 fe08 	bl	800d824 <HAL_RTCEx_BKUPRead>
 8003c14:	4603      	mov	r3, r0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20055378 	.word	0x20055378

08003c24 <RTC_WriteBackupReg>:

void RTC_WriteBackupReg(uint32_t index, uint32_t data)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4803      	ldr	r0, [pc, #12]	; (8003c40 <RTC_WriteBackupReg+0x1c>)
 8003c34:	f009 fdde 	bl	800d7f4 <HAL_RTCEx_BKUPWrite>
}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20055378 	.word	0x20055378

08003c44 <UART_Init>:

UART_HandleTypeDef huart2;
//UART_HandleTypeDef huart3;

void  UART_Init(uint8_t ch, uint32_t baud)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	6039      	str	r1, [r7, #0]
 8003c4e:	71fb      	strb	r3, [r7, #7]
  switch(ch)
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d177      	bne.n	8003d46 <UART_Init+0x102>
  {
    case _DEF_UART1:
      huart2.Instance = USART2;
 8003c56:	4b3e      	ldr	r3, [pc, #248]	; (8003d50 <UART_Init+0x10c>)
 8003c58:	4a3e      	ldr	r2, [pc, #248]	; (8003d54 <UART_Init+0x110>)
 8003c5a:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = baud;
 8003c5c:	4a3c      	ldr	r2, [pc, #240]	; (8003d50 <UART_Init+0x10c>)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c62:	4b3b      	ldr	r3, [pc, #236]	; (8003d50 <UART_Init+0x10c>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 8003c68:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <UART_Init+0x10c>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 8003c6e:	4b38      	ldr	r3, [pc, #224]	; (8003d50 <UART_Init+0x10c>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 8003c74:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <UART_Init+0x10c>)
 8003c76:	220c      	movs	r2, #12
 8003c78:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c7a:	4b35      	ldr	r3, [pc, #212]	; (8003d50 <UART_Init+0x10c>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c80:	4b33      	ldr	r3, [pc, #204]	; (8003d50 <UART_Init+0x10c>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	61da      	str	r2, [r3, #28]
      huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c86:	4b32      	ldr	r3, [pc, #200]	; (8003d50 <UART_Init+0x10c>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	621a      	str	r2, [r3, #32]
      huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c8c:	4b30      	ldr	r3, [pc, #192]	; (8003d50 <UART_Init+0x10c>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24
      huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c92:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <UART_Init+0x10c>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c98:	482d      	ldr	r0, [pc, #180]	; (8003d50 <UART_Init+0x10c>)
 8003c9a:	f00a f9bf 	bl	800e01c <HAL_UART_Init>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <UART_Init+0x72>
      {
        Error_Handler();
 8003ca4:	f7fd f8ee 	bl	8000e84 <Error_Handler>
        s_bUARTConnected = FALSE;
 8003ca8:	4b2b      	ldr	r3, [pc, #172]	; (8003d58 <UART_Init+0x114>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003cae:	4b2b      	ldr	r3, [pc, #172]	; (8003d5c <UART_Init+0x118>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	e031      	b.n	8003d1a <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4825      	ldr	r0, [pc, #148]	; (8003d50 <UART_Init+0x10c>)
 8003cba:	f00c f8ee 	bl	800fe9a <HAL_UARTEx_SetTxFifoThreshold>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <UART_Init+0x92>
      {
        Error_Handler();
 8003cc4:	f7fd f8de 	bl	8000e84 <Error_Handler>
        s_bUARTConnected = FALSE;
 8003cc8:	4b23      	ldr	r3, [pc, #140]	; (8003d58 <UART_Init+0x114>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003cce:	4b23      	ldr	r3, [pc, #140]	; (8003d5c <UART_Init+0x118>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	e021      	b.n	8003d1a <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	481d      	ldr	r0, [pc, #116]	; (8003d50 <UART_Init+0x10c>)
 8003cda:	f00c f91c 	bl	800ff16 <HAL_UARTEx_SetRxFifoThreshold>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <UART_Init+0xb2>
      {
        Error_Handler();
 8003ce4:	f7fd f8ce 	bl	8000e84 <Error_Handler>
        s_bUARTConnected = FALSE;
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <UART_Init+0x114>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003cee:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <UART_Init+0x118>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e011      	b.n	8003d1a <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003cf6:	4816      	ldr	r0, [pc, #88]	; (8003d50 <UART_Init+0x10c>)
 8003cf8:	f00c f896 	bl	800fe28 <HAL_UARTEx_DisableFifoMode>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <UART_Init+0xd0>
      {
        Error_Handler();
 8003d02:	f7fd f8bf 	bl	8000e84 <Error_Handler>
        s_bUARTConnected = FALSE;
 8003d06:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <UART_Init+0x114>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003d0c:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <UART_Init+0x118>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	e002      	b.n	8003d1a <UART_Init+0xd6>
      }
      else
      {
        // ring buffer
        svRingBuffer_Reset(&g_uartRxBuff);
 8003d14:	4812      	ldr	r0, [pc, #72]	; (8003d60 <UART_Init+0x11c>)
 8003d16:	f00d f888 	bl	8010e2a <svRingBuffer_Reset>
      }

      if(HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_data,1) != HAL_OK)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	4911      	ldr	r1, [pc, #68]	; (8003d64 <UART_Init+0x120>)
 8003d1e:	480c      	ldr	r0, [pc, #48]	; (8003d50 <UART_Init+0x10c>)
 8003d20:	f00a fa6a 	bl	800e1f8 <HAL_UART_Receive_IT>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d006      	beq.n	8003d38 <UART_Init+0xf4>
      {
        s_bUARTConnected = FALSE;
 8003d2a:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <UART_Init+0x114>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 8003d30:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <UART_Init+0x118>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
      else
      {
        s_bUARTConnected = TRUE;
        g_bDebugTx = TRUE;
      }
      break;
 8003d36:	e007      	b.n	8003d48 <UART_Init+0x104>
        s_bUARTConnected = TRUE;
 8003d38:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <UART_Init+0x114>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
        g_bDebugTx = TRUE;
 8003d3e:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <UART_Init+0x118>)
 8003d40:	2201      	movs	r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
      break;
 8003d44:	e000      	b.n	8003d48 <UART_Init+0x104>
    default:
      break;
 8003d46:	bf00      	nop
  }
  return;
 8003d48:	bf00      	nop
}
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	200553b0 	.word	0x200553b0
 8003d54:	40004400 	.word	0x40004400
 8003d58:	200553ac 	.word	0x200553ac
 8003d5c:	200554c4 	.word	0x200554c4
 8003d60:	20050020 	.word	0x20050020
 8003d64:	200553a8 	.word	0x200553a8

08003d68 <IsUartConnected>:

BOOL  IsUartConnected(uint8_t ch)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
  return s_bUARTConnected;
 8003d72:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <IsUartConnected+0x1c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	200553ac 	.word	0x200553ac

08003d88 <UART_Write>:

uint32_t  UART_Write(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	6039      	str	r1, [r7, #0]
 8003d92:	71fb      	strb	r3, [r7, #7]
 8003d94:	4613      	mov	r3, r2
 8003d96:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status;

  switch(ch)
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d110      	bne.n	8003dc4 <UART_Write+0x3c>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart2, Buf, Len, 100);
 8003da2:	88ba      	ldrh	r2, [r7, #4]
 8003da4:	2364      	movs	r3, #100	; 0x64
 8003da6:	6839      	ldr	r1, [r7, #0]
 8003da8:	480a      	ldr	r0, [pc, #40]	; (8003dd4 <UART_Write+0x4c>)
 8003daa:	f00a f987 	bl	800e0bc <HAL_UART_Transmit>
 8003dae:	4603      	mov	r3, r0
 8003db0:	72fb      	strb	r3, [r7, #11]

      if(status == HAL_OK)
 8003db2:	7afb      	ldrb	r3, [r7, #11]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d107      	bne.n	8003dc8 <UART_Write+0x40>
      {
        ret = Len;
 8003db8:	88bb      	ldrh	r3, [r7, #4]
 8003dba:	60fb      	str	r3, [r7, #12]
        g_bDebugTx = TRUE;
 8003dbc:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <UART_Write+0x50>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
      }
      break;
 8003dc2:	e001      	b.n	8003dc8 <UART_Write+0x40>
    default:
      break;
 8003dc4:	bf00      	nop
 8003dc6:	e000      	b.n	8003dca <UART_Write+0x42>
      break;
 8003dc8:	bf00      	nop
  }
  return ret;
 8003dca:	68fb      	ldr	r3, [r7, #12]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	200553b0 	.word	0x200553b0
 8003dd8:	200554c4 	.word	0x200554c4

08003ddc <UART_Printf>:
  return ret;
}


uint32_t UART_Printf(uint8_t ch, char* fmt, ...) // ... arg
{
 8003ddc:	b40e      	push	{r1, r2, r3}
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b0c7      	sub	sp, #284	; 0x11c
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	4602      	mov	r2, r0
 8003de6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003dea:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003dee:	701a      	strb	r2, [r3, #0]
  va_list args;

  int len;
  uint32_t ret;

  va_start(args, fmt);
 8003df0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003df4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003df8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003dfc:	601a      	str	r2, [r3, #0]
  // printf 결과를 buf 에 저장
  len = vsnprintf(buf, 256, fmt, args);
 8003dfe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e06:	f107 0010 	add.w	r0, r7, #16
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003e10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e14:	f020 f9bc 	bl	8024190 <vsniprintf>
 8003e18:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = UART_Write(ch, (uint8_t *)buf, len);
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	f107 0110 	add.w	r1, r7, #16
 8003e26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e2a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ffa9 	bl	8003d88 <UART_Write>
 8003e36:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);

  return ret;
 8003e3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003e44:	46bd      	mov	sp, r7
 8003e46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e4a:	b003      	add	sp, #12
 8003e4c:	4770      	bx	lr
	...

08003e50 <Uart_Available>:

uint32_t Uart_Available(uint8_t ch)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8003e5e:	79fb      	ldrb	r3, [r7, #7]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <Uart_Available+0x1e>
  {
    case _DEF_UART1:
      ret = svRingBuffer_GetCount(&g_uartRxBuff);
 8003e64:	4804      	ldr	r0, [pc, #16]	; (8003e78 <Uart_Available+0x28>)
 8003e66:	f00c ffbe 	bl	8010de6 <svRingBuffer_GetCount>
 8003e6a:	60f8      	str	r0, [r7, #12]
      break;
 8003e6c:	bf00      	nop
  }

  return ret;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20050020 	.word	0x20050020

08003e7c <HAL_UART_RxCpltCallback>:
  return ret;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <HAL_UART_RxCpltCallback+0x40>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d112      	bne.n	8003eb4 <HAL_UART_RxCpltCallback+0x38>
  {
    // For UART Test
    // UART_Printf(_DEF_UART1, "RxData : 0x%X\n", rx_data);
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 8003e8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <HAL_UART_RxCpltCallback+0x44>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	4619      	mov	r1, r3
 8003e94:	480b      	ldr	r0, [pc, #44]	; (8003ec4 <HAL_UART_RxCpltCallback+0x48>)
 8003e96:	f00c ffe0 	bl	8010e5a <svRingBuffer_Push>
 8003e9a:	60f8      	str	r0, [r7, #12]
    if(result == -2 )
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f113 0f02 	cmn.w	r3, #2
 8003ea2:	d102      	bne.n	8003eaa <HAL_UART_RxCpltCallback+0x2e>
    {
      svRingBuffer_Reset(&g_uartRxBuff);
 8003ea4:	4807      	ldr	r0, [pc, #28]	; (8003ec4 <HAL_UART_RxCpltCallback+0x48>)
 8003ea6:	f00c ffc0 	bl	8010e2a <svRingBuffer_Reset>
    }else
    {

    }
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data, 1);
 8003eaa:	2201      	movs	r2, #1
 8003eac:	4904      	ldr	r1, [pc, #16]	; (8003ec0 <HAL_UART_RxCpltCallback+0x44>)
 8003eae:	4806      	ldr	r0, [pc, #24]	; (8003ec8 <HAL_UART_RxCpltCallback+0x4c>)
 8003eb0:	f00a f9a2 	bl	800e1f8 <HAL_UART_Receive_IT>
  }
}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40004400 	.word	0x40004400
 8003ec0:	200553a8 	.word	0x200553a8
 8003ec4:	20050020 	.word	0x20050020
 8003ec8:	200553b0 	.word	0x200553b0

08003ecc <svDebugRxChar>:
  return ch;
}
#endif

char svDebugRxChar(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
	if (svRingBuffer_GetCount(&g_rbDebugRx) > 0) {
 8003ed0:	4806      	ldr	r0, [pc, #24]	; (8003eec <svDebugRxChar+0x20>)
 8003ed2:	f00c ff88 	bl	8010de6 <svRingBuffer_GetCount>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <svDebugRxChar+0x1a>
		return svRingBuffer_Pop(&g_rbDebugRx);
 8003edc:	4803      	ldr	r0, [pc, #12]	; (8003eec <svDebugRxChar+0x20>)
 8003ede:	f00c fff0 	bl	8010ec2 <svRingBuffer_Pop>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	e000      	b.n	8003ee8 <svDebugRxChar+0x1c>
	}
	else {
		return 0;
 8003ee6:	2300      	movs	r3, #0
	}
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	20050020 	.word	0x20050020

08003ef0 <svDebugProcess>:

void svDebugProcess(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
	if (IsUartConnected(_DEF_UART1)) {
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	f7ff ff36 	bl	8003d68 <IsUartConnected>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d01a      	beq.n	8003f38 <svDebugProcess+0x48>
	  svCLI_Handler();
 8003f02:	f00c fe1d 	bl	8010b40 <svCLI_Handler>
		if (g_bDebugTx == TRUE) {
 8003f06:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <svDebugProcess+0x50>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d114      	bne.n	8003f38 <svDebugProcess+0x48>
			size_t nLength = lwrb_get_linear_block_read_length(&g_lwrbDebugTx);
 8003f0e:	480d      	ldr	r0, [pc, #52]	; (8003f44 <svDebugProcess+0x54>)
 8003f10:	f01f fe3b 	bl	8023b8a <lwrb_get_linear_block_read_length>
 8003f14:	6078      	str	r0, [r7, #4]
			if (nLength > 0) {
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <svDebugProcess+0x48>
			  /*
				if (nLength > UART_TX_DATA_SIZE) {
					nLength = UART_TX_DATA_SIZE;
				}
				*/
				UART_Write(_DEF_UART1, lwrb_get_linear_block_read_address(&g_lwrbDebugTx), nLength);
 8003f1c:	4809      	ldr	r0, [pc, #36]	; (8003f44 <svDebugProcess+0x54>)
 8003f1e:	f01f fe18 	bl	8023b52 <lwrb_get_linear_block_read_address>
 8003f22:	4601      	mov	r1, r0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	f7ff ff2c 	bl	8003d88 <UART_Write>
				lwrb_skip(&g_lwrbDebugTx, nLength);
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4804      	ldr	r0, [pc, #16]	; (8003f44 <svDebugProcess+0x54>)
 8003f34:	f01f fe5c 	bl	8023bf0 <lwrb_skip>
				g_bDebugTx = TRUE;
		  }
		}
		*/
	}
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	200554c4 	.word	0x200554c4
 8003f44:	200554c8 	.word	0x200554c8

08003f48 <svDebugCallback>:

void svDebugCallback(LWRB_VOLATILE struct lwrb* buff, lwrb_evt_type_t evt, size_t bp)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	460b      	mov	r3, r1
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	72fb      	strb	r3, [r7, #11]
	if (evt == LWRB_EVT_FULL) {
 8003f56:	7afb      	ldrb	r3, [r7, #11]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d11a      	bne.n	8003f92 <svDebugCallback+0x4a>
		if (IsUartConnected(_DEF_UART1)) {
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	f7ff ff03 	bl	8003d68 <IsUartConnected>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d014      	beq.n	8003f92 <svDebugCallback+0x4a>
			uint32_t uTick = HAL_GetTick();
 8003f68:	f000 f8be 	bl	80040e8 <HAL_GetTick>
 8003f6c:	6178      	str	r0, [r7, #20]
			while (GetElapsedTime(uTick) < 100) {
 8003f6e:	e003      	b.n	8003f78 <svDebugCallback+0x30>
				if (g_bDebugTx == TRUE) {
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <svDebugCallback+0x54>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d006      	beq.n	8003f86 <svDebugCallback+0x3e>
			while (GetElapsedTime(uTick) < 100) {
 8003f78:	6978      	ldr	r0, [r7, #20]
 8003f7a:	f000 f863 	bl	8004044 <GetElapsedTime>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b63      	cmp	r3, #99	; 0x63
 8003f82:	d9f5      	bls.n	8003f70 <svDebugCallback+0x28>
 8003f84:	e000      	b.n	8003f88 <svDebugCallback+0x40>
					break;
 8003f86:	bf00      	nop
				}
				// HAL_Delay(1);
			}
      g_bDebugTx = TRUE;
 8003f88:	4b04      	ldr	r3, [pc, #16]	; (8003f9c <svDebugCallback+0x54>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
			svDebugProcess();
 8003f8e:	f7ff ffaf 	bl	8003ef0 <svDebugProcess>
		}
	}
}
 8003f92:	bf00      	nop
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	200554c4 	.word	0x200554c4

08003fa0 <svDebugInit>:
{
	return lwrb_get_free(&g_lwrbDebugTx);
}

void svDebugInit(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
	svRingBuffer_Reset(&g_rbDebugRx);
 8003fa4:	4809      	ldr	r0, [pc, #36]	; (8003fcc <svDebugInit+0x2c>)
 8003fa6:	f00c ff40 	bl	8010e2a <svRingBuffer_Reset>
	svCLI_Init(&svDebugRxChar, &svDebugPutChar, NULL);
 8003faa:	2200      	movs	r2, #0
 8003fac:	4908      	ldr	r1, [pc, #32]	; (8003fd0 <svDebugInit+0x30>)
 8003fae:	4809      	ldr	r0, [pc, #36]	; (8003fd4 <svDebugInit+0x34>)
 8003fb0:	f00c f93a 	bl	8010228 <svCLI_Init>

  lwrb_init(&g_lwrbDebugTx, &s_byDebugTxRingBuffer[0], DEBUG_TX_BUFFER_SIZE);
 8003fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb8:	4907      	ldr	r1, [pc, #28]	; (8003fd8 <svDebugInit+0x38>)
 8003fba:	4808      	ldr	r0, [pc, #32]	; (8003fdc <svDebugInit+0x3c>)
 8003fbc:	f01f fcaa 	bl	8023914 <lwrb_init>
	lwrb_set_evt_fn(&g_lwrbDebugTx, svDebugCallback);
 8003fc0:	4907      	ldr	r1, [pc, #28]	; (8003fe0 <svDebugInit+0x40>)
 8003fc2:	4806      	ldr	r0, [pc, #24]	; (8003fdc <svDebugInit+0x3c>)
 8003fc4:	f01f fcc7 	bl	8023956 <lwrb_set_evt_fn>
}
 8003fc8:	bf00      	nop
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20050020 	.word	0x20050020
 8003fd0:	08003fe5 	.word	0x08003fe5
 8003fd4:	08003ecd 	.word	0x08003ecd
 8003fd8:	200554dc 	.word	0x200554dc
 8003fdc:	200554c8 	.word	0x200554c8
 8003fe0:	08003f49 	.word	0x08003f49

08003fe4 <svDebugPutChar>:
		uDebugMsgLevel = DEBUG_VERBOSE;
	g_DebugMsgLevel = uDebugMsgLevel;
}

void svDebugPutChar(char cPut)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	71fb      	strb	r3, [r7, #7]
	lwrb_write(&g_lwrbDebugTx, (const void*)(&cPut), 1);
 8003fee:	1dfb      	adds	r3, r7, #7
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4803      	ldr	r0, [pc, #12]	; (8004004 <svDebugPutChar+0x20>)
 8003ff6:	f01f fcc7 	bl	8023988 <lwrb_write>
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	200554c8 	.word	0x200554c8

08004008 <svDebugMessage>:
#endif
	lwrb_write(&g_lwrbDebugTx, (const void*)szMsg, lenMax);
}

void svDebugMessage(char* fmt,...)
{
 8004008:	b40f      	push	{r0, r1, r2, r3}
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
	static char s_msg4Debug[DEBUG_MESSAGE_SIZE];
	va_list ap;
	int len;

	va_start(ap, fmt);
 8004010:	f107 0314 	add.w	r3, r7, #20
 8004014:	603b      	str	r3, [r7, #0]
	len = vsprintf(s_msg4Debug, fmt, ap);
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	6939      	ldr	r1, [r7, #16]
 800401a:	4808      	ldr	r0, [pc, #32]	; (800403c <svDebugMessage+0x34>)
 800401c:	f020 f8dc 	bl	80241d8 <vsiprintf>
 8004020:	6078      	str	r0, [r7, #4]
	va_end(ap);

	lwrb_write(&g_lwrbDebugTx, (const void*)s_msg4Debug, len);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	461a      	mov	r2, r3
 8004026:	4905      	ldr	r1, [pc, #20]	; (800403c <svDebugMessage+0x34>)
 8004028:	4805      	ldr	r0, [pc, #20]	; (8004040 <svDebugMessage+0x38>)
 800402a:	f01f fcad 	bl	8023988 <lwrb_write>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004038:	b004      	add	sp, #16
 800403a:	4770      	bx	lr
 800403c:	200556e0 	.word	0x200556e0
 8004040:	200554c8 	.word	0x200554c8

08004044 <GetElapsedTime>:
#include <math.h>


// Functions
uint32_t GetElapsedTime(uint32_t tickRef)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	uint32_t tickCurrent = HAL_GetTick();
 800404c:	f000 f84c 	bl	80040e8 <HAL_GetTick>
 8004050:	60f8      	str	r0, [r7, #12]
	// Check Wrap around
	if (tickCurrent < tickRef) {
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	d204      	bcs.n	8004064 <GetElapsedTime+0x20>
		return (0xffffffff - tickRef + tickCurrent);
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	e002      	b.n	800406a <GetElapsedTime+0x26>
	}
	else {
		return tickCurrent - tickRef;
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	1ad3      	subs	r3, r2, r3
	}
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004078:	2003      	movs	r0, #3
 800407a:	f000 f928 	bl	80042ce <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800407e:	f004 f9a5 	bl	80083cc <HAL_RCC_GetSysClockFreq>
 8004082:	4602      	mov	r2, r0
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_Init+0x40>)
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f003 030f 	and.w	r3, r3, #15
 800408c:	490a      	ldr	r1, [pc, #40]	; (80040b8 <HAL_Init+0x44>)
 800408e:	5ccb      	ldrb	r3, [r1, r3]
 8004090:	fa22 f303 	lsr.w	r3, r2, r3
 8004094:	4a09      	ldr	r2, [pc, #36]	; (80040bc <HAL_Init+0x48>)
 8004096:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004098:	200f      	movs	r0, #15
 800409a:	f7fd f86d 	bl	8001178 <HAL_InitTick>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e002      	b.n	80040ae <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80040a8:	f7fc fef1 	bl	8000e8e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	44020c00 	.word	0x44020c00
 80040b8:	080297ec 	.word	0x080297ec
 80040bc:	20050000 	.word	0x20050000

080040c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <HAL_IncTick+0x20>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <HAL_IncTick+0x24>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4413      	add	r3, r2
 80040d0:	4a04      	ldr	r2, [pc, #16]	; (80040e4 <HAL_IncTick+0x24>)
 80040d2:	6013      	str	r3, [r2, #0]
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20050044 	.word	0x20050044
 80040e4:	20055760 	.word	0x20055760

080040e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  return uwTick;
 80040ec:	4b03      	ldr	r3, [pc, #12]	; (80040fc <HAL_GetTick+0x14>)
 80040ee:	681b      	ldr	r3, [r3, #0]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	20055760 	.word	0x20055760

08004100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004108:	f7ff ffee 	bl	80040e8 <HAL_GetTick>
 800410c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d005      	beq.n	8004126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <HAL_Delay+0x44>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004126:	bf00      	nop
 8004128:	f7ff ffde 	bl	80040e8 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	429a      	cmp	r2, r3
 8004136:	d8f7      	bhi.n	8004128 <HAL_Delay+0x28>
  {
  }
}
 8004138:	bf00      	nop
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20050044 	.word	0x20050044

08004148 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8004150:	4b07      	ldr	r3, [pc, #28]	; (8004170 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8004152:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004156:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800415a:	4905      	ldr	r1, [pc, #20]	; (8004170 <HAL_SBS_ETHInterfaceSelect+0x28>)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	44000400 	.word	0x44000400

08004174 <__NVIC_SetPriorityGrouping>:
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004190:	4013      	ands	r3, r2
 8004192:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800419c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041a6:	4a04      	ldr	r2, [pc, #16]	; (80041b8 <__NVIC_SetPriorityGrouping+0x44>)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	60d3      	str	r3, [r2, #12]
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <__NVIC_GetPriorityGrouping>:
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <__NVIC_GetPriorityGrouping+0x18>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	0a1b      	lsrs	r3, r3, #8
 80041c6:	f003 0307 	and.w	r3, r3, #7
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	e000ed00 	.word	0xe000ed00

080041d8 <__NVIC_EnableIRQ>:
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	db0b      	blt.n	8004202 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	f003 021f 	and.w	r2, r3, #31
 80041f0:	4907      	ldr	r1, [pc, #28]	; (8004210 <__NVIC_EnableIRQ+0x38>)
 80041f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2001      	movs	r0, #1
 80041fa:	fa00 f202 	lsl.w	r2, r0, r2
 80041fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	e000e100 	.word	0xe000e100

08004214 <__NVIC_SetPriority>:
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	6039      	str	r1, [r7, #0]
 800421e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004220:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004224:	2b00      	cmp	r3, #0
 8004226:	db0a      	blt.n	800423e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	490c      	ldr	r1, [pc, #48]	; (8004260 <__NVIC_SetPriority+0x4c>)
 800422e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004232:	0112      	lsls	r2, r2, #4
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	440b      	add	r3, r1
 8004238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800423c:	e00a      	b.n	8004254 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	4908      	ldr	r1, [pc, #32]	; (8004264 <__NVIC_SetPriority+0x50>)
 8004244:	88fb      	ldrh	r3, [r7, #6]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	3b04      	subs	r3, #4
 800424c:	0112      	lsls	r2, r2, #4
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	440b      	add	r3, r1
 8004252:	761a      	strb	r2, [r3, #24]
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000e100 	.word	0xe000e100
 8004264:	e000ed00 	.word	0xe000ed00

08004268 <NVIC_EncodePriority>:
{
 8004268:	b480      	push	{r7}
 800426a:	b089      	sub	sp, #36	; 0x24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f1c3 0307 	rsb	r3, r3, #7
 8004282:	2b04      	cmp	r3, #4
 8004284:	bf28      	it	cs
 8004286:	2304      	movcs	r3, #4
 8004288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	3304      	adds	r3, #4
 800428e:	2b06      	cmp	r3, #6
 8004290:	d902      	bls.n	8004298 <NVIC_EncodePriority+0x30>
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3b03      	subs	r3, #3
 8004296:	e000      	b.n	800429a <NVIC_EncodePriority+0x32>
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800429c:	f04f 32ff 	mov.w	r2, #4294967295
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43da      	mvns	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	401a      	ands	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042b0:	f04f 31ff 	mov.w	r1, #4294967295
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ba:	43d9      	mvns	r1, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c0:	4313      	orrs	r3, r2
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3724      	adds	r7, #36	; 0x24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff ff4c 	bl	8004174 <__NVIC_SetPriorityGrouping>
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042f2:	f7ff ff63 	bl	80041bc <__NVIC_GetPriorityGrouping>
 80042f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	68b9      	ldr	r1, [r7, #8]
 80042fc:	6978      	ldr	r0, [r7, #20]
 80042fe:	f7ff ffb3 	bl	8004268 <NVIC_EncodePriority>
 8004302:	4602      	mov	r2, r0
 8004304:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff ff82 	bl	8004214 <__NVIC_SetPriority>
}
 8004310:	bf00      	nop
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff ff56 	bl	80041d8 <__NVIC_EnableIRQ>
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800433c:	f7ff fed4 	bl	80040e8 <HAL_GetTick>
 8004340:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e06b      	b.n	8004424 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d008      	beq.n	800436a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e05c      	b.n	8004424 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0204 	orr.w	r2, r2, #4
 8004378:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2205      	movs	r2, #5
 800437e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004382:	e020      	b.n	80043c6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004384:	f7ff feb0 	bl	80040e8 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b05      	cmp	r3, #5
 8004390:	d919      	bls.n	80043c6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	f043 0210 	orr.w	r2, r3, #16
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2203      	movs	r2, #3
 80043a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b6:	2201      	movs	r2, #1
 80043b8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e02e      	b.n	8004424 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0d7      	beq.n	8004384 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0202 	orr.w	r2, r2, #2
 80043e2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2204      	movs	r2, #4
 80043e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80043f4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004406:	2b00      	cmp	r3, #0
 8004408:	d007      	beq.n	800441a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440e:	2201      	movs	r2, #1
 8004410:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2200      	movs	r2, #0
 8004418:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e019      	b.n	8004472 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d004      	beq.n	8004454 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e00e      	b.n	8004472 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2204      	movs	r2, #4
 8004458:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800446a:	f043 0304 	orr.w	r3, r3, #4
 800446e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
	...

08004480 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e0d2      	b.n	8004638 <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004498:	2b00      	cmp	r3, #0
 800449a:	d106      	bne.n	80044aa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2223      	movs	r2, #35	; 0x23
 80044a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7fd fc6d 	bl	8001d84 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 80044aa:	4b65      	ldr	r3, [pc, #404]	; (8004640 <HAL_ETH_Init+0x1c0>)
 80044ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044b0:	4a63      	ldr	r2, [pc, #396]	; (8004640 <HAL_ETH_Init+0x1c0>)
 80044b2:	f043 0302 	orr.w	r3, r3, #2
 80044b6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80044ba:	4b61      	ldr	r3, [pc, #388]	; (8004640 <HAL_ETH_Init+0x1c0>)
 80044bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	7a1b      	ldrb	r3, [r3, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d103      	bne.n	80044d8 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 80044d0:	2000      	movs	r0, #0
 80044d2:	f7ff fe39 	bl	8004148 <HAL_SBS_ETHInterfaceSelect>
 80044d6:	e003      	b.n	80044e0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 80044d8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80044dc:	f7ff fe34 	bl	8004148 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 80044e0:	4b58      	ldr	r3, [pc, #352]	; (8004644 <HAL_ETH_Init+0x1c4>)
 80044e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044fe:	f7ff fdf3 	bl	80040e8 <HAL_GetTick>
 8004502:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004504:	e011      	b.n	800452a <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004506:	f7ff fdef 	bl	80040e8 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004514:	d909      	bls.n	800452a <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2204      	movs	r2, #4
 800451a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	22e0      	movs	r2, #224	; 0xe0
 8004522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e086      	b.n	8004638 <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e4      	bne.n	8004506 <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 ff29 	bl	8005394 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004542:	f004 f86f 	bl	8008624 <HAL_RCC_GetHCLKFreq>
 8004546:	4603      	mov	r3, r0
 8004548:	4a3f      	ldr	r2, [pc, #252]	; (8004648 <HAL_ETH_Init+0x1c8>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	0c9a      	lsrs	r2, r3, #18
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3a01      	subs	r2, #1
 8004556:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f001 f932 	bl	80057c4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004568:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800456c:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004578:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800457c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d009      	beq.n	80045a0 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	22e0      	movs	r2, #224	; 0xe0
 8004598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e04b      	b.n	8004638 <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045ac:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80045b0:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6952      	ldr	r2, [r2, #20]
 80045b8:	0051      	lsls	r1, r2, #1
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	430b      	orrs	r3, r1
 80045c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045c4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f001 f998 	bl	80058fe <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f001 f9de 	bl	8005990 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	3305      	adds	r3, #5
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	021a      	lsls	r2, r3, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	3304      	adds	r3, #4
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	4619      	mov	r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	3303      	adds	r3, #3
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	061a      	lsls	r2, r3, #24
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	3302      	adds	r3, #2
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	041b      	lsls	r3, r3, #16
 8004606:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	3301      	adds	r3, #1
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004612:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004620:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004622:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2210      	movs	r2, #16
 8004632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	44020c00 	.word	0x44020c00
 8004644:	44000400 	.word	0x44000400
 8004648:	431bde83 	.word	0x431bde83

0800464c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465a:	2b10      	cmp	r3, #16
 800465c:	d17c      	bne.n	8004758 <HAL_ETH_Start_IT+0x10c>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2223      	movs	r2, #35	; 0x23
 8004662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	4b3a      	ldr	r3, [pc, #232]	; (8004764 <HAL_ETH_Start_IT+0x118>)
 800467a:	430b      	orrs	r3, r1
 800467c:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	f043 6342 	orr.w	r3, r3, #203423744	; 0xc200000
 8004690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004694:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2204      	movs	r2, #4
 800469c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f9eb 	bl	8004a7a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0202 	orr.w	r2, r2, #2
 80046b2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0201 	orr.w	r2, r2, #1
 80046d4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6812      	ldr	r2, [r2, #0]
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046f0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800470c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004718:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8004724:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004728:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004734:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	f443 4350 	orr.w	r3, r3, #53248	; 0xd000
 8004740:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8004744:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004748:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2223      	movs	r2, #35	; 0x23
 8004750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	e000      	b.n	800475a <HAL_ETH_Start_IT+0x10e>
  }
  else
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
  }
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	0c020060 	.word	0x0c020060

08004768 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004776:	2b23      	cmp	r3, #35	; 0x23
 8004778:	d167      	bne.n	800484a <HAL_ETH_Stop_IT+0xe2>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2223      	movs	r2, #35	; 0x23
 800477e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8004796:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 800479a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800479e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047aa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6812      	ldr	r2, [r2, #0]
 80047b2:	f023 0301 	bic.w	r3, r3, #1
 80047b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047ba:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	f023 0301 	bic.w	r3, r3, #1
 80047d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047d6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0201 	bic.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0202 	bic.w	r2, r2, #2
 800480c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	e00e      	b.n	8004832 <HAL_ETH_Stop_IT+0xca>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	3212      	adds	r2, #18
 800481a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481e:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3301      	adds	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b03      	cmp	r3, #3
 8004836:	d9ed      	bls.n	8004814 <HAL_ETH_Stop_IT+0xac>
    }

    heth->RxDescList.ItMode = 0U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2210      	movs	r2, #16
 8004842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	e000      	b.n	800484c <HAL_ETH_Stop_IT+0xe4>
  }
  else
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
  }
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486e:	f043 0201 	orr.w	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e03a      	b.n	80048f2 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004882:	2b23      	cmp	r3, #35	; 0x23
 8004884:	d134      	bne.n	80048f0 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800488e:	2201      	movs	r2, #1
 8004890:	6839      	ldr	r1, [r7, #0]
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f001 f8d9 	bl	8005a4a <ETH_Prepare_Tx_Descriptors>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d009      	beq.n	80048b2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	f043 0202 	orr.w	r2, r3, #2
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e01f      	b.n	80048f2 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80048b2:	f3bf 8f4f 	dsb	sy
}
 80048b6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	629a      	str	r2, [r3, #40]	; 0x28
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d904      	bls.n	80048d4 <HAL_ETH_Transmit_IT+0x7c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	1f1a      	subs	r2, r3, #4
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3106      	adds	r1, #6
 80048e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80048e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048e8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	e000      	b.n	80048f2 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
  }
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b088      	sub	sp, #32
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f043 0201 	orr.w	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e0a5      	b.n	8004a72 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800492c:	2b23      	cmp	r3, #35	; 0x23
 800492e:	d001      	beq.n	8004934 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e09e      	b.n	8004a72 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004938:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	3212      	adds	r2, #18
 8004940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004944:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800494a:	f1c3 0304 	rsb	r3, r3, #4
 800494e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004950:	e067      	b.n	8004a22 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d103      	bne.n	8004982 <HAL_ETH_ReadData+0x88>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d03d      	beq.n	80049fe <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00d      	beq.n	80049c8 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80049d8:	461a      	mov	r2, r3
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	f7fd fbbb 	bl	8002158 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	441a      	add	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2200      	movs	r2, #0
 80049fc:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	3301      	adds	r3, #1
 8004a02:	61fb      	str	r3, [r7, #28]
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d902      	bls.n	8004a10 <HAL_ETH_ReadData+0x116>
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	3b04      	subs	r3, #4
 8004a0e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	3212      	adds	r2, #18
 8004a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a1a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	db06      	blt.n	8004a38 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d202      	bcs.n	8004a38 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d08c      	beq.n	8004952 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	441a      	add	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f814 	bl	8004a7a <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69fa      	ldr	r2, [r7, #28]
 8004a56:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d108      	bne.n	8004a70 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e000      	b.n	8004a72 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3720      	adds	r7, #32
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b088      	sub	sp, #32
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004a86:	2301      	movs	r3, #1
 8004a88:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a8e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	3212      	adds	r2, #18
 8004a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a9a:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa0:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004aa2:	e03b      	b.n	8004b1c <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d112      	bne.n	8004ad2 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004aac:	f107 030c 	add.w	r3, r7, #12
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fd fb21 	bl	80020f8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	74fb      	strb	r3, [r7, #19]
 8004ac0:	e007      	b.n	8004ad2 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	461a      	mov	r2, r3
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8004ad2:	7cfb      	ldrb	r3, [r7, #19]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d021      	beq.n	8004b1c <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8004ad8:	f3bf 8f5f 	dmb	sy
}
 8004adc:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d004      	beq.n	8004af0 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8004aec:	60da      	str	r2, [r3, #12]
 8004aee:	e003      	b.n	8004af8 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8004af6:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	3301      	adds	r3, #1
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d902      	bls.n	8004b0a <ETH_UpdateDescriptor+0x90>
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	3b04      	subs	r3, #4
 8004b08:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	3212      	adds	r2, #18
 8004b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b14:	617b      	str	r3, [r7, #20]
      desccount--;
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <ETH_UpdateDescriptor+0xae>
 8004b22:	7cfb      	ldrb	r3, [r7, #19]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1bd      	bne.n	8004aa4 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d00d      	beq.n	8004b4e <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69fa      	ldr	r2, [r7, #28]
 8004b46:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004b4e:	bf00      	nop
 8004b50:	3720      	adds	r7, #32
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b086      	sub	sp, #24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3318      	adds	r3, #24
 8004b62:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b68:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004b74:	e03f      	b.n	8004bf6 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8004b76:	2301      	movs	r3, #1
 8004b78:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	3304      	adds	r3, #4
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	3301      	adds	r3, #1
 8004b94:	f003 0303 	and.w	r3, r3, #3
 8004b98:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004b9e:	7bbb      	ldrb	r3, [r7, #14]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d028      	beq.n	8004bf6 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68d9      	ldr	r1, [r3, #12]
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4613      	mov	r3, r2
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	4413      	add	r3, r2
 8004bb0:	00db      	lsls	r3, r3, #3
 8004bb2:	440b      	add	r3, r1
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	db1b      	blt.n	8004bf2 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fd fb06 	bl	80021d8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bf0:	e001      	b.n	8004bf6 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <HAL_ETH_ReleaseTxPacket+0xac>
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1b9      	bne.n	8004b76 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;

  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c24:	2b40      	cmp	r3, #64	; 0x40
 8004c26:	d115      	bne.n	8004c54 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c30:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8004c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c38:	2b40      	cmp	r3, #64	; 0x40
 8004c3a:	d10b      	bne.n	8004c54 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c44:	461a      	mov	r2, r3
 8004c46:	f248 0340 	movw	r3, #32832	; 0x8040
 8004c4a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fc fdfa 	bl	8001848 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d115      	bne.n	8004c94 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c70:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d10b      	bne.n	8004c94 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c84:	461a      	mov	r2, r3
 8004c86:	f248 0301 	movw	r3, #32769	; 0x8001
 8004c8a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fc fdea 	bl	8001868 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c9c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ca8:	d153      	bne.n	8004d52 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8004cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cbe:	d148      	bne.n	8004d52 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc6:	f043 0208 	orr.w	r2, r3, #8
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce4:	d11e      	bne.n	8004d24 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cee:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8004cf2:	f241 1302 	movw	r3, #4354	; 0x1102
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d06:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004d12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d16:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	22e0      	movs	r2, #224	; 0xe0
 8004d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004d22:	e013      	b.n	8004d4c <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d2c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004d30:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d42:	461a      	mov	r2, r3
 8004d44:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8004d48:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7fc fd9b 	bl	8001888 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d5a:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d104      	bne.n	8004d70 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d019      	beq.n	8004da4 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	f043 0210 	orr.w	r2, r3, #16
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	22e0      	movs	r2, #224	; 0xe0
 8004d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fc fd76 	bl	8001888 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b10      	cmp	r3, #16
 8004db2:	d10f      	bne.n	8004dd4 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004dbc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f830 	bl	8004e2c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b20      	cmp	r3, #32
 8004de2:	d10f      	bne.n	8004e04 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004dec:	f003 020f 	and.w	r2, r3, #15
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f822 	bl	8004e40 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004e04:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <HAL_ETH_IRQHandler+0x21c>)
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d006      	beq.n	8004e1e <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004e10:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_ETH_IRQHandler+0x21c>)
 8004e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004e16:	62da      	str	r2, [r3, #44]	; 0x2c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f81b 	bl	8004e54 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004e1e:	bf00      	nop
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	44022000 	.word	0x44022000

08004e2c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e03e      	b.n	8004f08 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e92:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	055b      	lsls	r3, r3, #21
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	041b      	lsls	r3, r3, #16
 8004eac:	4313      	orrs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f043 030c 	orr.w	r3, r3, #12
 8004eb6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f043 0301 	orr.w	r3, r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004eca:	f7ff f90d 	bl	80040e8 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004ed0:	e009      	b.n	8004ee6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004ed2:	f7ff f909 	bl	80040e8 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ee0:	d901      	bls.n	8004ee6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e010      	b.n	8004f08 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1ed      	bne.n	8004ed2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e03c      	b.n	8004fac <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f3a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	055b      	lsls	r3, r3, #21
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	041b      	lsls	r3, r3, #16
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f023 030c 	bic.w	r3, r3, #12
 8004f5e:	f043 0304 	orr.w	r3, r3, #4
 8004f62:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f043 0301 	orr.w	r3, r3, #1
 8004f6a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	4b10      	ldr	r3, [pc, #64]	; (8004fb4 <HAL_ETH_WritePHYRegister+0xa4>)
 8004f72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004f76:	4a0f      	ldr	r2, [pc, #60]	; (8004fb4 <HAL_ETH_WritePHYRegister+0xa4>)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004f7e:	f7ff f8b3 	bl	80040e8 <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004f84:	e009      	b.n	8004f9a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004f86:	f7ff f8af 	bl	80040e8 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f94:	d901      	bls.n	8004f9a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e008      	b.n	8004fac <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1ed      	bne.n	8004f86 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40028000 	.word	0x40028000

08004fb8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e1c3      	b.n	8005354 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 020c 	and.w	r2, r3, #12
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bf14      	ite	ne
 8004fe8:	2301      	movne	r3, #1
 8004fea:	2300      	moveq	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	bf0c      	ite	eq
 8005012:	2301      	moveq	r3, #1
 8005014:	2300      	movne	r3, #0
 8005016:	b2db      	uxtb	r3, r3
 8005018:	461a      	mov	r2, r3
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 800502a:	2b00      	cmp	r3, #0
 800502c:	bf14      	ite	ne
 800502e:	2301      	movne	r3, #1
 8005030:	2300      	moveq	r3, #0
 8005032:	b2db      	uxtb	r3, r3
 8005034:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005044:	2b00      	cmp	r3, #0
 8005046:	bf0c      	ite	eq
 8005048:	2301      	moveq	r3, #1
 800504a:	2300      	movne	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	461a      	mov	r2, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800505a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800505e:	2b00      	cmp	r3, #0
 8005060:	bf14      	ite	ne
 8005062:	2301      	movne	r3, #1
 8005064:	2300      	moveq	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005078:	2b00      	cmp	r3, #0
 800507a:	bf14      	ite	ne
 800507c:	2301      	movne	r3, #1
 800507e:	2300      	moveq	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	461a      	mov	r2, r3
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	bf14      	ite	ne
 80050b2:	2301      	movne	r3, #1
 80050b4:	2300      	moveq	r3, #0
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	461a      	mov	r2, r3
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bf0c      	ite	eq
 80050cc:	2301      	moveq	r3, #1
 80050ce:	2300      	movne	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bf0c      	ite	eq
 80050e6:	2301      	moveq	r3, #1
 80050e8:	2300      	movne	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	461a      	mov	r2, r3
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	bf14      	ite	ne
 8005100:	2301      	movne	r3, #1
 8005102:	2300      	moveq	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005116:	2b00      	cmp	r3, #0
 8005118:	bf14      	ite	ne
 800511a:	2301      	movne	r3, #1
 800511c:	2300      	moveq	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005130:	2b00      	cmp	r3, #0
 8005132:	bf14      	ite	ne
 8005134:	2301      	movne	r3, #1
 8005136:	2300      	moveq	r3, #0
 8005138:	b2db      	uxtb	r3, r3
 800513a:	461a      	mov	r2, r3
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8005146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800514a:	2b00      	cmp	r3, #0
 800514c:	bf14      	ite	ne
 800514e:	2301      	movne	r3, #1
 8005150:	2300      	moveq	r3, #0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	bf14      	ite	ne
 8005176:	2301      	movne	r3, #1
 8005178:	2300      	moveq	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	bf0c      	ite	eq
 80051ac:	2301      	moveq	r3, #1
 80051ae:	2300      	movne	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	461a      	mov	r2, r3
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80051dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bf14      	ite	ne
 8005200:	2301      	movne	r3, #1
 8005202:	2300      	moveq	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	0e5b      	lsrs	r3, r3, #25
 8005216:	f003 021f 	and.w	r2, r3, #31
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	63da      	str	r2, [r3, #60]	; 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	bf14      	ite	ne
 800522c:	2301      	movne	r3, #1
 800522e:	2300      	moveq	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	461a      	mov	r2, r3
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 020f 	and.w	r2, r3, #15
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	bf14      	ite	ne
 8005256:	2301      	movne	r3, #1
 8005258:	2300      	moveq	r3, #0
 800525a:	b2db      	uxtb	r3, r3
 800525c:	461a      	mov	r2, r3
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526e:	2b00      	cmp	r3, #0
 8005270:	bf0c      	ite	eq
 8005272:	2301      	moveq	r3, #1
 8005274:	2300      	movne	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	461a      	mov	r2, r3
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005286:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005294:	0c1b      	lsrs	r3, r3, #16
 8005296:	b29a      	uxth	r2, r3
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bf14      	ite	ne
 80052ac:	2301      	movne	r3, #1
 80052ae:	2300      	moveq	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	bf14      	ite	ne
 80052ca:	2301      	movne	r3, #1
 80052cc:	2300      	moveq	r3, #0
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80052e0:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80052f0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	bf14      	ite	ne
 8005308:	2301      	movne	r3, #1
 800530a:	2300      	moveq	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800531e:	f003 0310 	and.w	r3, r3, #16
 8005322:	2b00      	cmp	r3, #0
 8005324:	bf14      	ite	ne
 8005326:	2301      	movne	r3, #1
 8005328:	2300      	moveq	r3, #0
 800532a:	b2db      	uxtb	r3, r3
 800532c:	461a      	mov	r2, r3
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800533c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	bf0c      	ite	eq
 8005344:	2301      	moveq	r3, #1
 8005346:	2300      	movne	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e00b      	b.n	800538c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800537a:	2b10      	cmp	r3, #16
 800537c:	d105      	bne.n	800538a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800537e:	6839      	ldr	r1, [r7, #0]
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f87d 	bl	8005480 <ETH_SetMACConfig>

    return HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	e000      	b.n	800538c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
  }
}
 800538c:	4618      	mov	r0, r3
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053a4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80053ae:	f003 f939 	bl	8008624 <HAL_RCC_GetHCLKFreq>
 80053b2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4a25      	ldr	r2, [pc, #148]	; (800544c <HAL_ETH_SetMDIOClockRange+0xb8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d908      	bls.n	80053ce <HAL_ETH_SetMDIOClockRange+0x3a>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4a24      	ldr	r2, [pc, #144]	; (8005450 <HAL_ETH_SetMDIOClockRange+0xbc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d804      	bhi.n	80053ce <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e034      	b.n	8005438 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	4a1f      	ldr	r2, [pc, #124]	; (8005450 <HAL_ETH_SetMDIOClockRange+0xbc>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d908      	bls.n	80053e8 <HAL_ETH_SetMDIOClockRange+0x54>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	4a1e      	ldr	r2, [pc, #120]	; (8005454 <HAL_ETH_SetMDIOClockRange+0xc0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d204      	bcs.n	80053e8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	e027      	b.n	8005438 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4a1a      	ldr	r2, [pc, #104]	; (8005454 <HAL_ETH_SetMDIOClockRange+0xc0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d303      	bcc.n	80053f8 <HAL_ETH_SetMDIOClockRange+0x64>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4a19      	ldr	r2, [pc, #100]	; (8005458 <HAL_ETH_SetMDIOClockRange+0xc4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d91e      	bls.n	8005436 <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4a17      	ldr	r2, [pc, #92]	; (8005458 <HAL_ETH_SetMDIOClockRange+0xc4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d908      	bls.n	8005412 <HAL_ETH_SetMDIOClockRange+0x7e>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4a16      	ldr	r2, [pc, #88]	; (800545c <HAL_ETH_SetMDIOClockRange+0xc8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d804      	bhi.n	8005412 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	e012      	b.n	8005438 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	4a11      	ldr	r2, [pc, #68]	; (800545c <HAL_ETH_SetMDIOClockRange+0xc8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d908      	bls.n	800542c <HAL_ETH_SetMDIOClockRange+0x98>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	4a10      	ldr	r2, [pc, #64]	; (8005460 <HAL_ETH_SetMDIOClockRange+0xcc>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d804      	bhi.n	800542c <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	e005      	b.n	8005438 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	e000      	b.n	8005438 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005436:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005442:	bf00      	nop
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	01312cff 	.word	0x01312cff
 8005450:	02160ebf 	.word	0x02160ebf
 8005454:	03938700 	.word	0x03938700
 8005458:	05f5e0ff 	.word	0x05f5e0ff
 800545c:	08f0d17f 	.word	0x08f0d17f
 8005460:	0ee6b280 	.word	0x0ee6b280

08005464 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8005472:	4618      	mov	r0, r3
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005492:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	791b      	ldrb	r3, [r3, #4]
 8005498:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800549a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	7b1b      	ldrb	r3, [r3, #12]
 80054a0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80054a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	7b5b      	ldrb	r3, [r3, #13]
 80054a8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80054aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	7b9b      	ldrb	r3, [r3, #14]
 80054b0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80054b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	7bdb      	ldrb	r3, [r3, #15]
 80054b8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80054ba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	7c12      	ldrb	r2, [r2, #16]
 80054c0:	2a00      	cmp	r2, #0
 80054c2:	d102      	bne.n	80054ca <ETH_SetMACConfig+0x4a>
 80054c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80054c8:	e000      	b.n	80054cc <ETH_SetMACConfig+0x4c>
 80054ca:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80054cc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	7c52      	ldrb	r2, [r2, #17]
 80054d2:	2a00      	cmp	r2, #0
 80054d4:	d102      	bne.n	80054dc <ETH_SetMACConfig+0x5c>
 80054d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054da:	e000      	b.n	80054de <ETH_SetMACConfig+0x5e>
 80054dc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80054de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	7c9b      	ldrb	r3, [r3, #18]
 80054e4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80054e6:	431a      	orrs	r2, r3
               macconf->Speed |
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80054ec:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80054f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	7f1b      	ldrb	r3, [r3, #28]
 80054f8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80054fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	7f5b      	ldrb	r3, [r3, #29]
 8005500:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005502:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	7f92      	ldrb	r2, [r2, #30]
 8005508:	2a00      	cmp	r2, #0
 800550a:	d102      	bne.n	8005512 <ETH_SetMACConfig+0x92>
 800550c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005510:	e000      	b.n	8005514 <ETH_SetMACConfig+0x94>
 8005512:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005514:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	7fdb      	ldrb	r3, [r3, #31]
 800551a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800551c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005524:	2a00      	cmp	r2, #0
 8005526:	d102      	bne.n	800552e <ETH_SetMACConfig+0xae>
 8005528:	f44f 7280 	mov.w	r2, #256	; 0x100
 800552c:	e000      	b.n	8005530 <ETH_SetMACConfig+0xb0>
 800552e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005530:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005536:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800553e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005540:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	4b57      	ldr	r3, [pc, #348]	; (80056b0 <ETH_SetMACConfig+0x230>)
 8005552:	4013      	ands	r3, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6812      	ldr	r2, [r2, #0]
 8005558:	68f9      	ldr	r1, [r7, #12]
 800555a:	430b      	orrs	r3, r1
 800555c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005562:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800556a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800556c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005574:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005576:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800557e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005580:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005588:	2a00      	cmp	r2, #0
 800558a:	d102      	bne.n	8005592 <ETH_SetMACConfig+0x112>
 800558c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005590:	e000      	b.n	8005594 <ETH_SetMACConfig+0x114>
 8005592:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005594:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	4b43      	ldr	r3, [pc, #268]	; (80056b4 <ETH_SetMACConfig+0x234>)
 80055a6:	4013      	ands	r3, r2
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	68f9      	ldr	r1, [r7, #12]
 80055ae:	430b      	orrs	r3, r1
 80055b0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055b8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	68f9      	ldr	r1, [r7, #12]
 80055d6:	430b      	orrs	r3, r1
 80055d8:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80055e0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80055e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80055ee:	2a00      	cmp	r2, #0
 80055f0:	d101      	bne.n	80055f6 <ETH_SetMACConfig+0x176>
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	e000      	b.n	80055f8 <ETH_SetMACConfig+0x178>
 80055f6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80055f8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800560a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800560e:	4013      	ands	r3, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	68f9      	ldr	r1, [r7, #12]
 8005616:	430b      	orrs	r3, r1
 8005618:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005620:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005628:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005636:	f023 0103 	bic.w	r1, r3, #3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	430a      	orrs	r2, r1
 8005642:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800564e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800566a:	2a00      	cmp	r2, #0
 800566c:	d101      	bne.n	8005672 <ETH_SetMACConfig+0x1f2>
 800566e:	2240      	movs	r2, #64	; 0x40
 8005670:	e000      	b.n	8005674 <ETH_SetMACConfig+0x1f4>
 8005672:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005674:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800567c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800567e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005686:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005694:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	430a      	orrs	r2, r1
 80056a0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80056a4:	bf00      	nop
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	00048083 	.word	0x00048083
 80056b4:	c0f88000 	.word	0xc0f88000

080056b8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80056d0:	f023 0302 	bic.w	r3, r3, #2
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	6811      	ldr	r1, [r2, #0]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	430b      	orrs	r3, r1
 80056de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056e2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	791b      	ldrb	r3, [r3, #4]
 80056e8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80056ee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	7b1b      	ldrb	r3, [r3, #12]
 80056f4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8005708:	f023 0301 	bic.w	r3, r3, #1
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	68f9      	ldr	r1, [r7, #12]
 8005712:	430b      	orrs	r3, r1
 8005714:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005718:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	7b5b      	ldrb	r3, [r3, #13]
 800571e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005730:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005734:	4b21      	ldr	r3, [pc, #132]	; (80057bc <ETH_SetDMAConfig+0x104>)
 8005736:	4013      	ands	r3, r2
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6812      	ldr	r2, [r2, #0]
 800573c:	68f9      	ldr	r1, [r7, #12]
 800573e:	430b      	orrs	r3, r1
 8005740:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005744:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	7d1b      	ldrb	r3, [r3, #20]
 8005750:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005752:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	7f5b      	ldrb	r3, [r3, #29]
 8005758:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005766:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800576a:	4b15      	ldr	r3, [pc, #84]	; (80057c0 <ETH_SetDMAConfig+0x108>)
 800576c:	4013      	ands	r3, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	68f9      	ldr	r1, [r7, #12]
 8005774:	430b      	orrs	r3, r1
 8005776:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800577a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	7f1b      	ldrb	r3, [r3, #28]
 8005782:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005794:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005798:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800579c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	68f9      	ldr	r1, [r7, #12]
 80057a6:	430b      	orrs	r3, r1
 80057a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80057ac:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80057b0:	bf00      	nop
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	fffec000 	.word	0xfffec000
 80057c0:	ffc0efef 	.word	0xffc0efef

080057c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b0a4      	sub	sp, #144	; 0x90
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80057cc:	2301      	movs	r3, #1
 80057ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80057d2:	2300      	movs	r3, #0
 80057d4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80057dc:	2300      	movs	r3, #0
 80057de:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80057e8:	2301      	movs	r3, #1
 80057ea:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80057f4:	2300      	movs	r3, #0
 80057f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005804:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005806:	2300      	movs	r3, #0
 8005808:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800580c:	2300      	movs	r3, #0
 800580e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005810:	2300      	movs	r3, #0
 8005812:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005816:	2300      	movs	r3, #0
 8005818:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800581c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005820:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005822:	2300      	movs	r3, #0
 8005824:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005828:	2300      	movs	r3, #0
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800582c:	2301      	movs	r3, #1
 800582e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005832:	2300      	movs	r3, #0
 8005834:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005838:	2300      	movs	r3, #0
 800583a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800583e:	2300      	movs	r3, #0
 8005840:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8005842:	2300      	movs	r3, #0
 8005844:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005846:	2300      	movs	r3, #0
 8005848:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800584a:	2300      	movs	r3, #0
 800584c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005850:	2300      	movs	r3, #0
 8005852:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800585c:	2320      	movs	r3, #32
 800585e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005862:	2301      	movs	r3, #1
 8005864:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005868:	2300      	movs	r3, #0
 800586a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800586e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005872:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005874:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005878:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800587a:	2300      	movs	r3, #0
 800587c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005880:	2302      	movs	r3, #2
 8005882:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005886:	2300      	movs	r3, #0
 8005888:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800588c:	2300      	movs	r3, #0
 800588e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005892:	2300      	movs	r3, #0
 8005894:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005898:	2301      	movs	r3, #1
 800589a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800589e:	2300      	movs	r3, #0
 80058a0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80058a2:	2301      	movs	r3, #1
 80058a4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80058a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff fde6 	bl	8005480 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80058b8:	2301      	movs	r3, #1
 80058ba:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80058bc:	2300      	movs	r3, #0
 80058be:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80058c6:	2300      	movs	r3, #0
 80058c8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80058ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80058d2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80058d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80058dc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80058de:	2300      	movs	r3, #0
 80058e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80058e4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80058e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80058ea:	f107 0308 	add.w	r3, r7, #8
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff fee1 	bl	80056b8 <ETH_SetDMAConfig>
}
 80058f6:	bf00      	nop
 80058f8:	3790      	adds	r7, #144	; 0x90
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80058fe:	b480      	push	{r7}
 8005900:	b085      	sub	sp, #20
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	e01d      	b.n	8005948 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68d9      	ldr	r1, [r3, #12]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4613      	mov	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4413      	add	r3, r2
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	440b      	add	r3, r1
 800591c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2200      	movs	r2, #0
 8005928:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2200      	movs	r2, #0
 800592e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2200      	movs	r2, #0
 8005934:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	3206      	adds	r2, #6
 800593e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3301      	adds	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b03      	cmp	r3, #3
 800594c:	d9de      	bls.n	800590c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800595c:	461a      	mov	r2, r3
 800595e:	2303      	movs	r3, #3
 8005960:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005970:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005980:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005984:	bf00      	nop
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005998:	2300      	movs	r3, #0
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	e023      	b.n	80059e6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6919      	ldr	r1, [r3, #16]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4613      	mov	r3, r2
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	4413      	add	r3, r2
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	440b      	add	r3, r1
 80059ae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2200      	movs	r2, #0
 80059ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2200      	movs	r2, #0
 80059c0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2200      	movs	r2, #0
 80059c6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2200      	movs	r2, #0
 80059cc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2200      	movs	r2, #0
 80059d2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	3212      	adds	r2, #18
 80059dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3301      	adds	r3, #1
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d9d8      	bls.n	800599e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a12:	461a      	mov	r2, r3
 8005a14:	2303      	movs	r3, #3
 8005a16:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a26:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a3a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005a3e:	bf00      	nop
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b08d      	sub	sp, #52	; 0x34
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3318      	adds	r3, #24
 8005a5a:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a74:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a8c:	d007      	beq.n	8005a9e <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	3304      	adds	r3, #4
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e25a      	b.n	8005f58 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d044      	beq.n	8005b38 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	0c1b      	lsrs	r3, r3, #16
 8005ab4:	041b      	lsls	r3, r3, #16
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005aba:	431a      	orrs	r2, r3
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005ada:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d027      	beq.n	8005b38 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	041b      	lsls	r3, r3, #16
 8005af4:	431a      	orrs	r2, r3
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b12:	431a      	orrs	r2, r3
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005b26:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005b36:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d010      	beq.n	8005b66 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005b4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	6992      	ldr	r2, [r2, #24]
 8005b54:	431a      	orrs	r2, r3
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d105      	bne.n	8005b7e <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d036      	beq.n	8005bec <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005b8a:	f3bf 8f5f 	dmb	sy
}
 8005b8e:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d902      	bls.n	8005bae <ETH_Prepare_Tx_Descriptors+0x164>
 8005ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005baa:	3b04      	subs	r3, #4
 8005bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb6:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	3301      	adds	r3, #1
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bca:	d10f      	bne.n	8005bec <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8005bd6:	f3bf 8f5f 	dmb	sy
}
 8005bda:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8005be8:	2302      	movs	r3, #2
 8005bea:	e1b5      	b.n	8005f58 <ETH_Prepare_Tx_Descriptors+0x50e>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	3301      	adds	r3, #1
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005c04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	6852      	ldr	r2, [r2, #4]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d014      	beq.n	8005c44 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	461a      	mov	r2, r3
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005c32:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	6852      	ldr	r2, [r2, #4]
 8005c3a:	0412      	lsls	r2, r2, #16
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	609a      	str	r2, [r3, #8]
 8005c42:	e00a      	b.n	8005c5a <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	2200      	movs	r2, #0
 8005c48:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005c52:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005c56:	6a3a      	ldr	r2, [r7, #32]
 8005c58:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0310 	and.w	r3, r3, #16
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d019      	beq.n	8005c9a <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	04db      	lsls	r3, r3, #19
 8005c74:	431a      	orrs	r2, r3
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	0c9b      	lsrs	r3, r3, #18
 8005c80:	049b      	lsls	r3, r3, #18
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	69d2      	ldr	r2, [r2, #28]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	60da      	str	r2, [r3, #12]
 8005c98:	e028      	b.n	8005cec <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005ca2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	6852      	ldr	r2, [r2, #4]
 8005caa:	431a      	orrs	r2, r3
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d008      	beq.n	8005cce <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d008      	beq.n	8005cec <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d008      	beq.n	8005d0a <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d04:	431a      	orrs	r2, r3
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005d22:	f3bf 8f5f 	dmb	sy
}
 8005d26:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80d9 	beq.w	8005ef4 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005d54:	e0ce      	b.n	8005ef4 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	3301      	adds	r3, #1
 8005d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d902      	bls.n	8005d74 <ETH_Prepare_Tx_Descriptors+0x32a>
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	3b04      	subs	r3, #4
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d7c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d96:	d007      	beq.n	8005da8 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d029      	beq.n	8005dfc <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005db6:	2300      	movs	r3, #0
 8005db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dba:	e019      	b.n	8005df0 <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8005dbc:	f3bf 8f5f 	dmb	sy
}
 8005dc0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d902      	bls.n	8005de0 <ETH_Prepare_Tx_Descriptors+0x396>
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	3b04      	subs	r3, #4
 8005dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	3301      	adds	r3, #1
 8005dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d3e1      	bcc.n	8005dbc <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e0ad      	b.n	8005f58 <ETH_Prepare_Tx_Descriptors+0x50e>
    }

    descnbr += 1U;
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	3301      	adds	r3, #1
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005e1a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	6852      	ldr	r2, [r2, #4]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d014      	beq.n	8005e5a <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005e48:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	6852      	ldr	r2, [r2, #4]
 8005e50:	0412      	lsls	r2, r2, #16
 8005e52:	431a      	orrs	r2, r3
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	609a      	str	r2, [r3, #8]
 8005e58:	e00a      	b.n	8005e70 <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f023 537f 	bic.w	r3, r3, #1069547520	; 0x3fc00000
 8005e68:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005e6c:	6a3a      	ldr	r2, [r7, #32]
 8005e6e:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00f      	beq.n	8005e9c <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	0c9b      	lsrs	r3, r3, #18
 8005e82:	049b      	lsls	r3, r3, #18
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	69d2      	ldr	r2, [r2, #28]
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	60da      	str	r2, [r3, #12]
 8005e9a:	e019      	b.n	8005ed0 <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005ea4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	6852      	ldr	r2, [r2, #4]
 8005eac:	431a      	orrs	r2, r3
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d008      	beq.n	8005ed0 <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005ed6:	f3bf 8f5f 	dmb	sy
}
 8005eda:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f47f af2c 	bne.w	8005d56 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d006      	beq.n	8005f12 <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	609a      	str	r2, [r3, #8]
 8005f10:	e005      	b.n	8005f1e <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f2e:	6979      	ldr	r1, [r7, #20]
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	3304      	adds	r3, #4
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f3e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f40:	b672      	cpsid	i
}
 8005f42:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005f52:	b662      	cpsie	i
}
 8005f54:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3734      	adds	r7, #52	; 0x34
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e147      	b.n	8006206 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fd f836 	bl	8002ffc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0210 	bic.w	r2, r2, #16
 8005f9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fa0:	f7fe f8a2 	bl	80040e8 <HAL_GetTick>
 8005fa4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005fa6:	e012      	b.n	8005fce <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005fa8:	f7fe f89e 	bl	80040e8 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b0a      	cmp	r3, #10
 8005fb4:	d90b      	bls.n	8005fce <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fba:	f043 0201 	orr.w	r2, r3, #1
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e11b      	b.n	8006206 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d0e5      	beq.n	8005fa8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0201 	orr.w	r2, r2, #1
 8005fea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fec:	f7fe f87c 	bl	80040e8 <HAL_GetTick>
 8005ff0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005ff2:	e012      	b.n	800601a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005ff4:	f7fe f878 	bl	80040e8 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b0a      	cmp	r3, #10
 8006000:	d90b      	bls.n	800601a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006006:	f043 0201 	orr.w	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2203      	movs	r2, #3
 8006012:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e0f5      	b.n	8006206 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0e5      	beq.n	8005ff4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699a      	ldr	r2, [r3, #24]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0202 	orr.w	r2, r2, #2
 8006036:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a74      	ldr	r2, [pc, #464]	; (8006210 <HAL_FDCAN_Init+0x2ac>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d103      	bne.n	800604a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006042:	4a74      	ldr	r2, [pc, #464]	; (8006214 <HAL_FDCAN_Init+0x2b0>)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	7c1b      	ldrb	r3, [r3, #16]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d108      	bne.n	8006064 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699a      	ldr	r2, [r3, #24]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006060:	619a      	str	r2, [r3, #24]
 8006062:	e007      	b.n	8006074 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699a      	ldr	r2, [r3, #24]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006072:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	7c5b      	ldrb	r3, [r3, #17]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d108      	bne.n	800608e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800608a:	619a      	str	r2, [r3, #24]
 800608c:	e007      	b.n	800609e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	699a      	ldr	r2, [r3, #24]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800609c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	7c9b      	ldrb	r3, [r3, #18]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d108      	bne.n	80060b8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699a      	ldr	r2, [r3, #24]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060b4:	619a      	str	r2, [r3, #24]
 80060b6:	e007      	b.n	80060c8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060c6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699a      	ldr	r2, [r3, #24]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80060ec:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0210 	bic.w	r2, r2, #16
 80060fc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d108      	bne.n	8006118 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	699a      	ldr	r2, [r3, #24]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f042 0204 	orr.w	r2, r2, #4
 8006114:	619a      	str	r2, [r3, #24]
 8006116:	e02c      	b.n	8006172 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d028      	beq.n	8006172 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	2b02      	cmp	r3, #2
 8006126:	d01c      	beq.n	8006162 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006136:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691a      	ldr	r2, [r3, #16]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0210 	orr.w	r2, r2, #16
 8006146:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	2b03      	cmp	r3, #3
 800614e:	d110      	bne.n	8006172 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0220 	orr.w	r2, r2, #32
 800615e:	619a      	str	r2, [r3, #24]
 8006160:	e007      	b.n	8006172 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	699a      	ldr	r2, [r3, #24]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f042 0220 	orr.w	r2, r2, #32
 8006170:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	3b01      	subs	r3, #1
 8006178:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	3b01      	subs	r3, #1
 8006180:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006182:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800618a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	3b01      	subs	r3, #1
 8006194:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800619a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800619c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a6:	d115      	bne.n	80061d4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ac:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	3b01      	subs	r3, #1
 80061b4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061b6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	3b01      	subs	r3, #1
 80061be:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80061c0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	3b01      	subs	r3, #1
 80061ca:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80061d0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80061d2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fdac 	bl	8006d48 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	4000a400 	.word	0x4000a400
 8006214:	4000a500 	.word	0x4000a500

08006218 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006228:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800622a:	7dfb      	ldrb	r3, [r7, #23]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d002      	beq.n	8006236 <HAL_FDCAN_ConfigFilter+0x1e>
 8006230:	7dfb      	ldrb	r3, [r7, #23]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d13d      	bne.n	80062b2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d119      	bne.n	8006272 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800624a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8006252:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	e01d      	b.n	80062ae <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	075a      	lsls	r2, r3, #29
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	079a      	lsls	r2, r3, #30
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	4413      	add	r3, r2
 800629a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	3304      	adds	r3, #4
 80062a6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	e006      	b.n	80062c0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b6:	f043 0202 	orr.w	r2, r3, #2
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
  }
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	371c      	adds	r7, #28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d116      	bne.n	8006314 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062ee:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	011a      	lsls	r2, r3, #4
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	431a      	orrs	r2, r3
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	431a      	orrs	r2, r3
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	431a      	orrs	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	e006      	b.n	8006322 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006318:	f043 0204 	orr.w	r2, r3, #4
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
  }
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b01      	cmp	r3, #1
 8006344:	d108      	bne.n	8006358 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	0219      	lsls	r1, r3, #8
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	430a      	orrs	r2, r1
 8006352:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	e006      	b.n	8006366 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800635c:	f043 0204 	orr.w	r2, r3, #4
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
  }
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8006372:	b480      	push	{r7}
 8006374:	b083      	sub	sp, #12
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b01      	cmp	r3, #1
 8006384:	d109      	bne.n	800639a <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006394:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	e006      	b.n	80063a8 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800639e:	f043 0204 	orr.w	r2, r3, #4
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
  }
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d110      	bne.n	80063ea <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699a      	ldr	r2, [r3, #24]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0201 	bic.w	r2, r2, #1
 80063de:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e006      	b.n	80063f8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ee:	f043 0204 	orr.w	r2, r3, #4
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
  }
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d156      	bne.n	80064ca <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699a      	ldr	r2, [r3, #24]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800642c:	e011      	b.n	8006452 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2b0a      	cmp	r3, #10
 8006432:	d90b      	bls.n	800644c <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006438:	f043 0201 	orr.w	r2, r3, #1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2203      	movs	r2, #3
 8006444:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e045      	b.n	80064d8 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3301      	adds	r3, #1
 8006450:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	d0e6      	beq.n	800642e <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699a      	ldr	r2, [r3, #24]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0210 	bic.w	r2, r2, #16
 8006472:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006474:	e011      	b.n	800649a <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b0a      	cmp	r3, #10
 800647a:	d90b      	bls.n	8006494 <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006480:	f043 0201 	orr.w	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2203      	movs	r2, #3
 800648c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e021      	b.n	80064d8 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3301      	adds	r3, #1
 8006498:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d0e6      	beq.n	8006476 <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699a      	ldr	r2, [r3, #24]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0202 	orr.w	r2, r2, #2
 80064b6:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e006      	b.n	80064d8 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ce:	f043 0208 	orr.w	r2, r3, #8
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
  }
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d12c      	bne.n	8006556 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d007      	beq.n	800651c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006510:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e023      	b.n	8006564 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006524:	0c1b      	lsrs	r3, r3, #16
 8006526:	f003 0303 	and.w	r3, r3, #3
 800652a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	68b9      	ldr	r1, [r7, #8]
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 fc6a 	bl	8006e0c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2101      	movs	r1, #1
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	fa01 f202 	lsl.w	r2, r1, r2
 8006544:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006548:	2201      	movs	r2, #1
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	409a      	lsls	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	e006      	b.n	8006564 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655a:	f043 0208 	orr.w	r2, r3, #8
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
  }
}
 8006564:	4618      	mov	r0, r3
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800656c:	b480      	push	{r7}
 800656e:	b08b      	sub	sp, #44	; 0x2c
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800657a:	2300      	movs	r3, #0
 800657c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006584:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006586:	7efb      	ldrb	r3, [r7, #27]
 8006588:	2b02      	cmp	r3, #2
 800658a:	f040 80e8 	bne.w	800675e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b40      	cmp	r3, #64	; 0x40
 8006592:	d137      	bne.n	8006604 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d107      	bne.n	80065b4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e0db      	b.n	800676c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065bc:	0e1b      	lsrs	r3, r3, #24
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d10a      	bne.n	80065dc <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065ce:	0a5b      	lsrs	r3, r3, #9
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80065d8:	2301      	movs	r3, #1
 80065da:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e4:	0a1b      	lsrs	r3, r3, #8
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80065f4:	69fa      	ldr	r2, [r7, #28]
 80065f6:	4613      	mov	r3, r2
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	4413      	add	r3, r2
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	440b      	add	r3, r1
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
 8006602:	e036      	b.n	8006672 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800660c:	f003 030f 	and.w	r3, r3, #15
 8006610:	2b00      	cmp	r3, #0
 8006612:	d107      	bne.n	8006624 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006618:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e0a3      	b.n	800676c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800662c:	0e1b      	lsrs	r3, r3, #24
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b01      	cmp	r3, #1
 8006634:	d10a      	bne.n	800664c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800663e:	0a1b      	lsrs	r3, r3, #8
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006648:	2301      	movs	r3, #1
 800664a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006654:	0a1b      	lsrs	r3, r3, #8
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	69fa      	ldr	r2, [r7, #28]
 800665c:	4413      	add	r3, r2
 800665e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006664:	69fa      	ldr	r2, [r7, #28]
 8006666:	4613      	mov	r3, r2
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	4413      	add	r3, r2
 800666c:	00db      	lsls	r3, r3, #3
 800666e:	440b      	add	r3, r1
 8006670:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d107      	bne.n	8006696 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	0c9b      	lsrs	r3, r3, #18
 800668c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	e005      	b.n	80066a2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	3304      	adds	r3, #4
 80066be:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	0c1b      	lsrs	r3, r3, #16
 80066d0:	f003 020f 	and.w	r2, r3, #15
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	0e1b      	lsrs	r3, r3, #24
 80066f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	0fda      	lsrs	r2, r3, #31
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	3304      	adds	r3, #4
 800670c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006712:	2300      	movs	r3, #0
 8006714:	623b      	str	r3, [r7, #32]
 8006716:	e00a      	b.n	800672e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	441a      	add	r2, r3
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	440b      	add	r3, r1
 8006724:	7812      	ldrb	r2, [r2, #0]
 8006726:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	3301      	adds	r3, #1
 800672c:	623b      	str	r3, [r7, #32]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	4a11      	ldr	r2, [pc, #68]	; (8006778 <HAL_FDCAN_GetRxMessage+0x20c>)
 8006734:	5cd3      	ldrb	r3, [r2, r3]
 8006736:	461a      	mov	r2, r3
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	4293      	cmp	r3, r2
 800673c:	d3ec      	bcc.n	8006718 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	d105      	bne.n	8006750 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69fa      	ldr	r2, [r7, #28]
 800674a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800674e:	e004      	b.n	800675a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	69fa      	ldr	r2, [r7, #28]
 8006756:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	e006      	b.n	800676c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006762:	f043 0208 	orr.w	r2, r3, #8
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
  }
}
 800676c:	4618      	mov	r0, r3
 800676e:	372c      	adds	r7, #44	; 0x2c
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	08029980 	.word	0x08029980

0800677c <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678c:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f003 0207 	and.w	r2, r3, #7
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	0a1b      	lsrs	r3, r3, #8
 800679c:	f003 0207 	and.w	r2, r3, #7
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f003 0218 	and.w	r2, r3, #24
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	f003 0201 	and.w	r2, r3, #1
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	099b      	lsrs	r3, r3, #6
 80067be:	f003 0201 	and.w	r2, r3, #1
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	09db      	lsrs	r3, r3, #7
 80067ca:	f003 0201 	and.w	r2, r3, #1
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	0adb      	lsrs	r3, r3, #11
 80067d6:	f003 0201 	and.w	r2, r3, #1
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	0b1b      	lsrs	r3, r3, #12
 80067e2:	f003 0201 	and.w	r2, r3, #1
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	0b5b      	lsrs	r3, r3, #13
 80067ee:	f003 0201 	and.w	r2, r3, #1
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	0b9b      	lsrs	r3, r3, #14
 80067fa:	f003 0201 	and.w	r2, r3, #1
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	625a      	str	r2, [r3, #36]	; 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	0c1b      	lsrs	r3, r3, #16
 8006806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Return function status */
  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_FDCAN_GetErrorCounters>:
  * @param  ErrorCounters pointer to an FDCAN_ErrorCountersTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetErrorCounters(const FDCAN_HandleTypeDef *hfdcan,
                                             FDCAN_ErrorCountersTypeDef *ErrorCounters)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t CountersReg;

  /* Read the error counters register */
  CountersReg = READ_REG(hfdcan->Instance->ECR);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682c:	60fb      	str	r3, [r7, #12]

  /* Fill the error counters structure */
  ErrorCounters->TxErrorCnt = ((CountersReg & FDCAN_ECR_TEC) >> FDCAN_ECR_TEC_Pos);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	b2da      	uxtb	r2, r3
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	601a      	str	r2, [r3, #0]
  ErrorCounters->RxErrorCnt = ((CountersReg & FDCAN_ECR_REC) >> FDCAN_ECR_REC_Pos);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	0a1b      	lsrs	r3, r3, #8
 800683a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	605a      	str	r2, [r3, #4]
  ErrorCounters->RxErrorPassive = ((CountersReg & FDCAN_ECR_RP) >> FDCAN_ECR_RP_Pos);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	0bdb      	lsrs	r3, r3, #15
 8006846:	f003 0201 	and.w	r2, r3, #1
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	609a      	str	r2, [r3, #8]
  ErrorCounters->ErrorLogging = ((CountersReg & FDCAN_ECR_CEL) >> FDCAN_ECR_CEL_Pos);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	0c1b      	lsrs	r3, r3, #16
 8006852:	b2da      	uxtb	r2, r3
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800687c:	68fb      	ldr	r3, [r7, #12]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800688a:	b480      	push	{r7}
 800688c:	b087      	sub	sp, #28
 800688e:	af00      	add	r7, sp, #0
 8006890:	60f8      	str	r0, [r7, #12]
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800689c:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800689e:	7dfb      	ldrb	r3, [r7, #23]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d003      	beq.n	80068ac <HAL_FDCAN_ActivateNotification+0x22>
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	f040 80c8 	bne.w	8006a3c <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b2:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d004      	beq.n	80068c8 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d03b      	beq.n	8006940 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d004      	beq.n	80068dc <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d031      	beq.n	8006940 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d004      	beq.n	80068f0 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d027      	beq.n	8006940 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d004      	beq.n	8006904 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f003 0308 	and.w	r3, r3, #8
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01d      	beq.n	8006940 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800690a:	2b00      	cmp	r3, #0
 800690c:	d004      	beq.n	8006918 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	2b00      	cmp	r3, #0
 8006916:	d013      	beq.n	8006940 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800691e:	2b00      	cmp	r3, #0
 8006920:	d004      	beq.n	800692c <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f003 0320 	and.w	r3, r3, #32
 8006928:	2b00      	cmp	r3, #0
 800692a:	d009      	beq.n	8006940 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00c      	beq.n	8006950 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693c:	2b00      	cmp	r3, #0
 800693e:	d107      	bne.n	8006950 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0201 	orr.w	r2, r2, #1
 800694e:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	2b00      	cmp	r3, #0
 8006958:	d004      	beq.n	8006964 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b00      	cmp	r3, #0
 8006962:	d13b      	bne.n	80069dc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800696a:	2b00      	cmp	r3, #0
 800696c:	d004      	beq.n	8006978 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d131      	bne.n	80069dc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800697e:	2b00      	cmp	r3, #0
 8006980:	d004      	beq.n	800698c <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d127      	bne.n	80069dc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006992:	2b00      	cmp	r3, #0
 8006994:	d004      	beq.n	80069a0 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f003 0308 	and.w	r3, r3, #8
 800699c:	2b00      	cmp	r3, #0
 800699e:	d11d      	bne.n	80069dc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d004      	beq.n	80069b4 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f003 0310 	and.w	r3, r3, #16
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d113      	bne.n	80069dc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d004      	beq.n	80069c8 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d109      	bne.n	80069dc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00c      	beq.n	80069ec <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d007      	beq.n	80069ec <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0202 	orr.w	r2, r2, #2
 80069ea:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d009      	beq.n	8006a0a <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d009      	beq.n	8006a28 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	e006      	b.n	8006a4a <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a40:	f043 0202 	orr.w	r2, r3, #2
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
  }
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b08c      	sub	sp, #48	; 0x30
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a64:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a72:	4013      	ands	r3, r2
 8006a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a7c:	f003 0307 	and.w	r3, r3, #7
 8006a80:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aac:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8006ab0:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab8:	6a3a      	ldr	r2, [r7, #32]
 8006aba:	4013      	ands	r3, r2
 8006abc:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006ac8:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad0:	69fa      	ldr	r2, [r7, #28]
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006adc:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae4:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00b      	beq.n	8006b08 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d006      	beq.n	8006b08 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2240      	movs	r2, #64	; 0x40
 8006b00:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f916 	bl	8006d34 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d019      	beq.n	8006b46 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d014      	beq.n	8006b46 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006b24:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4013      	ands	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b3c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006b3e:	6939      	ldr	r1, [r7, #16]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f8d8 	bl	8006cf6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d007      	beq.n	8006b5c <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b52:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006b54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f8a2 	bl	8006ca0 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d007      	beq.n	8006b72 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b68:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006b6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7fc fa1d 	bl	8002fac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d007      	beq.n	8006b88 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b7e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006b80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f897 	bl	8006cb6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00c      	beq.n	8006bac <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d007      	beq.n	8006bac <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ba4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f890 	bl	8006ccc <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d018      	beq.n	8006be8 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d013      	beq.n	8006be8 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006bc8:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2280      	movs	r2, #128	; 0x80
 8006bde:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006be0:	68f9      	ldr	r1, [r7, #12]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f87c 	bl	8006ce0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00c      	beq.n	8006c0c <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d007      	beq.n	8006c0c <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c04:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f880 	bl	8006d0c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00c      	beq.n	8006c30 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d007      	beq.n	8006c30 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006c28:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f878 	bl	8006d20 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00f      	beq.n	8006c5a <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00a      	beq.n	8006c5a <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c4c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c52:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	69fa      	ldr	r2, [r7, #28]
 8006c66:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006c68:	69f9      	ldr	r1, [r7, #28]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7fc f956 	bl	8002f1c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d009      	beq.n	8006c8a <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6a3a      	ldr	r2, [r7, #32]
 8006c7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7fc f952 	bl	8002f3c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006c98:	bf00      	nop
 8006c9a:	3730      	adds	r7, #48	; 0x30
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006caa:	bf00      	nop
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006d50:	4b2c      	ldr	r3, [pc, #176]	; (8006e04 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8006d52:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a2b      	ldr	r2, [pc, #172]	; (8006e08 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d103      	bne.n	8006d66 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006d64:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d74:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7c:	041a      	lsls	r2, r3, #16
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d9a:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da2:	061a      	lsls	r2, r3, #24
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	e005      	b.n	8006de8 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3304      	adds	r3, #4
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d3f3      	bcc.n	8006ddc <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	4000ac00 	.word	0x4000ac00
 8006e08:	4000a800 	.word	0x4000a800

08006e0c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b089      	sub	sp, #36	; 0x24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10a      	bne.n	8006e38 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006e2a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006e32:	4313      	orrs	r3, r2
 8006e34:	61fb      	str	r3, [r7, #28]
 8006e36:	e00a      	b.n	8006e4e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006e40:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006e46:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006e48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e4c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006e58:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006e5e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006e64:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	4613      	mov	r3, r2
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	4413      	add	r3, r2
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	440b      	add	r3, r1
 8006e80:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	69fa      	ldr	r2, [r7, #28]
 8006e86:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	3304      	adds	r3, #4
 8006e98:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	e020      	b.n	8006ee2 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	3303      	adds	r3, #3
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	3302      	adds	r3, #2
 8006eb0:	6879      	ldr	r1, [r7, #4]
 8006eb2:	440b      	add	r3, r1
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006eb8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	440b      	add	r3, r1
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006ec6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006ec8:	6879      	ldr	r1, [r7, #4]
 8006eca:	697a      	ldr	r2, [r7, #20]
 8006ecc:	440a      	add	r2, r1
 8006ece:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006ed0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	617b      	str	r3, [r7, #20]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	4a06      	ldr	r2, [pc, #24]	; (8006f00 <FDCAN_CopyMessageToRAM+0xf4>)
 8006ee8:	5cd3      	ldrb	r3, [r2, r3]
 8006eea:	461a      	mov	r2, r3
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d3d6      	bcc.n	8006ea0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8006ef2:	bf00      	nop
 8006ef4:	bf00      	nop
 8006ef6:	3724      	adds	r7, #36	; 0x24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	08029980 	.word	0x08029980

08006f04 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b088      	sub	sp, #32
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006f10:	4b32      	ldr	r3, [pc, #200]	; (8006fdc <HAL_FLASH_Program+0xd8>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d101      	bne.n	8006f1c <HAL_FLASH_Program+0x18>
 8006f18:	2302      	movs	r3, #2
 8006f1a:	e05a      	b.n	8006fd2 <HAL_FLASH_Program+0xce>
 8006f1c:	4b2f      	ldr	r3, [pc, #188]	; (8006fdc <HAL_FLASH_Program+0xd8>)
 8006f1e:	2201      	movs	r2, #1
 8006f20:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006f22:	4b2e      	ldr	r3, [pc, #184]	; (8006fdc <HAL_FLASH_Program+0xd8>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006f28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f2c:	f000 f8a4 	bl	8007078 <FLASH_WaitForLastOperation>
 8006f30:	4603      	mov	r3, r0
 8006f32:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 8006f34:	7ffb      	ldrb	r3, [r7, #31]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d147      	bne.n	8006fca <HAL_FLASH_Program+0xc6>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 8006f3a:	4a28      	ldr	r2, [pc, #160]	; (8006fdc <HAL_FLASH_Program+0xd8>)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8006f40:	4b27      	ldr	r3, [pc, #156]	; (8006fe0 <HAL_FLASH_Program+0xdc>)
 8006f42:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d104      	bne.n	8006f58 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	68b8      	ldr	r0, [r7, #8]
 8006f52:	f000 f8df 	bl	8007114 <FLASH_Program_QuadWord>
 8006f56:	e01b      	b.n	8006f90 <HAL_FLASH_Program+0x8c>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4a22      	ldr	r2, [pc, #136]	; (8006fe4 <HAL_FLASH_Program+0xe0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d003      	beq.n	8006f68 <HAL_FLASH_Program+0x64>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4a21      	ldr	r2, [pc, #132]	; (8006fe8 <HAL_FLASH_Program+0xe4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d104      	bne.n	8006f72 <HAL_FLASH_Program+0x6e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	68b8      	ldr	r0, [r7, #8]
 8006f6c:	f000 f90e 	bl	800718c <FLASH_Program_QuadWord_OBK>
 8006f70:	e00e      	b.n	8006f90 <HAL_FLASH_Program+0x8c>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f78:	4a1c      	ldr	r2, [pc, #112]	; (8006fec <HAL_FLASH_Program+0xe8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d104      	bne.n	8006f88 <HAL_FLASH_Program+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8006f7e:	6879      	ldr	r1, [r7, #4]
 8006f80:	68b8      	ldr	r0, [r7, #8]
 8006f82:	f000 f94f 	bl	8007224 <FLASH_Program_HalfWord>
 8006f86:	e003      	b.n	8006f90 <HAL_FLASH_Program+0x8c>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 8006f88:	6879      	ldr	r1, [r7, #4]
 8006f8a:	68b8      	ldr	r0, [r7, #8]
 8006f8c:	f000 f94a 	bl	8007224 <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f94:	f000 f870 	bl	8007078 <FLASH_WaitForLastOperation>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f023 4330 	bic.w	r3, r3, #2952790016	; 0xb0000000
 8006fa6:	f023 0304 	bic.w	r3, r3, #4
 8006faa:	43db      	mvns	r3, r3
 8006fac:	401a      	ands	r2, r3
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4a0c      	ldr	r2, [pc, #48]	; (8006fe8 <HAL_FLASH_Program+0xe4>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d107      	bne.n	8006fca <HAL_FLASH_Program+0xc6>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8006fba:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <HAL_FLASH_Program+0xec>)
 8006fbc:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f023 0204 	bic.w	r2, r3, #4
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006fca:	4b04      	ldr	r3, [pc, #16]	; (8006fdc <HAL_FLASH_Program+0xd8>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8006fd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3720      	adds	r7, #32
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20050048 	.word	0x20050048
 8006fe0:	40022028 	.word	0x40022028
 8006fe4:	10000002 	.word	0x10000002
 8006fe8:	10000006 	.word	0x10000006
 8006fec:	40000002 	.word	0x40000002
 8006ff0:	40022040 	.word	0x40022040

08006ff4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8006ffe:	4b0d      	ldr	r3, [pc, #52]	; (8007034 <HAL_FLASH_Unlock+0x40>)
 8007000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00d      	beq.n	8007026 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 800700a:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <HAL_FLASH_Unlock+0x40>)
 800700c:	4a0a      	ldr	r2, [pc, #40]	; (8007038 <HAL_FLASH_Unlock+0x44>)
 800700e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8007010:	4b08      	ldr	r3, [pc, #32]	; (8007034 <HAL_FLASH_Unlock+0x40>)
 8007012:	4a0a      	ldr	r2, [pc, #40]	; (800703c <HAL_FLASH_Unlock+0x48>)
 8007014:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8007016:	4b07      	ldr	r3, [pc, #28]	; (8007034 <HAL_FLASH_Unlock+0x40>)
 8007018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8007026:	79fb      	ldrb	r3, [r7, #7]
}
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	40022000 	.word	0x40022000
 8007038:	45670123 	.word	0x45670123
 800703c:	cdef89ab 	.word	0xcdef89ab

08007040 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 800704a:	4b0a      	ldr	r3, [pc, #40]	; (8007074 <HAL_FLASH_Lock+0x34>)
 800704c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704e:	4a09      	ldr	r2, [pc, #36]	; (8007074 <HAL_FLASH_Lock+0x34>)
 8007050:	f043 0301 	orr.w	r3, r3, #1
 8007054:	6293      	str	r3, [r2, #40]	; 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 8007056:	4b07      	ldr	r3, [pc, #28]	; (8007074 <HAL_FLASH_Lock+0x34>)
 8007058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8007066:	79fb      	ldrb	r3, [r7, #7]
}
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	40022000 	.word	0x40022000

08007078 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 8007080:	f7fd f832 	bl	80040e8 <HAL_GetTick>
 8007084:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8007086:	4b20      	ldr	r3, [pc, #128]	; (8007108 <FLASH_WaitForLastOperation+0x90>)
 8007088:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 800708a:	e010      	b.n	80070ae <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007092:	d00c      	beq.n	80070ae <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007094:	f7fd f828 	bl	80040e8 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d302      	bcc.n	80070aa <FLASH_WaitForLastOperation+0x32>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e027      	b.n	80070fe <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 030b 	and.w	r3, r3, #11
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e8      	bne.n	800708c <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 80070ba:	4b14      	ldr	r3, [pc, #80]	; (800710c <FLASH_WaitForLastOperation+0x94>)
 80070bc:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
 80070c6:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00c      	beq.n	80070e8 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80070ce:	4b10      	ldr	r3, [pc, #64]	; (8007110 <FLASH_WaitForLastOperation+0x98>)
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	4a0e      	ldr	r2, [pc, #56]	; (8007110 <FLASH_WaitForLastOperation+0x98>)
 80070d8:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	f403 027e 	and.w	r2, r3, #16646144	; 0xfe0000
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e00a      	b.n	80070fe <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80070fa:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	40022020 	.word	0x40022020
 800710c:	40022030 	.word	0x40022030
 8007110:	20050048 	.word	0x20050048

08007114 <FLASH_Program_QuadWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8007114:	b480      	push	{r7}
 8007116:	b08b      	sub	sp, #44	; 0x2c
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 800711e:	2304      	movs	r3, #4
 8007120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800712c:	4b16      	ldr	r3, [pc, #88]	; (8007188 <FLASH_Program_QuadWord+0x74>)
 800712e:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f043 0202 	orr.w	r2, r3, #2
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800713c:	f3ef 8310 	mrs	r3, PRIMASK
 8007140:	613b      	str	r3, [r7, #16]
  return(result);
 8007142:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8007144:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007146:	b672      	cpsid	i
}
 8007148:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	3304      	adds	r3, #4
 8007156:	623b      	str	r3, [r7, #32]
    src_addr++;
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	3304      	adds	r3, #4
 800715c:	61fb      	str	r3, [r7, #28]
    index--;
 800715e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007162:	3b01      	subs	r3, #1
 8007164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 8007168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1ec      	bne.n	800714a <FLASH_Program_QuadWord+0x36>
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f383 8810 	msr	PRIMASK, r3
}
 800717a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800717c:	bf00      	nop
 800717e:	372c      	adds	r7, #44	; 0x2c
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	40022028 	.word	0x40022028

0800718c <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 800718c:	b480      	push	{r7}
 800718e:	b08b      	sub	sp, #44	; 0x2c
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8007196:	2304      	movs	r3, #4
 8007198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80071a4:	4b1c      	ldr	r3, [pc, #112]	; (8007218 <FLASH_Program_QuadWord_OBK+0x8c>)
 80071a6:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 80071a8:	4b1c      	ldr	r3, [pc, #112]	; (800721c <FLASH_Program_QuadWord_OBK+0x90>)
 80071aa:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f043 0202 	orr.w	r2, r3, #2
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	4b18      	ldr	r3, [pc, #96]	; (8007220 <FLASH_Program_QuadWord_OBK+0x94>)
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	431a      	orrs	r2, r3
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80071ca:	f3ef 8310 	mrs	r3, PRIMASK
 80071ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80071d0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80071d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80071d4:	b672      	cpsid	i
}
 80071d6:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	3304      	adds	r3, #4
 80071e4:	623b      	str	r3, [r7, #32]
    src_addr++;
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	3304      	adds	r3, #4
 80071ea:	61fb      	str	r3, [r7, #28]
    index--;
 80071ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071f0:	3b01      	subs	r3, #1
 80071f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 80071f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1ec      	bne.n	80071d8 <FLASH_Program_QuadWord_OBK+0x4c>
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f383 8810 	msr	PRIMASK, r3
}
 8007208:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800720a:	bf00      	nop
 800720c:	372c      	adds	r7, #44	; 0x2c
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40022028 	.word	0x40022028
 800721c:	40022040 	.word	0x40022040
 8007220:	20050048 	.word	0x20050048

08007224 <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 800722e:	4b09      	ldr	r3, [pc, #36]	; (8007254 <FLASH_Program_HalfWord+0x30>)
 8007230:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f043 0202 	orr.w	r2, r3, #2
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	8812      	ldrh	r2, [r2, #0]
 8007244:	b292      	uxth	r2, r2
 8007246:	801a      	strh	r2, [r3, #0]
}
 8007248:	bf00      	nop
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	40022028 	.word	0x40022028

08007258 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007262:	4b3a      	ldr	r3, [pc, #232]	; (800734c <HAL_FLASHEx_Erase+0xf4>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d101      	bne.n	800726e <HAL_FLASHEx_Erase+0x16>
 800726a:	2302      	movs	r3, #2
 800726c:	e06a      	b.n	8007344 <HAL_FLASHEx_Erase+0xec>
 800726e:	4b37      	ldr	r3, [pc, #220]	; (800734c <HAL_FLASHEx_Erase+0xf4>)
 8007270:	2201      	movs	r2, #1
 8007272:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007274:	4b35      	ldr	r3, [pc, #212]	; (800734c <HAL_FLASHEx_Erase+0xf4>)
 8007276:	2200      	movs	r2, #0
 8007278:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800727a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800727e:	f7ff fefb 	bl	8007078 <FLASH_WaitForLastOperation>
 8007282:	4603      	mov	r3, r0
 8007284:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8007286:	7dfb      	ldrb	r3, [r7, #23]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d157      	bne.n	800733c <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a2e      	ldr	r2, [pc, #184]	; (800734c <HAL_FLASHEx_Erase+0xf4>)
 8007292:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8007294:	4b2e      	ldr	r3, [pc, #184]	; (8007350 <HAL_FLASHEx_Erase+0xf8>)
 8007296:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072a0:	f248 0208 	movw	r2, #32776	; 0x8008
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d10b      	bne.n	80072c0 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 f853 	bl	8007358 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80072b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072b6:	f7ff fedf 	bl	8007078 <FLASH_WaitForLastOperation>
 80072ba:	4603      	mov	r3, r0
 80072bc:	75fb      	strb	r3, [r7, #23]
 80072be:	e033      	b.n	8007328 <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a23      	ldr	r2, [pc, #140]	; (8007354 <HAL_FLASHEx_Erase+0xfc>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d108      	bne.n	80072dc <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 80072ca:	f000 f8b5 	bl	8007438 <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80072ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072d2:	f7ff fed1 	bl	8007078 <FLASH_WaitForLastOperation>
 80072d6:	4603      	mov	r3, r0
 80072d8:	75fb      	strb	r3, [r7, #23]
 80072da:	e025      	b.n	8007328 <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	f04f 32ff 	mov.w	r2, #4294967295
 80072e2:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	613b      	str	r3, [r7, #16]
 80072ea:	e015      	b.n	8007318 <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	4619      	mov	r1, r3
 80072f2:	6938      	ldr	r0, [r7, #16]
 80072f4:	f000 f868 	bl	80073c8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80072f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072fc:	f7ff febc 	bl	8007078 <FLASH_WaitForLastOperation>
 8007300:	4603      	mov	r3, r0
 8007302:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8007304:	7dfb      	ldrb	r3, [r7, #23]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	601a      	str	r2, [r3, #0]
          break;
 8007310:	e00a      	b.n	8007328 <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	3301      	adds	r3, #1
 8007316:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68da      	ldr	r2, [r3, #12]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	4413      	add	r3, r2
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	429a      	cmp	r2, r3
 8007326:	d3e1      	bcc.n	80072ec <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007334:	43db      	mvns	r3, r3
 8007336:	401a      	ands	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800733c:	4b03      	ldr	r3, [pc, #12]	; (800734c <HAL_FLASHEx_Erase+0xf4>)
 800733e:	2200      	movs	r2, #0
 8007340:	701a      	strb	r2, [r3, #0]

  return status;
 8007342:	7dfb      	ldrb	r3, [r7, #23]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20050048 	.word	0x20050048
 8007350:	40022028 	.word	0x40022028
 8007354:	80000008 	.word	0x80000008

08007358 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8007360:	4b18      	ldr	r3, [pc, #96]	; (80073c4 <FLASH_MassErase+0x6c>)
 8007362:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f003 0303 	and.w	r3, r3, #3
 800736a:	2b03      	cmp	r3, #3
 800736c:	d108      	bne.n	8007380 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007376:	f043 0320 	orr.w	r3, r3, #32
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 800737e:	e01b      	b.n	80073b8 <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	d009      	beq.n	800739e <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007392:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007396:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d007      	beq.n	80073b8 <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073b0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	6013      	str	r3, [r2, #0]
}
 80073b8:	bf00      	nop
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	40022028 	.word	0x40022028

080073c8 <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80073d2:	4b18      	ldr	r3, [pc, #96]	; (8007434 <FLASH_Erase_Sector+0x6c>)
 80073d4:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d011      	beq.n	8007404 <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073e8:	f423 53fe 	bic.w	r3, r3, #8128	; 0x1fc0
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	019b      	lsls	r3, r3, #6
 80073f8:	4313      	orrs	r3, r2
 80073fa:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 8007402:	e010      	b.n	8007426 <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f423 52fe 	bic.w	r2, r3, #8128	; 0x1fc0
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	019b      	lsls	r3, r3, #6
 8007418:	4313      	orrs	r3, r2
 800741a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800741e:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	6013      	str	r3, [r2, #0]
}
 8007426:	bf00      	nop
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	40022028 	.word	0x40022028

08007438 <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 800743e:	4b07      	ldr	r3, [pc, #28]	; (800745c <FLASH_OBKErase+0x24>)
 8007440:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f043 0208 	orr.w	r2, r3, #8
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	601a      	str	r2, [r3, #0]
}
 800744e:	bf00      	nop
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	40022040 	.word	0x40022040

08007460 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800746e:	e136      	b.n	80076de <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	2101      	movs	r1, #1
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	fa01 f303 	lsl.w	r3, r1, r3
 800747c:	4013      	ands	r3, r2
 800747e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 8128 	beq.w	80076d8 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	2b02      	cmp	r3, #2
 800748e:	d003      	beq.n	8007498 <HAL_GPIO_Init+0x38>
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b12      	cmp	r3, #18
 8007496:	d125      	bne.n	80074e4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	08da      	lsrs	r2, r3, #3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3208      	adds	r2, #8
 80074a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	220f      	movs	r2, #15
 80074b0:	fa02 f303 	lsl.w	r3, r2, r3
 80074b4:	43db      	mvns	r3, r3
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	4013      	ands	r3, r2
 80074ba:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	f003 020f 	and.w	r2, r3, #15
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	fa02 f303 	lsl.w	r3, r2, r3
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	08da      	lsrs	r2, r3, #3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3208      	adds	r2, #8
 80074de:	6979      	ldr	r1, [r7, #20]
 80074e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	2203      	movs	r2, #3
 80074f0:	fa02 f303 	lsl.w	r3, r2, r3
 80074f4:	43db      	mvns	r3, r3
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4013      	ands	r3, r2
 80074fa:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f003 0203 	and.w	r2, r3, #3
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	fa02 f303 	lsl.w	r3, r2, r3
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	4313      	orrs	r3, r2
 8007510:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d00b      	beq.n	8007538 <HAL_GPIO_Init+0xd8>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	2b02      	cmp	r3, #2
 8007526:	d007      	beq.n	8007538 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800752c:	2b11      	cmp	r3, #17
 800752e:	d003      	beq.n	8007538 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2b12      	cmp	r3, #18
 8007536:	d130      	bne.n	800759a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	2203      	movs	r2, #3
 8007544:	fa02 f303 	lsl.w	r3, r2, r3
 8007548:	43db      	mvns	r3, r3
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	4013      	ands	r3, r2
 800754e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	68da      	ldr	r2, [r3, #12]
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	fa02 f303 	lsl.w	r3, r2, r3
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	4313      	orrs	r3, r2
 8007560:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800756e:	2201      	movs	r2, #1
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	fa02 f303 	lsl.w	r3, r2, r3
 8007576:	43db      	mvns	r3, r3
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	4013      	ands	r3, r2
 800757c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	091b      	lsrs	r3, r3, #4
 8007584:	f003 0201 	and.w	r2, r3, #1
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	fa02 f303 	lsl.w	r3, r2, r3
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	4313      	orrs	r3, r2
 8007592:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d017      	beq.n	80075d2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	005b      	lsls	r3, r3, #1
 80075ac:	2203      	movs	r2, #3
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	43db      	mvns	r3, r3
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	4013      	ands	r3, r2
 80075b8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	689a      	ldr	r2, [r3, #8]
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	fa02 f303 	lsl.w	r3, r2, r3
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d07c      	beq.n	80076d8 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80075de:	4a47      	ldr	r2, [pc, #284]	; (80076fc <HAL_GPIO_Init+0x29c>)
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	089b      	lsrs	r3, r3, #2
 80075e4:	3318      	adds	r3, #24
 80075e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ea:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f003 0303 	and.w	r3, r3, #3
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	220f      	movs	r2, #15
 80075f6:	fa02 f303 	lsl.w	r3, r2, r3
 80075fa:	43db      	mvns	r3, r3
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	4013      	ands	r3, r2
 8007600:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	0a9a      	lsrs	r2, r3, #10
 8007606:	4b3e      	ldr	r3, [pc, #248]	; (8007700 <HAL_GPIO_Init+0x2a0>)
 8007608:	4013      	ands	r3, r2
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	f002 0203 	and.w	r2, r2, #3
 8007610:	00d2      	lsls	r2, r2, #3
 8007612:	4093      	lsls	r3, r2
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	4313      	orrs	r3, r2
 8007618:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800761a:	4938      	ldr	r1, [pc, #224]	; (80076fc <HAL_GPIO_Init+0x29c>)
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	089b      	lsrs	r3, r3, #2
 8007620:	3318      	adds	r3, #24
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007628:	4b34      	ldr	r3, [pc, #208]	; (80076fc <HAL_GPIO_Init+0x29c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	43db      	mvns	r3, r3
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	4013      	ands	r3, r2
 8007636:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	4313      	orrs	r3, r2
 800764a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800764c:	4a2b      	ldr	r2, [pc, #172]	; (80076fc <HAL_GPIO_Init+0x29c>)
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007652:	4b2a      	ldr	r3, [pc, #168]	; (80076fc <HAL_GPIO_Init+0x29c>)
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	43db      	mvns	r3, r3
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	4013      	ands	r3, r2
 8007660:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4313      	orrs	r3, r2
 8007674:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8007676:	4a21      	ldr	r2, [pc, #132]	; (80076fc <HAL_GPIO_Init+0x29c>)
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800767c:	4b1f      	ldr	r3, [pc, #124]	; (80076fc <HAL_GPIO_Init+0x29c>)
 800767e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007682:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	43db      	mvns	r3, r3
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	4013      	ands	r3, r2
 800768c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4313      	orrs	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80076a2:	4a16      	ldr	r2, [pc, #88]	; (80076fc <HAL_GPIO_Init+0x29c>)
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80076aa:	4b14      	ldr	r3, [pc, #80]	; (80076fc <HAL_GPIO_Init+0x29c>)
 80076ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076b0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	43db      	mvns	r3, r3
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	4013      	ands	r3, r2
 80076ba:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80076d0:	4a0a      	ldr	r2, [pc, #40]	; (80076fc <HAL_GPIO_Init+0x29c>)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	3301      	adds	r3, #1
 80076dc:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	fa22 f303 	lsr.w	r3, r2, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f47f aec1 	bne.w	8007470 <HAL_GPIO_Init+0x10>
  }
}
 80076ee:	bf00      	nop
 80076f0:	bf00      	nop
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	44022000 	.word	0x44022000
 8007700:	002f7f7f 	.word	0x002f7f7f

08007704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	807b      	strh	r3, [r7, #2]
 8007710:	4613      	mov	r3, r2
 8007712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007714:	787b      	ldrb	r3, [r7, #1]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d003      	beq.n	8007722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800771a:	887a      	ldrh	r2, [r7, #2]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007720:	e002      	b.n	8007728 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007722:	887a      	ldrh	r2, [r7, #2]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007746:	887a      	ldrh	r2, [r7, #2]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4013      	ands	r3, r2
 800774c:	041a      	lsls	r2, r3, #16
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	43d9      	mvns	r1, r3
 8007752:	887b      	ldrh	r3, [r7, #2]
 8007754:	400b      	ands	r3, r1
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	619a      	str	r2, [r3, #24]
}
 800775c:	bf00      	nop
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8007772:	4b0f      	ldr	r3, [pc, #60]	; (80077b0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	88fb      	ldrh	r3, [r7, #6]
 8007778:	4013      	ands	r3, r2
 800777a:	2b00      	cmp	r3, #0
 800777c:	d006      	beq.n	800778c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800777e:	4a0c      	ldr	r2, [pc, #48]	; (80077b0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8007780:	88fb      	ldrh	r3, [r7, #6]
 8007782:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	4618      	mov	r0, r3
 8007788:	f7f9 f8be 	bl	8000908 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800778c:	4b08      	ldr	r3, [pc, #32]	; (80077b0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800778e:	691a      	ldr	r2, [r3, #16]
 8007790:	88fb      	ldrh	r3, [r7, #6]
 8007792:	4013      	ands	r3, r2
 8007794:	2b00      	cmp	r3, #0
 8007796:	d006      	beq.n	80077a6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8007798:	4a05      	ldr	r2, [pc, #20]	; (80077b0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800779a:	88fb      	ldrh	r3, [r7, #6]
 800779c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800779e:	88fb      	ldrh	r3, [r7, #6]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 f807 	bl	80077b4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	44022000 	.word	0x44022000

080077b4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80077be:	bf00      	nop
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
	...

080077cc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80077d0:	4b05      	ldr	r3, [pc, #20]	; (80077e8 <HAL_ICACHE_Enable+0x1c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a04      	ldr	r2, [pc, #16]	; (80077e8 <HAL_ICACHE_Enable+0x1c>)
 80077d6:	f043 0301 	orr.w	r3, r3, #1
 80077da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	40030400 	.word	0x40030400

080077ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d102      	bne.n	8007800 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	f000 bc28 	b.w	8008050 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007800:	4b94      	ldr	r3, [pc, #592]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	f003 0318 	and.w	r3, r3, #24
 8007808:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800780a:	4b92      	ldr	r3, [pc, #584]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 800780c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780e:	f003 0303 	and.w	r3, r3, #3
 8007812:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0310 	and.w	r3, r3, #16
 800781c:	2b00      	cmp	r3, #0
 800781e:	d05b      	beq.n	80078d8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	2b08      	cmp	r3, #8
 8007824:	d005      	beq.n	8007832 <HAL_RCC_OscConfig+0x46>
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	2b18      	cmp	r3, #24
 800782a:	d114      	bne.n	8007856 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	2b02      	cmp	r3, #2
 8007830:	d111      	bne.n	8007856 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d102      	bne.n	8007840 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	f000 bc08 	b.w	8008050 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007840:	4b84      	ldr	r3, [pc, #528]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	041b      	lsls	r3, r3, #16
 800784e:	4981      	ldr	r1, [pc, #516]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007850:	4313      	orrs	r3, r2
 8007852:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8007854:	e040      	b.n	80078d8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d023      	beq.n	80078a6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800785e:	4b7d      	ldr	r3, [pc, #500]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a7c      	ldr	r2, [pc, #496]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800786a:	f7fc fc3d 	bl	80040e8 <HAL_GetTick>
 800786e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007870:	e008      	b.n	8007884 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8007872:	f7fc fc39 	bl	80040e8 <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e3e5      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007884:	4b73      	ldr	r3, [pc, #460]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0f0      	beq.n	8007872 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007890:	4b70      	ldr	r3, [pc, #448]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	041b      	lsls	r3, r3, #16
 800789e:	496d      	ldr	r1, [pc, #436]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	618b      	str	r3, [r1, #24]
 80078a4:	e018      	b.n	80078d8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80078a6:	4b6b      	ldr	r3, [pc, #428]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a6a      	ldr	r2, [pc, #424]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 80078ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b2:	f7fc fc19 	bl	80040e8 <HAL_GetTick>
 80078b6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80078b8:	e008      	b.n	80078cc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80078ba:	f7fc fc15 	bl	80040e8 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d901      	bls.n	80078cc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e3c1      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80078cc:	4b61      	ldr	r3, [pc, #388]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1f0      	bne.n	80078ba <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 80a0 	beq.w	8007a26 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	2b10      	cmp	r3, #16
 80078ea:	d005      	beq.n	80078f8 <HAL_RCC_OscConfig+0x10c>
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	2b18      	cmp	r3, #24
 80078f0:	d109      	bne.n	8007906 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d106      	bne.n	8007906 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f040 8092 	bne.w	8007a26 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e3a4      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800790e:	d106      	bne.n	800791e <HAL_RCC_OscConfig+0x132>
 8007910:	4b50      	ldr	r3, [pc, #320]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a4f      	ldr	r2, [pc, #316]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800791a:	6013      	str	r3, [r2, #0]
 800791c:	e058      	b.n	80079d0 <HAL_RCC_OscConfig+0x1e4>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d112      	bne.n	800794c <HAL_RCC_OscConfig+0x160>
 8007926:	4b4b      	ldr	r3, [pc, #300]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a4a      	ldr	r2, [pc, #296]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 800792c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007930:	6013      	str	r3, [r2, #0]
 8007932:	4b48      	ldr	r3, [pc, #288]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a47      	ldr	r2, [pc, #284]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007938:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	4b45      	ldr	r3, [pc, #276]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a44      	ldr	r2, [pc, #272]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	e041      	b.n	80079d0 <HAL_RCC_OscConfig+0x1e4>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007954:	d112      	bne.n	800797c <HAL_RCC_OscConfig+0x190>
 8007956:	4b3f      	ldr	r3, [pc, #252]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a3e      	ldr	r2, [pc, #248]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 800795c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	4b3c      	ldr	r3, [pc, #240]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a3b      	ldr	r2, [pc, #236]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007968:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	4b39      	ldr	r3, [pc, #228]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a38      	ldr	r2, [pc, #224]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	e029      	b.n	80079d0 <HAL_RCC_OscConfig+0x1e4>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8007984:	d112      	bne.n	80079ac <HAL_RCC_OscConfig+0x1c0>
 8007986:	4b33      	ldr	r3, [pc, #204]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a32      	ldr	r2, [pc, #200]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 800798c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007990:	6013      	str	r3, [r2, #0]
 8007992:	4b30      	ldr	r3, [pc, #192]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a2f      	ldr	r2, [pc, #188]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007998:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	4b2d      	ldr	r3, [pc, #180]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a2c      	ldr	r2, [pc, #176]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 80079a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	e011      	b.n	80079d0 <HAL_RCC_OscConfig+0x1e4>
 80079ac:	4b29      	ldr	r3, [pc, #164]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a28      	ldr	r2, [pc, #160]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 80079b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079b6:	6013      	str	r3, [r2, #0]
 80079b8:	4b26      	ldr	r3, [pc, #152]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a25      	ldr	r2, [pc, #148]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 80079be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079c2:	6013      	str	r3, [r2, #0]
 80079c4:	4b23      	ldr	r3, [pc, #140]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a22      	ldr	r2, [pc, #136]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 80079ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80079ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d013      	beq.n	8007a00 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d8:	f7fc fb86 	bl	80040e8 <HAL_GetTick>
 80079dc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079de:	e008      	b.n	80079f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80079e0:	f7fc fb82 	bl	80040e8 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b64      	cmp	r3, #100	; 0x64
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e32e      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079f2:	4b18      	ldr	r3, [pc, #96]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d0f0      	beq.n	80079e0 <HAL_RCC_OscConfig+0x1f4>
 80079fe:	e012      	b.n	8007a26 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a00:	f7fc fb72 	bl	80040e8 <HAL_GetTick>
 8007a04:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a06:	e008      	b.n	8007a1a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007a08:	f7fc fb6e 	bl	80040e8 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b64      	cmp	r3, #100	; 0x64
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e31a      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a1a:	4b0e      	ldr	r3, [pc, #56]	; (8007a54 <HAL_RCC_OscConfig+0x268>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1f0      	bne.n	8007a08 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 809a 	beq.w	8007b68 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d005      	beq.n	8007a46 <HAL_RCC_OscConfig+0x25a>
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	2b18      	cmp	r3, #24
 8007a3e:	d149      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d146      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d104      	bne.n	8007a58 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e2fe      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
 8007a52:	bf00      	nop
 8007a54:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d11c      	bne.n	8007a98 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8007a5e:	4b9a      	ldr	r3, [pc, #616]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0218 	and.w	r2, r3, #24
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d014      	beq.n	8007a98 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8007a6e:	4b96      	ldr	r3, [pc, #600]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f023 0218 	bic.w	r2, r3, #24
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	4993      	ldr	r1, [pc, #588]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8007a80:	f000 fdd0 	bl	8008624 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007a84:	4b91      	ldr	r3, [pc, #580]	; (8007ccc <HAL_RCC_OscConfig+0x4e0>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7f9 fb75 	bl	8001178 <HAL_InitTick>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e2db      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a98:	f7fc fb26 	bl	80040e8 <HAL_GetTick>
 8007a9c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a9e:	e008      	b.n	8007ab2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007aa0:	f7fc fb22 	bl	80040e8 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d901      	bls.n	8007ab2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e2ce      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ab2:	4b85      	ldr	r3, [pc, #532]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0f0      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8007abe:	4b82      	ldr	r3, [pc, #520]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	041b      	lsls	r3, r3, #16
 8007acc:	497e      	ldr	r1, [pc, #504]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8007ad2:	e049      	b.n	8007b68 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d02c      	beq.n	8007b36 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8007adc:	4b7a      	ldr	r3, [pc, #488]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f023 0218 	bic.w	r2, r3, #24
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	4977      	ldr	r1, [pc, #476]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8007aee:	4b76      	ldr	r3, [pc, #472]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a75      	ldr	r2, [pc, #468]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007af4:	f043 0301 	orr.w	r3, r3, #1
 8007af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007afa:	f7fc faf5 	bl	80040e8 <HAL_GetTick>
 8007afe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b00:	e008      	b.n	8007b14 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007b02:	f7fc faf1 	bl	80040e8 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d901      	bls.n	8007b14 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e29d      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b14:	4b6c      	ldr	r3, [pc, #432]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0f0      	beq.n	8007b02 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8007b20:	4b69      	ldr	r3, [pc, #420]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	041b      	lsls	r3, r3, #16
 8007b2e:	4966      	ldr	r1, [pc, #408]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	610b      	str	r3, [r1, #16]
 8007b34:	e018      	b.n	8007b68 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b36:	4b64      	ldr	r3, [pc, #400]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a63      	ldr	r2, [pc, #396]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007b3c:	f023 0301 	bic.w	r3, r3, #1
 8007b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b42:	f7fc fad1 	bl	80040e8 <HAL_GetTick>
 8007b46:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b48:	e008      	b.n	8007b5c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007b4a:	f7fc facd 	bl	80040e8 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d901      	bls.n	8007b5c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e279      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b5c:	4b5a      	ldr	r3, [pc, #360]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1f0      	bne.n	8007b4a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0308 	and.w	r3, r3, #8
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d03c      	beq.n	8007bee <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d01c      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b7c:	4b52      	ldr	r3, [pc, #328]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b82:	4a51      	ldr	r2, [pc, #324]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007b84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b8c:	f7fc faac 	bl	80040e8 <HAL_GetTick>
 8007b90:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007b92:	e008      	b.n	8007ba6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007b94:	f7fc faa8 	bl	80040e8 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d901      	bls.n	8007ba6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e254      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007ba6:	4b48      	ldr	r3, [pc, #288]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d0ef      	beq.n	8007b94 <HAL_RCC_OscConfig+0x3a8>
 8007bb4:	e01b      	b.n	8007bee <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bb6:	4b44      	ldr	r3, [pc, #272]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bbc:	4a42      	ldr	r2, [pc, #264]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007bbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007bc2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bc6:	f7fc fa8f 	bl	80040e8 <HAL_GetTick>
 8007bca:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007bcc:	e008      	b.n	8007be0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007bce:	f7fc fa8b 	bl	80040e8 <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d901      	bls.n	8007be0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e237      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007be0:	4b39      	ldr	r3, [pc, #228]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007be2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007be6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1ef      	bne.n	8007bce <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0304 	and.w	r3, r3, #4
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 80d2 	beq.w	8007da0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007bfc:	4b34      	ldr	r3, [pc, #208]	; (8007cd0 <HAL_RCC_OscConfig+0x4e4>)
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d118      	bne.n	8007c3a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007c08:	4b31      	ldr	r3, [pc, #196]	; (8007cd0 <HAL_RCC_OscConfig+0x4e4>)
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	4a30      	ldr	r2, [pc, #192]	; (8007cd0 <HAL_RCC_OscConfig+0x4e4>)
 8007c0e:	f043 0301 	orr.w	r3, r3, #1
 8007c12:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c14:	f7fc fa68 	bl	80040e8 <HAL_GetTick>
 8007c18:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007c1a:	e008      	b.n	8007c2e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c1c:	f7fc fa64 	bl	80040e8 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d901      	bls.n	8007c2e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e210      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007c2e:	4b28      	ldr	r3, [pc, #160]	; (8007cd0 <HAL_RCC_OscConfig+0x4e4>)
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0f0      	beq.n	8007c1c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d108      	bne.n	8007c54 <HAL_RCC_OscConfig+0x468>
 8007c42:	4b21      	ldr	r3, [pc, #132]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c48:	4a1f      	ldr	r2, [pc, #124]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007c4a:	f043 0301 	orr.w	r3, r3, #1
 8007c4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007c52:	e074      	b.n	8007d3e <HAL_RCC_OscConfig+0x552>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d118      	bne.n	8007c8e <HAL_RCC_OscConfig+0x4a2>
 8007c5c:	4b1a      	ldr	r3, [pc, #104]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007c5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c62:	4a19      	ldr	r2, [pc, #100]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007c64:	f023 0301 	bic.w	r3, r3, #1
 8007c68:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007c6c:	4b16      	ldr	r3, [pc, #88]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007c6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c72:	4a15      	ldr	r2, [pc, #84]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007c74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007c7c:	4b12      	ldr	r3, [pc, #72]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c82:	4a11      	ldr	r2, [pc, #68]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007c84:	f023 0304 	bic.w	r3, r3, #4
 8007c88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007c8c:	e057      	b.n	8007d3e <HAL_RCC_OscConfig+0x552>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	2b05      	cmp	r3, #5
 8007c94:	d11e      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x4e8>
 8007c96:	4b0c      	ldr	r3, [pc, #48]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c9c:	4a0a      	ldr	r2, [pc, #40]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007c9e:	f043 0304 	orr.w	r3, r3, #4
 8007ca2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007ca6:	4b08      	ldr	r3, [pc, #32]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cac:	4a06      	ldr	r2, [pc, #24]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007cb6:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007cb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cbc:	4a02      	ldr	r2, [pc, #8]	; (8007cc8 <HAL_RCC_OscConfig+0x4dc>)
 8007cbe:	f043 0301 	orr.w	r3, r3, #1
 8007cc2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007cc6:	e03a      	b.n	8007d3e <HAL_RCC_OscConfig+0x552>
 8007cc8:	44020c00 	.word	0x44020c00
 8007ccc:	20050040 	.word	0x20050040
 8007cd0:	44020800 	.word	0x44020800
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	2b85      	cmp	r3, #133	; 0x85
 8007cda:	d118      	bne.n	8007d0e <HAL_RCC_OscConfig+0x522>
 8007cdc:	4ba2      	ldr	r3, [pc, #648]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ce2:	4aa1      	ldr	r2, [pc, #644]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007ce4:	f043 0304 	orr.w	r3, r3, #4
 8007ce8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007cec:	4b9e      	ldr	r3, [pc, #632]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cf2:	4a9d      	ldr	r2, [pc, #628]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007cfc:	4b9a      	ldr	r3, [pc, #616]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d02:	4a99      	ldr	r2, [pc, #612]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007d04:	f043 0301 	orr.w	r3, r3, #1
 8007d08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007d0c:	e017      	b.n	8007d3e <HAL_RCC_OscConfig+0x552>
 8007d0e:	4b96      	ldr	r3, [pc, #600]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d14:	4a94      	ldr	r2, [pc, #592]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007d16:	f023 0301 	bic.w	r3, r3, #1
 8007d1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007d1e:	4b92      	ldr	r3, [pc, #584]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d24:	4a90      	ldr	r2, [pc, #576]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007d26:	f023 0304 	bic.w	r3, r3, #4
 8007d2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007d2e:	4b8e      	ldr	r3, [pc, #568]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d34:	4a8c      	ldr	r2, [pc, #560]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d016      	beq.n	8007d74 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d46:	f7fc f9cf 	bl	80040e8 <HAL_GetTick>
 8007d4a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d4c:	e00a      	b.n	8007d64 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d4e:	f7fc f9cb 	bl	80040e8 <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d901      	bls.n	8007d64 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e175      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d64:	4b80      	ldr	r3, [pc, #512]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0ed      	beq.n	8007d4e <HAL_RCC_OscConfig+0x562>
 8007d72:	e015      	b.n	8007da0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d74:	f7fc f9b8 	bl	80040e8 <HAL_GetTick>
 8007d78:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d7a:	e00a      	b.n	8007d92 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d7c:	f7fc f9b4 	bl	80040e8 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e15e      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d92:	4b75      	ldr	r3, [pc, #468]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d98:	f003 0302 	and.w	r3, r3, #2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1ed      	bne.n	8007d7c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0320 	and.w	r3, r3, #32
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d036      	beq.n	8007e1a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d019      	beq.n	8007de8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007db4:	4b6c      	ldr	r3, [pc, #432]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a6b      	ldr	r2, [pc, #428]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007dba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007dbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc0:	f7fc f992 	bl	80040e8 <HAL_GetTick>
 8007dc4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007dc6:	e008      	b.n	8007dda <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8007dc8:	f7fc f98e 	bl	80040e8 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d901      	bls.n	8007dda <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e13a      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007dda:	4b63      	ldr	r3, [pc, #396]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0f0      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x5dc>
 8007de6:	e018      	b.n	8007e1a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007de8:	4b5f      	ldr	r3, [pc, #380]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a5e      	ldr	r2, [pc, #376]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007dee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007df2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df4:	f7fc f978 	bl	80040e8 <HAL_GetTick>
 8007df8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007dfa:	e008      	b.n	8007e0e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8007dfc:	f7fc f974 	bl	80040e8 <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d901      	bls.n	8007e0e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e120      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007e0e:	4b56      	ldr	r3, [pc, #344]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1f0      	bne.n	8007dfc <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 8115 	beq.w	800804e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	2b18      	cmp	r3, #24
 8007e28:	f000 80af 	beq.w	8007f8a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	f040 8086 	bne.w	8007f42 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8007e36:	4b4c      	ldr	r3, [pc, #304]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a4b      	ldr	r2, [pc, #300]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007e3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e42:	f7fc f951 	bl	80040e8 <HAL_GetTick>
 8007e46:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007e48:	e008      	b.n	8007e5c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007e4a:	f7fc f94d 	bl	80040e8 <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d901      	bls.n	8007e5c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e0f9      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007e5c:	4b42      	ldr	r3, [pc, #264]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1f0      	bne.n	8007e4a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8007e68:	4b3f      	ldr	r3, [pc, #252]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e70:	f023 0303 	bic.w	r3, r3, #3
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007e7c:	0212      	lsls	r2, r2, #8
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	4939      	ldr	r1, [pc, #228]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	628b      	str	r3, [r1, #40]	; 0x28
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e94:	3b01      	subs	r3, #1
 8007e96:	025b      	lsls	r3, r3, #9
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	041b      	lsls	r3, r3, #16
 8007ea4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	061b      	lsls	r3, r3, #24
 8007eb2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007eb6:	492c      	ldr	r1, [pc, #176]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8007ebc:	4b2a      	ldr	r3, [pc, #168]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec0:	4a29      	ldr	r2, [pc, #164]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007ec2:	f023 0310 	bic.w	r3, r3, #16
 8007ec6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ecc:	4a26      	ldr	r2, [pc, #152]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8007ed2:	4b25      	ldr	r3, [pc, #148]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed6:	4a24      	ldr	r2, [pc, #144]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007ed8:	f043 0310 	orr.w	r3, r3, #16
 8007edc:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8007ede:	4b22      	ldr	r3, [pc, #136]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee2:	f023 020c 	bic.w	r2, r3, #12
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eea:	491f      	ldr	r1, [pc, #124]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8007ef0:	4b1d      	ldr	r3, [pc, #116]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef4:	f023 0220 	bic.w	r2, r3, #32
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007efc:	491a      	ldr	r1, [pc, #104]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f02:	4b19      	ldr	r3, [pc, #100]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f06:	4a18      	ldr	r2, [pc, #96]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f0c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8007f0e:	4b16      	ldr	r3, [pc, #88]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a15      	ldr	r2, [pc, #84]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f1a:	f7fc f8e5 	bl	80040e8 <HAL_GetTick>
 8007f1e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007f20:	e008      	b.n	8007f34 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007f22:	f7fc f8e1 	bl	80040e8 <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d901      	bls.n	8007f34 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e08d      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007f34:	4b0c      	ldr	r3, [pc, #48]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0f0      	beq.n	8007f22 <HAL_RCC_OscConfig+0x736>
 8007f40:	e085      	b.n	800804e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8007f42:	4b09      	ldr	r3, [pc, #36]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a08      	ldr	r2, [pc, #32]	; (8007f68 <HAL_RCC_OscConfig+0x77c>)
 8007f48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f4e:	f7fc f8cb 	bl	80040e8 <HAL_GetTick>
 8007f52:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007f54:	e00a      	b.n	8007f6c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007f56:	f7fc f8c7 	bl	80040e8 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d903      	bls.n	8007f6c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e073      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
 8007f68:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007f6c:	4b3a      	ldr	r3, [pc, #232]	; (8008058 <HAL_RCC_OscConfig+0x86c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1ee      	bne.n	8007f56 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007f78:	4b37      	ldr	r3, [pc, #220]	; (8008058 <HAL_RCC_OscConfig+0x86c>)
 8007f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7c:	4a36      	ldr	r2, [pc, #216]	; (8008058 <HAL_RCC_OscConfig+0x86c>)
 8007f7e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007f82:	f023 0303 	bic.w	r3, r3, #3
 8007f86:	6293      	str	r3, [r2, #40]	; 0x28
 8007f88:	e061      	b.n	800804e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007f8a:	4b33      	ldr	r3, [pc, #204]	; (8008058 <HAL_RCC_OscConfig+0x86c>)
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007f90:	4b31      	ldr	r3, [pc, #196]	; (8008058 <HAL_RCC_OscConfig+0x86c>)
 8007f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f94:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d031      	beq.n	8008002 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f003 0203 	and.w	r2, r3, #3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d12a      	bne.n	8008002 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	0a1b      	lsrs	r3, r3, #8
 8007fb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d122      	bne.n	8008002 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d11a      	bne.n	8008002 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	0a5b      	lsrs	r3, r3, #9
 8007fd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d111      	bne.n	8008002 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	0c1b      	lsrs	r3, r3, #16
 8007fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fea:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d108      	bne.n	8008002 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	0e1b      	lsrs	r3, r3, #24
 8007ff4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d001      	beq.n	8008006 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e024      	b.n	8008050 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008006:	4b14      	ldr	r3, [pc, #80]	; (8008058 <HAL_RCC_OscConfig+0x86c>)
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	08db      	lsrs	r3, r3, #3
 800800c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008014:	429a      	cmp	r2, r3
 8008016:	d01a      	beq.n	800804e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8008018:	4b0f      	ldr	r3, [pc, #60]	; (8008058 <HAL_RCC_OscConfig+0x86c>)
 800801a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801c:	4a0e      	ldr	r2, [pc, #56]	; (8008058 <HAL_RCC_OscConfig+0x86c>)
 800801e:	f023 0310 	bic.w	r3, r3, #16
 8008022:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008024:	f7fc f860 	bl	80040e8 <HAL_GetTick>
 8008028:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800802a:	bf00      	nop
 800802c:	f7fc f85c 	bl	80040e8 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	4293      	cmp	r3, r2
 8008036:	d0f9      	beq.n	800802c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803c:	4a06      	ldr	r2, [pc, #24]	; (8008058 <HAL_RCC_OscConfig+0x86c>)
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8008042:	4b05      	ldr	r3, [pc, #20]	; (8008058 <HAL_RCC_OscConfig+0x86c>)
 8008044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008046:	4a04      	ldr	r2, [pc, #16]	; (8008058 <HAL_RCC_OscConfig+0x86c>)
 8008048:	f043 0310 	orr.w	r3, r3, #16
 800804c:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3720      	adds	r7, #32
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	44020c00 	.word	0x44020c00

0800805c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e19e      	b.n	80083ae <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008070:	4b83      	ldr	r3, [pc, #524]	; (8008280 <HAL_RCC_ClockConfig+0x224>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 030f 	and.w	r3, r3, #15
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	429a      	cmp	r2, r3
 800807c:	d910      	bls.n	80080a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800807e:	4b80      	ldr	r3, [pc, #512]	; (8008280 <HAL_RCC_ClockConfig+0x224>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f023 020f 	bic.w	r2, r3, #15
 8008086:	497e      	ldr	r1, [pc, #504]	; (8008280 <HAL_RCC_ClockConfig+0x224>)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	4313      	orrs	r3, r2
 800808c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800808e:	4b7c      	ldr	r3, [pc, #496]	; (8008280 <HAL_RCC_ClockConfig+0x224>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 030f 	and.w	r3, r3, #15
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	429a      	cmp	r2, r3
 800809a:	d001      	beq.n	80080a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e186      	b.n	80083ae <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0310 	and.w	r3, r3, #16
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d012      	beq.n	80080d2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	695a      	ldr	r2, [r3, #20]
 80080b0:	4b74      	ldr	r3, [pc, #464]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	0a1b      	lsrs	r3, r3, #8
 80080b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d909      	bls.n	80080d2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80080be:	4b71      	ldr	r3, [pc, #452]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	021b      	lsls	r3, r3, #8
 80080cc:	496d      	ldr	r1, [pc, #436]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0308 	and.w	r3, r3, #8
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d012      	beq.n	8008104 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	691a      	ldr	r2, [r3, #16]
 80080e2:	4b68      	ldr	r3, [pc, #416]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	091b      	lsrs	r3, r3, #4
 80080e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d909      	bls.n	8008104 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80080f0:	4b64      	ldr	r3, [pc, #400]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 80080f2:	6a1b      	ldr	r3, [r3, #32]
 80080f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	011b      	lsls	r3, r3, #4
 80080fe:	4961      	ldr	r1, [pc, #388]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 8008100:	4313      	orrs	r3, r2
 8008102:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0304 	and.w	r3, r3, #4
 800810c:	2b00      	cmp	r3, #0
 800810e:	d010      	beq.n	8008132 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	4b5b      	ldr	r3, [pc, #364]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800811c:	429a      	cmp	r2, r3
 800811e:	d908      	bls.n	8008132 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8008120:	4b58      	ldr	r3, [pc, #352]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	4955      	ldr	r1, [pc, #340]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 800812e:	4313      	orrs	r3, r2
 8008130:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0302 	and.w	r3, r3, #2
 800813a:	2b00      	cmp	r3, #0
 800813c:	d010      	beq.n	8008160 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	4b50      	ldr	r3, [pc, #320]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	f003 030f 	and.w	r3, r3, #15
 800814a:	429a      	cmp	r2, r3
 800814c:	d908      	bls.n	8008160 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800814e:	4b4d      	ldr	r3, [pc, #308]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	f023 020f 	bic.w	r2, r3, #15
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	494a      	ldr	r1, [pc, #296]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 800815c:	4313      	orrs	r3, r2
 800815e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 8093 	beq.w	8008294 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	2b03      	cmp	r3, #3
 8008174:	d107      	bne.n	8008186 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008176:	4b43      	ldr	r3, [pc, #268]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d121      	bne.n	80081c6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e113      	b.n	80083ae <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	2b02      	cmp	r3, #2
 800818c:	d107      	bne.n	800819e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800818e:	4b3d      	ldr	r3, [pc, #244]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d115      	bne.n	80081c6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e107      	b.n	80083ae <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d107      	bne.n	80081b6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80081a6:	4b37      	ldr	r3, [pc, #220]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d109      	bne.n	80081c6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e0fb      	b.n	80083ae <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081b6:	4b33      	ldr	r3, [pc, #204]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e0f3      	b.n	80083ae <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80081c6:	4b2f      	ldr	r3, [pc, #188]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	f023 0203 	bic.w	r2, r3, #3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	492c      	ldr	r1, [pc, #176]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 80081d4:	4313      	orrs	r3, r2
 80081d6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081d8:	f7fb ff86 	bl	80040e8 <HAL_GetTick>
 80081dc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d112      	bne.n	800820c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80081e6:	e00a      	b.n	80081fe <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80081e8:	f7fb ff7e 	bl	80040e8 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d901      	bls.n	80081fe <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e0d7      	b.n	80083ae <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80081fe:	4b21      	ldr	r3, [pc, #132]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f003 0318 	and.w	r3, r3, #24
 8008206:	2b18      	cmp	r3, #24
 8008208:	d1ee      	bne.n	80081e8 <HAL_RCC_ClockConfig+0x18c>
 800820a:	e043      	b.n	8008294 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d112      	bne.n	800823a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008214:	e00a      	b.n	800822c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008216:	f7fb ff67 	bl	80040e8 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	f241 3288 	movw	r2, #5000	; 0x1388
 8008224:	4293      	cmp	r3, r2
 8008226:	d901      	bls.n	800822c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e0c0      	b.n	80083ae <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800822c:	4b15      	ldr	r3, [pc, #84]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	f003 0318 	and.w	r3, r3, #24
 8008234:	2b10      	cmp	r3, #16
 8008236:	d1ee      	bne.n	8008216 <HAL_RCC_ClockConfig+0x1ba>
 8008238:	e02c      	b.n	8008294 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d122      	bne.n	8008288 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8008242:	e00a      	b.n	800825a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008244:	f7fb ff50 	bl	80040e8 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008252:	4293      	cmp	r3, r2
 8008254:	d901      	bls.n	800825a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e0a9      	b.n	80083ae <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800825a:	4b0a      	ldr	r3, [pc, #40]	; (8008284 <HAL_RCC_ClockConfig+0x228>)
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	f003 0318 	and.w	r3, r3, #24
 8008262:	2b08      	cmp	r3, #8
 8008264:	d1ee      	bne.n	8008244 <HAL_RCC_ClockConfig+0x1e8>
 8008266:	e015      	b.n	8008294 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008268:	f7fb ff3e 	bl	80040e8 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	f241 3288 	movw	r2, #5000	; 0x1388
 8008276:	4293      	cmp	r3, r2
 8008278:	d906      	bls.n	8008288 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e097      	b.n	80083ae <HAL_RCC_ClockConfig+0x352>
 800827e:	bf00      	nop
 8008280:	40022000 	.word	0x40022000
 8008284:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008288:	4b4b      	ldr	r3, [pc, #300]	; (80083b8 <HAL_RCC_ClockConfig+0x35c>)
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	f003 0318 	and.w	r3, r3, #24
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e9      	bne.n	8008268 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d010      	beq.n	80082c2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689a      	ldr	r2, [r3, #8]
 80082a4:	4b44      	ldr	r3, [pc, #272]	; (80083b8 <HAL_RCC_ClockConfig+0x35c>)
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	f003 030f 	and.w	r3, r3, #15
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d208      	bcs.n	80082c2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80082b0:	4b41      	ldr	r3, [pc, #260]	; (80083b8 <HAL_RCC_ClockConfig+0x35c>)
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	f023 020f 	bic.w	r2, r3, #15
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	493e      	ldr	r1, [pc, #248]	; (80083b8 <HAL_RCC_ClockConfig+0x35c>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082c2:	4b3e      	ldr	r3, [pc, #248]	; (80083bc <HAL_RCC_ClockConfig+0x360>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 030f 	and.w	r3, r3, #15
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d210      	bcs.n	80082f2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082d0:	4b3a      	ldr	r3, [pc, #232]	; (80083bc <HAL_RCC_ClockConfig+0x360>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f023 020f 	bic.w	r2, r3, #15
 80082d8:	4938      	ldr	r1, [pc, #224]	; (80083bc <HAL_RCC_ClockConfig+0x360>)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	4313      	orrs	r3, r2
 80082de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082e0:	4b36      	ldr	r3, [pc, #216]	; (80083bc <HAL_RCC_ClockConfig+0x360>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 030f 	and.w	r3, r3, #15
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d001      	beq.n	80082f2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e05d      	b.n	80083ae <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0304 	and.w	r3, r3, #4
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d010      	beq.n	8008320 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	4b2d      	ldr	r3, [pc, #180]	; (80083b8 <HAL_RCC_ClockConfig+0x35c>)
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800830a:	429a      	cmp	r2, r3
 800830c:	d208      	bcs.n	8008320 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800830e:	4b2a      	ldr	r3, [pc, #168]	; (80083b8 <HAL_RCC_ClockConfig+0x35c>)
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	4927      	ldr	r1, [pc, #156]	; (80083b8 <HAL_RCC_ClockConfig+0x35c>)
 800831c:	4313      	orrs	r3, r2
 800831e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0308 	and.w	r3, r3, #8
 8008328:	2b00      	cmp	r3, #0
 800832a:	d012      	beq.n	8008352 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	691a      	ldr	r2, [r3, #16]
 8008330:	4b21      	ldr	r3, [pc, #132]	; (80083b8 <HAL_RCC_ClockConfig+0x35c>)
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	091b      	lsrs	r3, r3, #4
 8008336:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800833a:	429a      	cmp	r2, r3
 800833c:	d209      	bcs.n	8008352 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800833e:	4b1e      	ldr	r3, [pc, #120]	; (80083b8 <HAL_RCC_ClockConfig+0x35c>)
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	011b      	lsls	r3, r3, #4
 800834c:	491a      	ldr	r1, [pc, #104]	; (80083b8 <HAL_RCC_ClockConfig+0x35c>)
 800834e:	4313      	orrs	r3, r2
 8008350:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0310 	and.w	r3, r3, #16
 800835a:	2b00      	cmp	r3, #0
 800835c:	d012      	beq.n	8008384 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	695a      	ldr	r2, [r3, #20]
 8008362:	4b15      	ldr	r3, [pc, #84]	; (80083b8 <HAL_RCC_ClockConfig+0x35c>)
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	0a1b      	lsrs	r3, r3, #8
 8008368:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800836c:	429a      	cmp	r2, r3
 800836e:	d209      	bcs.n	8008384 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8008370:	4b11      	ldr	r3, [pc, #68]	; (80083b8 <HAL_RCC_ClockConfig+0x35c>)
 8008372:	6a1b      	ldr	r3, [r3, #32]
 8008374:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	021b      	lsls	r3, r3, #8
 800837e:	490e      	ldr	r1, [pc, #56]	; (80083b8 <HAL_RCC_ClockConfig+0x35c>)
 8008380:	4313      	orrs	r3, r2
 8008382:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008384:	f000 f822 	bl	80083cc <HAL_RCC_GetSysClockFreq>
 8008388:	4602      	mov	r2, r0
 800838a:	4b0b      	ldr	r3, [pc, #44]	; (80083b8 <HAL_RCC_ClockConfig+0x35c>)
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	f003 030f 	and.w	r3, r3, #15
 8008392:	490b      	ldr	r1, [pc, #44]	; (80083c0 <HAL_RCC_ClockConfig+0x364>)
 8008394:	5ccb      	ldrb	r3, [r1, r3]
 8008396:	fa22 f303 	lsr.w	r3, r2, r3
 800839a:	4a0a      	ldr	r2, [pc, #40]	; (80083c4 <HAL_RCC_ClockConfig+0x368>)
 800839c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800839e:	4b0a      	ldr	r3, [pc, #40]	; (80083c8 <HAL_RCC_ClockConfig+0x36c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7f8 fee8 	bl	8001178 <HAL_InitTick>
 80083a8:	4603      	mov	r3, r0
 80083aa:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80083ac:	7afb      	ldrb	r3, [r7, #11]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	44020c00 	.word	0x44020c00
 80083bc:	40022000 	.word	0x40022000
 80083c0:	080297ec 	.word	0x080297ec
 80083c4:	20050000 	.word	0x20050000
 80083c8:	20050040 	.word	0x20050040

080083cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b089      	sub	sp, #36	; 0x24
 80083d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80083d2:	4b8c      	ldr	r3, [pc, #560]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	f003 0318 	and.w	r3, r3, #24
 80083da:	2b08      	cmp	r3, #8
 80083dc:	d102      	bne.n	80083e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80083de:	4b8a      	ldr	r3, [pc, #552]	; (8008608 <HAL_RCC_GetSysClockFreq+0x23c>)
 80083e0:	61fb      	str	r3, [r7, #28]
 80083e2:	e107      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80083e4:	4b87      	ldr	r3, [pc, #540]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	f003 0318 	and.w	r3, r3, #24
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d112      	bne.n	8008416 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80083f0:	4b84      	ldr	r3, [pc, #528]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0320 	and.w	r3, r3, #32
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d009      	beq.n	8008410 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083fc:	4b81      	ldr	r3, [pc, #516]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	08db      	lsrs	r3, r3, #3
 8008402:	f003 0303 	and.w	r3, r3, #3
 8008406:	4a81      	ldr	r2, [pc, #516]	; (800860c <HAL_RCC_GetSysClockFreq+0x240>)
 8008408:	fa22 f303 	lsr.w	r3, r2, r3
 800840c:	61fb      	str	r3, [r7, #28]
 800840e:	e0f1      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8008410:	4b7e      	ldr	r3, [pc, #504]	; (800860c <HAL_RCC_GetSysClockFreq+0x240>)
 8008412:	61fb      	str	r3, [r7, #28]
 8008414:	e0ee      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008416:	4b7b      	ldr	r3, [pc, #492]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	f003 0318 	and.w	r3, r3, #24
 800841e:	2b10      	cmp	r3, #16
 8008420:	d102      	bne.n	8008428 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008422:	4b7b      	ldr	r3, [pc, #492]	; (8008610 <HAL_RCC_GetSysClockFreq+0x244>)
 8008424:	61fb      	str	r3, [r7, #28]
 8008426:	e0e5      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008428:	4b76      	ldr	r3, [pc, #472]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	f003 0318 	and.w	r3, r3, #24
 8008430:	2b18      	cmp	r3, #24
 8008432:	f040 80dd 	bne.w	80085f0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008436:	4b73      	ldr	r3, [pc, #460]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 8008438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843a:	f003 0303 	and.w	r3, r3, #3
 800843e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008440:	4b70      	ldr	r3, [pc, #448]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 8008442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008444:	0a1b      	lsrs	r3, r3, #8
 8008446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800844a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800844c:	4b6d      	ldr	r3, [pc, #436]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 800844e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008450:	091b      	lsrs	r3, r3, #4
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8008458:	4b6a      	ldr	r3, [pc, #424]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 800845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800845c:	08db      	lsrs	r3, r3, #3
 800845e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	fb02 f303 	mul.w	r3, r2, r3
 8008468:	ee07 3a90 	vmov	s15, r3
 800846c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008470:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 80b7 	beq.w	80085ea <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d003      	beq.n	800848a <HAL_RCC_GetSysClockFreq+0xbe>
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2b03      	cmp	r3, #3
 8008486:	d056      	beq.n	8008536 <HAL_RCC_GetSysClockFreq+0x16a>
 8008488:	e077      	b.n	800857a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800848a:	4b5e      	ldr	r3, [pc, #376]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b00      	cmp	r3, #0
 8008494:	d02d      	beq.n	80084f2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008496:	4b5b      	ldr	r3, [pc, #364]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	08db      	lsrs	r3, r3, #3
 800849c:	f003 0303 	and.w	r3, r3, #3
 80084a0:	4a5a      	ldr	r2, [pc, #360]	; (800860c <HAL_RCC_GetSysClockFreq+0x240>)
 80084a2:	fa22 f303 	lsr.w	r3, r2, r3
 80084a6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	ee07 3a90 	vmov	s15, r3
 80084ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	ee07 3a90 	vmov	s15, r3
 80084b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084c0:	4b50      	ldr	r3, [pc, #320]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 80084c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c8:	ee07 3a90 	vmov	s15, r3
 80084cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80084d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80084d4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8008614 <HAL_RCC_GetSysClockFreq+0x248>
 80084d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80084dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80084e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80084e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ec:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80084f0:	e065      	b.n	80085be <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	ee07 3a90 	vmov	s15, r3
 80084f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084fc:	eddf 6a46 	vldr	s13, [pc, #280]	; 8008618 <HAL_RCC_GetSysClockFreq+0x24c>
 8008500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008504:	4b3f      	ldr	r3, [pc, #252]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 8008506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800850c:	ee07 3a90 	vmov	s15, r3
 8008510:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8008514:	ed97 6a02 	vldr	s12, [r7, #8]
 8008518:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008614 <HAL_RCC_GetSysClockFreq+0x248>
 800851c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008520:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8008524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008528:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800852c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008530:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8008534:	e043      	b.n	80085be <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	ee07 3a90 	vmov	s15, r3
 800853c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008540:	eddf 6a36 	vldr	s13, [pc, #216]	; 800861c <HAL_RCC_GetSysClockFreq+0x250>
 8008544:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008548:	4b2e      	ldr	r3, [pc, #184]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 800854a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008550:	ee07 3a90 	vmov	s15, r3
 8008554:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008558:	ed97 6a02 	vldr	s12, [r7, #8]
 800855c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8008614 <HAL_RCC_GetSysClockFreq+0x248>
 8008560:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008564:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008568:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800856c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008574:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8008578:	e021      	b.n	80085be <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	ee07 3a90 	vmov	s15, r3
 8008580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008584:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008620 <HAL_RCC_GetSysClockFreq+0x254>
 8008588:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800858c:	4b1d      	ldr	r3, [pc, #116]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 800858e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008594:	ee07 3a90 	vmov	s15, r3
 8008598:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800859c:	ed97 6a02 	vldr	s12, [r7, #8]
 80085a0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8008614 <HAL_RCC_GetSysClockFreq+0x248>
 80085a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80085a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80085ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80085b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80085bc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80085be:	4b11      	ldr	r3, [pc, #68]	; (8008604 <HAL_RCC_GetSysClockFreq+0x238>)
 80085c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c2:	0a5b      	lsrs	r3, r3, #9
 80085c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085c8:	3301      	adds	r3, #1
 80085ca:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	ee07 3a90 	vmov	s15, r3
 80085d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80085d6:	edd7 6a06 	vldr	s13, [r7, #24]
 80085da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085e2:	ee17 3a90 	vmov	r3, s15
 80085e6:	61fb      	str	r3, [r7, #28]
 80085e8:	e004      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80085ea:	2300      	movs	r3, #0
 80085ec:	61fb      	str	r3, [r7, #28]
 80085ee:	e001      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80085f0:	4b06      	ldr	r3, [pc, #24]	; (800860c <HAL_RCC_GetSysClockFreq+0x240>)
 80085f2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80085f4:	69fb      	ldr	r3, [r7, #28]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3724      	adds	r7, #36	; 0x24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	44020c00 	.word	0x44020c00
 8008608:	003d0900 	.word	0x003d0900
 800860c:	03d09000 	.word	0x03d09000
 8008610:	007a1200 	.word	0x007a1200
 8008614:	46000000 	.word	0x46000000
 8008618:	4c742400 	.word	0x4c742400
 800861c:	4af42400 	.word	0x4af42400
 8008620:	4a742400 	.word	0x4a742400

08008624 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8008628:	f7ff fed0 	bl	80083cc <HAL_RCC_GetSysClockFreq>
 800862c:	4602      	mov	r2, r0
 800862e:	4b08      	ldr	r3, [pc, #32]	; (8008650 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008630:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8008632:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8008636:	4907      	ldr	r1, [pc, #28]	; (8008654 <HAL_RCC_GetHCLKFreq+0x30>)
 8008638:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800863a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800863e:	fa22 f303 	lsr.w	r3, r2, r3
 8008642:	4a05      	ldr	r2, [pc, #20]	; (8008658 <HAL_RCC_GetHCLKFreq+0x34>)
 8008644:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8008646:	4b04      	ldr	r3, [pc, #16]	; (8008658 <HAL_RCC_GetHCLKFreq+0x34>)
 8008648:	681b      	ldr	r3, [r3, #0]
}
 800864a:	4618      	mov	r0, r3
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	44020c00 	.word	0x44020c00
 8008654:	080297ec 	.word	0x080297ec
 8008658:	20050000 	.word	0x20050000

0800865c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8008660:	f7ff ffe0 	bl	8008624 <HAL_RCC_GetHCLKFreq>
 8008664:	4602      	mov	r2, r0
 8008666:	4b06      	ldr	r3, [pc, #24]	; (8008680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	091b      	lsrs	r3, r3, #4
 800866c:	f003 0307 	and.w	r3, r3, #7
 8008670:	4904      	ldr	r1, [pc, #16]	; (8008684 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008672:	5ccb      	ldrb	r3, [r1, r3]
 8008674:	f003 031f 	and.w	r3, r3, #31
 8008678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800867c:	4618      	mov	r0, r3
 800867e:	bd80      	pop	{r7, pc}
 8008680:	44020c00 	.word	0x44020c00
 8008684:	080297fc 	.word	0x080297fc

08008688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800868c:	f7ff ffca 	bl	8008624 <HAL_RCC_GetHCLKFreq>
 8008690:	4602      	mov	r2, r0
 8008692:	4b06      	ldr	r3, [pc, #24]	; (80086ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	0a1b      	lsrs	r3, r3, #8
 8008698:	f003 0307 	and.w	r3, r3, #7
 800869c:	4904      	ldr	r1, [pc, #16]	; (80086b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800869e:	5ccb      	ldrb	r3, [r1, r3]
 80086a0:	f003 031f 	and.w	r3, r3, #31
 80086a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	44020c00 	.word	0x44020c00
 80086b0:	080297fc 	.word	0x080297fc

080086b4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80086b8:	f7ff ffb4 	bl	8008624 <HAL_RCC_GetHCLKFreq>
 80086bc:	4602      	mov	r2, r0
 80086be:	4b06      	ldr	r3, [pc, #24]	; (80086d8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	0b1b      	lsrs	r3, r3, #12
 80086c4:	f003 0307 	and.w	r3, r3, #7
 80086c8:	4904      	ldr	r1, [pc, #16]	; (80086dc <HAL_RCC_GetPCLK3Freq+0x28>)
 80086ca:	5ccb      	ldrb	r3, [r1, r3]
 80086cc:	f003 031f 	and.w	r3, r3, #31
 80086d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	44020c00 	.word	0x44020c00
 80086dc:	080297fc 	.word	0x080297fc

080086e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	221f      	movs	r2, #31
 80086ee:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80086f0:	4b15      	ldr	r3, [pc, #84]	; (8008748 <HAL_RCC_GetClockConfig+0x68>)
 80086f2:	69db      	ldr	r3, [r3, #28]
 80086f4:	f003 0203 	and.w	r2, r3, #3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 80086fc:	4b12      	ldr	r3, [pc, #72]	; (8008748 <HAL_RCC_GetClockConfig+0x68>)
 80086fe:	6a1b      	ldr	r3, [r3, #32]
 8008700:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f003 020f 	and.w	r2, r3, #15
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	091b      	lsrs	r3, r3, #4
 800871a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	0a1b      	lsrs	r3, r3, #8
 8008726:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800872e:	4b07      	ldr	r3, [pc, #28]	; (800874c <HAL_RCC_GetClockConfig+0x6c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 020f 	and.w	r2, r3, #15
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	601a      	str	r2, [r3, #0]
}
 800873a:	bf00      	nop
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	44020c00 	.word	0x44020c00
 800874c:	40022000 	.word	0x40022000

08008750 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008754:	b0d8      	sub	sp, #352	; 0x160
 8008756:	af00      	add	r7, sp, #0
 8008758:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800875c:	2300      	movs	r3, #0
 800875e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008762:	2300      	movs	r3, #0
 8008764:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008768:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008770:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8008774:	2500      	movs	r5, #0
 8008776:	ea54 0305 	orrs.w	r3, r4, r5
 800877a:	d00b      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800877c:	4bcd      	ldr	r3, [pc, #820]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800877e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008782:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8008786:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800878a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800878c:	4ac9      	ldr	r2, [pc, #804]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800878e:	430b      	orrs	r3, r1
 8008790:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008794:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879c:	f002 0801 	and.w	r8, r2, #1
 80087a0:	f04f 0900 	mov.w	r9, #0
 80087a4:	ea58 0309 	orrs.w	r3, r8, r9
 80087a8:	d042      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80087aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80087ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087b0:	2b05      	cmp	r3, #5
 80087b2:	d823      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xac>
 80087b4:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80087b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ba:	bf00      	nop
 80087bc:	08008805 	.word	0x08008805
 80087c0:	080087d5 	.word	0x080087d5
 80087c4:	080087e9 	.word	0x080087e9
 80087c8:	08008805 	.word	0x08008805
 80087cc:	08008805 	.word	0x08008805
 80087d0:	08008805 	.word	0x08008805
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80087d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80087d8:	3308      	adds	r3, #8
 80087da:	4618      	mov	r0, r3
 80087dc:	f004 feda 	bl	800d594 <RCCEx_PLL2_Config>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80087e6:	e00e      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80087e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80087ec:	3330      	adds	r3, #48	; 0x30
 80087ee:	4618      	mov	r0, r3
 80087f0:	f004 ff68 	bl	800d6c4 <RCCEx_PLL3_Config>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80087fa:	e004      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008802:	e000      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8008804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008806:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10c      	bne.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800880e:	4ba9      	ldr	r3, [pc, #676]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008810:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008814:	f023 0107 	bic.w	r1, r3, #7
 8008818:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800881c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800881e:	4aa5      	ldr	r2, [pc, #660]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008820:	430b      	orrs	r3, r1
 8008822:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008826:	e003      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008828:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800882c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008830:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008838:	f002 0a02 	and.w	sl, r2, #2
 800883c:	f04f 0b00 	mov.w	fp, #0
 8008840:	ea5a 030b 	orrs.w	r3, sl, fp
 8008844:	f000 8088 	beq.w	8008958 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8008848:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800884c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800884e:	2b28      	cmp	r3, #40	; 0x28
 8008850:	d868      	bhi.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008852:	a201      	add	r2, pc, #4	; (adr r2, 8008858 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8008854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008858:	0800892d 	.word	0x0800892d
 800885c:	08008925 	.word	0x08008925
 8008860:	08008925 	.word	0x08008925
 8008864:	08008925 	.word	0x08008925
 8008868:	08008925 	.word	0x08008925
 800886c:	08008925 	.word	0x08008925
 8008870:	08008925 	.word	0x08008925
 8008874:	08008925 	.word	0x08008925
 8008878:	080088fd 	.word	0x080088fd
 800887c:	08008925 	.word	0x08008925
 8008880:	08008925 	.word	0x08008925
 8008884:	08008925 	.word	0x08008925
 8008888:	08008925 	.word	0x08008925
 800888c:	08008925 	.word	0x08008925
 8008890:	08008925 	.word	0x08008925
 8008894:	08008925 	.word	0x08008925
 8008898:	08008911 	.word	0x08008911
 800889c:	08008925 	.word	0x08008925
 80088a0:	08008925 	.word	0x08008925
 80088a4:	08008925 	.word	0x08008925
 80088a8:	08008925 	.word	0x08008925
 80088ac:	08008925 	.word	0x08008925
 80088b0:	08008925 	.word	0x08008925
 80088b4:	08008925 	.word	0x08008925
 80088b8:	0800892d 	.word	0x0800892d
 80088bc:	08008925 	.word	0x08008925
 80088c0:	08008925 	.word	0x08008925
 80088c4:	08008925 	.word	0x08008925
 80088c8:	08008925 	.word	0x08008925
 80088cc:	08008925 	.word	0x08008925
 80088d0:	08008925 	.word	0x08008925
 80088d4:	08008925 	.word	0x08008925
 80088d8:	0800892d 	.word	0x0800892d
 80088dc:	08008925 	.word	0x08008925
 80088e0:	08008925 	.word	0x08008925
 80088e4:	08008925 	.word	0x08008925
 80088e8:	08008925 	.word	0x08008925
 80088ec:	08008925 	.word	0x08008925
 80088f0:	08008925 	.word	0x08008925
 80088f4:	08008925 	.word	0x08008925
 80088f8:	0800892d 	.word	0x0800892d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80088fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008900:	3308      	adds	r3, #8
 8008902:	4618      	mov	r0, r3
 8008904:	f004 fe46 	bl	800d594 <RCCEx_PLL2_Config>
 8008908:	4603      	mov	r3, r0
 800890a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800890e:	e00e      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008910:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008914:	3330      	adds	r3, #48	; 0x30
 8008916:	4618      	mov	r0, r3
 8008918:	f004 fed4 	bl	800d6c4 <RCCEx_PLL3_Config>
 800891c:	4603      	mov	r3, r0
 800891e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8008922:	e004      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800892a:	e000      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800892c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800892e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10c      	bne.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008936:	4b5f      	ldr	r3, [pc, #380]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008938:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800893c:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008940:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008946:	4a5b      	ldr	r2, [pc, #364]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008948:	430b      	orrs	r3, r1
 800894a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800894e:	e003      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008950:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008954:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008958:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800895c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008960:	f002 0304 	and.w	r3, r2, #4
 8008964:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008968:	2300      	movs	r3, #0
 800896a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800896e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8008972:	460b      	mov	r3, r1
 8008974:	4313      	orrs	r3, r2
 8008976:	d04e      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8008978:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800897c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800897e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008982:	d02c      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8008984:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008988:	d825      	bhi.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800898a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800898e:	d028      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008994:	d81f      	bhi.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008996:	2bc0      	cmp	r3, #192	; 0xc0
 8008998:	d025      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800899a:	2bc0      	cmp	r3, #192	; 0xc0
 800899c:	d81b      	bhi.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800899e:	2b80      	cmp	r3, #128	; 0x80
 80089a0:	d00f      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80089a2:	2b80      	cmp	r3, #128	; 0x80
 80089a4:	d817      	bhi.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d01f      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80089aa:	2b40      	cmp	r3, #64	; 0x40
 80089ac:	d113      	bne.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80089ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80089b2:	3308      	adds	r3, #8
 80089b4:	4618      	mov	r0, r3
 80089b6:	f004 fded 	bl	800d594 <RCCEx_PLL2_Config>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80089c0:	e014      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80089c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80089c6:	3330      	adds	r3, #48	; 0x30
 80089c8:	4618      	mov	r0, r3
 80089ca:	f004 fe7b 	bl	800d6c4 <RCCEx_PLL3_Config>
 80089ce:	4603      	mov	r3, r0
 80089d0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80089d4:	e00a      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80089dc:	e006      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80089de:	bf00      	nop
 80089e0:	e004      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80089e2:	bf00      	nop
 80089e4:	e002      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80089e6:	bf00      	nop
 80089e8:	e000      	b.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80089ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10c      	bne.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80089f4:	4b2f      	ldr	r3, [pc, #188]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80089f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80089fa:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80089fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a04:	4a2b      	ldr	r2, [pc, #172]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008a06:	430b      	orrs	r3, r1
 8008a08:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008a0c:	e003      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008a12:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008a16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1e:	f002 0308 	and.w	r3, r2, #8
 8008a22:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8008a26:	2300      	movs	r3, #0
 8008a28:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8008a2c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8008a30:	460b      	mov	r3, r1
 8008a32:	4313      	orrs	r3, r2
 8008a34:	d056      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8008a36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a3c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008a40:	d031      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8008a42:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008a46:	d82a      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a4c:	d02d      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8008a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a52:	d824      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008a54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008a58:	d029      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8008a5a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008a5e:	d81e      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a64:	d011      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8008a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a6a:	d818      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d023      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a74:	d113      	bne.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a7a:	3308      	adds	r3, #8
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f004 fd89 	bl	800d594 <RCCEx_PLL2_Config>
 8008a82:	4603      	mov	r3, r0
 8008a84:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8008a88:	e017      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008a8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008a8e:	3330      	adds	r3, #48	; 0x30
 8008a90:	4618      	mov	r0, r3
 8008a92:	f004 fe17 	bl	800d6c4 <RCCEx_PLL3_Config>
 8008a96:	4603      	mov	r3, r0
 8008a98:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8008a9c:	e00d      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008aa4:	e009      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8008aa6:	bf00      	nop
 8008aa8:	e007      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8008aaa:	bf00      	nop
 8008aac:	e005      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8008aae:	bf00      	nop
 8008ab0:	e003      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008ab2:	bf00      	nop
 8008ab4:	44020c00 	.word	0x44020c00
        break;
 8008ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10c      	bne.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008ac2:	4bbb      	ldr	r3, [pc, #748]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008ac4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008ac8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8008acc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ad2:	4ab7      	ldr	r2, [pc, #732]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008ad4:	430b      	orrs	r3, r1
 8008ad6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008ada:	e003      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008adc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008ae0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008ae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	f002 0310 	and.w	r3, r2, #16
 8008af0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008af4:	2300      	movs	r3, #0
 8008af6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008afa:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8008afe:	460b      	mov	r3, r1
 8008b00:	4313      	orrs	r3, r2
 8008b02:	d053      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8008b04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b0a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008b0e:	d031      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8008b10:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008b14:	d82a      	bhi.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008b16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b1a:	d02d      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008b1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b20:	d824      	bhi.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008b22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b26:	d029      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8008b28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b2c:	d81e      	bhi.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b32:	d011      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b38:	d818      	bhi.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d020      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8008b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b42:	d113      	bne.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b48:	3308      	adds	r3, #8
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f004 fd22 	bl	800d594 <RCCEx_PLL2_Config>
 8008b50:	4603      	mov	r3, r0
 8008b52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8008b56:	e014      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008b58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b5c:	3330      	adds	r3, #48	; 0x30
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f004 fdb0 	bl	800d6c4 <RCCEx_PLL3_Config>
 8008b64:	4603      	mov	r3, r0
 8008b66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8008b6a:	e00a      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008b72:	e006      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008b74:	bf00      	nop
 8008b76:	e004      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008b78:	bf00      	nop
 8008b7a:	e002      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008b7c:	bf00      	nop
 8008b7e:	e000      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10c      	bne.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008b8a:	4b89      	ldr	r3, [pc, #548]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008b8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008b90:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008b94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b9a:	4a85      	ldr	r2, [pc, #532]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008b9c:	430b      	orrs	r3, r1
 8008b9e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008ba2:	e003      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008ba8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008bac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	f002 0320 	and.w	r3, r2, #32
 8008bb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008bc2:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	d053      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8008bcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd2:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008bd6:	d031      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8008bd8:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008bdc:	d82a      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8008bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008be2:	d02d      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8008be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008be8:	d824      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8008bea:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008bee:	d029      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8008bf0:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008bf4:	d81e      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8008bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bfa:	d011      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c00:	d818      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d020      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8008c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c0a:	d113      	bne.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c10:	3308      	adds	r3, #8
 8008c12:	4618      	mov	r0, r3
 8008c14:	f004 fcbe 	bl	800d594 <RCCEx_PLL2_Config>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8008c1e:	e014      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008c20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c24:	3330      	adds	r3, #48	; 0x30
 8008c26:	4618      	mov	r0, r3
 8008c28:	f004 fd4c 	bl	800d6c4 <RCCEx_PLL3_Config>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8008c32:	e00a      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008c3a:	e006      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008c3c:	bf00      	nop
 8008c3e:	e004      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008c40:	bf00      	nop
 8008c42:	e002      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008c44:	bf00      	nop
 8008c46:	e000      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c4a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10c      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8008c52:	4b57      	ldr	r3, [pc, #348]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008c54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008c58:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8008c5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c62:	4a53      	ldr	r2, [pc, #332]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008c64:	430b      	orrs	r3, r1
 8008c66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008c6a:	e003      	b.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008c70:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008c74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008c80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008c84:	2300      	movs	r3, #0
 8008c86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008c8a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4313      	orrs	r3, r2
 8008c92:	d053      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8008c94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c9a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008c9e:	d031      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8008ca0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008ca4:	d82a      	bhi.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008caa:	d02d      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8008cac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cb0:	d824      	bhi.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008cb2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008cb6:	d029      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008cb8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008cbc:	d81e      	bhi.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008cbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008cc2:	d011      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8008cc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008cc8:	d818      	bhi.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d020      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008cce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008cd2:	d113      	bne.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008cd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008cd8:	3308      	adds	r3, #8
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f004 fc5a 	bl	800d594 <RCCEx_PLL2_Config>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8008ce6:	e014      	b.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008ce8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008cec:	3330      	adds	r3, #48	; 0x30
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f004 fce8 	bl	800d6c4 <RCCEx_PLL3_Config>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8008cfa:	e00a      	b.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008d02:	e006      	b.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008d04:	bf00      	nop
 8008d06:	e004      	b.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008d08:	bf00      	nop
 8008d0a:	e002      	b.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008d0c:	bf00      	nop
 8008d0e:	e000      	b.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d12:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10c      	bne.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8008d1a:	4b25      	ldr	r3, [pc, #148]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008d1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008d20:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8008d24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d2a:	4a21      	ldr	r2, [pc, #132]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008d2c:	430b      	orrs	r3, r1
 8008d2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008d32:	e003      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d34:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008d38:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008d3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008d48:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008d52:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8008d56:	460b      	mov	r3, r1
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	d055      	beq.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8008d5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d62:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008d66:	d033      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8008d68:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008d6c:	d82c      	bhi.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008d6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d72:	d02f      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8008d74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008d78:	d826      	bhi.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008d7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d7e:	d02b      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8008d80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008d84:	d820      	bhi.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d8a:	d013      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d90:	d81a      	bhi.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d022      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8008d96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d9a:	d115      	bne.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008d9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008da0:	3308      	adds	r3, #8
 8008da2:	4618      	mov	r0, r3
 8008da4:	f004 fbf6 	bl	800d594 <RCCEx_PLL2_Config>
 8008da8:	4603      	mov	r3, r0
 8008daa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8008dae:	e016      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8008db0:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008db4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008db8:	3330      	adds	r3, #48	; 0x30
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f004 fc82 	bl	800d6c4 <RCCEx_PLL3_Config>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8008dc6:	e00a      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008dce:	e006      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008dd0:	bf00      	nop
 8008dd2:	e004      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008dd4:	bf00      	nop
 8008dd6:	e002      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008dd8:	bf00      	nop
 8008dda:	e000      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dde:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10c      	bne.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8008de6:	4bbb      	ldr	r3, [pc, #748]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008dec:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008df6:	4ab7      	ldr	r2, [pc, #732]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008df8:	430b      	orrs	r3, r1
 8008dfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008dfe:	e003      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e00:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008e04:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8008e08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e10:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8008e14:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008e1e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8008e22:	460b      	mov	r3, r1
 8008e24:	4313      	orrs	r3, r2
 8008e26:	d053      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8008e28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e2e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008e32:	d031      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8008e34:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008e38:	d82a      	bhi.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008e3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e3e:	d02d      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8008e40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e44:	d824      	bhi.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008e46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e4a:	d029      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8008e4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e50:	d81e      	bhi.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008e52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e56:	d011      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8008e58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e5c:	d818      	bhi.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d020      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8008e62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e66:	d113      	bne.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e6c:	3308      	adds	r3, #8
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f004 fb90 	bl	800d594 <RCCEx_PLL2_Config>
 8008e74:	4603      	mov	r3, r0
 8008e76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8008e7a:	e014      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008e7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e80:	3330      	adds	r3, #48	; 0x30
 8008e82:	4618      	mov	r0, r3
 8008e84:	f004 fc1e 	bl	800d6c4 <RCCEx_PLL3_Config>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8008e8e:	e00a      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008e96:	e006      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008e98:	bf00      	nop
 8008e9a:	e004      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008e9c:	bf00      	nop
 8008e9e:	e002      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008ea0:	bf00      	nop
 8008ea2:	e000      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ea6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10c      	bne.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8008eae:	4b89      	ldr	r3, [pc, #548]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008eb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008eb4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008eb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ebe:	4a85      	ldr	r2, [pc, #532]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008ec0:	430b      	orrs	r3, r1
 8008ec2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008ec6:	e003      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008ecc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8008ed0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8008edc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008ee6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008eea:	460b      	mov	r3, r1
 8008eec:	4313      	orrs	r3, r2
 8008eee:	d055      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8008ef0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ef8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8008efc:	d031      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8008efe:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8008f02:	d82a      	bhi.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f08:	d02d      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8008f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f0e:	d824      	bhi.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008f10:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008f14:	d029      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8008f16:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008f1a:	d81e      	bhi.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f20:	d011      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8008f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f26:	d818      	bhi.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d020      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8008f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f30:	d113      	bne.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f36:	3308      	adds	r3, #8
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f004 fb2b 	bl	800d594 <RCCEx_PLL2_Config>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8008f44:	e014      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008f46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f4a:	3330      	adds	r3, #48	; 0x30
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f004 fbb9 	bl	800d6c4 <RCCEx_PLL3_Config>
 8008f52:	4603      	mov	r3, r0
 8008f54:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8008f58:	e00a      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8008f60:	e006      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008f62:	bf00      	nop
 8008f64:	e004      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008f66:	bf00      	nop
 8008f68:	e002      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008f6a:	bf00      	nop
 8008f6c:	e000      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f70:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10d      	bne.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8008f78:	4b56      	ldr	r3, [pc, #344]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008f7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008f7e:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8008f82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f8a:	4a52      	ldr	r2, [pc, #328]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008f8c:	430b      	orrs	r3, r1
 8008f8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008f92:	e003      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f94:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8008f98:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8008f9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008fa8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008fac:	2300      	movs	r3, #0
 8008fae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008fb2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	d044      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8008fbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fc4:	2b05      	cmp	r3, #5
 8008fc6:	d823      	bhi.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8008fc8:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8008fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fce:	bf00      	nop
 8008fd0:	08009019 	.word	0x08009019
 8008fd4:	08008fe9 	.word	0x08008fe9
 8008fd8:	08008ffd 	.word	0x08008ffd
 8008fdc:	08009019 	.word	0x08009019
 8008fe0:	08009019 	.word	0x08009019
 8008fe4:	08009019 	.word	0x08009019
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008fe8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fec:	3308      	adds	r3, #8
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f004 fad0 	bl	800d594 <RCCEx_PLL2_Config>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8008ffa:	e00e      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009000:	3330      	adds	r3, #48	; 0x30
 8009002:	4618      	mov	r0, r3
 8009004:	f004 fb5e 	bl	800d6c4 <RCCEx_PLL3_Config>
 8009008:	4603      	mov	r3, r0
 800900a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800900e:	e004      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009016:	e000      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8009018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800901a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10d      	bne.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8009022:	4b2c      	ldr	r3, [pc, #176]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8009024:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009028:	f023 0107 	bic.w	r1, r3, #7
 800902c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009034:	4a27      	ldr	r2, [pc, #156]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8009036:	430b      	orrs	r3, r1
 8009038:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800903c:	e003      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800903e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009042:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8009046:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800904a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009052:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009056:	2300      	movs	r3, #0
 8009058:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800905c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009060:	460b      	mov	r3, r1
 8009062:	4313      	orrs	r3, r2
 8009064:	d04f      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8009066:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800906a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800906e:	2b50      	cmp	r3, #80	; 0x50
 8009070:	d029      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8009072:	2b50      	cmp	r3, #80	; 0x50
 8009074:	d823      	bhi.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009076:	2b40      	cmp	r3, #64	; 0x40
 8009078:	d027      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800907a:	2b40      	cmp	r3, #64	; 0x40
 800907c:	d81f      	bhi.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800907e:	2b30      	cmp	r3, #48	; 0x30
 8009080:	d025      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8009082:	2b30      	cmp	r3, #48	; 0x30
 8009084:	d81b      	bhi.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009086:	2b20      	cmp	r3, #32
 8009088:	d00f      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800908a:	2b20      	cmp	r3, #32
 800908c:	d817      	bhi.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800908e:	2b00      	cmp	r3, #0
 8009090:	d022      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8009092:	2b10      	cmp	r3, #16
 8009094:	d113      	bne.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009096:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800909a:	3308      	adds	r3, #8
 800909c:	4618      	mov	r0, r3
 800909e:	f004 fa79 	bl	800d594 <RCCEx_PLL2_Config>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80090a8:	e017      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80090aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80090ae:	3330      	adds	r3, #48	; 0x30
 80090b0:	4618      	mov	r0, r3
 80090b2:	f004 fb07 	bl	800d6c4 <RCCEx_PLL3_Config>
 80090b6:	4603      	mov	r3, r0
 80090b8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80090bc:	e00d      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80090c4:	e009      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80090c6:	bf00      	nop
 80090c8:	e007      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80090ca:	bf00      	nop
 80090cc:	e005      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80090ce:	bf00      	nop
 80090d0:	e003      	b.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80090d2:	bf00      	nop
 80090d4:	44020c00 	.word	0x44020c00
        break;
 80090d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10d      	bne.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80090e2:	4baf      	ldr	r3, [pc, #700]	; (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80090e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80090e8:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80090ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80090f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090f4:	4aaa      	ldr	r2, [pc, #680]	; (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80090f6:	430b      	orrs	r3, r1
 80090f8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80090fc:	e003      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009102:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009106:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009112:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009116:	2300      	movs	r3, #0
 8009118:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800911c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009120:	460b      	mov	r3, r1
 8009122:	4313      	orrs	r3, r2
 8009124:	d055      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8009126:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800912a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800912e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009132:	d031      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8009134:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009138:	d82a      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800913a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800913e:	d02d      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8009140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009144:	d824      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8009146:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800914a:	d029      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800914c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009150:	d81e      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8009152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009156:	d011      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8009158:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800915c:	d818      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800915e:	2b00      	cmp	r3, #0
 8009160:	d020      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8009162:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009166:	d113      	bne.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009168:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800916c:	3308      	adds	r3, #8
 800916e:	4618      	mov	r0, r3
 8009170:	f004 fa10 	bl	800d594 <RCCEx_PLL2_Config>
 8009174:	4603      	mov	r3, r0
 8009176:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800917a:	e014      	b.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800917c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009180:	3330      	adds	r3, #48	; 0x30
 8009182:	4618      	mov	r0, r3
 8009184:	f004 fa9e 	bl	800d6c4 <RCCEx_PLL3_Config>
 8009188:	4603      	mov	r3, r0
 800918a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800918e:	e00a      	b.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009196:	e006      	b.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8009198:	bf00      	nop
 800919a:	e004      	b.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800919c:	bf00      	nop
 800919e:	e002      	b.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80091a0:	bf00      	nop
 80091a2:	e000      	b.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80091a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10d      	bne.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80091ae:	4b7c      	ldr	r3, [pc, #496]	; (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80091b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091b4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80091b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091c0:	4a77      	ldr	r2, [pc, #476]	; (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80091c2:	430b      	orrs	r3, r1
 80091c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80091c8:	e003      	b.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80091ce:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80091d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091da:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80091de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091e2:	2300      	movs	r3, #0
 80091e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80091e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80091ec:	460b      	mov	r3, r1
 80091ee:	4313      	orrs	r3, r2
 80091f0:	d03d      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80091f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80091fe:	d01b      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8009200:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009204:	d814      	bhi.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8009206:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800920a:	d017      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800920c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009210:	d80e      	bhi.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8009212:	2b00      	cmp	r3, #0
 8009214:	d014      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8009216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800921a:	d109      	bne.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800921c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009220:	3330      	adds	r3, #48	; 0x30
 8009222:	4618      	mov	r0, r3
 8009224:	f004 fa4e 	bl	800d6c4 <RCCEx_PLL3_Config>
 8009228:	4603      	mov	r3, r0
 800922a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800922e:	e008      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009236:	e004      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8009238:	bf00      	nop
 800923a:	e002      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800923c:	bf00      	nop
 800923e:	e000      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8009240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009242:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10d      	bne.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800924a:	4b55      	ldr	r3, [pc, #340]	; (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800924c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009250:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009254:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800925c:	4a50      	ldr	r2, [pc, #320]	; (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800925e:	430b      	orrs	r3, r1
 8009260:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009264:	e003      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009266:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800926a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800926e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009276:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800927a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800927e:	2300      	movs	r3, #0
 8009280:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009284:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009288:	460b      	mov	r3, r1
 800928a:	4313      	orrs	r3, r2
 800928c:	d03d      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800928e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009296:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800929a:	d01b      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800929c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80092a0:	d814      	bhi.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80092a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80092a6:	d017      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80092a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80092ac:	d80e      	bhi.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d014      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80092b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092b6:	d109      	bne.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80092b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092bc:	3330      	adds	r3, #48	; 0x30
 80092be:	4618      	mov	r0, r3
 80092c0:	f004 fa00 	bl	800d6c4 <RCCEx_PLL3_Config>
 80092c4:	4603      	mov	r3, r0
 80092c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80092ca:	e008      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80092d2:	e004      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80092d4:	bf00      	nop
 80092d6:	e002      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80092d8:	bf00      	nop
 80092da:	e000      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80092dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10d      	bne.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80092e6:	4b2e      	ldr	r3, [pc, #184]	; (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80092e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80092ec:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80092f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092f8:	4a29      	ldr	r2, [pc, #164]	; (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80092fa:	430b      	orrs	r3, r1
 80092fc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009300:	e003      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009302:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009306:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800930a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800930e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009312:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800931a:	2300      	movs	r3, #0
 800931c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009320:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009324:	460b      	mov	r3, r1
 8009326:	4313      	orrs	r3, r2
 8009328:	d040      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800932a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800932e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009332:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009336:	d01b      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8009338:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800933c:	d814      	bhi.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800933e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009342:	d017      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009348:	d80e      	bhi.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800934a:	2b00      	cmp	r3, #0
 800934c:	d014      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800934e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009352:	d109      	bne.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009354:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009358:	3330      	adds	r3, #48	; 0x30
 800935a:	4618      	mov	r0, r3
 800935c:	f004 f9b2 	bl	800d6c4 <RCCEx_PLL3_Config>
 8009360:	4603      	mov	r3, r0
 8009362:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8009366:	e008      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800936e:	e004      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8009370:	bf00      	nop
 8009372:	e002      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8009374:	bf00      	nop
 8009376:	e000      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8009378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800937a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800937e:	2b00      	cmp	r3, #0
 8009380:	d110      	bne.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8009382:	4b07      	ldr	r3, [pc, #28]	; (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009384:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009388:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800938c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009394:	4a02      	ldr	r2, [pc, #8]	; (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009396:	430b      	orrs	r3, r1
 8009398:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800939c:	e006      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800939e:	bf00      	nop
 80093a0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80093a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80093ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b4:	2100      	movs	r1, #0
 80093b6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80093ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80093c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4313      	orrs	r3, r2
 80093ca:	d03d      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80093cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80093d8:	d01b      	beq.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80093da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80093de:	d814      	bhi.n	800940a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80093e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093e4:	d017      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80093e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093ea:	d80e      	bhi.n	800940a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d014      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80093f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093f4:	d109      	bne.n	800940a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80093f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093fa:	3330      	adds	r3, #48	; 0x30
 80093fc:	4618      	mov	r0, r3
 80093fe:	f004 f961 	bl	800d6c4 <RCCEx_PLL3_Config>
 8009402:	4603      	mov	r3, r0
 8009404:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8009408:	e008      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009410:	e004      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8009412:	bf00      	nop
 8009414:	e002      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8009416:	bf00      	nop
 8009418:	e000      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800941a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800941c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10d      	bne.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8009424:	4bbe      	ldr	r3, [pc, #760]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009426:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800942a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800942e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009432:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009436:	4aba      	ldr	r2, [pc, #744]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009438:	430b      	orrs	r3, r1
 800943a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800943e:	e003      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009440:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009444:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8009448:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800944c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009450:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009454:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009458:	2300      	movs	r3, #0
 800945a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800945e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009462:	460b      	mov	r3, r1
 8009464:	4313      	orrs	r3, r2
 8009466:	d035      	beq.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8009468:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800946c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009470:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009474:	d015      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8009476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800947a:	d80e      	bhi.n	800949a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800947c:	2b00      	cmp	r3, #0
 800947e:	d012      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8009480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009484:	d109      	bne.n	800949a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009486:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800948a:	3330      	adds	r3, #48	; 0x30
 800948c:	4618      	mov	r0, r3
 800948e:	f004 f919 	bl	800d6c4 <RCCEx_PLL3_Config>
 8009492:	4603      	mov	r3, r0
 8009494:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8009498:	e006      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80094a0:	e002      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80094a2:	bf00      	nop
 80094a4:	e000      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80094a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094a8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d10d      	bne.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80094b0:	4b9b      	ldr	r3, [pc, #620]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80094b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80094b6:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 80094ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80094c2:	4a97      	ldr	r2, [pc, #604]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80094c4:	430b      	orrs	r3, r1
 80094c6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80094ca:	e003      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094cc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80094d0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80094d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80094d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094dc:	2100      	movs	r1, #0
 80094de:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80094e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80094ee:	460b      	mov	r3, r1
 80094f0:	4313      	orrs	r3, r2
 80094f2:	d00e      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80094f4:	4b8a      	ldr	r3, [pc, #552]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80094f6:	69db      	ldr	r3, [r3, #28]
 80094f8:	4a89      	ldr	r2, [pc, #548]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80094fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094fe:	61d3      	str	r3, [r2, #28]
 8009500:	4b87      	ldr	r3, [pc, #540]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009502:	69d9      	ldr	r1, [r3, #28]
 8009504:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009508:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800950c:	4a84      	ldr	r2, [pc, #528]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800950e:	430b      	orrs	r3, r1
 8009510:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009512:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800951e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009522:	2300      	movs	r3, #0
 8009524:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009528:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800952c:	460b      	mov	r3, r1
 800952e:	4313      	orrs	r3, r2
 8009530:	d055      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8009532:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009536:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800953a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800953e:	d031      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8009540:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009544:	d82a      	bhi.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8009546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800954a:	d02d      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800954c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009550:	d824      	bhi.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8009552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009556:	d029      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8009558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800955c:	d81e      	bhi.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800955e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009562:	d011      	beq.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8009564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009568:	d818      	bhi.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800956a:	2b00      	cmp	r3, #0
 800956c:	d020      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800956e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009572:	d113      	bne.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009574:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009578:	3308      	adds	r3, #8
 800957a:	4618      	mov	r0, r3
 800957c:	f004 f80a 	bl	800d594 <RCCEx_PLL2_Config>
 8009580:	4603      	mov	r3, r0
 8009582:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8009586:	e014      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009588:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800958c:	3330      	adds	r3, #48	; 0x30
 800958e:	4618      	mov	r0, r3
 8009590:	f004 f898 	bl	800d6c4 <RCCEx_PLL3_Config>
 8009594:	4603      	mov	r3, r0
 8009596:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800959a:	e00a      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80095a2:	e006      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80095a4:	bf00      	nop
 80095a6:	e004      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80095a8:	bf00      	nop
 80095aa:	e002      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80095ac:	bf00      	nop
 80095ae:	e000      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80095b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10d      	bne.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80095ba:	4b59      	ldr	r3, [pc, #356]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80095bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80095c0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80095c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80095c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095cc:	4a54      	ldr	r2, [pc, #336]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80095ce:	430b      	orrs	r3, r1
 80095d0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80095d4:	e003      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80095da:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80095de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80095e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80095ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095ee:	2300      	movs	r3, #0
 80095f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80095f4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80095f8:	460b      	mov	r3, r1
 80095fa:	4313      	orrs	r3, r2
 80095fc:	d055      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80095fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009602:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009606:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800960a:	d031      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 800960c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009610:	d82a      	bhi.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8009612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009616:	d02d      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8009618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800961c:	d824      	bhi.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800961e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009622:	d029      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8009624:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009628:	d81e      	bhi.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800962a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800962e:	d011      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8009630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009634:	d818      	bhi.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8009636:	2b00      	cmp	r3, #0
 8009638:	d020      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800963a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800963e:	d113      	bne.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009640:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009644:	3308      	adds	r3, #8
 8009646:	4618      	mov	r0, r3
 8009648:	f003 ffa4 	bl	800d594 <RCCEx_PLL2_Config>
 800964c:	4603      	mov	r3, r0
 800964e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8009652:	e014      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009654:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009658:	3330      	adds	r3, #48	; 0x30
 800965a:	4618      	mov	r0, r3
 800965c:	f004 f832 	bl	800d6c4 <RCCEx_PLL3_Config>
 8009660:	4603      	mov	r3, r0
 8009662:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8009666:	e00a      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800966e:	e006      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8009670:	bf00      	nop
 8009672:	e004      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8009674:	bf00      	nop
 8009676:	e002      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8009678:	bf00      	nop
 800967a:	e000      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800967c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800967e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10d      	bne.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8009686:	4b26      	ldr	r3, [pc, #152]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009688:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800968c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009690:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009694:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009698:	4a21      	ldr	r2, [pc, #132]	; (8009720 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800969a:	430b      	orrs	r3, r1
 800969c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80096a0:	e003      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80096a6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80096aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b2:	2100      	movs	r1, #0
 80096b4:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 80096b8:	f003 0320 	and.w	r3, r3, #32
 80096bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80096c4:	460b      	mov	r3, r1
 80096c6:	4313      	orrs	r3, r2
 80096c8:	d057      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80096ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80096ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80096d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096d6:	d033      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80096d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096dc:	d82c      	bhi.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80096de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096e2:	d02f      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80096e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096e8:	d826      	bhi.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80096ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80096ee:	d02b      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80096f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80096f4:	d820      	bhi.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80096f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096fa:	d013      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80096fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009700:	d81a      	bhi.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8009702:	2b00      	cmp	r3, #0
 8009704:	d022      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8009706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800970a:	d115      	bne.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800970c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009710:	3308      	adds	r3, #8
 8009712:	4618      	mov	r0, r3
 8009714:	f003 ff3e 	bl	800d594 <RCCEx_PLL2_Config>
 8009718:	4603      	mov	r3, r0
 800971a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800971e:	e016      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8009720:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009724:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009728:	3330      	adds	r3, #48	; 0x30
 800972a:	4618      	mov	r0, r3
 800972c:	f003 ffca 	bl	800d6c4 <RCCEx_PLL3_Config>
 8009730:	4603      	mov	r3, r0
 8009732:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8009736:	e00a      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800973e:	e006      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009740:	bf00      	nop
 8009742:	e004      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009744:	bf00      	nop
 8009746:	e002      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009748:	bf00      	nop
 800974a:	e000      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800974c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800974e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10d      	bne.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8009756:	4bbb      	ldr	r3, [pc, #748]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009758:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800975c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009760:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009764:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009768:	4ab6      	ldr	r2, [pc, #728]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800976a:	430b      	orrs	r3, r1
 800976c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009770:	e003      	b.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009772:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009776:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800977a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	2100      	movs	r1, #0
 8009784:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8009788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009790:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009794:	460b      	mov	r3, r1
 8009796:	4313      	orrs	r3, r2
 8009798:	d055      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800979a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800979e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097a2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80097a6:	d031      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80097a8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80097ac:	d82a      	bhi.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80097ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097b2:	d02d      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80097b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097b8:	d824      	bhi.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80097ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097be:	d029      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80097c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097c4:	d81e      	bhi.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80097c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097ca:	d011      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80097cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097d0:	d818      	bhi.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d020      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80097d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097da:	d113      	bne.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80097dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097e0:	3308      	adds	r3, #8
 80097e2:	4618      	mov	r0, r3
 80097e4:	f003 fed6 	bl	800d594 <RCCEx_PLL2_Config>
 80097e8:	4603      	mov	r3, r0
 80097ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80097ee:	e014      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80097f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80097f4:	3330      	adds	r3, #48	; 0x30
 80097f6:	4618      	mov	r0, r3
 80097f8:	f003 ff64 	bl	800d6c4 <RCCEx_PLL3_Config>
 80097fc:	4603      	mov	r3, r0
 80097fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8009802:	e00a      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800980a:	e006      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800980c:	bf00      	nop
 800980e:	e004      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009810:	bf00      	nop
 8009812:	e002      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009814:	bf00      	nop
 8009816:	e000      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800981a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10d      	bne.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8009822:	4b88      	ldr	r3, [pc, #544]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009824:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009828:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 800982c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009830:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009834:	4a83      	ldr	r2, [pc, #524]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009836:	430b      	orrs	r3, r1
 8009838:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800983c:	e003      	b.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800983e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009842:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8009846:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	2100      	movs	r1, #0
 8009850:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8009854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800985c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009860:	460b      	mov	r3, r1
 8009862:	4313      	orrs	r3, r2
 8009864:	d055      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8009866:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800986a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800986e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009872:	d031      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8009874:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009878:	d82a      	bhi.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800987a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800987e:	d02d      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8009880:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009884:	d824      	bhi.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8009886:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800988a:	d029      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800988c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009890:	d81e      	bhi.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8009892:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009896:	d011      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8009898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800989c:	d818      	bhi.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d020      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80098a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80098a6:	d113      	bne.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80098a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098ac:	3308      	adds	r3, #8
 80098ae:	4618      	mov	r0, r3
 80098b0:	f003 fe70 	bl	800d594 <RCCEx_PLL2_Config>
 80098b4:	4603      	mov	r3, r0
 80098b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80098ba:	e014      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80098bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098c0:	3330      	adds	r3, #48	; 0x30
 80098c2:	4618      	mov	r0, r3
 80098c4:	f003 fefe 	bl	800d6c4 <RCCEx_PLL3_Config>
 80098c8:	4603      	mov	r3, r0
 80098ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80098ce:	e00a      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80098d6:	e006      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80098d8:	bf00      	nop
 80098da:	e004      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80098dc:	bf00      	nop
 80098de:	e002      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80098e0:	bf00      	nop
 80098e2:	e000      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80098e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10d      	bne.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80098ee:	4b55      	ldr	r3, [pc, #340]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80098f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80098f4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80098f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80098fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009900:	4a50      	ldr	r2, [pc, #320]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009902:	430b      	orrs	r3, r1
 8009904:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8009908:	e003      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800990a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800990e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8009912:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	2100      	movs	r1, #0
 800991c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8009920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009924:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009928:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800992c:	460b      	mov	r3, r1
 800992e:	4313      	orrs	r3, r2
 8009930:	d055      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8009932:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009936:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800993a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800993e:	d031      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8009940:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009944:	d82a      	bhi.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8009946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800994a:	d02d      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800994c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009950:	d824      	bhi.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8009952:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009956:	d029      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8009958:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800995c:	d81e      	bhi.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800995e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009962:	d011      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8009964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009968:	d818      	bhi.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800996a:	2b00      	cmp	r3, #0
 800996c:	d020      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800996e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009972:	d113      	bne.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009974:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009978:	3308      	adds	r3, #8
 800997a:	4618      	mov	r0, r3
 800997c:	f003 fe0a 	bl	800d594 <RCCEx_PLL2_Config>
 8009980:	4603      	mov	r3, r0
 8009982:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8009986:	e014      	b.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009988:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800998c:	3330      	adds	r3, #48	; 0x30
 800998e:	4618      	mov	r0, r3
 8009990:	f003 fe98 	bl	800d6c4 <RCCEx_PLL3_Config>
 8009994:	4603      	mov	r3, r0
 8009996:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800999a:	e00a      	b.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80099a2:	e006      	b.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80099a4:	bf00      	nop
 80099a6:	e004      	b.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80099a8:	bf00      	nop
 80099aa:	e002      	b.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80099ac:	bf00      	nop
 80099ae:	e000      	b.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80099b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10d      	bne.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80099ba:	4b22      	ldr	r3, [pc, #136]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80099bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80099c0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80099c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80099c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80099cc:	4a1d      	ldr	r2, [pc, #116]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80099ce:	430b      	orrs	r3, r1
 80099d0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80099d4:	e003      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80099da:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80099de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80099ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80099ee:	2300      	movs	r3, #0
 80099f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80099f4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80099f8:	460b      	mov	r3, r1
 80099fa:	4313      	orrs	r3, r2
 80099fc:	d055      	beq.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80099fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a02:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009a06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a0a:	d035      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8009a0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a10:	d82e      	bhi.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8009a12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a16:	d031      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8009a18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009a1c:	d828      	bhi.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8009a1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a22:	d01b      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8009a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a28:	d822      	bhi.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d003      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8009a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a32:	d009      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8009a34:	e01c      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a36:	4b03      	ldr	r3, [pc, #12]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3a:	4a02      	ldr	r2, [pc, #8]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a40:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009a42:	e01c      	b.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8009a44:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009a48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a4c:	3308      	adds	r3, #8
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f003 fda0 	bl	800d594 <RCCEx_PLL2_Config>
 8009a54:	4603      	mov	r3, r0
 8009a56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009a5a:	e010      	b.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009a5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a60:	3330      	adds	r3, #48	; 0x30
 8009a62:	4618      	mov	r0, r3
 8009a64:	f003 fe2e 	bl	800d6c4 <RCCEx_PLL3_Config>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009a6e:	e006      	b.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009a76:	e002      	b.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8009a78:	bf00      	nop
 8009a7a:	e000      	b.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8009a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a7e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10d      	bne.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8009a86:	4bc3      	ldr	r3, [pc, #780]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009a8c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009a94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009a98:	4abe      	ldr	r2, [pc, #760]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009a9a:	430b      	orrs	r3, r1
 8009a9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009aa0:	e003      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009aa6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8009aaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009ab6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009aba:	2300      	movs	r3, #0
 8009abc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ac0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	d051      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8009aca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ace:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009ad2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ad6:	d033      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8009ad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009adc:	d82c      	bhi.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8009ade:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009ae2:	d02d      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8009ae4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009ae8:	d826      	bhi.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8009aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aee:	d019      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8009af0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009af4:	d820      	bhi.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d003      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8009afa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009afe:	d007      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8009b00:	e01a      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b02:	4ba4      	ldr	r3, [pc, #656]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b06:	4aa3      	ldr	r2, [pc, #652]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b0c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009b0e:	e018      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009b10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b14:	3308      	adds	r3, #8
 8009b16:	4618      	mov	r0, r3
 8009b18:	f003 fd3c 	bl	800d594 <RCCEx_PLL2_Config>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009b22:	e00e      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009b24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b28:	3330      	adds	r3, #48	; 0x30
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f003 fdca 	bl	800d6c4 <RCCEx_PLL3_Config>
 8009b30:	4603      	mov	r3, r0
 8009b32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009b36:	e004      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009b3e:	e000      	b.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8009b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b42:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d10d      	bne.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009b4a:	4b92      	ldr	r3, [pc, #584]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b50:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8009b54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b58:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009b5c:	4a8d      	ldr	r2, [pc, #564]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009b5e:	430b      	orrs	r3, r1
 8009b60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009b64:	e003      	b.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b66:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009b6a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009b6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b76:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009b7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b80:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009b84:	460b      	mov	r3, r1
 8009b86:	4313      	orrs	r3, r2
 8009b88:	d032      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009b8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009b92:	2b05      	cmp	r3, #5
 8009b94:	d80f      	bhi.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8009b96:	2b03      	cmp	r3, #3
 8009b98:	d211      	bcs.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d911      	bls.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d109      	bne.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009ba2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ba6:	3308      	adds	r3, #8
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f003 fcf3 	bl	800d594 <RCCEx_PLL2_Config>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009bb4:	e006      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009bbc:	e002      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8009bbe:	bf00      	nop
 8009bc0:	e000      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8009bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bc4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10d      	bne.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009bcc:	4b71      	ldr	r3, [pc, #452]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009bce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009bd2:	f023 0107 	bic.w	r1, r3, #7
 8009bd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009bda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009bde:	4a6d      	ldr	r2, [pc, #436]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009be0:	430b      	orrs	r3, r1
 8009be2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009be6:	e003      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009bec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8009bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	6739      	str	r1, [r7, #112]	; 0x70
 8009bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c00:	677b      	str	r3, [r7, #116]	; 0x74
 8009c02:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009c06:	460b      	mov	r3, r1
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	d024      	beq.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8009c0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d005      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8009c18:	2b08      	cmp	r3, #8
 8009c1a:	d005      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009c22:	e002      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8009c24:	bf00      	nop
 8009c26:	e000      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8009c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c2a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10d      	bne.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8009c32:	4b58      	ldr	r3, [pc, #352]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009c38:	f023 0108 	bic.w	r1, r3, #8
 8009c3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009c44:	4a53      	ldr	r2, [pc, #332]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009c46:	430b      	orrs	r3, r1
 8009c48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009c4c:	e003      	b.n	8009c56 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009c52:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009c62:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c64:	2300      	movs	r3, #0
 8009c66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c68:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	f000 80b9 	beq.w	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8009c74:	4b48      	ldr	r3, [pc, #288]	; (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8009c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c78:	4a47      	ldr	r2, [pc, #284]	; (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8009c7a:	f043 0301 	orr.w	r3, r3, #1
 8009c7e:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c80:	f7fa fa32 	bl	80040e8 <HAL_GetTick>
 8009c84:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009c88:	e00b      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c8a:	f7fa fa2d 	bl	80040e8 <HAL_GetTick>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d903      	bls.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009ca0:	e005      	b.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009ca2:	4b3d      	ldr	r3, [pc, #244]	; (8009d98 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0ed      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8009cae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f040 8093 	bne.w	8009dde <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009cb8:	4b36      	ldr	r3, [pc, #216]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cc2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009cc6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d023      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8009cce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009cd2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8009cd6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d01b      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009cde:	4b2d      	ldr	r3, [pc, #180]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ce8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009cec:	4b29      	ldr	r3, [pc, #164]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009cee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009cf2:	4a28      	ldr	r2, [pc, #160]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cf8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009cfc:	4b25      	ldr	r3, [pc, #148]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009d02:	4a24      	ldr	r2, [pc, #144]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009d0c:	4a21      	ldr	r2, [pc, #132]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009d0e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009d12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009d16:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d019      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d22:	f7fa f9e1 	bl	80040e8 <HAL_GetTick>
 8009d26:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d2a:	e00d      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d2c:	f7fa f9dc 	bl	80040e8 <HAL_GetTick>
 8009d30:	4602      	mov	r2, r0
 8009d32:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009d36:	1ad2      	subs	r2, r2, r3
 8009d38:	f241 3388 	movw	r3, #5000	; 0x1388
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d903      	bls.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8009d46:	e006      	b.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d48:	4b12      	ldr	r3, [pc, #72]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009d4e:	f003 0302 	and.w	r3, r3, #2
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d0ea      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8009d56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d13a      	bne.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8009d5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d62:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d6e:	d115      	bne.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8009d70:	4b08      	ldr	r3, [pc, #32]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009d72:	69db      	ldr	r3, [r3, #28]
 8009d74:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009d7c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009d80:	091b      	lsrs	r3, r3, #4
 8009d82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009d86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009d8a:	4a02      	ldr	r2, [pc, #8]	; (8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009d8c:	430b      	orrs	r3, r1
 8009d8e:	61d3      	str	r3, [r2, #28]
 8009d90:	e00a      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8009d92:	bf00      	nop
 8009d94:	44020c00 	.word	0x44020c00
 8009d98:	44020800 	.word	0x44020800
 8009d9c:	4b9f      	ldr	r3, [pc, #636]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009d9e:	69db      	ldr	r3, [r3, #28]
 8009da0:	4a9e      	ldr	r2, [pc, #632]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009da2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009da6:	61d3      	str	r3, [r2, #28]
 8009da8:	4b9c      	ldr	r3, [pc, #624]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009dae:	4a9b      	ldr	r2, [pc, #620]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009db4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009db8:	4b98      	ldr	r3, [pc, #608]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009dba:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8009dbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009dc2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dca:	4a94      	ldr	r2, [pc, #592]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009dcc:	430b      	orrs	r3, r1
 8009dce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009dd2:	e008      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009dd4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009dd8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8009ddc:	e003      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dde:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009de2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009de6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dee:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8009df2:	663b      	str	r3, [r7, #96]	; 0x60
 8009df4:	2300      	movs	r3, #0
 8009df6:	667b      	str	r3, [r7, #100]	; 0x64
 8009df8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	d035      	beq.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8009e02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e06:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009e0a:	2b30      	cmp	r3, #48	; 0x30
 8009e0c:	d014      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8009e0e:	2b30      	cmp	r3, #48	; 0x30
 8009e10:	d80e      	bhi.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8009e12:	2b20      	cmp	r3, #32
 8009e14:	d012      	beq.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8009e16:	2b20      	cmp	r3, #32
 8009e18:	d80a      	bhi.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d010      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8009e1e:	2b10      	cmp	r3, #16
 8009e20:	d106      	bne.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e22:	4b7e      	ldr	r3, [pc, #504]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e26:	4a7d      	ldr	r2, [pc, #500]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e2c:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8009e2e:	e008      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009e36:	e004      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8009e38:	bf00      	nop
 8009e3a:	e002      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8009e3c:	bf00      	nop
 8009e3e:	e000      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8009e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e42:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10d      	bne.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009e4a:	4b74      	ldr	r3, [pc, #464]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009e50:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e58:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009e5c:	4a6f      	ldr	r2, [pc, #444]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009e5e:	430b      	orrs	r3, r1
 8009e60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009e64:	e003      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e66:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009e6a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009e6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009e7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e80:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009e84:	460b      	mov	r3, r1
 8009e86:	4313      	orrs	r3, r2
 8009e88:	d033      	beq.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8009e8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009e8e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d002      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8009e96:	2b40      	cmp	r3, #64	; 0x40
 8009e98:	d007      	beq.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8009e9a:	e010      	b.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e9c:	4b5f      	ldr	r3, [pc, #380]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea0:	4a5e      	ldr	r2, [pc, #376]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ea6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8009ea8:	e00d      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009eaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009eae:	3308      	adds	r3, #8
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f003 fb6f 	bl	800d594 <RCCEx_PLL2_Config>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8009ebc:	e003      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009ec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ec6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10d      	bne.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8009ece:	4b53      	ldr	r3, [pc, #332]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009ed0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009ed4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8009ed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009edc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8009ee0:	4a4e      	ldr	r2, [pc, #312]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009ee2:	430b      	orrs	r3, r1
 8009ee4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009ee8:	e003      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009eee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009ef2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efa:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009efe:	653b      	str	r3, [r7, #80]	; 0x50
 8009f00:	2300      	movs	r3, #0
 8009f02:	657b      	str	r3, [r7, #84]	; 0x54
 8009f04:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009f08:	460b      	mov	r3, r1
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	d033      	beq.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8009f0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f12:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d002      	beq.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8009f1a:	2b80      	cmp	r3, #128	; 0x80
 8009f1c:	d007      	beq.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8009f1e:	e010      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f20:	4b3e      	ldr	r3, [pc, #248]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f24:	4a3d      	ldr	r2, [pc, #244]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f2a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8009f2c:	e00d      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009f2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f32:	3308      	adds	r3, #8
 8009f34:	4618      	mov	r0, r3
 8009f36:	f003 fb2d 	bl	800d594 <RCCEx_PLL2_Config>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8009f40:	e003      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f4a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10d      	bne.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8009f52:	4b32      	ldr	r3, [pc, #200]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009f54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009f58:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009f5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f60:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8009f64:	4a2d      	ldr	r2, [pc, #180]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009f66:	430b      	orrs	r3, r1
 8009f68:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8009f6c:	e003      	b.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f6e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009f72:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009f76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8009f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f84:	2300      	movs	r3, #0
 8009f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f88:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	d04a      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8009f92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f9a:	2b04      	cmp	r3, #4
 8009f9c:	d827      	bhi.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8009f9e:	a201      	add	r2, pc, #4	; (adr r2, 8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8009fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa4:	08009fb9 	.word	0x08009fb9
 8009fa8:	08009fc7 	.word	0x08009fc7
 8009fac:	08009fdb 	.word	0x08009fdb
 8009fb0:	08009ff7 	.word	0x08009ff7
 8009fb4:	08009ff7 	.word	0x08009ff7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fb8:	4b18      	ldr	r3, [pc, #96]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fbc:	4a17      	ldr	r2, [pc, #92]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8009fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fc2:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009fc4:	e018      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009fc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009fca:	3308      	adds	r3, #8
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f003 fae1 	bl	800d594 <RCCEx_PLL2_Config>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009fd8:	e00e      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009fda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009fde:	3330      	adds	r3, #48	; 0x30
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f003 fb6f 	bl	800d6c4 <RCCEx_PLL3_Config>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009fec:	e004      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8009ff4:	e000      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8009ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ff8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10f      	bne.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800a000:	4b06      	ldr	r3, [pc, #24]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a006:	f023 0107 	bic.w	r1, r3, #7
 800a00a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a00e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a012:	4a02      	ldr	r2, [pc, #8]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800a014:	430b      	orrs	r3, r1
 800a016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a01a:	e005      	b.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800a01c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a020:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a024:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800a028:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a030:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a034:	643b      	str	r3, [r7, #64]	; 0x40
 800a036:	2300      	movs	r3, #0
 800a038:	647b      	str	r3, [r7, #68]	; 0x44
 800a03a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a03e:	460b      	mov	r3, r1
 800a040:	4313      	orrs	r3, r2
 800a042:	f000 8081 	beq.w	800a148 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800a046:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a04a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a04e:	2b20      	cmp	r3, #32
 800a050:	d85f      	bhi.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800a052:	a201      	add	r2, pc, #4	; (adr r2, 800a058 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800a054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a058:	0800a0dd 	.word	0x0800a0dd
 800a05c:	0800a113 	.word	0x0800a113
 800a060:	0800a113 	.word	0x0800a113
 800a064:	0800a113 	.word	0x0800a113
 800a068:	0800a113 	.word	0x0800a113
 800a06c:	0800a113 	.word	0x0800a113
 800a070:	0800a113 	.word	0x0800a113
 800a074:	0800a113 	.word	0x0800a113
 800a078:	0800a0eb 	.word	0x0800a0eb
 800a07c:	0800a113 	.word	0x0800a113
 800a080:	0800a113 	.word	0x0800a113
 800a084:	0800a113 	.word	0x0800a113
 800a088:	0800a113 	.word	0x0800a113
 800a08c:	0800a113 	.word	0x0800a113
 800a090:	0800a113 	.word	0x0800a113
 800a094:	0800a113 	.word	0x0800a113
 800a098:	0800a0ff 	.word	0x0800a0ff
 800a09c:	0800a113 	.word	0x0800a113
 800a0a0:	0800a113 	.word	0x0800a113
 800a0a4:	0800a113 	.word	0x0800a113
 800a0a8:	0800a113 	.word	0x0800a113
 800a0ac:	0800a113 	.word	0x0800a113
 800a0b0:	0800a113 	.word	0x0800a113
 800a0b4:	0800a113 	.word	0x0800a113
 800a0b8:	0800a11b 	.word	0x0800a11b
 800a0bc:	0800a113 	.word	0x0800a113
 800a0c0:	0800a113 	.word	0x0800a113
 800a0c4:	0800a113 	.word	0x0800a113
 800a0c8:	0800a113 	.word	0x0800a113
 800a0cc:	0800a113 	.word	0x0800a113
 800a0d0:	0800a113 	.word	0x0800a113
 800a0d4:	0800a113 	.word	0x0800a113
 800a0d8:	0800a11b 	.word	0x0800a11b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0dc:	4bab      	ldr	r3, [pc, #684]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e0:	4aaa      	ldr	r2, [pc, #680]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a0e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0e6:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800a0e8:	e018      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a0ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a0ee:	3308      	adds	r3, #8
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f003 fa4f 	bl	800d594 <RCCEx_PLL2_Config>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800a0fc:	e00e      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a0fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a102:	3330      	adds	r3, #48	; 0x30
 800a104:	4618      	mov	r0, r3
 800a106:	f003 fadd 	bl	800d6c4 <RCCEx_PLL3_Config>
 800a10a:	4603      	mov	r3, r0
 800a10c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800a110:	e004      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a118:	e000      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800a11a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a11c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10d      	bne.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800a124:	4b99      	ldr	r3, [pc, #612]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a12a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a12e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a132:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a136:	4a95      	ldr	r2, [pc, #596]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a138:	430b      	orrs	r3, r1
 800a13a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a13e:	e003      	b.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a140:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a144:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a148:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a150:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a154:	63bb      	str	r3, [r7, #56]	; 0x38
 800a156:	2300      	movs	r3, #0
 800a158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a15a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a15e:	460b      	mov	r3, r1
 800a160:	4313      	orrs	r3, r2
 800a162:	d04e      	beq.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800a164:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a16c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a170:	d02e      	beq.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800a172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a176:	d827      	bhi.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800a178:	2bc0      	cmp	r3, #192	; 0xc0
 800a17a:	d02b      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800a17c:	2bc0      	cmp	r3, #192	; 0xc0
 800a17e:	d823      	bhi.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800a180:	2b80      	cmp	r3, #128	; 0x80
 800a182:	d017      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800a184:	2b80      	cmp	r3, #128	; 0x80
 800a186:	d81f      	bhi.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800a18c:	2b40      	cmp	r3, #64	; 0x40
 800a18e:	d007      	beq.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800a190:	e01a      	b.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a192:	4b7e      	ldr	r3, [pc, #504]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a196:	4a7d      	ldr	r2, [pc, #500]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a19c:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800a19e:	e01a      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a1a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f003 f9f4 	bl	800d594 <RCCEx_PLL2_Config>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800a1b2:	e010      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a1b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a1b8:	3330      	adds	r3, #48	; 0x30
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f003 fa82 	bl	800d6c4 <RCCEx_PLL3_Config>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800a1c6:	e006      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a1ce:	e002      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800a1d0:	bf00      	nop
 800a1d2:	e000      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800a1d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10d      	bne.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a1de:	4b6b      	ldr	r3, [pc, #428]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a1e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a1e4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800a1e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a1ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a1f0:	4a66      	ldr	r2, [pc, #408]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a1f2:	430b      	orrs	r3, r1
 800a1f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a1f8:	e003      	b.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a1fe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800a202:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a20e:	633b      	str	r3, [r7, #48]	; 0x30
 800a210:	2300      	movs	r3, #0
 800a212:	637b      	str	r3, [r7, #52]	; 0x34
 800a214:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a218:	460b      	mov	r3, r1
 800a21a:	4313      	orrs	r3, r2
 800a21c:	d055      	beq.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800a21e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a222:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800a226:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a22a:	d031      	beq.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800a22c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800a230:	d82a      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800a232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a236:	d02d      	beq.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800a238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a23c:	d824      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800a23e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a242:	d029      	beq.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800a244:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a248:	d81e      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800a24a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a24e:	d011      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800a250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a254:	d818      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800a256:	2b00      	cmp	r3, #0
 800a258:	d020      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800a25a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a25e:	d113      	bne.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a260:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a264:	3308      	adds	r3, #8
 800a266:	4618      	mov	r0, r3
 800a268:	f003 f994 	bl	800d594 <RCCEx_PLL2_Config>
 800a26c:	4603      	mov	r3, r0
 800a26e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800a272:	e014      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a274:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a278:	3330      	adds	r3, #48	; 0x30
 800a27a:	4618      	mov	r0, r3
 800a27c:	f003 fa22 	bl	800d6c4 <RCCEx_PLL3_Config>
 800a280:	4603      	mov	r3, r0
 800a282:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800a286:	e00a      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a28e:	e006      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800a290:	bf00      	nop
 800a292:	e004      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800a294:	bf00      	nop
 800a296:	e002      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800a298:	bf00      	nop
 800a29a:	e000      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800a29c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a29e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10d      	bne.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800a2a6:	4b39      	ldr	r3, [pc, #228]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a2a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2ac:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800a2b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a2b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800a2b8:	4a34      	ldr	r2, [pc, #208]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a2ba:	430b      	orrs	r3, r1
 800a2bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a2c0:	e003      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a2c6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800a2ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a2d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2d8:	2300      	movs	r3, #0
 800a2da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	d058      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800a2e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a2ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a2ee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a2f2:	d031      	beq.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800a2f4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a2f8:	d82a      	bhi.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800a2fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2fe:	d02d      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800a300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a304:	d824      	bhi.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800a306:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a30a:	d029      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800a30c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a310:	d81e      	bhi.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800a312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a316:	d011      	beq.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800a318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a31c:	d818      	bhi.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d020      	beq.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800a322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a326:	d113      	bne.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a328:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a32c:	3308      	adds	r3, #8
 800a32e:	4618      	mov	r0, r3
 800a330:	f003 f930 	bl	800d594 <RCCEx_PLL2_Config>
 800a334:	4603      	mov	r3, r0
 800a336:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800a33a:	e014      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a33c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a340:	3330      	adds	r3, #48	; 0x30
 800a342:	4618      	mov	r0, r3
 800a344:	f003 f9be 	bl	800d6c4 <RCCEx_PLL3_Config>
 800a348:	4603      	mov	r3, r0
 800a34a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800a34e:	e00a      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a356:	e006      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800a358:	bf00      	nop
 800a35a:	e004      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800a35c:	bf00      	nop
 800a35e:	e002      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800a360:	bf00      	nop
 800a362:	e000      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800a364:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a366:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d110      	bne.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800a36e:	4b07      	ldr	r3, [pc, #28]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a374:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a378:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a37c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a380:	4902      	ldr	r1, [pc, #8]	; (800a38c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800a382:	4313      	orrs	r3, r2
 800a384:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800a388:	e006      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800a38a:	bf00      	nop
 800a38c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a390:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a394:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a398:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	6239      	str	r1, [r7, #32]
 800a3a4:	f003 0301 	and.w	r3, r3, #1
 800a3a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a3aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	d055      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800a3b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a3b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a3bc:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800a3c0:	d031      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800a3c2:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800a3c6:	d82a      	bhi.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800a3c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3cc:	d02d      	beq.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800a3ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3d2:	d824      	bhi.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800a3d4:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800a3d8:	d029      	beq.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800a3da:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800a3de:	d81e      	bhi.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800a3e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3e4:	d011      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800a3e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3ea:	d818      	bhi.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d020      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800a3f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3f4:	d113      	bne.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a3f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f003 f8c9 	bl	800d594 <RCCEx_PLL2_Config>
 800a402:	4603      	mov	r3, r0
 800a404:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a408:	e014      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a40a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a40e:	3330      	adds	r3, #48	; 0x30
 800a410:	4618      	mov	r0, r3
 800a412:	f003 f957 	bl	800d6c4 <RCCEx_PLL3_Config>
 800a416:	4603      	mov	r3, r0
 800a418:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a41c:	e00a      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a424:	e006      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800a426:	bf00      	nop
 800a428:	e004      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800a42a:	bf00      	nop
 800a42c:	e002      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800a42e:	bf00      	nop
 800a430:	e000      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800a432:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a434:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10d      	bne.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800a43c:	4b88      	ldr	r3, [pc, #544]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a43e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a442:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 800a446:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a44a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a44e:	4984      	ldr	r1, [pc, #528]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a450:	4313      	orrs	r3, r2
 800a452:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800a456:	e003      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a458:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a45c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a460:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a468:	2100      	movs	r1, #0
 800a46a:	61b9      	str	r1, [r7, #24]
 800a46c:	f003 0302 	and.w	r3, r3, #2
 800a470:	61fb      	str	r3, [r7, #28]
 800a472:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a476:	460b      	mov	r3, r1
 800a478:	4313      	orrs	r3, r2
 800a47a:	d03d      	beq.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800a47c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a480:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a484:	2b03      	cmp	r3, #3
 800a486:	d81c      	bhi.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800a488:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800a48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48e:	bf00      	nop
 800a490:	0800a4cb 	.word	0x0800a4cb
 800a494:	0800a4a1 	.word	0x0800a4a1
 800a498:	0800a4af 	.word	0x0800a4af
 800a49c:	0800a4cb 	.word	0x0800a4cb
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4a0:	4b6f      	ldr	r3, [pc, #444]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a4:	4a6e      	ldr	r2, [pc, #440]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a4a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4aa:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a4ac:	e00e      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a4ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a4b2:	3308      	adds	r3, #8
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f003 f86d 	bl	800d594 <RCCEx_PLL2_Config>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800a4c0:	e004      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a4c8:	e000      	b.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800a4ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4cc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10d      	bne.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a4d4:	4b62      	ldr	r3, [pc, #392]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a4d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a4da:	f023 0203 	bic.w	r2, r3, #3
 800a4de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a4e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a4e6:	495e      	ldr	r1, [pc, #376]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a4ee:	e003      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a4f4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a4f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a500:	2100      	movs	r1, #0
 800a502:	6139      	str	r1, [r7, #16]
 800a504:	f003 0304 	and.w	r3, r3, #4
 800a508:	617b      	str	r3, [r7, #20]
 800a50a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a50e:	460b      	mov	r3, r1
 800a510:	4313      	orrs	r3, r2
 800a512:	d03a      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800a514:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a518:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a51c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a520:	d00e      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800a522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a526:	d815      	bhi.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d017      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800a52c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a530:	d110      	bne.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a532:	4b4b      	ldr	r3, [pc, #300]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a536:	4a4a      	ldr	r2, [pc, #296]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a53c:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800a53e:	e00e      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a540:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a544:	3308      	adds	r3, #8
 800a546:	4618      	mov	r0, r3
 800a548:	f003 f824 	bl	800d594 <RCCEx_PLL2_Config>
 800a54c:	4603      	mov	r3, r0
 800a54e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800a552:	e004      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a55a:	e000      	b.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800a55c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a55e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a562:	2b00      	cmp	r3, #0
 800a564:	d10d      	bne.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800a566:	4b3e      	ldr	r3, [pc, #248]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a56c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a570:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a574:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a578:	4939      	ldr	r1, [pc, #228]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a57a:	4313      	orrs	r3, r2
 800a57c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800a580:	e003      	b.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a582:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a586:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a58a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a592:	2100      	movs	r1, #0
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	f003 0310 	and.w	r3, r3, #16
 800a59a:	60fb      	str	r3, [r7, #12]
 800a59c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	d038      	beq.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800a5a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a5aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a5ae:	2b30      	cmp	r3, #48	; 0x30
 800a5b0:	d01b      	beq.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800a5b2:	2b30      	cmp	r3, #48	; 0x30
 800a5b4:	d815      	bhi.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800a5b6:	2b10      	cmp	r3, #16
 800a5b8:	d002      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800a5ba:	2b20      	cmp	r3, #32
 800a5bc:	d007      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800a5be:	e010      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5c0:	4b27      	ldr	r3, [pc, #156]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c4:	4a26      	ldr	r2, [pc, #152]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a5c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5ca:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800a5cc:	e00e      	b.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a5ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a5d2:	3330      	adds	r3, #48	; 0x30
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f003 f875 	bl	800d6c4 <RCCEx_PLL3_Config>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800a5e0:	e004      	b.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800a5e8:	e000      	b.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800a5ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10d      	bne.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800a5f4:	4b1a      	ldr	r3, [pc, #104]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a5f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a5fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a5fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a602:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a606:	4916      	ldr	r1, [pc, #88]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a608:	4313      	orrs	r3, r2
 800a60a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a60e:	e003      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a610:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800a614:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a618:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a620:	2100      	movs	r1, #0
 800a622:	6039      	str	r1, [r7, #0]
 800a624:	f003 0308 	and.w	r3, r3, #8
 800a628:	607b      	str	r3, [r7, #4]
 800a62a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a62e:	460b      	mov	r3, r1
 800a630:	4313      	orrs	r3, r2
 800a632:	d00c      	beq.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800a634:	4b0a      	ldr	r3, [pc, #40]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a636:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a63a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a63e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a642:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a646:	4906      	ldr	r1, [pc, #24]	; (800a660 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800a648:	4313      	orrs	r3, r2
 800a64a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 800a64e:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 800a652:	4618      	mov	r0, r3
 800a654:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800a658:	46bd      	mov	sp, r7
 800a65a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a65e:	bf00      	nop
 800a660:	44020c00 	.word	0x44020c00

0800a664 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800a664:	b480      	push	{r7}
 800a666:	b08b      	sub	sp, #44	; 0x2c
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a66c:	4bad      	ldr	r3, [pc, #692]	; (800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a674:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a676:	4bab      	ldr	r3, [pc, #684]	; (800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a67a:	f003 0303 	and.w	r3, r3, #3
 800a67e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800a680:	4ba8      	ldr	r3, [pc, #672]	; (800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a684:	0a1b      	lsrs	r3, r3, #8
 800a686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a68a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800a68c:	4ba5      	ldr	r3, [pc, #660]	; (800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a690:	f003 0310 	and.w	r3, r3, #16
 800a694:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a696:	4ba3      	ldr	r3, [pc, #652]	; (800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69a:	08db      	lsrs	r3, r3, #3
 800a69c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6a0:	697a      	ldr	r2, [r7, #20]
 800a6a2:	fb02 f303 	mul.w	r3, r2, r3
 800a6a6:	ee07 3a90 	vmov	s15, r3
 800a6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ae:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f000 8126 	beq.w	800a906 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	2b03      	cmp	r3, #3
 800a6be:	d053      	beq.n	800a768 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d86f      	bhi.n	800a7a6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d003      	beq.n	800a6d4 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d02b      	beq.n	800a72a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800a6d2:	e068      	b.n	800a7a6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a6d4:	4b93      	ldr	r3, [pc, #588]	; (800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	08db      	lsrs	r3, r3, #3
 800a6da:	f003 0303 	and.w	r3, r3, #3
 800a6de:	4a92      	ldr	r2, [pc, #584]	; (800a928 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a6e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6e4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	ee07 3a90 	vmov	s15, r3
 800a6ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	ee07 3a90 	vmov	s15, r3
 800a6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	ee07 3a90 	vmov	s15, r3
 800a704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a708:	ed97 6a04 	vldr	s12, [r7, #16]
 800a70c:	eddf 5a87 	vldr	s11, [pc, #540]	; 800a92c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a71c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a720:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a724:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a728:	e068      	b.n	800a7fc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	ee07 3a90 	vmov	s15, r3
 800a730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a734:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800a930 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800a738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	ee07 3a90 	vmov	s15, r3
 800a742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a746:	ed97 6a04 	vldr	s12, [r7, #16]
 800a74a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a92c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a762:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a766:	e049      	b.n	800a7fc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	ee07 3a90 	vmov	s15, r3
 800a76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a772:	eddf 6a70 	vldr	s13, [pc, #448]	; 800a934 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800a776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	ee07 3a90 	vmov	s15, r3
 800a780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a784:	ed97 6a04 	vldr	s12, [r7, #16]
 800a788:	eddf 5a68 	vldr	s11, [pc, #416]	; 800a92c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a78c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a790:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a794:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a79c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800a7a4:	e02a      	b.n	800a7fc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a7a6:	4b5f      	ldr	r3, [pc, #380]	; (800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	08db      	lsrs	r3, r3, #3
 800a7ac:	f003 0303 	and.w	r3, r3, #3
 800a7b0:	4a5d      	ldr	r2, [pc, #372]	; (800a928 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a7b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7b6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	ee07 3a90 	vmov	s15, r3
 800a7be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	ee07 3a90 	vmov	s15, r3
 800a7c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7d0:	6a3b      	ldr	r3, [r7, #32]
 800a7d2:	ee07 3a90 	vmov	s15, r3
 800a7d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7da:	ed97 6a04 	vldr	s12, [r7, #16]
 800a7de:	eddf 5a53 	vldr	s11, [pc, #332]	; 800a92c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800a7e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a7fa:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7fc:	4b49      	ldr	r3, [pc, #292]	; (800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a808:	d121      	bne.n	800a84e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a80a:	4b46      	ldr	r3, [pc, #280]	; (800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a812:	2b00      	cmp	r3, #0
 800a814:	d017      	beq.n	800a846 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a816:	4b43      	ldr	r3, [pc, #268]	; (800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a81a:	0a5b      	lsrs	r3, r3, #9
 800a81c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a820:	ee07 3a90 	vmov	s15, r3
 800a824:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800a828:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a82c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a830:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a83c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	601a      	str	r2, [r3, #0]
 800a844:	e006      	b.n	800a854 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	e002      	b.n	800a854 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a854:	4b33      	ldr	r3, [pc, #204]	; (800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a85c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a860:	d121      	bne.n	800a8a6 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a862:	4b30      	ldr	r3, [pc, #192]	; (800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d017      	beq.n	800a89e <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a86e:	4b2d      	ldr	r3, [pc, #180]	; (800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a872:	0c1b      	lsrs	r3, r3, #16
 800a874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a878:	ee07 3a90 	vmov	s15, r3
 800a87c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a884:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a888:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a88c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a894:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	605a      	str	r2, [r3, #4]
 800a89c:	e006      	b.n	800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	605a      	str	r2, [r3, #4]
 800a8a4:	e002      	b.n	800a8ac <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8ac:	4b1d      	ldr	r3, [pc, #116]	; (800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8b8:	d121      	bne.n	800a8fe <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a8ba:	4b1a      	ldr	r3, [pc, #104]	; (800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d017      	beq.n	800a8f6 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a8c6:	4b17      	ldr	r3, [pc, #92]	; (800a924 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800a8c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ca:	0e1b      	lsrs	r3, r3, #24
 800a8cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8d0:	ee07 3a90 	vmov	s15, r3
 800a8d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800a8d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8dc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a8e0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800a8e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8ec:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a8f4:	e010      	b.n	800a918 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	609a      	str	r2, [r3, #8]
}
 800a8fc:	e00c      	b.n	800a918 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	609a      	str	r2, [r3, #8]
}
 800a904:	e008      	b.n	800a918 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	609a      	str	r2, [r3, #8]
}
 800a918:	bf00      	nop
 800a91a:	372c      	adds	r7, #44	; 0x2c
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	44020c00 	.word	0x44020c00
 800a928:	03d09000 	.word	0x03d09000
 800a92c:	46000000 	.word	0x46000000
 800a930:	4a742400 	.word	0x4a742400
 800a934:	4af42400 	.word	0x4af42400

0800a938 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800a938:	b480      	push	{r7}
 800a93a:	b08b      	sub	sp, #44	; 0x2c
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a940:	4bad      	ldr	r3, [pc, #692]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a948:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a94a:	4bab      	ldr	r3, [pc, #684]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a94e:	f003 0303 	and.w	r3, r3, #3
 800a952:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800a954:	4ba8      	ldr	r3, [pc, #672]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a958:	0a1b      	lsrs	r3, r3, #8
 800a95a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a95e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800a960:	4ba5      	ldr	r3, [pc, #660]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a964:	f003 0310 	and.w	r3, r3, #16
 800a968:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a96a:	4ba3      	ldr	r3, [pc, #652]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96e:	08db      	lsrs	r3, r3, #3
 800a970:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a974:	697a      	ldr	r2, [r7, #20]
 800a976:	fb02 f303 	mul.w	r3, r2, r3
 800a97a:	ee07 3a90 	vmov	s15, r3
 800a97e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a982:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 8126 	beq.w	800abda <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	2b03      	cmp	r3, #3
 800a992:	d053      	beq.n	800aa3c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	2b03      	cmp	r3, #3
 800a998:	d86f      	bhi.n	800aa7a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d003      	beq.n	800a9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	d02b      	beq.n	800a9fe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800a9a6:	e068      	b.n	800aa7a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9a8:	4b93      	ldr	r3, [pc, #588]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	08db      	lsrs	r3, r3, #3
 800a9ae:	f003 0303 	and.w	r3, r3, #3
 800a9b2:	4a92      	ldr	r2, [pc, #584]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a9b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a9b8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	ee07 3a90 	vmov	s15, r3
 800a9c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	ee07 3a90 	vmov	s15, r3
 800a9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9d2:	6a3b      	ldr	r3, [r7, #32]
 800a9d4:	ee07 3a90 	vmov	s15, r3
 800a9d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9dc:	ed97 6a04 	vldr	s12, [r7, #16]
 800a9e0:	eddf 5a87 	vldr	s11, [pc, #540]	; 800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800a9e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800a9fc:	e068      	b.n	800aad0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a9fe:	69bb      	ldr	r3, [r7, #24]
 800aa00:	ee07 3a90 	vmov	s15, r3
 800aa04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa08:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800aa0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa10:	6a3b      	ldr	r3, [r7, #32]
 800aa12:	ee07 3a90 	vmov	s15, r3
 800aa16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa1a:	ed97 6a04 	vldr	s12, [r7, #16]
 800aa1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800aa22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa36:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800aa3a:	e049      	b.n	800aad0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	ee07 3a90 	vmov	s15, r3
 800aa42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa46:	eddf 6a70 	vldr	s13, [pc, #448]	; 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800aa4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa4e:	6a3b      	ldr	r3, [r7, #32]
 800aa50:	ee07 3a90 	vmov	s15, r3
 800aa54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa58:	ed97 6a04 	vldr	s12, [r7, #16]
 800aa5c:	eddf 5a68 	vldr	s11, [pc, #416]	; 800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800aa60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa74:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800aa78:	e02a      	b.n	800aad0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa7a:	4b5f      	ldr	r3, [pc, #380]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	08db      	lsrs	r3, r3, #3
 800aa80:	f003 0303 	and.w	r3, r3, #3
 800aa84:	4a5d      	ldr	r2, [pc, #372]	; (800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800aa86:	fa22 f303 	lsr.w	r3, r2, r3
 800aa8a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	ee07 3a90 	vmov	s15, r3
 800aa92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	ee07 3a90 	vmov	s15, r3
 800aa9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaa4:	6a3b      	ldr	r3, [r7, #32]
 800aaa6:	ee07 3a90 	vmov	s15, r3
 800aaaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaae:	ed97 6a04 	vldr	s12, [r7, #16]
 800aab2:	eddf 5a53 	vldr	s11, [pc, #332]	; 800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800aab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aabe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800aace:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aad0:	4b49      	ldr	r3, [pc, #292]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aadc:	d121      	bne.n	800ab22 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800aade:	4b46      	ldr	r3, [pc, #280]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d017      	beq.n	800ab1a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800aaea:	4b43      	ldr	r3, [pc, #268]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aaec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaee:	0a5b      	lsrs	r3, r3, #9
 800aaf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaf4:	ee07 3a90 	vmov	s15, r3
 800aaf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800aafc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab00:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800ab04:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ab08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab10:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	601a      	str	r2, [r3, #0]
 800ab18:	e006      	b.n	800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	601a      	str	r2, [r3, #0]
 800ab20:	e002      	b.n	800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab28:	4b33      	ldr	r3, [pc, #204]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab34:	d121      	bne.n	800ab7a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800ab36:	4b30      	ldr	r3, [pc, #192]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ab38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d017      	beq.n	800ab72 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab42:	4b2d      	ldr	r3, [pc, #180]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ab44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab46:	0c1b      	lsrs	r3, r3, #16
 800ab48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab4c:	ee07 3a90 	vmov	s15, r3
 800ab50:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800ab54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab58:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800ab5c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ab60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab68:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	605a      	str	r2, [r3, #4]
 800ab70:	e006      	b.n	800ab80 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	605a      	str	r2, [r3, #4]
 800ab78:	e002      	b.n	800ab80 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab80:	4b1d      	ldr	r3, [pc, #116]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab8c:	d121      	bne.n	800abd2 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800ab8e:	4b1a      	ldr	r3, [pc, #104]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ab90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d017      	beq.n	800abca <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800ab9a:	4b17      	ldr	r3, [pc, #92]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ab9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab9e:	0e1b      	lsrs	r3, r3, #24
 800aba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aba4:	ee07 3a90 	vmov	s15, r3
 800aba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800abac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abb0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800abb4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800abb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abc0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800abc8:	e010      	b.n	800abec <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	609a      	str	r2, [r3, #8]
}
 800abd0:	e00c      	b.n	800abec <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	609a      	str	r2, [r3, #8]
}
 800abd8:	e008      	b.n	800abec <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	609a      	str	r2, [r3, #8]
}
 800abec:	bf00      	nop
 800abee:	372c      	adds	r7, #44	; 0x2c
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr
 800abf8:	44020c00 	.word	0x44020c00
 800abfc:	03d09000 	.word	0x03d09000
 800ac00:	46000000 	.word	0x46000000
 800ac04:	4a742400 	.word	0x4a742400
 800ac08:	4af42400 	.word	0x4af42400

0800ac0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b08b      	sub	sp, #44	; 0x2c
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800ac14:	4bad      	ldr	r3, [pc, #692]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ac16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac1c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800ac1e:	4bab      	ldr	r3, [pc, #684]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ac20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac22:	f003 0303 	and.w	r3, r3, #3
 800ac26:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800ac28:	4ba8      	ldr	r3, [pc, #672]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ac2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2c:	0a1b      	lsrs	r3, r3, #8
 800ac2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac32:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800ac34:	4ba5      	ldr	r3, [pc, #660]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ac36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac38:	f003 0310 	and.w	r3, r3, #16
 800ac3c:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800ac3e:	4ba3      	ldr	r3, [pc, #652]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ac40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac42:	08db      	lsrs	r3, r3, #3
 800ac44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac48:	697a      	ldr	r2, [r7, #20]
 800ac4a:	fb02 f303 	mul.w	r3, r2, r3
 800ac4e:	ee07 3a90 	vmov	s15, r3
 800ac52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac56:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f000 8126 	beq.w	800aeae <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	2b03      	cmp	r3, #3
 800ac66:	d053      	beq.n	800ad10 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	2b03      	cmp	r3, #3
 800ac6c:	d86f      	bhi.n	800ad4e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d003      	beq.n	800ac7c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	d02b      	beq.n	800acd2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800ac7a:	e068      	b.n	800ad4e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac7c:	4b93      	ldr	r3, [pc, #588]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	08db      	lsrs	r3, r3, #3
 800ac82:	f003 0303 	and.w	r3, r3, #3
 800ac86:	4a92      	ldr	r2, [pc, #584]	; (800aed0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800ac88:	fa22 f303 	lsr.w	r3, r2, r3
 800ac8c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	ee07 3a90 	vmov	s15, r3
 800ac94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	ee07 3a90 	vmov	s15, r3
 800ac9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aca6:	6a3b      	ldr	r3, [r7, #32]
 800aca8:	ee07 3a90 	vmov	s15, r3
 800acac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acb0:	ed97 6a04 	vldr	s12, [r7, #16]
 800acb4:	eddf 5a87 	vldr	s11, [pc, #540]	; 800aed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800acb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800accc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800acd0:	e068      	b.n	800ada4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	ee07 3a90 	vmov	s15, r3
 800acd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acdc:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800aed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800ace0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ace4:	6a3b      	ldr	r3, [r7, #32]
 800ace6:	ee07 3a90 	vmov	s15, r3
 800acea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acee:	ed97 6a04 	vldr	s12, [r7, #16]
 800acf2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800acf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800ad0e:	e049      	b.n	800ada4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	ee07 3a90 	vmov	s15, r3
 800ad16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1a:	eddf 6a70 	vldr	s13, [pc, #448]	; 800aedc <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800ad1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad22:	6a3b      	ldr	r3, [r7, #32]
 800ad24:	ee07 3a90 	vmov	s15, r3
 800ad28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad2c:	ed97 6a04 	vldr	s12, [r7, #16]
 800ad30:	eddf 5a68 	vldr	s11, [pc, #416]	; 800aed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ad34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad48:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800ad4c:	e02a      	b.n	800ada4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ad4e:	4b5f      	ldr	r3, [pc, #380]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	08db      	lsrs	r3, r3, #3
 800ad54:	f003 0303 	and.w	r3, r3, #3
 800ad58:	4a5d      	ldr	r2, [pc, #372]	; (800aed0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800ad5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad5e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	ee07 3a90 	vmov	s15, r3
 800ad70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	ee07 3a90 	vmov	s15, r3
 800ad7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad82:	ed97 6a04 	vldr	s12, [r7, #16]
 800ad86:	eddf 5a53 	vldr	s11, [pc, #332]	; 800aed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800ad8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad9e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800ada2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ada4:	4b49      	ldr	r3, [pc, #292]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adb0:	d121      	bne.n	800adf6 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800adb2:	4b46      	ldr	r3, [pc, #280]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800adb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d017      	beq.n	800adee <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800adbe:	4b43      	ldr	r3, [pc, #268]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800adc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc2:	0a5b      	lsrs	r3, r3, #9
 800adc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adc8:	ee07 3a90 	vmov	s15, r3
 800adcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800add0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800add4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800add8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800addc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ade0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ade4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	601a      	str	r2, [r3, #0]
 800adec:	e006      	b.n	800adfc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	601a      	str	r2, [r3, #0]
 800adf4:	e002      	b.n	800adfc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adfc:	4b33      	ldr	r3, [pc, #204]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae08:	d121      	bne.n	800ae4e <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800ae0a:	4b30      	ldr	r3, [pc, #192]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ae0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d017      	beq.n	800ae46 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae16:	4b2d      	ldr	r3, [pc, #180]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ae18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae1a:	0c1b      	lsrs	r3, r3, #16
 800ae1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae20:	ee07 3a90 	vmov	s15, r3
 800ae24:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800ae28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae2c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800ae30:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ae34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae3c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	605a      	str	r2, [r3, #4]
 800ae44:	e006      	b.n	800ae54 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	605a      	str	r2, [r3, #4]
 800ae4c:	e002      	b.n	800ae54 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae54:	4b1d      	ldr	r3, [pc, #116]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae60:	d121      	bne.n	800aea6 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800ae62:	4b1a      	ldr	r3, [pc, #104]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ae64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d017      	beq.n	800ae9e <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ae6e:	4b17      	ldr	r3, [pc, #92]	; (800aecc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800ae70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae72:	0e1b      	lsrs	r3, r3, #24
 800ae74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae78:	ee07 3a90 	vmov	s15, r3
 800ae7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800ae80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae84:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800ae88:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800ae8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae94:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800ae9c:	e010      	b.n	800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	609a      	str	r2, [r3, #8]
}
 800aea4:	e00c      	b.n	800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	609a      	str	r2, [r3, #8]
}
 800aeac:	e008      	b.n	800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	609a      	str	r2, [r3, #8]
}
 800aec0:	bf00      	nop
 800aec2:	372c      	adds	r7, #44	; 0x2c
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr
 800aecc:	44020c00 	.word	0x44020c00
 800aed0:	03d09000 	.word	0x03d09000
 800aed4:	46000000 	.word	0x46000000
 800aed8:	4a742400 	.word	0x4a742400
 800aedc:	4af42400 	.word	0x4af42400

0800aee0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aee0:	b590      	push	{r4, r7, lr}
 800aee2:	b08f      	sub	sp, #60	; 0x3c
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800aeea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aeee:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800aef2:	4321      	orrs	r1, r4
 800aef4:	d150      	bne.n	800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800aef6:	4b26      	ldr	r3, [pc, #152]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800aef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800aefc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af00:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800af02:	4b23      	ldr	r3, [pc, #140]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800af04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af08:	f003 0302 	and.w	r3, r3, #2
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d108      	bne.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af16:	d104      	bne.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800af18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af1c:	637b      	str	r3, [r7, #52]	; 0x34
 800af1e:	f002 bb2a 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800af22:	4b1b      	ldr	r3, [pc, #108]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800af24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800af28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af30:	d108      	bne.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800af32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af38:	d104      	bne.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800af3a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800af3e:	637b      	str	r3, [r7, #52]	; 0x34
 800af40:	f002 bb19 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800af44:	4b12      	ldr	r3, [pc, #72]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af50:	d119      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af58:	d115      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800af5a:	4b0d      	ldr	r3, [pc, #52]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800af5c:	69db      	ldr	r3, [r3, #28]
 800af5e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800af62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af66:	d30a      	bcc.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800af68:	4b09      	ldr	r3, [pc, #36]	; (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800af6a:	69db      	ldr	r3, [r3, #28]
 800af6c:	0a1b      	lsrs	r3, r3, #8
 800af6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af72:	4a08      	ldr	r2, [pc, #32]	; (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800af74:	fbb2 f3f3 	udiv	r3, r2, r3
 800af78:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800af7a:	f002 bafc 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800af7e:	2300      	movs	r3, #0
 800af80:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800af82:	f002 baf8 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800af86:	2300      	movs	r3, #0
 800af88:	637b      	str	r3, [r7, #52]	; 0x34
 800af8a:	f002 baf4 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800af8e:	bf00      	nop
 800af90:	44020c00 	.word	0x44020c00
 800af94:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800af98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af9c:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 800afa0:	ea50 0104 	orrs.w	r1, r0, r4
 800afa4:	f001 8275 	beq.w	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800afa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afac:	2801      	cmp	r0, #1
 800afae:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 800afb2:	f082 82dd 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800afb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afba:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 800afbe:	ea50 0104 	orrs.w	r1, r0, r4
 800afc2:	f001 816c 	beq.w	800c29e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800afc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afca:	2801      	cmp	r0, #1
 800afcc:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 800afd0:	f082 82ce 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800afd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afd8:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 800afdc:	ea50 0104 	orrs.w	r1, r0, r4
 800afe0:	f001 8602 	beq.w	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800afe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afe8:	2801      	cmp	r0, #1
 800afea:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 800afee:	f082 82bf 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800aff2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aff6:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800affa:	ea50 0104 	orrs.w	r1, r0, r4
 800affe:	f001 854c 	beq.w	800ca9a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800b002:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b006:	2801      	cmp	r0, #1
 800b008:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 800b00c:	f082 82b0 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b010:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b014:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 800b018:	ea50 0104 	orrs.w	r1, r0, r4
 800b01c:	f001 849e 	beq.w	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800b020:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b024:	2801      	cmp	r0, #1
 800b026:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800b02a:	f082 82a1 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b02e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b032:	f1a1 0420 	sub.w	r4, r1, #32
 800b036:	ea50 0104 	orrs.w	r1, r0, r4
 800b03a:	f001 83e8 	beq.w	800c80e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800b03e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b042:	2801      	cmp	r0, #1
 800b044:	f171 0120 	sbcs.w	r1, r1, #32
 800b048:	f082 8292 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b04c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b050:	f1a1 0410 	sub.w	r4, r1, #16
 800b054:	ea50 0104 	orrs.w	r1, r0, r4
 800b058:	f002 8256 	beq.w	800d508 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b05c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b060:	2801      	cmp	r0, #1
 800b062:	f171 0110 	sbcs.w	r1, r1, #16
 800b066:	f082 8283 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b06a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b06e:	f1a1 0408 	sub.w	r4, r1, #8
 800b072:	ea50 0104 	orrs.w	r1, r0, r4
 800b076:	f002 81cc 	beq.w	800d412 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800b07a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b07e:	2801      	cmp	r0, #1
 800b080:	f171 0108 	sbcs.w	r1, r1, #8
 800b084:	f082 8274 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b08c:	1f0c      	subs	r4, r1, #4
 800b08e:	ea50 0104 	orrs.w	r1, r0, r4
 800b092:	f001 8648 	beq.w	800cd26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800b096:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b09a:	2801      	cmp	r0, #1
 800b09c:	f171 0104 	sbcs.w	r1, r1, #4
 800b0a0:	f082 8266 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b0a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0a8:	1e8c      	subs	r4, r1, #2
 800b0aa:	ea50 0104 	orrs.w	r1, r0, r4
 800b0ae:	f002 8143 	beq.w	800d338 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800b0b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0b6:	2801      	cmp	r0, #1
 800b0b8:	f171 0102 	sbcs.w	r1, r1, #2
 800b0bc:	f082 8258 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b0c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0c4:	1e4c      	subs	r4, r1, #1
 800b0c6:	ea50 0104 	orrs.w	r1, r0, r4
 800b0ca:	f002 80ce 	beq.w	800d26a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800b0ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0d2:	2801      	cmp	r0, #1
 800b0d4:	f171 0101 	sbcs.w	r1, r1, #1
 800b0d8:	f082 824a 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b0dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0e0:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800b0e4:	4321      	orrs	r1, r4
 800b0e6:	f002 8059 	beq.w	800d19c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800b0ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0ee:	4cd9      	ldr	r4, [pc, #868]	; (800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800b0f0:	42a0      	cmp	r0, r4
 800b0f2:	f171 0100 	sbcs.w	r1, r1, #0
 800b0f6:	f082 823b 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b0fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0fe:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 800b102:	4321      	orrs	r1, r4
 800b104:	f001 87d9 	beq.w	800d0ba <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800b108:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b10c:	4cd2      	ldr	r4, [pc, #840]	; (800b458 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800b10e:	42a0      	cmp	r0, r4
 800b110:	f171 0100 	sbcs.w	r1, r1, #0
 800b114:	f082 822c 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b11c:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800b120:	4321      	orrs	r1, r4
 800b122:	f001 8751 	beq.w	800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800b126:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b12a:	4ccc      	ldr	r4, [pc, #816]	; (800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800b12c:	42a0      	cmp	r0, r4
 800b12e:	f171 0100 	sbcs.w	r1, r1, #0
 800b132:	f082 821d 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b136:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b13a:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 800b13e:	4321      	orrs	r1, r4
 800b140:	f001 869a 	beq.w	800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800b144:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b148:	4cc5      	ldr	r4, [pc, #788]	; (800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800b14a:	42a0      	cmp	r0, r4
 800b14c:	f171 0100 	sbcs.w	r1, r1, #0
 800b150:	f082 820e 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b154:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b158:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 800b15c:	4321      	orrs	r1, r4
 800b15e:	f001 8612 	beq.w	800cd86 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800b162:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b166:	4cbf      	ldr	r4, [pc, #764]	; (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800b168:	42a0      	cmp	r0, r4
 800b16a:	f171 0100 	sbcs.w	r1, r1, #0
 800b16e:	f082 81ff 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b172:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b176:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 800b17a:	4321      	orrs	r1, r4
 800b17c:	f002 817e 	beq.w	800d47c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800b180:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b184:	4cb8      	ldr	r4, [pc, #736]	; (800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b186:	42a0      	cmp	r0, r4
 800b188:	f171 0100 	sbcs.w	r1, r1, #0
 800b18c:	f082 81f0 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b190:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b194:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 800b198:	4321      	orrs	r1, r4
 800b19a:	f000 829e 	beq.w	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800b19e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1a2:	4cb2      	ldr	r4, [pc, #712]	; (800b46c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b1a4:	42a0      	cmp	r0, r4
 800b1a6:	f171 0100 	sbcs.w	r1, r1, #0
 800b1aa:	f082 81e1 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b1ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1b2:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 800b1b6:	4321      	orrs	r1, r4
 800b1b8:	f000 826d 	beq.w	800b696 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800b1bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1c0:	4cab      	ldr	r4, [pc, #684]	; (800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b1c2:	42a0      	cmp	r0, r4
 800b1c4:	f171 0100 	sbcs.w	r1, r1, #0
 800b1c8:	f082 81d2 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b1cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1d0:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 800b1d4:	4321      	orrs	r1, r4
 800b1d6:	f001 800d 	beq.w	800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800b1da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1de:	4ca5      	ldr	r4, [pc, #660]	; (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b1e0:	42a0      	cmp	r0, r4
 800b1e2:	f171 0100 	sbcs.w	r1, r1, #0
 800b1e6:	f082 81c3 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b1ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1ee:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 800b1f2:	4321      	orrs	r1, r4
 800b1f4:	f000 81d0 	beq.w	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800b1f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1fc:	4c9e      	ldr	r4, [pc, #632]	; (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800b1fe:	42a0      	cmp	r0, r4
 800b200:	f171 0100 	sbcs.w	r1, r1, #0
 800b204:	f082 81b4 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b208:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b20c:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 800b210:	4321      	orrs	r1, r4
 800b212:	f000 8142 	beq.w	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800b216:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b21a:	4c98      	ldr	r4, [pc, #608]	; (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800b21c:	42a0      	cmp	r0, r4
 800b21e:	f171 0100 	sbcs.w	r1, r1, #0
 800b222:	f082 81a5 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b226:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b22a:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 800b22e:	4321      	orrs	r1, r4
 800b230:	f001 824e 	beq.w	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800b234:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b238:	4c91      	ldr	r4, [pc, #580]	; (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800b23a:	42a0      	cmp	r0, r4
 800b23c:	f171 0100 	sbcs.w	r1, r1, #0
 800b240:	f082 8196 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b244:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b248:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 800b24c:	4321      	orrs	r1, r4
 800b24e:	f001 8197 	beq.w	800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800b252:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b256:	4c8b      	ldr	r4, [pc, #556]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800b258:	42a0      	cmp	r0, r4
 800b25a:	f171 0100 	sbcs.w	r1, r1, #0
 800b25e:	f082 8187 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b262:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b266:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 800b26a:	4321      	orrs	r1, r4
 800b26c:	f001 8154 	beq.w	800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800b270:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b274:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 800b278:	f171 0100 	sbcs.w	r1, r1, #0
 800b27c:	f082 8178 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b280:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b284:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 800b288:	4321      	orrs	r1, r4
 800b28a:	f001 80b7 	beq.w	800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800b28e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b292:	f248 0401 	movw	r4, #32769	; 0x8001
 800b296:	42a0      	cmp	r0, r4
 800b298:	f171 0100 	sbcs.w	r1, r1, #0
 800b29c:	f082 8168 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b2a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2a4:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 800b2a8:	4321      	orrs	r1, r4
 800b2aa:	f001 8064 	beq.w	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800b2ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2b2:	f244 0401 	movw	r4, #16385	; 0x4001
 800b2b6:	42a0      	cmp	r0, r4
 800b2b8:	f171 0100 	sbcs.w	r1, r1, #0
 800b2bc:	f082 8158 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b2c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2c4:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 800b2c8:	4321      	orrs	r1, r4
 800b2ca:	f001 8011 	beq.w	800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800b2ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2d2:	f242 0401 	movw	r4, #8193	; 0x2001
 800b2d6:	42a0      	cmp	r0, r4
 800b2d8:	f171 0100 	sbcs.w	r1, r1, #0
 800b2dc:	f082 8148 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b2e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2e4:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 800b2e8:	4321      	orrs	r1, r4
 800b2ea:	f000 871e 	beq.w	800c12a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800b2ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b2f2:	f241 0401 	movw	r4, #4097	; 0x1001
 800b2f6:	42a0      	cmp	r0, r4
 800b2f8:	f171 0100 	sbcs.w	r1, r1, #0
 800b2fc:	f082 8138 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b300:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b304:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 800b308:	4321      	orrs	r1, r4
 800b30a:	f000 86a8 	beq.w	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800b30e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b312:	f640 0401 	movw	r4, #2049	; 0x801
 800b316:	42a0      	cmp	r0, r4
 800b318:	f171 0100 	sbcs.w	r1, r1, #0
 800b31c:	f082 8128 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b320:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b324:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 800b328:	4321      	orrs	r1, r4
 800b32a:	f000 8632 	beq.w	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800b32e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b332:	f240 4401 	movw	r4, #1025	; 0x401
 800b336:	42a0      	cmp	r0, r4
 800b338:	f171 0100 	sbcs.w	r1, r1, #0
 800b33c:	f082 8118 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b340:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b344:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 800b348:	4321      	orrs	r1, r4
 800b34a:	f000 85b0 	beq.w	800beae <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800b34e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b352:	f240 2401 	movw	r4, #513	; 0x201
 800b356:	42a0      	cmp	r0, r4
 800b358:	f171 0100 	sbcs.w	r1, r1, #0
 800b35c:	f082 8108 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b360:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b364:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 800b368:	4321      	orrs	r1, r4
 800b36a:	f000 8535 	beq.w	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800b36e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b372:	f240 1401 	movw	r4, #257	; 0x101
 800b376:	42a0      	cmp	r0, r4
 800b378:	f171 0100 	sbcs.w	r1, r1, #0
 800b37c:	f082 80f8 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b380:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b384:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 800b388:	4321      	orrs	r1, r4
 800b38a:	f000 84ba 	beq.w	800bd02 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800b38e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b392:	2881      	cmp	r0, #129	; 0x81
 800b394:	f171 0100 	sbcs.w	r1, r1, #0
 800b398:	f082 80ea 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b39c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b3a0:	2821      	cmp	r0, #33	; 0x21
 800b3a2:	f171 0100 	sbcs.w	r1, r1, #0
 800b3a6:	d26f      	bcs.n	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b3a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b3ac:	4301      	orrs	r1, r0
 800b3ae:	f002 80df 	beq.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b3b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b3b6:	1e42      	subs	r2, r0, #1
 800b3b8:	f141 33ff 	adc.w	r3, r1, #4294967295
 800b3bc:	2a20      	cmp	r2, #32
 800b3be:	f173 0100 	sbcs.w	r1, r3, #0
 800b3c2:	f082 80d5 	bcs.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b3c6:	2a1f      	cmp	r2, #31
 800b3c8:	f202 80d2 	bhi.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800b3cc:	a101      	add	r1, pc, #4	; (adr r1, 800b3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800b3ce:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b3d2:	bf00      	nop
 800b3d4:	0800b735 	.word	0x0800b735
 800b3d8:	0800b801 	.word	0x0800b801
 800b3dc:	0800d571 	.word	0x0800d571
 800b3e0:	0800b8c1 	.word	0x0800b8c1
 800b3e4:	0800d571 	.word	0x0800d571
 800b3e8:	0800d571 	.word	0x0800d571
 800b3ec:	0800d571 	.word	0x0800d571
 800b3f0:	0800b991 	.word	0x0800b991
 800b3f4:	0800d571 	.word	0x0800d571
 800b3f8:	0800d571 	.word	0x0800d571
 800b3fc:	0800d571 	.word	0x0800d571
 800b400:	0800d571 	.word	0x0800d571
 800b404:	0800d571 	.word	0x0800d571
 800b408:	0800d571 	.word	0x0800d571
 800b40c:	0800d571 	.word	0x0800d571
 800b410:	0800ba73 	.word	0x0800ba73
 800b414:	0800d571 	.word	0x0800d571
 800b418:	0800d571 	.word	0x0800d571
 800b41c:	0800d571 	.word	0x0800d571
 800b420:	0800d571 	.word	0x0800d571
 800b424:	0800d571 	.word	0x0800d571
 800b428:	0800d571 	.word	0x0800d571
 800b42c:	0800d571 	.word	0x0800d571
 800b430:	0800d571 	.word	0x0800d571
 800b434:	0800d571 	.word	0x0800d571
 800b438:	0800d571 	.word	0x0800d571
 800b43c:	0800d571 	.word	0x0800d571
 800b440:	0800d571 	.word	0x0800d571
 800b444:	0800d571 	.word	0x0800d571
 800b448:	0800d571 	.word	0x0800d571
 800b44c:	0800d571 	.word	0x0800d571
 800b450:	0800bb49 	.word	0x0800bb49
 800b454:	80000001 	.word	0x80000001
 800b458:	40000001 	.word	0x40000001
 800b45c:	20000001 	.word	0x20000001
 800b460:	10000001 	.word	0x10000001
 800b464:	08000001 	.word	0x08000001
 800b468:	04000001 	.word	0x04000001
 800b46c:	00800001 	.word	0x00800001
 800b470:	00400001 	.word	0x00400001
 800b474:	00200001 	.word	0x00200001
 800b478:	00100001 	.word	0x00100001
 800b47c:	00080001 	.word	0x00080001
 800b480:	00040001 	.word	0x00040001
 800b484:	00020001 	.word	0x00020001
 800b488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b48c:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800b490:	430b      	orrs	r3, r1
 800b492:	f000 83c4 	beq.w	800bc1e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800b496:	f002 b86b 	b.w	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b49a:	4ba1      	ldr	r3, [pc, #644]	; (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b49c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b4a0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b4a4:	633b      	str	r3, [r7, #48]	; 0x30
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b4ac:	d036      	beq.n	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b4b4:	d86b      	bhi.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b4bc:	d02b      	beq.n	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b4c4:	d863      	bhi.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800b4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4cc:	d01b      	beq.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4d4:	d85b      	bhi.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d004      	beq.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4e2:	d008      	beq.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800b4e4:	e053      	b.n	800b58e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4e6:	f107 0320 	add.w	r3, r7, #32
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7ff f8ba 	bl	800a664 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b4f4:	e04e      	b.n	800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4f6:	f107 0314 	add.w	r3, r7, #20
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7ff fa1c 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b504:	e046      	b.n	800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b506:	f107 0308 	add.w	r3, r7, #8
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7ff fb7e 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b514:	e03e      	b.n	800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b516:	4b83      	ldr	r3, [pc, #524]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b518:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b51a:	e03b      	b.n	800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b51c:	4b80      	ldr	r3, [pc, #512]	; (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b51e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b522:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b526:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b528:	4b7d      	ldr	r3, [pc, #500]	; (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f003 0302 	and.w	r3, r3, #2
 800b530:	2b02      	cmp	r3, #2
 800b532:	d10c      	bne.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800b534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b536:	2b00      	cmp	r3, #0
 800b538:	d109      	bne.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b53a:	4b79      	ldr	r3, [pc, #484]	; (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	08db      	lsrs	r3, r3, #3
 800b540:	f003 0303 	and.w	r3, r3, #3
 800b544:	4a78      	ldr	r2, [pc, #480]	; (800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800b546:	fa22 f303 	lsr.w	r3, r2, r3
 800b54a:	637b      	str	r3, [r7, #52]	; 0x34
 800b54c:	e01e      	b.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b54e:	4b74      	ldr	r3, [pc, #464]	; (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b55a:	d106      	bne.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b562:	d102      	bne.n	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b564:	4b71      	ldr	r3, [pc, #452]	; (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800b566:	637b      	str	r3, [r7, #52]	; 0x34
 800b568:	e010      	b.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b56a:	4b6d      	ldr	r3, [pc, #436]	; (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b576:	d106      	bne.n	800b586 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800b578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b57a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b57e:	d102      	bne.n	800b586 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b580:	4b6b      	ldr	r3, [pc, #428]	; (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800b582:	637b      	str	r3, [r7, #52]	; 0x34
 800b584:	e002      	b.n	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800b586:	2300      	movs	r3, #0
 800b588:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800b58a:	e003      	b.n	800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800b58c:	e002      	b.n	800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800b58e:	2300      	movs	r3, #0
 800b590:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b592:	bf00      	nop
          }
        }
        break;
 800b594:	f001 bfef 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b598:	4b61      	ldr	r3, [pc, #388]	; (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b59a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b59e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800b5a2:	633b      	str	r3, [r7, #48]	; 0x30
 800b5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5aa:	d036      	beq.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5b2:	d86b      	bhi.n	800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800b5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800b5ba:	d02b      	beq.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800b5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5be:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800b5c2:	d863      	bhi.n	800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5ca:	d01b      	beq.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5d2:	d85b      	bhi.n	800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800b5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d004      	beq.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b5e0:	d008      	beq.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800b5e2:	e053      	b.n	800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5e4:	f107 0320 	add.w	r3, r7, #32
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7ff f83b 	bl	800a664 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b5f2:	e04e      	b.n	800b692 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5f4:	f107 0314 	add.w	r3, r7, #20
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7ff f99d 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b602:	e046      	b.n	800b692 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b604:	f107 0308 	add.w	r3, r7, #8
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff faff 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b612:	e03e      	b.n	800b692 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b614:	4b43      	ldr	r3, [pc, #268]	; (800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b616:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b618:	e03b      	b.n	800b692 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b61a:	4b41      	ldr	r3, [pc, #260]	; (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b61c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b620:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b624:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b626:	4b3e      	ldr	r3, [pc, #248]	; (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f003 0302 	and.w	r3, r3, #2
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d10c      	bne.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800b632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b634:	2b00      	cmp	r3, #0
 800b636:	d109      	bne.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b638:	4b39      	ldr	r3, [pc, #228]	; (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	08db      	lsrs	r3, r3, #3
 800b63e:	f003 0303 	and.w	r3, r3, #3
 800b642:	4a39      	ldr	r2, [pc, #228]	; (800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800b644:	fa22 f303 	lsr.w	r3, r2, r3
 800b648:	637b      	str	r3, [r7, #52]	; 0x34
 800b64a:	e01e      	b.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b64c:	4b34      	ldr	r3, [pc, #208]	; (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b658:	d106      	bne.n	800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b660:	d102      	bne.n	800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b662:	4b32      	ldr	r3, [pc, #200]	; (800b72c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800b664:	637b      	str	r3, [r7, #52]	; 0x34
 800b666:	e010      	b.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b668:	4b2d      	ldr	r3, [pc, #180]	; (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b670:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b674:	d106      	bne.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b67c:	d102      	bne.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b67e:	4b2c      	ldr	r3, [pc, #176]	; (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800b680:	637b      	str	r3, [r7, #52]	; 0x34
 800b682:	e002      	b.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800b684:	2300      	movs	r3, #0
 800b686:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800b688:	e003      	b.n	800b692 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800b68a:	e002      	b.n	800b692 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800b68c:	2300      	movs	r3, #0
 800b68e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b690:	bf00      	nop
          }
        }
        break;
 800b692:	f001 bf70 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800b696:	4b22      	ldr	r3, [pc, #136]	; (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b698:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6a0:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d108      	bne.n	800b6ba <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6a8:	f107 0320 	add.w	r3, r7, #32
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7fe ffd9 	bl	800a664 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b6b6:	f001 bf5e 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6bc:	2b40      	cmp	r3, #64	; 0x40
 800b6be:	d108      	bne.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6c0:	f107 0314 	add.w	r3, r7, #20
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff f937 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6ce:	f001 bf52 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6d6:	f001 bf4e 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800b6da:	4b11      	ldr	r3, [pc, #68]	; (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b6dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b6e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6e4:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800b6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d108      	bne.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6ec:	f107 0320 	add.w	r3, r7, #32
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7fe ffb7 	bl	800a664 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b6fa:	f001 bf3c 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800b6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b700:	2b80      	cmp	r3, #128	; 0x80
 800b702:	d108      	bne.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b704:	f107 0314 	add.w	r3, r7, #20
 800b708:	4618      	mov	r0, r3
 800b70a:	f7ff f915 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b712:	f001 bf30 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b716:	2300      	movs	r3, #0
 800b718:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b71a:	f001 bf2c 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b71e:	bf00      	nop
 800b720:	44020c00 	.word	0x44020c00
 800b724:	00bb8000 	.word	0x00bb8000
 800b728:	03d09000 	.word	0x03d09000
 800b72c:	003d0900 	.word	0x003d0900
 800b730:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b734:	4b9d      	ldr	r3, [pc, #628]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b736:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b73a:	f003 0307 	and.w	r3, r3, #7
 800b73e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b742:	2b00      	cmp	r3, #0
 800b744:	d104      	bne.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b746:	f7fc ff9f 	bl	8008688 <HAL_RCC_GetPCLK2Freq>
 800b74a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b74c:	f001 bf13 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800b750:	4b96      	ldr	r3, [pc, #600]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b75c:	d10a      	bne.n	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800b75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b760:	2b01      	cmp	r3, #1
 800b762:	d107      	bne.n	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b764:	f107 0314 	add.w	r3, r7, #20
 800b768:	4618      	mov	r0, r3
 800b76a:	f7ff f8e5 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	637b      	str	r3, [r7, #52]	; 0x34
 800b772:	e043      	b.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800b774:	4b8d      	ldr	r3, [pc, #564]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b77c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b780:	d10a      	bne.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	2b02      	cmp	r3, #2
 800b786:	d107      	bne.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b788:	f107 0308 	add.w	r3, r7, #8
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7ff fa3d 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	637b      	str	r3, [r7, #52]	; 0x34
 800b796:	e031      	b.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b798:	4b84      	ldr	r3, [pc, #528]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 0302 	and.w	r3, r3, #2
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d10c      	bne.n	800b7be <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a6:	2b03      	cmp	r3, #3
 800b7a8:	d109      	bne.n	800b7be <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b7aa:	4b80      	ldr	r3, [pc, #512]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	08db      	lsrs	r3, r3, #3
 800b7b0:	f003 0303 	and.w	r3, r3, #3
 800b7b4:	4a7e      	ldr	r2, [pc, #504]	; (800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b7b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b7ba:	637b      	str	r3, [r7, #52]	; 0x34
 800b7bc:	e01e      	b.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800b7be:	4b7b      	ldr	r3, [pc, #492]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b7c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7ca:	d105      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800b7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ce:	2b04      	cmp	r3, #4
 800b7d0:	d102      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800b7d2:	4b78      	ldr	r3, [pc, #480]	; (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b7d4:	637b      	str	r3, [r7, #52]	; 0x34
 800b7d6:	e011      	b.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b7d8:	4b74      	ldr	r3, [pc, #464]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b7da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b7de:	f003 0302 	and.w	r3, r3, #2
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d106      	bne.n	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800b7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e8:	2b05      	cmp	r3, #5
 800b7ea:	d103      	bne.n	800b7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800b7ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b7f2:	e003      	b.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7f8:	f001 bebd 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b7fc:	f001 bebb 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b800:	4b6a      	ldr	r3, [pc, #424]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b802:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b80a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d104      	bne.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b812:	f7fc ff23 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800b816:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800b818:	f001 bead 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800b81c:	4b63      	ldr	r3, [pc, #396]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b828:	d10a      	bne.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82c:	2b08      	cmp	r3, #8
 800b82e:	d107      	bne.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b830:	f107 0314 	add.w	r3, r7, #20
 800b834:	4618      	mov	r0, r3
 800b836:	f7ff f87f 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	637b      	str	r3, [r7, #52]	; 0x34
 800b83e:	e03d      	b.n	800b8bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800b840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b842:	2b10      	cmp	r3, #16
 800b844:	d108      	bne.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b846:	f107 0308 	add.w	r3, r7, #8
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7ff f9de 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b854:	f001 be8f 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b858:	4b54      	ldr	r3, [pc, #336]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 0302 	and.w	r3, r3, #2
 800b860:	2b02      	cmp	r3, #2
 800b862:	d10c      	bne.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800b864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b866:	2b18      	cmp	r3, #24
 800b868:	d109      	bne.n	800b87e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b86a:	4b50      	ldr	r3, [pc, #320]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	08db      	lsrs	r3, r3, #3
 800b870:	f003 0303 	and.w	r3, r3, #3
 800b874:	4a4e      	ldr	r2, [pc, #312]	; (800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b876:	fa22 f303 	lsr.w	r3, r2, r3
 800b87a:	637b      	str	r3, [r7, #52]	; 0x34
 800b87c:	e01e      	b.n	800b8bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800b87e:	4b4b      	ldr	r3, [pc, #300]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b88a:	d105      	bne.n	800b898 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88e:	2b20      	cmp	r3, #32
 800b890:	d102      	bne.n	800b898 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800b892:	4b48      	ldr	r3, [pc, #288]	; (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b894:	637b      	str	r3, [r7, #52]	; 0x34
 800b896:	e011      	b.n	800b8bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b898:	4b44      	ldr	r3, [pc, #272]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b89a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b89e:	f003 0302 	and.w	r3, r3, #2
 800b8a2:	2b02      	cmp	r3, #2
 800b8a4:	d106      	bne.n	800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a8:	2b28      	cmp	r3, #40	; 0x28
 800b8aa:	d103      	bne.n	800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800b8ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8b0:	637b      	str	r3, [r7, #52]	; 0x34
 800b8b2:	e003      	b.n	800b8bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b8b8:	f001 be5d 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b8bc:	f001 be5b 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b8c0:	4b3a      	ldr	r3, [pc, #232]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b8c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b8c6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b8ca:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d104      	bne.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b8d2:	f7fc fec3 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800b8d6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800b8d8:	f001 be4d 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800b8dc:	4b33      	ldr	r3, [pc, #204]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8e8:	d10a      	bne.n	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800b8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ec:	2b40      	cmp	r3, #64	; 0x40
 800b8ee:	d107      	bne.n	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8f0:	f107 0314 	add.w	r3, r7, #20
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7ff f81f 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	637b      	str	r3, [r7, #52]	; 0x34
 800b8fe:	e045      	b.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800b900:	4b2a      	ldr	r3, [pc, #168]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b90c:	d10a      	bne.n	800b924 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800b90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b910:	2b80      	cmp	r3, #128	; 0x80
 800b912:	d107      	bne.n	800b924 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b914:	f107 0308 	add.w	r3, r7, #8
 800b918:	4618      	mov	r0, r3
 800b91a:	f7ff f977 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	637b      	str	r3, [r7, #52]	; 0x34
 800b922:	e033      	b.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b924:	4b21      	ldr	r3, [pc, #132]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 0302 	and.w	r3, r3, #2
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	d10c      	bne.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800b930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b932:	2bc0      	cmp	r3, #192	; 0xc0
 800b934:	d109      	bne.n	800b94a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b936:	4b1d      	ldr	r3, [pc, #116]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	08db      	lsrs	r3, r3, #3
 800b93c:	f003 0303 	and.w	r3, r3, #3
 800b940:	4a1b      	ldr	r2, [pc, #108]	; (800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800b942:	fa22 f303 	lsr.w	r3, r2, r3
 800b946:	637b      	str	r3, [r7, #52]	; 0x34
 800b948:	e020      	b.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800b94a:	4b18      	ldr	r3, [pc, #96]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b956:	d106      	bne.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800b958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b95e:	d102      	bne.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800b960:	4b14      	ldr	r3, [pc, #80]	; (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800b962:	637b      	str	r3, [r7, #52]	; 0x34
 800b964:	e012      	b.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b966:	4b11      	ldr	r3, [pc, #68]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b96c:	f003 0302 	and.w	r3, r3, #2
 800b970:	2b02      	cmp	r3, #2
 800b972:	d107      	bne.n	800b984 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800b974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b976:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b97a:	d103      	bne.n	800b984 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800b97c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b980:	637b      	str	r3, [r7, #52]	; 0x34
 800b982:	e003      	b.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800b984:	2300      	movs	r3, #0
 800b986:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b988:	f001 bdf5 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b98c:	f001 bdf3 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b990:	4b06      	ldr	r3, [pc, #24]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800b992:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b996:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800b99a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d10a      	bne.n	800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b9a2:	f7fc fe5b 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800b9a6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800b9a8:	f001 bde5 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b9ac:	44020c00 	.word	0x44020c00
 800b9b0:	03d09000 	.word	0x03d09000
 800b9b4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800b9b8:	4ba0      	ldr	r3, [pc, #640]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9c4:	d10b      	bne.n	800b9de <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9cc:	d107      	bne.n	800b9de <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9ce:	f107 0314 	add.w	r3, r7, #20
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fe ffb0 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	637b      	str	r3, [r7, #52]	; 0x34
 800b9dc:	e047      	b.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800b9de:	4b97      	ldr	r3, [pc, #604]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b9e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9ea:	d10b      	bne.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9f2:	d107      	bne.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9f4:	f107 0308 	add.w	r3, r7, #8
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7ff f907 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	637b      	str	r3, [r7, #52]	; 0x34
 800ba02:	e034      	b.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800ba04:	4b8d      	ldr	r3, [pc, #564]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f003 0302 	and.w	r3, r3, #2
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d10d      	bne.n	800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800ba10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba12:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ba16:	d109      	bne.n	800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ba18:	4b88      	ldr	r3, [pc, #544]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	08db      	lsrs	r3, r3, #3
 800ba1e:	f003 0303 	and.w	r3, r3, #3
 800ba22:	4a87      	ldr	r2, [pc, #540]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800ba24:	fa22 f303 	lsr.w	r3, r2, r3
 800ba28:	637b      	str	r3, [r7, #52]	; 0x34
 800ba2a:	e020      	b.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800ba2c:	4b83      	ldr	r3, [pc, #524]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba38:	d106      	bne.n	800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba40:	d102      	bne.n	800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800ba42:	4b80      	ldr	r3, [pc, #512]	; (800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800ba44:	637b      	str	r3, [r7, #52]	; 0x34
 800ba46:	e012      	b.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800ba48:	4b7c      	ldr	r3, [pc, #496]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ba4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba4e:	f003 0302 	and.w	r3, r3, #2
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d107      	bne.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800ba56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba58:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800ba5c:	d103      	bne.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800ba5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba62:	637b      	str	r3, [r7, #52]	; 0x34
 800ba64:	e003      	b.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800ba66:	2300      	movs	r3, #0
 800ba68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba6a:	f001 bd84 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ba6e:	f001 bd82 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800ba72:	4b72      	ldr	r3, [pc, #456]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ba74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ba78:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ba7c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800ba7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d104      	bne.n	800ba8e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ba84:	f7fc fdea 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800ba88:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800ba8a:	f001 bd74 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800ba8e:	4b6b      	ldr	r3, [pc, #428]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba9a:	d10b      	bne.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800ba9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baa2:	d107      	bne.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800baa4:	f107 0314 	add.w	r3, r7, #20
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fe ff45 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	637b      	str	r3, [r7, #52]	; 0x34
 800bab2:	e047      	b.n	800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800bab4:	4b61      	ldr	r3, [pc, #388]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800babc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bac0:	d10b      	bne.n	800bada <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bac8:	d107      	bne.n	800bada <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baca:	f107 0308 	add.w	r3, r7, #8
 800bace:	4618      	mov	r0, r3
 800bad0:	f7ff f89c 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	637b      	str	r3, [r7, #52]	; 0x34
 800bad8:	e034      	b.n	800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800bada:	4b58      	ldr	r3, [pc, #352]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f003 0302 	and.w	r3, r3, #2
 800bae2:	2b02      	cmp	r3, #2
 800bae4:	d10d      	bne.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800bae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800baec:	d109      	bne.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800baee:	4b53      	ldr	r3, [pc, #332]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	08db      	lsrs	r3, r3, #3
 800baf4:	f003 0303 	and.w	r3, r3, #3
 800baf8:	4a51      	ldr	r2, [pc, #324]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800bafa:	fa22 f303 	lsr.w	r3, r2, r3
 800bafe:	637b      	str	r3, [r7, #52]	; 0x34
 800bb00:	e020      	b.n	800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800bb02:	4b4e      	ldr	r3, [pc, #312]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb0e:	d106      	bne.n	800bb1e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800bb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb16:	d102      	bne.n	800bb1e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800bb18:	4b4a      	ldr	r3, [pc, #296]	; (800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800bb1a:	637b      	str	r3, [r7, #52]	; 0x34
 800bb1c:	e012      	b.n	800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800bb1e:	4b47      	ldr	r3, [pc, #284]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800bb20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bb24:	f003 0302 	and.w	r3, r3, #2
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d107      	bne.n	800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800bb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bb32:	d103      	bne.n	800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800bb34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb38:	637b      	str	r3, [r7, #52]	; 0x34
 800bb3a:	e003      	b.n	800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb40:	f001 bd19 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bb44:	f001 bd17 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800bb48:	4b3c      	ldr	r3, [pc, #240]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800bb4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bb4e:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800bb52:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800bb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d104      	bne.n	800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bb5a:	f7fc fd7f 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800bb5e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800bb60:	f001 bd09 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800bb64:	4b35      	ldr	r3, [pc, #212]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb70:	d10b      	bne.n	800bb8a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800bb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb78:	d107      	bne.n	800bb8a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb7a:	f107 0314 	add.w	r3, r7, #20
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fe feda 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	637b      	str	r3, [r7, #52]	; 0x34
 800bb88:	e047      	b.n	800bc1a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800bb8a:	4b2c      	ldr	r3, [pc, #176]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb96:	d10b      	bne.n	800bbb0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800bb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb9e:	d107      	bne.n	800bbb0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bba0:	f107 0308 	add.w	r3, r7, #8
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7ff f831 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	637b      	str	r3, [r7, #52]	; 0x34
 800bbae:	e034      	b.n	800bc1a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800bbb0:	4b22      	ldr	r3, [pc, #136]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f003 0302 	and.w	r3, r3, #2
 800bbb8:	2b02      	cmp	r3, #2
 800bbba:	d10d      	bne.n	800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800bbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbe:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800bbc2:	d109      	bne.n	800bbd8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bbc4:	4b1d      	ldr	r3, [pc, #116]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	08db      	lsrs	r3, r3, #3
 800bbca:	f003 0303 	and.w	r3, r3, #3
 800bbce:	4a1c      	ldr	r2, [pc, #112]	; (800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800bbd0:	fa22 f303 	lsr.w	r3, r2, r3
 800bbd4:	637b      	str	r3, [r7, #52]	; 0x34
 800bbd6:	e020      	b.n	800bc1a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800bbd8:	4b18      	ldr	r3, [pc, #96]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bbe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbe4:	d106      	bne.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800bbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbec:	d102      	bne.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800bbee:	4b15      	ldr	r3, [pc, #84]	; (800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800bbf0:	637b      	str	r3, [r7, #52]	; 0x34
 800bbf2:	e012      	b.n	800bc1a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800bbf4:	4b11      	ldr	r3, [pc, #68]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800bbf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bbfa:	f003 0302 	and.w	r3, r3, #2
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d107      	bne.n	800bc12 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800bc08:	d103      	bne.n	800bc12 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800bc0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc0e:	637b      	str	r3, [r7, #52]	; 0x34
 800bc10:	e003      	b.n	800bc1a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800bc12:	2300      	movs	r3, #0
 800bc14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc16:	f001 bcae 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bc1a:	f001 bcac 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800bc1e:	4b07      	ldr	r3, [pc, #28]	; (800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800bc20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bc24:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 800bc28:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d10b      	bne.n	800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bc30:	f7fc fd14 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800bc34:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800bc36:	f001 bc9e 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bc3a:	bf00      	nop
 800bc3c:	44020c00 	.word	0x44020c00
 800bc40:	03d09000 	.word	0x03d09000
 800bc44:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800bc48:	4ba0      	ldr	r3, [pc, #640]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc54:	d10b      	bne.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800bc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bc5c:	d107      	bne.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc5e:	f107 0314 	add.w	r3, r7, #20
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fe fe68 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	637b      	str	r3, [r7, #52]	; 0x34
 800bc6c:	e047      	b.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800bc6e:	4b97      	ldr	r3, [pc, #604]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc7a:	d10b      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800bc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bc82:	d107      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc84:	f107 0308 	add.w	r3, r7, #8
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7fe ffbf 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	637b      	str	r3, [r7, #52]	; 0x34
 800bc92:	e034      	b.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800bc94:	4b8d      	ldr	r3, [pc, #564]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f003 0302 	and.w	r3, r3, #2
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	d10d      	bne.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800bca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bca6:	d109      	bne.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bca8:	4b88      	ldr	r3, [pc, #544]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	08db      	lsrs	r3, r3, #3
 800bcae:	f003 0303 	and.w	r3, r3, #3
 800bcb2:	4a87      	ldr	r2, [pc, #540]	; (800bed0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800bcb4:	fa22 f303 	lsr.w	r3, r2, r3
 800bcb8:	637b      	str	r3, [r7, #52]	; 0x34
 800bcba:	e020      	b.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800bcbc:	4b83      	ldr	r3, [pc, #524]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bcc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcc8:	d106      	bne.n	800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800bcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcd0:	d102      	bne.n	800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800bcd2:	4b80      	ldr	r3, [pc, #512]	; (800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800bcd4:	637b      	str	r3, [r7, #52]	; 0x34
 800bcd6:	e012      	b.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800bcd8:	4b7c      	ldr	r3, [pc, #496]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bcda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bcde:	f003 0302 	and.w	r3, r3, #2
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	d107      	bne.n	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800bce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800bcec:	d103      	bne.n	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800bcee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcf2:	637b      	str	r3, [r7, #52]	; 0x34
 800bcf4:	e003      	b.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcfa:	f001 bc3c 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bcfe:	f001 bc3a 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800bd02:	4b72      	ldr	r3, [pc, #456]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bd04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bd08:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bd0c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d104      	bne.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bd14:	f7fc fca2 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800bd18:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800bd1a:	f001 bc2c 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800bd1e:	4b6b      	ldr	r3, [pc, #428]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd2a:	d10b      	bne.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd32:	d107      	bne.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd34:	f107 0314 	add.w	r3, r7, #20
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7fe fdfd 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	637b      	str	r3, [r7, #52]	; 0x34
 800bd42:	e047      	b.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800bd44:	4b61      	ldr	r3, [pc, #388]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd50:	d10b      	bne.n	800bd6a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd58:	d107      	bne.n	800bd6a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd5a:	f107 0308 	add.w	r3, r7, #8
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7fe ff54 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	637b      	str	r3, [r7, #52]	; 0x34
 800bd68:	e034      	b.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800bd6a:	4b58      	ldr	r3, [pc, #352]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f003 0302 	and.w	r3, r3, #2
 800bd72:	2b02      	cmp	r3, #2
 800bd74:	d10d      	bne.n	800bd92 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800bd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd7c:	d109      	bne.n	800bd92 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bd7e:	4b53      	ldr	r3, [pc, #332]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	08db      	lsrs	r3, r3, #3
 800bd84:	f003 0303 	and.w	r3, r3, #3
 800bd88:	4a51      	ldr	r2, [pc, #324]	; (800bed0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800bd8a:	fa22 f303 	lsr.w	r3, r2, r3
 800bd8e:	637b      	str	r3, [r7, #52]	; 0x34
 800bd90:	e020      	b.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800bd92:	4b4e      	ldr	r3, [pc, #312]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd9e:	d106      	bne.n	800bdae <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800bda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bda6:	d102      	bne.n	800bdae <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800bda8:	4b4a      	ldr	r3, [pc, #296]	; (800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800bdaa:	637b      	str	r3, [r7, #52]	; 0x34
 800bdac:	e012      	b.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800bdae:	4b47      	ldr	r3, [pc, #284]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bdb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bdb4:	f003 0302 	and.w	r3, r3, #2
 800bdb8:	2b02      	cmp	r3, #2
 800bdba:	d107      	bne.n	800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800bdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbe:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800bdc2:	d103      	bne.n	800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800bdc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdc8:	637b      	str	r3, [r7, #52]	; 0x34
 800bdca:	e003      	b.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bdd0:	f001 bbd1 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bdd4:	f001 bbcf 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800bdd8:	4b3c      	ldr	r3, [pc, #240]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bdda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800bdde:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bde2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800bde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d104      	bne.n	800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bdea:	f7fc fc37 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800bdee:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800bdf0:	f001 bbc1 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800bdf4:	4b35      	ldr	r3, [pc, #212]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be00:	d10b      	bne.n	800be1a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be08:	d107      	bne.n	800be1a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be0a:	f107 0314 	add.w	r3, r7, #20
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fe fd92 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	637b      	str	r3, [r7, #52]	; 0x34
 800be18:	e047      	b.n	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800be1a:	4b2c      	ldr	r3, [pc, #176]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be26:	d10b      	bne.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800be28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be2e:	d107      	bne.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be30:	f107 0308 	add.w	r3, r7, #8
 800be34:	4618      	mov	r0, r3
 800be36:	f7fe fee9 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	637b      	str	r3, [r7, #52]	; 0x34
 800be3e:	e034      	b.n	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800be40:	4b22      	ldr	r3, [pc, #136]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f003 0302 	and.w	r3, r3, #2
 800be48:	2b02      	cmp	r3, #2
 800be4a:	d10d      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800be4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800be52:	d109      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800be54:	4b1d      	ldr	r3, [pc, #116]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	08db      	lsrs	r3, r3, #3
 800be5a:	f003 0303 	and.w	r3, r3, #3
 800be5e:	4a1c      	ldr	r2, [pc, #112]	; (800bed0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800be60:	fa22 f303 	lsr.w	r3, r2, r3
 800be64:	637b      	str	r3, [r7, #52]	; 0x34
 800be66:	e020      	b.n	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800be68:	4b18      	ldr	r3, [pc, #96]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be74:	d106      	bne.n	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be7c:	d102      	bne.n	800be84 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800be7e:	4b15      	ldr	r3, [pc, #84]	; (800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800be80:	637b      	str	r3, [r7, #52]	; 0x34
 800be82:	e012      	b.n	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800be84:	4b11      	ldr	r3, [pc, #68]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800be86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800be8a:	f003 0302 	and.w	r3, r3, #2
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d107      	bne.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800be92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be94:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800be98:	d103      	bne.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800be9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be9e:	637b      	str	r3, [r7, #52]	; 0x34
 800bea0:	e003      	b.n	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800bea2:	2300      	movs	r3, #0
 800bea4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bea6:	f001 bb66 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800beaa:	f001 bb64 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800beae:	4b07      	ldr	r3, [pc, #28]	; (800becc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800beb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800beb4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 800beb8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d10b      	bne.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bec0:	f7fc fbcc 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800bec4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800bec6:	f001 bb56 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800beca:	bf00      	nop
 800becc:	44020c00 	.word	0x44020c00
 800bed0:	03d09000 	.word	0x03d09000
 800bed4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800bed8:	4ba1      	ldr	r3, [pc, #644]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bee4:	d10b      	bne.n	800befe <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800bee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800beec:	d107      	bne.n	800befe <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800beee:	f107 0314 	add.w	r3, r7, #20
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fe fd20 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	637b      	str	r3, [r7, #52]	; 0x34
 800befc:	e047      	b.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800befe:	4b98      	ldr	r3, [pc, #608]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf0a:	d10b      	bne.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800bf0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf12:	d107      	bne.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf14:	f107 0308 	add.w	r3, r7, #8
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7fe fe77 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	637b      	str	r3, [r7, #52]	; 0x34
 800bf22:	e034      	b.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800bf24:	4b8e      	ldr	r3, [pc, #568]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f003 0302 	and.w	r3, r3, #2
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d10d      	bne.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800bf30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf32:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800bf36:	d109      	bne.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bf38:	4b89      	ldr	r3, [pc, #548]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	08db      	lsrs	r3, r3, #3
 800bf3e:	f003 0303 	and.w	r3, r3, #3
 800bf42:	4a88      	ldr	r2, [pc, #544]	; (800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800bf44:	fa22 f303 	lsr.w	r3, r2, r3
 800bf48:	637b      	str	r3, [r7, #52]	; 0x34
 800bf4a:	e020      	b.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800bf4c:	4b84      	ldr	r3, [pc, #528]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf58:	d106      	bne.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800bf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf60:	d102      	bne.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800bf62:	4b81      	ldr	r3, [pc, #516]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800bf64:	637b      	str	r3, [r7, #52]	; 0x34
 800bf66:	e012      	b.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800bf68:	4b7d      	ldr	r3, [pc, #500]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bf6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bf6e:	f003 0302 	and.w	r3, r3, #2
 800bf72:	2b02      	cmp	r3, #2
 800bf74:	d107      	bne.n	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800bf7c:	d103      	bne.n	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800bf7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf82:	637b      	str	r3, [r7, #52]	; 0x34
 800bf84:	e003      	b.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800bf86:	2300      	movs	r3, #0
 800bf88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf8a:	f001 baf4 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bf8e:	f001 baf2 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800bf92:	4b73      	ldr	r3, [pc, #460]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bf94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800bf98:	f003 0307 	and.w	r3, r3, #7
 800bf9c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d104      	bne.n	800bfae <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bfa4:	f7fc fb5a 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800bfa8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800bfaa:	f001 bae4 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800bfae:	4b6c      	ldr	r3, [pc, #432]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfba:	d10a      	bne.n	800bfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d107      	bne.n	800bfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfc2:	f107 0314 	add.w	r3, r7, #20
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7fe fcb6 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	637b      	str	r3, [r7, #52]	; 0x34
 800bfd0:	e043      	b.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800bfd2:	4b63      	ldr	r3, [pc, #396]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfde:	d10a      	bne.n	800bff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800bfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d107      	bne.n	800bff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfe6:	f107 0308 	add.w	r3, r7, #8
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7fe fe0e 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	637b      	str	r3, [r7, #52]	; 0x34
 800bff4:	e031      	b.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800bff6:	4b5a      	ldr	r3, [pc, #360]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f003 0302 	and.w	r3, r3, #2
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d10c      	bne.n	800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800c002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c004:	2b03      	cmp	r3, #3
 800c006:	d109      	bne.n	800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c008:	4b55      	ldr	r3, [pc, #340]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	08db      	lsrs	r3, r3, #3
 800c00e:	f003 0303 	and.w	r3, r3, #3
 800c012:	4a54      	ldr	r2, [pc, #336]	; (800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800c014:	fa22 f303 	lsr.w	r3, r2, r3
 800c018:	637b      	str	r3, [r7, #52]	; 0x34
 800c01a:	e01e      	b.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800c01c:	4b50      	ldr	r3, [pc, #320]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c028:	d105      	bne.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800c02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02c:	2b04      	cmp	r3, #4
 800c02e:	d102      	bne.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800c030:	4b4d      	ldr	r3, [pc, #308]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800c032:	637b      	str	r3, [r7, #52]	; 0x34
 800c034:	e011      	b.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800c036:	4b4a      	ldr	r3, [pc, #296]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c03c:	f003 0302 	and.w	r3, r3, #2
 800c040:	2b02      	cmp	r3, #2
 800c042:	d106      	bne.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800c044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c046:	2b05      	cmp	r3, #5
 800c048:	d103      	bne.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800c04a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c04e:	637b      	str	r3, [r7, #52]	; 0x34
 800c050:	e003      	b.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800c052:	2300      	movs	r3, #0
 800c054:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c056:	f001 ba8e 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c05a:	f001 ba8c 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800c05e:	4b40      	ldr	r3, [pc, #256]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c060:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c064:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c068:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800c06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d104      	bne.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c070:	f7fc faf4 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800c074:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800c076:	f001 ba7e 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800c07a:	4b39      	ldr	r3, [pc, #228]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c082:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c086:	d10a      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800c088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08a:	2b10      	cmp	r3, #16
 800c08c:	d107      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c08e:	f107 0314 	add.w	r3, r7, #20
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe fc50 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	637b      	str	r3, [r7, #52]	; 0x34
 800c09c:	e043      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800c09e:	4b30      	ldr	r3, [pc, #192]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0aa:	d10a      	bne.n	800c0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ae:	2b20      	cmp	r3, #32
 800c0b0:	d107      	bne.n	800c0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0b2:	f107 0308 	add.w	r3, r7, #8
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fe fda8 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	637b      	str	r3, [r7, #52]	; 0x34
 800c0c0:	e031      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800c0c2:	4b27      	ldr	r3, [pc, #156]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f003 0302 	and.w	r3, r3, #2
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d10c      	bne.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800c0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d0:	2b30      	cmp	r3, #48	; 0x30
 800c0d2:	d109      	bne.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c0d4:	4b22      	ldr	r3, [pc, #136]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	08db      	lsrs	r3, r3, #3
 800c0da:	f003 0303 	and.w	r3, r3, #3
 800c0de:	4a21      	ldr	r2, [pc, #132]	; (800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800c0e0:	fa22 f303 	lsr.w	r3, r2, r3
 800c0e4:	637b      	str	r3, [r7, #52]	; 0x34
 800c0e6:	e01e      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800c0e8:	4b1d      	ldr	r3, [pc, #116]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c0f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0f4:	d105      	bne.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800c0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f8:	2b40      	cmp	r3, #64	; 0x40
 800c0fa:	d102      	bne.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800c0fc:	4b1a      	ldr	r3, [pc, #104]	; (800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800c0fe:	637b      	str	r3, [r7, #52]	; 0x34
 800c100:	e011      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800c102:	4b17      	ldr	r3, [pc, #92]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c108:	f003 0302 	and.w	r3, r3, #2
 800c10c:	2b02      	cmp	r3, #2
 800c10e:	d106      	bne.n	800c11e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800c110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c112:	2b50      	cmp	r3, #80	; 0x50
 800c114:	d103      	bne.n	800c11e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800c116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c11a:	637b      	str	r3, [r7, #52]	; 0x34
 800c11c:	e003      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800c11e:	2300      	movs	r3, #0
 800c120:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c122:	f001 ba28 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c126:	f001 ba26 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c12a:	4b0d      	ldr	r3, [pc, #52]	; (800c160 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800c12c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c130:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c134:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800c136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d104      	bne.n	800c146 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800c13c:	f7fc faba 	bl	80086b4 <HAL_RCC_GetPCLK3Freq>
 800c140:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800c142:	f001 ba18 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c14c:	d10e      	bne.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c14e:	f107 0314 	add.w	r3, r7, #20
 800c152:	4618      	mov	r0, r3
 800c154:	f7fe fbf0 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c15c:	f001 ba0b 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c160:	44020c00 	.word	0x44020c00
 800c164:	03d09000 	.word	0x03d09000
 800c168:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800c16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c172:	d108      	bne.n	800c186 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c174:	f107 0308 	add.w	r3, r7, #8
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fe fd47 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c182:	f001 b9f8 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800c186:	4ba4      	ldr	r3, [pc, #656]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f003 0302 	and.w	r3, r3, #2
 800c18e:	2b02      	cmp	r3, #2
 800c190:	d10d      	bne.n	800c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800c192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c194:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c198:	d109      	bne.n	800c1ae <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c19a:	4b9f      	ldr	r3, [pc, #636]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	08db      	lsrs	r3, r3, #3
 800c1a0:	f003 0303 	and.w	r3, r3, #3
 800c1a4:	4a9d      	ldr	r2, [pc, #628]	; (800c41c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800c1a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c1aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c1ac:	e020      	b.n	800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800c1ae:	4b9a      	ldr	r3, [pc, #616]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1ba:	d106      	bne.n	800c1ca <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800c1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c1c2:	d102      	bne.n	800c1ca <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800c1c4:	4b96      	ldr	r3, [pc, #600]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800c1c6:	637b      	str	r3, [r7, #52]	; 0x34
 800c1c8:	e012      	b.n	800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800c1ca:	4b93      	ldr	r3, [pc, #588]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c1cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1d0:	f003 0302 	and.w	r3, r3, #2
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	d107      	bne.n	800c1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1da:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c1de:	d103      	bne.n	800c1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800c1e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1e4:	637b      	str	r3, [r7, #52]	; 0x34
 800c1e6:	e003      	b.n	800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c1ec:	f001 b9c3 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c1f0:	f001 b9c1 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800c1f4:	4b88      	ldr	r3, [pc, #544]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c1f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c1fa:	f003 0307 	and.w	r3, r3, #7
 800c1fe:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800c200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c202:	2b00      	cmp	r3, #0
 800c204:	d104      	bne.n	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800c206:	f7fc fa0d 	bl	8008624 <HAL_RCC_GetHCLKFreq>
 800c20a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800c20c:	f001 b9b3 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800c210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c212:	2b01      	cmp	r3, #1
 800c214:	d104      	bne.n	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800c216:	f7fc f8d9 	bl	80083cc <HAL_RCC_GetSysClockFreq>
 800c21a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c21c:	f001 b9ab 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800c220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c222:	2b02      	cmp	r3, #2
 800c224:	d108      	bne.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c226:	f107 0314 	add.w	r3, r7, #20
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fe fb84 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c234:	f001 b99f 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800c238:	4b77      	ldr	r3, [pc, #476]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c240:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c244:	d105      	bne.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800c246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c248:	2b03      	cmp	r3, #3
 800c24a:	d102      	bne.n	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800c24c:	4b75      	ldr	r3, [pc, #468]	; (800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800c24e:	637b      	str	r3, [r7, #52]	; 0x34
 800c250:	e023      	b.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800c252:	4b71      	ldr	r3, [pc, #452]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f003 0302 	and.w	r3, r3, #2
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d10c      	bne.n	800c278 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800c25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c260:	2b04      	cmp	r3, #4
 800c262:	d109      	bne.n	800c278 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c264:	4b6c      	ldr	r3, [pc, #432]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	08db      	lsrs	r3, r3, #3
 800c26a:	f003 0303 	and.w	r3, r3, #3
 800c26e:	4a6b      	ldr	r2, [pc, #428]	; (800c41c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800c270:	fa22 f303 	lsr.w	r3, r2, r3
 800c274:	637b      	str	r3, [r7, #52]	; 0x34
 800c276:	e010      	b.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800c278:	4b67      	ldr	r3, [pc, #412]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c284:	d105      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800c286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c288:	2b05      	cmp	r3, #5
 800c28a:	d102      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800c28c:	4b64      	ldr	r3, [pc, #400]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800c28e:	637b      	str	r3, [r7, #52]	; 0x34
 800c290:	e003      	b.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800c292:	2300      	movs	r3, #0
 800c294:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c296:	f001 b96e 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c29a:	f001 b96c 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800c29e:	4b5e      	ldr	r3, [pc, #376]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c2a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c2a4:	f003 0308 	and.w	r3, r3, #8
 800c2a8:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800c2aa:	4b5b      	ldr	r3, [pc, #364]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c2ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2b0:	f003 0302 	and.w	r3, r3, #2
 800c2b4:	2b02      	cmp	r3, #2
 800c2b6:	d106      	bne.n	800c2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800c2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d103      	bne.n	800c2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800c2be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2c2:	637b      	str	r3, [r7, #52]	; 0x34
 800c2c4:	e012      	b.n	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800c2c6:	4b54      	ldr	r3, [pc, #336]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c2c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2d4:	d106      	bne.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d8:	2b08      	cmp	r3, #8
 800c2da:	d103      	bne.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800c2dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c2e0:	637b      	str	r3, [r7, #52]	; 0x34
 800c2e2:	e003      	b.n	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800c2e8:	f001 b945 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c2ec:	f001 b943 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c2f0:	4b49      	ldr	r3, [pc, #292]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c2f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c2f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c2fa:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800c2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d104      	bne.n	800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c302:	f7fc f9ab 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800c306:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800c308:	f001 b935 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800c30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c312:	d108      	bne.n	800c326 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c314:	f107 0308 	add.w	r3, r7, #8
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fe fc77 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c322:	f001 b928 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800c326:	4b3c      	ldr	r3, [pc, #240]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f003 0302 	and.w	r3, r3, #2
 800c32e:	2b02      	cmp	r3, #2
 800c330:	d10d      	bne.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800c332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c338:	d109      	bne.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c33a:	4b37      	ldr	r3, [pc, #220]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	08db      	lsrs	r3, r3, #3
 800c340:	f003 0303 	and.w	r3, r3, #3
 800c344:	4a35      	ldr	r2, [pc, #212]	; (800c41c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800c346:	fa22 f303 	lsr.w	r3, r2, r3
 800c34a:	637b      	str	r3, [r7, #52]	; 0x34
 800c34c:	e011      	b.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800c34e:	4b32      	ldr	r3, [pc, #200]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c35a:	d106      	bne.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800c35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c362:	d102      	bne.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800c364:	4b2e      	ldr	r3, [pc, #184]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800c366:	637b      	str	r3, [r7, #52]	; 0x34
 800c368:	e003      	b.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800c36a:	2300      	movs	r3, #0
 800c36c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c36e:	f001 b902 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c372:	f001 b900 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800c376:	4b28      	ldr	r3, [pc, #160]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c378:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c37c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c380:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800c382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c384:	2b00      	cmp	r3, #0
 800c386:	d104      	bne.n	800c392 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c388:	f7fc f968 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800c38c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800c38e:	f001 b8f2 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c398:	d108      	bne.n	800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c39a:	f107 0308 	add.w	r3, r7, #8
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fe fc34 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3a8:	f001 b8e5 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800c3ac:	4b1a      	ldr	r3, [pc, #104]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f003 0302 	and.w	r3, r3, #2
 800c3b4:	2b02      	cmp	r3, #2
 800c3b6:	d10d      	bne.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800c3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c3be:	d109      	bne.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c3c0:	4b15      	ldr	r3, [pc, #84]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	08db      	lsrs	r3, r3, #3
 800c3c6:	f003 0303 	and.w	r3, r3, #3
 800c3ca:	4a14      	ldr	r2, [pc, #80]	; (800c41c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800c3cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c3d0:	637b      	str	r3, [r7, #52]	; 0x34
 800c3d2:	e011      	b.n	800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800c3d4:	4b10      	ldr	r3, [pc, #64]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3e0:	d106      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c3e8:	d102      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800c3ea:	4b0d      	ldr	r3, [pc, #52]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800c3ec:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ee:	e003      	b.n	800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3f4:	f001 b8bf 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c3f8:	f001 b8bd 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800c3fc:	4b06      	ldr	r3, [pc, #24]	; (800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800c3fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c402:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c406:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800c408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10c      	bne.n	800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800c40e:	f7fc f951 	bl	80086b4 <HAL_RCC_GetPCLK3Freq>
 800c412:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800c414:	f001 b8af 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c418:	44020c00 	.word	0x44020c00
 800c41c:	03d09000 	.word	0x03d09000
 800c420:	003d0900 	.word	0x003d0900
 800c424:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800c428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c42e:	d108      	bne.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c430:	f107 0308 	add.w	r3, r7, #8
 800c434:	4618      	mov	r0, r3
 800c436:	f7fe fbe9 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c43e:	f001 b89a 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800c442:	4b9f      	ldr	r3, [pc, #636]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f003 0302 	and.w	r3, r3, #2
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d10d      	bne.n	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800c44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c454:	d109      	bne.n	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c456:	4b9a      	ldr	r3, [pc, #616]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	08db      	lsrs	r3, r3, #3
 800c45c:	f003 0303 	and.w	r3, r3, #3
 800c460:	4a98      	ldr	r2, [pc, #608]	; (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800c462:	fa22 f303 	lsr.w	r3, r2, r3
 800c466:	637b      	str	r3, [r7, #52]	; 0x34
 800c468:	e011      	b.n	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800c46a:	4b95      	ldr	r3, [pc, #596]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c476:	d106      	bne.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800c478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c47e:	d102      	bne.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800c480:	4b91      	ldr	r3, [pc, #580]	; (800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800c482:	637b      	str	r3, [r7, #52]	; 0x34
 800c484:	e003      	b.n	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800c486:	2300      	movs	r3, #0
 800c488:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c48a:	f001 b874 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c48e:	f001 b872 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800c492:	4b8b      	ldr	r3, [pc, #556]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c494:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c498:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c49c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800c49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d104      	bne.n	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800c4a4:	f7fc f906 	bl	80086b4 <HAL_RCC_GetPCLK3Freq>
 800c4a8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800c4aa:	f001 b864 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800c4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4b4:	d108      	bne.n	800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4b6:	f107 0308 	add.w	r3, r7, #8
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fe fba6 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c4c4:	f001 b857 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800c4c8:	4b7d      	ldr	r3, [pc, #500]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f003 0302 	and.w	r3, r3, #2
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	d10d      	bne.n	800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800c4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c4da:	d109      	bne.n	800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c4dc:	4b78      	ldr	r3, [pc, #480]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	08db      	lsrs	r3, r3, #3
 800c4e2:	f003 0303 	and.w	r3, r3, #3
 800c4e6:	4a77      	ldr	r2, [pc, #476]	; (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800c4e8:	fa22 f303 	lsr.w	r3, r2, r3
 800c4ec:	637b      	str	r3, [r7, #52]	; 0x34
 800c4ee:	e011      	b.n	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800c4f0:	4b73      	ldr	r3, [pc, #460]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c4f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4fc:	d106      	bne.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c500:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c504:	d102      	bne.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800c506:	4b70      	ldr	r3, [pc, #448]	; (800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800c508:	637b      	str	r3, [r7, #52]	; 0x34
 800c50a:	e003      	b.n	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800c50c:	2300      	movs	r3, #0
 800c50e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c510:	f001 b831 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c514:	f001 b82f 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800c518:	4b69      	ldr	r3, [pc, #420]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c51a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c51e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800c522:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800c524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c526:	2b00      	cmp	r3, #0
 800c528:	d104      	bne.n	800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c52a:	f7fc f897 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800c52e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800c530:	f001 b821 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800c534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c536:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c53a:	d108      	bne.n	800c54e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c53c:	f107 0308 	add.w	r3, r7, #8
 800c540:	4618      	mov	r0, r3
 800c542:	f7fe fb63 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c54a:	f001 b814 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800c54e:	4b5c      	ldr	r3, [pc, #368]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 0302 	and.w	r3, r3, #2
 800c556:	2b02      	cmp	r3, #2
 800c558:	d10e      	bne.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800c55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c560:	d10a      	bne.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c562:	4b57      	ldr	r3, [pc, #348]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	08db      	lsrs	r3, r3, #3
 800c568:	f003 0303 	and.w	r3, r3, #3
 800c56c:	4a55      	ldr	r2, [pc, #340]	; (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800c56e:	fa22 f303 	lsr.w	r3, r2, r3
 800c572:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c574:	f000 bfff 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800c578:	2300      	movs	r3, #0
 800c57a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c57c:	f000 bffb 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c580:	4b4f      	ldr	r3, [pc, #316]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c582:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c58a:	633b      	str	r3, [r7, #48]	; 0x30
 800c58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c592:	d056      	beq.n	800c642 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800c594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c596:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c59a:	f200 808b 	bhi.w	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800c59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5a4:	d03e      	beq.n	800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5ac:	f200 8082 	bhi.w	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5b6:	d027      	beq.n	800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800c5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5be:	d879      	bhi.n	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800c5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5c6:	d017      	beq.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5ce:	d871      	bhi.n	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800c5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d004      	beq.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800c5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5dc:	d004      	beq.n	800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800c5de:	e069      	b.n	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c5e0:	f7fc f868 	bl	80086b4 <HAL_RCC_GetPCLK3Freq>
 800c5e4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c5e6:	e068      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5e8:	f107 0314 	add.w	r3, r7, #20
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fe f9a3 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c5f6:	e060      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5f8:	f107 0308 	add.w	r3, r7, #8
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7fe fb05 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c606:	e058      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c608:	4b2d      	ldr	r3, [pc, #180]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c60a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c60e:	f003 0302 	and.w	r3, r3, #2
 800c612:	2b02      	cmp	r3, #2
 800c614:	d103      	bne.n	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800c616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c61a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c61c:	e04d      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800c61e:	2300      	movs	r3, #0
 800c620:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c622:	e04a      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c624:	4b26      	ldr	r3, [pc, #152]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c62a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c62e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c632:	d103      	bne.n	800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800c634:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c638:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c63a:	e03e      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800c63c:	2300      	movs	r3, #0
 800c63e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c640:	e03b      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c642:	4b1f      	ldr	r3, [pc, #124]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c648:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c64c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c64e:	4b1c      	ldr	r3, [pc, #112]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f003 0302 	and.w	r3, r3, #2
 800c656:	2b02      	cmp	r3, #2
 800c658:	d10c      	bne.n	800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800c65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d109      	bne.n	800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c660:	4b17      	ldr	r3, [pc, #92]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	08db      	lsrs	r3, r3, #3
 800c666:	f003 0303 	and.w	r3, r3, #3
 800c66a:	4a16      	ldr	r2, [pc, #88]	; (800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800c66c:	fa22 f303 	lsr.w	r3, r2, r3
 800c670:	637b      	str	r3, [r7, #52]	; 0x34
 800c672:	e01e      	b.n	800c6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c674:	4b12      	ldr	r3, [pc, #72]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c67c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c680:	d106      	bne.n	800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800c682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c688:	d102      	bne.n	800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c68a:	4b0f      	ldr	r3, [pc, #60]	; (800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800c68c:	637b      	str	r3, [r7, #52]	; 0x34
 800c68e:	e010      	b.n	800c6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c690:	4b0b      	ldr	r3, [pc, #44]	; (800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c69c:	d106      	bne.n	800c6ac <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800c69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6a4:	d102      	bne.n	800c6ac <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c6a6:	4b09      	ldr	r3, [pc, #36]	; (800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800c6a8:	637b      	str	r3, [r7, #52]	; 0x34
 800c6aa:	e002      	b.n	800c6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c6b0:	e003      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800c6b2:	e002      	b.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c6b8:	bf00      	nop
          }
        }
        break;
 800c6ba:	f000 bf5c 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c6be:	bf00      	nop
 800c6c0:	44020c00 	.word	0x44020c00
 800c6c4:	03d09000 	.word	0x03d09000
 800c6c8:	003d0900 	.word	0x003d0900
 800c6cc:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800c6d0:	4b9e      	ldr	r3, [pc, #632]	; (800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c6d2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c6d6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c6da:	633b      	str	r3, [r7, #48]	; 0x30
 800c6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6de:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c6e2:	d056      	beq.n	800c792 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800c6ea:	f200 808b 	bhi.w	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6f4:	d03e      	beq.n	800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6fc:	f200 8082 	bhi.w	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c702:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c706:	d027      	beq.n	800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800c708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c70e:	d879      	bhi.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c716:	d017      	beq.n	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800c718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c71e:	d871      	bhi.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800c720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c722:	2b00      	cmp	r3, #0
 800c724:	d004      	beq.n	800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800c726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c72c:	d004      	beq.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800c72e:	e069      	b.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800c730:	f7fb ff94 	bl	800865c <HAL_RCC_GetPCLK1Freq>
 800c734:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c736:	e068      	b.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c738:	f107 0314 	add.w	r3, r7, #20
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7fe f8fb 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c746:	e060      	b.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c748:	f107 0308 	add.w	r3, r7, #8
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7fe fa5d 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c756:	e058      	b.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c758:	4b7c      	ldr	r3, [pc, #496]	; (800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c75a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c75e:	f003 0302 	and.w	r3, r3, #2
 800c762:	2b02      	cmp	r3, #2
 800c764:	d103      	bne.n	800c76e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800c766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c76a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c76c:	e04d      	b.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800c76e:	2300      	movs	r3, #0
 800c770:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c772:	e04a      	b.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c774:	4b75      	ldr	r3, [pc, #468]	; (800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c776:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c77a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c77e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c782:	d103      	bne.n	800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800c784:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c788:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c78a:	e03e      	b.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800c78c:	2300      	movs	r3, #0
 800c78e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c790:	e03b      	b.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c792:	4b6e      	ldr	r3, [pc, #440]	; (800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c798:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c79c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c79e:	4b6b      	ldr	r3, [pc, #428]	; (800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f003 0302 	and.w	r3, r3, #2
 800c7a6:	2b02      	cmp	r3, #2
 800c7a8:	d10c      	bne.n	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800c7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d109      	bne.n	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c7b0:	4b66      	ldr	r3, [pc, #408]	; (800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	08db      	lsrs	r3, r3, #3
 800c7b6:	f003 0303 	and.w	r3, r3, #3
 800c7ba:	4a65      	ldr	r2, [pc, #404]	; (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800c7bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c7c0:	637b      	str	r3, [r7, #52]	; 0x34
 800c7c2:	e01e      	b.n	800c802 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c7c4:	4b61      	ldr	r3, [pc, #388]	; (800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c7cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7d0:	d106      	bne.n	800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800c7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7d8:	d102      	bne.n	800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c7da:	4b5e      	ldr	r3, [pc, #376]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800c7dc:	637b      	str	r3, [r7, #52]	; 0x34
 800c7de:	e010      	b.n	800c802 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c7e0:	4b5a      	ldr	r3, [pc, #360]	; (800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7ec:	d106      	bne.n	800c7fc <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800c7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7f4:	d102      	bne.n	800c7fc <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c7f6:	4b58      	ldr	r3, [pc, #352]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800c7f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c7fa:	e002      	b.n	800c802 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c800:	e003      	b.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800c802:	e002      	b.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800c804:	2300      	movs	r3, #0
 800c806:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c808:	bf00      	nop
          }
        }
        break;
 800c80a:	f000 beb4 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800c80e:	4b4f      	ldr	r3, [pc, #316]	; (800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c810:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c814:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c818:	633b      	str	r3, [r7, #48]	; 0x30
 800c81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c820:	d056      	beq.n	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800c822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c828:	f200 808b 	bhi.w	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c832:	d03e      	beq.n	800c8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800c834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c836:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c83a:	f200 8082 	bhi.w	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c840:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c844:	d027      	beq.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800c846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c848:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c84c:	d879      	bhi.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c854:	d017      	beq.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800c856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c85c:	d871      	bhi.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800c85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c860:	2b00      	cmp	r3, #0
 800c862:	d004      	beq.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800c864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c86a:	d004      	beq.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800c86c:	e069      	b.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c86e:	f7fb ff21 	bl	80086b4 <HAL_RCC_GetPCLK3Freq>
 800c872:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c874:	e068      	b.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c876:	f107 0314 	add.w	r3, r7, #20
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fe f85c 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c884:	e060      	b.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c886:	f107 0308 	add.w	r3, r7, #8
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fe f9be 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c894:	e058      	b.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c896:	4b2d      	ldr	r3, [pc, #180]	; (800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c89c:	f003 0302 	and.w	r3, r3, #2
 800c8a0:	2b02      	cmp	r3, #2
 800c8a2:	d103      	bne.n	800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800c8a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8a8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c8aa:	e04d      	b.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c8b0:	e04a      	b.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c8b2:	4b26      	ldr	r3, [pc, #152]	; (800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c8b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c8b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8c0:	d103      	bne.n	800c8ca <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800c8c2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c8c6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c8c8:	e03e      	b.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c8ce:	e03b      	b.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c8d0:	4b1e      	ldr	r3, [pc, #120]	; (800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c8d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c8d6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c8da:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c8dc:	4b1b      	ldr	r3, [pc, #108]	; (800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f003 0302 	and.w	r3, r3, #2
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	d10c      	bne.n	800c902 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800c8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d109      	bne.n	800c902 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c8ee:	4b17      	ldr	r3, [pc, #92]	; (800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	08db      	lsrs	r3, r3, #3
 800c8f4:	f003 0303 	and.w	r3, r3, #3
 800c8f8:	4a15      	ldr	r2, [pc, #84]	; (800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800c8fa:	fa22 f303 	lsr.w	r3, r2, r3
 800c8fe:	637b      	str	r3, [r7, #52]	; 0x34
 800c900:	e01e      	b.n	800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c902:	4b12      	ldr	r3, [pc, #72]	; (800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c90a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c90e:	d106      	bne.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800c910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c916:	d102      	bne.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c918:	4b0e      	ldr	r3, [pc, #56]	; (800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800c91a:	637b      	str	r3, [r7, #52]	; 0x34
 800c91c:	e010      	b.n	800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c91e:	4b0b      	ldr	r3, [pc, #44]	; (800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c92a:	d106      	bne.n	800c93a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800c92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c932:	d102      	bne.n	800c93a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c934:	4b08      	ldr	r3, [pc, #32]	; (800c958 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800c936:	637b      	str	r3, [r7, #52]	; 0x34
 800c938:	e002      	b.n	800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c93a:	2300      	movs	r3, #0
 800c93c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800c93e:	e003      	b.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800c940:	e002      	b.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800c942:	2300      	movs	r3, #0
 800c944:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c946:	bf00      	nop
          }
        }
        break;
 800c948:	f000 be15 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c94c:	44020c00 	.word	0x44020c00
 800c950:	03d09000 	.word	0x03d09000
 800c954:	003d0900 	.word	0x003d0900
 800c958:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800c95c:	4b9e      	ldr	r3, [pc, #632]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c95e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c962:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800c966:	633b      	str	r3, [r7, #48]	; 0x30
 800c968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800c96e:	d056      	beq.n	800ca1e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800c970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c972:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800c976:	f200 808b 	bhi.w	800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c980:	d03e      	beq.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800c982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c984:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c988:	f200 8082 	bhi.w	800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c992:	d027      	beq.n	800c9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800c994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c996:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c99a:	d879      	bhi.n	800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9a2:	d017      	beq.n	800c9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800c9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9aa:	d871      	bhi.n	800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800c9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d004      	beq.n	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800c9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9b8:	d004      	beq.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800c9ba:	e069      	b.n	800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c9bc:	f7fb fe7a 	bl	80086b4 <HAL_RCC_GetPCLK3Freq>
 800c9c0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c9c2:	e068      	b.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9c4:	f107 0314 	add.w	r3, r7, #20
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fd ffb5 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c9d2:	e060      	b.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9d4:	f107 0308 	add.w	r3, r7, #8
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fe f917 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c9e2:	e058      	b.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c9e4:	4b7c      	ldr	r3, [pc, #496]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800c9e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c9ea:	f003 0302 	and.w	r3, r3, #2
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d103      	bne.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800c9f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9f6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c9f8:	e04d      	b.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c9fe:	e04a      	b.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ca00:	4b75      	ldr	r3, [pc, #468]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ca02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ca06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca0e:	d103      	bne.n	800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800ca10:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ca14:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ca16:	e03e      	b.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ca1c:	e03b      	b.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca1e:	4b6e      	ldr	r3, [pc, #440]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ca20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ca24:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ca28:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca2a:	4b6b      	ldr	r3, [pc, #428]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f003 0302 	and.w	r3, r3, #2
 800ca32:	2b02      	cmp	r3, #2
 800ca34:	d10c      	bne.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800ca36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d109      	bne.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ca3c:	4b66      	ldr	r3, [pc, #408]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	08db      	lsrs	r3, r3, #3
 800ca42:	f003 0303 	and.w	r3, r3, #3
 800ca46:	4a65      	ldr	r2, [pc, #404]	; (800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800ca48:	fa22 f303 	lsr.w	r3, r2, r3
 800ca4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ca4e:	e01e      	b.n	800ca8e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca50:	4b61      	ldr	r3, [pc, #388]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca5c:	d106      	bne.n	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800ca5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca64:	d102      	bne.n	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ca66:	4b5e      	ldr	r3, [pc, #376]	; (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800ca68:	637b      	str	r3, [r7, #52]	; 0x34
 800ca6a:	e010      	b.n	800ca8e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca6c:	4b5a      	ldr	r3, [pc, #360]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca78:	d106      	bne.n	800ca88 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800ca7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca80:	d102      	bne.n	800ca88 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ca82:	4b58      	ldr	r3, [pc, #352]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800ca84:	637b      	str	r3, [r7, #52]	; 0x34
 800ca86:	e002      	b.n	800ca8e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800ca8c:	e003      	b.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800ca8e:	e002      	b.n	800ca96 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800ca90:	2300      	movs	r3, #0
 800ca92:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ca94:	bf00      	nop
          }
        }
        break;
 800ca96:	f000 bd6e 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800ca9a:	4b4f      	ldr	r3, [pc, #316]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ca9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800caa0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800caa4:	633b      	str	r3, [r7, #48]	; 0x30
 800caa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800caac:	d056      	beq.n	800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800caae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800cab4:	f200 808b 	bhi.w	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800cab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cabe:	d03e      	beq.n	800cb3e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800cac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cac6:	f200 8082 	bhi.w	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800caca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cacc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cad0:	d027      	beq.n	800cb22 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800cad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cad8:	d879      	bhi.n	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800cada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cadc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cae0:	d017      	beq.n	800cb12 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800cae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cae8:	d871      	bhi.n	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800caea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caec:	2b00      	cmp	r3, #0
 800caee:	d004      	beq.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800caf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800caf6:	d004      	beq.n	800cb02 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800caf8:	e069      	b.n	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800cafa:	f7fb fddb 	bl	80086b4 <HAL_RCC_GetPCLK3Freq>
 800cafe:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800cb00:	e068      	b.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb02:	f107 0314 	add.w	r3, r7, #20
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fd ff16 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cb10:	e060      	b.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb12:	f107 0308 	add.w	r3, r7, #8
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7fe f878 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cb20:	e058      	b.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800cb22:	4b2d      	ldr	r3, [pc, #180]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800cb24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cb28:	f003 0302 	and.w	r3, r3, #2
 800cb2c:	2b02      	cmp	r3, #2
 800cb2e:	d103      	bne.n	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800cb30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb34:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800cb36:	e04d      	b.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cb3c:	e04a      	b.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800cb3e:	4b26      	ldr	r3, [pc, #152]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800cb40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cb44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb4c:	d103      	bne.n	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800cb4e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cb52:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800cb54:	e03e      	b.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cb5a:	e03b      	b.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb5c:	4b1e      	ldr	r3, [pc, #120]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800cb5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cb62:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cb66:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb68:	4b1b      	ldr	r3, [pc, #108]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f003 0302 	and.w	r3, r3, #2
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	d10c      	bne.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800cb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d109      	bne.n	800cb8e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cb7a:	4b17      	ldr	r3, [pc, #92]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	08db      	lsrs	r3, r3, #3
 800cb80:	f003 0303 	and.w	r3, r3, #3
 800cb84:	4a15      	ldr	r2, [pc, #84]	; (800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800cb86:	fa22 f303 	lsr.w	r3, r2, r3
 800cb8a:	637b      	str	r3, [r7, #52]	; 0x34
 800cb8c:	e01e      	b.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb8e:	4b12      	ldr	r3, [pc, #72]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb9a:	d106      	bne.n	800cbaa <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800cb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cba2:	d102      	bne.n	800cbaa <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cba4:	4b0e      	ldr	r3, [pc, #56]	; (800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800cba6:	637b      	str	r3, [r7, #52]	; 0x34
 800cba8:	e010      	b.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cbaa:	4b0b      	ldr	r3, [pc, #44]	; (800cbd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbb6:	d106      	bne.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800cbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbbe:	d102      	bne.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cbc0:	4b08      	ldr	r3, [pc, #32]	; (800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800cbc2:	637b      	str	r3, [r7, #52]	; 0x34
 800cbc4:	e002      	b.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800cbca:	e003      	b.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800cbcc:	e002      	b.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cbd2:	bf00      	nop
          }
        }
        break;
 800cbd4:	f000 bccf 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cbd8:	44020c00 	.word	0x44020c00
 800cbdc:	03d09000 	.word	0x03d09000
 800cbe0:	003d0900 	.word	0x003d0900
 800cbe4:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800cbe8:	4b9e      	ldr	r3, [pc, #632]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cbea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800cbee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cbf2:	633b      	str	r3, [r7, #48]	; 0x30
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cbfa:	d056      	beq.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800cbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc02:	f200 808b 	bhi.w	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800cc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc0c:	d03e      	beq.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc14:	f200 8082 	bhi.w	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800cc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cc1e:	d027      	beq.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800cc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cc26:	d879      	bhi.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800cc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc2e:	d017      	beq.n	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800cc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc36:	d871      	bhi.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800cc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d004      	beq.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800cc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc44:	d004      	beq.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800cc46:	e069      	b.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800cc48:	f7fb fd34 	bl	80086b4 <HAL_RCC_GetPCLK3Freq>
 800cc4c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800cc4e:	e068      	b.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc50:	f107 0314 	add.w	r3, r7, #20
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7fd fe6f 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cc5e:	e060      	b.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc60:	f107 0308 	add.w	r3, r7, #8
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fd ffd1 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cc6e:	e058      	b.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800cc70:	4b7c      	ldr	r3, [pc, #496]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cc72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cc76:	f003 0302 	and.w	r3, r3, #2
 800cc7a:	2b02      	cmp	r3, #2
 800cc7c:	d103      	bne.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800cc7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc82:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800cc84:	e04d      	b.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cc8a:	e04a      	b.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800cc8c:	4b75      	ldr	r3, [pc, #468]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cc8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800cc92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc9a:	d103      	bne.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800cc9c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cca0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800cca2:	e03e      	b.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800cca4:	2300      	movs	r3, #0
 800cca6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cca8:	e03b      	b.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccaa:	4b6e      	ldr	r3, [pc, #440]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ccac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ccb0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ccb4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ccb6:	4b6b      	ldr	r3, [pc, #428]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f003 0302 	and.w	r3, r3, #2
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	d10c      	bne.n	800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800ccc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d109      	bne.n	800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ccc8:	4b66      	ldr	r3, [pc, #408]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	08db      	lsrs	r3, r3, #3
 800ccce:	f003 0303 	and.w	r3, r3, #3
 800ccd2:	4a65      	ldr	r2, [pc, #404]	; (800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800ccd4:	fa22 f303 	lsr.w	r3, r2, r3
 800ccd8:	637b      	str	r3, [r7, #52]	; 0x34
 800ccda:	e01e      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ccdc:	4b61      	ldr	r3, [pc, #388]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cce8:	d106      	bne.n	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800ccea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccf0:	d102      	bne.n	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ccf2:	4b5e      	ldr	r3, [pc, #376]	; (800ce6c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800ccf4:	637b      	str	r3, [r7, #52]	; 0x34
 800ccf6:	e010      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ccf8:	4b5a      	ldr	r3, [pc, #360]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd04:	d106      	bne.n	800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800cd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd0c:	d102      	bne.n	800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cd0e:	4b58      	ldr	r3, [pc, #352]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800cd10:	637b      	str	r3, [r7, #52]	; 0x34
 800cd12:	e002      	b.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800cd14:	2300      	movs	r3, #0
 800cd16:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800cd18:	e003      	b.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800cd1a:	e002      	b.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cd20:	bf00      	nop
          }
        }
        break;
 800cd22:	f000 bc28 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cd26:	4b4f      	ldr	r3, [pc, #316]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cd28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd30:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800cd32:	4b4c      	ldr	r3, [pc, #304]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd3e:	d106      	bne.n	800cd4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800cd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d103      	bne.n	800cd4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800cd46:	4b4a      	ldr	r3, [pc, #296]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800cd48:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800cd4a:	f000 bc14 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800cd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd54:	d108      	bne.n	800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd56:	f107 0320 	add.w	r3, r7, #32
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7fd fc82 	bl	800a664 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cd64:	f000 bc07 	b.w	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800cd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd6e:	d107      	bne.n	800cd80 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd70:	f107 0314 	add.w	r3, r7, #20
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7fd fddf 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cd7e:	e3fa      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800cd80:	2300      	movs	r3, #0
 800cd82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800cd84:	e3f7      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800cd86:	4b37      	ldr	r3, [pc, #220]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cd88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cd8c:	f003 0307 	and.w	r3, r3, #7
 800cd90:	633b      	str	r3, [r7, #48]	; 0x30
 800cd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd94:	2b04      	cmp	r3, #4
 800cd96:	d861      	bhi.n	800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800cd98:	a201      	add	r2, pc, #4	; (adr r2, 800cda0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800cd9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd9e:	bf00      	nop
 800cda0:	0800cdb5 	.word	0x0800cdb5
 800cda4:	0800cdc5 	.word	0x0800cdc5
 800cda8:	0800cdd5 	.word	0x0800cdd5
 800cdac:	0800cde5 	.word	0x0800cde5
 800cdb0:	0800cdeb 	.word	0x0800cdeb
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cdb4:	f107 0320 	add.w	r3, r7, #32
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7fd fc53 	bl	800a664 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cdc2:	e04e      	b.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdc4:	f107 0314 	add.w	r3, r7, #20
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7fd fdb5 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cdd2:	e046      	b.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdd4:	f107 0308 	add.w	r3, r7, #8
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7fd ff17 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cde2:	e03e      	b.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800cde4:	4b23      	ldr	r3, [pc, #140]	; (800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800cde6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cde8:	e03b      	b.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cdea:	4b1e      	ldr	r3, [pc, #120]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cdec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cdf0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cdf4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cdf6:	4b1b      	ldr	r3, [pc, #108]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f003 0302 	and.w	r3, r3, #2
 800cdfe:	2b02      	cmp	r3, #2
 800ce00:	d10c      	bne.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800ce02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d109      	bne.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ce08:	4b16      	ldr	r3, [pc, #88]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	08db      	lsrs	r3, r3, #3
 800ce0e:	f003 0303 	and.w	r3, r3, #3
 800ce12:	4a15      	ldr	r2, [pc, #84]	; (800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800ce14:	fa22 f303 	lsr.w	r3, r2, r3
 800ce18:	637b      	str	r3, [r7, #52]	; 0x34
 800ce1a:	e01e      	b.n	800ce5a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce1c:	4b11      	ldr	r3, [pc, #68]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce28:	d106      	bne.n	800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800ce2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce30:	d102      	bne.n	800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ce32:	4b0e      	ldr	r3, [pc, #56]	; (800ce6c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800ce34:	637b      	str	r3, [r7, #52]	; 0x34
 800ce36:	e010      	b.n	800ce5a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce38:	4b0a      	ldr	r3, [pc, #40]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce44:	d106      	bne.n	800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800ce46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce4c:	d102      	bne.n	800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ce4e:	4b08      	ldr	r3, [pc, #32]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800ce50:	637b      	str	r3, [r7, #52]	; 0x34
 800ce52:	e002      	b.n	800ce5a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ce54:	2300      	movs	r3, #0
 800ce56:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800ce58:	e003      	b.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800ce5a:	e002      	b.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ce60:	bf00      	nop
          }
        }
        break;
 800ce62:	e388      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ce64:	44020c00 	.word	0x44020c00
 800ce68:	03d09000 	.word	0x03d09000
 800ce6c:	003d0900 	.word	0x003d0900
 800ce70:	007a1200 	.word	0x007a1200
 800ce74:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800ce78:	4ba9      	ldr	r3, [pc, #676]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ce7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ce82:	633b      	str	r3, [r7, #48]	; 0x30
 800ce84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce86:	2b20      	cmp	r3, #32
 800ce88:	f200 809a 	bhi.w	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800ce8c:	a201      	add	r2, pc, #4	; (adr r2, 800ce94 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800ce8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce92:	bf00      	nop
 800ce94:	0800cf19 	.word	0x0800cf19
 800ce98:	0800cfc1 	.word	0x0800cfc1
 800ce9c:	0800cfc1 	.word	0x0800cfc1
 800cea0:	0800cfc1 	.word	0x0800cfc1
 800cea4:	0800cfc1 	.word	0x0800cfc1
 800cea8:	0800cfc1 	.word	0x0800cfc1
 800ceac:	0800cfc1 	.word	0x0800cfc1
 800ceb0:	0800cfc1 	.word	0x0800cfc1
 800ceb4:	0800cf29 	.word	0x0800cf29
 800ceb8:	0800cfc1 	.word	0x0800cfc1
 800cebc:	0800cfc1 	.word	0x0800cfc1
 800cec0:	0800cfc1 	.word	0x0800cfc1
 800cec4:	0800cfc1 	.word	0x0800cfc1
 800cec8:	0800cfc1 	.word	0x0800cfc1
 800cecc:	0800cfc1 	.word	0x0800cfc1
 800ced0:	0800cfc1 	.word	0x0800cfc1
 800ced4:	0800cf39 	.word	0x0800cf39
 800ced8:	0800cfc1 	.word	0x0800cfc1
 800cedc:	0800cfc1 	.word	0x0800cfc1
 800cee0:	0800cfc1 	.word	0x0800cfc1
 800cee4:	0800cfc1 	.word	0x0800cfc1
 800cee8:	0800cfc1 	.word	0x0800cfc1
 800ceec:	0800cfc1 	.word	0x0800cfc1
 800cef0:	0800cfc1 	.word	0x0800cfc1
 800cef4:	0800cf49 	.word	0x0800cf49
 800cef8:	0800cfc1 	.word	0x0800cfc1
 800cefc:	0800cfc1 	.word	0x0800cfc1
 800cf00:	0800cfc1 	.word	0x0800cfc1
 800cf04:	0800cfc1 	.word	0x0800cfc1
 800cf08:	0800cfc1 	.word	0x0800cfc1
 800cf0c:	0800cfc1 	.word	0x0800cfc1
 800cf10:	0800cfc1 	.word	0x0800cfc1
 800cf14:	0800cf4f 	.word	0x0800cf4f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf18:	f107 0320 	add.w	r3, r7, #32
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fd fba1 	bl	800a664 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cf26:	e04e      	b.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf28:	f107 0314 	add.w	r3, r7, #20
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fd fd03 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cf36:	e046      	b.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf38:	f107 0308 	add.w	r3, r7, #8
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7fd fe65 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cf46:	e03e      	b.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800cf48:	4b76      	ldr	r3, [pc, #472]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800cf4a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cf4c:	e03b      	b.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cf4e:	4b74      	ldr	r3, [pc, #464]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cf50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cf54:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cf58:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cf5a:	4b71      	ldr	r3, [pc, #452]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f003 0302 	and.w	r3, r3, #2
 800cf62:	2b02      	cmp	r3, #2
 800cf64:	d10c      	bne.n	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800cf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d109      	bne.n	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cf6c:	4b6c      	ldr	r3, [pc, #432]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	08db      	lsrs	r3, r3, #3
 800cf72:	f003 0303 	and.w	r3, r3, #3
 800cf76:	4a6c      	ldr	r2, [pc, #432]	; (800d128 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800cf78:	fa22 f303 	lsr.w	r3, r2, r3
 800cf7c:	637b      	str	r3, [r7, #52]	; 0x34
 800cf7e:	e01e      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cf80:	4b67      	ldr	r3, [pc, #412]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf8c:	d106      	bne.n	800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800cf8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf94:	d102      	bne.n	800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cf96:	4b65      	ldr	r3, [pc, #404]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800cf98:	637b      	str	r3, [r7, #52]	; 0x34
 800cf9a:	e010      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf9c:	4b60      	ldr	r3, [pc, #384]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfa8:	d106      	bne.n	800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800cfaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cfb0:	d102      	bne.n	800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cfb2:	4b5f      	ldr	r3, [pc, #380]	; (800d130 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800cfb4:	637b      	str	r3, [r7, #52]	; 0x34
 800cfb6:	e002      	b.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800cfbc:	e003      	b.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800cfbe:	e002      	b.n	800cfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800cfc4:	bf00      	nop
          }
        }
        break;
 800cfc6:	e2d6      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800cfc8:	4b55      	ldr	r3, [pc, #340]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800cfca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cfce:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800cfd2:	633b      	str	r3, [r7, #48]	; 0x30
 800cfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfda:	d031      	beq.n	800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800cfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfe2:	d866      	bhi.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800cfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe6:	2bc0      	cmp	r3, #192	; 0xc0
 800cfe8:	d027      	beq.n	800d03a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800cfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfec:	2bc0      	cmp	r3, #192	; 0xc0
 800cfee:	d860      	bhi.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800cff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff2:	2b80      	cmp	r3, #128	; 0x80
 800cff4:	d019      	beq.n	800d02a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800cff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff8:	2b80      	cmp	r3, #128	; 0x80
 800cffa:	d85a      	bhi.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800cffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d003      	beq.n	800d00a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800d002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d004:	2b40      	cmp	r3, #64	; 0x40
 800d006:	d008      	beq.n	800d01a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800d008:	e053      	b.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d00a:	f107 0320 	add.w	r3, r7, #32
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fd fb28 	bl	800a664 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800d014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d016:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d018:	e04e      	b.n	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d01a:	f107 0314 	add.w	r3, r7, #20
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fd fc8a 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d028:	e046      	b.n	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d02a:	f107 0308 	add.w	r3, r7, #8
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fd fdec 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d038:	e03e      	b.n	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800d03a:	4b3a      	ldr	r3, [pc, #232]	; (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800d03c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d03e:	e03b      	b.n	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d040:	4b37      	ldr	r3, [pc, #220]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d042:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d046:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800d04a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d04c:	4b34      	ldr	r3, [pc, #208]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f003 0302 	and.w	r3, r3, #2
 800d054:	2b02      	cmp	r3, #2
 800d056:	d10c      	bne.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800d058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d109      	bne.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d05e:	4b30      	ldr	r3, [pc, #192]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	08db      	lsrs	r3, r3, #3
 800d064:	f003 0303 	and.w	r3, r3, #3
 800d068:	4a2f      	ldr	r2, [pc, #188]	; (800d128 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800d06a:	fa22 f303 	lsr.w	r3, r2, r3
 800d06e:	637b      	str	r3, [r7, #52]	; 0x34
 800d070:	e01e      	b.n	800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d072:	4b2b      	ldr	r3, [pc, #172]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d07a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d07e:	d106      	bne.n	800d08e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800d080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d086:	d102      	bne.n	800d08e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800d088:	4b28      	ldr	r3, [pc, #160]	; (800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800d08a:	637b      	str	r3, [r7, #52]	; 0x34
 800d08c:	e010      	b.n	800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d08e:	4b24      	ldr	r3, [pc, #144]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d096:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d09a:	d106      	bne.n	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800d09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d0a2:	d102      	bne.n	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800d0a4:	4b22      	ldr	r3, [pc, #136]	; (800d130 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800d0a6:	637b      	str	r3, [r7, #52]	; 0x34
 800d0a8:	e002      	b.n	800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800d0ae:	e003      	b.n	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800d0b0:	e002      	b.n	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d0b6:	bf00      	nop
          }
        }
        break;
 800d0b8:	e25d      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800d0ba:	4b19      	ldr	r3, [pc, #100]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d0bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d0c0:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800d0c4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800d0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d103      	bne.n	800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800d0cc:	f7fb fadc 	bl	8008688 <HAL_RCC_GetPCLK2Freq>
 800d0d0:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800d0d2:	e250      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800d0d4:	4b12      	ldr	r3, [pc, #72]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0e0:	d10b      	bne.n	800d0fa <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0e8:	d107      	bne.n	800d0fa <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0ea:	f107 0314 	add.w	r3, r7, #20
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fd fc22 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	637b      	str	r3, [r7, #52]	; 0x34
 800d0f8:	e04f      	b.n	800d19a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800d0fa:	4b09      	ldr	r3, [pc, #36]	; (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d106:	d115      	bne.n	800d134 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800d108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d10a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d10e:	d111      	bne.n	800d134 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d110:	f107 0308 	add.w	r3, r7, #8
 800d114:	4618      	mov	r0, r3
 800d116:	f7fd fd79 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	637b      	str	r3, [r7, #52]	; 0x34
 800d11e:	e03c      	b.n	800d19a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800d120:	44020c00 	.word	0x44020c00
 800d124:	00bb8000 	.word	0x00bb8000
 800d128:	03d09000 	.word	0x03d09000
 800d12c:	003d0900 	.word	0x003d0900
 800d130:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800d134:	4b94      	ldr	r3, [pc, #592]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f003 0302 	and.w	r3, r3, #2
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	d10d      	bne.n	800d15c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800d140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d142:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d146:	d109      	bne.n	800d15c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d148:	4b8f      	ldr	r3, [pc, #572]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	08db      	lsrs	r3, r3, #3
 800d14e:	f003 0303 	and.w	r3, r3, #3
 800d152:	4a8e      	ldr	r2, [pc, #568]	; (800d38c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800d154:	fa22 f303 	lsr.w	r3, r2, r3
 800d158:	637b      	str	r3, [r7, #52]	; 0x34
 800d15a:	e01e      	b.n	800d19a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800d15c:	4b8a      	ldr	r3, [pc, #552]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d168:	d106      	bne.n	800d178 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800d16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d170:	d102      	bne.n	800d178 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800d172:	4b87      	ldr	r3, [pc, #540]	; (800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800d174:	637b      	str	r3, [r7, #52]	; 0x34
 800d176:	e010      	b.n	800d19a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800d178:	4b83      	ldr	r3, [pc, #524]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d180:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d184:	d106      	bne.n	800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800d186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d188:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800d18c:	d102      	bne.n	800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800d18e:	4b81      	ldr	r3, [pc, #516]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800d190:	637b      	str	r3, [r7, #52]	; 0x34
 800d192:	e002      	b.n	800d19a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800d194:	2300      	movs	r3, #0
 800d196:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d198:	e1ed      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d19a:	e1ec      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800d19c:	4b7a      	ldr	r3, [pc, #488]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d19e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d1a2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d1a6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800d1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d103      	bne.n	800d1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800d1ae:	f7fb fa81 	bl	80086b4 <HAL_RCC_GetPCLK3Freq>
 800d1b2:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800d1b4:	e1df      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800d1b6:	4b74      	ldr	r3, [pc, #464]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1c2:	d10b      	bne.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800d1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1ca:	d107      	bne.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1cc:	f107 0314 	add.w	r3, r7, #20
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7fd fbb1 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	637b      	str	r3, [r7, #52]	; 0x34
 800d1da:	e045      	b.n	800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800d1dc:	4b6a      	ldr	r3, [pc, #424]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1e8:	d10b      	bne.n	800d202 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800d1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d1f0:	d107      	bne.n	800d202 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1f2:	f107 0308 	add.w	r3, r7, #8
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7fd fd08 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	637b      	str	r3, [r7, #52]	; 0x34
 800d200:	e032      	b.n	800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800d202:	4b61      	ldr	r3, [pc, #388]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f003 0302 	and.w	r3, r3, #2
 800d20a:	2b02      	cmp	r3, #2
 800d20c:	d10d      	bne.n	800d22a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800d20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d210:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d214:	d109      	bne.n	800d22a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d216:	4b5c      	ldr	r3, [pc, #368]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	08db      	lsrs	r3, r3, #3
 800d21c:	f003 0303 	and.w	r3, r3, #3
 800d220:	4a5a      	ldr	r2, [pc, #360]	; (800d38c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800d222:	fa22 f303 	lsr.w	r3, r2, r3
 800d226:	637b      	str	r3, [r7, #52]	; 0x34
 800d228:	e01e      	b.n	800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800d22a:	4b57      	ldr	r3, [pc, #348]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d236:	d106      	bne.n	800d246 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800d238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d23e:	d102      	bne.n	800d246 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800d240:	4b53      	ldr	r3, [pc, #332]	; (800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800d242:	637b      	str	r3, [r7, #52]	; 0x34
 800d244:	e010      	b.n	800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800d246:	4b50      	ldr	r3, [pc, #320]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d24e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d252:	d106      	bne.n	800d262 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800d254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d256:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800d25a:	d102      	bne.n	800d262 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800d25c:	4b4d      	ldr	r3, [pc, #308]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800d25e:	637b      	str	r3, [r7, #52]	; 0x34
 800d260:	e002      	b.n	800d268 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800d262:	2300      	movs	r3, #0
 800d264:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d266:	e186      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d268:	e185      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d26a:	4b47      	ldr	r3, [pc, #284]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d26c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d270:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800d274:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800d276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d103      	bne.n	800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800d27c:	f7fb fa04 	bl	8008688 <HAL_RCC_GetPCLK2Freq>
 800d280:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800d282:	e178      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800d284:	4b40      	ldr	r3, [pc, #256]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d28c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d290:	d10b      	bne.n	800d2aa <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800d292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d298:	d107      	bne.n	800d2aa <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d29a:	f107 0314 	add.w	r3, r7, #20
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7fd fb4a 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d2a4:	69bb      	ldr	r3, [r7, #24]
 800d2a6:	637b      	str	r3, [r7, #52]	; 0x34
 800d2a8:	e045      	b.n	800d336 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800d2aa:	4b37      	ldr	r3, [pc, #220]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d2b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2b6:	d10b      	bne.n	800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800d2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2be:	d107      	bne.n	800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2c0:	f107 0308 	add.w	r3, r7, #8
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7fd fca1 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	637b      	str	r3, [r7, #52]	; 0x34
 800d2ce:	e032      	b.n	800d336 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800d2d0:	4b2d      	ldr	r3, [pc, #180]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f003 0302 	and.w	r3, r3, #2
 800d2d8:	2b02      	cmp	r3, #2
 800d2da:	d10d      	bne.n	800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800d2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2de:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800d2e2:	d109      	bne.n	800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d2e4:	4b28      	ldr	r3, [pc, #160]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	08db      	lsrs	r3, r3, #3
 800d2ea:	f003 0303 	and.w	r3, r3, #3
 800d2ee:	4a27      	ldr	r2, [pc, #156]	; (800d38c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800d2f0:	fa22 f303 	lsr.w	r3, r2, r3
 800d2f4:	637b      	str	r3, [r7, #52]	; 0x34
 800d2f6:	e01e      	b.n	800d336 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800d2f8:	4b23      	ldr	r3, [pc, #140]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d304:	d106      	bne.n	800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800d306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d30c:	d102      	bne.n	800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800d30e:	4b20      	ldr	r3, [pc, #128]	; (800d390 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800d310:	637b      	str	r3, [r7, #52]	; 0x34
 800d312:	e010      	b.n	800d336 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800d314:	4b1c      	ldr	r3, [pc, #112]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d31c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d320:	d106      	bne.n	800d330 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800d322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d324:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800d328:	d102      	bne.n	800d330 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800d32a:	4b1a      	ldr	r3, [pc, #104]	; (800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800d32c:	637b      	str	r3, [r7, #52]	; 0x34
 800d32e:	e002      	b.n	800d336 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800d330:	2300      	movs	r3, #0
 800d332:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d334:	e11f      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d336:	e11e      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d338:	4b13      	ldr	r3, [pc, #76]	; (800d388 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800d33a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d33e:	f003 0303 	and.w	r3, r3, #3
 800d342:	633b      	str	r3, [r7, #48]	; 0x30
 800d344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d346:	2b03      	cmp	r3, #3
 800d348:	d85f      	bhi.n	800d40a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800d34a:	a201      	add	r2, pc, #4	; (adr r2, 800d350 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800d34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d350:	0800d361 	.word	0x0800d361
 800d354:	0800d369 	.word	0x0800d369
 800d358:	0800d379 	.word	0x0800d379
 800d35c:	0800d399 	.word	0x0800d399

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800d360:	f7fb f960 	bl	8008624 <HAL_RCC_GetHCLKFreq>
 800d364:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800d366:	e053      	b.n	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d368:	f107 0320 	add.w	r3, r7, #32
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7fd f979 	bl	800a664 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800d372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d374:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d376:	e04b      	b.n	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d378:	f107 0314 	add.w	r3, r7, #20
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7fd fadb 	bl	800a938 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d386:	e043      	b.n	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800d388:	44020c00 	.word	0x44020c00
 800d38c:	03d09000 	.word	0x03d09000
 800d390:	003d0900 	.word	0x003d0900
 800d394:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d398:	4b79      	ldr	r3, [pc, #484]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d39a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d39e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800d3a2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d3a4:	4b76      	ldr	r3, [pc, #472]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f003 0302 	and.w	r3, r3, #2
 800d3ac:	2b02      	cmp	r3, #2
 800d3ae:	d10c      	bne.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800d3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d109      	bne.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d3b6:	4b72      	ldr	r3, [pc, #456]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	08db      	lsrs	r3, r3, #3
 800d3bc:	f003 0303 	and.w	r3, r3, #3
 800d3c0:	4a70      	ldr	r2, [pc, #448]	; (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800d3c2:	fa22 f303 	lsr.w	r3, r2, r3
 800d3c6:	637b      	str	r3, [r7, #52]	; 0x34
 800d3c8:	e01e      	b.n	800d408 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d3ca:	4b6d      	ldr	r3, [pc, #436]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d3d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3d6:	d106      	bne.n	800d3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800d3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3de:	d102      	bne.n	800d3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800d3e0:	4b69      	ldr	r3, [pc, #420]	; (800d588 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800d3e2:	637b      	str	r3, [r7, #52]	; 0x34
 800d3e4:	e010      	b.n	800d408 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d3e6:	4b66      	ldr	r3, [pc, #408]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d3f2:	d106      	bne.n	800d402 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800d3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d3fa:	d102      	bne.n	800d402 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800d3fc:	4b63      	ldr	r3, [pc, #396]	; (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800d3fe:	637b      	str	r3, [r7, #52]	; 0x34
 800d400:	e002      	b.n	800d408 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800d402:	2300      	movs	r3, #0
 800d404:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800d406:	e003      	b.n	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800d408:	e002      	b.n	800d410 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800d40a:	2300      	movs	r3, #0
 800d40c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800d40e:	bf00      	nop
          }
        }
        break;
 800d410:	e0b1      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800d412:	4b5b      	ldr	r3, [pc, #364]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d414:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d418:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d41c:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800d41e:	4b58      	ldr	r3, [pc, #352]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d424:	f003 0302 	and.w	r3, r3, #2
 800d428:	2b02      	cmp	r3, #2
 800d42a:	d106      	bne.n	800d43a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800d42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d103      	bne.n	800d43a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800d432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d436:	637b      	str	r3, [r7, #52]	; 0x34
 800d438:	e01f      	b.n	800d47a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800d43a:	4b51      	ldr	r3, [pc, #324]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d43c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d448:	d106      	bne.n	800d458 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800d44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d44c:	2b40      	cmp	r3, #64	; 0x40
 800d44e:	d103      	bne.n	800d458 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800d450:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d454:	637b      	str	r3, [r7, #52]	; 0x34
 800d456:	e010      	b.n	800d47a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800d458:	4b49      	ldr	r3, [pc, #292]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d464:	d106      	bne.n	800d474 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800d466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d468:	2b80      	cmp	r3, #128	; 0x80
 800d46a:	d103      	bne.n	800d474 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800d46c:	f248 0312 	movw	r3, #32786	; 0x8012
 800d470:	637b      	str	r3, [r7, #52]	; 0x34
 800d472:	e002      	b.n	800d47a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800d474:	2300      	movs	r3, #0
 800d476:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800d478:	e07d      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d47a:	e07c      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800d47c:	4b40      	ldr	r3, [pc, #256]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d47e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d482:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d486:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800d488:	4b3d      	ldr	r3, [pc, #244]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d494:	d105      	bne.n	800d4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800d496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d102      	bne.n	800d4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800d49c:	4b3c      	ldr	r3, [pc, #240]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800d49e:	637b      	str	r3, [r7, #52]	; 0x34
 800d4a0:	e031      	b.n	800d506 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800d4a2:	4b37      	ldr	r3, [pc, #220]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d4ae:	d10a      	bne.n	800d4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800d4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b2:	2b10      	cmp	r3, #16
 800d4b4:	d107      	bne.n	800d4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d4b6:	f107 0320 	add.w	r3, r7, #32
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7fd f8d2 	bl	800a664 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c2:	637b      	str	r3, [r7, #52]	; 0x34
 800d4c4:	e01f      	b.n	800d506 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800d4c6:	4b2e      	ldr	r3, [pc, #184]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d4c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d4cc:	f003 0302 	and.w	r3, r3, #2
 800d4d0:	2b02      	cmp	r3, #2
 800d4d2:	d106      	bne.n	800d4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d6:	2b20      	cmp	r3, #32
 800d4d8:	d103      	bne.n	800d4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800d4da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4de:	637b      	str	r3, [r7, #52]	; 0x34
 800d4e0:	e011      	b.n	800d506 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800d4e2:	4b27      	ldr	r3, [pc, #156]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d4e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d4e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d4ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d4f0:	d106      	bne.n	800d500 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f4:	2b30      	cmp	r3, #48	; 0x30
 800d4f6:	d103      	bne.n	800d500 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800d4f8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800d4fc:	637b      	str	r3, [r7, #52]	; 0x34
 800d4fe:	e002      	b.n	800d506 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800d500:	2300      	movs	r3, #0
 800d502:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800d504:	e037      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d506:	e036      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800d508:	4b1d      	ldr	r3, [pc, #116]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d50a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d50e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d512:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800d514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d516:	2b10      	cmp	r3, #16
 800d518:	d107      	bne.n	800d52a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d51a:	f107 0320 	add.w	r3, r7, #32
 800d51e:	4618      	mov	r0, r3
 800d520:	f7fd f8a0 	bl	800a664 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d526:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800d528:	e025      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800d52a:	4b15      	ldr	r3, [pc, #84]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d536:	d10a      	bne.n	800d54e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800d538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53a:	2b20      	cmp	r3, #32
 800d53c:	d107      	bne.n	800d54e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d53e:	f107 0308 	add.w	r3, r7, #8
 800d542:	4618      	mov	r0, r3
 800d544:	f7fd fb62 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	637b      	str	r3, [r7, #52]	; 0x34
 800d54c:	e00f      	b.n	800d56e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800d54e:	4b0c      	ldr	r3, [pc, #48]	; (800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d55a:	d105      	bne.n	800d568 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800d55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55e:	2b30      	cmp	r3, #48	; 0x30
 800d560:	d102      	bne.n	800d568 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800d562:	4b0b      	ldr	r3, [pc, #44]	; (800d590 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800d564:	637b      	str	r3, [r7, #52]	; 0x34
 800d566:	e002      	b.n	800d56e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800d568:	2300      	movs	r3, #0
 800d56a:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 800d56c:	e003      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d56e:	e002      	b.n	800d576 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800d570:	2300      	movs	r3, #0
 800d572:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d574:	bf00      	nop
    }
  }

  return (frequency);
 800d576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d578:	4618      	mov	r0, r3
 800d57a:	373c      	adds	r7, #60	; 0x3c
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd90      	pop	{r4, r7, pc}
 800d580:	44020c00 	.word	0x44020c00
 800d584:	03d09000 	.word	0x03d09000
 800d588:	003d0900 	.word	0x003d0900
 800d58c:	007a1200 	.word	0x007a1200
 800d590:	02dc6c00 	.word	0x02dc6c00

0800d594 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800d59c:	4b48      	ldr	r3, [pc, #288]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a47      	ldr	r2, [pc, #284]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d5a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d5a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d5a8:	f7f6 fd9e 	bl	80040e8 <HAL_GetTick>
 800d5ac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d5ae:	e008      	b.n	800d5c2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d5b0:	f7f6 fd9a 	bl	80040e8 <HAL_GetTick>
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	1ad3      	subs	r3, r2, r3
 800d5ba:	2b02      	cmp	r3, #2
 800d5bc:	d901      	bls.n	800d5c2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d5be:	2303      	movs	r3, #3
 800d5c0:	e07a      	b.n	800d6b8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d5c2:	4b3f      	ldr	r3, [pc, #252]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d1f0      	bne.n	800d5b0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800d5ce:	4b3c      	ldr	r3, [pc, #240]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d5d6:	f023 0303 	bic.w	r3, r3, #3
 800d5da:	687a      	ldr	r2, [r7, #4]
 800d5dc:	6811      	ldr	r1, [r2, #0]
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	6852      	ldr	r2, [r2, #4]
 800d5e2:	0212      	lsls	r2, r2, #8
 800d5e4:	430a      	orrs	r2, r1
 800d5e6:	4936      	ldr	r1, [pc, #216]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	62cb      	str	r3, [r1, #44]	; 0x2c
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	689b      	ldr	r3, [r3, #8]
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	3b01      	subs	r3, #1
 800d5fc:	025b      	lsls	r3, r3, #9
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	431a      	orrs	r2, r3
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	691b      	ldr	r3, [r3, #16]
 800d606:	3b01      	subs	r3, #1
 800d608:	041b      	lsls	r3, r3, #16
 800d60a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d60e:	431a      	orrs	r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	695b      	ldr	r3, [r3, #20]
 800d614:	3b01      	subs	r3, #1
 800d616:	061b      	lsls	r3, r3, #24
 800d618:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d61c:	4928      	ldr	r1, [pc, #160]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d61e:	4313      	orrs	r3, r2
 800d620:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800d622:	4b27      	ldr	r3, [pc, #156]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d626:	f023 020c 	bic.w	r2, r3, #12
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	699b      	ldr	r3, [r3, #24]
 800d62e:	4924      	ldr	r1, [pc, #144]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d630:	4313      	orrs	r3, r2
 800d632:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800d634:	4b22      	ldr	r3, [pc, #136]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d638:	f023 0220 	bic.w	r2, r3, #32
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	69db      	ldr	r3, [r3, #28]
 800d640:	491f      	ldr	r1, [pc, #124]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d642:	4313      	orrs	r3, r2
 800d644:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800d646:	4b1e      	ldr	r3, [pc, #120]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64e:	491c      	ldr	r1, [pc, #112]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d650:	4313      	orrs	r3, r2
 800d652:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800d654:	4b1a      	ldr	r3, [pc, #104]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d658:	4a19      	ldr	r2, [pc, #100]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d65a:	f023 0310 	bic.w	r3, r3, #16
 800d65e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800d660:	4b17      	ldr	r3, [pc, #92]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d664:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d668:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	6a12      	ldr	r2, [r2, #32]
 800d670:	00d2      	lsls	r2, r2, #3
 800d672:	4913      	ldr	r1, [pc, #76]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d674:	4313      	orrs	r3, r2
 800d676:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800d678:	4b11      	ldr	r3, [pc, #68]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d67c:	4a10      	ldr	r2, [pc, #64]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d67e:	f043 0310 	orr.w	r3, r3, #16
 800d682:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800d684:	4b0e      	ldr	r3, [pc, #56]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a0d      	ldr	r2, [pc, #52]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d68a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d68e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d690:	f7f6 fd2a 	bl	80040e8 <HAL_GetTick>
 800d694:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d696:	e008      	b.n	800d6aa <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d698:	f7f6 fd26 	bl	80040e8 <HAL_GetTick>
 800d69c:	4602      	mov	r2, r0
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	1ad3      	subs	r3, r2, r3
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	d901      	bls.n	800d6aa <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800d6a6:	2303      	movs	r3, #3
 800d6a8:	e006      	b.n	800d6b8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d6aa:	4b05      	ldr	r3, [pc, #20]	; (800d6c0 <RCCEx_PLL2_Config+0x12c>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d0f0      	beq.n	800d698 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800d6b6:	2300      	movs	r3, #0

}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3710      	adds	r7, #16
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	44020c00 	.word	0x44020c00

0800d6c4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b084      	sub	sp, #16
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800d6cc:	4b48      	ldr	r3, [pc, #288]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a47      	ldr	r2, [pc, #284]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d6d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d6d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d6d8:	f7f6 fd06 	bl	80040e8 <HAL_GetTick>
 800d6dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d6de:	e008      	b.n	800d6f2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d6e0:	f7f6 fd02 	bl	80040e8 <HAL_GetTick>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	2b02      	cmp	r3, #2
 800d6ec:	d901      	bls.n	800d6f2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d6ee:	2303      	movs	r3, #3
 800d6f0:	e07a      	b.n	800d7e8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d6f2:	4b3f      	ldr	r3, [pc, #252]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d1f0      	bne.n	800d6e0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800d6fe:	4b3c      	ldr	r3, [pc, #240]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d702:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d706:	f023 0303 	bic.w	r3, r3, #3
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	6811      	ldr	r1, [r2, #0]
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	6852      	ldr	r2, [r2, #4]
 800d712:	0212      	lsls	r2, r2, #8
 800d714:	430a      	orrs	r2, r1
 800d716:	4936      	ldr	r1, [pc, #216]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d718:	4313      	orrs	r3, r2
 800d71a:	630b      	str	r3, [r1, #48]	; 0x30
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	3b01      	subs	r3, #1
 800d722:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	3b01      	subs	r3, #1
 800d72c:	025b      	lsls	r3, r3, #9
 800d72e:	b29b      	uxth	r3, r3
 800d730:	431a      	orrs	r2, r3
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	691b      	ldr	r3, [r3, #16]
 800d736:	3b01      	subs	r3, #1
 800d738:	041b      	lsls	r3, r3, #16
 800d73a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d73e:	431a      	orrs	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	695b      	ldr	r3, [r3, #20]
 800d744:	3b01      	subs	r3, #1
 800d746:	061b      	lsls	r3, r3, #24
 800d748:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d74c:	4928      	ldr	r1, [pc, #160]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d74e:	4313      	orrs	r3, r2
 800d750:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d752:	4b27      	ldr	r3, [pc, #156]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d756:	f023 020c 	bic.w	r2, r3, #12
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	699b      	ldr	r3, [r3, #24]
 800d75e:	4924      	ldr	r1, [pc, #144]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d760:	4313      	orrs	r3, r2
 800d762:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800d764:	4b22      	ldr	r3, [pc, #136]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d768:	f023 0220 	bic.w	r2, r3, #32
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	69db      	ldr	r3, [r3, #28]
 800d770:	491f      	ldr	r1, [pc, #124]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d772:	4313      	orrs	r3, r2
 800d774:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800d776:	4b1e      	ldr	r3, [pc, #120]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d77e:	491c      	ldr	r1, [pc, #112]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d780:	4313      	orrs	r3, r2
 800d782:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800d784:	4b1a      	ldr	r3, [pc, #104]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d788:	4a19      	ldr	r2, [pc, #100]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d78a:	f023 0310 	bic.w	r3, r3, #16
 800d78e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800d790:	4b17      	ldr	r3, [pc, #92]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d794:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d798:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	6a12      	ldr	r2, [r2, #32]
 800d7a0:	00d2      	lsls	r2, r2, #3
 800d7a2:	4913      	ldr	r1, [pc, #76]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800d7a8:	4b11      	ldr	r3, [pc, #68]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d7aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ac:	4a10      	ldr	r2, [pc, #64]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d7ae:	f043 0310 	orr.w	r3, r3, #16
 800d7b2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800d7b4:	4b0e      	ldr	r3, [pc, #56]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4a0d      	ldr	r2, [pc, #52]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d7ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d7be:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d7c0:	f7f6 fc92 	bl	80040e8 <HAL_GetTick>
 800d7c4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d7c6:	e008      	b.n	800d7da <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d7c8:	f7f6 fc8e 	bl	80040e8 <HAL_GetTick>
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	1ad3      	subs	r3, r2, r3
 800d7d2:	2b02      	cmp	r3, #2
 800d7d4:	d901      	bls.n	800d7da <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800d7d6:	2303      	movs	r3, #3
 800d7d8:	e006      	b.n	800d7e8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d7da:	4b05      	ldr	r3, [pc, #20]	; (800d7f0 <RCCEx_PLL3_Config+0x12c>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d0f0      	beq.n	800d7c8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800d7e6:	2300      	movs	r3, #0
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3710      	adds	r7, #16
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	44020c00 	.word	0x44020c00

0800d7f4 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b087      	sub	sp, #28
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	60b9      	str	r1, [r7, #8]
 800d7fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800d800:	4b07      	ldr	r3, [pc, #28]	; (800d820 <HAL_RTCEx_BKUPWrite+0x2c>)
 800d802:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	697a      	ldr	r2, [r7, #20]
 800d80a:	4413      	add	r3, r2
 800d80c:	617b      	str	r3, [r7, #20]

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	601a      	str	r2, [r3, #0]
}
 800d814:	bf00      	nop
 800d816:	371c      	adds	r7, #28
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr
 800d820:	44007d00 	.word	0x44007d00

0800d824 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800d824:	b480      	push	{r7}
 800d826:	b085      	sub	sp, #20
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800d82e:	4b07      	ldr	r3, [pc, #28]	; (800d84c <HAL_RTCEx_BKUPRead+0x28>)
 800d830:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	68fa      	ldr	r2, [r7, #12]
 800d838:	4413      	add	r3, r2
 800d83a:	60fb      	str	r3, [r7, #12]

  /* Read the data from the specified register */
  return (*(__IO uint32_t *)tmp);
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
}
 800d840:	4618      	mov	r0, r3
 800d842:	3714      	adds	r7, #20
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	44007d00 	.word	0x44007d00

0800d850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d101      	bne.n	800d862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d85e:	2301      	movs	r3, #1
 800d860:	e049      	b.n	800d8f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d868:	b2db      	uxtb	r3, r3
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d106      	bne.n	800d87c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2200      	movs	r2, #0
 800d872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 f841 	bl	800d8fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2202      	movs	r2, #2
 800d880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	3304      	adds	r3, #4
 800d88c:	4619      	mov	r1, r3
 800d88e:	4610      	mov	r0, r2
 800d890:	f000 fa60 	bl	800dd54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2201      	movs	r2, #1
 800d898:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d8f4:	2300      	movs	r3, #0
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3708      	adds	r7, #8
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d8fe:	b480      	push	{r7}
 800d900:	b083      	sub	sp, #12
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d906:	bf00      	nop
 800d908:	370c      	adds	r7, #12
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr
	...

0800d914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d914:	b480      	push	{r7}
 800d916:	b085      	sub	sp, #20
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d922:	b2db      	uxtb	r3, r3
 800d924:	2b01      	cmp	r3, #1
 800d926:	d001      	beq.n	800d92c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d928:	2301      	movs	r3, #1
 800d92a:	e07c      	b.n	800da26 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2202      	movs	r2, #2
 800d930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	68da      	ldr	r2, [r3, #12]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f042 0201 	orr.w	r2, r2, #1
 800d942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4a3a      	ldr	r2, [pc, #232]	; (800da34 <HAL_TIM_Base_Start_IT+0x120>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d04a      	beq.n	800d9e4 <HAL_TIM_Base_Start_IT+0xd0>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	4a39      	ldr	r2, [pc, #228]	; (800da38 <HAL_TIM_Base_Start_IT+0x124>)
 800d954:	4293      	cmp	r3, r2
 800d956:	d045      	beq.n	800d9e4 <HAL_TIM_Base_Start_IT+0xd0>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d960:	d040      	beq.n	800d9e4 <HAL_TIM_Base_Start_IT+0xd0>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d96a:	d03b      	beq.n	800d9e4 <HAL_TIM_Base_Start_IT+0xd0>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a32      	ldr	r2, [pc, #200]	; (800da3c <HAL_TIM_Base_Start_IT+0x128>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d036      	beq.n	800d9e4 <HAL_TIM_Base_Start_IT+0xd0>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4a31      	ldr	r2, [pc, #196]	; (800da40 <HAL_TIM_Base_Start_IT+0x12c>)
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d031      	beq.n	800d9e4 <HAL_TIM_Base_Start_IT+0xd0>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a2f      	ldr	r2, [pc, #188]	; (800da44 <HAL_TIM_Base_Start_IT+0x130>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d02c      	beq.n	800d9e4 <HAL_TIM_Base_Start_IT+0xd0>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	4a2e      	ldr	r2, [pc, #184]	; (800da48 <HAL_TIM_Base_Start_IT+0x134>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d027      	beq.n	800d9e4 <HAL_TIM_Base_Start_IT+0xd0>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4a2c      	ldr	r2, [pc, #176]	; (800da4c <HAL_TIM_Base_Start_IT+0x138>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d022      	beq.n	800d9e4 <HAL_TIM_Base_Start_IT+0xd0>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4a2b      	ldr	r2, [pc, #172]	; (800da50 <HAL_TIM_Base_Start_IT+0x13c>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d01d      	beq.n	800d9e4 <HAL_TIM_Base_Start_IT+0xd0>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a29      	ldr	r2, [pc, #164]	; (800da54 <HAL_TIM_Base_Start_IT+0x140>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d018      	beq.n	800d9e4 <HAL_TIM_Base_Start_IT+0xd0>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4a28      	ldr	r2, [pc, #160]	; (800da58 <HAL_TIM_Base_Start_IT+0x144>)
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d013      	beq.n	800d9e4 <HAL_TIM_Base_Start_IT+0xd0>
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4a26      	ldr	r2, [pc, #152]	; (800da5c <HAL_TIM_Base_Start_IT+0x148>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d00e      	beq.n	800d9e4 <HAL_TIM_Base_Start_IT+0xd0>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4a25      	ldr	r2, [pc, #148]	; (800da60 <HAL_TIM_Base_Start_IT+0x14c>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d009      	beq.n	800d9e4 <HAL_TIM_Base_Start_IT+0xd0>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a23      	ldr	r2, [pc, #140]	; (800da64 <HAL_TIM_Base_Start_IT+0x150>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d004      	beq.n	800d9e4 <HAL_TIM_Base_Start_IT+0xd0>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4a22      	ldr	r2, [pc, #136]	; (800da68 <HAL_TIM_Base_Start_IT+0x154>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d115      	bne.n	800da10 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	689a      	ldr	r2, [r3, #8]
 800d9ea:	4b20      	ldr	r3, [pc, #128]	; (800da6c <HAL_TIM_Base_Start_IT+0x158>)
 800d9ec:	4013      	ands	r3, r2
 800d9ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2b06      	cmp	r3, #6
 800d9f4:	d015      	beq.n	800da22 <HAL_TIM_Base_Start_IT+0x10e>
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9fc:	d011      	beq.n	800da22 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f042 0201 	orr.w	r2, r2, #1
 800da0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da0e:	e008      	b.n	800da22 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f042 0201 	orr.w	r2, r2, #1
 800da1e:	601a      	str	r2, [r3, #0]
 800da20:	e000      	b.n	800da24 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800da24:	2300      	movs	r3, #0
}
 800da26:	4618      	mov	r0, r3
 800da28:	3714      	adds	r7, #20
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr
 800da32:	bf00      	nop
 800da34:	40012c00 	.word	0x40012c00
 800da38:	50012c00 	.word	0x50012c00
 800da3c:	40000400 	.word	0x40000400
 800da40:	50000400 	.word	0x50000400
 800da44:	40000800 	.word	0x40000800
 800da48:	50000800 	.word	0x50000800
 800da4c:	40000c00 	.word	0x40000c00
 800da50:	50000c00 	.word	0x50000c00
 800da54:	40013400 	.word	0x40013400
 800da58:	50013400 	.word	0x50013400
 800da5c:	40001800 	.word	0x40001800
 800da60:	50001800 	.word	0x50001800
 800da64:	40014000 	.word	0x40014000
 800da68:	50014000 	.word	0x50014000
 800da6c:	00010007 	.word	0x00010007

0800da70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	68db      	ldr	r3, [r3, #12]
 800da7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	691b      	ldr	r3, [r3, #16]
 800da86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	f003 0302 	and.w	r3, r3, #2
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d020      	beq.n	800dad4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f003 0302 	and.w	r3, r3, #2
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d01b      	beq.n	800dad4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	f06f 0202 	mvn.w	r2, #2
 800daa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2201      	movs	r2, #1
 800daaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	699b      	ldr	r3, [r3, #24]
 800dab2:	f003 0303 	and.w	r3, r3, #3
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d003      	beq.n	800dac2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f000 f92c 	bl	800dd18 <HAL_TIM_IC_CaptureCallback>
 800dac0:	e005      	b.n	800dace <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 f91e 	bl	800dd04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 f92f 	bl	800dd2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2200      	movs	r2, #0
 800dad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	f003 0304 	and.w	r3, r3, #4
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d020      	beq.n	800db20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f003 0304 	and.w	r3, r3, #4
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d01b      	beq.n	800db20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f06f 0204 	mvn.w	r2, #4
 800daf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2202      	movs	r2, #2
 800daf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	699b      	ldr	r3, [r3, #24]
 800dafe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db02:	2b00      	cmp	r3, #0
 800db04:	d003      	beq.n	800db0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 f906 	bl	800dd18 <HAL_TIM_IC_CaptureCallback>
 800db0c:	e005      	b.n	800db1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 f8f8 	bl	800dd04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 f909 	bl	800dd2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	f003 0308 	and.w	r3, r3, #8
 800db26:	2b00      	cmp	r3, #0
 800db28:	d020      	beq.n	800db6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f003 0308 	and.w	r3, r3, #8
 800db30:	2b00      	cmp	r3, #0
 800db32:	d01b      	beq.n	800db6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f06f 0208 	mvn.w	r2, #8
 800db3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2204      	movs	r2, #4
 800db42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	69db      	ldr	r3, [r3, #28]
 800db4a:	f003 0303 	and.w	r3, r3, #3
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d003      	beq.n	800db5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 f8e0 	bl	800dd18 <HAL_TIM_IC_CaptureCallback>
 800db58:	e005      	b.n	800db66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f000 f8d2 	bl	800dd04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f000 f8e3 	bl	800dd2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2200      	movs	r2, #0
 800db6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	f003 0310 	and.w	r3, r3, #16
 800db72:	2b00      	cmp	r3, #0
 800db74:	d020      	beq.n	800dbb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f003 0310 	and.w	r3, r3, #16
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d01b      	beq.n	800dbb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f06f 0210 	mvn.w	r2, #16
 800db88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2208      	movs	r2, #8
 800db8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	69db      	ldr	r3, [r3, #28]
 800db96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d003      	beq.n	800dba6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 f8ba 	bl	800dd18 <HAL_TIM_IC_CaptureCallback>
 800dba4:	e005      	b.n	800dbb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 f8ac 	bl	800dd04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 f8bd 	bl	800dd2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	f003 0301 	and.w	r3, r3, #1
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d00c      	beq.n	800dbdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f003 0301 	and.w	r3, r3, #1
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d007      	beq.n	800dbdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f06f 0201 	mvn.w	r2, #1
 800dbd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f7f3 f922 	bl	8000e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d00c      	beq.n	800dc00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d007      	beq.n	800dc00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dbf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 f9d2 	bl	800dfa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d00c      	beq.n	800dc24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d007      	beq.n	800dc24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dc1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 f9ca 	bl	800dfb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d00c      	beq.n	800dc48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d007      	beq.n	800dc48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dc40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 f87c 	bl	800dd40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	f003 0320 	and.w	r3, r3, #32
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00c      	beq.n	800dc6c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f003 0320 	and.w	r3, r3, #32
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d007      	beq.n	800dc6c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f06f 0220 	mvn.w	r2, #32
 800dc64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 f992 	bl	800df90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d00c      	beq.n	800dc90 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d007      	beq.n	800dc90 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800dc88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 f99e 	bl	800dfcc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d00c      	beq.n	800dcb4 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d007      	beq.n	800dcb4 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800dcac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 f996 	bl	800dfe0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00c      	beq.n	800dcd8 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d007      	beq.n	800dcd8 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800dcd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 f98e 	bl	800dff4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d00c      	beq.n	800dcfc <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d007      	beq.n	800dcfc <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800dcf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 f986 	bl	800e008 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dcfc:	bf00      	nop
 800dcfe:	3710      	adds	r7, #16
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dd0c:	bf00      	nop
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr

0800dd18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dd20:	bf00      	nop
 800dd22:	370c      	adds	r7, #12
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dd34:	bf00      	nop
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dd48:	bf00      	nop
 800dd4a:	370c      	adds	r7, #12
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd52:	4770      	bx	lr

0800dd54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b085      	sub	sp, #20
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	4a74      	ldr	r2, [pc, #464]	; (800df38 <TIM_Base_SetConfig+0x1e4>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d02b      	beq.n	800ddc4 <TIM_Base_SetConfig+0x70>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	4a73      	ldr	r2, [pc, #460]	; (800df3c <TIM_Base_SetConfig+0x1e8>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d027      	beq.n	800ddc4 <TIM_Base_SetConfig+0x70>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd7a:	d023      	beq.n	800ddc4 <TIM_Base_SetConfig+0x70>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dd82:	d01f      	beq.n	800ddc4 <TIM_Base_SetConfig+0x70>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	4a6e      	ldr	r2, [pc, #440]	; (800df40 <TIM_Base_SetConfig+0x1ec>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d01b      	beq.n	800ddc4 <TIM_Base_SetConfig+0x70>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	4a6d      	ldr	r2, [pc, #436]	; (800df44 <TIM_Base_SetConfig+0x1f0>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d017      	beq.n	800ddc4 <TIM_Base_SetConfig+0x70>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	4a6c      	ldr	r2, [pc, #432]	; (800df48 <TIM_Base_SetConfig+0x1f4>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d013      	beq.n	800ddc4 <TIM_Base_SetConfig+0x70>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	4a6b      	ldr	r2, [pc, #428]	; (800df4c <TIM_Base_SetConfig+0x1f8>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d00f      	beq.n	800ddc4 <TIM_Base_SetConfig+0x70>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	4a6a      	ldr	r2, [pc, #424]	; (800df50 <TIM_Base_SetConfig+0x1fc>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d00b      	beq.n	800ddc4 <TIM_Base_SetConfig+0x70>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4a69      	ldr	r2, [pc, #420]	; (800df54 <TIM_Base_SetConfig+0x200>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d007      	beq.n	800ddc4 <TIM_Base_SetConfig+0x70>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	4a68      	ldr	r2, [pc, #416]	; (800df58 <TIM_Base_SetConfig+0x204>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d003      	beq.n	800ddc4 <TIM_Base_SetConfig+0x70>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	4a67      	ldr	r2, [pc, #412]	; (800df5c <TIM_Base_SetConfig+0x208>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d108      	bne.n	800ddd6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	68fa      	ldr	r2, [r7, #12]
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	4a57      	ldr	r2, [pc, #348]	; (800df38 <TIM_Base_SetConfig+0x1e4>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d05b      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	4a56      	ldr	r2, [pc, #344]	; (800df3c <TIM_Base_SetConfig+0x1e8>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d057      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddec:	d053      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ddf4:	d04f      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	4a51      	ldr	r2, [pc, #324]	; (800df40 <TIM_Base_SetConfig+0x1ec>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d04b      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	4a50      	ldr	r2, [pc, #320]	; (800df44 <TIM_Base_SetConfig+0x1f0>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d047      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	4a4f      	ldr	r2, [pc, #316]	; (800df48 <TIM_Base_SetConfig+0x1f4>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d043      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4a4e      	ldr	r2, [pc, #312]	; (800df4c <TIM_Base_SetConfig+0x1f8>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d03f      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4a4d      	ldr	r2, [pc, #308]	; (800df50 <TIM_Base_SetConfig+0x1fc>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d03b      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	4a4c      	ldr	r2, [pc, #304]	; (800df54 <TIM_Base_SetConfig+0x200>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d037      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	4a4b      	ldr	r2, [pc, #300]	; (800df58 <TIM_Base_SetConfig+0x204>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d033      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4a4a      	ldr	r2, [pc, #296]	; (800df5c <TIM_Base_SetConfig+0x208>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d02f      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	4a49      	ldr	r2, [pc, #292]	; (800df60 <TIM_Base_SetConfig+0x20c>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d02b      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4a48      	ldr	r2, [pc, #288]	; (800df64 <TIM_Base_SetConfig+0x210>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d027      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	4a47      	ldr	r2, [pc, #284]	; (800df68 <TIM_Base_SetConfig+0x214>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d023      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	4a46      	ldr	r2, [pc, #280]	; (800df6c <TIM_Base_SetConfig+0x218>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d01f      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4a45      	ldr	r2, [pc, #276]	; (800df70 <TIM_Base_SetConfig+0x21c>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d01b      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4a44      	ldr	r2, [pc, #272]	; (800df74 <TIM_Base_SetConfig+0x220>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d017      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a43      	ldr	r2, [pc, #268]	; (800df78 <TIM_Base_SetConfig+0x224>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d013      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a42      	ldr	r2, [pc, #264]	; (800df7c <TIM_Base_SetConfig+0x228>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d00f      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a41      	ldr	r2, [pc, #260]	; (800df80 <TIM_Base_SetConfig+0x22c>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d00b      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4a40      	ldr	r2, [pc, #256]	; (800df84 <TIM_Base_SetConfig+0x230>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d007      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	4a3f      	ldr	r2, [pc, #252]	; (800df88 <TIM_Base_SetConfig+0x234>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d003      	beq.n	800de96 <TIM_Base_SetConfig+0x142>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	4a3e      	ldr	r2, [pc, #248]	; (800df8c <TIM_Base_SetConfig+0x238>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d108      	bne.n	800dea8 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	68fa      	ldr	r2, [r7, #12]
 800dea4:	4313      	orrs	r3, r2
 800dea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	695b      	ldr	r3, [r3, #20]
 800deb2:	4313      	orrs	r3, r2
 800deb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	68fa      	ldr	r2, [r7, #12]
 800deba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	689a      	ldr	r2, [r3, #8]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	4a1a      	ldr	r2, [pc, #104]	; (800df38 <TIM_Base_SetConfig+0x1e4>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d023      	beq.n	800df1c <TIM_Base_SetConfig+0x1c8>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	4a19      	ldr	r2, [pc, #100]	; (800df3c <TIM_Base_SetConfig+0x1e8>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	d01f      	beq.n	800df1c <TIM_Base_SetConfig+0x1c8>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	4a1e      	ldr	r2, [pc, #120]	; (800df58 <TIM_Base_SetConfig+0x204>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d01b      	beq.n	800df1c <TIM_Base_SetConfig+0x1c8>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	4a1d      	ldr	r2, [pc, #116]	; (800df5c <TIM_Base_SetConfig+0x208>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d017      	beq.n	800df1c <TIM_Base_SetConfig+0x1c8>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4a22      	ldr	r2, [pc, #136]	; (800df78 <TIM_Base_SetConfig+0x224>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d013      	beq.n	800df1c <TIM_Base_SetConfig+0x1c8>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	4a21      	ldr	r2, [pc, #132]	; (800df7c <TIM_Base_SetConfig+0x228>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d00f      	beq.n	800df1c <TIM_Base_SetConfig+0x1c8>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	4a20      	ldr	r2, [pc, #128]	; (800df80 <TIM_Base_SetConfig+0x22c>)
 800df00:	4293      	cmp	r3, r2
 800df02:	d00b      	beq.n	800df1c <TIM_Base_SetConfig+0x1c8>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	4a1f      	ldr	r2, [pc, #124]	; (800df84 <TIM_Base_SetConfig+0x230>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d007      	beq.n	800df1c <TIM_Base_SetConfig+0x1c8>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	4a1e      	ldr	r2, [pc, #120]	; (800df88 <TIM_Base_SetConfig+0x234>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d003      	beq.n	800df1c <TIM_Base_SetConfig+0x1c8>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	4a1d      	ldr	r2, [pc, #116]	; (800df8c <TIM_Base_SetConfig+0x238>)
 800df18:	4293      	cmp	r3, r2
 800df1a:	d103      	bne.n	800df24 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	691a      	ldr	r2, [r3, #16]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2201      	movs	r2, #1
 800df28:	615a      	str	r2, [r3, #20]
}
 800df2a:	bf00      	nop
 800df2c:	3714      	adds	r7, #20
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	40012c00 	.word	0x40012c00
 800df3c:	50012c00 	.word	0x50012c00
 800df40:	40000400 	.word	0x40000400
 800df44:	50000400 	.word	0x50000400
 800df48:	40000800 	.word	0x40000800
 800df4c:	50000800 	.word	0x50000800
 800df50:	40000c00 	.word	0x40000c00
 800df54:	50000c00 	.word	0x50000c00
 800df58:	40013400 	.word	0x40013400
 800df5c:	50013400 	.word	0x50013400
 800df60:	40001800 	.word	0x40001800
 800df64:	50001800 	.word	0x50001800
 800df68:	40001c00 	.word	0x40001c00
 800df6c:	50001c00 	.word	0x50001c00
 800df70:	40002000 	.word	0x40002000
 800df74:	50002000 	.word	0x50002000
 800df78:	40014000 	.word	0x40014000
 800df7c:	50014000 	.word	0x50014000
 800df80:	40014400 	.word	0x40014400
 800df84:	50014400 	.word	0x50014400
 800df88:	40014800 	.word	0x40014800
 800df8c:	50014800 	.word	0x50014800

0800df90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df98:	bf00      	nop
 800df9a:	370c      	adds	r7, #12
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dfac:	bf00      	nop
 800dfae:	370c      	adds	r7, #12
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr

0800dfb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dfc0:	bf00      	nop
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800dfd4:	bf00      	nop
 800dfd6:	370c      	adds	r7, #12
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800dffc:	bf00      	nop
 800dffe:	370c      	adds	r7, #12
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800e010:	bf00      	nop
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d101      	bne.n	800e02e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e02a:	2301      	movs	r3, #1
 800e02c:	e042      	b.n	800e0b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e034:	2b00      	cmp	r3, #0
 800e036:	d106      	bne.n	800e046 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2200      	movs	r2, #0
 800e03c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f7f2 ff2f 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2224      	movs	r2, #36	; 0x24
 800e04a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f022 0201 	bic.w	r2, r2, #1
 800e05c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e062:	2b00      	cmp	r3, #0
 800e064:	d002      	beq.n	800e06c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 fe0a 	bl	800ec80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f000 fc19 	bl	800e8a4 <UART_SetConfig>
 800e072:	4603      	mov	r3, r0
 800e074:	2b01      	cmp	r3, #1
 800e076:	d101      	bne.n	800e07c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e078:	2301      	movs	r3, #1
 800e07a:	e01b      	b.n	800e0b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	685a      	ldr	r2, [r3, #4]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e08a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	689a      	ldr	r2, [r3, #8]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e09a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f042 0201 	orr.w	r2, r2, #1
 800e0aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f000 fe89 	bl	800edc4 <UART_CheckIdleState>
 800e0b2:	4603      	mov	r3, r0
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3708      	adds	r7, #8
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b08a      	sub	sp, #40	; 0x28
 800e0c0:	af02      	add	r7, sp, #8
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	603b      	str	r3, [r7, #0]
 800e0c8:	4613      	mov	r3, r2
 800e0ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0d2:	2b20      	cmp	r3, #32
 800e0d4:	f040 808b 	bne.w	800e1ee <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d002      	beq.n	800e0e4 <HAL_UART_Transmit+0x28>
 800e0de:	88fb      	ldrh	r3, [r7, #6]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d101      	bne.n	800e0e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	e083      	b.n	800e1f0 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	689b      	ldr	r3, [r3, #8]
 800e0ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0f2:	2b80      	cmp	r3, #128	; 0x80
 800e0f4:	d107      	bne.n	800e106 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	689a      	ldr	r2, [r3, #8]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e104:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2200      	movs	r2, #0
 800e10a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2221      	movs	r2, #33	; 0x21
 800e112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e116:	f7f5 ffe7 	bl	80040e8 <HAL_GetTick>
 800e11a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	88fa      	ldrh	r2, [r7, #6]
 800e120:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	88fa      	ldrh	r2, [r7, #6]
 800e128:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	689b      	ldr	r3, [r3, #8]
 800e130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e134:	d108      	bne.n	800e148 <HAL_UART_Transmit+0x8c>
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	691b      	ldr	r3, [r3, #16]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d104      	bne.n	800e148 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800e13e:	2300      	movs	r3, #0
 800e140:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	61bb      	str	r3, [r7, #24]
 800e146:	e003      	b.n	800e150 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e14c:	2300      	movs	r3, #0
 800e14e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e150:	e030      	b.n	800e1b4 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	2200      	movs	r2, #0
 800e15a:	2180      	movs	r1, #128	; 0x80
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	f000 fedb 	bl	800ef18 <UART_WaitOnFlagUntilTimeout>
 800e162:	4603      	mov	r3, r0
 800e164:	2b00      	cmp	r3, #0
 800e166:	d005      	beq.n	800e174 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2220      	movs	r2, #32
 800e16c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e170:	2303      	movs	r3, #3
 800e172:	e03d      	b.n	800e1f0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d10b      	bne.n	800e192 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e17a:	69bb      	ldr	r3, [r7, #24]
 800e17c:	881b      	ldrh	r3, [r3, #0]
 800e17e:	461a      	mov	r2, r3
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e188:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e18a:	69bb      	ldr	r3, [r7, #24]
 800e18c:	3302      	adds	r3, #2
 800e18e:	61bb      	str	r3, [r7, #24]
 800e190:	e007      	b.n	800e1a2 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	781a      	ldrb	r2, [r3, #0]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	3301      	adds	r3, #1
 800e1a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	3b01      	subs	r3, #1
 800e1ac:	b29a      	uxth	r2, r3
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d1c8      	bne.n	800e152 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	9300      	str	r3, [sp, #0]
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	2140      	movs	r1, #64	; 0x40
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f000 fea4 	bl	800ef18 <UART_WaitOnFlagUntilTimeout>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d005      	beq.n	800e1e2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2220      	movs	r2, #32
 800e1da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e1de:	2303      	movs	r3, #3
 800e1e0:	e006      	b.n	800e1f0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2220      	movs	r2, #32
 800e1e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	e000      	b.n	800e1f0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800e1ee:	2302      	movs	r3, #2
  }
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3720      	adds	r7, #32
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b08a      	sub	sp, #40	; 0x28
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	60b9      	str	r1, [r7, #8]
 800e202:	4613      	mov	r3, r2
 800e204:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e20c:	2b20      	cmp	r3, #32
 800e20e:	d14b      	bne.n	800e2a8 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d002      	beq.n	800e21c <HAL_UART_Receive_IT+0x24>
 800e216:	88fb      	ldrh	r3, [r7, #6]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d101      	bne.n	800e220 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e21c:	2301      	movs	r3, #1
 800e21e:	e044      	b.n	800e2aa <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2200      	movs	r2, #0
 800e224:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	689b      	ldr	r3, [r3, #8]
 800e22c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e230:	2b40      	cmp	r3, #64	; 0x40
 800e232:	d107      	bne.n	800e244 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	689a      	ldr	r2, [r3, #8]
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e242:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a1a      	ldr	r2, [pc, #104]	; (800e2b4 <HAL_UART_Receive_IT+0xbc>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d024      	beq.n	800e298 <HAL_UART_Receive_IT+0xa0>
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4a19      	ldr	r2, [pc, #100]	; (800e2b8 <HAL_UART_Receive_IT+0xc0>)
 800e254:	4293      	cmp	r3, r2
 800e256:	d01f      	beq.n	800e298 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e262:	2b00      	cmp	r3, #0
 800e264:	d018      	beq.n	800e298 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	e853 3f00 	ldrex	r3, [r3]
 800e272:	613b      	str	r3, [r7, #16]
   return(result);
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e27a:	627b      	str	r3, [r7, #36]	; 0x24
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	461a      	mov	r2, r3
 800e282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e284:	623b      	str	r3, [r7, #32]
 800e286:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e288:	69f9      	ldr	r1, [r7, #28]
 800e28a:	6a3a      	ldr	r2, [r7, #32]
 800e28c:	e841 2300 	strex	r3, r2, [r1]
 800e290:	61bb      	str	r3, [r7, #24]
   return(result);
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d1e6      	bne.n	800e266 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e298:	88fb      	ldrh	r3, [r7, #6]
 800e29a:	461a      	mov	r2, r3
 800e29c:	68b9      	ldr	r1, [r7, #8]
 800e29e:	68f8      	ldr	r0, [r7, #12]
 800e2a0:	f000 fea2 	bl	800efe8 <UART_Start_Receive_IT>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	e000      	b.n	800e2aa <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800e2a8:	2302      	movs	r3, #2
  }
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3728      	adds	r7, #40	; 0x28
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	44002400 	.word	0x44002400
 800e2b8:	54002400 	.word	0x54002400

0800e2bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b0ae      	sub	sp, #184	; 0xb8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	69db      	ldr	r3, [r3, #28]
 800e2ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	689b      	ldr	r3, [r3, #8]
 800e2de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e2e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e2e6:	f640 030f 	movw	r3, #2063	; 0x80f
 800e2ea:	4013      	ands	r3, r2
 800e2ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 800e2f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d11b      	bne.n	800e330 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e2f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e2fc:	f003 0320 	and.w	r3, r3, #32
 800e300:	2b00      	cmp	r3, #0
 800e302:	d015      	beq.n	800e330 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e304:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e308:	f003 0320 	and.w	r3, r3, #32
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d105      	bne.n	800e31c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d009      	beq.n	800e330 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e320:	2b00      	cmp	r3, #0
 800e322:	f000 8293 	beq.w	800e84c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	4798      	blx	r3
      }
      return;
 800e32e:	e28d      	b.n	800e84c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e330:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e334:	2b00      	cmp	r3, #0
 800e336:	f000 80fd 	beq.w	800e534 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e33a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e33e:	4b7a      	ldr	r3, [pc, #488]	; (800e528 <HAL_UART_IRQHandler+0x26c>)
 800e340:	4013      	ands	r3, r2
 800e342:	2b00      	cmp	r3, #0
 800e344:	d106      	bne.n	800e354 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e346:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e34a:	4b78      	ldr	r3, [pc, #480]	; (800e52c <HAL_UART_IRQHandler+0x270>)
 800e34c:	4013      	ands	r3, r2
 800e34e:	2b00      	cmp	r3, #0
 800e350:	f000 80f0 	beq.w	800e534 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e354:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e358:	f003 0301 	and.w	r3, r3, #1
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d011      	beq.n	800e384 <HAL_UART_IRQHandler+0xc8>
 800e360:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d00b      	beq.n	800e384 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2201      	movs	r2, #1
 800e372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e37a:	f043 0201 	orr.w	r2, r3, #1
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e384:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e388:	f003 0302 	and.w	r3, r3, #2
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d011      	beq.n	800e3b4 <HAL_UART_IRQHandler+0xf8>
 800e390:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e394:	f003 0301 	and.w	r3, r3, #1
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d00b      	beq.n	800e3b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2202      	movs	r2, #2
 800e3a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3aa:	f043 0204 	orr.w	r2, r3, #4
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e3b8:	f003 0304 	and.w	r3, r3, #4
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d011      	beq.n	800e3e4 <HAL_UART_IRQHandler+0x128>
 800e3c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3c4:	f003 0301 	and.w	r3, r3, #1
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d00b      	beq.n	800e3e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2204      	movs	r2, #4
 800e3d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3da:	f043 0202 	orr.w	r2, r3, #2
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e3e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e3e8:	f003 0308 	and.w	r3, r3, #8
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d017      	beq.n	800e420 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e3f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e3f4:	f003 0320 	and.w	r3, r3, #32
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d105      	bne.n	800e408 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e3fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e400:	4b49      	ldr	r3, [pc, #292]	; (800e528 <HAL_UART_IRQHandler+0x26c>)
 800e402:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00b      	beq.n	800e420 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	2208      	movs	r2, #8
 800e40e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e416:	f043 0208 	orr.w	r2, r3, #8
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e420:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d012      	beq.n	800e452 <HAL_UART_IRQHandler+0x196>
 800e42c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e434:	2b00      	cmp	r3, #0
 800e436:	d00c      	beq.n	800e452 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e440:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e448:	f043 0220 	orr.w	r2, r3, #32
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e458:	2b00      	cmp	r3, #0
 800e45a:	f000 81f9 	beq.w	800e850 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e45e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e462:	f003 0320 	and.w	r3, r3, #32
 800e466:	2b00      	cmp	r3, #0
 800e468:	d013      	beq.n	800e492 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e46a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e46e:	f003 0320 	and.w	r3, r3, #32
 800e472:	2b00      	cmp	r3, #0
 800e474:	d105      	bne.n	800e482 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e47a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d007      	beq.n	800e492 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e486:	2b00      	cmp	r3, #0
 800e488:	d003      	beq.n	800e492 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e498:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	689b      	ldr	r3, [r3, #8]
 800e4a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4a6:	2b40      	cmp	r3, #64	; 0x40
 800e4a8:	d005      	beq.n	800e4b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e4aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e4ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d02e      	beq.n	800e514 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f000 feb8 	bl	800f22c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	689b      	ldr	r3, [r3, #8]
 800e4c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4c6:	2b40      	cmp	r3, #64	; 0x40
 800e4c8:	d120      	bne.n	800e50c <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d017      	beq.n	800e504 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4da:	4a15      	ldr	r2, [pc, #84]	; (800e530 <HAL_UART_IRQHandler+0x274>)
 800e4dc:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7f5 ffa1 	bl	800442c <HAL_DMA_Abort_IT>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d019      	beq.n	800e524 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4f8:	687a      	ldr	r2, [r7, #4]
 800e4fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e4fe:	4610      	mov	r0, r2
 800e500:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e502:	e00f      	b.n	800e524 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f000 f9b7 	bl	800e878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e50a:	e00b      	b.n	800e524 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 f9b3 	bl	800e878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e512:	e007      	b.n	800e524 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f000 f9af 	bl	800e878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2200      	movs	r2, #0
 800e51e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e522:	e195      	b.n	800e850 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e524:	bf00      	nop
    return;
 800e526:	e193      	b.n	800e850 <HAL_UART_IRQHandler+0x594>
 800e528:	10000001 	.word	0x10000001
 800e52c:	04000120 	.word	0x04000120
 800e530:	0800f2f9 	.word	0x0800f2f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e538:	2b01      	cmp	r3, #1
 800e53a:	f040 8129 	bne.w	800e790 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e53e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e542:	f003 0310 	and.w	r3, r3, #16
 800e546:	2b00      	cmp	r3, #0
 800e548:	f000 8122 	beq.w	800e790 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e54c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e550:	f003 0310 	and.w	r3, r3, #16
 800e554:	2b00      	cmp	r3, #0
 800e556:	f000 811b 	beq.w	800e790 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2210      	movs	r2, #16
 800e560:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	689b      	ldr	r3, [r3, #8]
 800e568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e56c:	2b40      	cmp	r3, #64	; 0x40
 800e56e:	f040 8091 	bne.w	800e694 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e57c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800e580:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e584:	2b00      	cmp	r3, #0
 800e586:	f000 8165 	beq.w	800e854 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e590:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800e594:	429a      	cmp	r2, r3
 800e596:	f080 815d 	bcs.w	800e854 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800e5a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5ac:	2b81      	cmp	r3, #129	; 0x81
 800e5ae:	d060      	beq.n	800e672 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5b8:	e853 3f00 	ldrex	r3, [r3]
 800e5bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e5be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e5c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e5d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e5d6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e5da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e5de:	e841 2300 	strex	r3, r2, [r1]
 800e5e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e5e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d1e2      	bne.n	800e5b0 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	3308      	adds	r3, #8
 800e5f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5f4:	e853 3f00 	ldrex	r3, [r3]
 800e5f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e5fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5fc:	f023 0301 	bic.w	r3, r3, #1
 800e600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	3308      	adds	r3, #8
 800e60a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e60e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e610:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e612:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e614:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e616:	e841 2300 	strex	r3, r2, [r1]
 800e61a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e61c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d1e3      	bne.n	800e5ea <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2220      	movs	r2, #32
 800e626:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2200      	movs	r2, #0
 800e62e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e638:	e853 3f00 	ldrex	r3, [r3]
 800e63c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e63e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e640:	f023 0310 	bic.w	r3, r3, #16
 800e644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	461a      	mov	r2, r3
 800e64e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e652:	65bb      	str	r3, [r7, #88]	; 0x58
 800e654:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e656:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e658:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e65a:	e841 2300 	strex	r3, r2, [r1]
 800e65e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e662:	2b00      	cmp	r3, #0
 800e664:	d1e4      	bne.n	800e630 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7f5 fe61 	bl	8004334 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2202      	movs	r2, #2
 800e676:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e684:	b29b      	uxth	r3, r3
 800e686:	1ad3      	subs	r3, r2, r3
 800e688:	b29b      	uxth	r3, r3
 800e68a:	4619      	mov	r1, r3
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 f8fd 	bl	800e88c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e692:	e0df      	b.n	800e854 <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	1ad3      	subs	r3, r2, r3
 800e6a4:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f000 80d1 	beq.w	800e858 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800e6b6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	f000 80cc 	beq.w	800e858 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6c8:	e853 3f00 	ldrex	r3, [r3]
 800e6cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e6d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	461a      	mov	r2, r3
 800e6de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e6e2:	647b      	str	r3, [r7, #68]	; 0x44
 800e6e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e6e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6ea:	e841 2300 	strex	r3, r2, [r1]
 800e6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d1e4      	bne.n	800e6c0 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	3308      	adds	r3, #8
 800e6fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e700:	e853 3f00 	ldrex	r3, [r3]
 800e704:	623b      	str	r3, [r7, #32]
   return(result);
 800e706:	6a3b      	ldr	r3, [r7, #32]
 800e708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e70c:	f023 0301 	bic.w	r3, r3, #1
 800e710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	3308      	adds	r3, #8
 800e71a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e71e:	633a      	str	r2, [r7, #48]	; 0x30
 800e720:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e726:	e841 2300 	strex	r3, r2, [r1]
 800e72a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1e1      	bne.n	800e6f6 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2220      	movs	r2, #32
 800e736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2200      	movs	r2, #0
 800e73e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2200      	movs	r2, #0
 800e744:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	e853 3f00 	ldrex	r3, [r3]
 800e752:	60fb      	str	r3, [r7, #12]
   return(result);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f023 0310 	bic.w	r3, r3, #16
 800e75a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	461a      	mov	r2, r3
 800e764:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e768:	61fb      	str	r3, [r7, #28]
 800e76a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e76c:	69b9      	ldr	r1, [r7, #24]
 800e76e:	69fa      	ldr	r2, [r7, #28]
 800e770:	e841 2300 	strex	r3, r2, [r1]
 800e774:	617b      	str	r3, [r7, #20]
   return(result);
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d1e4      	bne.n	800e746 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2202      	movs	r2, #2
 800e780:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e782:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800e786:	4619      	mov	r1, r3
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f000 f87f 	bl	800e88c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e78e:	e063      	b.n	800e858 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e790:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e794:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d00e      	beq.n	800e7ba <HAL_UART_IRQHandler+0x4fe>
 800e79c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e7a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d008      	beq.n	800e7ba <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e7b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f001 fb1a 	bl	800fdec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e7b8:	e051      	b.n	800e85e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e7ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d014      	beq.n	800e7f0 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e7c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e7ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d105      	bne.n	800e7de <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e7d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e7d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d008      	beq.n	800e7f0 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d03a      	beq.n	800e85c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	4798      	blx	r3
    }
    return;
 800e7ee:	e035      	b.n	800e85c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e7f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d009      	beq.n	800e810 <HAL_UART_IRQHandler+0x554>
 800e7fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e804:	2b00      	cmp	r3, #0
 800e806:	d003      	beq.n	800e810 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 fd8b 	bl	800f324 <UART_EndTransmit_IT>
    return;
 800e80e:	e026      	b.n	800e85e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e810:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d009      	beq.n	800e830 <HAL_UART_IRQHandler+0x574>
 800e81c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e820:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e824:	2b00      	cmp	r3, #0
 800e826:	d003      	beq.n	800e830 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f001 faf3 	bl	800fe14 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e82e:	e016      	b.n	800e85e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e830:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d010      	beq.n	800e85e <HAL_UART_IRQHandler+0x5a2>
 800e83c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e840:	2b00      	cmp	r3, #0
 800e842:	da0c      	bge.n	800e85e <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f001 fadb 	bl	800fe00 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e84a:	e008      	b.n	800e85e <HAL_UART_IRQHandler+0x5a2>
      return;
 800e84c:	bf00      	nop
 800e84e:	e006      	b.n	800e85e <HAL_UART_IRQHandler+0x5a2>
    return;
 800e850:	bf00      	nop
 800e852:	e004      	b.n	800e85e <HAL_UART_IRQHandler+0x5a2>
      return;
 800e854:	bf00      	nop
 800e856:	e002      	b.n	800e85e <HAL_UART_IRQHandler+0x5a2>
      return;
 800e858:	bf00      	nop
 800e85a:	e000      	b.n	800e85e <HAL_UART_IRQHandler+0x5a2>
    return;
 800e85c:	bf00      	nop
  }
}
 800e85e:	37b8      	adds	r7, #184	; 0xb8
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e864:	b480      	push	{r7}
 800e866:	b083      	sub	sp, #12
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e86c:	bf00      	nop
 800e86e:	370c      	adds	r7, #12
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e880:	bf00      	nop
 800e882:	370c      	adds	r7, #12
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr

0800e88c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b083      	sub	sp, #12
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	460b      	mov	r3, r1
 800e896:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e898:	bf00      	nop
 800e89a:	370c      	adds	r7, #12
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr

0800e8a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e8a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e8a8:	b094      	sub	sp, #80	; 0x50
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800e8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b6:	681a      	ldr	r2, [r3, #0]
 800e8b8:	4b78      	ldr	r3, [pc, #480]	; (800ea9c <UART_SetConfig+0x1f8>)
 800e8ba:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8be:	689a      	ldr	r2, [r3, #8]
 800e8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c2:	691b      	ldr	r3, [r3, #16]
 800e8c4:	431a      	orrs	r2, r3
 800e8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c8:	695b      	ldr	r3, [r3, #20]
 800e8ca:	431a      	orrs	r2, r3
 800e8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ce:	69db      	ldr	r3, [r3, #28]
 800e8d0:	4313      	orrs	r3, r2
 800e8d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4971      	ldr	r1, [pc, #452]	; (800eaa0 <UART_SetConfig+0x1fc>)
 800e8dc:	4019      	ands	r1, r3
 800e8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8e4:	430b      	orrs	r3, r1
 800e8e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f4:	68d9      	ldr	r1, [r3, #12]
 800e8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	ea40 0301 	orr.w	r3, r0, r1
 800e8fe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e902:	699b      	ldr	r3, [r3, #24]
 800e904:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	4b64      	ldr	r3, [pc, #400]	; (800ea9c <UART_SetConfig+0x1f8>)
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d009      	beq.n	800e924 <UART_SetConfig+0x80>
 800e910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	4b63      	ldr	r3, [pc, #396]	; (800eaa4 <UART_SetConfig+0x200>)
 800e916:	429a      	cmp	r2, r3
 800e918:	d004      	beq.n	800e924 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91c:	6a1a      	ldr	r2, [r3, #32]
 800e91e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e920:	4313      	orrs	r3, r2
 800e922:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	689b      	ldr	r3, [r3, #8]
 800e92a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800e92e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800e932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e938:	430b      	orrs	r3, r1
 800e93a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e942:	f023 000f 	bic.w	r0, r3, #15
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	ea40 0301 	orr.w	r3, r0, r1
 800e952:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	4b53      	ldr	r3, [pc, #332]	; (800eaa8 <UART_SetConfig+0x204>)
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d102      	bne.n	800e964 <UART_SetConfig+0xc0>
 800e95e:	2301      	movs	r3, #1
 800e960:	64bb      	str	r3, [r7, #72]	; 0x48
 800e962:	e066      	b.n	800ea32 <UART_SetConfig+0x18e>
 800e964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	4b50      	ldr	r3, [pc, #320]	; (800eaac <UART_SetConfig+0x208>)
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d102      	bne.n	800e974 <UART_SetConfig+0xd0>
 800e96e:	2302      	movs	r3, #2
 800e970:	64bb      	str	r3, [r7, #72]	; 0x48
 800e972:	e05e      	b.n	800ea32 <UART_SetConfig+0x18e>
 800e974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e976:	681a      	ldr	r2, [r3, #0]
 800e978:	4b4d      	ldr	r3, [pc, #308]	; (800eab0 <UART_SetConfig+0x20c>)
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d102      	bne.n	800e984 <UART_SetConfig+0xe0>
 800e97e:	2304      	movs	r3, #4
 800e980:	64bb      	str	r3, [r7, #72]	; 0x48
 800e982:	e056      	b.n	800ea32 <UART_SetConfig+0x18e>
 800e984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	4b4a      	ldr	r3, [pc, #296]	; (800eab4 <UART_SetConfig+0x210>)
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d102      	bne.n	800e994 <UART_SetConfig+0xf0>
 800e98e:	2308      	movs	r3, #8
 800e990:	64bb      	str	r3, [r7, #72]	; 0x48
 800e992:	e04e      	b.n	800ea32 <UART_SetConfig+0x18e>
 800e994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	4b47      	ldr	r3, [pc, #284]	; (800eab8 <UART_SetConfig+0x214>)
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d102      	bne.n	800e9a4 <UART_SetConfig+0x100>
 800e99e:	2310      	movs	r3, #16
 800e9a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e9a2:	e046      	b.n	800ea32 <UART_SetConfig+0x18e>
 800e9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	4b44      	ldr	r3, [pc, #272]	; (800eabc <UART_SetConfig+0x218>)
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d102      	bne.n	800e9b4 <UART_SetConfig+0x110>
 800e9ae:	2320      	movs	r3, #32
 800e9b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e9b2:	e03e      	b.n	800ea32 <UART_SetConfig+0x18e>
 800e9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b6:	681a      	ldr	r2, [r3, #0]
 800e9b8:	4b41      	ldr	r3, [pc, #260]	; (800eac0 <UART_SetConfig+0x21c>)
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d102      	bne.n	800e9c4 <UART_SetConfig+0x120>
 800e9be:	2340      	movs	r3, #64	; 0x40
 800e9c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e9c2:	e036      	b.n	800ea32 <UART_SetConfig+0x18e>
 800e9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	4b3e      	ldr	r3, [pc, #248]	; (800eac4 <UART_SetConfig+0x220>)
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d102      	bne.n	800e9d4 <UART_SetConfig+0x130>
 800e9ce:	2380      	movs	r3, #128	; 0x80
 800e9d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e9d2:	e02e      	b.n	800ea32 <UART_SetConfig+0x18e>
 800e9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d6:	681a      	ldr	r2, [r3, #0]
 800e9d8:	4b3b      	ldr	r3, [pc, #236]	; (800eac8 <UART_SetConfig+0x224>)
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d103      	bne.n	800e9e6 <UART_SetConfig+0x142>
 800e9de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e9e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800e9e4:	e025      	b.n	800ea32 <UART_SetConfig+0x18e>
 800e9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	4b38      	ldr	r3, [pc, #224]	; (800eacc <UART_SetConfig+0x228>)
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d103      	bne.n	800e9f8 <UART_SetConfig+0x154>
 800e9f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e9f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e9f6:	e01c      	b.n	800ea32 <UART_SetConfig+0x18e>
 800e9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	4b34      	ldr	r3, [pc, #208]	; (800ead0 <UART_SetConfig+0x22c>)
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d103      	bne.n	800ea0a <UART_SetConfig+0x166>
 800ea02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea06:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea08:	e013      	b.n	800ea32 <UART_SetConfig+0x18e>
 800ea0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	4b31      	ldr	r3, [pc, #196]	; (800ead4 <UART_SetConfig+0x230>)
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d103      	bne.n	800ea1c <UART_SetConfig+0x178>
 800ea14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea18:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea1a:	e00a      	b.n	800ea32 <UART_SetConfig+0x18e>
 800ea1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	4b1e      	ldr	r3, [pc, #120]	; (800ea9c <UART_SetConfig+0x1f8>)
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d103      	bne.n	800ea2e <UART_SetConfig+0x18a>
 800ea26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea2a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea2c:	e001      	b.n	800ea32 <UART_SetConfig+0x18e>
 800ea2e:	2300      	movs	r3, #0
 800ea30:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ea32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	4b19      	ldr	r3, [pc, #100]	; (800ea9c <UART_SetConfig+0x1f8>)
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d005      	beq.n	800ea48 <UART_SetConfig+0x1a4>
 800ea3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea3e:	681a      	ldr	r2, [r3, #0]
 800ea40:	4b18      	ldr	r3, [pc, #96]	; (800eaa4 <UART_SetConfig+0x200>)
 800ea42:	429a      	cmp	r2, r3
 800ea44:	f040 8094 	bne.w	800eb70 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ea48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	623b      	str	r3, [r7, #32]
 800ea4e:	627a      	str	r2, [r7, #36]	; 0x24
 800ea50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ea54:	f7fc fa44 	bl	800aee0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ea58:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800ea5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	f000 80f7 	beq.w	800ec50 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ea62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea66:	4a1c      	ldr	r2, [pc, #112]	; (800ead8 <UART_SetConfig+0x234>)
 800ea68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea70:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea74:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea78:	685a      	ldr	r2, [r3, #4]
 800ea7a:	4613      	mov	r3, r2
 800ea7c:	005b      	lsls	r3, r3, #1
 800ea7e:	4413      	add	r3, r2
 800ea80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d305      	bcc.n	800ea92 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ea86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d924      	bls.n	800eadc <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800ea92:	2301      	movs	r3, #1
 800ea94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ea98:	e069      	b.n	800eb6e <UART_SetConfig+0x2ca>
 800ea9a:	bf00      	nop
 800ea9c:	44002400 	.word	0x44002400
 800eaa0:	cfff69f3 	.word	0xcfff69f3
 800eaa4:	54002400 	.word	0x54002400
 800eaa8:	40013800 	.word	0x40013800
 800eaac:	40004400 	.word	0x40004400
 800eab0:	40004800 	.word	0x40004800
 800eab4:	40004c00 	.word	0x40004c00
 800eab8:	40005000 	.word	0x40005000
 800eabc:	40006400 	.word	0x40006400
 800eac0:	40007800 	.word	0x40007800
 800eac4:	40007c00 	.word	0x40007c00
 800eac8:	40008000 	.word	0x40008000
 800eacc:	40006800 	.word	0x40006800
 800ead0:	40006c00 	.word	0x40006c00
 800ead4:	40008400 	.word	0x40008400
 800ead8:	08029990 	.word	0x08029990
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eadc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eade:	2200      	movs	r2, #0
 800eae0:	61bb      	str	r3, [r7, #24]
 800eae2:	61fa      	str	r2, [r7, #28]
 800eae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae8:	4a64      	ldr	r2, [pc, #400]	; (800ec7c <UART_SetConfig+0x3d8>)
 800eaea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eaee:	b29b      	uxth	r3, r3
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	613b      	str	r3, [r7, #16]
 800eaf4:	617a      	str	r2, [r7, #20]
 800eaf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eafa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800eafe:	f7f1 fbd9 	bl	80002b4 <__aeabi_uldivmod>
 800eb02:	4602      	mov	r2, r0
 800eb04:	460b      	mov	r3, r1
 800eb06:	4610      	mov	r0, r2
 800eb08:	4619      	mov	r1, r3
 800eb0a:	f04f 0200 	mov.w	r2, #0
 800eb0e:	f04f 0300 	mov.w	r3, #0
 800eb12:	020b      	lsls	r3, r1, #8
 800eb14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800eb18:	0202      	lsls	r2, r0, #8
 800eb1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb1c:	6849      	ldr	r1, [r1, #4]
 800eb1e:	0849      	lsrs	r1, r1, #1
 800eb20:	2000      	movs	r0, #0
 800eb22:	460c      	mov	r4, r1
 800eb24:	4605      	mov	r5, r0
 800eb26:	eb12 0804 	adds.w	r8, r2, r4
 800eb2a:	eb43 0905 	adc.w	r9, r3, r5
 800eb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	2200      	movs	r2, #0
 800eb34:	60bb      	str	r3, [r7, #8]
 800eb36:	60fa      	str	r2, [r7, #12]
 800eb38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800eb3c:	4640      	mov	r0, r8
 800eb3e:	4649      	mov	r1, r9
 800eb40:	f7f1 fbb8 	bl	80002b4 <__aeabi_uldivmod>
 800eb44:	4602      	mov	r2, r0
 800eb46:	460b      	mov	r3, r1
 800eb48:	4613      	mov	r3, r2
 800eb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eb4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eb52:	d308      	bcc.n	800eb66 <UART_SetConfig+0x2c2>
 800eb54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb5a:	d204      	bcs.n	800eb66 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800eb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb62:	60da      	str	r2, [r3, #12]
 800eb64:	e003      	b.n	800eb6e <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800eb66:	2301      	movs	r3, #1
 800eb68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800eb6c:	e070      	b.n	800ec50 <UART_SetConfig+0x3ac>
 800eb6e:	e06f      	b.n	800ec50 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb72:	69db      	ldr	r3, [r3, #28]
 800eb74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb78:	d13c      	bne.n	800ebf4 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800eb7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	603b      	str	r3, [r7, #0]
 800eb80:	607a      	str	r2, [r7, #4]
 800eb82:	e9d7 0100 	ldrd	r0, r1, [r7]
 800eb86:	f7fc f9ab 	bl	800aee0 <HAL_RCCEx_GetPeriphCLKFreq>
 800eb8a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eb8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d05e      	beq.n	800ec50 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb96:	4a39      	ldr	r2, [pc, #228]	; (800ec7c <UART_SetConfig+0x3d8>)
 800eb98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eba0:	fbb3 f3f2 	udiv	r3, r3, r2
 800eba4:	005a      	lsls	r2, r3, #1
 800eba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	085b      	lsrs	r3, r3, #1
 800ebac:	441a      	add	r2, r3
 800ebae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ebb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebba:	2b0f      	cmp	r3, #15
 800ebbc:	d916      	bls.n	800ebec <UART_SetConfig+0x348>
 800ebbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebc4:	d212      	bcs.n	800ebec <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ebc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	f023 030f 	bic.w	r3, r3, #15
 800ebce:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ebd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebd2:	085b      	lsrs	r3, r3, #1
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	f003 0307 	and.w	r3, r3, #7
 800ebda:	b29a      	uxth	r2, r3
 800ebdc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800ebe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ebe8:	60da      	str	r2, [r3, #12]
 800ebea:	e031      	b.n	800ec50 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800ebec:	2301      	movs	r3, #1
 800ebee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ebf2:	e02d      	b.n	800ec50 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ebf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	469a      	mov	sl, r3
 800ebfa:	4693      	mov	fp, r2
 800ebfc:	4650      	mov	r0, sl
 800ebfe:	4659      	mov	r1, fp
 800ec00:	f7fc f96e 	bl	800aee0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ec04:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800ec06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d021      	beq.n	800ec50 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec10:	4a1a      	ldr	r2, [pc, #104]	; (800ec7c <UART_SetConfig+0x3d8>)
 800ec12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec16:	461a      	mov	r2, r3
 800ec18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec1a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ec1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	085b      	lsrs	r3, r3, #1
 800ec24:	441a      	add	r2, r3
 800ec26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec32:	2b0f      	cmp	r3, #15
 800ec34:	d909      	bls.n	800ec4a <UART_SetConfig+0x3a6>
 800ec36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec3c:	d205      	bcs.n	800ec4a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ec3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec40:	b29a      	uxth	r2, r3
 800ec42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	60da      	str	r2, [r3, #12]
 800ec48:	e002      	b.n	800ec50 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ec50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec52:	2201      	movs	r2, #1
 800ec54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ec58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ec60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec62:	2200      	movs	r2, #0
 800ec64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ec66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec68:	2200      	movs	r2, #0
 800ec6a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ec6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3750      	adds	r7, #80	; 0x50
 800ec74:	46bd      	mov	sp, r7
 800ec76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ec7a:	bf00      	nop
 800ec7c:	08029990 	.word	0x08029990

0800ec80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b083      	sub	sp, #12
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec8c:	f003 0308 	and.w	r3, r3, #8
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d00a      	beq.n	800ecaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	685b      	ldr	r3, [r3, #4]
 800ec9a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	430a      	orrs	r2, r1
 800eca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecae:	f003 0301 	and.w	r3, r3, #1
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00a      	beq.n	800eccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	430a      	orrs	r2, r1
 800ecca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecd0:	f003 0302 	and.w	r3, r3, #2
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d00a      	beq.n	800ecee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	430a      	orrs	r2, r1
 800ecec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecf2:	f003 0304 	and.w	r3, r3, #4
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d00a      	beq.n	800ed10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	430a      	orrs	r2, r1
 800ed0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed14:	f003 0310 	and.w	r3, r3, #16
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00a      	beq.n	800ed32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	689b      	ldr	r3, [r3, #8]
 800ed22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	430a      	orrs	r2, r1
 800ed30:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed36:	f003 0320 	and.w	r3, r3, #32
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00a      	beq.n	800ed54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	430a      	orrs	r2, r1
 800ed52:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d01a      	beq.n	800ed96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	430a      	orrs	r2, r1
 800ed74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed7e:	d10a      	bne.n	800ed96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	685b      	ldr	r3, [r3, #4]
 800ed86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	430a      	orrs	r2, r1
 800ed94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d00a      	beq.n	800edb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	430a      	orrs	r2, r1
 800edb6:	605a      	str	r2, [r3, #4]
  }
}
 800edb8:	bf00      	nop
 800edba:	370c      	adds	r7, #12
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr

0800edc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b098      	sub	sp, #96	; 0x60
 800edc8:	af02      	add	r7, sp, #8
 800edca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800edd4:	f7f5 f988 	bl	80040e8 <HAL_GetTick>
 800edd8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f003 0308 	and.w	r3, r3, #8
 800ede4:	2b08      	cmp	r3, #8
 800ede6:	d12f      	bne.n	800ee48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ede8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800edec:	9300      	str	r3, [sp, #0]
 800edee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edf0:	2200      	movs	r2, #0
 800edf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f000 f88e 	bl	800ef18 <UART_WaitOnFlagUntilTimeout>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d022      	beq.n	800ee48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0a:	e853 3f00 	ldrex	r3, [r3]
 800ee0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ee10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee16:	653b      	str	r3, [r7, #80]	; 0x50
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee20:	647b      	str	r3, [r7, #68]	; 0x44
 800ee22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee28:	e841 2300 	strex	r3, r2, [r1]
 800ee2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ee2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d1e6      	bne.n	800ee02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2220      	movs	r2, #32
 800ee38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee44:	2303      	movs	r3, #3
 800ee46:	e063      	b.n	800ef10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f003 0304 	and.w	r3, r3, #4
 800ee52:	2b04      	cmp	r3, #4
 800ee54:	d149      	bne.n	800eeea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee5a:	9300      	str	r3, [sp, #0]
 800ee5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee5e:	2200      	movs	r2, #0
 800ee60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f000 f857 	bl	800ef18 <UART_WaitOnFlagUntilTimeout>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d03c      	beq.n	800eeea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee78:	e853 3f00 	ldrex	r3, [r3]
 800ee7c:	623b      	str	r3, [r7, #32]
   return(result);
 800ee7e:	6a3b      	ldr	r3, [r7, #32]
 800ee80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ee84:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee8e:	633b      	str	r3, [r7, #48]	; 0x30
 800ee90:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee96:	e841 2300 	strex	r3, r2, [r1]
 800ee9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ee9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d1e6      	bne.n	800ee70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	3308      	adds	r3, #8
 800eea8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeaa:	693b      	ldr	r3, [r7, #16]
 800eeac:	e853 3f00 	ldrex	r3, [r3]
 800eeb0:	60fb      	str	r3, [r7, #12]
   return(result);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	f023 0301 	bic.w	r3, r3, #1
 800eeb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	3308      	adds	r3, #8
 800eec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eec2:	61fa      	str	r2, [r7, #28]
 800eec4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eec6:	69b9      	ldr	r1, [r7, #24]
 800eec8:	69fa      	ldr	r2, [r7, #28]
 800eeca:	e841 2300 	strex	r3, r2, [r1]
 800eece:	617b      	str	r3, [r7, #20]
   return(result);
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d1e5      	bne.n	800eea2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2220      	movs	r2, #32
 800eeda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2200      	movs	r2, #0
 800eee2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eee6:	2303      	movs	r3, #3
 800eee8:	e012      	b.n	800ef10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2220      	movs	r2, #32
 800eeee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2220      	movs	r2, #32
 800eef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2200      	movs	r2, #0
 800eefe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2200      	movs	r2, #0
 800ef04:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3758      	adds	r7, #88	; 0x58
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	603b      	str	r3, [r7, #0]
 800ef24:	4613      	mov	r3, r2
 800ef26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef28:	e049      	b.n	800efbe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ef2a:	69bb      	ldr	r3, [r7, #24]
 800ef2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef30:	d045      	beq.n	800efbe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef32:	f7f5 f8d9 	bl	80040e8 <HAL_GetTick>
 800ef36:	4602      	mov	r2, r0
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	1ad3      	subs	r3, r2, r3
 800ef3c:	69ba      	ldr	r2, [r7, #24]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d302      	bcc.n	800ef48 <UART_WaitOnFlagUntilTimeout+0x30>
 800ef42:	69bb      	ldr	r3, [r7, #24]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d101      	bne.n	800ef4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ef48:	2303      	movs	r3, #3
 800ef4a:	e048      	b.n	800efde <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f003 0304 	and.w	r3, r3, #4
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d031      	beq.n	800efbe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	69db      	ldr	r3, [r3, #28]
 800ef60:	f003 0308 	and.w	r3, r3, #8
 800ef64:	2b08      	cmp	r3, #8
 800ef66:	d110      	bne.n	800ef8a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2208      	movs	r2, #8
 800ef6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ef70:	68f8      	ldr	r0, [r7, #12]
 800ef72:	f000 f95b 	bl	800f22c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	2208      	movs	r2, #8
 800ef7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2200      	movs	r2, #0
 800ef82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ef86:	2301      	movs	r3, #1
 800ef88:	e029      	b.n	800efde <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	69db      	ldr	r3, [r3, #28]
 800ef90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef98:	d111      	bne.n	800efbe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800efa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800efa4:	68f8      	ldr	r0, [r7, #12]
 800efa6:	f000 f941 	bl	800f22c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2220      	movs	r2, #32
 800efae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2200      	movs	r2, #0
 800efb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800efba:	2303      	movs	r3, #3
 800efbc:	e00f      	b.n	800efde <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	69da      	ldr	r2, [r3, #28]
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	4013      	ands	r3, r2
 800efc8:	68ba      	ldr	r2, [r7, #8]
 800efca:	429a      	cmp	r2, r3
 800efcc:	bf0c      	ite	eq
 800efce:	2301      	moveq	r3, #1
 800efd0:	2300      	movne	r3, #0
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	461a      	mov	r2, r3
 800efd6:	79fb      	ldrb	r3, [r7, #7]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d0a6      	beq.n	800ef2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800efdc:	2300      	movs	r3, #0
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3710      	adds	r7, #16
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
	...

0800efe8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800efe8:	b480      	push	{r7}
 800efea:	b0a3      	sub	sp, #140	; 0x8c
 800efec:	af00      	add	r7, sp, #0
 800efee:	60f8      	str	r0, [r7, #12]
 800eff0:	60b9      	str	r1, [r7, #8]
 800eff2:	4613      	mov	r3, r2
 800eff4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	68ba      	ldr	r2, [r7, #8]
 800effa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	88fa      	ldrh	r2, [r7, #6]
 800f000:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	88fa      	ldrh	r2, [r7, #6]
 800f008:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	2200      	movs	r2, #0
 800f010:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	689b      	ldr	r3, [r3, #8]
 800f016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f01a:	d10e      	bne.n	800f03a <UART_Start_Receive_IT+0x52>
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	691b      	ldr	r3, [r3, #16]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d105      	bne.n	800f030 <UART_Start_Receive_IT+0x48>
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f02a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f02e:	e02d      	b.n	800f08c <UART_Start_Receive_IT+0xa4>
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	22ff      	movs	r2, #255	; 0xff
 800f034:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f038:	e028      	b.n	800f08c <UART_Start_Receive_IT+0xa4>
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	689b      	ldr	r3, [r3, #8]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d10d      	bne.n	800f05e <UART_Start_Receive_IT+0x76>
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	691b      	ldr	r3, [r3, #16]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d104      	bne.n	800f054 <UART_Start_Receive_IT+0x6c>
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	22ff      	movs	r2, #255	; 0xff
 800f04e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f052:	e01b      	b.n	800f08c <UART_Start_Receive_IT+0xa4>
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	227f      	movs	r2, #127	; 0x7f
 800f058:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f05c:	e016      	b.n	800f08c <UART_Start_Receive_IT+0xa4>
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	689b      	ldr	r3, [r3, #8]
 800f062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f066:	d10d      	bne.n	800f084 <UART_Start_Receive_IT+0x9c>
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	691b      	ldr	r3, [r3, #16]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d104      	bne.n	800f07a <UART_Start_Receive_IT+0x92>
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	227f      	movs	r2, #127	; 0x7f
 800f074:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f078:	e008      	b.n	800f08c <UART_Start_Receive_IT+0xa4>
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	223f      	movs	r2, #63	; 0x3f
 800f07e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f082:	e003      	b.n	800f08c <UART_Start_Receive_IT+0xa4>
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2200      	movs	r2, #0
 800f088:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2200      	movs	r2, #0
 800f090:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2222      	movs	r2, #34	; 0x22
 800f098:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	3308      	adds	r3, #8
 800f0a2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0a6:	e853 3f00 	ldrex	r3, [r3]
 800f0aa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f0ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f0ae:	f043 0301 	orr.w	r3, r3, #1
 800f0b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	3308      	adds	r3, #8
 800f0bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f0c0:	673a      	str	r2, [r7, #112]	; 0x70
 800f0c2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0c4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f0c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f0c8:	e841 2300 	strex	r3, r2, [r1]
 800f0cc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f0ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d1e3      	bne.n	800f09c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f0dc:	d14f      	bne.n	800f17e <UART_Start_Receive_IT+0x196>
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f0e4:	88fa      	ldrh	r2, [r7, #6]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d349      	bcc.n	800f17e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	689b      	ldr	r3, [r3, #8]
 800f0ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0f2:	d107      	bne.n	800f104 <UART_Start_Receive_IT+0x11c>
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	691b      	ldr	r3, [r3, #16]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d103      	bne.n	800f104 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	4a47      	ldr	r2, [pc, #284]	; (800f21c <UART_Start_Receive_IT+0x234>)
 800f100:	675a      	str	r2, [r3, #116]	; 0x74
 800f102:	e002      	b.n	800f10a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	4a46      	ldr	r2, [pc, #280]	; (800f220 <UART_Start_Receive_IT+0x238>)
 800f108:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	691b      	ldr	r3, [r3, #16]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d01a      	beq.n	800f148 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f11a:	e853 3f00 	ldrex	r3, [r3]
 800f11e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f126:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	461a      	mov	r2, r3
 800f130:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f134:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f136:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f138:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f13a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f13c:	e841 2300 	strex	r3, r2, [r1]
 800f140:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f144:	2b00      	cmp	r3, #0
 800f146:	d1e4      	bne.n	800f112 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	3308      	adds	r3, #8
 800f14e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f152:	e853 3f00 	ldrex	r3, [r3]
 800f156:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f15a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f15e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	3308      	adds	r3, #8
 800f166:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f168:	64ba      	str	r2, [r7, #72]	; 0x48
 800f16a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f16c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f16e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f170:	e841 2300 	strex	r3, r2, [r1]
 800f174:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d1e5      	bne.n	800f148 <UART_Start_Receive_IT+0x160>
 800f17c:	e046      	b.n	800f20c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	689b      	ldr	r3, [r3, #8]
 800f182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f186:	d107      	bne.n	800f198 <UART_Start_Receive_IT+0x1b0>
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	691b      	ldr	r3, [r3, #16]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d103      	bne.n	800f198 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	4a24      	ldr	r2, [pc, #144]	; (800f224 <UART_Start_Receive_IT+0x23c>)
 800f194:	675a      	str	r2, [r3, #116]	; 0x74
 800f196:	e002      	b.n	800f19e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	4a23      	ldr	r2, [pc, #140]	; (800f228 <UART_Start_Receive_IT+0x240>)
 800f19c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	691b      	ldr	r3, [r3, #16]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d019      	beq.n	800f1da <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ae:	e853 3f00 	ldrex	r3, [r3]
 800f1b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f1ba:	677b      	str	r3, [r7, #116]	; 0x74
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	461a      	mov	r2, r3
 800f1c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f1c4:	637b      	str	r3, [r7, #52]	; 0x34
 800f1c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f1ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1cc:	e841 2300 	strex	r3, r2, [r1]
 800f1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d1e6      	bne.n	800f1a6 <UART_Start_Receive_IT+0x1be>
 800f1d8:	e018      	b.n	800f20c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	e853 3f00 	ldrex	r3, [r3]
 800f1e6:	613b      	str	r3, [r7, #16]
   return(result);
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	f043 0320 	orr.w	r3, r3, #32
 800f1ee:	67bb      	str	r3, [r7, #120]	; 0x78
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f1f8:	623b      	str	r3, [r7, #32]
 800f1fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1fc:	69f9      	ldr	r1, [r7, #28]
 800f1fe:	6a3a      	ldr	r2, [r7, #32]
 800f200:	e841 2300 	strex	r3, r2, [r1]
 800f204:	61bb      	str	r3, [r7, #24]
   return(result);
 800f206:	69bb      	ldr	r3, [r7, #24]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d1e6      	bne.n	800f1da <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800f20c:	2300      	movs	r3, #0
}
 800f20e:	4618      	mov	r0, r3
 800f210:	378c      	adds	r7, #140	; 0x8c
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr
 800f21a:	bf00      	nop
 800f21c:	0800fa75 	.word	0x0800fa75
 800f220:	0800f705 	.word	0x0800f705
 800f224:	0800f541 	.word	0x0800f541
 800f228:	0800f37d 	.word	0x0800f37d

0800f22c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b095      	sub	sp, #84	; 0x54
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f23c:	e853 3f00 	ldrex	r3, [r3]
 800f240:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f248:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	461a      	mov	r2, r3
 800f250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f252:	643b      	str	r3, [r7, #64]	; 0x40
 800f254:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f256:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f25a:	e841 2300 	strex	r3, r2, [r1]
 800f25e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f262:	2b00      	cmp	r3, #0
 800f264:	d1e6      	bne.n	800f234 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	3308      	adds	r3, #8
 800f26c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f26e:	6a3b      	ldr	r3, [r7, #32]
 800f270:	e853 3f00 	ldrex	r3, [r3]
 800f274:	61fb      	str	r3, [r7, #28]
   return(result);
 800f276:	69fb      	ldr	r3, [r7, #28]
 800f278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f27c:	f023 0301 	bic.w	r3, r3, #1
 800f280:	64bb      	str	r3, [r7, #72]	; 0x48
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	3308      	adds	r3, #8
 800f288:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f28a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f28c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f28e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f292:	e841 2300 	strex	r3, r2, [r1]
 800f296:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d1e3      	bne.n	800f266 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2a2:	2b01      	cmp	r3, #1
 800f2a4:	d118      	bne.n	800f2d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	e853 3f00 	ldrex	r3, [r3]
 800f2b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	f023 0310 	bic.w	r3, r3, #16
 800f2ba:	647b      	str	r3, [r7, #68]	; 0x44
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2c4:	61bb      	str	r3, [r7, #24]
 800f2c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2c8:	6979      	ldr	r1, [r7, #20]
 800f2ca:	69ba      	ldr	r2, [r7, #24]
 800f2cc:	e841 2300 	strex	r3, r2, [r1]
 800f2d0:	613b      	str	r3, [r7, #16]
   return(result);
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d1e6      	bne.n	800f2a6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2220      	movs	r2, #32
 800f2dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f2ec:	bf00      	nop
 800f2ee:	3754      	adds	r7, #84	; 0x54
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f304:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	2200      	movs	r2, #0
 800f30a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2200      	movs	r2, #0
 800f312:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	f7ff faae 	bl	800e878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f31c:	bf00      	nop
 800f31e:	3710      	adds	r7, #16
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b088      	sub	sp, #32
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	e853 3f00 	ldrex	r3, [r3]
 800f338:	60bb      	str	r3, [r7, #8]
   return(result);
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f340:	61fb      	str	r3, [r7, #28]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	461a      	mov	r2, r3
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	61bb      	str	r3, [r7, #24]
 800f34c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f34e:	6979      	ldr	r1, [r7, #20]
 800f350:	69ba      	ldr	r2, [r7, #24]
 800f352:	e841 2300 	strex	r3, r2, [r1]
 800f356:	613b      	str	r3, [r7, #16]
   return(result);
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d1e6      	bne.n	800f32c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2220      	movs	r2, #32
 800f362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2200      	movs	r2, #0
 800f36a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f7ff fa79 	bl	800e864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f372:	bf00      	nop
 800f374:	3720      	adds	r7, #32
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
	...

0800f37c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b09c      	sub	sp, #112	; 0x70
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f38a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f394:	2b22      	cmp	r3, #34	; 0x22
 800f396:	f040 80c3 	bne.w	800f520 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f3a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f3a8:	b2d9      	uxtb	r1, r3
 800f3aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f3ae:	b2da      	uxtb	r2, r3
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3b4:	400a      	ands	r2, r1
 800f3b6:	b2d2      	uxtb	r2, r2
 800f3b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3be:	1c5a      	adds	r2, r3, #1
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	3b01      	subs	r3, #1
 800f3ce:	b29a      	uxth	r2, r3
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	f040 80a6 	bne.w	800f530 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3ec:	e853 3f00 	ldrex	r3, [r3]
 800f3f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f3f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f3f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	461a      	mov	r2, r3
 800f400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f402:	65bb      	str	r3, [r7, #88]	; 0x58
 800f404:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f406:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f408:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f40a:	e841 2300 	strex	r3, r2, [r1]
 800f40e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f412:	2b00      	cmp	r3, #0
 800f414:	d1e6      	bne.n	800f3e4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	3308      	adds	r3, #8
 800f41c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f420:	e853 3f00 	ldrex	r3, [r3]
 800f424:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f428:	f023 0301 	bic.w	r3, r3, #1
 800f42c:	667b      	str	r3, [r7, #100]	; 0x64
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	3308      	adds	r3, #8
 800f434:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f436:	647a      	str	r2, [r7, #68]	; 0x44
 800f438:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f43a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f43c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f43e:	e841 2300 	strex	r3, r2, [r1]
 800f442:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f446:	2b00      	cmp	r3, #0
 800f448:	d1e5      	bne.n	800f416 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2220      	movs	r2, #32
 800f44e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2200      	movs	r2, #0
 800f456:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2200      	movs	r2, #0
 800f45c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	4a35      	ldr	r2, [pc, #212]	; (800f538 <UART_RxISR_8BIT+0x1bc>)
 800f464:	4293      	cmp	r3, r2
 800f466:	d024      	beq.n	800f4b2 <UART_RxISR_8BIT+0x136>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	4a33      	ldr	r2, [pc, #204]	; (800f53c <UART_RxISR_8BIT+0x1c0>)
 800f46e:	4293      	cmp	r3, r2
 800f470:	d01f      	beq.n	800f4b2 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d018      	beq.n	800f4b2 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f488:	e853 3f00 	ldrex	r3, [r3]
 800f48c:	623b      	str	r3, [r7, #32]
   return(result);
 800f48e:	6a3b      	ldr	r3, [r7, #32]
 800f490:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f494:	663b      	str	r3, [r7, #96]	; 0x60
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	461a      	mov	r2, r3
 800f49c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f49e:	633b      	str	r3, [r7, #48]	; 0x30
 800f4a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f4a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4a6:	e841 2300 	strex	r3, r2, [r1]
 800f4aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d1e6      	bne.n	800f480 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4b6:	2b01      	cmp	r3, #1
 800f4b8:	d12e      	bne.n	800f518 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	e853 3f00 	ldrex	r3, [r3]
 800f4cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f023 0310 	bic.w	r3, r3, #16
 800f4d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4de:	61fb      	str	r3, [r7, #28]
 800f4e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4e2:	69b9      	ldr	r1, [r7, #24]
 800f4e4:	69fa      	ldr	r2, [r7, #28]
 800f4e6:	e841 2300 	strex	r3, r2, [r1]
 800f4ea:	617b      	str	r3, [r7, #20]
   return(result);
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d1e6      	bne.n	800f4c0 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	69db      	ldr	r3, [r3, #28]
 800f4f8:	f003 0310 	and.w	r3, r3, #16
 800f4fc:	2b10      	cmp	r3, #16
 800f4fe:	d103      	bne.n	800f508 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	2210      	movs	r2, #16
 800f506:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f50e:	4619      	mov	r1, r3
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f7ff f9bb 	bl	800e88c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f516:	e00b      	b.n	800f530 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f7f4 fcaf 	bl	8003e7c <HAL_UART_RxCpltCallback>
}
 800f51e:	e007      	b.n	800f530 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	699a      	ldr	r2, [r3, #24]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f042 0208 	orr.w	r2, r2, #8
 800f52e:	619a      	str	r2, [r3, #24]
}
 800f530:	bf00      	nop
 800f532:	3770      	adds	r7, #112	; 0x70
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}
 800f538:	44002400 	.word	0x44002400
 800f53c:	54002400 	.word	0x54002400

0800f540 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b09c      	sub	sp, #112	; 0x70
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f54e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f558:	2b22      	cmp	r3, #34	; 0x22
 800f55a:	f040 80c3 	bne.w	800f6e4 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f564:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f56c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f56e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800f572:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f576:	4013      	ands	r3, r2
 800f578:	b29a      	uxth	r2, r3
 800f57a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f57c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f582:	1c9a      	adds	r2, r3, #2
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f58e:	b29b      	uxth	r3, r3
 800f590:	3b01      	subs	r3, #1
 800f592:	b29a      	uxth	r2, r3
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	f040 80a6 	bne.w	800f6f4 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5b0:	e853 3f00 	ldrex	r3, [r3]
 800f5b4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f5b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f5bc:	667b      	str	r3, [r7, #100]	; 0x64
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f5c6:	657b      	str	r3, [r7, #84]	; 0x54
 800f5c8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f5cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f5ce:	e841 2300 	strex	r3, r2, [r1]
 800f5d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f5d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1e6      	bne.n	800f5a8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	3308      	adds	r3, #8
 800f5e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5e4:	e853 3f00 	ldrex	r3, [r3]
 800f5e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ec:	f023 0301 	bic.w	r3, r3, #1
 800f5f0:	663b      	str	r3, [r7, #96]	; 0x60
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	3308      	adds	r3, #8
 800f5f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f5fa:	643a      	str	r2, [r7, #64]	; 0x40
 800f5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f600:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f602:	e841 2300 	strex	r3, r2, [r1]
 800f606:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d1e5      	bne.n	800f5da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2220      	movs	r2, #32
 800f612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2200      	movs	r2, #0
 800f61a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2200      	movs	r2, #0
 800f620:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	4a35      	ldr	r2, [pc, #212]	; (800f6fc <UART_RxISR_16BIT+0x1bc>)
 800f628:	4293      	cmp	r3, r2
 800f62a:	d024      	beq.n	800f676 <UART_RxISR_16BIT+0x136>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	4a33      	ldr	r2, [pc, #204]	; (800f700 <UART_RxISR_16BIT+0x1c0>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d01f      	beq.n	800f676 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f640:	2b00      	cmp	r3, #0
 800f642:	d018      	beq.n	800f676 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f64a:	6a3b      	ldr	r3, [r7, #32]
 800f64c:	e853 3f00 	ldrex	r3, [r3]
 800f650:	61fb      	str	r3, [r7, #28]
   return(result);
 800f652:	69fb      	ldr	r3, [r7, #28]
 800f654:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f658:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	461a      	mov	r2, r3
 800f660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f662:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f664:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f66a:	e841 2300 	strex	r3, r2, [r1]
 800f66e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f672:	2b00      	cmp	r3, #0
 800f674:	d1e6      	bne.n	800f644 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f67a:	2b01      	cmp	r3, #1
 800f67c:	d12e      	bne.n	800f6dc <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2200      	movs	r2, #0
 800f682:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	e853 3f00 	ldrex	r3, [r3]
 800f690:	60bb      	str	r3, [r7, #8]
   return(result);
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	f023 0310 	bic.w	r3, r3, #16
 800f698:	65bb      	str	r3, [r7, #88]	; 0x58
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	461a      	mov	r2, r3
 800f6a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6a2:	61bb      	str	r3, [r7, #24]
 800f6a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6a6:	6979      	ldr	r1, [r7, #20]
 800f6a8:	69ba      	ldr	r2, [r7, #24]
 800f6aa:	e841 2300 	strex	r3, r2, [r1]
 800f6ae:	613b      	str	r3, [r7, #16]
   return(result);
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d1e6      	bne.n	800f684 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	69db      	ldr	r3, [r3, #28]
 800f6bc:	f003 0310 	and.w	r3, r3, #16
 800f6c0:	2b10      	cmp	r3, #16
 800f6c2:	d103      	bne.n	800f6cc <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	2210      	movs	r2, #16
 800f6ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f7ff f8d9 	bl	800e88c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f6da:	e00b      	b.n	800f6f4 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800f6dc:	6878      	ldr	r0, [r7, #4]
 800f6de:	f7f4 fbcd 	bl	8003e7c <HAL_UART_RxCpltCallback>
}
 800f6e2:	e007      	b.n	800f6f4 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	699a      	ldr	r2, [r3, #24]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f042 0208 	orr.w	r2, r2, #8
 800f6f2:	619a      	str	r2, [r3, #24]
}
 800f6f4:	bf00      	nop
 800f6f6:	3770      	adds	r7, #112	; 0x70
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	44002400 	.word	0x44002400
 800f700:	54002400 	.word	0x54002400

0800f704 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b0ac      	sub	sp, #176	; 0xb0
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f712:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	69db      	ldr	r3, [r3, #28]
 800f71c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	689b      	ldr	r3, [r3, #8]
 800f730:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f73a:	2b22      	cmp	r3, #34	; 0x22
 800f73c:	f040 8187 	bne.w	800fa4e <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f746:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f74a:	e12a      	b.n	800f9a2 <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f752:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f756:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f75a:	b2d9      	uxtb	r1, r3
 800f75c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800f760:	b2da      	uxtb	r2, r3
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f766:	400a      	ands	r2, r1
 800f768:	b2d2      	uxtb	r2, r2
 800f76a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f770:	1c5a      	adds	r2, r3, #1
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	3b01      	subs	r3, #1
 800f780:	b29a      	uxth	r2, r3
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	69db      	ldr	r3, [r3, #28]
 800f78e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f796:	f003 0307 	and.w	r3, r3, #7
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d053      	beq.n	800f846 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f79e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7a2:	f003 0301 	and.w	r3, r3, #1
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d011      	beq.n	800f7ce <UART_RxISR_8BIT_FIFOEN+0xca>
 800f7aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f7ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d00b      	beq.n	800f7ce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7c4:	f043 0201 	orr.w	r2, r3, #1
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f7d2:	f003 0302 	and.w	r3, r3, #2
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d011      	beq.n	800f7fe <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f7da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f7de:	f003 0301 	and.w	r3, r3, #1
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d00b      	beq.n	800f7fe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	2202      	movs	r2, #2
 800f7ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7f4:	f043 0204 	orr.w	r2, r3, #4
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f7fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f802:	f003 0304 	and.w	r3, r3, #4
 800f806:	2b00      	cmp	r3, #0
 800f808:	d011      	beq.n	800f82e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f80a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f80e:	f003 0301 	and.w	r3, r3, #1
 800f812:	2b00      	cmp	r3, #0
 800f814:	d00b      	beq.n	800f82e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	2204      	movs	r2, #4
 800f81c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f824:	f043 0202 	orr.w	r2, r3, #2
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f834:	2b00      	cmp	r3, #0
 800f836:	d006      	beq.n	800f846 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f7ff f81d 	bl	800e878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2200      	movs	r2, #0
 800f842:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	2b00      	cmp	r3, #0
 800f850:	f040 80a7 	bne.w	800f9a2 <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f85a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f85c:	e853 3f00 	ldrex	r3, [r3]
 800f860:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800f862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	461a      	mov	r2, r3
 800f872:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f876:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f878:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f87a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f87c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f87e:	e841 2300 	strex	r3, r2, [r1]
 800f882:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800f884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f886:	2b00      	cmp	r3, #0
 800f888:	d1e4      	bne.n	800f854 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	3308      	adds	r3, #8
 800f890:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f894:	e853 3f00 	ldrex	r3, [r3]
 800f898:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f89a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f89c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f8a0:	f023 0301 	bic.w	r3, r3, #1
 800f8a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	3308      	adds	r3, #8
 800f8ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f8b2:	66ba      	str	r2, [r7, #104]	; 0x68
 800f8b4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f8b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f8ba:	e841 2300 	strex	r3, r2, [r1]
 800f8be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f8c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d1e1      	bne.n	800f88a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2220      	movs	r2, #32
 800f8ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	4a62      	ldr	r2, [pc, #392]	; (800fa68 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d026      	beq.n	800f932 <UART_RxISR_8BIT_FIFOEN+0x22e>
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	4a60      	ldr	r2, [pc, #384]	; (800fa6c <UART_RxISR_8BIT_FIFOEN+0x368>)
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d021      	beq.n	800f932 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	685b      	ldr	r3, [r3, #4]
 800f8f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d01a      	beq.n	800f932 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f904:	e853 3f00 	ldrex	r3, [r3]
 800f908:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f90a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f90c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f910:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	461a      	mov	r2, r3
 800f91a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f91e:	657b      	str	r3, [r7, #84]	; 0x54
 800f920:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f922:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f924:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f926:	e841 2300 	strex	r3, r2, [r1]
 800f92a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f92c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d1e4      	bne.n	800f8fc <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f936:	2b01      	cmp	r3, #1
 800f938:	d130      	bne.n	800f99c <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2200      	movs	r2, #0
 800f93e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f948:	e853 3f00 	ldrex	r3, [r3]
 800f94c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f950:	f023 0310 	bic.w	r3, r3, #16
 800f954:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	461a      	mov	r2, r3
 800f95e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f962:	643b      	str	r3, [r7, #64]	; 0x40
 800f964:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f966:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f968:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f96a:	e841 2300 	strex	r3, r2, [r1]
 800f96e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f972:	2b00      	cmp	r3, #0
 800f974:	d1e4      	bne.n	800f940 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	69db      	ldr	r3, [r3, #28]
 800f97c:	f003 0310 	and.w	r3, r3, #16
 800f980:	2b10      	cmp	r3, #16
 800f982:	d103      	bne.n	800f98c <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	2210      	movs	r2, #16
 800f98a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f992:	4619      	mov	r1, r3
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f7fe ff79 	bl	800e88c <HAL_UARTEx_RxEventCallback>
 800f99a:	e002      	b.n	800f9a2 <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f7f4 fa6d 	bl	8003e7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f9a2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d006      	beq.n	800f9b8 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 800f9aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f9ae:	f003 0320 	and.w	r3, r3, #32
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	f47f aeca 	bne.w	800f74c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f9be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f9c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d049      	beq.n	800fa5e <UART_RxISR_8BIT_FIFOEN+0x35a>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f9d0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d242      	bcs.n	800fa5e <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	3308      	adds	r3, #8
 800f9de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9e0:	6a3b      	ldr	r3, [r7, #32]
 800f9e2:	e853 3f00 	ldrex	r3, [r3]
 800f9e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800f9e8:	69fb      	ldr	r3, [r7, #28]
 800f9ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f9ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	3308      	adds	r3, #8
 800f9f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f9fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f9fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fa02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa04:	e841 2300 	strex	r3, r2, [r1]
 800fa08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d1e3      	bne.n	800f9d8 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	4a17      	ldr	r2, [pc, #92]	; (800fa70 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800fa14:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	e853 3f00 	ldrex	r3, [r3]
 800fa22:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	f043 0320 	orr.w	r3, r3, #32
 800fa2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	461a      	mov	r2, r3
 800fa34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fa38:	61bb      	str	r3, [r7, #24]
 800fa3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa3c:	6979      	ldr	r1, [r7, #20]
 800fa3e:	69ba      	ldr	r2, [r7, #24]
 800fa40:	e841 2300 	strex	r3, r2, [r1]
 800fa44:	613b      	str	r3, [r7, #16]
   return(result);
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d1e4      	bne.n	800fa16 <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fa4c:	e007      	b.n	800fa5e <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	699a      	ldr	r2, [r3, #24]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f042 0208 	orr.w	r2, r2, #8
 800fa5c:	619a      	str	r2, [r3, #24]
}
 800fa5e:	bf00      	nop
 800fa60:	37b0      	adds	r7, #176	; 0xb0
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
 800fa66:	bf00      	nop
 800fa68:	44002400 	.word	0x44002400
 800fa6c:	54002400 	.word	0x54002400
 800fa70:	0800f37d 	.word	0x0800f37d

0800fa74 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b0ae      	sub	sp, #184	; 0xb8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa82:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	69db      	ldr	r3, [r3, #28]
 800fa8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	689b      	ldr	r3, [r3, #8]
 800faa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800faaa:	2b22      	cmp	r3, #34	; 0x22
 800faac:	f040 818b 	bne.w	800fdc6 <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fab6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800faba:	e12e      	b.n	800fd1a <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800faca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800face:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800fad2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800fad6:	4013      	ands	r3, r2
 800fad8:	b29a      	uxth	r2, r3
 800fada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fade:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fae4:	1c9a      	adds	r2, r3, #2
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800faf0:	b29b      	uxth	r3, r3
 800faf2:	3b01      	subs	r3, #1
 800faf4:	b29a      	uxth	r2, r3
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	69db      	ldr	r3, [r3, #28]
 800fb02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fb06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fb0a:	f003 0307 	and.w	r3, r3, #7
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d053      	beq.n	800fbba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fb12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fb16:	f003 0301 	and.w	r3, r3, #1
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d011      	beq.n	800fb42 <UART_RxISR_16BIT_FIFOEN+0xce>
 800fb1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d00b      	beq.n	800fb42 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	2201      	movs	r2, #1
 800fb30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb38:	f043 0201 	orr.w	r2, r3, #1
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fb46:	f003 0302 	and.w	r3, r3, #2
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d011      	beq.n	800fb72 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800fb4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb52:	f003 0301 	and.w	r3, r3, #1
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d00b      	beq.n	800fb72 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	2202      	movs	r2, #2
 800fb60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb68:	f043 0204 	orr.w	r2, r3, #4
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fb76:	f003 0304 	and.w	r3, r3, #4
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d011      	beq.n	800fba2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800fb7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fb82:	f003 0301 	and.w	r3, r3, #1
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d00b      	beq.n	800fba2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	2204      	movs	r2, #4
 800fb90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb98:	f043 0202 	orr.w	r2, r3, #2
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d006      	beq.n	800fbba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f7fe fe63 	bl	800e878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fbc0:	b29b      	uxth	r3, r3
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	f040 80a9 	bne.w	800fd1a <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbd0:	e853 3f00 	ldrex	r3, [r3]
 800fbd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fbd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fbdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fbea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fbee:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fbf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fbf6:	e841 2300 	strex	r3, r2, [r1]
 800fbfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fbfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d1e2      	bne.n	800fbc8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	3308      	adds	r3, #8
 800fc08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc0c:	e853 3f00 	ldrex	r3, [r3]
 800fc10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fc12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fc18:	f023 0301 	bic.w	r3, r3, #1
 800fc1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	3308      	adds	r3, #8
 800fc26:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fc2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fc2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fc30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fc32:	e841 2300 	strex	r3, r2, [r1]
 800fc36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fc38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d1e1      	bne.n	800fc02 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2220      	movs	r2, #32
 800fc42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	4a62      	ldr	r2, [pc, #392]	; (800fde0 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	d026      	beq.n	800fcaa <UART_RxISR_16BIT_FIFOEN+0x236>
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4a60      	ldr	r2, [pc, #384]	; (800fde4 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d021      	beq.n	800fcaa <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d01a      	beq.n	800fcaa <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc7c:	e853 3f00 	ldrex	r3, [r3]
 800fc80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fc82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fc88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	461a      	mov	r2, r3
 800fc92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc96:	65bb      	str	r3, [r7, #88]	; 0x58
 800fc98:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fc9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fc9e:	e841 2300 	strex	r3, r2, [r1]
 800fca2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d1e4      	bne.n	800fc74 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcae:	2b01      	cmp	r3, #1
 800fcb0:	d130      	bne.n	800fd14 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc0:	e853 3f00 	ldrex	r3, [r3]
 800fcc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fcc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcc8:	f023 0310 	bic.w	r3, r3, #16
 800fccc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	461a      	mov	r2, r3
 800fcd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fcda:	647b      	str	r3, [r7, #68]	; 0x44
 800fcdc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fce0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fce2:	e841 2300 	strex	r3, r2, [r1]
 800fce6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d1e4      	bne.n	800fcb8 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	69db      	ldr	r3, [r3, #28]
 800fcf4:	f003 0310 	and.w	r3, r3, #16
 800fcf8:	2b10      	cmp	r3, #16
 800fcfa:	d103      	bne.n	800fd04 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	2210      	movs	r2, #16
 800fd02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f7fe fdbd 	bl	800e88c <HAL_UARTEx_RxEventCallback>
 800fd12:	e002      	b.n	800fd1a <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f7f4 f8b1 	bl	8003e7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fd1a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d006      	beq.n	800fd30 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800fd22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fd26:	f003 0320 	and.w	r3, r3, #32
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	f47f aec6 	bne.w	800fabc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd36:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fd3a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d049      	beq.n	800fdd6 <UART_RxISR_16BIT_FIFOEN+0x362>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fd48:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d242      	bcs.n	800fdd6 <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	3308      	adds	r3, #8
 800fd56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5a:	e853 3f00 	ldrex	r3, [r3]
 800fd5e:	623b      	str	r3, [r7, #32]
   return(result);
 800fd60:	6a3b      	ldr	r3, [r7, #32]
 800fd62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fd66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	3308      	adds	r3, #8
 800fd70:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fd74:	633a      	str	r2, [r7, #48]	; 0x30
 800fd76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd7c:	e841 2300 	strex	r3, r2, [r1]
 800fd80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d1e3      	bne.n	800fd50 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	4a17      	ldr	r2, [pc, #92]	; (800fde8 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800fd8c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	e853 3f00 	ldrex	r3, [r3]
 800fd9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f043 0320 	orr.w	r3, r3, #32
 800fda2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	461a      	mov	r2, r3
 800fdac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fdb0:	61fb      	str	r3, [r7, #28]
 800fdb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb4:	69b9      	ldr	r1, [r7, #24]
 800fdb6:	69fa      	ldr	r2, [r7, #28]
 800fdb8:	e841 2300 	strex	r3, r2, [r1]
 800fdbc:	617b      	str	r3, [r7, #20]
   return(result);
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d1e4      	bne.n	800fd8e <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fdc4:	e007      	b.n	800fdd6 <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	699a      	ldr	r2, [r3, #24]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f042 0208 	orr.w	r2, r2, #8
 800fdd4:	619a      	str	r2, [r3, #24]
}
 800fdd6:	bf00      	nop
 800fdd8:	37b8      	adds	r7, #184	; 0xb8
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
 800fdde:	bf00      	nop
 800fde0:	44002400 	.word	0x44002400
 800fde4:	54002400 	.word	0x54002400
 800fde8:	0800f541 	.word	0x0800f541

0800fdec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fdec:	b480      	push	{r7}
 800fdee:	b083      	sub	sp, #12
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fdf4:	bf00      	nop
 800fdf6:	370c      	adds	r7, #12
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr

0800fe00 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fe00:	b480      	push	{r7}
 800fe02:	b083      	sub	sp, #12
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fe08:	bf00      	nop
 800fe0a:	370c      	adds	r7, #12
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe12:	4770      	bx	lr

0800fe14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fe14:	b480      	push	{r7}
 800fe16:	b083      	sub	sp, #12
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fe1c:	bf00      	nop
 800fe1e:	370c      	adds	r7, #12
 800fe20:	46bd      	mov	sp, r7
 800fe22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe26:	4770      	bx	lr

0800fe28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b085      	sub	sp, #20
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fe36:	2b01      	cmp	r3, #1
 800fe38:	d101      	bne.n	800fe3e <HAL_UARTEx_DisableFifoMode+0x16>
 800fe3a:	2302      	movs	r3, #2
 800fe3c:	e027      	b.n	800fe8e <HAL_UARTEx_DisableFifoMode+0x66>
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2201      	movs	r2, #1
 800fe42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2224      	movs	r2, #36	; 0x24
 800fe4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	681a      	ldr	r2, [r3, #0]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f022 0201 	bic.w	r2, r2, #1
 800fe64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fe6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2200      	movs	r2, #0
 800fe72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	68fa      	ldr	r2, [r7, #12]
 800fe7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2220      	movs	r2, #32
 800fe80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2200      	movs	r2, #0
 800fe88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fe8c:	2300      	movs	r3, #0
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3714      	adds	r7, #20
 800fe92:	46bd      	mov	sp, r7
 800fe94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe98:	4770      	bx	lr

0800fe9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fe9a:	b580      	push	{r7, lr}
 800fe9c:	b084      	sub	sp, #16
 800fe9e:	af00      	add	r7, sp, #0
 800fea0:	6078      	str	r0, [r7, #4]
 800fea2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800feaa:	2b01      	cmp	r3, #1
 800feac:	d101      	bne.n	800feb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800feae:	2302      	movs	r3, #2
 800feb0:	e02d      	b.n	800ff0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2201      	movs	r2, #1
 800feb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2224      	movs	r2, #36	; 0x24
 800febe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	681a      	ldr	r2, [r3, #0]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f022 0201 	bic.w	r2, r2, #1
 800fed8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	689b      	ldr	r3, [r3, #8]
 800fee0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	683a      	ldr	r2, [r7, #0]
 800feea:	430a      	orrs	r2, r1
 800feec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f000 f850 	bl	800ff94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	68fa      	ldr	r2, [r7, #12]
 800fefa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2220      	movs	r2, #32
 800ff00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2200      	movs	r2, #0
 800ff08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ff0c:	2300      	movs	r3, #0
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3710      	adds	r7, #16
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}

0800ff16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff16:	b580      	push	{r7, lr}
 800ff18:	b084      	sub	sp, #16
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	6078      	str	r0, [r7, #4]
 800ff1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ff26:	2b01      	cmp	r3, #1
 800ff28:	d101      	bne.n	800ff2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ff2a:	2302      	movs	r3, #2
 800ff2c:	e02d      	b.n	800ff8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2201      	movs	r2, #1
 800ff32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2224      	movs	r2, #36	; 0x24
 800ff3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	681a      	ldr	r2, [r3, #0]
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f022 0201 	bic.w	r2, r2, #1
 800ff54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	689b      	ldr	r3, [r3, #8]
 800ff5c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	683a      	ldr	r2, [r7, #0]
 800ff66:	430a      	orrs	r2, r1
 800ff68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 f812 	bl	800ff94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	68fa      	ldr	r2, [r7, #12]
 800ff76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2220      	movs	r2, #32
 800ff7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2200      	movs	r2, #0
 800ff84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ff88:	2300      	movs	r3, #0
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3710      	adds	r7, #16
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
	...

0800ff94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ff94:	b480      	push	{r7}
 800ff96:	b085      	sub	sp, #20
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d108      	bne.n	800ffb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2201      	movs	r2, #1
 800ffb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ffb4:	e031      	b.n	801001a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ffb6:	2308      	movs	r3, #8
 800ffb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ffba:	2308      	movs	r3, #8
 800ffbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	689b      	ldr	r3, [r3, #8]
 800ffc4:	0e5b      	lsrs	r3, r3, #25
 800ffc6:	b2db      	uxtb	r3, r3
 800ffc8:	f003 0307 	and.w	r3, r3, #7
 800ffcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	689b      	ldr	r3, [r3, #8]
 800ffd4:	0f5b      	lsrs	r3, r3, #29
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	f003 0307 	and.w	r3, r3, #7
 800ffdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ffde:	7bbb      	ldrb	r3, [r7, #14]
 800ffe0:	7b3a      	ldrb	r2, [r7, #12]
 800ffe2:	4911      	ldr	r1, [pc, #68]	; (8010028 <UARTEx_SetNbDataToProcess+0x94>)
 800ffe4:	5c8a      	ldrb	r2, [r1, r2]
 800ffe6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ffea:	7b3a      	ldrb	r2, [r7, #12]
 800ffec:	490f      	ldr	r1, [pc, #60]	; (801002c <UARTEx_SetNbDataToProcess+0x98>)
 800ffee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fff0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fff4:	b29a      	uxth	r2, r3
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fffc:	7bfb      	ldrb	r3, [r7, #15]
 800fffe:	7b7a      	ldrb	r2, [r7, #13]
 8010000:	4909      	ldr	r1, [pc, #36]	; (8010028 <UARTEx_SetNbDataToProcess+0x94>)
 8010002:	5c8a      	ldrb	r2, [r1, r2]
 8010004:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010008:	7b7a      	ldrb	r2, [r7, #13]
 801000a:	4908      	ldr	r1, [pc, #32]	; (801002c <UARTEx_SetNbDataToProcess+0x98>)
 801000c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801000e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010012:	b29a      	uxth	r2, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801001a:	bf00      	nop
 801001c:	3714      	adds	r7, #20
 801001e:	46bd      	mov	sp, r7
 8010020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010024:	4770      	bx	lr
 8010026:	bf00      	nop
 8010028:	080299a8 	.word	0x080299a8
 801002c:	080299b0 	.word	0x080299b0

08010030 <qbufferCreateBySize>:

  return ret;
}

BOOL qbufferCreateBySize(qbuffer_t *p_node, uint8_t *p_buf, uint32_t size, uint32_t length)
{
 8010030:	b480      	push	{r7}
 8010032:	b087      	sub	sp, #28
 8010034:	af00      	add	r7, sp, #0
 8010036:	60f8      	str	r0, [r7, #12]
 8010038:	60b9      	str	r1, [r7, #8]
 801003a:	607a      	str	r2, [r7, #4]
 801003c:	603b      	str	r3, [r7, #0]
  BOOL ret = TRUE;
 801003e:	2301      	movs	r3, #1
 8010040:	617b      	str	r3, [r7, #20]

  p_node->in    = 0;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2200      	movs	r2, #0
 8010046:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	2200      	movs	r2, #0
 801004c:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	683a      	ldr	r2, [r7, #0]
 8010052:	609a      	str	r2, [r3, #8]
  p_node->size  = size;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	68ba      	ldr	r2, [r7, #8]
 801005e:	611a      	str	r2, [r3, #16]

  return ret;
 8010060:	697b      	ldr	r3, [r7, #20]
}
 8010062:	4618      	mov	r0, r3
 8010064:	371c      	adds	r7, #28
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr

0801006e <qbufferWrite>:

BOOL qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 801006e:	b480      	push	{r7}
 8010070:	b08b      	sub	sp, #44	; 0x2c
 8010072:	af00      	add	r7, sp, #0
 8010074:	60f8      	str	r0, [r7, #12]
 8010076:	60b9      	str	r1, [r7, #8]
 8010078:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 801007a:	2301      	movs	r3, #1
 801007c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t next_in;


  for (int i=0; i<length; i++)
 801007e:	2300      	movs	r3, #0
 8010080:	623b      	str	r3, [r7, #32]
 8010082:	e042      	b.n	801010a <qbufferWrite+0x9c>
  {
    next_in = (p_node->in + 1) % p_node->len;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	3301      	adds	r3, #1
 801008a:	68fa      	ldr	r2, [r7, #12]
 801008c:	6892      	ldr	r2, [r2, #8]
 801008e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010092:	fb01 f202 	mul.w	r2, r1, r2
 8010096:	1a9b      	subs	r3, r3, r2
 8010098:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	685b      	ldr	r3, [r3, #4]
 801009e:	69ba      	ldr	r2, [r7, #24]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d02c      	beq.n	80100fe <qbufferWrite+0x90>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	691b      	ldr	r3, [r3, #16]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d024      	beq.n	80100f6 <qbufferWrite+0x88>
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d021      	beq.n	80100f6 <qbufferWrite+0x88>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	691a      	ldr	r2, [r3, #16]
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	68f9      	ldr	r1, [r7, #12]
 80100bc:	68c9      	ldr	r1, [r1, #12]
 80100be:	fb01 f303 	mul.w	r3, r1, r3
 80100c2:	4413      	add	r3, r2
 80100c4:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 80100c6:	2300      	movs	r3, #0
 80100c8:	61fb      	str	r3, [r7, #28]
 80100ca:	e00a      	b.n	80100e2 <qbufferWrite+0x74>
        {
          p_buf[i] = p_data[i];
 80100cc:	69fb      	ldr	r3, [r7, #28]
 80100ce:	68ba      	ldr	r2, [r7, #8]
 80100d0:	441a      	add	r2, r3
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	6979      	ldr	r1, [r7, #20]
 80100d6:	440b      	add	r3, r1
 80100d8:	7812      	ldrb	r2, [r2, #0]
 80100da:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 80100dc:	69fb      	ldr	r3, [r7, #28]
 80100de:	3301      	adds	r3, #1
 80100e0:	61fb      	str	r3, [r7, #28]
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	68da      	ldr	r2, [r3, #12]
 80100e6:	69fb      	ldr	r3, [r7, #28]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d8ef      	bhi.n	80100cc <qbufferWrite+0x5e>
        }
        p_data += p_node->size;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	68db      	ldr	r3, [r3, #12]
 80100f0:	68ba      	ldr	r2, [r7, #8]
 80100f2:	4413      	add	r3, r2
 80100f4:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	69ba      	ldr	r2, [r7, #24]
 80100fa:	601a      	str	r2, [r3, #0]
 80100fc:	e002      	b.n	8010104 <qbufferWrite+0x96>
    }
    else
    {
      ret = FALSE;
 80100fe:	2300      	movs	r3, #0
 8010100:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8010102:	e006      	b.n	8010112 <qbufferWrite+0xa4>
  for (int i=0; i<length; i++)
 8010104:	6a3b      	ldr	r3, [r7, #32]
 8010106:	3301      	adds	r3, #1
 8010108:	623b      	str	r3, [r7, #32]
 801010a:	6a3b      	ldr	r3, [r7, #32]
 801010c:	687a      	ldr	r2, [r7, #4]
 801010e:	429a      	cmp	r2, r3
 8010110:	d8b8      	bhi.n	8010084 <qbufferWrite+0x16>
    }
  }

  return ret;
 8010112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010114:	4618      	mov	r0, r3
 8010116:	372c      	adds	r7, #44	; 0x2c
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr

08010120 <qbufferRead>:

BOOL qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8010120:	b480      	push	{r7}
 8010122:	b089      	sub	sp, #36	; 0x24
 8010124:	af00      	add	r7, sp, #0
 8010126:	60f8      	str	r0, [r7, #12]
 8010128:	60b9      	str	r1, [r7, #8]
 801012a:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 801012c:	2301      	movs	r3, #1
 801012e:	61fb      	str	r3, [r7, #28]


  for (int i=0; i<length; i++)
 8010130:	2300      	movs	r3, #0
 8010132:	61bb      	str	r3, [r7, #24]
 8010134:	e041      	b.n	80101ba <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	691b      	ldr	r3, [r3, #16]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d024      	beq.n	8010188 <qbufferRead+0x68>
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d021      	beq.n	8010188 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	691a      	ldr	r2, [r3, #16]
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	68f9      	ldr	r1, [r7, #12]
 801014e:	68c9      	ldr	r1, [r1, #12]
 8010150:	fb01 f303 	mul.w	r3, r1, r3
 8010154:	4413      	add	r3, r2
 8010156:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 8010158:	2300      	movs	r3, #0
 801015a:	617b      	str	r3, [r7, #20]
 801015c:	e00a      	b.n	8010174 <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	693a      	ldr	r2, [r7, #16]
 8010162:	441a      	add	r2, r3
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	68b9      	ldr	r1, [r7, #8]
 8010168:	440b      	add	r3, r1
 801016a:	7812      	ldrb	r2, [r2, #0]
 801016c:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	3301      	adds	r3, #1
 8010172:	617b      	str	r3, [r7, #20]
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	68da      	ldr	r2, [r3, #12]
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	429a      	cmp	r2, r3
 801017c:	d8ef      	bhi.n	801015e <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	68db      	ldr	r3, [r3, #12]
 8010182:	68ba      	ldr	r2, [r7, #8]
 8010184:	4413      	add	r3, r2
 8010186:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	685a      	ldr	r2, [r3, #4]
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	429a      	cmp	r2, r3
 8010192:	d00c      	beq.n	80101ae <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	685b      	ldr	r3, [r3, #4]
 8010198:	3301      	adds	r3, #1
 801019a:	68fa      	ldr	r2, [r7, #12]
 801019c:	6892      	ldr	r2, [r2, #8]
 801019e:	fbb3 f1f2 	udiv	r1, r3, r2
 80101a2:	fb01 f202 	mul.w	r2, r1, r2
 80101a6:	1a9a      	subs	r2, r3, r2
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	605a      	str	r2, [r3, #4]
 80101ac:	e002      	b.n	80101b4 <qbufferRead+0x94>
    }
    else
    {
      ret = FALSE;
 80101ae:	2300      	movs	r3, #0
 80101b0:	61fb      	str	r3, [r7, #28]
      break;
 80101b2:	e006      	b.n	80101c2 <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 80101b4:	69bb      	ldr	r3, [r7, #24]
 80101b6:	3301      	adds	r3, #1
 80101b8:	61bb      	str	r3, [r7, #24]
 80101ba:	69bb      	ldr	r3, [r7, #24]
 80101bc:	687a      	ldr	r2, [r7, #4]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d8b9      	bhi.n	8010136 <qbufferRead+0x16>
    }
  }

  return ret;
 80101c2:	69fb      	ldr	r3, [r7, #28]
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3724      	adds	r7, #36	; 0x24
 80101c8:	46bd      	mov	sp, r7
 80101ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ce:	4770      	bx	lr

080101d0 <qbufferPeekWrite>:

uint8_t *qbufferPeekWrite(qbuffer_t *p_node)
{
 80101d0:	b480      	push	{r7}
 80101d2:	b083      	sub	sp, #12
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  return &p_node->p_buf[p_node->in*p_node->size];
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	691a      	ldr	r2, [r3, #16]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	6879      	ldr	r1, [r7, #4]
 80101e2:	68c9      	ldr	r1, [r1, #12]
 80101e4:	fb01 f303 	mul.w	r3, r1, r3
 80101e8:	4413      	add	r3, r2
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	370c      	adds	r7, #12
 80101ee:	46bd      	mov	sp, r7
 80101f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f4:	4770      	bx	lr

080101f6 <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80101f6:	b480      	push	{r7}
 80101f8:	b085      	sub	sp, #20
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	1ad3      	subs	r3, r2, r3
 8010208:	687a      	ldr	r2, [r7, #4]
 801020a:	6892      	ldr	r2, [r2, #8]
 801020c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010210:	fb01 f202 	mul.w	r2, r1, r2
 8010214:	1a9b      	subs	r3, r3, r2
 8010216:	60fb      	str	r3, [r7, #12]

  return ret;
 8010218:	68fb      	ldr	r3, [r7, #12]
}
 801021a:	4618      	mov	r0, r3
 801021c:	3714      	adds	r7, #20
 801021e:	46bd      	mov	sp, r7
 8010220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010224:	4770      	bx	lr
	...

08010228 <svCLI_Init>:
// extern variables

// Functions
// svCLI_Init must be called before using CLI
void svCLI_Init(SVCLI_GET_CHAR_FUNC funcGetChar, SVCLI_PUT_CHAR_FUNC funcPutChar, SVCLI_COMMIT_FUNC funcCommit)
{
 8010228:	b480      	push	{r7}
 801022a:	b085      	sub	sp, #20
 801022c:	af00      	add	r7, sp, #0
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	60b9      	str	r1, [r7, #8]
 8010232:	607a      	str	r2, [r7, #4]
  svGetChar = funcGetChar;
 8010234:	4a18      	ldr	r2, [pc, #96]	; (8010298 <svCLI_Init+0x70>)
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	6013      	str	r3, [r2, #0]
  svPutChar = funcPutChar;
 801023a:	4a18      	ldr	r2, [pc, #96]	; (801029c <svCLI_Init+0x74>)
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	6013      	str	r3, [r2, #0]
  svCommit = funcCommit;
 8010240:	4a17      	ldr	r2, [pc, #92]	; (80102a0 <svCLI_Init+0x78>)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6013      	str	r3, [r2, #0]
  szCLIString[0] = 0;
 8010246:	4b17      	ldr	r3, [pc, #92]	; (80102a4 <svCLI_Init+0x7c>)
 8010248:	2200      	movs	r2, #0
 801024a:	701a      	strb	r2, [r3, #0]
#pragma section=".Table4CLI"
  sCLITableBegin = (SVCLI_t*)__section_begin(".Table4CLI");
  sCLITablEnd = (SVCLI_t*)__section_end(".Table4CLI");

#elif defined ( __GNUC__ )
  sCLITableBegin = (SVCLI_t*)Table4CLI_start;
 801024c:	4b16      	ldr	r3, [pc, #88]	; (80102a8 <svCLI_Init+0x80>)
 801024e:	4a17      	ldr	r2, [pc, #92]	; (80102ac <svCLI_Init+0x84>)
 8010250:	601a      	str	r2, [r3, #0]
  sCLITablEnd = (SVCLI_t*)Table4CLI_end;
 8010252:	4b17      	ldr	r3, [pc, #92]	; (80102b0 <svCLI_Init+0x88>)
 8010254:	4a17      	ldr	r2, [pc, #92]	; (80102b4 <svCLI_Init+0x8c>)
 8010256:	601a      	str	r2, [r3, #0]
#endif

  if (s_bPwdOK) {
 8010258:	4b17      	ldr	r3, [pc, #92]	; (80102b8 <svCLI_Init+0x90>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d00d      	beq.n	801027c <svCLI_Init+0x54>
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 8010260:	4b16      	ldr	r3, [pc, #88]	; (80102bc <svCLI_Init+0x94>)
 8010262:	4a17      	ldr	r2, [pc, #92]	; (80102c0 <svCLI_Init+0x98>)
 8010264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010268:	6018      	str	r0, [r3, #0]
 801026a:	3304      	adds	r3, #4
 801026c:	8019      	strh	r1, [r3, #0]
 801026e:	3302      	adds	r3, #2
 8010270:	0c0a      	lsrs	r2, r1, #16
 8010272:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 8010274:	4b13      	ldr	r3, [pc, #76]	; (80102c4 <svCLI_Init+0x9c>)
 8010276:	2206      	movs	r2, #6
 8010278:	601a      	str	r2, [r3, #0]
  }
  else {
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
  }
}
 801027a:	e007      	b.n	801028c <svCLI_Init+0x64>
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
 801027c:	4b0f      	ldr	r3, [pc, #60]	; (80102bc <svCLI_Init+0x94>)
 801027e:	4a12      	ldr	r2, [pc, #72]	; (80102c8 <svCLI_Init+0xa0>)
 8010280:	ca07      	ldmia	r2, {r0, r1, r2}
 8010282:	c303      	stmia	r3!, {r0, r1}
 8010284:	801a      	strh	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
 8010286:	4b0f      	ldr	r3, [pc, #60]	; (80102c4 <svCLI_Init+0x9c>)
 8010288:	2209      	movs	r2, #9
 801028a:	601a      	str	r2, [r3, #0]
}
 801028c:	bf00      	nop
 801028e:	3714      	adds	r7, #20
 8010290:	46bd      	mov	sp, r7
 8010292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010296:	4770      	bx	lr
 8010298:	20055978 	.word	0x20055978
 801029c:	2005597c 	.word	0x2005597c
 80102a0:	20055980 	.word	0x20055980
 80102a4:	20055764 	.word	0x20055764
 80102a8:	20055970 	.word	0x20055970
 80102ac:	0802520c 	.word	0x0802520c
 80102b0:	20055974 	.word	0x20055974
 80102b4:	0802523c 	.word	0x0802523c
 80102b8:	20050064 	.word	0x20050064
 80102bc:	20050068 	.word	0x20050068
 80102c0:	080255f4 	.word	0x080255f4
 80102c4:	20050074 	.word	0x20050074
 80102c8:	080255fc 	.word	0x080255fc

080102cc <svCLI_Printf>:

static int svCLI_Printf(char* fmt,...)
{
 80102cc:	b40f      	push	{r0, r1, r2, r3}
 80102ce:	b580      	push	{r7, lr}
 80102d0:	b084      	sub	sp, #16
 80102d2:	af00      	add	r7, sp, #0
static char msg[256];
  va_list ap;
  int len;

  va_start(ap, fmt);
 80102d4:	f107 031c 	add.w	r3, r7, #28
 80102d8:	607b      	str	r3, [r7, #4]
  len = vsprintf(msg, fmt, ap);
 80102da:	687a      	ldr	r2, [r7, #4]
 80102dc:	69b9      	ldr	r1, [r7, #24]
 80102de:	480f      	ldr	r0, [pc, #60]	; (801031c <svCLI_Printf+0x50>)
 80102e0:	f013 ff7a 	bl	80241d8 <vsiprintf>
 80102e4:	60b8      	str	r0, [r7, #8]
  va_end(ap);
  for (int i=0;i<len;i++) {
 80102e6:	2300      	movs	r3, #0
 80102e8:	60fb      	str	r3, [r7, #12]
 80102ea:	e00a      	b.n	8010302 <svCLI_Printf+0x36>
    svPutChar(msg[i]);
 80102ec:	4b0c      	ldr	r3, [pc, #48]	; (8010320 <svCLI_Printf+0x54>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	490a      	ldr	r1, [pc, #40]	; (801031c <svCLI_Printf+0x50>)
 80102f2:	68fa      	ldr	r2, [r7, #12]
 80102f4:	440a      	add	r2, r1
 80102f6:	7812      	ldrb	r2, [r2, #0]
 80102f8:	4610      	mov	r0, r2
 80102fa:	4798      	blx	r3
  for (int i=0;i<len;i++) {
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	3301      	adds	r3, #1
 8010300:	60fb      	str	r3, [r7, #12]
 8010302:	68fa      	ldr	r2, [r7, #12]
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	429a      	cmp	r2, r3
 8010308:	dbf0      	blt.n	80102ec <svCLI_Printf+0x20>
  }
  return len;
 801030a:	68bb      	ldr	r3, [r7, #8]
}
 801030c:	4618      	mov	r0, r3
 801030e:	3710      	adds	r7, #16
 8010310:	46bd      	mov	sp, r7
 8010312:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010316:	b004      	add	sp, #16
 8010318:	4770      	bx	lr
 801031a:	bf00      	nop
 801031c:	20055990 	.word	0x20055990
 8010320:	2005597c 	.word	0x2005597c

08010324 <svCLI_ShowHelp>:

void svCLI_ShowHelp(void)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b084      	sub	sp, #16
 8010328:	af00      	add	r7, sp, #0
  if (svPutChar) {
 801032a:	4b2d      	ldr	r3, [pc, #180]	; (80103e0 <svCLI_ShowHelp+0xbc>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d04a      	beq.n	80103c8 <svCLI_ShowHelp+0xa4>
    if (sCLITableBegin != sCLITablEnd) {
 8010332:	4b2c      	ldr	r3, [pc, #176]	; (80103e4 <svCLI_ShowHelp+0xc0>)
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	4b2c      	ldr	r3, [pc, #176]	; (80103e8 <svCLI_ShowHelp+0xc4>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	429a      	cmp	r2, r3
 801033c:	d03e      	beq.n	80103bc <svCLI_ShowHelp+0x98>
      for (unsigned int s=0;s<80;s++) svPutChar('=');
 801033e:	2300      	movs	r3, #0
 8010340:	60fb      	str	r3, [r7, #12]
 8010342:	e006      	b.n	8010352 <svCLI_ShowHelp+0x2e>
 8010344:	4b26      	ldr	r3, [pc, #152]	; (80103e0 <svCLI_ShowHelp+0xbc>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	203d      	movs	r0, #61	; 0x3d
 801034a:	4798      	blx	r3
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	3301      	adds	r3, #1
 8010350:	60fb      	str	r3, [r7, #12]
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2b4f      	cmp	r3, #79	; 0x4f
 8010356:	d9f5      	bls.n	8010344 <svCLI_ShowHelp+0x20>
      svCLI_Printf("\r\n");
 8010358:	4824      	ldr	r0, [pc, #144]	; (80103ec <svCLI_ShowHelp+0xc8>)
 801035a:	f7ff ffb7 	bl	80102cc <svCLI_Printf>
      SVCLI_t* pCLIEntry;
      int nCount = 1;
 801035e:	2301      	movs	r3, #1
 8010360:	607b      	str	r3, [r7, #4]
      for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 8010362:	4b20      	ldr	r3, [pc, #128]	; (80103e4 <svCLI_ShowHelp+0xc0>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	60bb      	str	r3, [r7, #8]
 8010368:	e012      	b.n	8010390 <svCLI_ShowHelp+0x6c>
        svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 801036a:	6879      	ldr	r1, [r7, #4]
 801036c:	1c4b      	adds	r3, r1, #1
 801036e:	607b      	str	r3, [r7, #4]
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	681a      	ldr	r2, [r3, #0]
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d002      	beq.n	8010382 <svCLI_ShowHelp+0x5e>
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	685b      	ldr	r3, [r3, #4]
 8010380:	e000      	b.n	8010384 <svCLI_ShowHelp+0x60>
 8010382:	4b1b      	ldr	r3, [pc, #108]	; (80103f0 <svCLI_ShowHelp+0xcc>)
 8010384:	481b      	ldr	r0, [pc, #108]	; (80103f4 <svCLI_ShowHelp+0xd0>)
 8010386:	f7ff ffa1 	bl	80102cc <svCLI_Printf>
      for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	330c      	adds	r3, #12
 801038e:	60bb      	str	r3, [r7, #8]
 8010390:	4b15      	ldr	r3, [pc, #84]	; (80103e8 <svCLI_ShowHelp+0xc4>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	68ba      	ldr	r2, [r7, #8]
 8010396:	429a      	cmp	r2, r3
 8010398:	d3e7      	bcc.n	801036a <svCLI_ShowHelp+0x46>
      }
      svCLI_Printf(AES_RESET);
 801039a:	4817      	ldr	r0, [pc, #92]	; (80103f8 <svCLI_ShowHelp+0xd4>)
 801039c:	f7ff ff96 	bl	80102cc <svCLI_Printf>
      for (unsigned int s=0;s<80;s++) svPutChar('=');
 80103a0:	2300      	movs	r3, #0
 80103a2:	603b      	str	r3, [r7, #0]
 80103a4:	e006      	b.n	80103b4 <svCLI_ShowHelp+0x90>
 80103a6:	4b0e      	ldr	r3, [pc, #56]	; (80103e0 <svCLI_ShowHelp+0xbc>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	203d      	movs	r0, #61	; 0x3d
 80103ac:	4798      	blx	r3
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	3301      	adds	r3, #1
 80103b2:	603b      	str	r3, [r7, #0]
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	2b4f      	cmp	r3, #79	; 0x4f
 80103b8:	d9f5      	bls.n	80103a6 <svCLI_ShowHelp+0x82>
 80103ba:	e002      	b.n	80103c2 <svCLI_ShowHelp+0x9e>
    }
    else {  // No CLI Entry
      svCLI_Printf("No CLI Entries !!!");
 80103bc:	480f      	ldr	r0, [pc, #60]	; (80103fc <svCLI_ShowHelp+0xd8>)
 80103be:	f7ff ff85 	bl	80102cc <svCLI_Printf>
    }
    svCLI_Printf("\r\n");
 80103c2:	480a      	ldr	r0, [pc, #40]	; (80103ec <svCLI_ShowHelp+0xc8>)
 80103c4:	f7ff ff82 	bl	80102cc <svCLI_Printf>
  }
  if (svCommit) {
 80103c8:	4b0d      	ldr	r3, [pc, #52]	; (8010400 <svCLI_ShowHelp+0xdc>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d002      	beq.n	80103d6 <svCLI_ShowHelp+0xb2>
    svCommit();
 80103d0:	4b0b      	ldr	r3, [pc, #44]	; (8010400 <svCLI_ShowHelp+0xdc>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	4798      	blx	r3
  }
}
 80103d6:	bf00      	nop
 80103d8:	3710      	adds	r7, #16
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	bf00      	nop
 80103e0:	2005597c 	.word	0x2005597c
 80103e4:	20055970 	.word	0x20055970
 80103e8:	20055974 	.word	0x20055974
 80103ec:	08025608 	.word	0x08025608
 80103f0:	0802560c 	.word	0x0802560c
 80103f4:	08025610 	.word	0x08025610
 80103f8:	08025630 	.word	0x08025630
 80103fc:	08025638 	.word	0x08025638
 8010400:	20055980 	.word	0x20055980

08010404 <svCLI_KeepLoop>:

// FOR CAN SVCLI
BOOL svCLI_KeepLoop(void)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	af00      	add	r7, sp, #0
  if (Uart_Available(_DEF_UART1) == 0)
 8010408:	2000      	movs	r0, #0
 801040a:	f7f3 fd21 	bl	8003e50 <Uart_Available>
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d101      	bne.n	8010418 <svCLI_KeepLoop+0x14>
  {
    return TRUE;
 8010414:	2301      	movs	r3, #1
 8010416:	e000      	b.n	801041a <svCLI_KeepLoop+0x16>
  }
  else
  {
    return FALSE;
 8010418:	2300      	movs	r3, #0
  }
}
 801041a:	4618      	mov	r0, r3
 801041c:	bd80      	pop	{r7, pc}

0801041e <_strlenOffspace>:

// String length after stripped off space[0x20]
static int _strlenOffspace(const char* szString)
{
 801041e:	b480      	push	{r7}
 8010420:	b085      	sub	sp, #20
 8010422:	af00      	add	r7, sp, #0
 8010424:	6078      	str	r0, [r7, #4]
  int nCount = 0;
 8010426:	2300      	movs	r3, #0
 8010428:	60fb      	str	r3, [r7, #12]
  if ((szString == NULL) || (*szString == 0))
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d003      	beq.n	8010438 <_strlenOffspace+0x1a>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d104      	bne.n	8010442 <_strlenOffspace+0x24>
    return 0;
 8010438:	2300      	movs	r3, #0
 801043a:	e017      	b.n	801046c <_strlenOffspace+0x4e>
  // Strip off first spaces
  while (*szString == ' ') szString++;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	3301      	adds	r3, #1
 8010440:	607b      	str	r3, [r7, #4]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	2b20      	cmp	r3, #32
 8010448:	d0f8      	beq.n	801043c <_strlenOffspace+0x1e>
  // Count
  while (*szString) {
 801044a:	e008      	b.n	801045e <_strlenOffspace+0x40>
    if (*szString++ != ' ') {
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	1c5a      	adds	r2, r3, #1
 8010450:	607a      	str	r2, [r7, #4]
 8010452:	781b      	ldrb	r3, [r3, #0]
 8010454:	2b20      	cmp	r3, #32
 8010456:	d007      	beq.n	8010468 <_strlenOffspace+0x4a>
      nCount++;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	3301      	adds	r3, #1
 801045c:	60fb      	str	r3, [r7, #12]
  while (*szString) {
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d1f2      	bne.n	801044c <_strlenOffspace+0x2e>
 8010466:	e000      	b.n	801046a <_strlenOffspace+0x4c>
    }
    else
      break;
 8010468:	bf00      	nop
  }
  return nCount;
 801046a:	68fb      	ldr	r3, [r7, #12]
}
 801046c:	4618      	mov	r0, r3
 801046e:	3714      	adds	r7, #20
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr

08010478 <_toLower>:

static char _toLower(char c)
{
 8010478:	b480      	push	{r7}
 801047a:	b083      	sub	sp, #12
 801047c:	af00      	add	r7, sp, #0
 801047e:	4603      	mov	r3, r0
 8010480:	71fb      	strb	r3, [r7, #7]
  if ((c >= 'A') && (c <= 'Z')) {
 8010482:	79fb      	ldrb	r3, [r7, #7]
 8010484:	2b40      	cmp	r3, #64	; 0x40
 8010486:	d905      	bls.n	8010494 <_toLower+0x1c>
 8010488:	79fb      	ldrb	r3, [r7, #7]
 801048a:	2b5a      	cmp	r3, #90	; 0x5a
 801048c:	d802      	bhi.n	8010494 <_toLower+0x1c>
    c = (c - 'A') + 'a';
 801048e:	79fb      	ldrb	r3, [r7, #7]
 8010490:	3320      	adds	r3, #32
 8010492:	71fb      	strb	r3, [r7, #7]
  }
  return c;
 8010494:	79fb      	ldrb	r3, [r7, #7]
}
 8010496:	4618      	mov	r0, r3
 8010498:	370c      	adds	r7, #12
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr

080104a2 <_isPrintable>:

static int _isPrintable(char c)
{
 80104a2:	b480      	push	{r7}
 80104a4:	b083      	sub	sp, #12
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	4603      	mov	r3, r0
 80104aa:	71fb      	strb	r3, [r7, #7]
  if ((' ' <= c) && (c <= '~'))
 80104ac:	79fb      	ldrb	r3, [r7, #7]
 80104ae:	2b1f      	cmp	r3, #31
 80104b0:	d904      	bls.n	80104bc <_isPrintable+0x1a>
 80104b2:	79fb      	ldrb	r3, [r7, #7]
 80104b4:	2b7e      	cmp	r3, #126	; 0x7e
 80104b6:	d801      	bhi.n	80104bc <_isPrintable+0x1a>
    return 1;
 80104b8:	2301      	movs	r3, #1
 80104ba:	e000      	b.n	80104be <_isPrintable+0x1c>
  return 0;
 80104bc:	2300      	movs	r3, #0
}
 80104be:	4618      	mov	r0, r3
 80104c0:	370c      	adds	r7, #12
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr

080104ca <_isHex>:

static int _isHex(char c)
{
 80104ca:	b480      	push	{r7}
 80104cc:	b083      	sub	sp, #12
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	4603      	mov	r3, r0
 80104d2:	71fb      	strb	r3, [r7, #7]
  if (((c >= '0') && (c <= '9')) ||       \
 80104d4:	79fb      	ldrb	r3, [r7, #7]
 80104d6:	2b2f      	cmp	r3, #47	; 0x2f
 80104d8:	d902      	bls.n	80104e0 <_isHex+0x16>
 80104da:	79fb      	ldrb	r3, [r7, #7]
 80104dc:	2b39      	cmp	r3, #57	; 0x39
 80104de:	d90b      	bls.n	80104f8 <_isHex+0x2e>
 80104e0:	79fb      	ldrb	r3, [r7, #7]
 80104e2:	2b40      	cmp	r3, #64	; 0x40
 80104e4:	d902      	bls.n	80104ec <_isHex+0x22>
      ((c >= 'A') && (c <= 'F')) ||   \
 80104e6:	79fb      	ldrb	r3, [r7, #7]
 80104e8:	2b46      	cmp	r3, #70	; 0x46
 80104ea:	d905      	bls.n	80104f8 <_isHex+0x2e>
 80104ec:	79fb      	ldrb	r3, [r7, #7]
 80104ee:	2b60      	cmp	r3, #96	; 0x60
 80104f0:	d904      	bls.n	80104fc <_isHex+0x32>
      ((c >= 'a') && (c <= 'f')))
 80104f2:	79fb      	ldrb	r3, [r7, #7]
 80104f4:	2b66      	cmp	r3, #102	; 0x66
 80104f6:	d801      	bhi.n	80104fc <_isHex+0x32>
    return 1;
 80104f8:	2301      	movs	r3, #1
 80104fa:	e000      	b.n	80104fe <_isHex+0x34>
  return 0;
 80104fc:	2300      	movs	r3, #0
}
 80104fe:	4618      	mov	r0, r3
 8010500:	370c      	adds	r7, #12
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr

0801050a <_fromHex>:

static int _fromHex(char c) 
{
 801050a:	b480      	push	{r7}
 801050c:	b085      	sub	sp, #20
 801050e:	af00      	add	r7, sp, #0
 8010510:	4603      	mov	r3, r0
 8010512:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 8010514:	2300      	movs	r3, #0
 8010516:	60fb      	str	r3, [r7, #12]

  if ((c >= '0') && (c <= '9')) {
 8010518:	79fb      	ldrb	r3, [r7, #7]
 801051a:	2b2f      	cmp	r3, #47	; 0x2f
 801051c:	d906      	bls.n	801052c <_fromHex+0x22>
 801051e:	79fb      	ldrb	r3, [r7, #7]
 8010520:	2b39      	cmp	r3, #57	; 0x39
 8010522:	d803      	bhi.n	801052c <_fromHex+0x22>
    ret = (c - '0');
 8010524:	79fb      	ldrb	r3, [r7, #7]
 8010526:	3b30      	subs	r3, #48	; 0x30
 8010528:	60fb      	str	r3, [r7, #12]
 801052a:	e012      	b.n	8010552 <_fromHex+0x48>
  } 
  else if ((c >= 'a') && (c <= 'f')) {
 801052c:	79fb      	ldrb	r3, [r7, #7]
 801052e:	2b60      	cmp	r3, #96	; 0x60
 8010530:	d906      	bls.n	8010540 <_fromHex+0x36>
 8010532:	79fb      	ldrb	r3, [r7, #7]
 8010534:	2b66      	cmp	r3, #102	; 0x66
 8010536:	d803      	bhi.n	8010540 <_fromHex+0x36>
    ret = (c - 'a' + 0x0a);
 8010538:	79fb      	ldrb	r3, [r7, #7]
 801053a:	3b57      	subs	r3, #87	; 0x57
 801053c:	60fb      	str	r3, [r7, #12]
 801053e:	e008      	b.n	8010552 <_fromHex+0x48>
  } 
  else if ((c >= 'A') && (c <= 'F')) {
 8010540:	79fb      	ldrb	r3, [r7, #7]
 8010542:	2b40      	cmp	r3, #64	; 0x40
 8010544:	d905      	bls.n	8010552 <_fromHex+0x48>
 8010546:	79fb      	ldrb	r3, [r7, #7]
 8010548:	2b46      	cmp	r3, #70	; 0x46
 801054a:	d802      	bhi.n	8010552 <_fromHex+0x48>
    ret = (c - 'A' + 0x0A);
 801054c:	79fb      	ldrb	r3, [r7, #7]
 801054e:	3b37      	subs	r3, #55	; 0x37
 8010550:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8010552:	68fb      	ldr	r3, [r7, #12]
}
 8010554:	4618      	mov	r0, r3
 8010556:	3714      	adds	r7, #20
 8010558:	46bd      	mov	sp, r7
 801055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055e:	4770      	bx	lr

08010560 <_strNoCaseCmp>:

static int _strNoCaseCmp(const char *s1, const char *s2, int nLenghth)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b086      	sub	sp, #24
 8010564:	af00      	add	r7, sp, #0
 8010566:	60f8      	str	r0, [r7, #12]
 8010568:	60b9      	str	r1, [r7, #8]
 801056a:	607a      	str	r2, [r7, #4]
  char c1, c2;

  if (nLenghth == 0)
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d101      	bne.n	8010576 <_strNoCaseCmp+0x16>
    return 0;
 8010572:	2300      	movs	r3, #0
 8010574:	e026      	b.n	80105c4 <_strNoCaseCmp+0x64>
  do {
    if ((c1 = _toLower(*s1++)) != (c2 = _toLower(*s2++))) {
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	1c5a      	adds	r2, r3, #1
 801057a:	60fa      	str	r2, [r7, #12]
 801057c:	781b      	ldrb	r3, [r3, #0]
 801057e:	4618      	mov	r0, r3
 8010580:	f7ff ff7a 	bl	8010478 <_toLower>
 8010584:	4603      	mov	r3, r0
 8010586:	75fb      	strb	r3, [r7, #23]
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	1c5a      	adds	r2, r3, #1
 801058c:	60ba      	str	r2, [r7, #8]
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	4618      	mov	r0, r3
 8010592:	f7ff ff71 	bl	8010478 <_toLower>
 8010596:	4603      	mov	r3, r0
 8010598:	75bb      	strb	r3, [r7, #22]
 801059a:	7dfa      	ldrb	r2, [r7, #23]
 801059c:	7dbb      	ldrb	r3, [r7, #22]
 801059e:	429a      	cmp	r2, r3
 80105a0:	d009      	beq.n	80105b6 <_strNoCaseCmp+0x56>
      if ((c1 == 0) || (c2 == 0))
 80105a2:	7dfb      	ldrb	r3, [r7, #23]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d00c      	beq.n	80105c2 <_strNoCaseCmp+0x62>
 80105a8:	7dbb      	ldrb	r3, [r7, #22]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d009      	beq.n	80105c2 <_strNoCaseCmp+0x62>
          break;
      return ((unsigned char)c1 - (unsigned char)c2);
 80105ae:	7dfa      	ldrb	r2, [r7, #23]
 80105b0:	7dbb      	ldrb	r3, [r7, #22]
 80105b2:	1ad3      	subs	r3, r2, r3
 80105b4:	e006      	b.n	80105c4 <_strNoCaseCmp+0x64>
    }
  } while (--nLenghth != 0);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	3b01      	subs	r3, #1
 80105ba:	607b      	str	r3, [r7, #4]
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d1d9      	bne.n	8010576 <_strNoCaseCmp+0x16>
  return 0;
 80105c2:	2300      	movs	r3, #0
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3718      	adds	r7, #24
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <_svMemCpy>:

static void _svMemCpy(char* dst, char *src, int nLength)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b085      	sub	sp, #20
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	60f8      	str	r0, [r7, #12]
 80105d4:	60b9      	str	r1, [r7, #8]
 80105d6:	607a      	str	r2, [r7, #4]
  while (nLength--) {
 80105d8:	e007      	b.n	80105ea <_svMemCpy+0x1e>
    *dst++=*src++;
 80105da:	68ba      	ldr	r2, [r7, #8]
 80105dc:	1c53      	adds	r3, r2, #1
 80105de:	60bb      	str	r3, [r7, #8]
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	1c59      	adds	r1, r3, #1
 80105e4:	60f9      	str	r1, [r7, #12]
 80105e6:	7812      	ldrb	r2, [r2, #0]
 80105e8:	701a      	strb	r2, [r3, #0]
  while (nLength--) {
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	1e5a      	subs	r2, r3, #1
 80105ee:	607a      	str	r2, [r7, #4]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d1f2      	bne.n	80105da <_svMemCpy+0xe>
  }
}
 80105f4:	bf00      	nop
 80105f6:	bf00      	nop
 80105f8:	3714      	adds	r7, #20
 80105fa:	46bd      	mov	sp, r7
 80105fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010600:	4770      	bx	lr
	...

08010604 <_svClearLine>:

static void _svClearLine(void)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
  svPutChar('\r');
 801060a:	4b16      	ldr	r3, [pc, #88]	; (8010664 <_svClearLine+0x60>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	200d      	movs	r0, #13
 8010610:	4798      	blx	r3
  // Remove Strings
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 8010612:	2300      	movs	r3, #0
 8010614:	607b      	str	r3, [r7, #4]
 8010616:	e006      	b.n	8010626 <_svClearLine+0x22>
    svPutChar(' ');
 8010618:	4b12      	ldr	r3, [pc, #72]	; (8010664 <_svClearLine+0x60>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2020      	movs	r0, #32
 801061e:	4798      	blx	r3
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	3301      	adds	r3, #1
 8010624:	607b      	str	r3, [r7, #4]
 8010626:	4b10      	ldr	r3, [pc, #64]	; (8010668 <_svClearLine+0x64>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	4a10      	ldr	r2, [pc, #64]	; (801066c <_svClearLine+0x68>)
 801062c:	6812      	ldr	r2, [r2, #0]
 801062e:	441a      	add	r2, r3
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	429a      	cmp	r2, r3
 8010634:	d8f0      	bhi.n	8010618 <_svClearLine+0x14>
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 8010636:	2300      	movs	r3, #0
 8010638:	603b      	str	r3, [r7, #0]
 801063a:	e006      	b.n	801064a <_svClearLine+0x46>
    svPutChar('\b');
 801063c:	4b09      	ldr	r3, [pc, #36]	; (8010664 <_svClearLine+0x60>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	2008      	movs	r0, #8
 8010642:	4798      	blx	r3
  for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	3301      	adds	r3, #1
 8010648:	603b      	str	r3, [r7, #0]
 801064a:	4b07      	ldr	r3, [pc, #28]	; (8010668 <_svClearLine+0x64>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	4a07      	ldr	r2, [pc, #28]	; (801066c <_svClearLine+0x68>)
 8010650:	6812      	ldr	r2, [r2, #0]
 8010652:	441a      	add	r2, r3
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	429a      	cmp	r2, r3
 8010658:	d8f0      	bhi.n	801063c <_svClearLine+0x38>
}
 801065a:	bf00      	nop
 801065c:	bf00      	nop
 801065e:	3708      	adds	r7, #8
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}
 8010664:	2005597c 	.word	0x2005597c
 8010668:	2005596c 	.word	0x2005596c
 801066c:	20050074 	.word	0x20050074

08010670 <svCLIHandleHistory>:

static void svCLIHandleHistory(CLI_HISTORY_CMD_e eHistoryCmd)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b084      	sub	sp, #16
 8010674:	af00      	add	r7, sp, #0
 8010676:	4603      	mov	r3, r0
 8010678:	71fb      	strb	r3, [r7, #7]
  switch (eHistoryCmd) {
 801067a:	79fb      	ldrb	r3, [r7, #7]
 801067c:	2b02      	cmp	r3, #2
 801067e:	d03f      	beq.n	8010700 <svCLIHandleHistory+0x90>
 8010680:	2b02      	cmp	r3, #2
 8010682:	dc6f      	bgt.n	8010764 <svCLIHandleHistory+0xf4>
 8010684:	2b00      	cmp	r3, #0
 8010686:	d002      	beq.n	801068e <svCLIHandleHistory+0x1e>
 8010688:	2b01      	cmp	r3, #1
 801068a:	d052      	beq.n	8010732 <svCLIHandleHistory+0xc2>
      if (snCLIHistoryPos >= snCLIHistoryCount)
        snCLIHistoryPos = 0;
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
      break;
    default:
      break;
 801068c:	e06a      	b.n	8010764 <svCLIHandleHistory+0xf4>
      if (snCLIHistoryCount == MAX_CLI_HISTORY_BUFF_MAX) {  // Full
 801068e:	4b38      	ldr	r3, [pc, #224]	; (8010770 <svCLIHandleHistory+0x100>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	2b03      	cmp	r3, #3
 8010694:	d11c      	bne.n	80106d0 <svCLIHandleHistory+0x60>
        for (int i=1;i<snCLIHistoryCount;i++) {
 8010696:	2301      	movs	r3, #1
 8010698:	60fb      	str	r3, [r7, #12]
 801069a:	e00f      	b.n	80106bc <svCLIHandleHistory+0x4c>
          _svMemCpy(&szCLIHistoryBuffer[i-1][0],&szCLIHistoryBuffer[i][0],MAX_CLI_CHARS);
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	3b01      	subs	r3, #1
 80106a0:	01db      	lsls	r3, r3, #7
 80106a2:	4a34      	ldr	r2, [pc, #208]	; (8010774 <svCLIHandleHistory+0x104>)
 80106a4:	1898      	adds	r0, r3, r2
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	01db      	lsls	r3, r3, #7
 80106aa:	4a32      	ldr	r2, [pc, #200]	; (8010774 <svCLIHandleHistory+0x104>)
 80106ac:	4413      	add	r3, r2
 80106ae:	2280      	movs	r2, #128	; 0x80
 80106b0:	4619      	mov	r1, r3
 80106b2:	f7ff ff8b 	bl	80105cc <_svMemCpy>
        for (int i=1;i<snCLIHistoryCount;i++) {
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	3301      	adds	r3, #1
 80106ba:	60fb      	str	r3, [r7, #12]
 80106bc:	4b2c      	ldr	r3, [pc, #176]	; (8010770 <svCLIHandleHistory+0x100>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	68fa      	ldr	r2, [r7, #12]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	dbea      	blt.n	801069c <svCLIHandleHistory+0x2c>
        snCLIHistoryCount--;
 80106c6:	4b2a      	ldr	r3, [pc, #168]	; (8010770 <svCLIHandleHistory+0x100>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	3b01      	subs	r3, #1
 80106cc:	4a28      	ldr	r2, [pc, #160]	; (8010770 <svCLIHandleHistory+0x100>)
 80106ce:	6013      	str	r3, [r2, #0]
      _svMemCpy(&szCLIHistoryBuffer[snCLIHistoryCount][0], &szCLIString[0],MAX_CLI_CHARS);
 80106d0:	4b27      	ldr	r3, [pc, #156]	; (8010770 <svCLIHandleHistory+0x100>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	01db      	lsls	r3, r3, #7
 80106d6:	4a27      	ldr	r2, [pc, #156]	; (8010774 <svCLIHandleHistory+0x104>)
 80106d8:	4413      	add	r3, r2
 80106da:	2280      	movs	r2, #128	; 0x80
 80106dc:	4926      	ldr	r1, [pc, #152]	; (8010778 <svCLIHandleHistory+0x108>)
 80106de:	4618      	mov	r0, r3
 80106e0:	f7ff ff74 	bl	80105cc <_svMemCpy>
      if (snCLIHistoryCount < MAX_CLI_HISTORY_BUFF_MAX)
 80106e4:	4b22      	ldr	r3, [pc, #136]	; (8010770 <svCLIHandleHistory+0x100>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2b02      	cmp	r3, #2
 80106ea:	dc04      	bgt.n	80106f6 <svCLIHandleHistory+0x86>
        snCLIHistoryCount++;
 80106ec:	4b20      	ldr	r3, [pc, #128]	; (8010770 <svCLIHandleHistory+0x100>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	3301      	adds	r3, #1
 80106f2:	4a1f      	ldr	r2, [pc, #124]	; (8010770 <svCLIHandleHistory+0x100>)
 80106f4:	6013      	str	r3, [r2, #0]
      snCLIHistoryPos = snCLIHistoryCount;
 80106f6:	4b1e      	ldr	r3, [pc, #120]	; (8010770 <svCLIHandleHistory+0x100>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	4a20      	ldr	r2, [pc, #128]	; (801077c <svCLIHandleHistory+0x10c>)
 80106fc:	6013      	str	r3, [r2, #0]
      break;
 80106fe:	e032      	b.n	8010766 <svCLIHandleHistory+0xf6>
      snCLIHistoryPos--;
 8010700:	4b1e      	ldr	r3, [pc, #120]	; (801077c <svCLIHandleHistory+0x10c>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	3b01      	subs	r3, #1
 8010706:	4a1d      	ldr	r2, [pc, #116]	; (801077c <svCLIHandleHistory+0x10c>)
 8010708:	6013      	str	r3, [r2, #0]
      if (snCLIHistoryPos < 0)
 801070a:	4b1c      	ldr	r3, [pc, #112]	; (801077c <svCLIHandleHistory+0x10c>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	2b00      	cmp	r3, #0
 8010710:	da04      	bge.n	801071c <svCLIHandleHistory+0xac>
        snCLIHistoryPos = snCLIHistoryCount - 1;
 8010712:	4b17      	ldr	r3, [pc, #92]	; (8010770 <svCLIHandleHistory+0x100>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	3b01      	subs	r3, #1
 8010718:	4a18      	ldr	r2, [pc, #96]	; (801077c <svCLIHandleHistory+0x10c>)
 801071a:	6013      	str	r3, [r2, #0]
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 801071c:	4b17      	ldr	r3, [pc, #92]	; (801077c <svCLIHandleHistory+0x10c>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	01db      	lsls	r3, r3, #7
 8010722:	4a14      	ldr	r2, [pc, #80]	; (8010774 <svCLIHandleHistory+0x104>)
 8010724:	4413      	add	r3, r2
 8010726:	2280      	movs	r2, #128	; 0x80
 8010728:	4619      	mov	r1, r3
 801072a:	4813      	ldr	r0, [pc, #76]	; (8010778 <svCLIHandleHistory+0x108>)
 801072c:	f7ff ff4e 	bl	80105cc <_svMemCpy>
      break;
 8010730:	e019      	b.n	8010766 <svCLIHandleHistory+0xf6>
      snCLIHistoryPos++;
 8010732:	4b12      	ldr	r3, [pc, #72]	; (801077c <svCLIHandleHistory+0x10c>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	3301      	adds	r3, #1
 8010738:	4a10      	ldr	r2, [pc, #64]	; (801077c <svCLIHandleHistory+0x10c>)
 801073a:	6013      	str	r3, [r2, #0]
      if (snCLIHistoryPos >= snCLIHistoryCount)
 801073c:	4b0f      	ldr	r3, [pc, #60]	; (801077c <svCLIHandleHistory+0x10c>)
 801073e:	681a      	ldr	r2, [r3, #0]
 8010740:	4b0b      	ldr	r3, [pc, #44]	; (8010770 <svCLIHandleHistory+0x100>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	429a      	cmp	r2, r3
 8010746:	db02      	blt.n	801074e <svCLIHandleHistory+0xde>
        snCLIHistoryPos = 0;
 8010748:	4b0c      	ldr	r3, [pc, #48]	; (801077c <svCLIHandleHistory+0x10c>)
 801074a:	2200      	movs	r2, #0
 801074c:	601a      	str	r2, [r3, #0]
      _svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 801074e:	4b0b      	ldr	r3, [pc, #44]	; (801077c <svCLIHandleHistory+0x10c>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	01db      	lsls	r3, r3, #7
 8010754:	4a07      	ldr	r2, [pc, #28]	; (8010774 <svCLIHandleHistory+0x104>)
 8010756:	4413      	add	r3, r2
 8010758:	2280      	movs	r2, #128	; 0x80
 801075a:	4619      	mov	r1, r3
 801075c:	4806      	ldr	r0, [pc, #24]	; (8010778 <svCLIHandleHistory+0x108>)
 801075e:	f7ff ff35 	bl	80105cc <_svMemCpy>
      break;
 8010762:	e000      	b.n	8010766 <svCLIHandleHistory+0xf6>
      break;
 8010764:	bf00      	nop
  }
}
 8010766:	bf00      	nop
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	20055964 	.word	0x20055964
 8010774:	200557e4 	.word	0x200557e4
 8010778:	20055764 	.word	0x20055764
 801077c:	20055968 	.word	0x20055968

08010780 <svCLI_Search>:

static SVCLI_t* svCLI_Search(char **line)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b086      	sub	sp, #24
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  SVCLI_t* pCLIEntry;
  char* pCurrent = *line;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	613b      	str	r3, [r7, #16]
  // strip off leading spaces
  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 801078e:	e002      	b.n	8010796 <svCLI_Search+0x16>
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	3301      	adds	r3, #1
 8010794:	613b      	str	r3, [r7, #16]
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d003      	beq.n	80107a6 <svCLI_Search+0x26>
 801079e:	693b      	ldr	r3, [r7, #16]
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	2b20      	cmp	r3, #32
 80107a4:	d0f4      	beq.n	8010790 <svCLI_Search+0x10>
  for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 80107a6:	4b22      	ldr	r3, [pc, #136]	; (8010830 <svCLI_Search+0xb0>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	617b      	str	r3, [r7, #20]
 80107ac:	e035      	b.n	801081a <svCLI_Search+0x9a>
    int nCmdLength = _strlenOffspace(pCLIEntry->szCmd);
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7ff fe33 	bl	801041e <_strlenOffspace>
 80107b8:	60f8      	str	r0, [r7, #12]
    int nArgLength = _strlenOffspace(pCurrent);
 80107ba:	6938      	ldr	r0, [r7, #16]
 80107bc:	f7ff fe2f 	bl	801041e <_strlenOffspace>
 80107c0:	60b8      	str	r0, [r7, #8]
    pCurrent[nArgLength] = 0; // NULL termination just after command for comparing
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	693a      	ldr	r2, [r7, #16]
 80107c6:	4413      	add	r3, r2
 80107c8:	2200      	movs	r2, #0
 80107ca:	701a      	strb	r2, [r3, #0]
    if (nCmdLength >= nArgLength) {
 80107cc:	68fa      	ldr	r2, [r7, #12]
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	429a      	cmp	r2, r3
 80107d2:	db1f      	blt.n	8010814 <svCLI_Search+0x94>
      if (_strNoCaseCmp(pCurrent, pCLIEntry->szCmd, nCmdLength) == 0) { // Partial Command OK !!
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	68fa      	ldr	r2, [r7, #12]
 80107da:	4619      	mov	r1, r3
 80107dc:	6938      	ldr	r0, [r7, #16]
 80107de:	f7ff febf 	bl	8010560 <_strNoCaseCmp>
 80107e2:	4603      	mov	r3, r0
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d115      	bne.n	8010814 <svCLI_Search+0x94>
        pCurrent += (nArgLength + 1);
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	3301      	adds	r3, #1
 80107ec:	693a      	ldr	r2, [r7, #16]
 80107ee:	4413      	add	r3, r2
 80107f0:	613b      	str	r3, [r7, #16]
        // strip off trailing spaces
        while (*pCurrent && *pCurrent == ' ') pCurrent++;
 80107f2:	e002      	b.n	80107fa <svCLI_Search+0x7a>
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	3301      	adds	r3, #1
 80107f8:	613b      	str	r3, [r7, #16]
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	781b      	ldrb	r3, [r3, #0]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d003      	beq.n	801080a <svCLI_Search+0x8a>
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	2b20      	cmp	r3, #32
 8010808:	d0f4      	beq.n	80107f4 <svCLI_Search+0x74>
        *line = pCurrent;   // remove command & return
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	693a      	ldr	r2, [r7, #16]
 801080e:	601a      	str	r2, [r3, #0]

        return pCLIEntry;
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	e008      	b.n	8010826 <svCLI_Search+0xa6>
  for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	330c      	adds	r3, #12
 8010818:	617b      	str	r3, [r7, #20]
 801081a:	4b06      	ldr	r3, [pc, #24]	; (8010834 <svCLI_Search+0xb4>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	697a      	ldr	r2, [r7, #20]
 8010820:	429a      	cmp	r2, r3
 8010822:	d3c4      	bcc.n	80107ae <svCLI_Search+0x2e>
      }
    }
  }
  return NULL;
 8010824:	2300      	movs	r3, #0
}
 8010826:	4618      	mov	r0, r3
 8010828:	3718      	adds	r7, #24
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	20055970 	.word	0x20055970
 8010834:	20055974 	.word	0x20055974

08010838 <svCLI_ParseNumber>:

int svCLI_ParseNumber(char *s, unsigned int *val, char **res, char *delimiter)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b08a      	sub	sp, #40	; 0x28
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	607a      	str	r2, [r7, #4]
 8010844:	603b      	str	r3, [r7, #0]
  int first = 1;
 8010846:	2301      	movs	r3, #1
 8010848:	627b      	str	r3, [r7, #36]	; 0x24
  int radix = 10;
 801084a:	230a      	movs	r3, #10
 801084c:	623b      	str	r3, [r7, #32]
  char c;
  unsigned long result = 0;
 801084e:	2300      	movs	r3, #0
 8010850:	61fb      	str	r3, [r7, #28]
  int digit;
    // strip off leading spaces
    while (*s == ' ') s++;
 8010852:	e002      	b.n	801085a <svCLI_ParseNumber+0x22>
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	3301      	adds	r3, #1
 8010858:	60fb      	str	r3, [r7, #12]
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	781b      	ldrb	r3, [r3, #0]
 801085e:	2b20      	cmp	r3, #32
 8010860:	d0f8      	beq.n	8010854 <svCLI_ParseNumber+0x1c>
    if (*s == 0)
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	781b      	ldrb	r3, [r3, #0]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d14d      	bne.n	8010906 <svCLI_ParseNumber+0xce>
      return 0;
 801086a:	2300      	movs	r3, #0
 801086c:	e05b      	b.n	8010926 <svCLI_ParseNumber+0xee>
    while (*s) {
      if (first && (s[0] == '0') && (_toLower(s[1]) == 'x')) {
 801086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010870:	2b00      	cmp	r3, #0
 8010872:	d011      	beq.n	8010898 <svCLI_ParseNumber+0x60>
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	2b30      	cmp	r3, #48	; 0x30
 801087a:	d10d      	bne.n	8010898 <svCLI_ParseNumber+0x60>
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	3301      	adds	r3, #1
 8010880:	781b      	ldrb	r3, [r3, #0]
 8010882:	4618      	mov	r0, r3
 8010884:	f7ff fdf8 	bl	8010478 <_toLower>
 8010888:	4603      	mov	r3, r0
 801088a:	2b78      	cmp	r3, #120	; 0x78
 801088c:	d104      	bne.n	8010898 <svCLI_ParseNumber+0x60>
        radix = 16;
 801088e:	2310      	movs	r3, #16
 8010890:	623b      	str	r3, [r7, #32]
        s += 2;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	3302      	adds	r3, #2
 8010896:	60fb      	str	r3, [r7, #12]
      }
      first = 0;
 8010898:	2300      	movs	r3, #0
 801089a:	627b      	str	r3, [r7, #36]	; 0x24
      c = *s++;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	1c5a      	adds	r2, r3, #1
 80108a0:	60fa      	str	r2, [r7, #12]
 80108a2:	781b      	ldrb	r3, [r3, #0]
 80108a4:	75fb      	strb	r3, [r7, #23]
      if (_isHex(c) && ((digit = _fromHex(c)) < radix)) {
 80108a6:	7dfb      	ldrb	r3, [r7, #23]
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7ff fe0e 	bl	80104ca <_isHex>
 80108ae:	4603      	mov	r3, r0
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d010      	beq.n	80108d6 <svCLI_ParseNumber+0x9e>
 80108b4:	7dfb      	ldrb	r3, [r7, #23]
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7ff fe27 	bl	801050a <_fromHex>
 80108bc:	6138      	str	r0, [r7, #16]
 80108be:	693a      	ldr	r2, [r7, #16]
 80108c0:	6a3b      	ldr	r3, [r7, #32]
 80108c2:	429a      	cmp	r2, r3
 80108c4:	da07      	bge.n	80108d6 <svCLI_ParseNumber+0x9e>
        // Valid digit
        result = (result * radix) + digit;
 80108c6:	6a3b      	ldr	r3, [r7, #32]
 80108c8:	69fa      	ldr	r2, [r7, #28]
 80108ca:	fb03 f202 	mul.w	r2, r3, r2
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	4413      	add	r3, r2
 80108d2:	61fb      	str	r3, [r7, #28]
 80108d4:	e017      	b.n	8010906 <svCLI_ParseNumber+0xce>
      } 
      else {
        if (delimiter != (char *)0) {
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d012      	beq.n	8010902 <svCLI_ParseNumber+0xca>
          // See if this character is one of the delimiters
          char *dp = delimiter;
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	61bb      	str	r3, [r7, #24]
          while (*dp && (c != *dp)) dp++;
 80108e0:	e002      	b.n	80108e8 <svCLI_ParseNumber+0xb0>
 80108e2:	69bb      	ldr	r3, [r7, #24]
 80108e4:	3301      	adds	r3, #1
 80108e6:	61bb      	str	r3, [r7, #24]
 80108e8:	69bb      	ldr	r3, [r7, #24]
 80108ea:	781b      	ldrb	r3, [r3, #0]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d004      	beq.n	80108fa <svCLI_ParseNumber+0xc2>
 80108f0:	69bb      	ldr	r3, [r7, #24]
 80108f2:	781b      	ldrb	r3, [r3, #0]
 80108f4:	7dfa      	ldrb	r2, [r7, #23]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d1f3      	bne.n	80108e2 <svCLI_ParseNumber+0xaa>
          if (*dp) break;  // Found a good delimiter
 80108fa:	69bb      	ldr	r3, [r7, #24]
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d106      	bne.n	8010910 <svCLI_ParseNumber+0xd8>
        }
        return 0;  // invalid number
 8010902:	2300      	movs	r3, #0
 8010904:	e00f      	b.n	8010926 <svCLI_ParseNumber+0xee>
    while (*s) {
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d1af      	bne.n	801086e <svCLI_ParseNumber+0x36>
 801090e:	e000      	b.n	8010912 <svCLI_ParseNumber+0xda>
          if (*dp) break;  // Found a good delimiter
 8010910:	bf00      	nop
      }
    }
    *val = result;
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	69fa      	ldr	r2, [r7, #28]
 8010916:	601a      	str	r2, [r3, #0]
    if (res != (char **)0) {
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d002      	beq.n	8010924 <svCLI_ParseNumber+0xec>
      *res = s;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	68fa      	ldr	r2, [r7, #12]
 8010922:	601a      	str	r2, [r3, #0]
    }
    return 1;
 8010924:	2301      	movs	r3, #1
}
 8010926:	4618      	mov	r0, r3
 8010928:	3728      	adds	r7, #40	; 0x28
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}
	...

08010930 <svCLI_ParsenExecute>:

static void svCLI_ParsenExecute()
{
 8010930:	b590      	push	{r4, r7, lr}
 8010932:	b089      	sub	sp, #36	; 0x24
 8010934:	af00      	add	r7, sp, #0
  if (s_bPwdOK == FALSE) {  // Input Password
 8010936:	4b3a      	ldr	r3, [pc, #232]	; (8010a20 <svCLI_ParsenExecute+0xf0>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d120      	bne.n	8010980 <svCLI_ParsenExecute+0x50>
    if (strcmp(szCLIString, DEFAULT_PASSWORD) == 0) {
 801093e:	4939      	ldr	r1, [pc, #228]	; (8010a24 <svCLI_ParsenExecute+0xf4>)
 8010940:	4839      	ldr	r0, [pc, #228]	; (8010a28 <svCLI_ParsenExecute+0xf8>)
 8010942:	f7ef fca5 	bl	8000290 <strcmp>
 8010946:	4603      	mov	r3, r0
 8010948:	2b00      	cmp	r3, #0
 801094a:	d115      	bne.n	8010978 <svCLI_ParsenExecute+0x48>
      s_bPwdOK = TRUE;
 801094c:	4b34      	ldr	r3, [pc, #208]	; (8010a20 <svCLI_ParsenExecute+0xf0>)
 801094e:	2201      	movs	r2, #1
 8010950:	601a      	str	r2, [r3, #0]
      svCLI_Printf("Welcome !!\r\n");
 8010952:	4836      	ldr	r0, [pc, #216]	; (8010a2c <svCLI_ParsenExecute+0xfc>)
 8010954:	f7ff fcba 	bl	80102cc <svCLI_Printf>
      strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 8010958:	4b35      	ldr	r3, [pc, #212]	; (8010a30 <svCLI_ParsenExecute+0x100>)
 801095a:	4a36      	ldr	r2, [pc, #216]	; (8010a34 <svCLI_ParsenExecute+0x104>)
 801095c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010960:	6018      	str	r0, [r3, #0]
 8010962:	3304      	adds	r3, #4
 8010964:	8019      	strh	r1, [r3, #0]
 8010966:	3302      	adds	r3, #2
 8010968:	0c0a      	lsrs	r2, r1, #16
 801096a:	701a      	strb	r2, [r3, #0]
      snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 801096c:	4b32      	ldr	r3, [pc, #200]	; (8010a38 <svCLI_ParsenExecute+0x108>)
 801096e:	2206      	movs	r2, #6
 8010970:	601a      	str	r2, [r3, #0]
      svCLI_ShowHelp();
 8010972:	f7ff fcd7 	bl	8010324 <svCLI_ShowHelp>
    }
    else {
      svCLI_Printf("Invalid Password !!\r\n");
    }
    return;
 8010976:	e04f      	b.n	8010a18 <svCLI_ParsenExecute+0xe8>
      svCLI_Printf("Invalid Password !!\r\n");
 8010978:	4830      	ldr	r0, [pc, #192]	; (8010a3c <svCLI_ParsenExecute+0x10c>)
 801097a:	f7ff fca7 	bl	80102cc <svCLI_Printf>
    return;
 801097e:	e04b      	b.n	8010a18 <svCLI_ParsenExecute+0xe8>
  }
  SVCLI_t* pCLIEntry;
  if (sCLITableBegin == sCLITablEnd) {
 8010980:	4b2f      	ldr	r3, [pc, #188]	; (8010a40 <svCLI_ParsenExecute+0x110>)
 8010982:	681a      	ldr	r2, [r3, #0]
 8010984:	4b2f      	ldr	r3, [pc, #188]	; (8010a44 <svCLI_ParsenExecute+0x114>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	429a      	cmp	r2, r3
 801098a:	d103      	bne.n	8010994 <svCLI_ParsenExecute+0x64>
    svCLI_Printf("No CLI Entries !!!\r\n");
 801098c:	482e      	ldr	r0, [pc, #184]	; (8010a48 <svCLI_ParsenExecute+0x118>)
 801098e:	f7ff fc9d 	bl	80102cc <svCLI_Printf>
    return;
 8010992:	e041      	b.n	8010a18 <svCLI_ParsenExecute+0xe8>
  }
  char* pLine = szCLIString;
 8010994:	4b24      	ldr	r3, [pc, #144]	; (8010a28 <svCLI_ParsenExecute+0xf8>)
 8010996:	613b      	str	r3, [r7, #16]
  pCLIEntry = svCLI_Search(&pLine);
 8010998:	f107 0310 	add.w	r3, r7, #16
 801099c:	4618      	mov	r0, r3
 801099e:	f7ff feef 	bl	8010780 <svCLI_Search>
 80109a2:	61b8      	str	r0, [r7, #24]
  if (pCLIEntry) {
 80109a4:	69bb      	ldr	r3, [r7, #24]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d033      	beq.n	8010a12 <svCLI_ParsenExecute+0xe2>
    // Parse more for CLI function
    unsigned int nFirst, nSecond, nCount;
    nCount = 0;
 80109aa:	2300      	movs	r3, #0
 80109ac:	61fb      	str	r3, [r7, #28]
    nFirst = 0;
 80109ae:	2300      	movs	r3, #0
 80109b0:	60fb      	str	r3, [r7, #12]
    nSecond = 0;
 80109b2:	2300      	movs	r3, #0
 80109b4:	60bb      	str	r3, [r7, #8]
    char* pParseLine = pLine;
 80109b6:	693b      	ldr	r3, [r7, #16]
 80109b8:	617b      	str	r3, [r7, #20]
    char delim[3] = ", ";
 80109ba:	4a24      	ldr	r2, [pc, #144]	; (8010a4c <svCLI_ParsenExecute+0x11c>)
 80109bc:	1d3b      	adds	r3, r7, #4
 80109be:	6812      	ldr	r2, [r2, #0]
 80109c0:	4611      	mov	r1, r2
 80109c2:	8019      	strh	r1, [r3, #0]
 80109c4:	3302      	adds	r3, #2
 80109c6:	0c12      	lsrs	r2, r2, #16
 80109c8:	701a      	strb	r2, [r3, #0]
    if (svCLI_ParseNumber(pLine, &nFirst, &pLine, delim)) {
 80109ca:	6938      	ldr	r0, [r7, #16]
 80109cc:	1d3b      	adds	r3, r7, #4
 80109ce:	f107 0210 	add.w	r2, r7, #16
 80109d2:	f107 010c 	add.w	r1, r7, #12
 80109d6:	f7ff ff2f 	bl	8010838 <svCLI_ParseNumber>
 80109da:	4603      	mov	r3, r0
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d010      	beq.n	8010a02 <svCLI_ParsenExecute+0xd2>
      nCount++;
 80109e0:	69fb      	ldr	r3, [r7, #28]
 80109e2:	3301      	adds	r3, #1
 80109e4:	61fb      	str	r3, [r7, #28]
      if (svCLI_ParseNumber(pLine, &nSecond, &pLine, delim)) {
 80109e6:	6938      	ldr	r0, [r7, #16]
 80109e8:	1d3b      	adds	r3, r7, #4
 80109ea:	f107 0210 	add.w	r2, r7, #16
 80109ee:	f107 0108 	add.w	r1, r7, #8
 80109f2:	f7ff ff21 	bl	8010838 <svCLI_ParseNumber>
 80109f6:	4603      	mov	r3, r0
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d002      	beq.n	8010a02 <svCLI_ParsenExecute+0xd2>
        nCount++;
 80109fc:	69fb      	ldr	r3, [r7, #28]
 80109fe:	3301      	adds	r3, #1
 8010a00:	61fb      	str	r3, [r7, #28]
      }
    }
    pCLIEntry->func(pParseLine,nCount,nFirst,nSecond);
 8010a02:	69bb      	ldr	r3, [r7, #24]
 8010a04:	689c      	ldr	r4, [r3, #8]
 8010a06:	68fa      	ldr	r2, [r7, #12]
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	69f9      	ldr	r1, [r7, #28]
 8010a0c:	6978      	ldr	r0, [r7, #20]
 8010a0e:	47a0      	blx	r4
 8010a10:	e002      	b.n	8010a18 <svCLI_ParsenExecute+0xe8>
  }
  else {
    svCLI_Printf("CLI command Not Found !! - Press Help\r\n");
 8010a12:	480f      	ldr	r0, [pc, #60]	; (8010a50 <svCLI_ParsenExecute+0x120>)
 8010a14:	f7ff fc5a 	bl	80102cc <svCLI_Printf>
  }
}
 8010a18:	3724      	adds	r7, #36	; 0x24
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd90      	pop	{r4, r7, pc}
 8010a1e:	bf00      	nop
 8010a20:	20050064 	.word	0x20050064
 8010a24:	0802564c 	.word	0x0802564c
 8010a28:	20055764 	.word	0x20055764
 8010a2c:	08025658 	.word	0x08025658
 8010a30:	20050068 	.word	0x20050068
 8010a34:	080255f4 	.word	0x080255f4
 8010a38:	20050074 	.word	0x20050074
 8010a3c:	08025668 	.word	0x08025668
 8010a40:	20055970 	.word	0x20055970
 8010a44:	20055974 	.word	0x20055974
 8010a48:	08025680 	.word	0x08025680
 8010a4c:	080256c0 	.word	0x080256c0
 8010a50:	08025698 	.word	0x08025698

08010a54 <svCLI_SetBypassFtn>:

// hellosmk 210225 added
void svCLI_SetBypassFtn(SVCLI_BYPASS_FUNC pfnBypass, char* szPrompt, char szExit, BOOL bEnter)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b086      	sub	sp, #24
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	60f8      	str	r0, [r7, #12]
 8010a5c:	60b9      	str	r1, [r7, #8]
 8010a5e:	603b      	str	r3, [r7, #0]
 8010a60:	4613      	mov	r3, r2
 8010a62:	71fb      	strb	r3, [r7, #7]
  if ((pfnBypass == NULL) || (szPrompt == NULL) || (szExit == NULL)) {
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d005      	beq.n	8010a76 <svCLI_SetBypassFtn+0x22>
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d002      	beq.n	8010a76 <svCLI_SetBypassFtn+0x22>
 8010a70:	79fb      	ldrb	r3, [r7, #7]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d136      	bne.n	8010ae4 <svCLI_SetBypassFtn+0x90>
    if (svBypass == NULL) {
 8010a76:	4b28      	ldr	r3, [pc, #160]	; (8010b18 <svCLI_SetBypassFtn+0xc4>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d048      	beq.n	8010b10 <svCLI_SetBypassFtn+0xbc>
      // Nothing to do..
      return;
    }
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 8010a7e:	4b27      	ldr	r3, [pc, #156]	; (8010b1c <svCLI_SetBypassFtn+0xc8>)
 8010a80:	4a27      	ldr	r2, [pc, #156]	; (8010b20 <svCLI_SetBypassFtn+0xcc>)
 8010a82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a86:	6018      	str	r0, [r3, #0]
 8010a88:	3304      	adds	r3, #4
 8010a8a:	8019      	strh	r1, [r3, #0]
 8010a8c:	3302      	adds	r3, #2
 8010a8e:	0c0a      	lsrs	r2, r1, #16
 8010a90:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 8010a92:	4b24      	ldr	r3, [pc, #144]	; (8010b24 <svCLI_SetBypassFtn+0xd0>)
 8010a94:	2206      	movs	r2, #6
 8010a96:	601a      	str	r2, [r3, #0]
    svBypass = NULL;
 8010a98:	4b1f      	ldr	r3, [pc, #124]	; (8010b18 <svCLI_SetBypassFtn+0xc4>)
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	601a      	str	r2, [r3, #0]

    svExit = NULL;
 8010a9e:	4b22      	ldr	r3, [pc, #136]	; (8010b28 <svCLI_SetBypassFtn+0xd4>)
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	701a      	strb	r2, [r3, #0]
    sbEnter = FALSE;
 8010aa4:	4b21      	ldr	r3, [pc, #132]	; (8010b2c <svCLI_SetBypassFtn+0xd8>)
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	601a      	str	r2, [r3, #0]

    scntCLIString = 0;  // Clean Up Char
 8010aaa:	4b21      	ldr	r3, [pc, #132]	; (8010b30 <svCLI_SetBypassFtn+0xdc>)
 8010aac:	2200      	movs	r2, #0
 8010aae:	601a      	str	r2, [r3, #0]
    // clean up line string
    for (int i=0;i<MAX_CLI_CHARS;i++) {
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	617b      	str	r3, [r7, #20]
 8010ab4:	e007      	b.n	8010ac6 <svCLI_SetBypassFtn+0x72>
      szCLIString[i] = '\0';
 8010ab6:	4a1f      	ldr	r2, [pc, #124]	; (8010b34 <svCLI_SetBypassFtn+0xe0>)
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	4413      	add	r3, r2
 8010abc:	2200      	movs	r2, #0
 8010abe:	701a      	strb	r2, [r3, #0]
    for (int i=0;i<MAX_CLI_CHARS;i++) {
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	617b      	str	r3, [r7, #20]
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8010aca:	ddf4      	ble.n	8010ab6 <svCLI_SetBypassFtn+0x62>
    }
    svCLI_Printf("\r\nExit Bypass Mode\r\n%s", szCLI_PROMPT);
 8010acc:	4913      	ldr	r1, [pc, #76]	; (8010b1c <svCLI_SetBypassFtn+0xc8>)
 8010ace:	481a      	ldr	r0, [pc, #104]	; (8010b38 <svCLI_SetBypassFtn+0xe4>)
 8010ad0:	f7ff fbfc 	bl	80102cc <svCLI_Printf>

    if (svCommit) {
 8010ad4:	4b19      	ldr	r3, [pc, #100]	; (8010b3c <svCLI_SetBypassFtn+0xe8>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d01a      	beq.n	8010b12 <svCLI_SetBypassFtn+0xbe>
      svCommit();
 8010adc:	4b17      	ldr	r3, [pc, #92]	; (8010b3c <svCLI_SetBypassFtn+0xe8>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4798      	blx	r3
    if (svCommit) {
 8010ae2:	e016      	b.n	8010b12 <svCLI_SetBypassFtn+0xbe>
    }
  }
  else {
    strncpy(szCLI_PROMPT, szPrompt, sizeof(szCLI_PROMPT) - 1);
 8010ae4:	2209      	movs	r2, #9
 8010ae6:	68b9      	ldr	r1, [r7, #8]
 8010ae8:	480c      	ldr	r0, [pc, #48]	; (8010b1c <svCLI_SetBypassFtn+0xc8>)
 8010aea:	f013 fc47 	bl	802437c <strncpy>
    snCLI_PROMPT_LENGTH = strlen(szCLI_PROMPT);
 8010aee:	480b      	ldr	r0, [pc, #44]	; (8010b1c <svCLI_SetBypassFtn+0xc8>)
 8010af0:	f7ef fbd8 	bl	80002a4 <strlen>
 8010af4:	4603      	mov	r3, r0
 8010af6:	461a      	mov	r2, r3
 8010af8:	4b0a      	ldr	r3, [pc, #40]	; (8010b24 <svCLI_SetBypassFtn+0xd0>)
 8010afa:	601a      	str	r2, [r3, #0]
    svBypass = pfnBypass;
 8010afc:	4a06      	ldr	r2, [pc, #24]	; (8010b18 <svCLI_SetBypassFtn+0xc4>)
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	6013      	str	r3, [r2, #0]
    svExit = szExit;
 8010b02:	4a09      	ldr	r2, [pc, #36]	; (8010b28 <svCLI_SetBypassFtn+0xd4>)
 8010b04:	79fb      	ldrb	r3, [r7, #7]
 8010b06:	7013      	strb	r3, [r2, #0]
    sbEnter = bEnter;
 8010b08:	4a08      	ldr	r2, [pc, #32]	; (8010b2c <svCLI_SetBypassFtn+0xd8>)
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	6013      	str	r3, [r2, #0]
 8010b0e:	e000      	b.n	8010b12 <svCLI_SetBypassFtn+0xbe>
      return;
 8010b10:	bf00      	nop
  }
}
 8010b12:	3718      	adds	r7, #24
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	20055984 	.word	0x20055984
 8010b1c:	20050068 	.word	0x20050068
 8010b20:	080255f4 	.word	0x080255f4
 8010b24:	20050074 	.word	0x20050074
 8010b28:	20055988 	.word	0x20055988
 8010b2c:	2005598c 	.word	0x2005598c
 8010b30:	2005596c 	.word	0x2005596c
 8010b34:	20055764 	.word	0x20055764
 8010b38:	080256c4 	.word	0x080256c4
 8010b3c:	20055980 	.word	0x20055980

08010b40 <svCLI_Handler>:

void svCLI_Handler(void)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b084      	sub	sp, #16
 8010b44:	af00      	add	r7, sp, #0
  if (sbFirst) {
    svCLI_Printf("\r\n%s", szCLI_PROMPT);
    sbFirst = 0;
  }
#endif
  if (svGetChar) {
 8010b46:	4b92      	ldr	r3, [pc, #584]	; (8010d90 <svCLI_Handler+0x250>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	f000 8114 	beq.w	8010d78 <svCLI_Handler+0x238>
    char bSkipPrompt = 0;
 8010b50:	2300      	movs	r3, #0
 8010b52:	73fb      	strb	r3, [r7, #15]
    char szChar = svGetChar();
 8010b54:	4b8e      	ldr	r3, [pc, #568]	; (8010d90 <svCLI_Handler+0x250>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	4798      	blx	r3
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	71fb      	strb	r3, [r7, #7]
    if ((szChar != 0) && (szChar != '\n')) {
 8010b5e:	79fb      	ldrb	r3, [r7, #7]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f000 8109 	beq.w	8010d78 <svCLI_Handler+0x238>
 8010b66:	79fb      	ldrb	r3, [r7, #7]
 8010b68:	2b0a      	cmp	r3, #10
 8010b6a:	f000 8105 	beq.w	8010d78 <svCLI_Handler+0x238>
      if (szChar == '\r') {
 8010b6e:	79fb      	ldrb	r3, [r7, #7]
 8010b70:	2b0d      	cmp	r3, #13
 8010b72:	d154      	bne.n	8010c1e <svCLI_Handler+0xde>
        sbInEsc = 0;
 8010b74:	4b87      	ldr	r3, [pc, #540]	; (8010d94 <svCLI_Handler+0x254>)
 8010b76:	2200      	movs	r2, #0
 8010b78:	701a      	strb	r2, [r3, #0]
        svCLI_Printf("\r\n");
 8010b7a:	4887      	ldr	r0, [pc, #540]	; (8010d98 <svCLI_Handler+0x258>)
 8010b7c:	f7ff fba6 	bl	80102cc <svCLI_Printf>
        if (scntCLIString > 0) {
 8010b80:	4b86      	ldr	r3, [pc, #536]	; (8010d9c <svCLI_Handler+0x25c>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d031      	beq.n	8010bec <svCLI_Handler+0xac>
          // Parse and Execute
          szCLIString[scntCLIString] = '\0';  // NULL Termination
 8010b88:	4b84      	ldr	r3, [pc, #528]	; (8010d9c <svCLI_Handler+0x25c>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	4a84      	ldr	r2, [pc, #528]	; (8010da0 <svCLI_Handler+0x260>)
 8010b8e:	2100      	movs	r1, #0
 8010b90:	54d1      	strb	r1, [r2, r3]
          // Save to history Buffer
          svCLIHandleHistory(CLI_HISTORY_ADD);
 8010b92:	2000      	movs	r0, #0
 8010b94:	f7ff fd6c 	bl	8010670 <svCLIHandleHistory>
          // Call Parser
          if (svBypass) { // hellosmk 210225 added
 8010b98:	4b82      	ldr	r3, [pc, #520]	; (8010da4 <svCLI_Handler+0x264>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d011      	beq.n	8010bc4 <svCLI_Handler+0x84>
            bSkipPrompt = 1;
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	73fb      	strb	r3, [r7, #15]
            szCLIString[scntCLIString] = '\r';
 8010ba4:	4b7d      	ldr	r3, [pc, #500]	; (8010d9c <svCLI_Handler+0x25c>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	4a7d      	ldr	r2, [pc, #500]	; (8010da0 <svCLI_Handler+0x260>)
 8010baa:	210d      	movs	r1, #13
 8010bac:	54d1      	strb	r1, [r2, r3]
            szCLIString[scntCLIString+1] = '\0';
 8010bae:	4b7b      	ldr	r3, [pc, #492]	; (8010d9c <svCLI_Handler+0x25c>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	4a7a      	ldr	r2, [pc, #488]	; (8010da0 <svCLI_Handler+0x260>)
 8010bb6:	2100      	movs	r1, #0
 8010bb8:	54d1      	strb	r1, [r2, r3]
            svBypass(szCLIString);
 8010bba:	4b7a      	ldr	r3, [pc, #488]	; (8010da4 <svCLI_Handler+0x264>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	4878      	ldr	r0, [pc, #480]	; (8010da0 <svCLI_Handler+0x260>)
 8010bc0:	4798      	blx	r3
 8010bc2:	e001      	b.n	8010bc8 <svCLI_Handler+0x88>
          }
          else {
            svCLI_ParsenExecute();
 8010bc4:	f7ff feb4 	bl	8010930 <svCLI_ParsenExecute>
          }
          scntCLIString = 0;  // Clean Up Char
 8010bc8:	4b74      	ldr	r3, [pc, #464]	; (8010d9c <svCLI_Handler+0x25c>)
 8010bca:	2200      	movs	r2, #0
 8010bcc:	601a      	str	r2, [r3, #0]
          // clean up line string
          for (int i=0;i<MAX_CLI_CHARS;i++) {
 8010bce:	2300      	movs	r3, #0
 8010bd0:	60bb      	str	r3, [r7, #8]
 8010bd2:	e007      	b.n	8010be4 <svCLI_Handler+0xa4>
            szCLIString[i] = '\0';
 8010bd4:	4a72      	ldr	r2, [pc, #456]	; (8010da0 <svCLI_Handler+0x260>)
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	4413      	add	r3, r2
 8010bda:	2200      	movs	r2, #0
 8010bdc:	701a      	strb	r2, [r3, #0]
          for (int i=0;i<MAX_CLI_CHARS;i++) {
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	3301      	adds	r3, #1
 8010be2:	60bb      	str	r3, [r7, #8]
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	2b7f      	cmp	r3, #127	; 0x7f
 8010be8:	ddf4      	ble.n	8010bd4 <svCLI_Handler+0x94>
 8010bea:	e010      	b.n	8010c0e <svCLI_Handler+0xce>
          }
        }
        else if (sbEnter && svBypass) {
 8010bec:	4b6e      	ldr	r3, [pc, #440]	; (8010da8 <svCLI_Handler+0x268>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d00c      	beq.n	8010c0e <svCLI_Handler+0xce>
 8010bf4:	4b6b      	ldr	r3, [pc, #428]	; (8010da4 <svCLI_Handler+0x264>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d008      	beq.n	8010c0e <svCLI_Handler+0xce>
          const char cszRet[2] = {'\n',0};
 8010bfc:	230a      	movs	r3, #10
 8010bfe:	80bb      	strh	r3, [r7, #4]
          svBypass((char*)cszRet);
 8010c00:	4b68      	ldr	r3, [pc, #416]	; (8010da4 <svCLI_Handler+0x264>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	1d3a      	adds	r2, r7, #4
 8010c06:	4610      	mov	r0, r2
 8010c08:	4798      	blx	r3
          bSkipPrompt = 1;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	73fb      	strb	r3, [r7, #15]
        }

        if (bSkipPrompt == 0) {
 8010c0e:	7bfb      	ldrb	r3, [r7, #15]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	f040 80b1 	bne.w	8010d78 <svCLI_Handler+0x238>
          svCLI_Printf(szCLI_PROMPT);
 8010c16:	4865      	ldr	r0, [pc, #404]	; (8010dac <svCLI_Handler+0x26c>)
 8010c18:	f7ff fb58 	bl	80102cc <svCLI_Printf>
 8010c1c:	e0ac      	b.n	8010d78 <svCLI_Handler+0x238>
        }
      }
      else if (svBypass && (szChar == svExit)) {
 8010c1e:	4b61      	ldr	r3, [pc, #388]	; (8010da4 <svCLI_Handler+0x264>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d019      	beq.n	8010c5a <svCLI_Handler+0x11a>
 8010c26:	4b62      	ldr	r3, [pc, #392]	; (8010db0 <svCLI_Handler+0x270>)
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	79fa      	ldrb	r2, [r7, #7]
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	d114      	bne.n	8010c5a <svCLI_Handler+0x11a>
        // Exit Bypass mode
        if (0x11 == svExit) {
 8010c30:	4b5f      	ldr	r3, [pc, #380]	; (8010db0 <svCLI_Handler+0x270>)
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	2b11      	cmp	r3, #17
 8010c36:	d102      	bne.n	8010c3e <svCLI_Handler+0xfe>
          svCLI_Printf("^Q");
 8010c38:	485e      	ldr	r0, [pc, #376]	; (8010db4 <svCLI_Handler+0x274>)
 8010c3a:	f7ff fb47 	bl	80102cc <svCLI_Printf>
        }
        svBypass(NULL); // Notify Exit !!
 8010c3e:	4b59      	ldr	r3, [pc, #356]	; (8010da4 <svCLI_Handler+0x264>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	2000      	movs	r0, #0
 8010c44:	4798      	blx	r3
        svCLI_SetBypassFtn(NULL,NULL,NULL,FALSE);
 8010c46:	2300      	movs	r3, #0
 8010c48:	2200      	movs	r2, #0
 8010c4a:	2100      	movs	r1, #0
 8010c4c:	2000      	movs	r0, #0
 8010c4e:	f7ff ff01 	bl	8010a54 <svCLI_SetBypassFtn>
        sbInEsc = 0;
 8010c52:	4b50      	ldr	r3, [pc, #320]	; (8010d94 <svCLI_Handler+0x254>)
 8010c54:	2200      	movs	r2, #0
 8010c56:	701a      	strb	r2, [r3, #0]
 8010c58:	e08e      	b.n	8010d78 <svCLI_Handler+0x238>
      }
      else if (svBypass && (szChar == 0X1A)) {    // Ctrl+Z
 8010c5a:	4b52      	ldr	r3, [pc, #328]	; (8010da4 <svCLI_Handler+0x264>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d014      	beq.n	8010c8c <svCLI_Handler+0x14c>
 8010c62:	79fb      	ldrb	r3, [r7, #7]
 8010c64:	2b1a      	cmp	r3, #26
 8010c66:	d111      	bne.n	8010c8c <svCLI_Handler+0x14c>
        bSkipPrompt = 1;
 8010c68:	2301      	movs	r3, #1
 8010c6a:	73fb      	strb	r3, [r7, #15]
        szCLIString[scntCLIString] = 0X1A;  //Ctrl+z
 8010c6c:	4b4b      	ldr	r3, [pc, #300]	; (8010d9c <svCLI_Handler+0x25c>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4a4b      	ldr	r2, [pc, #300]	; (8010da0 <svCLI_Handler+0x260>)
 8010c72:	211a      	movs	r1, #26
 8010c74:	54d1      	strb	r1, [r2, r3]
        szCLIString[scntCLIString+1] = '\0';  // NULL Termination
 8010c76:	4b49      	ldr	r3, [pc, #292]	; (8010d9c <svCLI_Handler+0x25c>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	3301      	adds	r3, #1
 8010c7c:	4a48      	ldr	r2, [pc, #288]	; (8010da0 <svCLI_Handler+0x260>)
 8010c7e:	2100      	movs	r1, #0
 8010c80:	54d1      	strb	r1, [r2, r3]
        svBypass(szCLIString);
 8010c82:	4b48      	ldr	r3, [pc, #288]	; (8010da4 <svCLI_Handler+0x264>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	4846      	ldr	r0, [pc, #280]	; (8010da0 <svCLI_Handler+0x260>)
 8010c88:	4798      	blx	r3
 8010c8a:	e075      	b.n	8010d78 <svCLI_Handler+0x238>
      }
      else {
        if (szChar == '\b') { // Back space
 8010c8c:	79fb      	ldrb	r3, [r7, #7]
 8010c8e:	2b08      	cmp	r3, #8
 8010c90:	d118      	bne.n	8010cc4 <svCLI_Handler+0x184>
          sbInEsc = 0;
 8010c92:	4b40      	ldr	r3, [pc, #256]	; (8010d94 <svCLI_Handler+0x254>)
 8010c94:	2200      	movs	r2, #0
 8010c96:	701a      	strb	r2, [r3, #0]
          if (scntCLIString > 0) {
 8010c98:	4b40      	ldr	r3, [pc, #256]	; (8010d9c <svCLI_Handler+0x25c>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d06b      	beq.n	8010d78 <svCLI_Handler+0x238>
            _svClearLine();
 8010ca0:	f7ff fcb0 	bl	8010604 <_svClearLine>
            scntCLIString--;
 8010ca4:	4b3d      	ldr	r3, [pc, #244]	; (8010d9c <svCLI_Handler+0x25c>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	3b01      	subs	r3, #1
 8010caa:	4a3c      	ldr	r2, [pc, #240]	; (8010d9c <svCLI_Handler+0x25c>)
 8010cac:	6013      	str	r3, [r2, #0]
            szCLIString[scntCLIString] = '\0';  // NULL Termination
 8010cae:	4b3b      	ldr	r3, [pc, #236]	; (8010d9c <svCLI_Handler+0x25c>)
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	4a3b      	ldr	r2, [pc, #236]	; (8010da0 <svCLI_Handler+0x260>)
 8010cb4:	2100      	movs	r1, #0
 8010cb6:	54d1      	strb	r1, [r2, r3]
            svCLI_Printf("%s%s", szCLI_PROMPT, szCLIString);
 8010cb8:	4a39      	ldr	r2, [pc, #228]	; (8010da0 <svCLI_Handler+0x260>)
 8010cba:	493c      	ldr	r1, [pc, #240]	; (8010dac <svCLI_Handler+0x26c>)
 8010cbc:	483e      	ldr	r0, [pc, #248]	; (8010db8 <svCLI_Handler+0x278>)
 8010cbe:	f7ff fb05 	bl	80102cc <svCLI_Printf>
 8010cc2:	e059      	b.n	8010d78 <svCLI_Handler+0x238>
          }
        }
        else if (szChar == '[') { // ESC sequence started
 8010cc4:	79fb      	ldrb	r3, [r7, #7]
 8010cc6:	2b5b      	cmp	r3, #91	; 0x5b
 8010cc8:	d103      	bne.n	8010cd2 <svCLI_Handler+0x192>
          sbInEsc = 1;
 8010cca:	4b32      	ldr	r3, [pc, #200]	; (8010d94 <svCLI_Handler+0x254>)
 8010ccc:	2201      	movs	r2, #1
 8010cce:	701a      	strb	r2, [r3, #0]
 8010cd0:	e052      	b.n	8010d78 <svCLI_Handler+0x238>
        }
        else if (_isPrintable(szChar)) {
 8010cd2:	79fb      	ldrb	r3, [r7, #7]
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7ff fbe4 	bl	80104a2 <_isPrintable>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d04b      	beq.n	8010d78 <svCLI_Handler+0x238>
          if (sbInEsc) {
 8010ce0:	4b2c      	ldr	r3, [pc, #176]	; (8010d94 <svCLI_Handler+0x254>)
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d036      	beq.n	8010d56 <svCLI_Handler+0x216>
            sbInEsc = 0;
 8010ce8:	4b2a      	ldr	r3, [pc, #168]	; (8010d94 <svCLI_Handler+0x254>)
 8010cea:	2200      	movs	r2, #0
 8010cec:	701a      	strb	r2, [r3, #0]
            if (snCLIHistoryCount > 0) {
 8010cee:	4b33      	ldr	r3, [pc, #204]	; (8010dbc <svCLI_Handler+0x27c>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	dd27      	ble.n	8010d46 <svCLI_Handler+0x206>
              switch (szChar) {
 8010cf6:	79fb      	ldrb	r3, [r7, #7]
 8010cf8:	2b41      	cmp	r3, #65	; 0x41
 8010cfa:	d002      	beq.n	8010d02 <svCLI_Handler+0x1c2>
 8010cfc:	2b42      	cmp	r3, #66	; 0x42
 8010cfe:	d011      	beq.n	8010d24 <svCLI_Handler+0x1e4>
                  // echo back
                  scntCLIString = svCLI_Printf("%s", szCLIString);
                  // echo back
                  break;
                default:  // Do Nothing
                  break;
 8010d00:	e021      	b.n	8010d46 <svCLI_Handler+0x206>
                  svCLIHandleHistory(CLI_HISTORY_PREV);
 8010d02:	2002      	movs	r0, #2
 8010d04:	f7ff fcb4 	bl	8010670 <svCLIHandleHistory>
                  _svClearLine();
 8010d08:	f7ff fc7c 	bl	8010604 <_svClearLine>
                  svCLI_Printf(szCLI_PROMPT);
 8010d0c:	4827      	ldr	r0, [pc, #156]	; (8010dac <svCLI_Handler+0x26c>)
 8010d0e:	f7ff fadd 	bl	80102cc <svCLI_Printf>
                  scntCLIString = svCLI_Printf("%s", szCLIString);
 8010d12:	4923      	ldr	r1, [pc, #140]	; (8010da0 <svCLI_Handler+0x260>)
 8010d14:	482a      	ldr	r0, [pc, #168]	; (8010dc0 <svCLI_Handler+0x280>)
 8010d16:	f7ff fad9 	bl	80102cc <svCLI_Printf>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	461a      	mov	r2, r3
 8010d1e:	4b1f      	ldr	r3, [pc, #124]	; (8010d9c <svCLI_Handler+0x25c>)
 8010d20:	601a      	str	r2, [r3, #0]
                  break;
 8010d22:	e010      	b.n	8010d46 <svCLI_Handler+0x206>
                  svCLIHandleHistory(CLI_HISTORY_NEXT);
 8010d24:	2001      	movs	r0, #1
 8010d26:	f7ff fca3 	bl	8010670 <svCLIHandleHistory>
                  _svClearLine();
 8010d2a:	f7ff fc6b 	bl	8010604 <_svClearLine>
                  svCLI_Printf(szCLI_PROMPT);
 8010d2e:	481f      	ldr	r0, [pc, #124]	; (8010dac <svCLI_Handler+0x26c>)
 8010d30:	f7ff facc 	bl	80102cc <svCLI_Printf>
                  scntCLIString = svCLI_Printf("%s", szCLIString);
 8010d34:	491a      	ldr	r1, [pc, #104]	; (8010da0 <svCLI_Handler+0x260>)
 8010d36:	4822      	ldr	r0, [pc, #136]	; (8010dc0 <svCLI_Handler+0x280>)
 8010d38:	f7ff fac8 	bl	80102cc <svCLI_Printf>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	461a      	mov	r2, r3
 8010d40:	4b16      	ldr	r3, [pc, #88]	; (8010d9c <svCLI_Handler+0x25c>)
 8010d42:	601a      	str	r2, [r3, #0]
                  break;
 8010d44:	bf00      	nop
              }
            }
            if (svCommit) {
 8010d46:	4b1f      	ldr	r3, [pc, #124]	; (8010dc4 <svCLI_Handler+0x284>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d01c      	beq.n	8010d88 <svCLI_Handler+0x248>
              svCommit();
 8010d4e:	4b1d      	ldr	r3, [pc, #116]	; (8010dc4 <svCLI_Handler+0x284>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	4798      	blx	r3
            }
            return;
 8010d54:	e018      	b.n	8010d88 <svCLI_Handler+0x248>
          }
          if (scntCLIString < (MAX_CLI_CHARS-1)) {
 8010d56:	4b11      	ldr	r3, [pc, #68]	; (8010d9c <svCLI_Handler+0x25c>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	2b7e      	cmp	r3, #126	; 0x7e
 8010d5c:	d80c      	bhi.n	8010d78 <svCLI_Handler+0x238>
            // echo back
            svPutChar(szChar);
 8010d5e:	4b1a      	ldr	r3, [pc, #104]	; (8010dc8 <svCLI_Handler+0x288>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	79fa      	ldrb	r2, [r7, #7]
 8010d64:	4610      	mov	r0, r2
 8010d66:	4798      	blx	r3
            szCLIString[scntCLIString++] = szChar;
 8010d68:	4b0c      	ldr	r3, [pc, #48]	; (8010d9c <svCLI_Handler+0x25c>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	1c5a      	adds	r2, r3, #1
 8010d6e:	490b      	ldr	r1, [pc, #44]	; (8010d9c <svCLI_Handler+0x25c>)
 8010d70:	600a      	str	r2, [r1, #0]
 8010d72:	490b      	ldr	r1, [pc, #44]	; (8010da0 <svCLI_Handler+0x260>)
 8010d74:	79fa      	ldrb	r2, [r7, #7]
 8010d76:	54ca      	strb	r2, [r1, r3]
          }
        }
      }
    }
  }
  if (svCommit) {
 8010d78:	4b12      	ldr	r3, [pc, #72]	; (8010dc4 <svCLI_Handler+0x284>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d004      	beq.n	8010d8a <svCLI_Handler+0x24a>
    svCommit();
 8010d80:	4b10      	ldr	r3, [pc, #64]	; (8010dc4 <svCLI_Handler+0x284>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	4798      	blx	r3
 8010d86:	e000      	b.n	8010d8a <svCLI_Handler+0x24a>
            return;
 8010d88:	bf00      	nop
  }
}
 8010d8a:	3710      	adds	r7, #16
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}
 8010d90:	20055978 	.word	0x20055978
 8010d94:	20055a90 	.word	0x20055a90
 8010d98:	08025608 	.word	0x08025608
 8010d9c:	2005596c 	.word	0x2005596c
 8010da0:	20055764 	.word	0x20055764
 8010da4:	20055984 	.word	0x20055984
 8010da8:	2005598c 	.word	0x2005598c
 8010dac:	20050068 	.word	0x20050068
 8010db0:	20055988 	.word	0x20055988
 8010db4:	080256dc 	.word	0x080256dc
 8010db8:	080256e0 	.word	0x080256e0
 8010dbc:	20055964 	.word	0x20055964
 8010dc0:	080256e8 	.word	0x080256e8
 8010dc4:	20055980 	.word	0x20055980
 8010dc8:	2005597c 	.word	0x2005597c

08010dcc <CLI_Help>:
// for CLI
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (HELP,"Help","Help : Show menu",CLI_Help);

static void CLI_Help(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	60f8      	str	r0, [r7, #12]
 8010dd4:	60b9      	str	r1, [r7, #8]
 8010dd6:	607a      	str	r2, [r7, #4]
 8010dd8:	603b      	str	r3, [r7, #0]
  svCLI_ShowHelp();
 8010dda:	f7ff faa3 	bl	8010324 <svCLI_ShowHelp>
}
 8010dde:	bf00      	nop
 8010de0:	3710      	adds	r7, #16
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}

08010de6 <svRingBuffer_GetCount>:
{
	return rb->size;
}

unsigned int svRingBuffer_GetCount(const svRingBuffer_t *rb)
{
 8010de6:	b480      	push	{r7}
 8010de8:	b085      	sub	sp, #20
 8010dea:	af00      	add	r7, sp, #0
 8010dec:	6078      	str	r0, [r7, #4]
	unsigned char *h, *t;
	// use temporal value to avoid corruption in between context-switching / Interrupt 
	h = rb->head;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	685b      	ldr	r3, [r3, #4]
 8010df2:	60fb      	str	r3, [r7, #12]
	t = rb->tail;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	689b      	ldr	r3, [r3, #8]
 8010df8:	60bb      	str	r3, [r7, #8]
	if (h >= t)
 8010dfa:	68fa      	ldr	r2, [r7, #12]
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	d303      	bcc.n	8010e0a <svRingBuffer_GetCount+0x24>
	  return (h - t);
 8010e02:	68fa      	ldr	r2, [r7, #12]
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	1ad3      	subs	r3, r2, r3
 8010e08:	e009      	b.n	8010e1e <svRingBuffer_GetCount+0x38>
	else
	  return (unsigned int)(rb->bufend - t + h - rb->buf);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	68da      	ldr	r2, [r3, #12]
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	1ad3      	subs	r3, r2, r3
 8010e12:	461a      	mov	r2, r3
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	441a      	add	r2, r3
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	1ad3      	subs	r3, r2, r3
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3714      	adds	r7, #20
 8010e22:	46bd      	mov	sp, r7
 8010e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e28:	4770      	bx	lr

08010e2a <svRingBuffer_Reset>:

void svRingBuffer_Reset(svRingBuffer_t *rb)
{
 8010e2a:	b480      	push	{r7}
 8010e2c:	b083      	sub	sp, #12
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	6078      	str	r0, [r7, #4]
	rb->head = rb->tail = rb->buf;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681a      	ldr	r2, [r3, #0]
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	609a      	str	r2, [r3, #8]
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	689a      	ldr	r2, [r3, #8]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	605a      	str	r2, [r3, #4]
	rb->fOverflow = 0;		// Clear Flag
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2200      	movs	r2, #0
 8010e46:	615a      	str	r2, [r3, #20]
	rb->fTurnAround = 0;	// Clear Flag
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	619a      	str	r2, [r3, #24]
}
 8010e4e:	bf00      	nop
 8010e50:	370c      	adds	r7, #12
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr

08010e5a <svRingBuffer_Push>:
{
	rb->fOverflow = 0;
}

int svRingBuffer_Push(svRingBuffer_t *rb, unsigned char data)
{
 8010e5a:	b480      	push	{r7}
 8010e5c:	b085      	sub	sp, #20
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
 8010e62:	460b      	mov	r3, r1
 8010e64:	70fb      	strb	r3, [r7, #3]
	int nRet;
	nRet = 0;
 8010e66:	2300      	movs	r3, #0
 8010e68:	60fb      	str	r3, [r7, #12]
	*(rb->head) = data;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	78fa      	ldrb	r2, [r7, #3]
 8010e70:	701a      	strb	r2, [r3, #0]
	rb->head++;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	685b      	ldr	r3, [r3, #4]
 8010e76:	1c5a      	adds	r2, r3, #1
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	605a      	str	r2, [r3, #4]
	if (rb->head == rb->bufend) {	// Wrap around
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	685a      	ldr	r2, [r3, #4]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	68db      	ldr	r3, [r3, #12]
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d109      	bne.n	8010e9c <svRingBuffer_Push+0x42>
	  rb->head = rb->buf;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681a      	ldr	r2, [r3, #0]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	605a      	str	r2, [r3, #4]
		rb->fTurnAround = 1;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2201      	movs	r2, #1
 8010e94:	619a      	str	r2, [r3, #24]
		nRet = -1;
 8010e96:	f04f 33ff 	mov.w	r3, #4294967295
 8010e9a:	60fb      	str	r3, [r7, #12]
		// return -1;	// -- hellosmk 210512 to check overflow
	}
	if (rb->head == rb->tail) {		// Over flowed
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	685a      	ldr	r2, [r3, #4]
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	689b      	ldr	r3, [r3, #8]
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d105      	bne.n	8010eb4 <svRingBuffer_Push+0x5a>
	  rb->fOverflow = 1;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2201      	movs	r2, #1
 8010eac:	615a      	str	r2, [r3, #20]
		nRet = -2;
 8010eae:	f06f 0301 	mvn.w	r3, #1
 8010eb2:	60fb      	str	r3, [r7, #12]
	}
	return nRet;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3714      	adds	r7, #20
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec0:	4770      	bx	lr

08010ec2 <svRingBuffer_Pop>:

unsigned char svRingBuffer_Pop(svRingBuffer_t *rb)
{
 8010ec2:	b480      	push	{r7}
 8010ec4:	b085      	sub	sp, #20
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	6078      	str	r0, [r7, #4]
	unsigned char byData;
	byData = *(rb->tail);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	689b      	ldr	r3, [r3, #8]
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	73fb      	strb	r3, [r7, #15]
	rb->tail++;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	689b      	ldr	r3, [r3, #8]
 8010ed6:	1c5a      	adds	r2, r3, #1
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	609a      	str	r2, [r3, #8]
	if (rb->tail == rb->bufend)	// Wrap around
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	689a      	ldr	r2, [r3, #8]
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	68db      	ldr	r3, [r3, #12]
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	d103      	bne.n	8010ef0 <svRingBuffer_Pop+0x2e>
	  rb->tail = rb->buf;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681a      	ldr	r2, [r3, #0]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	609a      	str	r2, [r3, #8]
	return byData;
 8010ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	3714      	adds	r7, #20
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efc:	4770      	bx	lr
	...

08010f00 <__NVIC_SetPriority>:
{
 8010f00:	b480      	push	{r7}
 8010f02:	b083      	sub	sp, #12
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	4603      	mov	r3, r0
 8010f08:	6039      	str	r1, [r7, #0]
 8010f0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010f0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	db0a      	blt.n	8010f2a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	b2da      	uxtb	r2, r3
 8010f18:	490c      	ldr	r1, [pc, #48]	; (8010f4c <__NVIC_SetPriority+0x4c>)
 8010f1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f1e:	0112      	lsls	r2, r2, #4
 8010f20:	b2d2      	uxtb	r2, r2
 8010f22:	440b      	add	r3, r1
 8010f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010f28:	e00a      	b.n	8010f40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	b2da      	uxtb	r2, r3
 8010f2e:	4908      	ldr	r1, [pc, #32]	; (8010f50 <__NVIC_SetPriority+0x50>)
 8010f30:	88fb      	ldrh	r3, [r7, #6]
 8010f32:	f003 030f 	and.w	r3, r3, #15
 8010f36:	3b04      	subs	r3, #4
 8010f38:	0112      	lsls	r2, r2, #4
 8010f3a:	b2d2      	uxtb	r2, r2
 8010f3c:	440b      	add	r3, r1
 8010f3e:	761a      	strb	r2, [r3, #24]
}
 8010f40:	bf00      	nop
 8010f42:	370c      	adds	r7, #12
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr
 8010f4c:	e000e100 	.word	0xe000e100
 8010f50:	e000ed00 	.word	0xe000ed00

08010f54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010f54:	b580      	push	{r7, lr}
 8010f56:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8010f58:	4b05      	ldr	r3, [pc, #20]	; (8010f70 <SysTick_Handler+0x1c>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010f5c:	f002 fcf4 	bl	8013948 <xTaskGetSchedulerState>
 8010f60:	4603      	mov	r3, r0
 8010f62:	2b01      	cmp	r3, #1
 8010f64:	d001      	beq.n	8010f6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010f66:	f003 fa75 	bl	8014454 <xPortSysTickHandler>
  }
}
 8010f6a:	bf00      	nop
 8010f6c:	bd80      	pop	{r7, pc}
 8010f6e:	bf00      	nop
 8010f70:	e000e010 	.word	0xe000e010

08010f74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010f74:	b580      	push	{r7, lr}
 8010f76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8010f78:	2100      	movs	r1, #0
 8010f7a:	f06f 0004 	mvn.w	r0, #4
 8010f7e:	f7ff ffbf 	bl	8010f00 <__NVIC_SetPriority>
#endif
}
 8010f82:	bf00      	nop
 8010f84:	bd80      	pop	{r7, pc}

08010f86 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8010f86:	b580      	push	{r7, lr}
 8010f88:	b086      	sub	sp, #24
 8010f8a:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f90:	f3ef 8305 	mrs	r3, IPSR
 8010f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8010f96:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d002      	beq.n	8010fa2 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	617b      	str	r3, [r7, #20]
 8010fa0:	e013      	b.n	8010fca <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8010fa2:	f002 fcd1 	bl	8013948 <xTaskGetSchedulerState>
 8010fa6:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8010fa8:	693b      	ldr	r3, [r7, #16]
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d00d      	beq.n	8010fca <IRQ_Context+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8010fae:	f3ef 8310 	mrs	r3, PRIMASK
 8010fb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8010fb4:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d105      	bne.n	8010fc6 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010fba:	f3ef 8311 	mrs	r3, BASEPRI
 8010fbe:	607b      	str	r3, [r7, #4]
  return(result);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d001      	beq.n	8010fca <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8010fca:	697b      	ldr	r3, [r7, #20]
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3718      	adds	r7, #24
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}

08010fd4 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b082      	sub	sp, #8
 8010fd8:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8010fda:	f7ff ffd4 	bl	8010f86 <IRQ_Context>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d003      	beq.n	8010fec <osKernelInitialize+0x18>
    stat = osErrorISR;
 8010fe4:	f06f 0305 	mvn.w	r3, #5
 8010fe8:	607b      	str	r3, [r7, #4]
 8010fea:	e012      	b.n	8011012 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8010fec:	f002 fcac 	bl	8013948 <xTaskGetSchedulerState>
 8010ff0:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	2b01      	cmp	r3, #1
 8010ff6:	d109      	bne.n	801100c <osKernelInitialize+0x38>
 8010ff8:	4b08      	ldr	r3, [pc, #32]	; (801101c <osKernelInitialize+0x48>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d105      	bne.n	801100c <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011000:	4b06      	ldr	r3, [pc, #24]	; (801101c <osKernelInitialize+0x48>)
 8011002:	2201      	movs	r2, #1
 8011004:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011006:	2300      	movs	r3, #0
 8011008:	607b      	str	r3, [r7, #4]
 801100a:	e002      	b.n	8011012 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 801100c:	f04f 33ff 	mov.w	r3, #4294967295
 8011010:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8011012:	687b      	ldr	r3, [r7, #4]
}
 8011014:	4618      	mov	r0, r3
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}
 801101c:	20055a94 	.word	0x20055a94

08011020 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8011020:	b580      	push	{r7, lr}
 8011022:	b082      	sub	sp, #8
 8011024:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8011026:	f7ff ffae 	bl	8010f86 <IRQ_Context>
 801102a:	4603      	mov	r3, r0
 801102c:	2b00      	cmp	r3, #0
 801102e:	d003      	beq.n	8011038 <osKernelStart+0x18>
    stat = osErrorISR;
 8011030:	f06f 0305 	mvn.w	r3, #5
 8011034:	607b      	str	r3, [r7, #4]
 8011036:	e016      	b.n	8011066 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8011038:	f002 fc86 	bl	8013948 <xTaskGetSchedulerState>
 801103c:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	2b01      	cmp	r3, #1
 8011042:	d10d      	bne.n	8011060 <osKernelStart+0x40>
 8011044:	4b0a      	ldr	r3, [pc, #40]	; (8011070 <osKernelStart+0x50>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	2b01      	cmp	r3, #1
 801104a:	d109      	bne.n	8011060 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801104c:	f7ff ff92 	bl	8010f74 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8011050:	4b07      	ldr	r3, [pc, #28]	; (8011070 <osKernelStart+0x50>)
 8011052:	2202      	movs	r2, #2
 8011054:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011056:	f001 fef9 	bl	8012e4c <vTaskStartScheduler>
      stat = osOK;
 801105a:	2300      	movs	r3, #0
 801105c:	607b      	str	r3, [r7, #4]
 801105e:	e002      	b.n	8011066 <osKernelStart+0x46>
    } else {
      stat = osError;
 8011060:	f04f 33ff 	mov.w	r3, #4294967295
 8011064:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8011066:	687b      	ldr	r3, [r7, #4]
}
 8011068:	4618      	mov	r0, r3
 801106a:	3708      	adds	r7, #8
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}
 8011070:	20055a94 	.word	0x20055a94

08011074 <osKernelGetTickCount>:
}

/*
  Get the RTOS kernel tick count.
*/
uint32_t osKernelGetTickCount (void) {
 8011074:	b580      	push	{r7, lr}
 8011076:	b082      	sub	sp, #8
 8011078:	af00      	add	r7, sp, #0
  TickType_t ticks;

  if (IRQ_Context() != 0U) {
 801107a:	f7ff ff84 	bl	8010f86 <IRQ_Context>
 801107e:	4603      	mov	r3, r0
 8011080:	2b00      	cmp	r3, #0
 8011082:	d003      	beq.n	801108c <osKernelGetTickCount+0x18>
    ticks = xTaskGetTickCountFromISR();
 8011084:	f002 f846 	bl	8013114 <xTaskGetTickCountFromISR>
 8011088:	6078      	str	r0, [r7, #4]
 801108a:	e002      	b.n	8011092 <osKernelGetTickCount+0x1e>
  } else {
    ticks = xTaskGetTickCount();
 801108c:	f002 f832 	bl	80130f4 <xTaskGetTickCount>
 8011090:	6078      	str	r0, [r7, #4]
  }

  /* Return kernel tick count */
  return (ticks);
 8011092:	687b      	ldr	r3, [r7, #4]
}
 8011094:	4618      	mov	r0, r3
 8011096:	3708      	adds	r7, #8
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801109c:	b580      	push	{r7, lr}
 801109e:	b08e      	sub	sp, #56	; 0x38
 80110a0:	af04      	add	r7, sp, #16
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	60b9      	str	r1, [r7, #8]
 80110a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80110a8:	2300      	movs	r3, #0
 80110aa:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 80110ac:	f7ff ff6b 	bl	8010f86 <IRQ_Context>
 80110b0:	4603      	mov	r3, r0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d17f      	bne.n	80111b6 <osThreadNew+0x11a>
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d07c      	beq.n	80111b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80110bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80110c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80110c2:	2318      	movs	r3, #24
 80110c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80110c6:	2300      	movs	r3, #0
 80110c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80110ca:	f04f 33ff 	mov.w	r3, #4294967295
 80110ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d045      	beq.n	8011162 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d002      	beq.n	80110e4 <osThreadNew+0x48>
        name = attr->name;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	699b      	ldr	r3, [r3, #24]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d002      	beq.n	80110f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	699b      	ldr	r3, [r3, #24]
 80110f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80110f2:	69fb      	ldr	r3, [r7, #28]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d008      	beq.n	801110a <osThreadNew+0x6e>
 80110f8:	69fb      	ldr	r3, [r7, #28]
 80110fa:	2b38      	cmp	r3, #56	; 0x38
 80110fc:	d805      	bhi.n	801110a <osThreadNew+0x6e>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	f003 0301 	and.w	r3, r3, #1
 8011106:	2b00      	cmp	r3, #0
 8011108:	d001      	beq.n	801110e <osThreadNew+0x72>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 801110a:	2300      	movs	r3, #0
 801110c:	e054      	b.n	80111b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	695b      	ldr	r3, [r3, #20]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d003      	beq.n	801111e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	695b      	ldr	r3, [r3, #20]
 801111a:	089b      	lsrs	r3, r3, #2
 801111c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	689b      	ldr	r3, [r3, #8]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d00e      	beq.n	8011144 <osThreadNew+0xa8>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	68db      	ldr	r3, [r3, #12]
 801112a:	2b5b      	cmp	r3, #91	; 0x5b
 801112c:	d90a      	bls.n	8011144 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011132:	2b00      	cmp	r3, #0
 8011134:	d006      	beq.n	8011144 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	695b      	ldr	r3, [r3, #20]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d002      	beq.n	8011144 <osThreadNew+0xa8>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 801113e:	2301      	movs	r3, #1
 8011140:	61bb      	str	r3, [r7, #24]
 8011142:	e010      	b.n	8011166 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	689b      	ldr	r3, [r3, #8]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d10c      	bne.n	8011166 <osThreadNew+0xca>
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	68db      	ldr	r3, [r3, #12]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d108      	bne.n	8011166 <osThreadNew+0xca>
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	691b      	ldr	r3, [r3, #16]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d104      	bne.n	8011166 <osThreadNew+0xca>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 801115c:	2300      	movs	r3, #0
 801115e:	61bb      	str	r3, [r7, #24]
 8011160:	e001      	b.n	8011166 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011162:	2300      	movs	r3, #0
 8011164:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011166:	69bb      	ldr	r3, [r7, #24]
 8011168:	2b01      	cmp	r3, #1
 801116a:	d110      	bne.n	801118e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011170:	687a      	ldr	r2, [r7, #4]
 8011172:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011174:	9202      	str	r2, [sp, #8]
 8011176:	9301      	str	r3, [sp, #4]
 8011178:	69fb      	ldr	r3, [r7, #28]
 801117a:	9300      	str	r3, [sp, #0]
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	6a3a      	ldr	r2, [r7, #32]
 8011180:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011182:	68f8      	ldr	r0, [r7, #12]
 8011184:	f001 fc9a 	bl	8012abc <xTaskCreateStatic>
 8011188:	4603      	mov	r3, r0
 801118a:	617b      	str	r3, [r7, #20]
 801118c:	e013      	b.n	80111b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801118e:	69bb      	ldr	r3, [r7, #24]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d110      	bne.n	80111b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8011194:	6a3b      	ldr	r3, [r7, #32]
 8011196:	b29a      	uxth	r2, r3
 8011198:	f107 0314 	add.w	r3, r7, #20
 801119c:	9301      	str	r3, [sp, #4]
 801119e:	69fb      	ldr	r3, [r7, #28]
 80111a0:	9300      	str	r3, [sp, #0]
 80111a2:	68bb      	ldr	r3, [r7, #8]
 80111a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80111a6:	68f8      	ldr	r0, [r7, #12]
 80111a8:	f001 fcd2 	bl	8012b50 <xTaskCreate>
 80111ac:	4603      	mov	r3, r0
 80111ae:	2b01      	cmp	r3, #1
 80111b0:	d001      	beq.n	80111b6 <osThreadNew+0x11a>
            hTask = NULL;
 80111b2:	2300      	movs	r3, #0
 80111b4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 80111b6:	697b      	ldr	r3, [r7, #20]
}
 80111b8:	4618      	mov	r0, r3
 80111ba:	3728      	adds	r7, #40	; 0x28
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}

080111c0 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b084      	sub	sp, #16
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 80111c8:	f7ff fedd 	bl	8010f86 <IRQ_Context>
 80111cc:	4603      	mov	r3, r0
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d003      	beq.n	80111da <osDelay+0x1a>
    stat = osErrorISR;
 80111d2:	f06f 0305 	mvn.w	r3, #5
 80111d6:	60fb      	str	r3, [r7, #12]
 80111d8:	e007      	b.n	80111ea <osDelay+0x2a>
  }
  else {
    stat = osOK;
 80111da:	2300      	movs	r3, #0
 80111dc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d002      	beq.n	80111ea <osDelay+0x2a>
      vTaskDelay(ticks);
 80111e4:	6878      	ldr	r0, [r7, #4]
 80111e6:	f001 fe0d 	bl	8012e04 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 80111ea:	68fb      	ldr	r3, [r7, #12]
}
 80111ec:	4618      	mov	r0, r3
 80111ee:	3710      	adds	r7, #16
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}

080111f4 <osMutexNew>:

  Limitations:
  - Priority inherit protocol is used by default, osMutexPrioInherit attribute is ignored.
  - Robust mutex is not supported, NULL is returned if used.
*/
osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b086      	sub	sp, #24
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  uint32_t type;
  uint32_t rmtx;
  int32_t  mem;

  hMutex = NULL;
 80111fc:	2300      	movs	r3, #0
 80111fe:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() == 0U) {
 8011200:	f7ff fec1 	bl	8010f86 <IRQ_Context>
 8011204:	4603      	mov	r3, r0
 8011206:	2b00      	cmp	r3, #0
 8011208:	d174      	bne.n	80112f4 <osMutexNew+0x100>
    if (attr != NULL) {
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d003      	beq.n	8011218 <osMutexNew+0x24>
      type = attr->attr_bits;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	685b      	ldr	r3, [r3, #4]
 8011214:	613b      	str	r3, [r7, #16]
 8011216:	e001      	b.n	801121c <osMutexNew+0x28>
    } else {
      type = 0U;
 8011218:	2300      	movs	r3, #0
 801121a:	613b      	str	r3, [r7, #16]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801121c:	693b      	ldr	r3, [r7, #16]
 801121e:	f003 0301 	and.w	r3, r3, #1
 8011222:	2b00      	cmp	r3, #0
 8011224:	d002      	beq.n	801122c <osMutexNew+0x38>
      rmtx = 1U;
 8011226:	2301      	movs	r3, #1
 8011228:	60fb      	str	r3, [r7, #12]
 801122a:	e001      	b.n	8011230 <osMutexNew+0x3c>
    } else {
      rmtx = 0U;
 801122c:	2300      	movs	r3, #0
 801122e:	60fb      	str	r3, [r7, #12]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	f003 0308 	and.w	r3, r3, #8
 8011236:	2b00      	cmp	r3, #0
 8011238:	d15c      	bne.n	80112f4 <osMutexNew+0x100>
      mem = -1;
 801123a:	f04f 33ff 	mov.w	r3, #4294967295
 801123e:	60bb      	str	r3, [r7, #8]

      if (attr != NULL) {
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d015      	beq.n	8011272 <osMutexNew+0x7e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	689b      	ldr	r3, [r3, #8]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d006      	beq.n	801125c <osMutexNew+0x68>
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	68db      	ldr	r3, [r3, #12]
 8011252:	2b4f      	cmp	r3, #79	; 0x4f
 8011254:	d902      	bls.n	801125c <osMutexNew+0x68>
          /* The memory for control block is provided, use static object */
          mem = 1;
 8011256:	2301      	movs	r3, #1
 8011258:	60bb      	str	r3, [r7, #8]
 801125a:	e00c      	b.n	8011276 <osMutexNew+0x82>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	689b      	ldr	r3, [r3, #8]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d108      	bne.n	8011276 <osMutexNew+0x82>
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	68db      	ldr	r3, [r3, #12]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d104      	bne.n	8011276 <osMutexNew+0x82>
            /* Control block will be allocated from the dynamic pool */
            mem = 0;
 801126c:	2300      	movs	r3, #0
 801126e:	60bb      	str	r3, [r7, #8]
 8011270:	e001      	b.n	8011276 <osMutexNew+0x82>
          }
        }
      }
      else {
        mem = 0;
 8011272:	2300      	movs	r3, #0
 8011274:	60bb      	str	r3, [r7, #8]
      }

      if (mem == 1) {
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	2b01      	cmp	r3, #1
 801127a:	d112      	bne.n	80112a2 <osMutexNew+0xae>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d007      	beq.n	8011292 <osMutexNew+0x9e>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	689b      	ldr	r3, [r3, #8]
 8011286:	4619      	mov	r1, r3
 8011288:	2004      	movs	r0, #4
 801128a:	f000 fd87 	bl	8011d9c <xQueueCreateMutexStatic>
 801128e:	6178      	str	r0, [r7, #20]
 8011290:	e016      	b.n	80112c0 <osMutexNew+0xcc>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	689b      	ldr	r3, [r3, #8]
 8011296:	4619      	mov	r1, r3
 8011298:	2001      	movs	r0, #1
 801129a:	f000 fd7f 	bl	8011d9c <xQueueCreateMutexStatic>
 801129e:	6178      	str	r0, [r7, #20]
 80112a0:	e00e      	b.n	80112c0 <osMutexNew+0xcc>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d10b      	bne.n	80112c0 <osMutexNew+0xcc>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d004      	beq.n	80112b8 <osMutexNew+0xc4>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80112ae:	2004      	movs	r0, #4
 80112b0:	f000 fd5c 	bl	8011d6c <xQueueCreateMutex>
 80112b4:	6178      	str	r0, [r7, #20]
 80112b6:	e003      	b.n	80112c0 <osMutexNew+0xcc>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80112b8:	2001      	movs	r0, #1
 80112ba:	f000 fd57 	bl	8011d6c <xQueueCreateMutex>
 80112be:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d00c      	beq.n	80112e0 <osMutexNew+0xec>
        if ((attr != NULL) && (attr->name != NULL)) {
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d009      	beq.n	80112e0 <osMutexNew+0xec>
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d005      	beq.n	80112e0 <osMutexNew+0xec>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hMutex, attr->name);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	4619      	mov	r1, r3
 80112da:	6978      	ldr	r0, [r7, #20]
 80112dc:	f001 fb48 	bl	8012970 <vQueueAddToRegistry>
        }
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d006      	beq.n	80112f4 <osMutexNew+0x100>
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d003      	beq.n	80112f4 <osMutexNew+0x100>
        /* Set LSB as 'recursive mutex flag' */
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	f043 0301 	orr.w	r3, r3, #1
 80112f2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return mutex ID */
  return ((osMutexId_t)hMutex);
 80112f4:	697b      	ldr	r3, [r7, #20]
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3718      	adds	r7, #24
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}

080112fe <osMutexAcquire>:

/*
  Acquire a Mutex or timeout if it is locked.
*/
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80112fe:	b580      	push	{r7, lr}
 8011300:	b086      	sub	sp, #24
 8011302:	af00      	add	r7, sp, #0
 8011304:	6078      	str	r0, [r7, #4]
 8011306:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f023 0301 	bic.w	r3, r3, #1
 801130e:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f003 0301 	and.w	r3, r3, #1
 8011316:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8011318:	2300      	movs	r3, #0
 801131a:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
 801131c:	f7ff fe33 	bl	8010f86 <IRQ_Context>
 8011320:	4603      	mov	r3, r0
 8011322:	2b00      	cmp	r3, #0
 8011324:	d003      	beq.n	801132e <osMutexAcquire+0x30>
    stat = osErrorISR;
 8011326:	f06f 0305 	mvn.w	r3, #5
 801132a:	617b      	str	r3, [r7, #20]
 801132c:	e02c      	b.n	8011388 <osMutexAcquire+0x8a>
  }
  else if (hMutex == NULL) {
 801132e:	693b      	ldr	r3, [r7, #16]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d103      	bne.n	801133c <osMutexAcquire+0x3e>
    stat = osErrorParameter;
 8011334:	f06f 0303 	mvn.w	r3, #3
 8011338:	617b      	str	r3, [r7, #20]
 801133a:	e025      	b.n	8011388 <osMutexAcquire+0x8a>
  }
  else {
    if (rmtx != 0U) {
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d011      	beq.n	8011366 <osMutexAcquire+0x68>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8011342:	6839      	ldr	r1, [r7, #0]
 8011344:	6938      	ldr	r0, [r7, #16]
 8011346:	f000 fd70 	bl	8011e2a <xQueueTakeMutexRecursive>
 801134a:	4603      	mov	r3, r0
 801134c:	2b01      	cmp	r3, #1
 801134e:	d01b      	beq.n	8011388 <osMutexAcquire+0x8a>
        if (timeout != 0U) {
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d003      	beq.n	801135e <osMutexAcquire+0x60>
          stat = osErrorTimeout;
 8011356:	f06f 0301 	mvn.w	r3, #1
 801135a:	617b      	str	r3, [r7, #20]
 801135c:	e014      	b.n	8011388 <osMutexAcquire+0x8a>
        } else {
          stat = osErrorResource;
 801135e:	f06f 0302 	mvn.w	r3, #2
 8011362:	617b      	str	r3, [r7, #20]
 8011364:	e010      	b.n	8011388 <osMutexAcquire+0x8a>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8011366:	6839      	ldr	r1, [r7, #0]
 8011368:	6938      	ldr	r0, [r7, #16]
 801136a:	f001 f850 	bl	801240e <xQueueSemaphoreTake>
 801136e:	4603      	mov	r3, r0
 8011370:	2b01      	cmp	r3, #1
 8011372:	d009      	beq.n	8011388 <osMutexAcquire+0x8a>
        if (timeout != 0U) {
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d003      	beq.n	8011382 <osMutexAcquire+0x84>
          stat = osErrorTimeout;
 801137a:	f06f 0301 	mvn.w	r3, #1
 801137e:	617b      	str	r3, [r7, #20]
 8011380:	e002      	b.n	8011388 <osMutexAcquire+0x8a>
        } else {
          stat = osErrorResource;
 8011382:	f06f 0302 	mvn.w	r3, #2
 8011386:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 8011388:	697b      	ldr	r3, [r7, #20]
}
 801138a:	4618      	mov	r0, r3
 801138c:	3718      	adds	r7, #24
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}

08011392 <osMutexRelease>:

/*
  Release a Mutex that was acquired by osMutexAcquire.
*/
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8011392:	b580      	push	{r7, lr}
 8011394:	b086      	sub	sp, #24
 8011396:	af00      	add	r7, sp, #0
 8011398:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f023 0301 	bic.w	r3, r3, #1
 80113a0:	613b      	str	r3, [r7, #16]

  /* Extract recursive mutex flag */
  rmtx = (uint32_t)mutex_id & 1U;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f003 0301 	and.w	r3, r3, #1
 80113a8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80113aa:	2300      	movs	r3, #0
 80113ac:	617b      	str	r3, [r7, #20]

  if (IRQ_Context() != 0U) {
 80113ae:	f7ff fdea 	bl	8010f86 <IRQ_Context>
 80113b2:	4603      	mov	r3, r0
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d003      	beq.n	80113c0 <osMutexRelease+0x2e>
    stat = osErrorISR;
 80113b8:	f06f 0305 	mvn.w	r3, #5
 80113bc:	617b      	str	r3, [r7, #20]
 80113be:	e01f      	b.n	8011400 <osMutexRelease+0x6e>
  }
  else if (hMutex == NULL) {
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d103      	bne.n	80113ce <osMutexRelease+0x3c>
    stat = osErrorParameter;
 80113c6:	f06f 0303 	mvn.w	r3, #3
 80113ca:	617b      	str	r3, [r7, #20]
 80113cc:	e018      	b.n	8011400 <osMutexRelease+0x6e>
  }
  else {
    if (rmtx != 0U) {
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d009      	beq.n	80113e8 <osMutexRelease+0x56>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80113d4:	6938      	ldr	r0, [r7, #16]
 80113d6:	f000 fcfc 	bl	8011dd2 <xQueueGiveMutexRecursive>
 80113da:	4603      	mov	r3, r0
 80113dc:	2b01      	cmp	r3, #1
 80113de:	d00f      	beq.n	8011400 <osMutexRelease+0x6e>
        stat = osErrorResource;
 80113e0:	f06f 0302 	mvn.w	r3, #2
 80113e4:	617b      	str	r3, [r7, #20]
 80113e6:	e00b      	b.n	8011400 <osMutexRelease+0x6e>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80113e8:	2300      	movs	r3, #0
 80113ea:	2200      	movs	r2, #0
 80113ec:	2100      	movs	r1, #0
 80113ee:	6938      	ldr	r0, [r7, #16]
 80113f0:	f000 fd99 	bl	8011f26 <xQueueGenericSend>
 80113f4:	4603      	mov	r3, r0
 80113f6:	2b01      	cmp	r3, #1
 80113f8:	d002      	beq.n	8011400 <osMutexRelease+0x6e>
        stat = osErrorResource;
 80113fa:	f06f 0302 	mvn.w	r3, #2
 80113fe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 8011400:	697b      	ldr	r3, [r7, #20]
}
 8011402:	4618      	mov	r0, r3
 8011404:	3718      	adds	r7, #24
 8011406:	46bd      	mov	sp, r7
 8011408:	bd80      	pop	{r7, pc}

0801140a <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801140a:	b580      	push	{r7, lr}
 801140c:	b088      	sub	sp, #32
 801140e:	af02      	add	r7, sp, #8
 8011410:	60f8      	str	r0, [r7, #12]
 8011412:	60b9      	str	r1, [r7, #8]
 8011414:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
 8011416:	2300      	movs	r3, #0
 8011418:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
 801141a:	f7ff fdb4 	bl	8010f86 <IRQ_Context>
 801141e:	4603      	mov	r3, r0
 8011420:	2b00      	cmp	r3, #0
 8011422:	d175      	bne.n	8011510 <osSemaphoreNew+0x106>
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d072      	beq.n	8011510 <osSemaphoreNew+0x106>
 801142a:	68ba      	ldr	r2, [r7, #8]
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	429a      	cmp	r2, r3
 8011430:	d86e      	bhi.n	8011510 <osSemaphoreNew+0x106>
    mem = -1;
 8011432:	f04f 33ff 	mov.w	r3, #4294967295
 8011436:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d015      	beq.n	801146a <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	689b      	ldr	r3, [r3, #8]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d006      	beq.n	8011454 <osSemaphoreNew+0x4a>
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	68db      	ldr	r3, [r3, #12]
 801144a:	2b4f      	cmp	r3, #79	; 0x4f
 801144c:	d902      	bls.n	8011454 <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
 801144e:	2301      	movs	r3, #1
 8011450:	613b      	str	r3, [r7, #16]
 8011452:	e00c      	b.n	801146e <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	689b      	ldr	r3, [r3, #8]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d108      	bne.n	801146e <osSemaphoreNew+0x64>
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	68db      	ldr	r3, [r3, #12]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d104      	bne.n	801146e <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 8011464:	2300      	movs	r3, #0
 8011466:	613b      	str	r3, [r7, #16]
 8011468:	e001      	b.n	801146e <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
 801146a:	2300      	movs	r3, #0
 801146c:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011474:	d04c      	beq.n	8011510 <osSemaphoreNew+0x106>
      if (max_count == 1U) {
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	2b01      	cmp	r3, #1
 801147a:	d128      	bne.n	80114ce <osSemaphoreNew+0xc4>
        if (mem == 1) {
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	2b01      	cmp	r3, #1
 8011480:	d10a      	bne.n	8011498 <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	689b      	ldr	r3, [r3, #8]
 8011486:	2203      	movs	r2, #3
 8011488:	9200      	str	r2, [sp, #0]
 801148a:	2200      	movs	r2, #0
 801148c:	2100      	movs	r1, #0
 801148e:	2001      	movs	r0, #1
 8011490:	f000 fb9f 	bl	8011bd2 <xQueueGenericCreateStatic>
 8011494:	6178      	str	r0, [r7, #20]
 8011496:	e005      	b.n	80114a4 <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8011498:	2203      	movs	r2, #3
 801149a:	2100      	movs	r1, #0
 801149c:	2001      	movs	r0, #1
 801149e:	f000 fbde 	bl	8011c5e <xQueueGenericCreate>
 80114a2:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d022      	beq.n	80114f0 <osSemaphoreNew+0xe6>
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d01f      	beq.n	80114f0 <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80114b0:	2300      	movs	r3, #0
 80114b2:	2200      	movs	r2, #0
 80114b4:	2100      	movs	r1, #0
 80114b6:	6978      	ldr	r0, [r7, #20]
 80114b8:	f000 fd35 	bl	8011f26 <xQueueGenericSend>
 80114bc:	4603      	mov	r3, r0
 80114be:	2b01      	cmp	r3, #1
 80114c0:	d016      	beq.n	80114f0 <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
 80114c2:	6978      	ldr	r0, [r7, #20]
 80114c4:	f001 f911 	bl	80126ea <vQueueDelete>
            hSemaphore = NULL;
 80114c8:	2300      	movs	r3, #0
 80114ca:	617b      	str	r3, [r7, #20]
 80114cc:	e010      	b.n	80114f0 <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	2b01      	cmp	r3, #1
 80114d2:	d108      	bne.n	80114e6 <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	689b      	ldr	r3, [r3, #8]
 80114d8:	461a      	mov	r2, r3
 80114da:	68b9      	ldr	r1, [r7, #8]
 80114dc:	68f8      	ldr	r0, [r7, #12]
 80114de:	f000 fcd2 	bl	8011e86 <xQueueCreateCountingSemaphoreStatic>
 80114e2:	6178      	str	r0, [r7, #20]
 80114e4:	e004      	b.n	80114f0 <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80114e6:	68b9      	ldr	r1, [r7, #8]
 80114e8:	68f8      	ldr	r0, [r7, #12]
 80114ea:	f000 fcf6 	bl	8011eda <xQueueCreateCountingSemaphore>
 80114ee:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d00c      	beq.n	8011510 <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d009      	beq.n	8011510 <osSemaphoreNew+0x106>
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d005      	beq.n	8011510 <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	4619      	mov	r1, r3
 801150a:	6978      	ldr	r0, [r7, #20]
 801150c:	f001 fa30 	bl	8012970 <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
 8011510:	697b      	ldr	r3, [r7, #20]
}
 8011512:	4618      	mov	r0, r3
 8011514:	3718      	adds	r7, #24
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}
	...

0801151c <osSemaphoreAcquire>:

/*
  Acquire a Semaphore token or timeout if no tokens are available.
*/
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801151c:	b580      	push	{r7, lr}
 801151e:	b086      	sub	sp, #24
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801152a:	2300      	movs	r3, #0
 801152c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d103      	bne.n	801153c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011534:	f06f 0303 	mvn.w	r3, #3
 8011538:	617b      	str	r3, [r7, #20]
 801153a:	e034      	b.n	80115a6 <osSemaphoreAcquire+0x8a>
  }
  else if (IRQ_Context() != 0U) {
 801153c:	f7ff fd23 	bl	8010f86 <IRQ_Context>
 8011540:	4603      	mov	r3, r0
 8011542:	2b00      	cmp	r3, #0
 8011544:	d01e      	beq.n	8011584 <osSemaphoreAcquire+0x68>
    if (timeout != 0U) {
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d003      	beq.n	8011554 <osSemaphoreAcquire+0x38>
      stat = osErrorParameter;
 801154c:	f06f 0303 	mvn.w	r3, #3
 8011550:	617b      	str	r3, [r7, #20]
 8011552:	e028      	b.n	80115a6 <osSemaphoreAcquire+0x8a>
    }
    else {
      yield = pdFALSE;
 8011554:	2300      	movs	r3, #0
 8011556:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011558:	f107 030c 	add.w	r3, r7, #12
 801155c:	461a      	mov	r2, r3
 801155e:	2100      	movs	r1, #0
 8011560:	6938      	ldr	r0, [r7, #16]
 8011562:	f001 f82b 	bl	80125bc <xQueueReceiveFromISR>
 8011566:	4603      	mov	r3, r0
 8011568:	2b01      	cmp	r3, #1
 801156a:	d003      	beq.n	8011574 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
 801156c:	f06f 0302 	mvn.w	r3, #2
 8011570:	617b      	str	r3, [r7, #20]
 8011572:	e018      	b.n	80115a6 <osSemaphoreAcquire+0x8a>
      } else {
        portYIELD_FROM_ISR (yield);
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d015      	beq.n	80115a6 <osSemaphoreAcquire+0x8a>
 801157a:	4b0d      	ldr	r3, [pc, #52]	; (80115b0 <osSemaphoreAcquire+0x94>)
 801157c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011580:	601a      	str	r2, [r3, #0]
 8011582:	e010      	b.n	80115a6 <osSemaphoreAcquire+0x8a>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011584:	6839      	ldr	r1, [r7, #0]
 8011586:	6938      	ldr	r0, [r7, #16]
 8011588:	f000 ff41 	bl	801240e <xQueueSemaphoreTake>
 801158c:	4603      	mov	r3, r0
 801158e:	2b01      	cmp	r3, #1
 8011590:	d009      	beq.n	80115a6 <osSemaphoreAcquire+0x8a>
      if (timeout != 0U) {
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d003      	beq.n	80115a0 <osSemaphoreAcquire+0x84>
        stat = osErrorTimeout;
 8011598:	f06f 0301 	mvn.w	r3, #1
 801159c:	617b      	str	r3, [r7, #20]
 801159e:	e002      	b.n	80115a6 <osSemaphoreAcquire+0x8a>
      } else {
        stat = osErrorResource;
 80115a0:	f06f 0302 	mvn.w	r3, #2
 80115a4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 80115a6:	697b      	ldr	r3, [r7, #20]
}
 80115a8:	4618      	mov	r0, r3
 80115aa:	3718      	adds	r7, #24
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}
 80115b0:	e000ed04 	.word	0xe000ed04

080115b4 <osSemaphoreRelease>:

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b086      	sub	sp, #24
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80115c0:	2300      	movs	r3, #0
 80115c2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d103      	bne.n	80115d2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80115ca:	f06f 0303 	mvn.w	r3, #3
 80115ce:	617b      	str	r3, [r7, #20]
 80115d0:	e027      	b.n	8011622 <osSemaphoreRelease+0x6e>
  }
  else if (IRQ_Context() != 0U) {
 80115d2:	f7ff fcd8 	bl	8010f86 <IRQ_Context>
 80115d6:	4603      	mov	r3, r0
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d016      	beq.n	801160a <osSemaphoreRelease+0x56>
    yield = pdFALSE;
 80115dc:	2300      	movs	r3, #0
 80115de:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80115e0:	f107 030c 	add.w	r3, r7, #12
 80115e4:	4619      	mov	r1, r3
 80115e6:	6938      	ldr	r0, [r7, #16]
 80115e8:	f000 fde6 	bl	80121b8 <xQueueGiveFromISR>
 80115ec:	4603      	mov	r3, r0
 80115ee:	2b01      	cmp	r3, #1
 80115f0:	d003      	beq.n	80115fa <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 80115f2:	f06f 0302 	mvn.w	r3, #2
 80115f6:	617b      	str	r3, [r7, #20]
 80115f8:	e013      	b.n	8011622 <osSemaphoreRelease+0x6e>
    } else {
      portYIELD_FROM_ISR (yield);
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d010      	beq.n	8011622 <osSemaphoreRelease+0x6e>
 8011600:	4b0a      	ldr	r3, [pc, #40]	; (801162c <osSemaphoreRelease+0x78>)
 8011602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011606:	601a      	str	r2, [r3, #0]
 8011608:	e00b      	b.n	8011622 <osSemaphoreRelease+0x6e>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801160a:	2300      	movs	r3, #0
 801160c:	2200      	movs	r2, #0
 801160e:	2100      	movs	r1, #0
 8011610:	6938      	ldr	r0, [r7, #16]
 8011612:	f000 fc88 	bl	8011f26 <xQueueGenericSend>
 8011616:	4603      	mov	r3, r0
 8011618:	2b01      	cmp	r3, #1
 801161a:	d002      	beq.n	8011622 <osSemaphoreRelease+0x6e>
      stat = osErrorResource;
 801161c:	f06f 0302 	mvn.w	r3, #2
 8011620:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
 8011622:	697b      	ldr	r3, [r7, #20]
}
 8011624:	4618      	mov	r0, r3
 8011626:	3718      	adds	r7, #24
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}
 801162c:	e000ed04 	.word	0xe000ed04

08011630 <osSemaphoreDelete>:
}

/*
  Delete a Semaphore object.
*/
osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8011630:	b580      	push	{r7, lr}
 8011632:	b084      	sub	sp, #16
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	60bb      	str	r3, [r7, #8]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IRQ_Context() != 0U) {
 801163c:	f7ff fca3 	bl	8010f86 <IRQ_Context>
 8011640:	4603      	mov	r3, r0
 8011642:	2b00      	cmp	r3, #0
 8011644:	d003      	beq.n	801164e <osSemaphoreDelete+0x1e>
    stat = osErrorISR;
 8011646:	f06f 0305 	mvn.w	r3, #5
 801164a:	60fb      	str	r3, [r7, #12]
 801164c:	e00e      	b.n	801166c <osSemaphoreDelete+0x3c>
  }
  else if (hSemaphore == NULL) {
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d103      	bne.n	801165c <osSemaphoreDelete+0x2c>
    stat = osErrorParameter;
 8011654:	f06f 0303 	mvn.w	r3, #3
 8011658:	60fb      	str	r3, [r7, #12]
 801165a:	e007      	b.n	801166c <osSemaphoreDelete+0x3c>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801165c:	68b8      	ldr	r0, [r7, #8]
 801165e:	f001 f9cb 	bl	80129f8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8011662:	2300      	movs	r3, #0
 8011664:	60fb      	str	r3, [r7, #12]
    vSemaphoreDelete (hSemaphore);
 8011666:	68b8      	ldr	r0, [r7, #8]
 8011668:	f001 f83f 	bl	80126ea <vQueueDelete>
#else
  stat = osError;
#endif

  /* Return execution status */
  return (stat);
 801166c:	68fb      	ldr	r3, [r7, #12]
}
 801166e:	4618      	mov	r0, r3
 8011670:	3710      	adds	r7, #16
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}

08011676 <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011676:	b580      	push	{r7, lr}
 8011678:	b088      	sub	sp, #32
 801167a:	af02      	add	r7, sp, #8
 801167c:	60f8      	str	r0, [r7, #12]
 801167e:	60b9      	str	r1, [r7, #8]
 8011680:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 8011682:	2300      	movs	r3, #0
 8011684:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 8011686:	f7ff fc7e 	bl	8010f86 <IRQ_Context>
 801168a:	4603      	mov	r3, r0
 801168c:	2b00      	cmp	r3, #0
 801168e:	d15f      	bne.n	8011750 <osMessageQueueNew+0xda>
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d05c      	beq.n	8011750 <osMessageQueueNew+0xda>
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d059      	beq.n	8011750 <osMessageQueueNew+0xda>
    mem = -1;
 801169c:	f04f 33ff 	mov.w	r3, #4294967295
 80116a0:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d029      	beq.n	80116fc <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	689b      	ldr	r3, [r3, #8]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d012      	beq.n	80116d6 <osMessageQueueNew+0x60>
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	68db      	ldr	r3, [r3, #12]
 80116b4:	2b4f      	cmp	r3, #79	; 0x4f
 80116b6:	d90e      	bls.n	80116d6 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00a      	beq.n	80116d6 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	695a      	ldr	r2, [r3, #20]
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	68b9      	ldr	r1, [r7, #8]
 80116c8:	fb01 f303 	mul.w	r3, r1, r3
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d302      	bcc.n	80116d6 <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 80116d0:	2301      	movs	r3, #1
 80116d2:	613b      	str	r3, [r7, #16]
 80116d4:	e014      	b.n	8011700 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	689b      	ldr	r3, [r3, #8]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d110      	bne.n	8011700 <osMessageQueueNew+0x8a>
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	68db      	ldr	r3, [r3, #12]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d10c      	bne.n	8011700 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d108      	bne.n	8011700 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	695b      	ldr	r3, [r3, #20]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d104      	bne.n	8011700 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 80116f6:	2300      	movs	r3, #0
 80116f8:	613b      	str	r3, [r7, #16]
 80116fa:	e001      	b.n	8011700 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 80116fc:	2300      	movs	r3, #0
 80116fe:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	2b01      	cmp	r3, #1
 8011704:	d10b      	bne.n	801171e <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	691a      	ldr	r2, [r3, #16]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	689b      	ldr	r3, [r3, #8]
 801170e:	2100      	movs	r1, #0
 8011710:	9100      	str	r1, [sp, #0]
 8011712:	68b9      	ldr	r1, [r7, #8]
 8011714:	68f8      	ldr	r0, [r7, #12]
 8011716:	f000 fa5c 	bl	8011bd2 <xQueueGenericCreateStatic>
 801171a:	6178      	str	r0, [r7, #20]
 801171c:	e008      	b.n	8011730 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d105      	bne.n	8011730 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011724:	2200      	movs	r2, #0
 8011726:	68b9      	ldr	r1, [r7, #8]
 8011728:	68f8      	ldr	r0, [r7, #12]
 801172a:	f000 fa98 	bl	8011c5e <xQueueGenericCreate>
 801172e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011730:	697b      	ldr	r3, [r7, #20]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d00c      	beq.n	8011750 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d009      	beq.n	8011750 <osMessageQueueNew+0xda>
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d005      	beq.n	8011750 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	4619      	mov	r1, r3
 801174a:	6978      	ldr	r0, [r7, #20]
 801174c:	f001 f910 	bl	8012970 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 8011750:	697b      	ldr	r3, [r7, #20]
}
 8011752:	4618      	mov	r0, r3
 8011754:	3718      	adds	r7, #24
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}
	...

0801175c <osMessageQueuePut>:
  Put a Message into a Queue or timeout if Queue is full.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801175c:	b580      	push	{r7, lr}
 801175e:	b088      	sub	sp, #32
 8011760:	af00      	add	r7, sp, #0
 8011762:	60f8      	str	r0, [r7, #12]
 8011764:	60b9      	str	r1, [r7, #8]
 8011766:	603b      	str	r3, [r7, #0]
 8011768:	4613      	mov	r3, r2
 801176a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011770:	2300      	movs	r3, #0
 8011772:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 8011774:	f7ff fc07 	bl	8010f86 <IRQ_Context>
 8011778:	4603      	mov	r3, r0
 801177a:	2b00      	cmp	r3, #0
 801177c:	d024      	beq.n	80117c8 <osMessageQueuePut+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801177e:	69bb      	ldr	r3, [r7, #24]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d005      	beq.n	8011790 <osMessageQueuePut+0x34>
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d002      	beq.n	8011790 <osMessageQueuePut+0x34>
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d003      	beq.n	8011798 <osMessageQueuePut+0x3c>
      stat = osErrorParameter;
 8011790:	f06f 0303 	mvn.w	r3, #3
 8011794:	61fb      	str	r3, [r7, #28]
 8011796:	e034      	b.n	8011802 <osMessageQueuePut+0xa6>
    }
    else {
      yield = pdFALSE;
 8011798:	2300      	movs	r3, #0
 801179a:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801179c:	f107 0214 	add.w	r2, r7, #20
 80117a0:	2300      	movs	r3, #0
 80117a2:	68b9      	ldr	r1, [r7, #8]
 80117a4:	69b8      	ldr	r0, [r7, #24]
 80117a6:	f000 fc87 	bl	80120b8 <xQueueGenericSendFromISR>
 80117aa:	4603      	mov	r3, r0
 80117ac:	2b01      	cmp	r3, #1
 80117ae:	d003      	beq.n	80117b8 <osMessageQueuePut+0x5c>
        stat = osErrorResource;
 80117b0:	f06f 0302 	mvn.w	r3, #2
 80117b4:	61fb      	str	r3, [r7, #28]
 80117b6:	e024      	b.n	8011802 <osMessageQueuePut+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d021      	beq.n	8011802 <osMessageQueuePut+0xa6>
 80117be:	4b13      	ldr	r3, [pc, #76]	; (801180c <osMessageQueuePut+0xb0>)
 80117c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117c4:	601a      	str	r2, [r3, #0]
 80117c6:	e01c      	b.n	8011802 <osMessageQueuePut+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80117c8:	69bb      	ldr	r3, [r7, #24]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d002      	beq.n	80117d4 <osMessageQueuePut+0x78>
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d103      	bne.n	80117dc <osMessageQueuePut+0x80>
      stat = osErrorParameter;
 80117d4:	f06f 0303 	mvn.w	r3, #3
 80117d8:	61fb      	str	r3, [r7, #28]
 80117da:	e012      	b.n	8011802 <osMessageQueuePut+0xa6>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80117dc:	2300      	movs	r3, #0
 80117de:	683a      	ldr	r2, [r7, #0]
 80117e0:	68b9      	ldr	r1, [r7, #8]
 80117e2:	69b8      	ldr	r0, [r7, #24]
 80117e4:	f000 fb9f 	bl	8011f26 <xQueueGenericSend>
 80117e8:	4603      	mov	r3, r0
 80117ea:	2b01      	cmp	r3, #1
 80117ec:	d009      	beq.n	8011802 <osMessageQueuePut+0xa6>
        if (timeout != 0U) {
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d003      	beq.n	80117fc <osMessageQueuePut+0xa0>
          stat = osErrorTimeout;
 80117f4:	f06f 0301 	mvn.w	r3, #1
 80117f8:	61fb      	str	r3, [r7, #28]
 80117fa:	e002      	b.n	8011802 <osMessageQueuePut+0xa6>
        } else {
          stat = osErrorResource;
 80117fc:	f06f 0302 	mvn.w	r3, #2
 8011800:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 8011802:	69fb      	ldr	r3, [r7, #28]
}
 8011804:	4618      	mov	r0, r3
 8011806:	3720      	adds	r7, #32
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}
 801180c:	e000ed04 	.word	0xe000ed04

08011810 <osMessageQueueGet>:
  Get a Message from a Queue or timeout if Queue is empty.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011810:	b580      	push	{r7, lr}
 8011812:	b088      	sub	sp, #32
 8011814:	af00      	add	r7, sp, #0
 8011816:	60f8      	str	r0, [r7, #12]
 8011818:	60b9      	str	r1, [r7, #8]
 801181a:	607a      	str	r2, [r7, #4]
 801181c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011822:	2300      	movs	r3, #0
 8011824:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 8011826:	f7ff fbae 	bl	8010f86 <IRQ_Context>
 801182a:	4603      	mov	r3, r0
 801182c:	2b00      	cmp	r3, #0
 801182e:	d024      	beq.n	801187a <osMessageQueueGet+0x6a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011830:	69bb      	ldr	r3, [r7, #24]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d005      	beq.n	8011842 <osMessageQueueGet+0x32>
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d002      	beq.n	8011842 <osMessageQueueGet+0x32>
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d003      	beq.n	801184a <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8011842:	f06f 0303 	mvn.w	r3, #3
 8011846:	61fb      	str	r3, [r7, #28]
 8011848:	e033      	b.n	80118b2 <osMessageQueueGet+0xa2>
    }
    else {
      yield = pdFALSE;
 801184a:	2300      	movs	r3, #0
 801184c:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801184e:	f107 0314 	add.w	r3, r7, #20
 8011852:	461a      	mov	r2, r3
 8011854:	68b9      	ldr	r1, [r7, #8]
 8011856:	69b8      	ldr	r0, [r7, #24]
 8011858:	f000 feb0 	bl	80125bc <xQueueReceiveFromISR>
 801185c:	4603      	mov	r3, r0
 801185e:	2b01      	cmp	r3, #1
 8011860:	d003      	beq.n	801186a <osMessageQueueGet+0x5a>
        stat = osErrorResource;
 8011862:	f06f 0302 	mvn.w	r3, #2
 8011866:	61fb      	str	r3, [r7, #28]
 8011868:	e023      	b.n	80118b2 <osMessageQueueGet+0xa2>
      } else {
        portYIELD_FROM_ISR (yield);
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d020      	beq.n	80118b2 <osMessageQueueGet+0xa2>
 8011870:	4b12      	ldr	r3, [pc, #72]	; (80118bc <osMessageQueueGet+0xac>)
 8011872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011876:	601a      	str	r2, [r3, #0]
 8011878:	e01b      	b.n	80118b2 <osMessageQueueGet+0xa2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801187a:	69bb      	ldr	r3, [r7, #24]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d002      	beq.n	8011886 <osMessageQueueGet+0x76>
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d103      	bne.n	801188e <osMessageQueueGet+0x7e>
      stat = osErrorParameter;
 8011886:	f06f 0303 	mvn.w	r3, #3
 801188a:	61fb      	str	r3, [r7, #28]
 801188c:	e011      	b.n	80118b2 <osMessageQueueGet+0xa2>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801188e:	683a      	ldr	r2, [r7, #0]
 8011890:	68b9      	ldr	r1, [r7, #8]
 8011892:	69b8      	ldr	r0, [r7, #24]
 8011894:	f000 fd02 	bl	801229c <xQueueReceive>
 8011898:	4603      	mov	r3, r0
 801189a:	2b01      	cmp	r3, #1
 801189c:	d009      	beq.n	80118b2 <osMessageQueueGet+0xa2>
        if (timeout != 0U) {
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d003      	beq.n	80118ac <osMessageQueueGet+0x9c>
          stat = osErrorTimeout;
 80118a4:	f06f 0301 	mvn.w	r3, #1
 80118a8:	61fb      	str	r3, [r7, #28]
 80118aa:	e002      	b.n	80118b2 <osMessageQueueGet+0xa2>
        } else {
          stat = osErrorResource;
 80118ac:	f06f 0302 	mvn.w	r3, #2
 80118b0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 80118b2:	69fb      	ldr	r3, [r7, #28]
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	3720      	adds	r7, #32
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}
 80118bc:	e000ed04 	.word	0xe000ed04

080118c0 <osMessageQueueGetCount>:
}

/*
  Get number of queued messages in a Message Queue.
*/
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b084      	sub	sp, #16
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	60bb      	str	r3, [r7, #8]
  UBaseType_t count;

  if (hQueue == NULL) {
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d102      	bne.n	80118d8 <osMessageQueueGetCount+0x18>
    count = 0U;
 80118d2:	2300      	movs	r3, #0
 80118d4:	60fb      	str	r3, [r7, #12]
 80118d6:	e00d      	b.n	80118f4 <osMessageQueueGetCount+0x34>
  }
  else if (IRQ_Context() != 0U) {
 80118d8:	f7ff fb55 	bl	8010f86 <IRQ_Context>
 80118dc:	4603      	mov	r3, r0
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d004      	beq.n	80118ec <osMessageQueueGetCount+0x2c>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80118e2:	68b8      	ldr	r0, [r7, #8]
 80118e4:	f000 feed 	bl	80126c2 <uxQueueMessagesWaitingFromISR>
 80118e8:	60f8      	str	r0, [r7, #12]
 80118ea:	e003      	b.n	80118f4 <osMessageQueueGetCount+0x34>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80118ec:	68b8      	ldr	r0, [r7, #8]
 80118ee:	f000 fed2 	bl	8012696 <uxQueueMessagesWaiting>
 80118f2:	60f8      	str	r0, [r7, #12]
  }

  /* Return number of queued messages */
  return ((uint32_t)count);
 80118f4:	68fb      	ldr	r3, [r7, #12]
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3710      	adds	r7, #16
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}

080118fe <osMessageQueueDelete>:
}

/*
  Delete a Message Queue object.
*/
osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80118fe:	b580      	push	{r7, lr}
 8011900:	b084      	sub	sp, #16
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	60bb      	str	r3, [r7, #8]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IRQ_Context() != 0U) {
 801190a:	f7ff fb3c 	bl	8010f86 <IRQ_Context>
 801190e:	4603      	mov	r3, r0
 8011910:	2b00      	cmp	r3, #0
 8011912:	d003      	beq.n	801191c <osMessageQueueDelete+0x1e>
    stat = osErrorISR;
 8011914:	f06f 0305 	mvn.w	r3, #5
 8011918:	60fb      	str	r3, [r7, #12]
 801191a:	e00e      	b.n	801193a <osMessageQueueDelete+0x3c>
  }
  else if (hQueue == NULL) {
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d103      	bne.n	801192a <osMessageQueueDelete+0x2c>
    stat = osErrorParameter;
 8011922:	f06f 0303 	mvn.w	r3, #3
 8011926:	60fb      	str	r3, [r7, #12]
 8011928:	e007      	b.n	801193a <osMessageQueueDelete+0x3c>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 801192a:	68b8      	ldr	r0, [r7, #8]
 801192c:	f001 f864 	bl	80129f8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8011930:	2300      	movs	r3, #0
 8011932:	60fb      	str	r3, [r7, #12]
    vQueueDelete (hQueue);
 8011934:	68b8      	ldr	r0, [r7, #8]
 8011936:	f000 fed8 	bl	80126ea <vQueueDelete>
#else
  stat = osError;
#endif

  /* Return execution status */
  return (stat);
 801193a:	68fb      	ldr	r3, [r7, #12]
}
 801193c:	4618      	mov	r0, r3
 801193e:	3710      	adds	r7, #16
 8011940:	46bd      	mov	sp, r7
 8011942:	bd80      	pop	{r7, pc}

08011944 <vApplicationMallocFailedHook>:

/**
  Dummy implementation of the callback function vApplicationMallocFailedHook().
*/
#if (configUSE_MALLOC_FAILED_HOOK == 1)
__WEAK void vApplicationMallocFailedHook (void) {
 8011944:	b580      	push	{r7, lr}
 8011946:	af00      	add	r7, sp, #0
  /* Assert when malloc failed hook is enabled but no application defined function exists */
  configASSERT(0);
 8011948:	f002 fe96 	bl	8014678 <ulSetInterruptMask>
 801194c:	e7fe      	b.n	801194c <vApplicationMallocFailedHook+0x8>

0801194e <vApplicationDaemonTaskStartupHook>:

/**
  Dummy implementation of the callback function vApplicationDaemonTaskStartupHook().
*/
#if (configUSE_DAEMON_TASK_STARTUP_HOOK == 1)
__WEAK void vApplicationDaemonTaskStartupHook (void){}
 801194e:	b480      	push	{r7}
 8011950:	af00      	add	r7, sp, #0
 8011952:	bf00      	nop
 8011954:	46bd      	mov	sp, r7
 8011956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195a:	4770      	bx	lr

0801195c <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801195c:	b480      	push	{r7}
 801195e:	b085      	sub	sp, #20
 8011960:	af00      	add	r7, sp, #0
 8011962:	60f8      	str	r0, [r7, #12]
 8011964:	60b9      	str	r1, [r7, #8]
 8011966:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	4a07      	ldr	r2, [pc, #28]	; (8011988 <vApplicationGetIdleTaskMemory+0x2c>)
 801196c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	4a06      	ldr	r2, [pc, #24]	; (801198c <vApplicationGetIdleTaskMemory+0x30>)
 8011972:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f44f 7280 	mov.w	r2, #256	; 0x100
 801197a:	601a      	str	r2, [r3, #0]
}
 801197c:	bf00      	nop
 801197e:	3714      	adds	r7, #20
 8011980:	46bd      	mov	sp, r7
 8011982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011986:	4770      	bx	lr
 8011988:	20055a98 	.word	0x20055a98
 801198c:	20055af4 	.word	0x20055af4

08011990 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011990:	b480      	push	{r7}
 8011992:	b085      	sub	sp, #20
 8011994:	af00      	add	r7, sp, #0
 8011996:	60f8      	str	r0, [r7, #12]
 8011998:	60b9      	str	r1, [r7, #8]
 801199a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	4a07      	ldr	r2, [pc, #28]	; (80119bc <vApplicationGetTimerTaskMemory+0x2c>)
 80119a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	4a06      	ldr	r2, [pc, #24]	; (80119c0 <vApplicationGetTimerTaskMemory+0x30>)
 80119a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80119ae:	601a      	str	r2, [r3, #0]
}
 80119b0:	bf00      	nop
 80119b2:	3714      	adds	r7, #20
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr
 80119bc:	20055ef4 	.word	0x20055ef4
 80119c0:	20055f50 	.word	0x20055f50

080119c4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80119c4:	b480      	push	{r7}
 80119c6:	b083      	sub	sp, #12
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f103 0208 	add.w	r2, r3, #8
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f04f 32ff 	mov.w	r2, #4294967295
 80119dc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f103 0208 	add.w	r2, r3, #8
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f103 0208 	add.w	r2, r3, #8
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	2200      	movs	r2, #0
 80119f6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80119f8:	bf00      	nop
 80119fa:	370c      	adds	r7, #12
 80119fc:	46bd      	mov	sp, r7
 80119fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a02:	4770      	bx	lr

08011a04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011a04:	b480      	push	{r7}
 8011a06:	b083      	sub	sp, #12
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011a12:	bf00      	nop
 8011a14:	370c      	adds	r7, #12
 8011a16:	46bd      	mov	sp, r7
 8011a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1c:	4770      	bx	lr

08011a1e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8011a1e:	b480      	push	{r7}
 8011a20:	b085      	sub	sp, #20
 8011a22:	af00      	add	r7, sp, #0
 8011a24:	6078      	str	r0, [r7, #4]
 8011a26:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a34:	d103      	bne.n	8011a3e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	691b      	ldr	r3, [r3, #16]
 8011a3a:	60fb      	str	r3, [r7, #12]
 8011a3c:	e00c      	b.n	8011a58 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	3308      	adds	r3, #8
 8011a42:	60fb      	str	r3, [r7, #12]
 8011a44:	e002      	b.n	8011a4c <vListInsert+0x2e>
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	685b      	ldr	r3, [r3, #4]
 8011a4a:	60fb      	str	r3, [r7, #12]
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	68ba      	ldr	r2, [r7, #8]
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d2f6      	bcs.n	8011a46 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	685a      	ldr	r2, [r3, #4]
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	683a      	ldr	r2, [r7, #0]
 8011a66:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	68fa      	ldr	r2, [r7, #12]
 8011a6c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	683a      	ldr	r2, [r7, #0]
 8011a72:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	1c5a      	adds	r2, r3, #1
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	601a      	str	r2, [r3, #0]
}
 8011a84:	bf00      	nop
 8011a86:	3714      	adds	r7, #20
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8e:	4770      	bx	lr

08011a90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011a90:	b480      	push	{r7}
 8011a92:	b085      	sub	sp, #20
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	691b      	ldr	r3, [r3, #16]
 8011a9c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	685b      	ldr	r3, [r3, #4]
 8011aa2:	687a      	ldr	r2, [r7, #4]
 8011aa4:	6892      	ldr	r2, [r2, #8]
 8011aa6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	689b      	ldr	r3, [r3, #8]
 8011aac:	687a      	ldr	r2, [r7, #4]
 8011aae:	6852      	ldr	r2, [r2, #4]
 8011ab0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	685b      	ldr	r3, [r3, #4]
 8011ab6:	687a      	ldr	r2, [r7, #4]
 8011ab8:	429a      	cmp	r2, r3
 8011aba:	d103      	bne.n	8011ac4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	689a      	ldr	r2, [r3, #8]
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	1e5a      	subs	r2, r3, #1
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	681b      	ldr	r3, [r3, #0]
}
 8011ad8:	4618      	mov	r0, r3
 8011ada:	3714      	adds	r7, #20
 8011adc:	46bd      	mov	sp, r7
 8011ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae2:	4770      	bx	lr

08011ae4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b084      	sub	sp, #16
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8011aee:	2301      	movs	r3, #1
 8011af0:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d102      	bne.n	8011b02 <xQueueGenericReset+0x1e>
 8011afc:	f002 fdbc 	bl	8014678 <ulSetInterruptMask>
 8011b00:	e7fe      	b.n	8011b00 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d057      	beq.n	8011bb8 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d053      	beq.n	8011bb8 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b18:	2100      	movs	r1, #0
 8011b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d000      	beq.n	8011b24 <xQueueGenericReset+0x40>
 8011b22:	2101      	movs	r1, #1
 8011b24:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d146      	bne.n	8011bb8 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 8011b2a:	f002 fc67 	bl	80143fc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	681a      	ldr	r2, [r3, #0]
 8011b32:	68bb      	ldr	r3, [r7, #8]
 8011b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b36:	68b9      	ldr	r1, [r7, #8]
 8011b38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011b3a:	fb01 f303 	mul.w	r3, r1, r3
 8011b3e:	441a      	add	r2, r3
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	2200      	movs	r2, #0
 8011b48:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	681a      	ldr	r2, [r3, #0]
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b5a:	3b01      	subs	r3, #1
 8011b5c:	68b9      	ldr	r1, [r7, #8]
 8011b5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011b60:	fb01 f303 	mul.w	r3, r1, r3
 8011b64:	441a      	add	r2, r3
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	22ff      	movs	r2, #255	; 0xff
 8011b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	22ff      	movs	r2, #255	; 0xff
 8011b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d10e      	bne.n	8011b9e <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	691b      	ldr	r3, [r3, #16]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d014      	beq.n	8011bb2 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	3310      	adds	r3, #16
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f001 fcc3 	bl	8013518 <xTaskRemoveFromEventList>
 8011b92:	4603      	mov	r3, r0
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d00c      	beq.n	8011bb2 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8011b98:	f002 fc1e 	bl	80143d8 <vPortYield>
 8011b9c:	e009      	b.n	8011bb2 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	3310      	adds	r3, #16
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7ff ff0e 	bl	80119c4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	3324      	adds	r3, #36	; 0x24
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7ff ff09 	bl	80119c4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8011bb2:	f002 fc35 	bl	8014420 <vPortExitCritical>
 8011bb6:	e001      	b.n	8011bbc <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d102      	bne.n	8011bc8 <xQueueGenericReset+0xe4>
 8011bc2:	f002 fd59 	bl	8014678 <ulSetInterruptMask>
 8011bc6:	e7fe      	b.n	8011bc6 <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	3710      	adds	r7, #16
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}

08011bd2 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8011bd2:	b580      	push	{r7, lr}
 8011bd4:	b088      	sub	sp, #32
 8011bd6:	af02      	add	r7, sp, #8
 8011bd8:	60f8      	str	r0, [r7, #12]
 8011bda:	60b9      	str	r1, [r7, #8]
 8011bdc:	607a      	str	r2, [r7, #4]
 8011bde:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8011be0:	2300      	movs	r3, #0
 8011be2:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d102      	bne.n	8011bf0 <xQueueGenericCreateStatic+0x1e>
 8011bea:	f002 fd45 	bl	8014678 <ulSetInterruptMask>
 8011bee:	e7fe      	b.n	8011bee <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d028      	beq.n	8011c48 <xQueueGenericCreateStatic+0x76>
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d025      	beq.n	8011c48 <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d002      	beq.n	8011c08 <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8011c02:	68bb      	ldr	r3, [r7, #8]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d01f      	beq.n	8011c48 <xQueueGenericCreateStatic+0x76>
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d102      	bne.n	8011c14 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d119      	bne.n	8011c48 <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8011c14:	2350      	movs	r3, #80	; 0x50
 8011c16:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	2b50      	cmp	r3, #80	; 0x50
 8011c1c:	d002      	beq.n	8011c24 <xQueueGenericCreateStatic+0x52>
 8011c1e:	f002 fd2b 	bl	8014678 <ulSetInterruptMask>
 8011c22:	e7fe      	b.n	8011c22 <xQueueGenericCreateStatic+0x50>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8011c24:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	2201      	movs	r2, #1
 8011c2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011c32:	f897 2020 	ldrb.w	r2, [r7, #32]
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	9300      	str	r3, [sp, #0]
 8011c3a:	4613      	mov	r3, r2
 8011c3c:	687a      	ldr	r2, [r7, #4]
 8011c3e:	68b9      	ldr	r1, [r7, #8]
 8011c40:	68f8      	ldr	r0, [r7, #12]
 8011c42:	f000 f856 	bl	8011cf2 <prvInitialiseNewQueue>
 8011c46:	e005      	b.n	8011c54 <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d102      	bne.n	8011c54 <xQueueGenericCreateStatic+0x82>
 8011c4e:	f002 fd13 	bl	8014678 <ulSetInterruptMask>
 8011c52:	e7fe      	b.n	8011c52 <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8011c54:	697b      	ldr	r3, [r7, #20]
    }
 8011c56:	4618      	mov	r0, r3
 8011c58:	3718      	adds	r7, #24
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}

08011c5e <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8011c5e:	b580      	push	{r7, lr}
 8011c60:	b08a      	sub	sp, #40	; 0x28
 8011c62:	af02      	add	r7, sp, #8
 8011c64:	60f8      	str	r0, [r7, #12]
 8011c66:	60b9      	str	r1, [r7, #8]
 8011c68:	4613      	mov	r3, r2
 8011c6a:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d032      	beq.n	8011cdc <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8011c76:	2100      	movs	r1, #0
 8011c78:	68ba      	ldr	r2, [r7, #8]
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	fba3 2302 	umull	r2, r3, r3, r2
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d000      	beq.n	8011c86 <xQueueGenericCreate+0x28>
 8011c84:	2101      	movs	r1, #1
 8011c86:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d127      	bne.n	8011cdc <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	68ba      	ldr	r2, [r7, #8]
 8011c90:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8011c94:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8011c98:	d820      	bhi.n	8011cdc <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	68ba      	ldr	r2, [r7, #8]
 8011c9e:	fb02 f303 	mul.w	r3, r2, r3
 8011ca2:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011ca4:	69bb      	ldr	r3, [r7, #24]
 8011ca6:	3350      	adds	r3, #80	; 0x50
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f002 fd4d 	bl	8014748 <pvPortMalloc>
 8011cae:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8011cb0:	69fb      	ldr	r3, [r7, #28]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d018      	beq.n	8011ce8 <xQueueGenericCreate+0x8a>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011cba:	697b      	ldr	r3, [r7, #20]
 8011cbc:	3350      	adds	r3, #80	; 0x50
 8011cbe:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011cc0:	69fb      	ldr	r3, [r7, #28]
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011cc8:	79fa      	ldrb	r2, [r7, #7]
 8011cca:	69fb      	ldr	r3, [r7, #28]
 8011ccc:	9300      	str	r3, [sp, #0]
 8011cce:	4613      	mov	r3, r2
 8011cd0:	697a      	ldr	r2, [r7, #20]
 8011cd2:	68b9      	ldr	r1, [r7, #8]
 8011cd4:	68f8      	ldr	r0, [r7, #12]
 8011cd6:	f000 f80c 	bl	8011cf2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8011cda:	e005      	b.n	8011ce8 <xQueueGenericCreate+0x8a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8011cdc:	69fb      	ldr	r3, [r7, #28]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d102      	bne.n	8011ce8 <xQueueGenericCreate+0x8a>
 8011ce2:	f002 fcc9 	bl	8014678 <ulSetInterruptMask>
 8011ce6:	e7fe      	b.n	8011ce6 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8011ce8:	69fb      	ldr	r3, [r7, #28]
    }
 8011cea:	4618      	mov	r0, r3
 8011cec:	3720      	adds	r7, #32
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}

08011cf2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8011cf2:	b580      	push	{r7, lr}
 8011cf4:	b084      	sub	sp, #16
 8011cf6:	af00      	add	r7, sp, #0
 8011cf8:	60f8      	str	r0, [r7, #12]
 8011cfa:	60b9      	str	r1, [r7, #8]
 8011cfc:	607a      	str	r2, [r7, #4]
 8011cfe:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d103      	bne.n	8011d0e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011d06:	69bb      	ldr	r3, [r7, #24]
 8011d08:	69ba      	ldr	r2, [r7, #24]
 8011d0a:	601a      	str	r2, [r3, #0]
 8011d0c:	e002      	b.n	8011d14 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011d0e:	69bb      	ldr	r3, [r7, #24]
 8011d10:	687a      	ldr	r2, [r7, #4]
 8011d12:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8011d14:	69bb      	ldr	r3, [r7, #24]
 8011d16:	68fa      	ldr	r2, [r7, #12]
 8011d18:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8011d1a:	69bb      	ldr	r3, [r7, #24]
 8011d1c:	68ba      	ldr	r2, [r7, #8]
 8011d1e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011d20:	2101      	movs	r1, #1
 8011d22:	69b8      	ldr	r0, [r7, #24]
 8011d24:	f7ff fede 	bl	8011ae4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8011d28:	69bb      	ldr	r3, [r7, #24]
 8011d2a:	78fa      	ldrb	r2, [r7, #3]
 8011d2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8011d30:	bf00      	nop
 8011d32:	3710      	adds	r7, #16
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b082      	sub	sp, #8
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d00e      	beq.n	8011d64 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2200      	movs	r2, #0
 8011d4a:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2200      	movs	r2, #0
 8011d50:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2200      	movs	r2, #0
 8011d56:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011d58:	2300      	movs	r3, #0
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	2100      	movs	r1, #0
 8011d5e:	6878      	ldr	r0, [r7, #4]
 8011d60:	f000 f8e1 	bl	8011f26 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8011d64:	bf00      	nop
 8011d66:	3708      	adds	r7, #8
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}

08011d6c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b086      	sub	sp, #24
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	4603      	mov	r3, r0
 8011d74:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011d76:	2301      	movs	r3, #1
 8011d78:	617b      	str	r3, [r7, #20]
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011d7e:	79fb      	ldrb	r3, [r7, #7]
 8011d80:	461a      	mov	r2, r3
 8011d82:	6939      	ldr	r1, [r7, #16]
 8011d84:	6978      	ldr	r0, [r7, #20]
 8011d86:	f7ff ff6a 	bl	8011c5e <xQueueGenericCreate>
 8011d8a:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011d8c:	68f8      	ldr	r0, [r7, #12]
 8011d8e:	f7ff ffd3 	bl	8011d38 <prvInitialiseMutex>

        return xNewQueue;
 8011d92:	68fb      	ldr	r3, [r7, #12]
    }
 8011d94:	4618      	mov	r0, r3
 8011d96:	3718      	adds	r7, #24
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}

08011d9c <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b088      	sub	sp, #32
 8011da0:	af02      	add	r7, sp, #8
 8011da2:	4603      	mov	r3, r0
 8011da4:	6039      	str	r1, [r7, #0]
 8011da6:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011da8:	2301      	movs	r3, #1
 8011daa:	617b      	str	r3, [r7, #20]
 8011dac:	2300      	movs	r3, #0
 8011dae:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011db0:	79fb      	ldrb	r3, [r7, #7]
 8011db2:	9300      	str	r3, [sp, #0]
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	2200      	movs	r2, #0
 8011db8:	6939      	ldr	r1, [r7, #16]
 8011dba:	6978      	ldr	r0, [r7, #20]
 8011dbc:	f7ff ff09 	bl	8011bd2 <xQueueGenericCreateStatic>
 8011dc0:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011dc2:	68f8      	ldr	r0, [r7, #12]
 8011dc4:	f7ff ffb8 	bl	8011d38 <prvInitialiseMutex>

        return xNewQueue;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
    }
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3718      	adds	r7, #24
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}

08011dd2 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
 8011dd2:	b590      	push	{r4, r7, lr}
 8011dd4:	b085      	sub	sp, #20
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	60bb      	str	r3, [r7, #8]

        configASSERT( pxMutex );
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d102      	bne.n	8011dea <xQueueGiveMutexRecursive+0x18>
 8011de4:	f002 fc48 	bl	8014678 <ulSetInterruptMask>
 8011de8:	e7fe      	b.n	8011de8 <xQueueGiveMutexRecursive+0x16>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	689c      	ldr	r4, [r3, #8]
 8011dee:	f001 fd9b 	bl	8013928 <xTaskGetCurrentTaskHandle>
 8011df2:	4603      	mov	r3, r0
 8011df4:	429c      	cmp	r4, r3
 8011df6:	d111      	bne.n	8011e1c <xQueueGiveMutexRecursive+0x4a>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8011df8:	68bb      	ldr	r3, [r7, #8]
 8011dfa:	68db      	ldr	r3, [r3, #12]
 8011dfc:	1e5a      	subs	r2, r3, #1
 8011dfe:	68bb      	ldr	r3, [r7, #8]
 8011e00:	60da      	str	r2, [r3, #12]

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011e02:	68bb      	ldr	r3, [r7, #8]
 8011e04:	68db      	ldr	r3, [r3, #12]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d105      	bne.n	8011e16 <xQueueGiveMutexRecursive+0x44>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	2100      	movs	r1, #0
 8011e10:	68b8      	ldr	r0, [r7, #8]
 8011e12:	f000 f888 	bl	8011f26 <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
 8011e16:	2301      	movs	r3, #1
 8011e18:	60fb      	str	r3, [r7, #12]
 8011e1a:	e001      	b.n	8011e20 <xQueueGiveMutexRecursive+0x4e>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	60fb      	str	r3, [r7, #12]

            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        return xReturn;
 8011e20:	68fb      	ldr	r3, [r7, #12]
    }
 8011e22:	4618      	mov	r0, r3
 8011e24:	3714      	adds	r7, #20
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd90      	pop	{r4, r7, pc}

08011e2a <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
 8011e2a:	b590      	push	{r4, r7, lr}
 8011e2c:	b085      	sub	sp, #20
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	6078      	str	r0, [r7, #4]
 8011e32:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	60bb      	str	r3, [r7, #8]

        configASSERT( pxMutex );
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d102      	bne.n	8011e44 <xQueueTakeMutexRecursive+0x1a>
 8011e3e:	f002 fc1b 	bl	8014678 <ulSetInterruptMask>
 8011e42:	e7fe      	b.n	8011e42 <xQueueTakeMutexRecursive+0x18>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	689c      	ldr	r4, [r3, #8]
 8011e48:	f001 fd6e 	bl	8013928 <xTaskGetCurrentTaskHandle>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	429c      	cmp	r4, r3
 8011e50:	d107      	bne.n	8011e62 <xQueueTakeMutexRecursive+0x38>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	68db      	ldr	r3, [r3, #12]
 8011e56:	1c5a      	adds	r2, r3, #1
 8011e58:	68bb      	ldr	r3, [r7, #8]
 8011e5a:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	60fb      	str	r3, [r7, #12]
 8011e60:	e00c      	b.n	8011e7c <xQueueTakeMutexRecursive+0x52>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8011e62:	6839      	ldr	r1, [r7, #0]
 8011e64:	68b8      	ldr	r0, [r7, #8]
 8011e66:	f000 fad2 	bl	801240e <xQueueSemaphoreTake>
 8011e6a:	60f8      	str	r0, [r7, #12]

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d004      	beq.n	8011e7c <xQueueTakeMutexRecursive+0x52>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	68db      	ldr	r3, [r3, #12]
 8011e76:	1c5a      	adds	r2, r3, #1
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	60da      	str	r2, [r3, #12]
            {
                traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
            }
        }

        return xReturn;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
    }
 8011e7e:	4618      	mov	r0, r3
 8011e80:	3714      	adds	r7, #20
 8011e82:	46bd      	mov	sp, r7
 8011e84:	bd90      	pop	{r4, r7, pc}

08011e86 <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
 8011e86:	b580      	push	{r7, lr}
 8011e88:	b088      	sub	sp, #32
 8011e8a:	af02      	add	r7, sp, #8
 8011e8c:	60f8      	str	r0, [r7, #12]
 8011e8e:	60b9      	str	r1, [r7, #8]
 8011e90:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 8011e92:	2300      	movs	r3, #0
 8011e94:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d013      	beq.n	8011ec4 <xQueueCreateCountingSemaphoreStatic+0x3e>
 8011e9c:	68ba      	ldr	r2, [r7, #8]
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d80f      	bhi.n	8011ec4 <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011ea4:	2302      	movs	r3, #2
 8011ea6:	9300      	str	r3, [sp, #0]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	2100      	movs	r1, #0
 8011eae:	68f8      	ldr	r0, [r7, #12]
 8011eb0:	f7ff fe8f 	bl	8011bd2 <xQueueGenericCreateStatic>
 8011eb4:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
 8011eb6:	697b      	ldr	r3, [r7, #20]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d009      	beq.n	8011ed0 <xQueueCreateCountingSemaphoreStatic+0x4a>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	68ba      	ldr	r2, [r7, #8]
 8011ec0:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8011ec2:	e005      	b.n	8011ed0 <xQueueCreateCountingSemaphoreStatic+0x4a>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8011ec4:	697b      	ldr	r3, [r7, #20]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d102      	bne.n	8011ed0 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8011eca:	f002 fbd5 	bl	8014678 <ulSetInterruptMask>
 8011ece:	e7fe      	b.n	8011ece <xQueueCreateCountingSemaphoreStatic+0x48>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 8011ed0:	697b      	ldr	r3, [r7, #20]
    }
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	3718      	adds	r7, #24
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}

08011eda <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8011eda:	b580      	push	{r7, lr}
 8011edc:	b084      	sub	sp, #16
 8011ede:	af00      	add	r7, sp, #0
 8011ee0:	6078      	str	r0, [r7, #4]
 8011ee2:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d010      	beq.n	8011f10 <xQueueCreateCountingSemaphore+0x36>
 8011eee:	683a      	ldr	r2, [r7, #0]
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d80c      	bhi.n	8011f10 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011ef6:	2202      	movs	r2, #2
 8011ef8:	2100      	movs	r1, #0
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f7ff feaf 	bl	8011c5e <xQueueGenericCreate>
 8011f00:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d009      	beq.n	8011f1c <xQueueCreateCountingSemaphore+0x42>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	683a      	ldr	r2, [r7, #0]
 8011f0c:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8011f0e:	e005      	b.n	8011f1c <xQueueCreateCountingSemaphore+0x42>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d102      	bne.n	8011f1c <xQueueCreateCountingSemaphore+0x42>
 8011f16:	f002 fbaf 	bl	8014678 <ulSetInterruptMask>
 8011f1a:	e7fe      	b.n	8011f1a <xQueueCreateCountingSemaphore+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 8011f1c:	68fb      	ldr	r3, [r7, #12]
    }
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3710      	adds	r7, #16
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}

08011f26 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8011f26:	b580      	push	{r7, lr}
 8011f28:	b08a      	sub	sp, #40	; 0x28
 8011f2a:	af00      	add	r7, sp, #0
 8011f2c:	60f8      	str	r0, [r7, #12]
 8011f2e:	60b9      	str	r1, [r7, #8]
 8011f30:	607a      	str	r2, [r7, #4]
 8011f32:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011f34:	2300      	movs	r3, #0
 8011f36:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8011f3c:	6a3b      	ldr	r3, [r7, #32]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d102      	bne.n	8011f48 <xQueueGenericSend+0x22>
 8011f42:	f002 fb99 	bl	8014678 <ulSetInterruptMask>
 8011f46:	e7fe      	b.n	8011f46 <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d103      	bne.n	8011f56 <xQueueGenericSend+0x30>
 8011f4e:	6a3b      	ldr	r3, [r7, #32]
 8011f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d101      	bne.n	8011f5a <xQueueGenericSend+0x34>
 8011f56:	2301      	movs	r3, #1
 8011f58:	e000      	b.n	8011f5c <xQueueGenericSend+0x36>
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d102      	bne.n	8011f66 <xQueueGenericSend+0x40>
 8011f60:	f002 fb8a 	bl	8014678 <ulSetInterruptMask>
 8011f64:	e7fe      	b.n	8011f64 <xQueueGenericSend+0x3e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	2b02      	cmp	r3, #2
 8011f6a:	d103      	bne.n	8011f74 <xQueueGenericSend+0x4e>
 8011f6c:	6a3b      	ldr	r3, [r7, #32]
 8011f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f70:	2b01      	cmp	r3, #1
 8011f72:	d101      	bne.n	8011f78 <xQueueGenericSend+0x52>
 8011f74:	2301      	movs	r3, #1
 8011f76:	e000      	b.n	8011f7a <xQueueGenericSend+0x54>
 8011f78:	2300      	movs	r3, #0
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d102      	bne.n	8011f84 <xQueueGenericSend+0x5e>
 8011f7e:	f002 fb7b 	bl	8014678 <ulSetInterruptMask>
 8011f82:	e7fe      	b.n	8011f82 <xQueueGenericSend+0x5c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011f84:	f001 fce0 	bl	8013948 <xTaskGetSchedulerState>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d102      	bne.n	8011f94 <xQueueGenericSend+0x6e>
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d101      	bne.n	8011f98 <xQueueGenericSend+0x72>
 8011f94:	2301      	movs	r3, #1
 8011f96:	e000      	b.n	8011f9a <xQueueGenericSend+0x74>
 8011f98:	2300      	movs	r3, #0
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d102      	bne.n	8011fa4 <xQueueGenericSend+0x7e>
 8011f9e:	f002 fb6b 	bl	8014678 <ulSetInterruptMask>
 8011fa2:	e7fe      	b.n	8011fa2 <xQueueGenericSend+0x7c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8011fa4:	f002 fa2a 	bl	80143fc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011fa8:	6a3b      	ldr	r3, [r7, #32]
 8011faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011fac:	6a3b      	ldr	r3, [r7, #32]
 8011fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d302      	bcc.n	8011fba <xQueueGenericSend+0x94>
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	2b02      	cmp	r3, #2
 8011fb8:	d11d      	bne.n	8011ff6 <xQueueGenericSend+0xd0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011fba:	683a      	ldr	r2, [r7, #0]
 8011fbc:	68b9      	ldr	r1, [r7, #8]
 8011fbe:	6a38      	ldr	r0, [r7, #32]
 8011fc0:	f000 fbc6 	bl	8012750 <prvCopyDataToQueue>
 8011fc4:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011fc6:	6a3b      	ldr	r3, [r7, #32]
 8011fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d00a      	beq.n	8011fe4 <xQueueGenericSend+0xbe>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011fce:	6a3b      	ldr	r3, [r7, #32]
 8011fd0:	3324      	adds	r3, #36	; 0x24
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f001 faa0 	bl	8013518 <xTaskRemoveFromEventList>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d007      	beq.n	8011fee <xQueueGenericSend+0xc8>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8011fde:	f002 f9fb 	bl	80143d8 <vPortYield>
 8011fe2:	e004      	b.n	8011fee <xQueueGenericSend+0xc8>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8011fe4:	69fb      	ldr	r3, [r7, #28]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d001      	beq.n	8011fee <xQueueGenericSend+0xc8>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8011fea:	f002 f9f5 	bl	80143d8 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8011fee:	f002 fa17 	bl	8014420 <vPortExitCritical>
                return pdPASS;
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	e05c      	b.n	80120b0 <xQueueGenericSend+0x18a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d103      	bne.n	8012004 <xQueueGenericSend+0xde>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8011ffc:	f002 fa10 	bl	8014420 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8012000:	2300      	movs	r3, #0
 8012002:	e055      	b.n	80120b0 <xQueueGenericSend+0x18a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8012004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012006:	2b00      	cmp	r3, #0
 8012008:	d106      	bne.n	8012018 <xQueueGenericSend+0xf2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 801200a:	f107 0314 	add.w	r3, r7, #20
 801200e:	4618      	mov	r0, r3
 8012010:	f001 fb50 	bl	80136b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8012014:	2301      	movs	r3, #1
 8012016:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8012018:	f002 fa02 	bl	8014420 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 801201c:	f000 ff70 	bl	8012f00 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8012020:	f002 f9ec 	bl	80143fc <vPortEnterCritical>
 8012024:	6a3b      	ldr	r3, [r7, #32]
 8012026:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801202a:	b25b      	sxtb	r3, r3
 801202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012030:	d103      	bne.n	801203a <xQueueGenericSend+0x114>
 8012032:	6a3b      	ldr	r3, [r7, #32]
 8012034:	2200      	movs	r2, #0
 8012036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801203a:	6a3b      	ldr	r3, [r7, #32]
 801203c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012040:	b25b      	sxtb	r3, r3
 8012042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012046:	d103      	bne.n	8012050 <xQueueGenericSend+0x12a>
 8012048:	6a3b      	ldr	r3, [r7, #32]
 801204a:	2200      	movs	r2, #0
 801204c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012050:	f002 f9e6 	bl	8014420 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012054:	1d3a      	adds	r2, r7, #4
 8012056:	f107 0314 	add.w	r3, r7, #20
 801205a:	4611      	mov	r1, r2
 801205c:	4618      	mov	r0, r3
 801205e:	f001 fb3f 	bl	80136e0 <xTaskCheckForTimeOut>
 8012062:	4603      	mov	r3, r0
 8012064:	2b00      	cmp	r3, #0
 8012066:	d11d      	bne.n	80120a4 <xQueueGenericSend+0x17e>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012068:	6a38      	ldr	r0, [r7, #32]
 801206a:	f000 fc69 	bl	8012940 <prvIsQueueFull>
 801206e:	4603      	mov	r3, r0
 8012070:	2b00      	cmp	r3, #0
 8012072:	d011      	beq.n	8012098 <xQueueGenericSend+0x172>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012074:	6a3b      	ldr	r3, [r7, #32]
 8012076:	3310      	adds	r3, #16
 8012078:	687a      	ldr	r2, [r7, #4]
 801207a:	4611      	mov	r1, r2
 801207c:	4618      	mov	r0, r3
 801207e:	f001 f9f1 	bl	8013464 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8012082:	6a38      	ldr	r0, [r7, #32]
 8012084:	f000 fbf4 	bl	8012870 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8012088:	f000 ff48 	bl	8012f1c <xTaskResumeAll>
 801208c:	4603      	mov	r3, r0
 801208e:	2b00      	cmp	r3, #0
 8012090:	d188      	bne.n	8011fa4 <xQueueGenericSend+0x7e>
                {
                    portYIELD_WITHIN_API();
 8012092:	f002 f9a1 	bl	80143d8 <vPortYield>
 8012096:	e785      	b.n	8011fa4 <xQueueGenericSend+0x7e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8012098:	6a38      	ldr	r0, [r7, #32]
 801209a:	f000 fbe9 	bl	8012870 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 801209e:	f000 ff3d 	bl	8012f1c <xTaskResumeAll>
 80120a2:	e77f      	b.n	8011fa4 <xQueueGenericSend+0x7e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80120a4:	6a38      	ldr	r0, [r7, #32]
 80120a6:	f000 fbe3 	bl	8012870 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80120aa:	f000 ff37 	bl	8012f1c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80120ae:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3728      	adds	r7, #40	; 0x28
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}

080120b8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b08a      	sub	sp, #40	; 0x28
 80120bc:	af00      	add	r7, sp, #0
 80120be:	60f8      	str	r0, [r7, #12]
 80120c0:	60b9      	str	r1, [r7, #8]
 80120c2:	607a      	str	r2, [r7, #4]
 80120c4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80120ca:	6a3b      	ldr	r3, [r7, #32]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d102      	bne.n	80120d6 <xQueueGenericSendFromISR+0x1e>
 80120d0:	f002 fad2 	bl	8014678 <ulSetInterruptMask>
 80120d4:	e7fe      	b.n	80120d4 <xQueueGenericSendFromISR+0x1c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80120d6:	68bb      	ldr	r3, [r7, #8]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d103      	bne.n	80120e4 <xQueueGenericSendFromISR+0x2c>
 80120dc:	6a3b      	ldr	r3, [r7, #32]
 80120de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d101      	bne.n	80120e8 <xQueueGenericSendFromISR+0x30>
 80120e4:	2301      	movs	r3, #1
 80120e6:	e000      	b.n	80120ea <xQueueGenericSendFromISR+0x32>
 80120e8:	2300      	movs	r3, #0
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d102      	bne.n	80120f4 <xQueueGenericSendFromISR+0x3c>
 80120ee:	f002 fac3 	bl	8014678 <ulSetInterruptMask>
 80120f2:	e7fe      	b.n	80120f2 <xQueueGenericSendFromISR+0x3a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	2b02      	cmp	r3, #2
 80120f8:	d103      	bne.n	8012102 <xQueueGenericSendFromISR+0x4a>
 80120fa:	6a3b      	ldr	r3, [r7, #32]
 80120fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120fe:	2b01      	cmp	r3, #1
 8012100:	d101      	bne.n	8012106 <xQueueGenericSendFromISR+0x4e>
 8012102:	2301      	movs	r3, #1
 8012104:	e000      	b.n	8012108 <xQueueGenericSendFromISR+0x50>
 8012106:	2300      	movs	r3, #0
 8012108:	2b00      	cmp	r3, #0
 801210a:	d102      	bne.n	8012112 <xQueueGenericSendFromISR+0x5a>
 801210c:	f002 fab4 	bl	8014678 <ulSetInterruptMask>
 8012110:	e7fe      	b.n	8012110 <xQueueGenericSendFromISR+0x58>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012112:	f002 fab1 	bl	8014678 <ulSetInterruptMask>
 8012116:	61f8      	str	r0, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012118:	6a3b      	ldr	r3, [r7, #32]
 801211a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801211c:	6a3b      	ldr	r3, [r7, #32]
 801211e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012120:	429a      	cmp	r2, r3
 8012122:	d302      	bcc.n	801212a <xQueueGenericSendFromISR+0x72>
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	2b02      	cmp	r3, #2
 8012128:	d13c      	bne.n	80121a4 <xQueueGenericSendFromISR+0xec>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 801212a:	6a3b      	ldr	r3, [r7, #32]
 801212c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012130:	76fb      	strb	r3, [r7, #27]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012132:	6a3b      	ldr	r3, [r7, #32]
 8012134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012136:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012138:	683a      	ldr	r2, [r7, #0]
 801213a:	68b9      	ldr	r1, [r7, #8]
 801213c:	6a38      	ldr	r0, [r7, #32]
 801213e:	f000 fb07 	bl	8012750 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8012142:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801214a:	d112      	bne.n	8012172 <xQueueGenericSendFromISR+0xba>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801214c:	6a3b      	ldr	r3, [r7, #32]
 801214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012150:	2b00      	cmp	r3, #0
 8012152:	d024      	beq.n	801219e <xQueueGenericSendFromISR+0xe6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012154:	6a3b      	ldr	r3, [r7, #32]
 8012156:	3324      	adds	r3, #36	; 0x24
 8012158:	4618      	mov	r0, r3
 801215a:	f001 f9dd 	bl	8013518 <xTaskRemoveFromEventList>
 801215e:	4603      	mov	r3, r0
 8012160:	2b00      	cmp	r3, #0
 8012162:	d01c      	beq.n	801219e <xQueueGenericSendFromISR+0xe6>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d019      	beq.n	801219e <xQueueGenericSendFromISR+0xe6>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2201      	movs	r2, #1
 801216e:	601a      	str	r2, [r3, #0]
 8012170:	e015      	b.n	801219e <xQueueGenericSendFromISR+0xe6>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8012172:	f000 ffe1 	bl	8013138 <uxTaskGetNumberOfTasks>
 8012176:	6138      	str	r0, [r7, #16]
 8012178:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801217c:	693a      	ldr	r2, [r7, #16]
 801217e:	429a      	cmp	r2, r3
 8012180:	d90d      	bls.n	801219e <xQueueGenericSendFromISR+0xe6>
 8012182:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012186:	2b7f      	cmp	r3, #127	; 0x7f
 8012188:	d102      	bne.n	8012190 <xQueueGenericSendFromISR+0xd8>
 801218a:	f002 fa75 	bl	8014678 <ulSetInterruptMask>
 801218e:	e7fe      	b.n	801218e <xQueueGenericSendFromISR+0xd6>
 8012190:	7efb      	ldrb	r3, [r7, #27]
 8012192:	3301      	adds	r3, #1
 8012194:	b2db      	uxtb	r3, r3
 8012196:	b25a      	sxtb	r2, r3
 8012198:	6a3b      	ldr	r3, [r7, #32]
 801219a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 801219e:	2301      	movs	r3, #1
 80121a0:	627b      	str	r3, [r7, #36]	; 0x24
        {
 80121a2:	e001      	b.n	80121a8 <xQueueGenericSendFromISR+0xf0>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80121a4:	2300      	movs	r3, #0
 80121a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80121a8:	69f8      	ldr	r0, [r7, #28]
 80121aa:	f002 fa72 	bl	8014692 <vClearInterruptMask>

    return xReturn;
 80121ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3728      	adds	r7, #40	; 0x28
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b088      	sub	sp, #32
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
 80121c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	61bb      	str	r3, [r7, #24]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d102      	bne.n	80121d2 <xQueueGiveFromISR+0x1a>
 80121cc:	f002 fa54 	bl	8014678 <ulSetInterruptMask>
 80121d0:	e7fe      	b.n	80121d0 <xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80121d2:	69bb      	ldr	r3, [r7, #24]
 80121d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d002      	beq.n	80121e0 <xQueueGiveFromISR+0x28>
 80121da:	f002 fa4d 	bl	8014678 <ulSetInterruptMask>
 80121de:	e7fe      	b.n	80121de <xQueueGiveFromISR+0x26>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80121e0:	69bb      	ldr	r3, [r7, #24]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d103      	bne.n	80121f0 <xQueueGiveFromISR+0x38>
 80121e8:	69bb      	ldr	r3, [r7, #24]
 80121ea:	689b      	ldr	r3, [r3, #8]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d101      	bne.n	80121f4 <xQueueGiveFromISR+0x3c>
 80121f0:	2301      	movs	r3, #1
 80121f2:	e000      	b.n	80121f6 <xQueueGiveFromISR+0x3e>
 80121f4:	2300      	movs	r3, #0
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d102      	bne.n	8012200 <xQueueGiveFromISR+0x48>
 80121fa:	f002 fa3d 	bl	8014678 <ulSetInterruptMask>
 80121fe:	e7fe      	b.n	80121fe <xQueueGiveFromISR+0x46>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012200:	f002 fa3a 	bl	8014678 <ulSetInterruptMask>
 8012204:	6178      	str	r0, [r7, #20]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012206:	69bb      	ldr	r3, [r7, #24]
 8012208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801220a:	613b      	str	r3, [r7, #16]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 801220c:	69bb      	ldr	r3, [r7, #24]
 801220e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012210:	693a      	ldr	r2, [r7, #16]
 8012212:	429a      	cmp	r2, r3
 8012214:	d238      	bcs.n	8012288 <xQueueGiveFromISR+0xd0>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8012216:	69bb      	ldr	r3, [r7, #24]
 8012218:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801221c:	73fb      	strb	r3, [r7, #15]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	1c5a      	adds	r2, r3, #1
 8012222:	69bb      	ldr	r3, [r7, #24]
 8012224:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8012226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801222a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801222e:	d112      	bne.n	8012256 <xQueueGiveFromISR+0x9e>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012230:	69bb      	ldr	r3, [r7, #24]
 8012232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012234:	2b00      	cmp	r3, #0
 8012236:	d024      	beq.n	8012282 <xQueueGiveFromISR+0xca>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012238:	69bb      	ldr	r3, [r7, #24]
 801223a:	3324      	adds	r3, #36	; 0x24
 801223c:	4618      	mov	r0, r3
 801223e:	f001 f96b 	bl	8013518 <xTaskRemoveFromEventList>
 8012242:	4603      	mov	r3, r0
 8012244:	2b00      	cmp	r3, #0
 8012246:	d01c      	beq.n	8012282 <xQueueGiveFromISR+0xca>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d019      	beq.n	8012282 <xQueueGiveFromISR+0xca>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	2201      	movs	r2, #1
 8012252:	601a      	str	r2, [r3, #0]
 8012254:	e015      	b.n	8012282 <xQueueGiveFromISR+0xca>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8012256:	f000 ff6f 	bl	8013138 <uxTaskGetNumberOfTasks>
 801225a:	60b8      	str	r0, [r7, #8]
 801225c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012260:	68ba      	ldr	r2, [r7, #8]
 8012262:	429a      	cmp	r2, r3
 8012264:	d90d      	bls.n	8012282 <xQueueGiveFromISR+0xca>
 8012266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801226a:	2b7f      	cmp	r3, #127	; 0x7f
 801226c:	d102      	bne.n	8012274 <xQueueGiveFromISR+0xbc>
 801226e:	f002 fa03 	bl	8014678 <ulSetInterruptMask>
 8012272:	e7fe      	b.n	8012272 <xQueueGiveFromISR+0xba>
 8012274:	7bfb      	ldrb	r3, [r7, #15]
 8012276:	3301      	adds	r3, #1
 8012278:	b2db      	uxtb	r3, r3
 801227a:	b25a      	sxtb	r2, r3
 801227c:	69bb      	ldr	r3, [r7, #24]
 801227e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8012282:	2301      	movs	r3, #1
 8012284:	61fb      	str	r3, [r7, #28]
 8012286:	e001      	b.n	801228c <xQueueGiveFromISR+0xd4>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8012288:	2300      	movs	r3, #0
 801228a:	61fb      	str	r3, [r7, #28]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801228c:	6978      	ldr	r0, [r7, #20]
 801228e:	f002 fa00 	bl	8014692 <vClearInterruptMask>

    return xReturn;
 8012292:	69fb      	ldr	r3, [r7, #28]
}
 8012294:	4618      	mov	r0, r3
 8012296:	3720      	adds	r7, #32
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}

0801229c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b08a      	sub	sp, #40	; 0x28
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	60f8      	str	r0, [r7, #12]
 80122a4:	60b9      	str	r1, [r7, #8]
 80122a6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80122a8:	2300      	movs	r3, #0
 80122aa:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80122b0:	6a3b      	ldr	r3, [r7, #32]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d102      	bne.n	80122bc <xQueueReceive+0x20>
 80122b6:	f002 f9df 	bl	8014678 <ulSetInterruptMask>
 80122ba:	e7fe      	b.n	80122ba <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d103      	bne.n	80122ca <xQueueReceive+0x2e>
 80122c2:	6a3b      	ldr	r3, [r7, #32]
 80122c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d101      	bne.n	80122ce <xQueueReceive+0x32>
 80122ca:	2301      	movs	r3, #1
 80122cc:	e000      	b.n	80122d0 <xQueueReceive+0x34>
 80122ce:	2300      	movs	r3, #0
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d102      	bne.n	80122da <xQueueReceive+0x3e>
 80122d4:	f002 f9d0 	bl	8014678 <ulSetInterruptMask>
 80122d8:	e7fe      	b.n	80122d8 <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80122da:	f001 fb35 	bl	8013948 <xTaskGetSchedulerState>
 80122de:	4603      	mov	r3, r0
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d102      	bne.n	80122ea <xQueueReceive+0x4e>
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d101      	bne.n	80122ee <xQueueReceive+0x52>
 80122ea:	2301      	movs	r3, #1
 80122ec:	e000      	b.n	80122f0 <xQueueReceive+0x54>
 80122ee:	2300      	movs	r3, #0
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d102      	bne.n	80122fa <xQueueReceive+0x5e>
 80122f4:	f002 f9c0 	bl	8014678 <ulSetInterruptMask>
 80122f8:	e7fe      	b.n	80122f8 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80122fa:	f002 f87f 	bl	80143fc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80122fe:	6a3b      	ldr	r3, [r7, #32]
 8012300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012302:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012304:	69fb      	ldr	r3, [r7, #28]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d019      	beq.n	801233e <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 801230a:	68b9      	ldr	r1, [r7, #8]
 801230c:	6a38      	ldr	r0, [r7, #32]
 801230e:	f000 fa89 	bl	8012824 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012312:	69fb      	ldr	r3, [r7, #28]
 8012314:	1e5a      	subs	r2, r3, #1
 8012316:	6a3b      	ldr	r3, [r7, #32]
 8012318:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801231a:	6a3b      	ldr	r3, [r7, #32]
 801231c:	691b      	ldr	r3, [r3, #16]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d009      	beq.n	8012336 <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012322:	6a3b      	ldr	r3, [r7, #32]
 8012324:	3310      	adds	r3, #16
 8012326:	4618      	mov	r0, r3
 8012328:	f001 f8f6 	bl	8013518 <xTaskRemoveFromEventList>
 801232c:	4603      	mov	r3, r0
 801232e:	2b00      	cmp	r3, #0
 8012330:	d001      	beq.n	8012336 <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8012332:	f002 f851 	bl	80143d8 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8012336:	f002 f873 	bl	8014420 <vPortExitCritical>
                return pdPASS;
 801233a:	2301      	movs	r3, #1
 801233c:	e063      	b.n	8012406 <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d103      	bne.n	801234c <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8012344:	f002 f86c 	bl	8014420 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8012348:	2300      	movs	r3, #0
 801234a:	e05c      	b.n	8012406 <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 801234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234e:	2b00      	cmp	r3, #0
 8012350:	d106      	bne.n	8012360 <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8012352:	f107 0314 	add.w	r3, r7, #20
 8012356:	4618      	mov	r0, r3
 8012358:	f001 f9ac 	bl	80136b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 801235c:	2301      	movs	r3, #1
 801235e:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8012360:	f002 f85e 	bl	8014420 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8012364:	f000 fdcc 	bl	8012f00 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8012368:	f002 f848 	bl	80143fc <vPortEnterCritical>
 801236c:	6a3b      	ldr	r3, [r7, #32]
 801236e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012372:	b25b      	sxtb	r3, r3
 8012374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012378:	d103      	bne.n	8012382 <xQueueReceive+0xe6>
 801237a:	6a3b      	ldr	r3, [r7, #32]
 801237c:	2200      	movs	r2, #0
 801237e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012382:	6a3b      	ldr	r3, [r7, #32]
 8012384:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012388:	b25b      	sxtb	r3, r3
 801238a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801238e:	d103      	bne.n	8012398 <xQueueReceive+0xfc>
 8012390:	6a3b      	ldr	r3, [r7, #32]
 8012392:	2200      	movs	r2, #0
 8012394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012398:	f002 f842 	bl	8014420 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801239c:	1d3a      	adds	r2, r7, #4
 801239e:	f107 0314 	add.w	r3, r7, #20
 80123a2:	4611      	mov	r1, r2
 80123a4:	4618      	mov	r0, r3
 80123a6:	f001 f99b 	bl	80136e0 <xTaskCheckForTimeOut>
 80123aa:	4603      	mov	r3, r0
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d11d      	bne.n	80123ec <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80123b0:	6a38      	ldr	r0, [r7, #32]
 80123b2:	f000 faaf 	bl	8012914 <prvIsQueueEmpty>
 80123b6:	4603      	mov	r3, r0
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d011      	beq.n	80123e0 <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80123bc:	6a3b      	ldr	r3, [r7, #32]
 80123be:	3324      	adds	r3, #36	; 0x24
 80123c0:	687a      	ldr	r2, [r7, #4]
 80123c2:	4611      	mov	r1, r2
 80123c4:	4618      	mov	r0, r3
 80123c6:	f001 f84d 	bl	8013464 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80123ca:	6a38      	ldr	r0, [r7, #32]
 80123cc:	f000 fa50 	bl	8012870 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80123d0:	f000 fda4 	bl	8012f1c <xTaskResumeAll>
 80123d4:	4603      	mov	r3, r0
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d18f      	bne.n	80122fa <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 80123da:	f001 fffd 	bl	80143d8 <vPortYield>
 80123de:	e78c      	b.n	80122fa <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80123e0:	6a38      	ldr	r0, [r7, #32]
 80123e2:	f000 fa45 	bl	8012870 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80123e6:	f000 fd99 	bl	8012f1c <xTaskResumeAll>
 80123ea:	e786      	b.n	80122fa <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80123ec:	6a38      	ldr	r0, [r7, #32]
 80123ee:	f000 fa3f 	bl	8012870 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80123f2:	f000 fd93 	bl	8012f1c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80123f6:	6a38      	ldr	r0, [r7, #32]
 80123f8:	f000 fa8c 	bl	8012914 <prvIsQueueEmpty>
 80123fc:	4603      	mov	r3, r0
 80123fe:	2b00      	cmp	r3, #0
 8012400:	f43f af7b 	beq.w	80122fa <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8012404:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8012406:	4618      	mov	r0, r3
 8012408:	3728      	adds	r7, #40	; 0x28
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}

0801240e <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 801240e:	b580      	push	{r7, lr}
 8012410:	b08a      	sub	sp, #40	; 0x28
 8012412:	af00      	add	r7, sp, #0
 8012414:	6078      	str	r0, [r7, #4]
 8012416:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8012418:	2300      	movs	r3, #0
 801241a:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8012420:	2300      	movs	r3, #0
 8012422:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d102      	bne.n	8012430 <xQueueSemaphoreTake+0x22>
 801242a:	f002 f925 	bl	8014678 <ulSetInterruptMask>
 801242e:	e7fe      	b.n	801242e <xQueueSemaphoreTake+0x20>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012434:	2b00      	cmp	r3, #0
 8012436:	d002      	beq.n	801243e <xQueueSemaphoreTake+0x30>
 8012438:	f002 f91e 	bl	8014678 <ulSetInterruptMask>
 801243c:	e7fe      	b.n	801243c <xQueueSemaphoreTake+0x2e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801243e:	f001 fa83 	bl	8013948 <xTaskGetSchedulerState>
 8012442:	4603      	mov	r3, r0
 8012444:	2b00      	cmp	r3, #0
 8012446:	d102      	bne.n	801244e <xQueueSemaphoreTake+0x40>
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d101      	bne.n	8012452 <xQueueSemaphoreTake+0x44>
 801244e:	2301      	movs	r3, #1
 8012450:	e000      	b.n	8012454 <xQueueSemaphoreTake+0x46>
 8012452:	2300      	movs	r3, #0
 8012454:	2b00      	cmp	r3, #0
 8012456:	d102      	bne.n	801245e <xQueueSemaphoreTake+0x50>
 8012458:	f002 f90e 	bl	8014678 <ulSetInterruptMask>
 801245c:	e7fe      	b.n	801245c <xQueueSemaphoreTake+0x4e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 801245e:	f001 ffcd 	bl	80143fc <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012462:	69fb      	ldr	r3, [r7, #28]
 8012464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012466:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012468:	69bb      	ldr	r3, [r7, #24]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d01e      	beq.n	80124ac <xQueueSemaphoreTake+0x9e>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801246e:	69bb      	ldr	r3, [r7, #24]
 8012470:	1e5a      	subs	r2, r3, #1
 8012472:	69fb      	ldr	r3, [r7, #28]
 8012474:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012476:	69fb      	ldr	r3, [r7, #28]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d104      	bne.n	8012488 <xQueueSemaphoreTake+0x7a>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801247e:	f001 fc31 	bl	8013ce4 <pvTaskIncrementMutexHeldCount>
 8012482:	4602      	mov	r2, r0
 8012484:	69fb      	ldr	r3, [r7, #28]
 8012486:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012488:	69fb      	ldr	r3, [r7, #28]
 801248a:	691b      	ldr	r3, [r3, #16]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d009      	beq.n	80124a4 <xQueueSemaphoreTake+0x96>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012490:	69fb      	ldr	r3, [r7, #28]
 8012492:	3310      	adds	r3, #16
 8012494:	4618      	mov	r0, r3
 8012496:	f001 f83f 	bl	8013518 <xTaskRemoveFromEventList>
 801249a:	4603      	mov	r3, r0
 801249c:	2b00      	cmp	r3, #0
 801249e:	d001      	beq.n	80124a4 <xQueueSemaphoreTake+0x96>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80124a0:	f001 ff9a 	bl	80143d8 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80124a4:	f001 ffbc 	bl	8014420 <vPortExitCritical>
                return pdPASS;
 80124a8:	2301      	movs	r3, #1
 80124aa:	e083      	b.n	80125b4 <xQueueSemaphoreTake+0x1a6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d103      	bne.n	80124ba <xQueueSemaphoreTake+0xac>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80124b2:	f001 ffb5 	bl	8014420 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80124b6:	2300      	movs	r3, #0
 80124b8:	e07c      	b.n	80125b4 <xQueueSemaphoreTake+0x1a6>
                }
                else if( xEntryTimeSet == pdFALSE )
 80124ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d106      	bne.n	80124ce <xQueueSemaphoreTake+0xc0>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80124c0:	f107 030c 	add.w	r3, r7, #12
 80124c4:	4618      	mov	r0, r3
 80124c6:	f001 f8f5 	bl	80136b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80124ca:	2301      	movs	r3, #1
 80124cc:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80124ce:	f001 ffa7 	bl	8014420 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80124d2:	f000 fd15 	bl	8012f00 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80124d6:	f001 ff91 	bl	80143fc <vPortEnterCritical>
 80124da:	69fb      	ldr	r3, [r7, #28]
 80124dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80124e0:	b25b      	sxtb	r3, r3
 80124e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124e6:	d103      	bne.n	80124f0 <xQueueSemaphoreTake+0xe2>
 80124e8:	69fb      	ldr	r3, [r7, #28]
 80124ea:	2200      	movs	r2, #0
 80124ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80124f0:	69fb      	ldr	r3, [r7, #28]
 80124f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80124f6:	b25b      	sxtb	r3, r3
 80124f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124fc:	d103      	bne.n	8012506 <xQueueSemaphoreTake+0xf8>
 80124fe:	69fb      	ldr	r3, [r7, #28]
 8012500:	2200      	movs	r2, #0
 8012502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012506:	f001 ff8b 	bl	8014420 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801250a:	463a      	mov	r2, r7
 801250c:	f107 030c 	add.w	r3, r7, #12
 8012510:	4611      	mov	r1, r2
 8012512:	4618      	mov	r0, r3
 8012514:	f001 f8e4 	bl	80136e0 <xTaskCheckForTimeOut>
 8012518:	4603      	mov	r3, r0
 801251a:	2b00      	cmp	r3, #0
 801251c:	d12c      	bne.n	8012578 <xQueueSemaphoreTake+0x16a>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801251e:	69f8      	ldr	r0, [r7, #28]
 8012520:	f000 f9f8 	bl	8012914 <prvIsQueueEmpty>
 8012524:	4603      	mov	r3, r0
 8012526:	2b00      	cmp	r3, #0
 8012528:	d020      	beq.n	801256c <xQueueSemaphoreTake+0x15e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801252a:	69fb      	ldr	r3, [r7, #28]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d109      	bne.n	8012546 <xQueueSemaphoreTake+0x138>
                    {
                        taskENTER_CRITICAL();
 8012532:	f001 ff63 	bl	80143fc <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012536:	69fb      	ldr	r3, [r7, #28]
 8012538:	689b      	ldr	r3, [r3, #8]
 801253a:	4618      	mov	r0, r3
 801253c:	f001 fa22 	bl	8013984 <xTaskPriorityInherit>
 8012540:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 8012542:	f001 ff6d 	bl	8014420 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012546:	69fb      	ldr	r3, [r7, #28]
 8012548:	3324      	adds	r3, #36	; 0x24
 801254a:	683a      	ldr	r2, [r7, #0]
 801254c:	4611      	mov	r1, r2
 801254e:	4618      	mov	r0, r3
 8012550:	f000 ff88 	bl	8013464 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8012554:	69f8      	ldr	r0, [r7, #28]
 8012556:	f000 f98b 	bl	8012870 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 801255a:	f000 fcdf 	bl	8012f1c <xTaskResumeAll>
 801255e:	4603      	mov	r3, r0
 8012560:	2b00      	cmp	r3, #0
 8012562:	f47f af7c 	bne.w	801245e <xQueueSemaphoreTake+0x50>
                {
                    portYIELD_WITHIN_API();
 8012566:	f001 ff37 	bl	80143d8 <vPortYield>
 801256a:	e778      	b.n	801245e <xQueueSemaphoreTake+0x50>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 801256c:	69f8      	ldr	r0, [r7, #28]
 801256e:	f000 f97f 	bl	8012870 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8012572:	f000 fcd3 	bl	8012f1c <xTaskResumeAll>
 8012576:	e772      	b.n	801245e <xQueueSemaphoreTake+0x50>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8012578:	69f8      	ldr	r0, [r7, #28]
 801257a:	f000 f979 	bl	8012870 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 801257e:	f000 fccd 	bl	8012f1c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012582:	69f8      	ldr	r0, [r7, #28]
 8012584:	f000 f9c6 	bl	8012914 <prvIsQueueEmpty>
 8012588:	4603      	mov	r3, r0
 801258a:	2b00      	cmp	r3, #0
 801258c:	f43f af67 	beq.w	801245e <xQueueSemaphoreTake+0x50>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8012590:	6a3b      	ldr	r3, [r7, #32]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d00d      	beq.n	80125b2 <xQueueSemaphoreTake+0x1a4>
                    {
                        taskENTER_CRITICAL();
 8012596:	f001 ff31 	bl	80143fc <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801259a:	69f8      	ldr	r0, [r7, #28]
 801259c:	f000 f8c0 	bl	8012720 <prvGetDisinheritPriorityAfterTimeout>
 80125a0:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80125a2:	69fb      	ldr	r3, [r7, #28]
 80125a4:	689b      	ldr	r3, [r3, #8]
 80125a6:	6979      	ldr	r1, [r7, #20]
 80125a8:	4618      	mov	r0, r3
 80125aa:	f001 fb01 	bl	8013bb0 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80125ae:	f001 ff37 	bl	8014420 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80125b2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3728      	adds	r7, #40	; 0x28
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}

080125bc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b08a      	sub	sp, #40	; 0x28
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	60f8      	str	r0, [r7, #12]
 80125c4:	60b9      	str	r1, [r7, #8]
 80125c6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80125cc:	6a3b      	ldr	r3, [r7, #32]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d102      	bne.n	80125d8 <xQueueReceiveFromISR+0x1c>
 80125d2:	f002 f851 	bl	8014678 <ulSetInterruptMask>
 80125d6:	e7fe      	b.n	80125d6 <xQueueReceiveFromISR+0x1a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d103      	bne.n	80125e6 <xQueueReceiveFromISR+0x2a>
 80125de:	6a3b      	ldr	r3, [r7, #32]
 80125e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d101      	bne.n	80125ea <xQueueReceiveFromISR+0x2e>
 80125e6:	2301      	movs	r3, #1
 80125e8:	e000      	b.n	80125ec <xQueueReceiveFromISR+0x30>
 80125ea:	2300      	movs	r3, #0
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d102      	bne.n	80125f6 <xQueueReceiveFromISR+0x3a>
 80125f0:	f002 f842 	bl	8014678 <ulSetInterruptMask>
 80125f4:	e7fe      	b.n	80125f4 <xQueueReceiveFromISR+0x38>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80125f6:	f002 f83f 	bl	8014678 <ulSetInterruptMask>
 80125fa:	61f8      	str	r0, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80125fc:	6a3b      	ldr	r3, [r7, #32]
 80125fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012600:	61bb      	str	r3, [r7, #24]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012602:	69bb      	ldr	r3, [r7, #24]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d03c      	beq.n	8012682 <xQueueReceiveFromISR+0xc6>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8012608:	6a3b      	ldr	r3, [r7, #32]
 801260a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801260e:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012610:	68b9      	ldr	r1, [r7, #8]
 8012612:	6a38      	ldr	r0, [r7, #32]
 8012614:	f000 f906 	bl	8012824 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012618:	69bb      	ldr	r3, [r7, #24]
 801261a:	1e5a      	subs	r2, r3, #1
 801261c:	6a3b      	ldr	r3, [r7, #32]
 801261e:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8012620:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012628:	d112      	bne.n	8012650 <xQueueReceiveFromISR+0x94>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801262a:	6a3b      	ldr	r3, [r7, #32]
 801262c:	691b      	ldr	r3, [r3, #16]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d024      	beq.n	801267c <xQueueReceiveFromISR+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012632:	6a3b      	ldr	r3, [r7, #32]
 8012634:	3310      	adds	r3, #16
 8012636:	4618      	mov	r0, r3
 8012638:	f000 ff6e 	bl	8013518 <xTaskRemoveFromEventList>
 801263c:	4603      	mov	r3, r0
 801263e:	2b00      	cmp	r3, #0
 8012640:	d01c      	beq.n	801267c <xQueueReceiveFromISR+0xc0>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d019      	beq.n	801267c <xQueueReceiveFromISR+0xc0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2201      	movs	r2, #1
 801264c:	601a      	str	r2, [r3, #0]
 801264e:	e015      	b.n	801267c <xQueueReceiveFromISR+0xc0>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8012650:	f000 fd72 	bl	8013138 <uxTaskGetNumberOfTasks>
 8012654:	6138      	str	r0, [r7, #16]
 8012656:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801265a:	693a      	ldr	r2, [r7, #16]
 801265c:	429a      	cmp	r2, r3
 801265e:	d90d      	bls.n	801267c <xQueueReceiveFromISR+0xc0>
 8012660:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012664:	2b7f      	cmp	r3, #127	; 0x7f
 8012666:	d102      	bne.n	801266e <xQueueReceiveFromISR+0xb2>
 8012668:	f002 f806 	bl	8014678 <ulSetInterruptMask>
 801266c:	e7fe      	b.n	801266c <xQueueReceiveFromISR+0xb0>
 801266e:	7dfb      	ldrb	r3, [r7, #23]
 8012670:	3301      	adds	r3, #1
 8012672:	b2db      	uxtb	r3, r3
 8012674:	b25a      	sxtb	r2, r3
 8012676:	6a3b      	ldr	r3, [r7, #32]
 8012678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 801267c:	2301      	movs	r3, #1
 801267e:	627b      	str	r3, [r7, #36]	; 0x24
 8012680:	e001      	b.n	8012686 <xQueueReceiveFromISR+0xca>
        }
        else
        {
            xReturn = pdFAIL;
 8012682:	2300      	movs	r3, #0
 8012684:	627b      	str	r3, [r7, #36]	; 0x24
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8012686:	69f8      	ldr	r0, [r7, #28]
 8012688:	f002 f803 	bl	8014692 <vClearInterruptMask>

    return xReturn;
 801268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801268e:	4618      	mov	r0, r3
 8012690:	3728      	adds	r7, #40	; 0x28
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}

08012696 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8012696:	b580      	push	{r7, lr}
 8012698:	b084      	sub	sp, #16
 801269a:	af00      	add	r7, sp, #0
 801269c:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d102      	bne.n	80126aa <uxQueueMessagesWaiting+0x14>
 80126a4:	f001 ffe8 	bl	8014678 <ulSetInterruptMask>
 80126a8:	e7fe      	b.n	80126a8 <uxQueueMessagesWaiting+0x12>

    taskENTER_CRITICAL();
 80126aa:	f001 fea7 	bl	80143fc <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126b2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80126b4:	f001 feb4 	bl	8014420 <vPortExitCritical>

    return uxReturn;
 80126b8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80126ba:	4618      	mov	r0, r3
 80126bc:	3710      	adds	r7, #16
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}

080126c2 <uxQueueMessagesWaitingFromISR>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80126c2:	b580      	push	{r7, lr}
 80126c4:	b084      	sub	sp, #16
 80126c6:	af00      	add	r7, sp, #0
 80126c8:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d102      	bne.n	80126da <uxQueueMessagesWaitingFromISR+0x18>
 80126d4:	f001 ffd0 	bl	8014678 <ulSetInterruptMask>
 80126d8:	e7fe      	b.n	80126d8 <uxQueueMessagesWaitingFromISR+0x16>
    uxReturn = pxQueue->uxMessagesWaiting;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126de:	60bb      	str	r3, [r7, #8]

    return uxReturn;
 80126e0:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80126e2:	4618      	mov	r0, r3
 80126e4:	3710      	adds	r7, #16
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}

080126ea <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80126ea:	b580      	push	{r7, lr}
 80126ec:	b084      	sub	sp, #16
 80126ee:	af00      	add	r7, sp, #0
 80126f0:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d102      	bne.n	8012702 <vQueueDelete+0x18>
 80126fc:	f001 ffbc 	bl	8014678 <ulSetInterruptMask>
 8012700:	e7fe      	b.n	8012700 <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8012702:	68f8      	ldr	r0, [r7, #12]
 8012704:	f000 f978 	bl	80129f8 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801270e:	2b00      	cmp	r3, #0
 8012710:	d102      	bne.n	8012718 <vQueueDelete+0x2e>
        {
            vPortFree( pxQueue );
 8012712:	68f8      	ldr	r0, [r7, #12]
 8012714:	f002 f8c6 	bl	80148a4 <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012718:	bf00      	nop
 801271a:	3710      	adds	r7, #16
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}

08012720 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8012720:	b480      	push	{r7}
 8012722:	b085      	sub	sp, #20
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801272c:	2b00      	cmp	r3, #0
 801272e:	d006      	beq.n	801273e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801273a:	60fb      	str	r3, [r7, #12]
 801273c:	e001      	b.n	8012742 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801273e:	2300      	movs	r3, #0
 8012740:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8012742:	68fb      	ldr	r3, [r7, #12]
    }
 8012744:	4618      	mov	r0, r3
 8012746:	3714      	adds	r7, #20
 8012748:	46bd      	mov	sp, r7
 801274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274e:	4770      	bx	lr

08012750 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b086      	sub	sp, #24
 8012754:	af00      	add	r7, sp, #0
 8012756:	60f8      	str	r0, [r7, #12]
 8012758:	60b9      	str	r1, [r7, #8]
 801275a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 801275c:	2300      	movs	r3, #0
 801275e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012764:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801276a:	2b00      	cmp	r3, #0
 801276c:	d10d      	bne.n	801278a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d14d      	bne.n	8012812 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	689b      	ldr	r3, [r3, #8]
 801277a:	4618      	mov	r0, r3
 801277c:	f001 f992 	bl	8013aa4 <xTaskPriorityDisinherit>
 8012780:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	2200      	movs	r2, #0
 8012786:	609a      	str	r2, [r3, #8]
 8012788:	e043      	b.n	8012812 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d119      	bne.n	80127c4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	6858      	ldr	r0, [r3, #4]
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012798:	461a      	mov	r2, r3
 801279a:	68b9      	ldr	r1, [r7, #8]
 801279c:	f011 fe7f 	bl	802449e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	685a      	ldr	r2, [r3, #4]
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127a8:	441a      	add	r2, r3
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	685a      	ldr	r2, [r3, #4]
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	689b      	ldr	r3, [r3, #8]
 80127b6:	429a      	cmp	r2, r3
 80127b8:	d32b      	bcc.n	8012812 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	681a      	ldr	r2, [r3, #0]
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	605a      	str	r2, [r3, #4]
 80127c2:	e026      	b.n	8012812 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	68d8      	ldr	r0, [r3, #12]
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127cc:	461a      	mov	r2, r3
 80127ce:	68b9      	ldr	r1, [r7, #8]
 80127d0:	f011 fe65 	bl	802449e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	68da      	ldr	r2, [r3, #12]
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127dc:	425b      	negs	r3, r3
 80127de:	441a      	add	r2, r3
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	68da      	ldr	r2, [r3, #12]
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	429a      	cmp	r2, r3
 80127ee:	d207      	bcs.n	8012800 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	689a      	ldr	r2, [r3, #8]
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127f8:	425b      	negs	r3, r3
 80127fa:	441a      	add	r2, r3
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2b02      	cmp	r3, #2
 8012804:	d105      	bne.n	8012812 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d002      	beq.n	8012812 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	3b01      	subs	r3, #1
 8012810:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012812:	693b      	ldr	r3, [r7, #16]
 8012814:	1c5a      	adds	r2, r3, #1
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 801281a:	697b      	ldr	r3, [r7, #20]
}
 801281c:	4618      	mov	r0, r3
 801281e:	3718      	adds	r7, #24
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}

08012824 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
 801282c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012832:	2b00      	cmp	r3, #0
 8012834:	d018      	beq.n	8012868 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	68da      	ldr	r2, [r3, #12]
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801283e:	441a      	add	r2, r3
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	68da      	ldr	r2, [r3, #12]
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	689b      	ldr	r3, [r3, #8]
 801284c:	429a      	cmp	r2, r3
 801284e:	d303      	bcc.n	8012858 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681a      	ldr	r2, [r3, #0]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	68d9      	ldr	r1, [r3, #12]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012860:	461a      	mov	r2, r3
 8012862:	6838      	ldr	r0, [r7, #0]
 8012864:	f011 fe1b 	bl	802449e <memcpy>
    }
}
 8012868:	bf00      	nop
 801286a:	3708      	adds	r7, #8
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}

08012870 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b084      	sub	sp, #16
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8012878:	f001 fdc0 	bl	80143fc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012882:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8012884:	e011      	b.n	80128aa <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801288a:	2b00      	cmp	r3, #0
 801288c:	d012      	beq.n	80128b4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	3324      	adds	r3, #36	; 0x24
 8012892:	4618      	mov	r0, r3
 8012894:	f000 fe40 	bl	8013518 <xTaskRemoveFromEventList>
 8012898:	4603      	mov	r3, r0
 801289a:	2b00      	cmp	r3, #0
 801289c:	d001      	beq.n	80128a2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 801289e:	f000 ff75 	bl	801378c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80128a2:	7bfb      	ldrb	r3, [r7, #15]
 80128a4:	3b01      	subs	r3, #1
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80128aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	dce9      	bgt.n	8012886 <prvUnlockQueue+0x16>
 80128b2:	e000      	b.n	80128b6 <prvUnlockQueue+0x46>
                    break;
 80128b4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	22ff      	movs	r2, #255	; 0xff
 80128ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80128be:	f001 fdaf 	bl	8014420 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80128c2:	f001 fd9b 	bl	80143fc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80128cc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80128ce:	e011      	b.n	80128f4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	691b      	ldr	r3, [r3, #16]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d012      	beq.n	80128fe <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	3310      	adds	r3, #16
 80128dc:	4618      	mov	r0, r3
 80128de:	f000 fe1b 	bl	8013518 <xTaskRemoveFromEventList>
 80128e2:	4603      	mov	r3, r0
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d001      	beq.n	80128ec <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80128e8:	f000 ff50 	bl	801378c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80128ec:	7bbb      	ldrb	r3, [r7, #14]
 80128ee:	3b01      	subs	r3, #1
 80128f0:	b2db      	uxtb	r3, r3
 80128f2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80128f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	dce9      	bgt.n	80128d0 <prvUnlockQueue+0x60>
 80128fc:	e000      	b.n	8012900 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80128fe:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	22ff      	movs	r2, #255	; 0xff
 8012904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8012908:	f001 fd8a 	bl	8014420 <vPortExitCritical>
}
 801290c:	bf00      	nop
 801290e:	3710      	adds	r7, #16
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}

08012914 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b084      	sub	sp, #16
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 801291c:	f001 fd6e 	bl	80143fc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012924:	2b00      	cmp	r3, #0
 8012926:	d102      	bne.n	801292e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8012928:	2301      	movs	r3, #1
 801292a:	60fb      	str	r3, [r7, #12]
 801292c:	e001      	b.n	8012932 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 801292e:	2300      	movs	r3, #0
 8012930:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8012932:	f001 fd75 	bl	8014420 <vPortExitCritical>

    return xReturn;
 8012936:	68fb      	ldr	r3, [r7, #12]
}
 8012938:	4618      	mov	r0, r3
 801293a:	3710      	adds	r7, #16
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}

08012940 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b084      	sub	sp, #16
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8012948:	f001 fd58 	bl	80143fc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012954:	429a      	cmp	r2, r3
 8012956:	d102      	bne.n	801295e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8012958:	2301      	movs	r3, #1
 801295a:	60fb      	str	r3, [r7, #12]
 801295c:	e001      	b.n	8012962 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 801295e:	2300      	movs	r3, #0
 8012960:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8012962:	f001 fd5d 	bl	8014420 <vPortExitCritical>

    return xReturn;
 8012966:	68fb      	ldr	r3, [r7, #12]
}
 8012968:	4618      	mov	r0, r3
 801296a:	3710      	adds	r7, #16
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}

08012970 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8012970:	b580      	push	{r7, lr}
 8012972:	b084      	sub	sp, #16
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
 8012978:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 801297a:	2300      	movs	r3, #0
 801297c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d102      	bne.n	801298a <vQueueAddToRegistry+0x1a>
 8012984:	f001 fe78 	bl	8014678 <ulSetInterruptMask>
 8012988:	e7fe      	b.n	8012988 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d024      	beq.n	80129da <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012990:	2300      	movs	r3, #0
 8012992:	60fb      	str	r3, [r7, #12]
 8012994:	e01e      	b.n	80129d4 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8012996:	4a17      	ldr	r2, [pc, #92]	; (80129f4 <vQueueAddToRegistry+0x84>)
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	00db      	lsls	r3, r3, #3
 801299c:	4413      	add	r3, r2
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	687a      	ldr	r2, [r7, #4]
 80129a2:	429a      	cmp	r2, r3
 80129a4:	d105      	bne.n	80129b2 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	00db      	lsls	r3, r3, #3
 80129aa:	4a12      	ldr	r2, [pc, #72]	; (80129f4 <vQueueAddToRegistry+0x84>)
 80129ac:	4413      	add	r3, r2
 80129ae:	60bb      	str	r3, [r7, #8]
                    break;
 80129b0:	e013      	b.n	80129da <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d10a      	bne.n	80129ce <vQueueAddToRegistry+0x5e>
 80129b8:	4a0e      	ldr	r2, [pc, #56]	; (80129f4 <vQueueAddToRegistry+0x84>)
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d104      	bne.n	80129ce <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	00db      	lsls	r3, r3, #3
 80129c8:	4a0a      	ldr	r2, [pc, #40]	; (80129f4 <vQueueAddToRegistry+0x84>)
 80129ca:	4413      	add	r3, r2
 80129cc:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	3301      	adds	r3, #1
 80129d2:	60fb      	str	r3, [r7, #12]
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	2b07      	cmp	r3, #7
 80129d8:	d9dd      	bls.n	8012996 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80129da:	68bb      	ldr	r3, [r7, #8]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d005      	beq.n	80129ec <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80129e0:	68bb      	ldr	r3, [r7, #8]
 80129e2:	683a      	ldr	r2, [r7, #0]
 80129e4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	687a      	ldr	r2, [r7, #4]
 80129ea:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80129ec:	bf00      	nop
 80129ee:	3710      	adds	r7, #16
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	20056f50 	.word	0x20056f50

080129f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b084      	sub	sp, #16
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d102      	bne.n	8012a0c <vQueueUnregisterQueue+0x14>
 8012a06:	f001 fe37 	bl	8014678 <ulSetInterruptMask>
 8012a0a:	e7fe      	b.n	8012a0a <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	60fb      	str	r3, [r7, #12]
 8012a10:	e016      	b.n	8012a40 <vQueueUnregisterQueue+0x48>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012a12:	4a0f      	ldr	r2, [pc, #60]	; (8012a50 <vQueueUnregisterQueue+0x58>)
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	00db      	lsls	r3, r3, #3
 8012a18:	4413      	add	r3, r2
 8012a1a:	685b      	ldr	r3, [r3, #4]
 8012a1c:	687a      	ldr	r2, [r7, #4]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d10b      	bne.n	8012a3a <vQueueUnregisterQueue+0x42>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8012a22:	4a0b      	ldr	r2, [pc, #44]	; (8012a50 <vQueueUnregisterQueue+0x58>)
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	2100      	movs	r1, #0
 8012a28:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012a2c:	4a08      	ldr	r2, [pc, #32]	; (8012a50 <vQueueUnregisterQueue+0x58>)
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	00db      	lsls	r3, r3, #3
 8012a32:	4413      	add	r3, r2
 8012a34:	2200      	movs	r2, #0
 8012a36:	605a      	str	r2, [r3, #4]
                break;
 8012a38:	e006      	b.n	8012a48 <vQueueUnregisterQueue+0x50>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	60fb      	str	r3, [r7, #12]
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	2b07      	cmp	r3, #7
 8012a44:	d9e5      	bls.n	8012a12 <vQueueUnregisterQueue+0x1a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012a46:	bf00      	nop
 8012a48:	bf00      	nop
 8012a4a:	3710      	adds	r7, #16
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}
 8012a50:	20056f50 	.word	0x20056f50

08012a54 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b086      	sub	sp, #24
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	60f8      	str	r0, [r7, #12]
 8012a5c:	60b9      	str	r1, [r7, #8]
 8012a5e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8012a64:	f001 fcca 	bl	80143fc <vPortEnterCritical>
 8012a68:	697b      	ldr	r3, [r7, #20]
 8012a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a6e:	b25b      	sxtb	r3, r3
 8012a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a74:	d103      	bne.n	8012a7e <vQueueWaitForMessageRestricted+0x2a>
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	2200      	movs	r2, #0
 8012a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a7e:	697b      	ldr	r3, [r7, #20]
 8012a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a84:	b25b      	sxtb	r3, r3
 8012a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a8a:	d103      	bne.n	8012a94 <vQueueWaitForMessageRestricted+0x40>
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a94:	f001 fcc4 	bl	8014420 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d106      	bne.n	8012aae <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	3324      	adds	r3, #36	; 0x24
 8012aa4:	687a      	ldr	r2, [r7, #4]
 8012aa6:	68b9      	ldr	r1, [r7, #8]
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f000 fcf7 	bl	801349c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8012aae:	6978      	ldr	r0, [r7, #20]
 8012ab0:	f7ff fede 	bl	8012870 <prvUnlockQueue>
    }
 8012ab4:	bf00      	nop
 8012ab6:	3718      	adds	r7, #24
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	bd80      	pop	{r7, pc}

08012abc <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b08c      	sub	sp, #48	; 0x30
 8012ac0:	af04      	add	r7, sp, #16
 8012ac2:	60f8      	str	r0, [r7, #12]
 8012ac4:	60b9      	str	r1, [r7, #8]
 8012ac6:	607a      	str	r2, [r7, #4]
 8012ac8:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8012aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d102      	bne.n	8012ad6 <xTaskCreateStatic+0x1a>
 8012ad0:	f001 fdd2 	bl	8014678 <ulSetInterruptMask>
 8012ad4:	e7fe      	b.n	8012ad4 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 8012ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d102      	bne.n	8012ae2 <xTaskCreateStatic+0x26>
 8012adc:	f001 fdcc 	bl	8014678 <ulSetInterruptMask>
 8012ae0:	e7fe      	b.n	8012ae0 <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8012ae2:	235c      	movs	r3, #92	; 0x5c
 8012ae4:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	2b5c      	cmp	r3, #92	; 0x5c
 8012aea:	d002      	beq.n	8012af2 <xTaskCreateStatic+0x36>
 8012aec:	f001 fdc4 	bl	8014678 <ulSetInterruptMask>
 8012af0:	e7fe      	b.n	8012af0 <xTaskCreateStatic+0x34>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012af2:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d023      	beq.n	8012b42 <xTaskCreateStatic+0x86>
 8012afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d020      	beq.n	8012b42 <xTaskCreateStatic+0x86>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b02:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8012b04:	225c      	movs	r2, #92	; 0x5c
 8012b06:	2100      	movs	r1, #0
 8012b08:	69f8      	ldr	r0, [r7, #28]
 8012b0a:	f011 fc2f 	bl	802436c <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012b0e:	69fb      	ldr	r3, [r7, #28]
 8012b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b12:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012b14:	69fb      	ldr	r3, [r7, #28]
 8012b16:	2202      	movs	r2, #2
 8012b18:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	9303      	str	r3, [sp, #12]
 8012b20:	69fb      	ldr	r3, [r7, #28]
 8012b22:	9302      	str	r3, [sp, #8]
 8012b24:	f107 0318 	add.w	r3, r7, #24
 8012b28:	9301      	str	r3, [sp, #4]
 8012b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b2c:	9300      	str	r3, [sp, #0]
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	687a      	ldr	r2, [r7, #4]
 8012b32:	68b9      	ldr	r1, [r7, #8]
 8012b34:	68f8      	ldr	r0, [r7, #12]
 8012b36:	f000 f855 	bl	8012be4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8012b3a:	69f8      	ldr	r0, [r7, #28]
 8012b3c:	f000 f8d2 	bl	8012ce4 <prvAddNewTaskToReadyList>
 8012b40:	e001      	b.n	8012b46 <xTaskCreateStatic+0x8a>
        }
        else
        {
            xReturn = NULL;
 8012b42:	2300      	movs	r3, #0
 8012b44:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8012b46:	69bb      	ldr	r3, [r7, #24]
    }
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3720      	adds	r7, #32
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b08c      	sub	sp, #48	; 0x30
 8012b54:	af04      	add	r7, sp, #16
 8012b56:	60f8      	str	r0, [r7, #12]
 8012b58:	60b9      	str	r1, [r7, #8]
 8012b5a:	603b      	str	r3, [r7, #0]
 8012b5c:	4613      	mov	r3, r2
 8012b5e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012b60:	88fb      	ldrh	r3, [r7, #6]
 8012b62:	009b      	lsls	r3, r3, #2
 8012b64:	4618      	mov	r0, r3
 8012b66:	f001 fdef 	bl	8014748 <pvPortMalloc>
 8012b6a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d013      	beq.n	8012b9a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012b72:	205c      	movs	r0, #92	; 0x5c
 8012b74:	f001 fde8 	bl	8014748 <pvPortMalloc>
 8012b78:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8012b7a:	69fb      	ldr	r3, [r7, #28]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d008      	beq.n	8012b92 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8012b80:	225c      	movs	r2, #92	; 0x5c
 8012b82:	2100      	movs	r1, #0
 8012b84:	69f8      	ldr	r0, [r7, #28]
 8012b86:	f011 fbf1 	bl	802436c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8012b8a:	69fb      	ldr	r3, [r7, #28]
 8012b8c:	697a      	ldr	r2, [r7, #20]
 8012b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8012b90:	e005      	b.n	8012b9e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8012b92:	6978      	ldr	r0, [r7, #20]
 8012b94:	f001 fe86 	bl	80148a4 <vPortFree>
 8012b98:	e001      	b.n	8012b9e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8012b9e:	69fb      	ldr	r3, [r7, #28]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d017      	beq.n	8012bd4 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012ba4:	69fb      	ldr	r3, [r7, #28]
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012bac:	88fa      	ldrh	r2, [r7, #6]
 8012bae:	2300      	movs	r3, #0
 8012bb0:	9303      	str	r3, [sp, #12]
 8012bb2:	69fb      	ldr	r3, [r7, #28]
 8012bb4:	9302      	str	r3, [sp, #8]
 8012bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb8:	9301      	str	r3, [sp, #4]
 8012bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bbc:	9300      	str	r3, [sp, #0]
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	68b9      	ldr	r1, [r7, #8]
 8012bc2:	68f8      	ldr	r0, [r7, #12]
 8012bc4:	f000 f80e 	bl	8012be4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8012bc8:	69f8      	ldr	r0, [r7, #28]
 8012bca:	f000 f88b 	bl	8012ce4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8012bce:	2301      	movs	r3, #1
 8012bd0:	61bb      	str	r3, [r7, #24]
 8012bd2:	e002      	b.n	8012bda <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8012bd8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8012bda:	69bb      	ldr	r3, [r7, #24]
    }
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3720      	adds	r7, #32
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b086      	sub	sp, #24
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	60f8      	str	r0, [r7, #12]
 8012bec:	60b9      	str	r1, [r7, #8]
 8012bee:	607a      	str	r2, [r7, #4]
 8012bf0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	009b      	lsls	r3, r3, #2
 8012bfa:	461a      	mov	r2, r3
 8012bfc:	21a5      	movs	r1, #165	; 0xa5
 8012bfe:	f011 fbb5 	bl	802436c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012c0c:	3b01      	subs	r3, #1
 8012c0e:	009b      	lsls	r3, r3, #2
 8012c10:	4413      	add	r3, r2
 8012c12:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012c14:	693b      	ldr	r3, [r7, #16]
 8012c16:	f023 0307 	bic.w	r3, r3, #7
 8012c1a:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012c1c:	693b      	ldr	r3, [r7, #16]
 8012c1e:	f003 0307 	and.w	r3, r3, #7
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d002      	beq.n	8012c2c <prvInitialiseNewTask+0x48>
 8012c26:	f001 fd27 	bl	8014678 <ulSetInterruptMask>
 8012c2a:	e7fe      	b.n	8012c2a <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d01e      	beq.n	8012c70 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012c32:	2300      	movs	r3, #0
 8012c34:	617b      	str	r3, [r7, #20]
 8012c36:	e012      	b.n	8012c5e <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012c38:	68ba      	ldr	r2, [r7, #8]
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	4413      	add	r3, r2
 8012c3e:	7819      	ldrb	r1, [r3, #0]
 8012c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	4413      	add	r3, r2
 8012c46:	3334      	adds	r3, #52	; 0x34
 8012c48:	460a      	mov	r2, r1
 8012c4a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8012c4c:	68ba      	ldr	r2, [r7, #8]
 8012c4e:	697b      	ldr	r3, [r7, #20]
 8012c50:	4413      	add	r3, r2
 8012c52:	781b      	ldrb	r3, [r3, #0]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d006      	beq.n	8012c66 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012c58:	697b      	ldr	r3, [r7, #20]
 8012c5a:	3301      	adds	r3, #1
 8012c5c:	617b      	str	r3, [r7, #20]
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	2b0f      	cmp	r3, #15
 8012c62:	d9e9      	bls.n	8012c38 <prvInitialiseNewTask+0x54>
 8012c64:	e000      	b.n	8012c68 <prvInitialiseNewTask+0x84>
            {
                break;
 8012c66:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8012c70:	6a3b      	ldr	r3, [r7, #32]
 8012c72:	2b37      	cmp	r3, #55	; 0x37
 8012c74:	d902      	bls.n	8012c7c <prvInitialiseNewTask+0x98>
 8012c76:	f001 fcff 	bl	8014678 <ulSetInterruptMask>
 8012c7a:	e7fe      	b.n	8012c7a <prvInitialiseNewTask+0x96>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012c7c:	6a3b      	ldr	r3, [r7, #32]
 8012c7e:	2b37      	cmp	r3, #55	; 0x37
 8012c80:	d901      	bls.n	8012c86 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012c82:	2337      	movs	r3, #55	; 0x37
 8012c84:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8012c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c88:	6a3a      	ldr	r2, [r7, #32]
 8012c8a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8012c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c8e:	6a3a      	ldr	r2, [r7, #32]
 8012c90:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c94:	3304      	adds	r3, #4
 8012c96:	4618      	mov	r0, r3
 8012c98:	f7fe feb4 	bl	8011a04 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c9e:	3318      	adds	r3, #24
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f7fe feaf 	bl	8011a04 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012caa:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012cac:	6a3b      	ldr	r3, [r7, #32]
 8012cae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012cba:	625a      	str	r2, [r3, #36]	; 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8012cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	68fa      	ldr	r2, [r7, #12]
 8012cc4:	6938      	ldr	r0, [r7, #16]
 8012cc6:	f001 fbf7 	bl	80144b8 <pxPortInitialiseStack>
 8012cca:	4602      	mov	r2, r0
 8012ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cce:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8012cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d002      	beq.n	8012cdc <prvInitialiseNewTask+0xf8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012cda:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8012cdc:	bf00      	nop
 8012cde:	3718      	adds	r7, #24
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bd80      	pop	{r7, pc}

08012ce4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b084      	sub	sp, #16
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8012cec:	f001 fb86 	bl	80143fc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8012cf0:	4b3e      	ldr	r3, [pc, #248]	; (8012dec <prvAddNewTaskToReadyList+0x108>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	3301      	adds	r3, #1
 8012cf6:	4a3d      	ldr	r2, [pc, #244]	; (8012dec <prvAddNewTaskToReadyList+0x108>)
 8012cf8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8012cfa:	4b3d      	ldr	r3, [pc, #244]	; (8012df0 <prvAddNewTaskToReadyList+0x10c>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d109      	bne.n	8012d16 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8012d02:	4a3b      	ldr	r2, [pc, #236]	; (8012df0 <prvAddNewTaskToReadyList+0x10c>)
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012d08:	4b38      	ldr	r3, [pc, #224]	; (8012dec <prvAddNewTaskToReadyList+0x108>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	2b01      	cmp	r3, #1
 8012d0e:	d110      	bne.n	8012d32 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8012d10:	f000 fd58 	bl	80137c4 <prvInitialiseTaskLists>
 8012d14:	e00d      	b.n	8012d32 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8012d16:	4b37      	ldr	r3, [pc, #220]	; (8012df4 <prvAddNewTaskToReadyList+0x110>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d109      	bne.n	8012d32 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012d1e:	4b34      	ldr	r3, [pc, #208]	; (8012df0 <prvAddNewTaskToReadyList+0x10c>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d802      	bhi.n	8012d32 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8012d2c:	4a30      	ldr	r2, [pc, #192]	; (8012df0 <prvAddNewTaskToReadyList+0x10c>)
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8012d32:	4b31      	ldr	r3, [pc, #196]	; (8012df8 <prvAddNewTaskToReadyList+0x114>)
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	3301      	adds	r3, #1
 8012d38:	4a2f      	ldr	r2, [pc, #188]	; (8012df8 <prvAddNewTaskToReadyList+0x114>)
 8012d3a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012d3c:	4b2e      	ldr	r3, [pc, #184]	; (8012df8 <prvAddNewTaskToReadyList+0x114>)
 8012d3e:	681a      	ldr	r2, [r3, #0]
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d48:	4b2c      	ldr	r3, [pc, #176]	; (8012dfc <prvAddNewTaskToReadyList+0x118>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d903      	bls.n	8012d58 <prvAddNewTaskToReadyList+0x74>
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d54:	4a29      	ldr	r2, [pc, #164]	; (8012dfc <prvAddNewTaskToReadyList+0x118>)
 8012d56:	6013      	str	r3, [r2, #0]
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d5c:	4928      	ldr	r1, [pc, #160]	; (8012e00 <prvAddNewTaskToReadyList+0x11c>)
 8012d5e:	4613      	mov	r3, r2
 8012d60:	009b      	lsls	r3, r3, #2
 8012d62:	4413      	add	r3, r2
 8012d64:	009b      	lsls	r3, r3, #2
 8012d66:	440b      	add	r3, r1
 8012d68:	3304      	adds	r3, #4
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	60fb      	str	r3, [r7, #12]
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	68fa      	ldr	r2, [r7, #12]
 8012d72:	609a      	str	r2, [r3, #8]
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	689a      	ldr	r2, [r3, #8]
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	60da      	str	r2, [r3, #12]
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	689b      	ldr	r3, [r3, #8]
 8012d80:	687a      	ldr	r2, [r7, #4]
 8012d82:	3204      	adds	r2, #4
 8012d84:	605a      	str	r2, [r3, #4]
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	1d1a      	adds	r2, r3, #4
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	609a      	str	r2, [r3, #8]
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d92:	4613      	mov	r3, r2
 8012d94:	009b      	lsls	r3, r3, #2
 8012d96:	4413      	add	r3, r2
 8012d98:	009b      	lsls	r3, r3, #2
 8012d9a:	4a19      	ldr	r2, [pc, #100]	; (8012e00 <prvAddNewTaskToReadyList+0x11c>)
 8012d9c:	441a      	add	r2, r3
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	615a      	str	r2, [r3, #20]
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012da6:	4916      	ldr	r1, [pc, #88]	; (8012e00 <prvAddNewTaskToReadyList+0x11c>)
 8012da8:	4613      	mov	r3, r2
 8012daa:	009b      	lsls	r3, r3, #2
 8012dac:	4413      	add	r3, r2
 8012dae:	009b      	lsls	r3, r3, #2
 8012db0:	440b      	add	r3, r1
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	1c59      	adds	r1, r3, #1
 8012db6:	4812      	ldr	r0, [pc, #72]	; (8012e00 <prvAddNewTaskToReadyList+0x11c>)
 8012db8:	4613      	mov	r3, r2
 8012dba:	009b      	lsls	r3, r3, #2
 8012dbc:	4413      	add	r3, r2
 8012dbe:	009b      	lsls	r3, r3, #2
 8012dc0:	4403      	add	r3, r0
 8012dc2:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8012dc4:	f001 fb2c 	bl	8014420 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8012dc8:	4b0a      	ldr	r3, [pc, #40]	; (8012df4 <prvAddNewTaskToReadyList+0x110>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d008      	beq.n	8012de2 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012dd0:	4b07      	ldr	r3, [pc, #28]	; (8012df0 <prvAddNewTaskToReadyList+0x10c>)
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d201      	bcs.n	8012de2 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8012dde:	f001 fafb 	bl	80143d8 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8012de2:	bf00      	nop
 8012de4:	3710      	adds	r7, #16
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd80      	pop	{r7, pc}
 8012dea:	bf00      	nop
 8012dec:	20057464 	.word	0x20057464
 8012df0:	20056f90 	.word	0x20056f90
 8012df4:	20057470 	.word	0x20057470
 8012df8:	20057480 	.word	0x20057480
 8012dfc:	2005746c 	.word	0x2005746c
 8012e00:	20056f94 	.word	0x20056f94

08012e04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b084      	sub	sp, #16
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d00f      	beq.n	8012e36 <vTaskDelay+0x32>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8012e16:	4b0c      	ldr	r3, [pc, #48]	; (8012e48 <vTaskDelay+0x44>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d002      	beq.n	8012e24 <vTaskDelay+0x20>
 8012e1e:	f001 fc2b 	bl	8014678 <ulSetInterruptMask>
 8012e22:	e7fe      	b.n	8012e22 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8012e24:	f000 f86c 	bl	8012f00 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012e28:	2100      	movs	r1, #0
 8012e2a:	6878      	ldr	r0, [r7, #4]
 8012e2c:	f000 ff6e 	bl	8013d0c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8012e30:	f000 f874 	bl	8012f1c <xTaskResumeAll>
 8012e34:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d101      	bne.n	8012e40 <vTaskDelay+0x3c>
        {
            portYIELD_WITHIN_API();
 8012e3c:	f001 facc 	bl	80143d8 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8012e40:	bf00      	nop
 8012e42:	3710      	adds	r7, #16
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd80      	pop	{r7, pc}
 8012e48:	2005748c 	.word	0x2005748c

08012e4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b088      	sub	sp, #32
 8012e50:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8012e52:	2300      	movs	r3, #0
 8012e54:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8012e56:	2300      	movs	r3, #0
 8012e58:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012e5a:	463a      	mov	r2, r7
 8012e5c:	1d39      	adds	r1, r7, #4
 8012e5e:	f107 0308 	add.w	r3, r7, #8
 8012e62:	4618      	mov	r0, r3
 8012e64:	f7fe fd7a 	bl	801195c <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8012e68:	6839      	ldr	r1, [r7, #0]
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	68ba      	ldr	r2, [r7, #8]
 8012e6e:	9202      	str	r2, [sp, #8]
 8012e70:	9301      	str	r3, [sp, #4]
 8012e72:	2300      	movs	r3, #0
 8012e74:	9300      	str	r3, [sp, #0]
 8012e76:	2300      	movs	r3, #0
 8012e78:	460a      	mov	r2, r1
 8012e7a:	491a      	ldr	r1, [pc, #104]	; (8012ee4 <vTaskStartScheduler+0x98>)
 8012e7c:	481a      	ldr	r0, [pc, #104]	; (8012ee8 <vTaskStartScheduler+0x9c>)
 8012e7e:	f7ff fe1d 	bl	8012abc <xTaskCreateStatic>
 8012e82:	4603      	mov	r3, r0
 8012e84:	4a19      	ldr	r2, [pc, #100]	; (8012eec <vTaskStartScheduler+0xa0>)
 8012e86:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8012e88:	4b18      	ldr	r3, [pc, #96]	; (8012eec <vTaskStartScheduler+0xa0>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d002      	beq.n	8012e96 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8012e90:	2301      	movs	r3, #1
 8012e92:	60fb      	str	r3, [r7, #12]
 8012e94:	e001      	b.n	8012e9a <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8012e96:	2300      	movs	r3, #0
 8012e98:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2b01      	cmp	r3, #1
 8012e9e:	d102      	bne.n	8012ea6 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8012ea0:	f000 ffa2 	bl	8013de8 <xTimerCreateTimerTask>
 8012ea4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	d10e      	bne.n	8012eca <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8012eac:	f001 fbe4 	bl	8014678 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8012eb0:	4b0f      	ldr	r3, [pc, #60]	; (8012ef0 <vTaskStartScheduler+0xa4>)
 8012eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8012eb6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8012eb8:	4b0e      	ldr	r3, [pc, #56]	; (8012ef4 <vTaskStartScheduler+0xa8>)
 8012eba:	2201      	movs	r2, #1
 8012ebc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012ebe:	4b0e      	ldr	r3, [pc, #56]	; (8012ef8 <vTaskStartScheduler+0xac>)
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8012ec4:	f001 fb82 	bl	80145cc <xPortStartScheduler>
 8012ec8:	e006      	b.n	8012ed8 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ed0:	d102      	bne.n	8012ed8 <vTaskStartScheduler+0x8c>
 8012ed2:	f001 fbd1 	bl	8014678 <ulSetInterruptMask>
 8012ed6:	e7fe      	b.n	8012ed6 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8012ed8:	4b08      	ldr	r3, [pc, #32]	; (8012efc <vTaskStartScheduler+0xb0>)
 8012eda:	681b      	ldr	r3, [r3, #0]
}
 8012edc:	bf00      	nop
 8012ede:	3710      	adds	r7, #16
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}
 8012ee4:	08025708 	.word	0x08025708
 8012ee8:	080137a5 	.word	0x080137a5
 8012eec:	20057488 	.word	0x20057488
 8012ef0:	20057484 	.word	0x20057484
 8012ef4:	20057470 	.word	0x20057470
 8012ef8:	20057468 	.word	0x20057468
 8012efc:	20050078 	.word	0x20050078

08012f00 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012f00:	b480      	push	{r7}
 8012f02:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8012f04:	4b04      	ldr	r3, [pc, #16]	; (8012f18 <vTaskSuspendAll+0x18>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	3301      	adds	r3, #1
 8012f0a:	4a03      	ldr	r2, [pc, #12]	; (8012f18 <vTaskSuspendAll+0x18>)
 8012f0c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8012f0e:	bf00      	nop
 8012f10:	46bd      	mov	sp, r7
 8012f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f16:	4770      	bx	lr
 8012f18:	2005748c 	.word	0x2005748c

08012f1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b086      	sub	sp, #24
 8012f20:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8012f22:	2300      	movs	r3, #0
 8012f24:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8012f26:	2300      	movs	r3, #0
 8012f28:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8012f2a:	4b6a      	ldr	r3, [pc, #424]	; (80130d4 <xTaskResumeAll+0x1b8>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d102      	bne.n	8012f38 <xTaskResumeAll+0x1c>
 8012f32:	f001 fba1 	bl	8014678 <ulSetInterruptMask>
 8012f36:	e7fe      	b.n	8012f36 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8012f38:	f001 fa60 	bl	80143fc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8012f3c:	4b65      	ldr	r3, [pc, #404]	; (80130d4 <xTaskResumeAll+0x1b8>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	3b01      	subs	r3, #1
 8012f42:	4a64      	ldr	r2, [pc, #400]	; (80130d4 <xTaskResumeAll+0x1b8>)
 8012f44:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012f46:	4b63      	ldr	r3, [pc, #396]	; (80130d4 <xTaskResumeAll+0x1b8>)
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	f040 80bb 	bne.w	80130c6 <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012f50:	4b61      	ldr	r3, [pc, #388]	; (80130d8 <xTaskResumeAll+0x1bc>)
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	f000 80b6 	beq.w	80130c6 <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012f5a:	e08b      	b.n	8013074 <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f5c:	4b5f      	ldr	r3, [pc, #380]	; (80130dc <xTaskResumeAll+0x1c0>)
 8012f5e:	68db      	ldr	r3, [r3, #12]
 8012f60:	68db      	ldr	r3, [r3, #12]
 8012f62:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8012f64:	697b      	ldr	r3, [r7, #20]
 8012f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f68:	60bb      	str	r3, [r7, #8]
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	69db      	ldr	r3, [r3, #28]
 8012f6e:	697a      	ldr	r2, [r7, #20]
 8012f70:	6a12      	ldr	r2, [r2, #32]
 8012f72:	609a      	str	r2, [r3, #8]
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	6a1b      	ldr	r3, [r3, #32]
 8012f78:	697a      	ldr	r2, [r7, #20]
 8012f7a:	69d2      	ldr	r2, [r2, #28]
 8012f7c:	605a      	str	r2, [r3, #4]
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	685a      	ldr	r2, [r3, #4]
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	3318      	adds	r3, #24
 8012f86:	429a      	cmp	r2, r3
 8012f88:	d103      	bne.n	8012f92 <xTaskResumeAll+0x76>
 8012f8a:	697b      	ldr	r3, [r7, #20]
 8012f8c:	6a1a      	ldr	r2, [r3, #32]
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	605a      	str	r2, [r3, #4]
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	2200      	movs	r2, #0
 8012f96:	629a      	str	r2, [r3, #40]	; 0x28
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	1e5a      	subs	r2, r3, #1
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	695b      	ldr	r3, [r3, #20]
 8012fa6:	607b      	str	r3, [r7, #4]
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	689b      	ldr	r3, [r3, #8]
 8012fac:	697a      	ldr	r2, [r7, #20]
 8012fae:	68d2      	ldr	r2, [r2, #12]
 8012fb0:	609a      	str	r2, [r3, #8]
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	68db      	ldr	r3, [r3, #12]
 8012fb6:	697a      	ldr	r2, [r7, #20]
 8012fb8:	6892      	ldr	r2, [r2, #8]
 8012fba:	605a      	str	r2, [r3, #4]
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	685a      	ldr	r2, [r3, #4]
 8012fc0:	697b      	ldr	r3, [r7, #20]
 8012fc2:	3304      	adds	r3, #4
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	d103      	bne.n	8012fd0 <xTaskResumeAll+0xb4>
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	68da      	ldr	r2, [r3, #12]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	605a      	str	r2, [r3, #4]
 8012fd0:	697b      	ldr	r3, [r7, #20]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	615a      	str	r2, [r3, #20]
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	1e5a      	subs	r2, r3, #1
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fe4:	4b3e      	ldr	r3, [pc, #248]	; (80130e0 <xTaskResumeAll+0x1c4>)
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d903      	bls.n	8012ff4 <xTaskResumeAll+0xd8>
 8012fec:	697b      	ldr	r3, [r7, #20]
 8012fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ff0:	4a3b      	ldr	r2, [pc, #236]	; (80130e0 <xTaskResumeAll+0x1c4>)
 8012ff2:	6013      	str	r3, [r2, #0]
 8012ff4:	697b      	ldr	r3, [r7, #20]
 8012ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ff8:	493a      	ldr	r1, [pc, #232]	; (80130e4 <xTaskResumeAll+0x1c8>)
 8012ffa:	4613      	mov	r3, r2
 8012ffc:	009b      	lsls	r3, r3, #2
 8012ffe:	4413      	add	r3, r2
 8013000:	009b      	lsls	r3, r3, #2
 8013002:	440b      	add	r3, r1
 8013004:	3304      	adds	r3, #4
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	603b      	str	r3, [r7, #0]
 801300a:	697b      	ldr	r3, [r7, #20]
 801300c:	683a      	ldr	r2, [r7, #0]
 801300e:	609a      	str	r2, [r3, #8]
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	689a      	ldr	r2, [r3, #8]
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	60da      	str	r2, [r3, #12]
 8013018:	683b      	ldr	r3, [r7, #0]
 801301a:	689b      	ldr	r3, [r3, #8]
 801301c:	697a      	ldr	r2, [r7, #20]
 801301e:	3204      	adds	r2, #4
 8013020:	605a      	str	r2, [r3, #4]
 8013022:	697b      	ldr	r3, [r7, #20]
 8013024:	1d1a      	adds	r2, r3, #4
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	609a      	str	r2, [r3, #8]
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801302e:	4613      	mov	r3, r2
 8013030:	009b      	lsls	r3, r3, #2
 8013032:	4413      	add	r3, r2
 8013034:	009b      	lsls	r3, r3, #2
 8013036:	4a2b      	ldr	r2, [pc, #172]	; (80130e4 <xTaskResumeAll+0x1c8>)
 8013038:	441a      	add	r2, r3
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	615a      	str	r2, [r3, #20]
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013042:	4928      	ldr	r1, [pc, #160]	; (80130e4 <xTaskResumeAll+0x1c8>)
 8013044:	4613      	mov	r3, r2
 8013046:	009b      	lsls	r3, r3, #2
 8013048:	4413      	add	r3, r2
 801304a:	009b      	lsls	r3, r3, #2
 801304c:	440b      	add	r3, r1
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	1c59      	adds	r1, r3, #1
 8013052:	4824      	ldr	r0, [pc, #144]	; (80130e4 <xTaskResumeAll+0x1c8>)
 8013054:	4613      	mov	r3, r2
 8013056:	009b      	lsls	r3, r3, #2
 8013058:	4413      	add	r3, r2
 801305a:	009b      	lsls	r3, r3, #2
 801305c:	4403      	add	r3, r0
 801305e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013060:	697b      	ldr	r3, [r7, #20]
 8013062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013064:	4b20      	ldr	r3, [pc, #128]	; (80130e8 <xTaskResumeAll+0x1cc>)
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801306a:	429a      	cmp	r2, r3
 801306c:	d302      	bcc.n	8013074 <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 801306e:	4b1f      	ldr	r3, [pc, #124]	; (80130ec <xTaskResumeAll+0x1d0>)
 8013070:	2201      	movs	r2, #1
 8013072:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013074:	4b19      	ldr	r3, [pc, #100]	; (80130dc <xTaskResumeAll+0x1c0>)
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	2b00      	cmp	r3, #0
 801307a:	f47f af6f 	bne.w	8012f5c <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d001      	beq.n	8013088 <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8013084:	f000 fc34 	bl	80138f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013088:	4b19      	ldr	r3, [pc, #100]	; (80130f0 <xTaskResumeAll+0x1d4>)
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d010      	beq.n	80130b6 <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8013094:	f000 f85c 	bl	8013150 <xTaskIncrementTick>
 8013098:	4603      	mov	r3, r0
 801309a:	2b00      	cmp	r3, #0
 801309c:	d002      	beq.n	80130a4 <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 801309e:	4b13      	ldr	r3, [pc, #76]	; (80130ec <xTaskResumeAll+0x1d0>)
 80130a0:	2201      	movs	r2, #1
 80130a2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	3b01      	subs	r3, #1
 80130a8:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d1f1      	bne.n	8013094 <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 80130b0:	4b0f      	ldr	r3, [pc, #60]	; (80130f0 <xTaskResumeAll+0x1d4>)
 80130b2:	2200      	movs	r2, #0
 80130b4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80130b6:	4b0d      	ldr	r3, [pc, #52]	; (80130ec <xTaskResumeAll+0x1d0>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d003      	beq.n	80130c6 <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80130be:	2301      	movs	r3, #1
 80130c0:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80130c2:	f001 f989 	bl	80143d8 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80130c6:	f001 f9ab 	bl	8014420 <vPortExitCritical>

    return xAlreadyYielded;
 80130ca:	693b      	ldr	r3, [r7, #16]
}
 80130cc:	4618      	mov	r0, r3
 80130ce:	3718      	adds	r7, #24
 80130d0:	46bd      	mov	sp, r7
 80130d2:	bd80      	pop	{r7, pc}
 80130d4:	2005748c 	.word	0x2005748c
 80130d8:	20057464 	.word	0x20057464
 80130dc:	20057424 	.word	0x20057424
 80130e0:	2005746c 	.word	0x2005746c
 80130e4:	20056f94 	.word	0x20056f94
 80130e8:	20056f90 	.word	0x20056f90
 80130ec:	20057478 	.word	0x20057478
 80130f0:	20057474 	.word	0x20057474

080130f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80130f4:	b480      	push	{r7}
 80130f6:	b083      	sub	sp, #12
 80130f8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80130fa:	4b05      	ldr	r3, [pc, #20]	; (8013110 <xTaskGetTickCount+0x1c>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8013100:	687b      	ldr	r3, [r7, #4]
}
 8013102:	4618      	mov	r0, r3
 8013104:	370c      	adds	r7, #12
 8013106:	46bd      	mov	sp, r7
 8013108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310c:	4770      	bx	lr
 801310e:	bf00      	nop
 8013110:	20057468 	.word	0x20057468

08013114 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013114:	b480      	push	{r7}
 8013116:	b083      	sub	sp, #12
 8013118:	af00      	add	r7, sp, #0
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801311a:	2300      	movs	r3, #0
 801311c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 801311e:	4b05      	ldr	r3, [pc, #20]	; (8013134 <xTaskGetTickCountFromISR+0x20>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8013124:	683b      	ldr	r3, [r7, #0]
}
 8013126:	4618      	mov	r0, r3
 8013128:	370c      	adds	r7, #12
 801312a:	46bd      	mov	sp, r7
 801312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013130:	4770      	bx	lr
 8013132:	bf00      	nop
 8013134:	20057468 	.word	0x20057468

08013138 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8013138:	b480      	push	{r7}
 801313a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 801313c:	4b03      	ldr	r3, [pc, #12]	; (801314c <uxTaskGetNumberOfTasks+0x14>)
 801313e:	681b      	ldr	r3, [r3, #0]
}
 8013140:	4618      	mov	r0, r3
 8013142:	46bd      	mov	sp, r7
 8013144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013148:	4770      	bx	lr
 801314a:	bf00      	nop
 801314c:	20057464 	.word	0x20057464

08013150 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b088      	sub	sp, #32
 8013154:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8013156:	2300      	movs	r3, #0
 8013158:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801315a:	4b7a      	ldr	r3, [pc, #488]	; (8013344 <xTaskIncrementTick+0x1f4>)
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	2b00      	cmp	r3, #0
 8013160:	f040 80e5 	bne.w	801332e <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013164:	4b78      	ldr	r3, [pc, #480]	; (8013348 <xTaskIncrementTick+0x1f8>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	3301      	adds	r3, #1
 801316a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 801316c:	4a76      	ldr	r2, [pc, #472]	; (8013348 <xTaskIncrementTick+0x1f8>)
 801316e:	69bb      	ldr	r3, [r7, #24]
 8013170:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013172:	69bb      	ldr	r3, [r7, #24]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d118      	bne.n	80131aa <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 8013178:	4b74      	ldr	r3, [pc, #464]	; (801334c <xTaskIncrementTick+0x1fc>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d002      	beq.n	8013188 <xTaskIncrementTick+0x38>
 8013182:	f001 fa79 	bl	8014678 <ulSetInterruptMask>
 8013186:	e7fe      	b.n	8013186 <xTaskIncrementTick+0x36>
 8013188:	4b70      	ldr	r3, [pc, #448]	; (801334c <xTaskIncrementTick+0x1fc>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	617b      	str	r3, [r7, #20]
 801318e:	4b70      	ldr	r3, [pc, #448]	; (8013350 <xTaskIncrementTick+0x200>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	4a6e      	ldr	r2, [pc, #440]	; (801334c <xTaskIncrementTick+0x1fc>)
 8013194:	6013      	str	r3, [r2, #0]
 8013196:	4a6e      	ldr	r2, [pc, #440]	; (8013350 <xTaskIncrementTick+0x200>)
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	6013      	str	r3, [r2, #0]
 801319c:	4b6d      	ldr	r3, [pc, #436]	; (8013354 <xTaskIncrementTick+0x204>)
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	3301      	adds	r3, #1
 80131a2:	4a6c      	ldr	r2, [pc, #432]	; (8013354 <xTaskIncrementTick+0x204>)
 80131a4:	6013      	str	r3, [r2, #0]
 80131a6:	f000 fba3 	bl	80138f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80131aa:	4b6b      	ldr	r3, [pc, #428]	; (8013358 <xTaskIncrementTick+0x208>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	69ba      	ldr	r2, [r7, #24]
 80131b0:	429a      	cmp	r2, r3
 80131b2:	f0c0 80a7 	bcc.w	8013304 <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80131b6:	4b65      	ldr	r3, [pc, #404]	; (801334c <xTaskIncrementTick+0x1fc>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d104      	bne.n	80131ca <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131c0:	4b65      	ldr	r3, [pc, #404]	; (8013358 <xTaskIncrementTick+0x208>)
 80131c2:	f04f 32ff 	mov.w	r2, #4294967295
 80131c6:	601a      	str	r2, [r3, #0]
                    break;
 80131c8:	e09c      	b.n	8013304 <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131ca:	4b60      	ldr	r3, [pc, #384]	; (801334c <xTaskIncrementTick+0x1fc>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	68db      	ldr	r3, [r3, #12]
 80131d0:	68db      	ldr	r3, [r3, #12]
 80131d2:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80131d4:	693b      	ldr	r3, [r7, #16]
 80131d6:	685b      	ldr	r3, [r3, #4]
 80131d8:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80131da:	69ba      	ldr	r2, [r7, #24]
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	429a      	cmp	r2, r3
 80131e0:	d203      	bcs.n	80131ea <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80131e2:	4a5d      	ldr	r2, [pc, #372]	; (8013358 <xTaskIncrementTick+0x208>)
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80131e8:	e08c      	b.n	8013304 <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80131ea:	693b      	ldr	r3, [r7, #16]
 80131ec:	695b      	ldr	r3, [r3, #20]
 80131ee:	60bb      	str	r3, [r7, #8]
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	689b      	ldr	r3, [r3, #8]
 80131f4:	693a      	ldr	r2, [r7, #16]
 80131f6:	68d2      	ldr	r2, [r2, #12]
 80131f8:	609a      	str	r2, [r3, #8]
 80131fa:	693b      	ldr	r3, [r7, #16]
 80131fc:	68db      	ldr	r3, [r3, #12]
 80131fe:	693a      	ldr	r2, [r7, #16]
 8013200:	6892      	ldr	r2, [r2, #8]
 8013202:	605a      	str	r2, [r3, #4]
 8013204:	68bb      	ldr	r3, [r7, #8]
 8013206:	685a      	ldr	r2, [r3, #4]
 8013208:	693b      	ldr	r3, [r7, #16]
 801320a:	3304      	adds	r3, #4
 801320c:	429a      	cmp	r2, r3
 801320e:	d103      	bne.n	8013218 <xTaskIncrementTick+0xc8>
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	68da      	ldr	r2, [r3, #12]
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	605a      	str	r2, [r3, #4]
 8013218:	693b      	ldr	r3, [r7, #16]
 801321a:	2200      	movs	r2, #0
 801321c:	615a      	str	r2, [r3, #20]
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	1e5a      	subs	r2, r3, #1
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801322c:	2b00      	cmp	r3, #0
 801322e:	d01e      	beq.n	801326e <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8013230:	693b      	ldr	r3, [r7, #16]
 8013232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013234:	607b      	str	r3, [r7, #4]
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	69db      	ldr	r3, [r3, #28]
 801323a:	693a      	ldr	r2, [r7, #16]
 801323c:	6a12      	ldr	r2, [r2, #32]
 801323e:	609a      	str	r2, [r3, #8]
 8013240:	693b      	ldr	r3, [r7, #16]
 8013242:	6a1b      	ldr	r3, [r3, #32]
 8013244:	693a      	ldr	r2, [r7, #16]
 8013246:	69d2      	ldr	r2, [r2, #28]
 8013248:	605a      	str	r2, [r3, #4]
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	685a      	ldr	r2, [r3, #4]
 801324e:	693b      	ldr	r3, [r7, #16]
 8013250:	3318      	adds	r3, #24
 8013252:	429a      	cmp	r2, r3
 8013254:	d103      	bne.n	801325e <xTaskIncrementTick+0x10e>
 8013256:	693b      	ldr	r3, [r7, #16]
 8013258:	6a1a      	ldr	r2, [r3, #32]
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	605a      	str	r2, [r3, #4]
 801325e:	693b      	ldr	r3, [r7, #16]
 8013260:	2200      	movs	r2, #0
 8013262:	629a      	str	r2, [r3, #40]	; 0x28
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	1e5a      	subs	r2, r3, #1
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 801326e:	693b      	ldr	r3, [r7, #16]
 8013270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013272:	4b3a      	ldr	r3, [pc, #232]	; (801335c <xTaskIncrementTick+0x20c>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	429a      	cmp	r2, r3
 8013278:	d903      	bls.n	8013282 <xTaskIncrementTick+0x132>
 801327a:	693b      	ldr	r3, [r7, #16]
 801327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801327e:	4a37      	ldr	r2, [pc, #220]	; (801335c <xTaskIncrementTick+0x20c>)
 8013280:	6013      	str	r3, [r2, #0]
 8013282:	693b      	ldr	r3, [r7, #16]
 8013284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013286:	4936      	ldr	r1, [pc, #216]	; (8013360 <xTaskIncrementTick+0x210>)
 8013288:	4613      	mov	r3, r2
 801328a:	009b      	lsls	r3, r3, #2
 801328c:	4413      	add	r3, r2
 801328e:	009b      	lsls	r3, r3, #2
 8013290:	440b      	add	r3, r1
 8013292:	3304      	adds	r3, #4
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	603b      	str	r3, [r7, #0]
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	683a      	ldr	r2, [r7, #0]
 801329c:	609a      	str	r2, [r3, #8]
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	689a      	ldr	r2, [r3, #8]
 80132a2:	693b      	ldr	r3, [r7, #16]
 80132a4:	60da      	str	r2, [r3, #12]
 80132a6:	683b      	ldr	r3, [r7, #0]
 80132a8:	689b      	ldr	r3, [r3, #8]
 80132aa:	693a      	ldr	r2, [r7, #16]
 80132ac:	3204      	adds	r2, #4
 80132ae:	605a      	str	r2, [r3, #4]
 80132b0:	693b      	ldr	r3, [r7, #16]
 80132b2:	1d1a      	adds	r2, r3, #4
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	609a      	str	r2, [r3, #8]
 80132b8:	693b      	ldr	r3, [r7, #16]
 80132ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132bc:	4613      	mov	r3, r2
 80132be:	009b      	lsls	r3, r3, #2
 80132c0:	4413      	add	r3, r2
 80132c2:	009b      	lsls	r3, r3, #2
 80132c4:	4a26      	ldr	r2, [pc, #152]	; (8013360 <xTaskIncrementTick+0x210>)
 80132c6:	441a      	add	r2, r3
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	615a      	str	r2, [r3, #20]
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132d0:	4923      	ldr	r1, [pc, #140]	; (8013360 <xTaskIncrementTick+0x210>)
 80132d2:	4613      	mov	r3, r2
 80132d4:	009b      	lsls	r3, r3, #2
 80132d6:	4413      	add	r3, r2
 80132d8:	009b      	lsls	r3, r3, #2
 80132da:	440b      	add	r3, r1
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	1c59      	adds	r1, r3, #1
 80132e0:	481f      	ldr	r0, [pc, #124]	; (8013360 <xTaskIncrementTick+0x210>)
 80132e2:	4613      	mov	r3, r2
 80132e4:	009b      	lsls	r3, r3, #2
 80132e6:	4413      	add	r3, r2
 80132e8:	009b      	lsls	r3, r3, #2
 80132ea:	4403      	add	r3, r0
 80132ec:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80132ee:	693b      	ldr	r3, [r7, #16]
 80132f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132f2:	4b1c      	ldr	r3, [pc, #112]	; (8013364 <xTaskIncrementTick+0x214>)
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132f8:	429a      	cmp	r2, r3
 80132fa:	f67f af5c 	bls.w	80131b6 <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 80132fe:	2301      	movs	r3, #1
 8013300:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013302:	e758      	b.n	80131b6 <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013304:	4b17      	ldr	r3, [pc, #92]	; (8013364 <xTaskIncrementTick+0x214>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801330a:	4915      	ldr	r1, [pc, #84]	; (8013360 <xTaskIncrementTick+0x210>)
 801330c:	4613      	mov	r3, r2
 801330e:	009b      	lsls	r3, r3, #2
 8013310:	4413      	add	r3, r2
 8013312:	009b      	lsls	r3, r3, #2
 8013314:	440b      	add	r3, r1
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	2b01      	cmp	r3, #1
 801331a:	d901      	bls.n	8013320 <xTaskIncrementTick+0x1d0>
            {
                xSwitchRequired = pdTRUE;
 801331c:	2301      	movs	r3, #1
 801331e:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8013320:	4b11      	ldr	r3, [pc, #68]	; (8013368 <xTaskIncrementTick+0x218>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d007      	beq.n	8013338 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8013328:	2301      	movs	r3, #1
 801332a:	61fb      	str	r3, [r7, #28]
 801332c:	e004      	b.n	8013338 <xTaskIncrementTick+0x1e8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 801332e:	4b0f      	ldr	r3, [pc, #60]	; (801336c <xTaskIncrementTick+0x21c>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	3301      	adds	r3, #1
 8013334:	4a0d      	ldr	r2, [pc, #52]	; (801336c <xTaskIncrementTick+0x21c>)
 8013336:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8013338:	69fb      	ldr	r3, [r7, #28]
}
 801333a:	4618      	mov	r0, r3
 801333c:	3720      	adds	r7, #32
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}
 8013342:	bf00      	nop
 8013344:	2005748c 	.word	0x2005748c
 8013348:	20057468 	.word	0x20057468
 801334c:	2005741c 	.word	0x2005741c
 8013350:	20057420 	.word	0x20057420
 8013354:	2005747c 	.word	0x2005747c
 8013358:	20057484 	.word	0x20057484
 801335c:	2005746c 	.word	0x2005746c
 8013360:	20056f94 	.word	0x20056f94
 8013364:	20056f90 	.word	0x20056f90
 8013368:	20057478 	.word	0x20057478
 801336c:	20057474 	.word	0x20057474

08013370 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b084      	sub	sp, #16
 8013374:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013376:	4b36      	ldr	r3, [pc, #216]	; (8013450 <vTaskSwitchContext+0xe0>)
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d003      	beq.n	8013386 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 801337e:	4b35      	ldr	r3, [pc, #212]	; (8013454 <vTaskSwitchContext+0xe4>)
 8013380:	2201      	movs	r2, #1
 8013382:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8013384:	e060      	b.n	8013448 <vTaskSwitchContext+0xd8>
        xYieldPending = pdFALSE;
 8013386:	4b33      	ldr	r3, [pc, #204]	; (8013454 <vTaskSwitchContext+0xe4>)
 8013388:	2200      	movs	r2, #0
 801338a:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 801338c:	4b32      	ldr	r3, [pc, #200]	; (8013458 <vTaskSwitchContext+0xe8>)
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013392:	60bb      	str	r3, [r7, #8]
 8013394:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8013398:	607b      	str	r3, [r7, #4]
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	687a      	ldr	r2, [r7, #4]
 80133a0:	429a      	cmp	r2, r3
 80133a2:	d111      	bne.n	80133c8 <vTaskSwitchContext+0x58>
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	3304      	adds	r3, #4
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	429a      	cmp	r2, r3
 80133ae:	d10b      	bne.n	80133c8 <vTaskSwitchContext+0x58>
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	3308      	adds	r3, #8
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	687a      	ldr	r2, [r7, #4]
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d105      	bne.n	80133c8 <vTaskSwitchContext+0x58>
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	330c      	adds	r3, #12
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	687a      	ldr	r2, [r7, #4]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d008      	beq.n	80133da <vTaskSwitchContext+0x6a>
 80133c8:	4b23      	ldr	r3, [pc, #140]	; (8013458 <vTaskSwitchContext+0xe8>)
 80133ca:	681a      	ldr	r2, [r3, #0]
 80133cc:	4b22      	ldr	r3, [pc, #136]	; (8013458 <vTaskSwitchContext+0xe8>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	3334      	adds	r3, #52	; 0x34
 80133d2:	4619      	mov	r1, r3
 80133d4:	4610      	mov	r0, r2
 80133d6:	f7ed faab 	bl	8000930 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133da:	4b20      	ldr	r3, [pc, #128]	; (801345c <vTaskSwitchContext+0xec>)
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	60fb      	str	r3, [r7, #12]
 80133e0:	e008      	b.n	80133f4 <vTaskSwitchContext+0x84>
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d102      	bne.n	80133ee <vTaskSwitchContext+0x7e>
 80133e8:	f001 f946 	bl	8014678 <ulSetInterruptMask>
 80133ec:	e7fe      	b.n	80133ec <vTaskSwitchContext+0x7c>
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	3b01      	subs	r3, #1
 80133f2:	60fb      	str	r3, [r7, #12]
 80133f4:	491a      	ldr	r1, [pc, #104]	; (8013460 <vTaskSwitchContext+0xf0>)
 80133f6:	68fa      	ldr	r2, [r7, #12]
 80133f8:	4613      	mov	r3, r2
 80133fa:	009b      	lsls	r3, r3, #2
 80133fc:	4413      	add	r3, r2
 80133fe:	009b      	lsls	r3, r3, #2
 8013400:	440b      	add	r3, r1
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d0ec      	beq.n	80133e2 <vTaskSwitchContext+0x72>
 8013408:	68fa      	ldr	r2, [r7, #12]
 801340a:	4613      	mov	r3, r2
 801340c:	009b      	lsls	r3, r3, #2
 801340e:	4413      	add	r3, r2
 8013410:	009b      	lsls	r3, r3, #2
 8013412:	4a13      	ldr	r2, [pc, #76]	; (8013460 <vTaskSwitchContext+0xf0>)
 8013414:	4413      	add	r3, r2
 8013416:	603b      	str	r3, [r7, #0]
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	685b      	ldr	r3, [r3, #4]
 801341c:	685a      	ldr	r2, [r3, #4]
 801341e:	683b      	ldr	r3, [r7, #0]
 8013420:	605a      	str	r2, [r3, #4]
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	685a      	ldr	r2, [r3, #4]
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	3308      	adds	r3, #8
 801342a:	429a      	cmp	r2, r3
 801342c:	d104      	bne.n	8013438 <vTaskSwitchContext+0xc8>
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	685b      	ldr	r3, [r3, #4]
 8013432:	685a      	ldr	r2, [r3, #4]
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	605a      	str	r2, [r3, #4]
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	685b      	ldr	r3, [r3, #4]
 801343c:	68db      	ldr	r3, [r3, #12]
 801343e:	4a06      	ldr	r2, [pc, #24]	; (8013458 <vTaskSwitchContext+0xe8>)
 8013440:	6013      	str	r3, [r2, #0]
 8013442:	4a06      	ldr	r2, [pc, #24]	; (801345c <vTaskSwitchContext+0xec>)
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	6013      	str	r3, [r2, #0]
}
 8013448:	bf00      	nop
 801344a:	3710      	adds	r7, #16
 801344c:	46bd      	mov	sp, r7
 801344e:	bd80      	pop	{r7, pc}
 8013450:	2005748c 	.word	0x2005748c
 8013454:	20057478 	.word	0x20057478
 8013458:	20056f90 	.word	0x20056f90
 801345c:	2005746c 	.word	0x2005746c
 8013460:	20056f94 	.word	0x20056f94

08013464 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b082      	sub	sp, #8
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d102      	bne.n	801347a <vTaskPlaceOnEventList+0x16>
 8013474:	f001 f900 	bl	8014678 <ulSetInterruptMask>
 8013478:	e7fe      	b.n	8013478 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801347a:	4b07      	ldr	r3, [pc, #28]	; (8013498 <vTaskPlaceOnEventList+0x34>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	3318      	adds	r3, #24
 8013480:	4619      	mov	r1, r3
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f7fe facb 	bl	8011a1e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013488:	2101      	movs	r1, #1
 801348a:	6838      	ldr	r0, [r7, #0]
 801348c:	f000 fc3e 	bl	8013d0c <prvAddCurrentTaskToDelayedList>
}
 8013490:	bf00      	nop
 8013492:	3708      	adds	r7, #8
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}
 8013498:	20056f90 	.word	0x20056f90

0801349c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 801349c:	b580      	push	{r7, lr}
 801349e:	b086      	sub	sp, #24
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	60f8      	str	r0, [r7, #12]
 80134a4:	60b9      	str	r1, [r7, #8]
 80134a6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d102      	bne.n	80134b4 <vTaskPlaceOnEventListRestricted+0x18>
 80134ae:	f001 f8e3 	bl	8014678 <ulSetInterruptMask>
 80134b2:	e7fe      	b.n	80134b2 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	685b      	ldr	r3, [r3, #4]
 80134b8:	617b      	str	r3, [r7, #20]
 80134ba:	4b16      	ldr	r3, [pc, #88]	; (8013514 <vTaskPlaceOnEventListRestricted+0x78>)
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	697a      	ldr	r2, [r7, #20]
 80134c0:	61da      	str	r2, [r3, #28]
 80134c2:	4b14      	ldr	r3, [pc, #80]	; (8013514 <vTaskPlaceOnEventListRestricted+0x78>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	697a      	ldr	r2, [r7, #20]
 80134c8:	6892      	ldr	r2, [r2, #8]
 80134ca:	621a      	str	r2, [r3, #32]
 80134cc:	4b11      	ldr	r3, [pc, #68]	; (8013514 <vTaskPlaceOnEventListRestricted+0x78>)
 80134ce:	681a      	ldr	r2, [r3, #0]
 80134d0:	697b      	ldr	r3, [r7, #20]
 80134d2:	689b      	ldr	r3, [r3, #8]
 80134d4:	3218      	adds	r2, #24
 80134d6:	605a      	str	r2, [r3, #4]
 80134d8:	4b0e      	ldr	r3, [pc, #56]	; (8013514 <vTaskPlaceOnEventListRestricted+0x78>)
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	f103 0218 	add.w	r2, r3, #24
 80134e0:	697b      	ldr	r3, [r7, #20]
 80134e2:	609a      	str	r2, [r3, #8]
 80134e4:	4b0b      	ldr	r3, [pc, #44]	; (8013514 <vTaskPlaceOnEventListRestricted+0x78>)
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	68fa      	ldr	r2, [r7, #12]
 80134ea:	629a      	str	r2, [r3, #40]	; 0x28
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	1c5a      	adds	r2, r3, #1
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d002      	beq.n	8013502 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 80134fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013500:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013502:	6879      	ldr	r1, [r7, #4]
 8013504:	68b8      	ldr	r0, [r7, #8]
 8013506:	f000 fc01 	bl	8013d0c <prvAddCurrentTaskToDelayedList>
    }
 801350a:	bf00      	nop
 801350c:	3718      	adds	r7, #24
 801350e:	46bd      	mov	sp, r7
 8013510:	bd80      	pop	{r7, pc}
 8013512:	bf00      	nop
 8013514:	20056f90 	.word	0x20056f90

08013518 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b088      	sub	sp, #32
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	68db      	ldr	r3, [r3, #12]
 8013524:	68db      	ldr	r3, [r3, #12]
 8013526:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8013528:	69bb      	ldr	r3, [r7, #24]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d102      	bne.n	8013534 <xTaskRemoveFromEventList+0x1c>
 801352e:	f001 f8a3 	bl	8014678 <ulSetInterruptMask>
 8013532:	e7fe      	b.n	8013532 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8013534:	69bb      	ldr	r3, [r7, #24]
 8013536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013538:	617b      	str	r3, [r7, #20]
 801353a:	69bb      	ldr	r3, [r7, #24]
 801353c:	69db      	ldr	r3, [r3, #28]
 801353e:	69ba      	ldr	r2, [r7, #24]
 8013540:	6a12      	ldr	r2, [r2, #32]
 8013542:	609a      	str	r2, [r3, #8]
 8013544:	69bb      	ldr	r3, [r7, #24]
 8013546:	6a1b      	ldr	r3, [r3, #32]
 8013548:	69ba      	ldr	r2, [r7, #24]
 801354a:	69d2      	ldr	r2, [r2, #28]
 801354c:	605a      	str	r2, [r3, #4]
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	685a      	ldr	r2, [r3, #4]
 8013552:	69bb      	ldr	r3, [r7, #24]
 8013554:	3318      	adds	r3, #24
 8013556:	429a      	cmp	r2, r3
 8013558:	d103      	bne.n	8013562 <xTaskRemoveFromEventList+0x4a>
 801355a:	69bb      	ldr	r3, [r7, #24]
 801355c:	6a1a      	ldr	r2, [r3, #32]
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	605a      	str	r2, [r3, #4]
 8013562:	69bb      	ldr	r3, [r7, #24]
 8013564:	2200      	movs	r2, #0
 8013566:	629a      	str	r2, [r3, #40]	; 0x28
 8013568:	697b      	ldr	r3, [r7, #20]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	1e5a      	subs	r2, r3, #1
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013572:	4b4a      	ldr	r3, [pc, #296]	; (801369c <xTaskRemoveFromEventList+0x184>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d15f      	bne.n	801363a <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 801357a:	69bb      	ldr	r3, [r7, #24]
 801357c:	695b      	ldr	r3, [r3, #20]
 801357e:	60fb      	str	r3, [r7, #12]
 8013580:	69bb      	ldr	r3, [r7, #24]
 8013582:	689b      	ldr	r3, [r3, #8]
 8013584:	69ba      	ldr	r2, [r7, #24]
 8013586:	68d2      	ldr	r2, [r2, #12]
 8013588:	609a      	str	r2, [r3, #8]
 801358a:	69bb      	ldr	r3, [r7, #24]
 801358c:	68db      	ldr	r3, [r3, #12]
 801358e:	69ba      	ldr	r2, [r7, #24]
 8013590:	6892      	ldr	r2, [r2, #8]
 8013592:	605a      	str	r2, [r3, #4]
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	685a      	ldr	r2, [r3, #4]
 8013598:	69bb      	ldr	r3, [r7, #24]
 801359a:	3304      	adds	r3, #4
 801359c:	429a      	cmp	r2, r3
 801359e:	d103      	bne.n	80135a8 <xTaskRemoveFromEventList+0x90>
 80135a0:	69bb      	ldr	r3, [r7, #24]
 80135a2:	68da      	ldr	r2, [r3, #12]
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	605a      	str	r2, [r3, #4]
 80135a8:	69bb      	ldr	r3, [r7, #24]
 80135aa:	2200      	movs	r2, #0
 80135ac:	615a      	str	r2, [r3, #20]
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	1e5a      	subs	r2, r3, #1
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80135b8:	69bb      	ldr	r3, [r7, #24]
 80135ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135bc:	4b38      	ldr	r3, [pc, #224]	; (80136a0 <xTaskRemoveFromEventList+0x188>)
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	429a      	cmp	r2, r3
 80135c2:	d903      	bls.n	80135cc <xTaskRemoveFromEventList+0xb4>
 80135c4:	69bb      	ldr	r3, [r7, #24]
 80135c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135c8:	4a35      	ldr	r2, [pc, #212]	; (80136a0 <xTaskRemoveFromEventList+0x188>)
 80135ca:	6013      	str	r3, [r2, #0]
 80135cc:	69bb      	ldr	r3, [r7, #24]
 80135ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135d0:	4934      	ldr	r1, [pc, #208]	; (80136a4 <xTaskRemoveFromEventList+0x18c>)
 80135d2:	4613      	mov	r3, r2
 80135d4:	009b      	lsls	r3, r3, #2
 80135d6:	4413      	add	r3, r2
 80135d8:	009b      	lsls	r3, r3, #2
 80135da:	440b      	add	r3, r1
 80135dc:	3304      	adds	r3, #4
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	60bb      	str	r3, [r7, #8]
 80135e2:	69bb      	ldr	r3, [r7, #24]
 80135e4:	68ba      	ldr	r2, [r7, #8]
 80135e6:	609a      	str	r2, [r3, #8]
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	689a      	ldr	r2, [r3, #8]
 80135ec:	69bb      	ldr	r3, [r7, #24]
 80135ee:	60da      	str	r2, [r3, #12]
 80135f0:	68bb      	ldr	r3, [r7, #8]
 80135f2:	689b      	ldr	r3, [r3, #8]
 80135f4:	69ba      	ldr	r2, [r7, #24]
 80135f6:	3204      	adds	r2, #4
 80135f8:	605a      	str	r2, [r3, #4]
 80135fa:	69bb      	ldr	r3, [r7, #24]
 80135fc:	1d1a      	adds	r2, r3, #4
 80135fe:	68bb      	ldr	r3, [r7, #8]
 8013600:	609a      	str	r2, [r3, #8]
 8013602:	69bb      	ldr	r3, [r7, #24]
 8013604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013606:	4613      	mov	r3, r2
 8013608:	009b      	lsls	r3, r3, #2
 801360a:	4413      	add	r3, r2
 801360c:	009b      	lsls	r3, r3, #2
 801360e:	4a25      	ldr	r2, [pc, #148]	; (80136a4 <xTaskRemoveFromEventList+0x18c>)
 8013610:	441a      	add	r2, r3
 8013612:	69bb      	ldr	r3, [r7, #24]
 8013614:	615a      	str	r2, [r3, #20]
 8013616:	69bb      	ldr	r3, [r7, #24]
 8013618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801361a:	4922      	ldr	r1, [pc, #136]	; (80136a4 <xTaskRemoveFromEventList+0x18c>)
 801361c:	4613      	mov	r3, r2
 801361e:	009b      	lsls	r3, r3, #2
 8013620:	4413      	add	r3, r2
 8013622:	009b      	lsls	r3, r3, #2
 8013624:	440b      	add	r3, r1
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	1c59      	adds	r1, r3, #1
 801362a:	481e      	ldr	r0, [pc, #120]	; (80136a4 <xTaskRemoveFromEventList+0x18c>)
 801362c:	4613      	mov	r3, r2
 801362e:	009b      	lsls	r3, r3, #2
 8013630:	4413      	add	r3, r2
 8013632:	009b      	lsls	r3, r3, #2
 8013634:	4403      	add	r3, r0
 8013636:	6019      	str	r1, [r3, #0]
 8013638:	e01b      	b.n	8013672 <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801363a:	4b1b      	ldr	r3, [pc, #108]	; (80136a8 <xTaskRemoveFromEventList+0x190>)
 801363c:	685b      	ldr	r3, [r3, #4]
 801363e:	613b      	str	r3, [r7, #16]
 8013640:	69bb      	ldr	r3, [r7, #24]
 8013642:	693a      	ldr	r2, [r7, #16]
 8013644:	61da      	str	r2, [r3, #28]
 8013646:	693b      	ldr	r3, [r7, #16]
 8013648:	689a      	ldr	r2, [r3, #8]
 801364a:	69bb      	ldr	r3, [r7, #24]
 801364c:	621a      	str	r2, [r3, #32]
 801364e:	693b      	ldr	r3, [r7, #16]
 8013650:	689b      	ldr	r3, [r3, #8]
 8013652:	69ba      	ldr	r2, [r7, #24]
 8013654:	3218      	adds	r2, #24
 8013656:	605a      	str	r2, [r3, #4]
 8013658:	69bb      	ldr	r3, [r7, #24]
 801365a:	f103 0218 	add.w	r2, r3, #24
 801365e:	693b      	ldr	r3, [r7, #16]
 8013660:	609a      	str	r2, [r3, #8]
 8013662:	69bb      	ldr	r3, [r7, #24]
 8013664:	4a10      	ldr	r2, [pc, #64]	; (80136a8 <xTaskRemoveFromEventList+0x190>)
 8013666:	629a      	str	r2, [r3, #40]	; 0x28
 8013668:	4b0f      	ldr	r3, [pc, #60]	; (80136a8 <xTaskRemoveFromEventList+0x190>)
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	3301      	adds	r3, #1
 801366e:	4a0e      	ldr	r2, [pc, #56]	; (80136a8 <xTaskRemoveFromEventList+0x190>)
 8013670:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013672:	69bb      	ldr	r3, [r7, #24]
 8013674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013676:	4b0d      	ldr	r3, [pc, #52]	; (80136ac <xTaskRemoveFromEventList+0x194>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801367c:	429a      	cmp	r2, r3
 801367e:	d905      	bls.n	801368c <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8013680:	2301      	movs	r3, #1
 8013682:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8013684:	4b0a      	ldr	r3, [pc, #40]	; (80136b0 <xTaskRemoveFromEventList+0x198>)
 8013686:	2201      	movs	r2, #1
 8013688:	601a      	str	r2, [r3, #0]
 801368a:	e001      	b.n	8013690 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 801368c:	2300      	movs	r3, #0
 801368e:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8013690:	69fb      	ldr	r3, [r7, #28]
}
 8013692:	4618      	mov	r0, r3
 8013694:	3720      	adds	r7, #32
 8013696:	46bd      	mov	sp, r7
 8013698:	bd80      	pop	{r7, pc}
 801369a:	bf00      	nop
 801369c:	2005748c 	.word	0x2005748c
 80136a0:	2005746c 	.word	0x2005746c
 80136a4:	20056f94 	.word	0x20056f94
 80136a8:	20057424 	.word	0x20057424
 80136ac:	20056f90 	.word	0x20056f90
 80136b0:	20057478 	.word	0x20057478

080136b4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80136b4:	b480      	push	{r7}
 80136b6:	b083      	sub	sp, #12
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80136bc:	4b06      	ldr	r3, [pc, #24]	; (80136d8 <vTaskInternalSetTimeOutState+0x24>)
 80136be:	681a      	ldr	r2, [r3, #0]
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80136c4:	4b05      	ldr	r3, [pc, #20]	; (80136dc <vTaskInternalSetTimeOutState+0x28>)
 80136c6:	681a      	ldr	r2, [r3, #0]
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	605a      	str	r2, [r3, #4]
}
 80136cc:	bf00      	nop
 80136ce:	370c      	adds	r7, #12
 80136d0:	46bd      	mov	sp, r7
 80136d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d6:	4770      	bx	lr
 80136d8:	2005747c 	.word	0x2005747c
 80136dc:	20057468 	.word	0x20057468

080136e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b086      	sub	sp, #24
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
 80136e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d102      	bne.n	80136f6 <xTaskCheckForTimeOut+0x16>
 80136f0:	f000 ffc2 	bl	8014678 <ulSetInterruptMask>
 80136f4:	e7fe      	b.n	80136f4 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 80136f6:	683b      	ldr	r3, [r7, #0]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d102      	bne.n	8013702 <xTaskCheckForTimeOut+0x22>
 80136fc:	f000 ffbc 	bl	8014678 <ulSetInterruptMask>
 8013700:	e7fe      	b.n	8013700 <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 8013702:	f000 fe7b 	bl	80143fc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8013706:	4b1f      	ldr	r3, [pc, #124]	; (8013784 <xTaskCheckForTimeOut+0xa4>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	693a      	ldr	r2, [r7, #16]
 8013712:	1ad3      	subs	r3, r2, r3
 8013714:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801371e:	d102      	bne.n	8013726 <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8013720:	2300      	movs	r3, #0
 8013722:	617b      	str	r3, [r7, #20]
 8013724:	e026      	b.n	8013774 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	681a      	ldr	r2, [r3, #0]
 801372a:	4b17      	ldr	r3, [pc, #92]	; (8013788 <xTaskCheckForTimeOut+0xa8>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	429a      	cmp	r2, r3
 8013730:	d00a      	beq.n	8013748 <xTaskCheckForTimeOut+0x68>
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	685b      	ldr	r3, [r3, #4]
 8013736:	693a      	ldr	r2, [r7, #16]
 8013738:	429a      	cmp	r2, r3
 801373a:	d305      	bcc.n	8013748 <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 801373c:	2301      	movs	r3, #1
 801373e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	2200      	movs	r2, #0
 8013744:	601a      	str	r2, [r3, #0]
 8013746:	e015      	b.n	8013774 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	68fa      	ldr	r2, [r7, #12]
 801374e:	429a      	cmp	r2, r3
 8013750:	d20b      	bcs.n	801376a <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	681a      	ldr	r2, [r3, #0]
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	1ad2      	subs	r2, r2, r3
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 801375e:	6878      	ldr	r0, [r7, #4]
 8013760:	f7ff ffa8 	bl	80136b4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8013764:	2300      	movs	r3, #0
 8013766:	617b      	str	r3, [r7, #20]
 8013768:	e004      	b.n	8013774 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	2200      	movs	r2, #0
 801376e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8013770:	2301      	movs	r3, #1
 8013772:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8013774:	f000 fe54 	bl	8014420 <vPortExitCritical>

    return xReturn;
 8013778:	697b      	ldr	r3, [r7, #20]
}
 801377a:	4618      	mov	r0, r3
 801377c:	3718      	adds	r7, #24
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
 8013782:	bf00      	nop
 8013784:	20057468 	.word	0x20057468
 8013788:	2005747c 	.word	0x2005747c

0801378c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801378c:	b480      	push	{r7}
 801378e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8013790:	4b03      	ldr	r3, [pc, #12]	; (80137a0 <vTaskMissedYield+0x14>)
 8013792:	2201      	movs	r2, #1
 8013794:	601a      	str	r2, [r3, #0]
}
 8013796:	bf00      	nop
 8013798:	46bd      	mov	sp, r7
 801379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379e:	4770      	bx	lr
 80137a0:	20057478 	.word	0x20057478

080137a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b082      	sub	sp, #8
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80137ac:	f000 f84a 	bl	8013844 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80137b0:	4b03      	ldr	r3, [pc, #12]	; (80137c0 <prvIdleTask+0x1c>)
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	2b01      	cmp	r3, #1
 80137b6:	d9f9      	bls.n	80137ac <prvIdleTask+0x8>
            {
                taskYIELD();
 80137b8:	f000 fe0e 	bl	80143d8 <vPortYield>
        prvCheckTasksWaitingTermination();
 80137bc:	e7f6      	b.n	80137ac <prvIdleTask+0x8>
 80137be:	bf00      	nop
 80137c0:	20056f94 	.word	0x20056f94

080137c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b082      	sub	sp, #8
 80137c8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80137ca:	2300      	movs	r3, #0
 80137cc:	607b      	str	r3, [r7, #4]
 80137ce:	e00c      	b.n	80137ea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	4613      	mov	r3, r2
 80137d4:	009b      	lsls	r3, r3, #2
 80137d6:	4413      	add	r3, r2
 80137d8:	009b      	lsls	r3, r3, #2
 80137da:	4a12      	ldr	r2, [pc, #72]	; (8013824 <prvInitialiseTaskLists+0x60>)
 80137dc:	4413      	add	r3, r2
 80137de:	4618      	mov	r0, r3
 80137e0:	f7fe f8f0 	bl	80119c4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	3301      	adds	r3, #1
 80137e8:	607b      	str	r3, [r7, #4]
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	2b37      	cmp	r3, #55	; 0x37
 80137ee:	d9ef      	bls.n	80137d0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80137f0:	480d      	ldr	r0, [pc, #52]	; (8013828 <prvInitialiseTaskLists+0x64>)
 80137f2:	f7fe f8e7 	bl	80119c4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80137f6:	480d      	ldr	r0, [pc, #52]	; (801382c <prvInitialiseTaskLists+0x68>)
 80137f8:	f7fe f8e4 	bl	80119c4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80137fc:	480c      	ldr	r0, [pc, #48]	; (8013830 <prvInitialiseTaskLists+0x6c>)
 80137fe:	f7fe f8e1 	bl	80119c4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8013802:	480c      	ldr	r0, [pc, #48]	; (8013834 <prvInitialiseTaskLists+0x70>)
 8013804:	f7fe f8de 	bl	80119c4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8013808:	480b      	ldr	r0, [pc, #44]	; (8013838 <prvInitialiseTaskLists+0x74>)
 801380a:	f7fe f8db 	bl	80119c4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 801380e:	4b0b      	ldr	r3, [pc, #44]	; (801383c <prvInitialiseTaskLists+0x78>)
 8013810:	4a05      	ldr	r2, [pc, #20]	; (8013828 <prvInitialiseTaskLists+0x64>)
 8013812:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013814:	4b0a      	ldr	r3, [pc, #40]	; (8013840 <prvInitialiseTaskLists+0x7c>)
 8013816:	4a05      	ldr	r2, [pc, #20]	; (801382c <prvInitialiseTaskLists+0x68>)
 8013818:	601a      	str	r2, [r3, #0]
}
 801381a:	bf00      	nop
 801381c:	3708      	adds	r7, #8
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}
 8013822:	bf00      	nop
 8013824:	20056f94 	.word	0x20056f94
 8013828:	200573f4 	.word	0x200573f4
 801382c:	20057408 	.word	0x20057408
 8013830:	20057424 	.word	0x20057424
 8013834:	20057438 	.word	0x20057438
 8013838:	20057450 	.word	0x20057450
 801383c:	2005741c 	.word	0x2005741c
 8013840:	20057420 	.word	0x20057420

08013844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801384a:	e019      	b.n	8013880 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 801384c:	f000 fdd6 	bl	80143fc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013850:	4b10      	ldr	r3, [pc, #64]	; (8013894 <prvCheckTasksWaitingTermination+0x50>)
 8013852:	68db      	ldr	r3, [r3, #12]
 8013854:	68db      	ldr	r3, [r3, #12]
 8013856:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	3304      	adds	r3, #4
 801385c:	4618      	mov	r0, r3
 801385e:	f7fe f917 	bl	8011a90 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8013862:	4b0d      	ldr	r3, [pc, #52]	; (8013898 <prvCheckTasksWaitingTermination+0x54>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	3b01      	subs	r3, #1
 8013868:	4a0b      	ldr	r2, [pc, #44]	; (8013898 <prvCheckTasksWaitingTermination+0x54>)
 801386a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 801386c:	4b0b      	ldr	r3, [pc, #44]	; (801389c <prvCheckTasksWaitingTermination+0x58>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	3b01      	subs	r3, #1
 8013872:	4a0a      	ldr	r2, [pc, #40]	; (801389c <prvCheckTasksWaitingTermination+0x58>)
 8013874:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8013876:	f000 fdd3 	bl	8014420 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f000 f810 	bl	80138a0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013880:	4b06      	ldr	r3, [pc, #24]	; (801389c <prvCheckTasksWaitingTermination+0x58>)
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d1e1      	bne.n	801384c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8013888:	bf00      	nop
 801388a:	bf00      	nop
 801388c:	3708      	adds	r7, #8
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}
 8013892:	bf00      	nop
 8013894:	20057438 	.word	0x20057438
 8013898:	20057464 	.word	0x20057464
 801389c:	2005744c 	.word	0x2005744c

080138a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b082      	sub	sp, #8
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d108      	bne.n	80138c4 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138b6:	4618      	mov	r0, r3
 80138b8:	f000 fff4 	bl	80148a4 <vPortFree>
                vPortFree( pxTCB );
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f000 fff1 	bl	80148a4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80138c2:	e010      	b.n	80138e6 <prvDeleteTCB+0x46>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80138ca:	2b01      	cmp	r3, #1
 80138cc:	d103      	bne.n	80138d6 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 80138ce:	6878      	ldr	r0, [r7, #4]
 80138d0:	f000 ffe8 	bl	80148a4 <vPortFree>
    }
 80138d4:	e007      	b.n	80138e6 <prvDeleteTCB+0x46>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80138dc:	2b02      	cmp	r3, #2
 80138de:	d002      	beq.n	80138e6 <prvDeleteTCB+0x46>
 80138e0:	f000 feca 	bl	8014678 <ulSetInterruptMask>
 80138e4:	e7fe      	b.n	80138e4 <prvDeleteTCB+0x44>
    }
 80138e6:	bf00      	nop
 80138e8:	3708      	adds	r7, #8
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bd80      	pop	{r7, pc}
	...

080138f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80138f0:	b480      	push	{r7}
 80138f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80138f4:	4b0a      	ldr	r3, [pc, #40]	; (8013920 <prvResetNextTaskUnblockTime+0x30>)
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d104      	bne.n	8013908 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80138fe:	4b09      	ldr	r3, [pc, #36]	; (8013924 <prvResetNextTaskUnblockTime+0x34>)
 8013900:	f04f 32ff 	mov.w	r2, #4294967295
 8013904:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8013906:	e005      	b.n	8013914 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013908:	4b05      	ldr	r3, [pc, #20]	; (8013920 <prvResetNextTaskUnblockTime+0x30>)
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	68db      	ldr	r3, [r3, #12]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	4a04      	ldr	r2, [pc, #16]	; (8013924 <prvResetNextTaskUnblockTime+0x34>)
 8013912:	6013      	str	r3, [r2, #0]
}
 8013914:	bf00      	nop
 8013916:	46bd      	mov	sp, r7
 8013918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391c:	4770      	bx	lr
 801391e:	bf00      	nop
 8013920:	2005741c 	.word	0x2005741c
 8013924:	20057484 	.word	0x20057484

08013928 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8013928:	b480      	push	{r7}
 801392a:	b083      	sub	sp, #12
 801392c:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 801392e:	4b05      	ldr	r3, [pc, #20]	; (8013944 <xTaskGetCurrentTaskHandle+0x1c>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	607b      	str	r3, [r7, #4]

        return xReturn;
 8013934:	687b      	ldr	r3, [r7, #4]
    }
 8013936:	4618      	mov	r0, r3
 8013938:	370c      	adds	r7, #12
 801393a:	46bd      	mov	sp, r7
 801393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013940:	4770      	bx	lr
 8013942:	bf00      	nop
 8013944:	20056f90 	.word	0x20056f90

08013948 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8013948:	b480      	push	{r7}
 801394a:	b083      	sub	sp, #12
 801394c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 801394e:	4b0b      	ldr	r3, [pc, #44]	; (801397c <xTaskGetSchedulerState+0x34>)
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d102      	bne.n	801395c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8013956:	2301      	movs	r3, #1
 8013958:	607b      	str	r3, [r7, #4]
 801395a:	e008      	b.n	801396e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801395c:	4b08      	ldr	r3, [pc, #32]	; (8013980 <xTaskGetSchedulerState+0x38>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d102      	bne.n	801396a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8013964:	2302      	movs	r3, #2
 8013966:	607b      	str	r3, [r7, #4]
 8013968:	e001      	b.n	801396e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 801396a:	2300      	movs	r3, #0
 801396c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 801396e:	687b      	ldr	r3, [r7, #4]
    }
 8013970:	4618      	mov	r0, r3
 8013972:	370c      	adds	r7, #12
 8013974:	46bd      	mov	sp, r7
 8013976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397a:	4770      	bx	lr
 801397c:	20057470 	.word	0x20057470
 8013980:	2005748c 	.word	0x2005748c

08013984 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8013984:	b580      	push	{r7, lr}
 8013986:	b086      	sub	sp, #24
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8013990:	2300      	movs	r3, #0
 8013992:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d079      	beq.n	8013a8e <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801399a:	693b      	ldr	r3, [r7, #16]
 801399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801399e:	4b3e      	ldr	r3, [pc, #248]	; (8013a98 <xTaskPriorityInherit+0x114>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d269      	bcs.n	8013a7c <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80139a8:	693b      	ldr	r3, [r7, #16]
 80139aa:	699b      	ldr	r3, [r3, #24]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	db06      	blt.n	80139be <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139b0:	4b39      	ldr	r3, [pc, #228]	; (8013a98 <xTaskPriorityInherit+0x114>)
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80139ba:	693b      	ldr	r3, [r7, #16]
 80139bc:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80139be:	693b      	ldr	r3, [r7, #16]
 80139c0:	6959      	ldr	r1, [r3, #20]
 80139c2:	693b      	ldr	r3, [r7, #16]
 80139c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139c6:	4613      	mov	r3, r2
 80139c8:	009b      	lsls	r3, r3, #2
 80139ca:	4413      	add	r3, r2
 80139cc:	009b      	lsls	r3, r3, #2
 80139ce:	4a33      	ldr	r2, [pc, #204]	; (8013a9c <xTaskPriorityInherit+0x118>)
 80139d0:	4413      	add	r3, r2
 80139d2:	4299      	cmp	r1, r3
 80139d4:	d14a      	bne.n	8013a6c <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80139d6:	693b      	ldr	r3, [r7, #16]
 80139d8:	3304      	adds	r3, #4
 80139da:	4618      	mov	r0, r3
 80139dc:	f7fe f858 	bl	8011a90 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80139e0:	4b2d      	ldr	r3, [pc, #180]	; (8013a98 <xTaskPriorityInherit+0x114>)
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139e6:	693b      	ldr	r3, [r7, #16]
 80139e8:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80139ea:	693b      	ldr	r3, [r7, #16]
 80139ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139ee:	4b2c      	ldr	r3, [pc, #176]	; (8013aa0 <xTaskPriorityInherit+0x11c>)
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	429a      	cmp	r2, r3
 80139f4:	d903      	bls.n	80139fe <xTaskPriorityInherit+0x7a>
 80139f6:	693b      	ldr	r3, [r7, #16]
 80139f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139fa:	4a29      	ldr	r2, [pc, #164]	; (8013aa0 <xTaskPriorityInherit+0x11c>)
 80139fc:	6013      	str	r3, [r2, #0]
 80139fe:	693b      	ldr	r3, [r7, #16]
 8013a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a02:	4926      	ldr	r1, [pc, #152]	; (8013a9c <xTaskPriorityInherit+0x118>)
 8013a04:	4613      	mov	r3, r2
 8013a06:	009b      	lsls	r3, r3, #2
 8013a08:	4413      	add	r3, r2
 8013a0a:	009b      	lsls	r3, r3, #2
 8013a0c:	440b      	add	r3, r1
 8013a0e:	3304      	adds	r3, #4
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	60fb      	str	r3, [r7, #12]
 8013a14:	693b      	ldr	r3, [r7, #16]
 8013a16:	68fa      	ldr	r2, [r7, #12]
 8013a18:	609a      	str	r2, [r3, #8]
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	689a      	ldr	r2, [r3, #8]
 8013a1e:	693b      	ldr	r3, [r7, #16]
 8013a20:	60da      	str	r2, [r3, #12]
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	689b      	ldr	r3, [r3, #8]
 8013a26:	693a      	ldr	r2, [r7, #16]
 8013a28:	3204      	adds	r2, #4
 8013a2a:	605a      	str	r2, [r3, #4]
 8013a2c:	693b      	ldr	r3, [r7, #16]
 8013a2e:	1d1a      	adds	r2, r3, #4
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	609a      	str	r2, [r3, #8]
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a38:	4613      	mov	r3, r2
 8013a3a:	009b      	lsls	r3, r3, #2
 8013a3c:	4413      	add	r3, r2
 8013a3e:	009b      	lsls	r3, r3, #2
 8013a40:	4a16      	ldr	r2, [pc, #88]	; (8013a9c <xTaskPriorityInherit+0x118>)
 8013a42:	441a      	add	r2, r3
 8013a44:	693b      	ldr	r3, [r7, #16]
 8013a46:	615a      	str	r2, [r3, #20]
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a4c:	4913      	ldr	r1, [pc, #76]	; (8013a9c <xTaskPriorityInherit+0x118>)
 8013a4e:	4613      	mov	r3, r2
 8013a50:	009b      	lsls	r3, r3, #2
 8013a52:	4413      	add	r3, r2
 8013a54:	009b      	lsls	r3, r3, #2
 8013a56:	440b      	add	r3, r1
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	1c59      	adds	r1, r3, #1
 8013a5c:	480f      	ldr	r0, [pc, #60]	; (8013a9c <xTaskPriorityInherit+0x118>)
 8013a5e:	4613      	mov	r3, r2
 8013a60:	009b      	lsls	r3, r3, #2
 8013a62:	4413      	add	r3, r2
 8013a64:	009b      	lsls	r3, r3, #2
 8013a66:	4403      	add	r3, r0
 8013a68:	6019      	str	r1, [r3, #0]
 8013a6a:	e004      	b.n	8013a76 <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013a6c:	4b0a      	ldr	r3, [pc, #40]	; (8013a98 <xTaskPriorityInherit+0x114>)
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a72:	693b      	ldr	r3, [r7, #16]
 8013a74:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8013a76:	2301      	movs	r3, #1
 8013a78:	617b      	str	r3, [r7, #20]
 8013a7a:	e008      	b.n	8013a8e <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013a80:	4b05      	ldr	r3, [pc, #20]	; (8013a98 <xTaskPriorityInherit+0x114>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d201      	bcs.n	8013a8e <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8013a8a:	2301      	movs	r3, #1
 8013a8c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8013a8e:	697b      	ldr	r3, [r7, #20]
    }
 8013a90:	4618      	mov	r0, r3
 8013a92:	3718      	adds	r7, #24
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}
 8013a98:	20056f90 	.word	0x20056f90
 8013a9c:	20056f94 	.word	0x20056f94
 8013aa0:	2005746c 	.word	0x2005746c

08013aa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b086      	sub	sp, #24
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d06e      	beq.n	8013b98 <xTaskPriorityDisinherit+0xf4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8013aba:	4b3a      	ldr	r3, [pc, #232]	; (8013ba4 <xTaskPriorityDisinherit+0x100>)
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	693a      	ldr	r2, [r7, #16]
 8013ac0:	429a      	cmp	r2, r3
 8013ac2:	d002      	beq.n	8013aca <xTaskPriorityDisinherit+0x26>
 8013ac4:	f000 fdd8 	bl	8014678 <ulSetInterruptMask>
 8013ac8:	e7fe      	b.n	8013ac8 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 8013aca:	693b      	ldr	r3, [r7, #16]
 8013acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d102      	bne.n	8013ad8 <xTaskPriorityDisinherit+0x34>
 8013ad2:	f000 fdd1 	bl	8014678 <ulSetInterruptMask>
 8013ad6:	e7fe      	b.n	8013ad6 <xTaskPriorityDisinherit+0x32>
            ( pxTCB->uxMutexesHeld )--;
 8013ad8:	693b      	ldr	r3, [r7, #16]
 8013ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013adc:	1e5a      	subs	r2, r3, #1
 8013ade:	693b      	ldr	r3, [r7, #16]
 8013ae0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013ae2:	693b      	ldr	r3, [r7, #16]
 8013ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013aea:	429a      	cmp	r2, r3
 8013aec:	d054      	beq.n	8013b98 <xTaskPriorityDisinherit+0xf4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013aee:	693b      	ldr	r3, [r7, #16]
 8013af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d150      	bne.n	8013b98 <xTaskPriorityDisinherit+0xf4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	3304      	adds	r3, #4
 8013afa:	4618      	mov	r0, r3
 8013afc:	f7fd ffc8 	bl	8011a90 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013b00:	693b      	ldr	r3, [r7, #16]
 8013b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013b04:	693b      	ldr	r3, [r7, #16]
 8013b06:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b08:	693b      	ldr	r3, [r7, #16]
 8013b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013b10:	693b      	ldr	r3, [r7, #16]
 8013b12:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8013b14:	693b      	ldr	r3, [r7, #16]
 8013b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b18:	4b23      	ldr	r3, [pc, #140]	; (8013ba8 <xTaskPriorityDisinherit+0x104>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	429a      	cmp	r2, r3
 8013b1e:	d903      	bls.n	8013b28 <xTaskPriorityDisinherit+0x84>
 8013b20:	693b      	ldr	r3, [r7, #16]
 8013b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b24:	4a20      	ldr	r2, [pc, #128]	; (8013ba8 <xTaskPriorityDisinherit+0x104>)
 8013b26:	6013      	str	r3, [r2, #0]
 8013b28:	693b      	ldr	r3, [r7, #16]
 8013b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b2c:	491f      	ldr	r1, [pc, #124]	; (8013bac <xTaskPriorityDisinherit+0x108>)
 8013b2e:	4613      	mov	r3, r2
 8013b30:	009b      	lsls	r3, r3, #2
 8013b32:	4413      	add	r3, r2
 8013b34:	009b      	lsls	r3, r3, #2
 8013b36:	440b      	add	r3, r1
 8013b38:	3304      	adds	r3, #4
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	60fb      	str	r3, [r7, #12]
 8013b3e:	693b      	ldr	r3, [r7, #16]
 8013b40:	68fa      	ldr	r2, [r7, #12]
 8013b42:	609a      	str	r2, [r3, #8]
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	689a      	ldr	r2, [r3, #8]
 8013b48:	693b      	ldr	r3, [r7, #16]
 8013b4a:	60da      	str	r2, [r3, #12]
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	689b      	ldr	r3, [r3, #8]
 8013b50:	693a      	ldr	r2, [r7, #16]
 8013b52:	3204      	adds	r2, #4
 8013b54:	605a      	str	r2, [r3, #4]
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	1d1a      	adds	r2, r3, #4
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	609a      	str	r2, [r3, #8]
 8013b5e:	693b      	ldr	r3, [r7, #16]
 8013b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b62:	4613      	mov	r3, r2
 8013b64:	009b      	lsls	r3, r3, #2
 8013b66:	4413      	add	r3, r2
 8013b68:	009b      	lsls	r3, r3, #2
 8013b6a:	4a10      	ldr	r2, [pc, #64]	; (8013bac <xTaskPriorityDisinherit+0x108>)
 8013b6c:	441a      	add	r2, r3
 8013b6e:	693b      	ldr	r3, [r7, #16]
 8013b70:	615a      	str	r2, [r3, #20]
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b76:	490d      	ldr	r1, [pc, #52]	; (8013bac <xTaskPriorityDisinherit+0x108>)
 8013b78:	4613      	mov	r3, r2
 8013b7a:	009b      	lsls	r3, r3, #2
 8013b7c:	4413      	add	r3, r2
 8013b7e:	009b      	lsls	r3, r3, #2
 8013b80:	440b      	add	r3, r1
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	1c59      	adds	r1, r3, #1
 8013b86:	4809      	ldr	r0, [pc, #36]	; (8013bac <xTaskPriorityDisinherit+0x108>)
 8013b88:	4613      	mov	r3, r2
 8013b8a:	009b      	lsls	r3, r3, #2
 8013b8c:	4413      	add	r3, r2
 8013b8e:	009b      	lsls	r3, r3, #2
 8013b90:	4403      	add	r3, r0
 8013b92:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8013b94:	2301      	movs	r3, #1
 8013b96:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8013b98:	697b      	ldr	r3, [r7, #20]
    }
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3718      	adds	r7, #24
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}
 8013ba2:	bf00      	nop
 8013ba4:	20056f90 	.word	0x20056f90
 8013ba8:	2005746c 	.word	0x2005746c
 8013bac:	20056f94 	.word	0x20056f94

08013bb0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b088      	sub	sp, #32
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
 8013bb8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013bbe:	2301      	movs	r3, #1
 8013bc0:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	f000 8083 	beq.w	8013cd0 <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8013bca:	69bb      	ldr	r3, [r7, #24]
 8013bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d102      	bne.n	8013bd8 <vTaskPriorityDisinheritAfterTimeout+0x28>
 8013bd2:	f000 fd51 	bl	8014678 <ulSetInterruptMask>
 8013bd6:	e7fe      	b.n	8013bd6 <vTaskPriorityDisinheritAfterTimeout+0x26>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013bd8:	69bb      	ldr	r3, [r7, #24]
 8013bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bdc:	683a      	ldr	r2, [r7, #0]
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d902      	bls.n	8013be8 <vTaskPriorityDisinheritAfterTimeout+0x38>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	61fb      	str	r3, [r7, #28]
 8013be6:	e002      	b.n	8013bee <vTaskPriorityDisinheritAfterTimeout+0x3e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8013be8:	69bb      	ldr	r3, [r7, #24]
 8013bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013bec:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8013bee:	69bb      	ldr	r3, [r7, #24]
 8013bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bf2:	69fa      	ldr	r2, [r7, #28]
 8013bf4:	429a      	cmp	r2, r3
 8013bf6:	d06b      	beq.n	8013cd0 <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013bf8:	69bb      	ldr	r3, [r7, #24]
 8013bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013bfc:	697a      	ldr	r2, [r7, #20]
 8013bfe:	429a      	cmp	r2, r3
 8013c00:	d166      	bne.n	8013cd0 <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8013c02:	4b35      	ldr	r3, [pc, #212]	; (8013cd8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	69ba      	ldr	r2, [r7, #24]
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d102      	bne.n	8013c12 <vTaskPriorityDisinheritAfterTimeout+0x62>
 8013c0c:	f000 fd34 	bl	8014678 <ulSetInterruptMask>
 8013c10:	e7fe      	b.n	8013c10 <vTaskPriorityDisinheritAfterTimeout+0x60>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013c12:	69bb      	ldr	r3, [r7, #24]
 8013c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c16:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8013c18:	69bb      	ldr	r3, [r7, #24]
 8013c1a:	69fa      	ldr	r2, [r7, #28]
 8013c1c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013c1e:	69bb      	ldr	r3, [r7, #24]
 8013c20:	699b      	ldr	r3, [r3, #24]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	db04      	blt.n	8013c30 <vTaskPriorityDisinheritAfterTimeout+0x80>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c26:	69fb      	ldr	r3, [r7, #28]
 8013c28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013c2c:	69bb      	ldr	r3, [r7, #24]
 8013c2e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013c30:	69bb      	ldr	r3, [r7, #24]
 8013c32:	6959      	ldr	r1, [r3, #20]
 8013c34:	693a      	ldr	r2, [r7, #16]
 8013c36:	4613      	mov	r3, r2
 8013c38:	009b      	lsls	r3, r3, #2
 8013c3a:	4413      	add	r3, r2
 8013c3c:	009b      	lsls	r3, r3, #2
 8013c3e:	4a27      	ldr	r2, [pc, #156]	; (8013cdc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013c40:	4413      	add	r3, r2
 8013c42:	4299      	cmp	r1, r3
 8013c44:	d144      	bne.n	8013cd0 <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013c46:	69bb      	ldr	r3, [r7, #24]
 8013c48:	3304      	adds	r3, #4
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f7fd ff20 	bl	8011a90 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8013c50:	69bb      	ldr	r3, [r7, #24]
 8013c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c54:	4b22      	ldr	r3, [pc, #136]	; (8013ce0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d903      	bls.n	8013c64 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8013c5c:	69bb      	ldr	r3, [r7, #24]
 8013c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c60:	4a1f      	ldr	r2, [pc, #124]	; (8013ce0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8013c62:	6013      	str	r3, [r2, #0]
 8013c64:	69bb      	ldr	r3, [r7, #24]
 8013c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c68:	491c      	ldr	r1, [pc, #112]	; (8013cdc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013c6a:	4613      	mov	r3, r2
 8013c6c:	009b      	lsls	r3, r3, #2
 8013c6e:	4413      	add	r3, r2
 8013c70:	009b      	lsls	r3, r3, #2
 8013c72:	440b      	add	r3, r1
 8013c74:	3304      	adds	r3, #4
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	60fb      	str	r3, [r7, #12]
 8013c7a:	69bb      	ldr	r3, [r7, #24]
 8013c7c:	68fa      	ldr	r2, [r7, #12]
 8013c7e:	609a      	str	r2, [r3, #8]
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	689a      	ldr	r2, [r3, #8]
 8013c84:	69bb      	ldr	r3, [r7, #24]
 8013c86:	60da      	str	r2, [r3, #12]
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	689b      	ldr	r3, [r3, #8]
 8013c8c:	69ba      	ldr	r2, [r7, #24]
 8013c8e:	3204      	adds	r2, #4
 8013c90:	605a      	str	r2, [r3, #4]
 8013c92:	69bb      	ldr	r3, [r7, #24]
 8013c94:	1d1a      	adds	r2, r3, #4
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	609a      	str	r2, [r3, #8]
 8013c9a:	69bb      	ldr	r3, [r7, #24]
 8013c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c9e:	4613      	mov	r3, r2
 8013ca0:	009b      	lsls	r3, r3, #2
 8013ca2:	4413      	add	r3, r2
 8013ca4:	009b      	lsls	r3, r3, #2
 8013ca6:	4a0d      	ldr	r2, [pc, #52]	; (8013cdc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013ca8:	441a      	add	r2, r3
 8013caa:	69bb      	ldr	r3, [r7, #24]
 8013cac:	615a      	str	r2, [r3, #20]
 8013cae:	69bb      	ldr	r3, [r7, #24]
 8013cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cb2:	490a      	ldr	r1, [pc, #40]	; (8013cdc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013cb4:	4613      	mov	r3, r2
 8013cb6:	009b      	lsls	r3, r3, #2
 8013cb8:	4413      	add	r3, r2
 8013cba:	009b      	lsls	r3, r3, #2
 8013cbc:	440b      	add	r3, r1
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	1c59      	adds	r1, r3, #1
 8013cc2:	4806      	ldr	r0, [pc, #24]	; (8013cdc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8013cc4:	4613      	mov	r3, r2
 8013cc6:	009b      	lsls	r3, r3, #2
 8013cc8:	4413      	add	r3, r2
 8013cca:	009b      	lsls	r3, r3, #2
 8013ccc:	4403      	add	r3, r0
 8013cce:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8013cd0:	bf00      	nop
 8013cd2:	3720      	adds	r7, #32
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	bd80      	pop	{r7, pc}
 8013cd8:	20056f90 	.word	0x20056f90
 8013cdc:	20056f94 	.word	0x20056f94
 8013ce0:	2005746c 	.word	0x2005746c

08013ce4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8013ce4:	b480      	push	{r7}
 8013ce6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8013ce8:	4b07      	ldr	r3, [pc, #28]	; (8013d08 <pvTaskIncrementMutexHeldCount+0x24>)
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d004      	beq.n	8013cfa <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8013cf0:	4b05      	ldr	r3, [pc, #20]	; (8013d08 <pvTaskIncrementMutexHeldCount+0x24>)
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013cf6:	3201      	adds	r2, #1
 8013cf8:	651a      	str	r2, [r3, #80]	; 0x50
        }

        return pxCurrentTCB;
 8013cfa:	4b03      	ldr	r3, [pc, #12]	; (8013d08 <pvTaskIncrementMutexHeldCount+0x24>)
 8013cfc:	681b      	ldr	r3, [r3, #0]
    }
 8013cfe:	4618      	mov	r0, r3
 8013d00:	46bd      	mov	sp, r7
 8013d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d06:	4770      	bx	lr
 8013d08:	20056f90 	.word	0x20056f90

08013d0c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b086      	sub	sp, #24
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
 8013d14:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8013d16:	4b2e      	ldr	r3, [pc, #184]	; (8013dd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013d1c:	4b2d      	ldr	r3, [pc, #180]	; (8013dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	3304      	adds	r3, #4
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7fd feb4 	bl	8011a90 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d2e:	d124      	bne.n	8013d7a <prvAddCurrentTaskToDelayedList+0x6e>
 8013d30:	683b      	ldr	r3, [r7, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d021      	beq.n	8013d7a <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013d36:	4b28      	ldr	r3, [pc, #160]	; (8013dd8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8013d38:	685b      	ldr	r3, [r3, #4]
 8013d3a:	613b      	str	r3, [r7, #16]
 8013d3c:	4b25      	ldr	r3, [pc, #148]	; (8013dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	693a      	ldr	r2, [r7, #16]
 8013d42:	609a      	str	r2, [r3, #8]
 8013d44:	4b23      	ldr	r3, [pc, #140]	; (8013dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	693a      	ldr	r2, [r7, #16]
 8013d4a:	6892      	ldr	r2, [r2, #8]
 8013d4c:	60da      	str	r2, [r3, #12]
 8013d4e:	4b21      	ldr	r3, [pc, #132]	; (8013dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013d50:	681a      	ldr	r2, [r3, #0]
 8013d52:	693b      	ldr	r3, [r7, #16]
 8013d54:	689b      	ldr	r3, [r3, #8]
 8013d56:	3204      	adds	r2, #4
 8013d58:	605a      	str	r2, [r3, #4]
 8013d5a:	4b1e      	ldr	r3, [pc, #120]	; (8013dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	1d1a      	adds	r2, r3, #4
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	609a      	str	r2, [r3, #8]
 8013d64:	4b1b      	ldr	r3, [pc, #108]	; (8013dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	4a1b      	ldr	r2, [pc, #108]	; (8013dd8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8013d6a:	615a      	str	r2, [r3, #20]
 8013d6c:	4b1a      	ldr	r3, [pc, #104]	; (8013dd8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	3301      	adds	r3, #1
 8013d72:	4a19      	ldr	r2, [pc, #100]	; (8013dd8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8013d74:	6013      	str	r3, [r2, #0]
 8013d76:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8013d78:	e026      	b.n	8013dc8 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8013d7a:	697a      	ldr	r2, [r7, #20]
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	4413      	add	r3, r2
 8013d80:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013d82:	4b14      	ldr	r3, [pc, #80]	; (8013dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	68fa      	ldr	r2, [r7, #12]
 8013d88:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8013d8a:	68fa      	ldr	r2, [r7, #12]
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d209      	bcs.n	8013da6 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013d92:	4b12      	ldr	r3, [pc, #72]	; (8013ddc <prvAddCurrentTaskToDelayedList+0xd0>)
 8013d94:	681a      	ldr	r2, [r3, #0]
 8013d96:	4b0f      	ldr	r3, [pc, #60]	; (8013dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	3304      	adds	r3, #4
 8013d9c:	4619      	mov	r1, r3
 8013d9e:	4610      	mov	r0, r2
 8013da0:	f7fd fe3d 	bl	8011a1e <vListInsert>
}
 8013da4:	e010      	b.n	8013dc8 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013da6:	4b0e      	ldr	r3, [pc, #56]	; (8013de0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8013da8:	681a      	ldr	r2, [r3, #0]
 8013daa:	4b0a      	ldr	r3, [pc, #40]	; (8013dd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	3304      	adds	r3, #4
 8013db0:	4619      	mov	r1, r3
 8013db2:	4610      	mov	r0, r2
 8013db4:	f7fd fe33 	bl	8011a1e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8013db8:	4b0a      	ldr	r3, [pc, #40]	; (8013de4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	68fa      	ldr	r2, [r7, #12]
 8013dbe:	429a      	cmp	r2, r3
 8013dc0:	d202      	bcs.n	8013dc8 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8013dc2:	4a08      	ldr	r2, [pc, #32]	; (8013de4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	6013      	str	r3, [r2, #0]
}
 8013dc8:	bf00      	nop
 8013dca:	3718      	adds	r7, #24
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}
 8013dd0:	20057468 	.word	0x20057468
 8013dd4:	20056f90 	.word	0x20056f90
 8013dd8:	20057450 	.word	0x20057450
 8013ddc:	20057420 	.word	0x20057420
 8013de0:	2005741c 	.word	0x2005741c
 8013de4:	20057484 	.word	0x20057484

08013de8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b088      	sub	sp, #32
 8013dec:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8013dee:	2300      	movs	r3, #0
 8013df0:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8013df2:	f000 fa5b 	bl	80142ac <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8013df6:	4b18      	ldr	r3, [pc, #96]	; (8013e58 <xTimerCreateTimerTask+0x70>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d020      	beq.n	8013e40 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8013dfe:	2300      	movs	r3, #0
 8013e00:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 8013e02:	2300      	movs	r3, #0
 8013e04:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013e06:	463a      	mov	r2, r7
 8013e08:	1d39      	adds	r1, r7, #4
 8013e0a:	f107 0308 	add.w	r3, r7, #8
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f7fd fdbe 	bl	8011990 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8013e14:	6839      	ldr	r1, [r7, #0]
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	68ba      	ldr	r2, [r7, #8]
 8013e1a:	9202      	str	r2, [sp, #8]
 8013e1c:	9301      	str	r3, [sp, #4]
 8013e1e:	2318      	movs	r3, #24
 8013e20:	9300      	str	r3, [sp, #0]
 8013e22:	2300      	movs	r3, #0
 8013e24:	460a      	mov	r2, r1
 8013e26:	490d      	ldr	r1, [pc, #52]	; (8013e5c <xTimerCreateTimerTask+0x74>)
 8013e28:	480d      	ldr	r0, [pc, #52]	; (8013e60 <xTimerCreateTimerTask+0x78>)
 8013e2a:	f7fe fe47 	bl	8012abc <xTaskCreateStatic>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	4a0c      	ldr	r2, [pc, #48]	; (8013e64 <xTimerCreateTimerTask+0x7c>)
 8013e32:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8013e34:	4b0b      	ldr	r3, [pc, #44]	; (8013e64 <xTimerCreateTimerTask+0x7c>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d001      	beq.n	8013e40 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d102      	bne.n	8013e4c <xTimerCreateTimerTask+0x64>
 8013e46:	f000 fc17 	bl	8014678 <ulSetInterruptMask>
 8013e4a:	e7fe      	b.n	8013e4a <xTimerCreateTimerTask+0x62>
        return xReturn;
 8013e4c:	68fb      	ldr	r3, [r7, #12]
    }
 8013e4e:	4618      	mov	r0, r3
 8013e50:	3710      	adds	r7, #16
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}
 8013e56:	bf00      	nop
 8013e58:	200574c0 	.word	0x200574c0
 8013e5c:	08025710 	.word	0x08025710
 8013e60:	08013f0d 	.word	0x08013f0d
 8013e64:	200574c4 	.word	0x200574c4

08013e68 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b084      	sub	sp, #16
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	60f8      	str	r0, [r7, #12]
 8013e70:	60b9      	str	r1, [r7, #8]
 8013e72:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8013e74:	e008      	b.n	8013e88 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	699b      	ldr	r3, [r3, #24]
 8013e7a:	68ba      	ldr	r2, [r7, #8]
 8013e7c:	4413      	add	r3, r2
 8013e7e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	6a1b      	ldr	r3, [r3, #32]
 8013e84:	68f8      	ldr	r0, [r7, #12]
 8013e86:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	699a      	ldr	r2, [r3, #24]
 8013e8c:	68bb      	ldr	r3, [r7, #8]
 8013e8e:	18d1      	adds	r1, r2, r3
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	687a      	ldr	r2, [r7, #4]
 8013e94:	68f8      	ldr	r0, [r7, #12]
 8013e96:	f000 f8d7 	bl	8014048 <prvInsertTimerInActiveList>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d1ea      	bne.n	8013e76 <prvReloadTimer+0xe>
        }
    }
 8013ea0:	bf00      	nop
 8013ea2:	bf00      	nop
 8013ea4:	3710      	adds	r7, #16
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bd80      	pop	{r7, pc}
	...

08013eac <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b084      	sub	sp, #16
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
 8013eb4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013eb6:	4b14      	ldr	r3, [pc, #80]	; (8013f08 <prvProcessExpiredTimer+0x5c>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	68db      	ldr	r3, [r3, #12]
 8013ebc:	68db      	ldr	r3, [r3, #12]
 8013ebe:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	3304      	adds	r3, #4
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7fd fde3 	bl	8011a90 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ed0:	f003 0304 	and.w	r3, r3, #4
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d005      	beq.n	8013ee4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8013ed8:	683a      	ldr	r2, [r7, #0]
 8013eda:	6879      	ldr	r1, [r7, #4]
 8013edc:	68f8      	ldr	r0, [r7, #12]
 8013ede:	f7ff ffc3 	bl	8013e68 <prvReloadTimer>
 8013ee2:	e008      	b.n	8013ef6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013eea:	f023 0301 	bic.w	r3, r3, #1
 8013eee:	b2da      	uxtb	r2, r3
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	6a1b      	ldr	r3, [r3, #32]
 8013efa:	68f8      	ldr	r0, [r7, #12]
 8013efc:	4798      	blx	r3
    }
 8013efe:	bf00      	nop
 8013f00:	3710      	adds	r7, #16
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}
 8013f06:	bf00      	nop
 8013f08:	200574b8 	.word	0x200574b8

08013f0c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b084      	sub	sp, #16
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]

            /* Allow the application writer to execute some code in the context of
             * this task at the point the task starts executing.  This is useful if the
             * application includes initialisation code that would benefit from
             * executing after the scheduler has been started. */
            vApplicationDaemonTaskStartupHook();
 8013f14:	f7fd fd1b 	bl	801194e <vApplicationDaemonTaskStartupHook>

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013f18:	f107 0308 	add.w	r3, r7, #8
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f000 f84f 	bl	8013fc0 <prvGetNextExpireTime>
 8013f22:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	4619      	mov	r1, r3
 8013f28:	68f8      	ldr	r0, [r7, #12]
 8013f2a:	f000 f803 	bl	8013f34 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8013f2e:	f000 f8cd 	bl	80140cc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013f32:	e7f1      	b.n	8013f18 <prvTimerTask+0xc>

08013f34 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b084      	sub	sp, #16
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
 8013f3c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8013f3e:	f7fe ffdf 	bl	8012f00 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013f42:	f107 0308 	add.w	r3, r7, #8
 8013f46:	4618      	mov	r0, r3
 8013f48:	f000 f85e 	bl	8014008 <prvSampleTimeNow>
 8013f4c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d12a      	bne.n	8013faa <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013f54:	683b      	ldr	r3, [r7, #0]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d10a      	bne.n	8013f70 <prvProcessTimerOrBlockTask+0x3c>
 8013f5a:	687a      	ldr	r2, [r7, #4]
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	d806      	bhi.n	8013f70 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8013f62:	f7fe ffdb 	bl	8012f1c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013f66:	68f9      	ldr	r1, [r7, #12]
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f7ff ff9f 	bl	8013eac <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8013f6e:	e01e      	b.n	8013fae <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d008      	beq.n	8013f88 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013f76:	4b10      	ldr	r3, [pc, #64]	; (8013fb8 <prvProcessTimerOrBlockTask+0x84>)
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d101      	bne.n	8013f84 <prvProcessTimerOrBlockTask+0x50>
 8013f80:	2301      	movs	r3, #1
 8013f82:	e000      	b.n	8013f86 <prvProcessTimerOrBlockTask+0x52>
 8013f84:	2300      	movs	r3, #0
 8013f86:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013f88:	4b0c      	ldr	r3, [pc, #48]	; (8013fbc <prvProcessTimerOrBlockTask+0x88>)
 8013f8a:	6818      	ldr	r0, [r3, #0]
 8013f8c:	687a      	ldr	r2, [r7, #4]
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	1ad3      	subs	r3, r2, r3
 8013f92:	683a      	ldr	r2, [r7, #0]
 8013f94:	4619      	mov	r1, r3
 8013f96:	f7fe fd5d 	bl	8012a54 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8013f9a:	f7fe ffbf 	bl	8012f1c <xTaskResumeAll>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d104      	bne.n	8013fae <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 8013fa4:	f000 fa18 	bl	80143d8 <vPortYield>
    }
 8013fa8:	e001      	b.n	8013fae <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 8013faa:	f7fe ffb7 	bl	8012f1c <xTaskResumeAll>
    }
 8013fae:	bf00      	nop
 8013fb0:	3710      	adds	r7, #16
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
 8013fb6:	bf00      	nop
 8013fb8:	200574bc 	.word	0x200574bc
 8013fbc:	200574c0 	.word	0x200574c0

08013fc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8013fc0:	b480      	push	{r7}
 8013fc2:	b085      	sub	sp, #20
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013fc8:	4b0e      	ldr	r3, [pc, #56]	; (8014004 <prvGetNextExpireTime+0x44>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d101      	bne.n	8013fd6 <prvGetNextExpireTime+0x16>
 8013fd2:	2201      	movs	r2, #1
 8013fd4:	e000      	b.n	8013fd8 <prvGetNextExpireTime+0x18>
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d105      	bne.n	8013ff0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013fe4:	4b07      	ldr	r3, [pc, #28]	; (8014004 <prvGetNextExpireTime+0x44>)
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	68db      	ldr	r3, [r3, #12]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	60fb      	str	r3, [r7, #12]
 8013fee:	e001      	b.n	8013ff4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8013ff4:	68fb      	ldr	r3, [r7, #12]
    }
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	3714      	adds	r7, #20
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014000:	4770      	bx	lr
 8014002:	bf00      	nop
 8014004:	200574b8 	.word	0x200574b8

08014008 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8014008:	b580      	push	{r7, lr}
 801400a:	b084      	sub	sp, #16
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8014010:	f7ff f870 	bl	80130f4 <xTaskGetTickCount>
 8014014:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8014016:	4b0b      	ldr	r3, [pc, #44]	; (8014044 <prvSampleTimeNow+0x3c>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	68fa      	ldr	r2, [r7, #12]
 801401c:	429a      	cmp	r2, r3
 801401e:	d205      	bcs.n	801402c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8014020:	f000 f91e 	bl	8014260 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2201      	movs	r2, #1
 8014028:	601a      	str	r2, [r3, #0]
 801402a:	e002      	b.n	8014032 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	2200      	movs	r2, #0
 8014030:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8014032:	4a04      	ldr	r2, [pc, #16]	; (8014044 <prvSampleTimeNow+0x3c>)
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8014038:	68fb      	ldr	r3, [r7, #12]
    }
 801403a:	4618      	mov	r0, r3
 801403c:	3710      	adds	r7, #16
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}
 8014042:	bf00      	nop
 8014044:	200574c8 	.word	0x200574c8

08014048 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8014048:	b580      	push	{r7, lr}
 801404a:	b086      	sub	sp, #24
 801404c:	af00      	add	r7, sp, #0
 801404e:	60f8      	str	r0, [r7, #12]
 8014050:	60b9      	str	r1, [r7, #8]
 8014052:	607a      	str	r2, [r7, #4]
 8014054:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8014056:	2300      	movs	r3, #0
 8014058:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	68ba      	ldr	r2, [r7, #8]
 801405e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	68fa      	ldr	r2, [r7, #12]
 8014064:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8014066:	68ba      	ldr	r2, [r7, #8]
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	429a      	cmp	r2, r3
 801406c:	d812      	bhi.n	8014094 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801406e:	687a      	ldr	r2, [r7, #4]
 8014070:	683b      	ldr	r3, [r7, #0]
 8014072:	1ad2      	subs	r2, r2, r3
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	699b      	ldr	r3, [r3, #24]
 8014078:	429a      	cmp	r2, r3
 801407a:	d302      	bcc.n	8014082 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 801407c:	2301      	movs	r3, #1
 801407e:	617b      	str	r3, [r7, #20]
 8014080:	e01b      	b.n	80140ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014082:	4b10      	ldr	r3, [pc, #64]	; (80140c4 <prvInsertTimerInActiveList+0x7c>)
 8014084:	681a      	ldr	r2, [r3, #0]
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	3304      	adds	r3, #4
 801408a:	4619      	mov	r1, r3
 801408c:	4610      	mov	r0, r2
 801408e:	f7fd fcc6 	bl	8011a1e <vListInsert>
 8014092:	e012      	b.n	80140ba <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014094:	687a      	ldr	r2, [r7, #4]
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	429a      	cmp	r2, r3
 801409a:	d206      	bcs.n	80140aa <prvInsertTimerInActiveList+0x62>
 801409c:	68ba      	ldr	r2, [r7, #8]
 801409e:	683b      	ldr	r3, [r7, #0]
 80140a0:	429a      	cmp	r2, r3
 80140a2:	d302      	bcc.n	80140aa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80140a4:	2301      	movs	r3, #1
 80140a6:	617b      	str	r3, [r7, #20]
 80140a8:	e007      	b.n	80140ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80140aa:	4b07      	ldr	r3, [pc, #28]	; (80140c8 <prvInsertTimerInActiveList+0x80>)
 80140ac:	681a      	ldr	r2, [r3, #0]
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	3304      	adds	r3, #4
 80140b2:	4619      	mov	r1, r3
 80140b4:	4610      	mov	r0, r2
 80140b6:	f7fd fcb2 	bl	8011a1e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80140ba:	697b      	ldr	r3, [r7, #20]
    }
 80140bc:	4618      	mov	r0, r3
 80140be:	3718      	adds	r7, #24
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}
 80140c4:	200574bc 	.word	0x200574bc
 80140c8:	200574b8 	.word	0x200574b8

080140cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b088      	sub	sp, #32
 80140d0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80140d2:	e0b2      	b.n	801423a <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	da10      	bge.n	80140fc <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80140da:	1d3b      	adds	r3, r7, #4
 80140dc:	3304      	adds	r3, #4
 80140de:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80140e0:	69fb      	ldr	r3, [r7, #28]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d102      	bne.n	80140ec <prvProcessReceivedCommands+0x20>
 80140e6:	f000 fac7 	bl	8014678 <ulSetInterruptMask>
 80140ea:	e7fe      	b.n	80140ea <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80140ec:	69fb      	ldr	r3, [r7, #28]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	69fa      	ldr	r2, [r7, #28]
 80140f2:	6850      	ldr	r0, [r2, #4]
 80140f4:	69fa      	ldr	r2, [r7, #28]
 80140f6:	6892      	ldr	r2, [r2, #8]
 80140f8:	4611      	mov	r1, r2
 80140fa:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	f2c0 809b 	blt.w	801423a <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014108:	69bb      	ldr	r3, [r7, #24]
 801410a:	695b      	ldr	r3, [r3, #20]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d004      	beq.n	801411a <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014110:	69bb      	ldr	r3, [r7, #24]
 8014112:	3304      	adds	r3, #4
 8014114:	4618      	mov	r0, r3
 8014116:	f7fd fcbb 	bl	8011a90 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801411a:	463b      	mov	r3, r7
 801411c:	4618      	mov	r0, r3
 801411e:	f7ff ff73 	bl	8014008 <prvSampleTimeNow>
 8014122:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	3b01      	subs	r3, #1
 8014128:	2b08      	cmp	r3, #8
 801412a:	f200 8085 	bhi.w	8014238 <prvProcessReceivedCommands+0x16c>
 801412e:	a201      	add	r2, pc, #4	; (adr r2, 8014134 <prvProcessReceivedCommands+0x68>)
 8014130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014134:	08014159 	.word	0x08014159
 8014138:	08014159 	.word	0x08014159
 801413c:	080141c1 	.word	0x080141c1
 8014140:	080141d5 	.word	0x080141d5
 8014144:	0801420f 	.word	0x0801420f
 8014148:	08014159 	.word	0x08014159
 801414c:	08014159 	.word	0x08014159
 8014150:	080141c1 	.word	0x080141c1
 8014154:	080141d5 	.word	0x080141d5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014158:	69bb      	ldr	r3, [r7, #24]
 801415a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801415e:	f043 0301 	orr.w	r3, r3, #1
 8014162:	b2da      	uxtb	r2, r3
 8014164:	69bb      	ldr	r3, [r7, #24]
 8014166:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801416a:	68ba      	ldr	r2, [r7, #8]
 801416c:	69bb      	ldr	r3, [r7, #24]
 801416e:	699b      	ldr	r3, [r3, #24]
 8014170:	18d1      	adds	r1, r2, r3
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	697a      	ldr	r2, [r7, #20]
 8014176:	69b8      	ldr	r0, [r7, #24]
 8014178:	f7ff ff66 	bl	8014048 <prvInsertTimerInActiveList>
 801417c:	4603      	mov	r3, r0
 801417e:	2b00      	cmp	r3, #0
 8014180:	d05b      	beq.n	801423a <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014182:	69bb      	ldr	r3, [r7, #24]
 8014184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014188:	f003 0304 	and.w	r3, r3, #4
 801418c:	2b00      	cmp	r3, #0
 801418e:	d009      	beq.n	80141a4 <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8014190:	68ba      	ldr	r2, [r7, #8]
 8014192:	69bb      	ldr	r3, [r7, #24]
 8014194:	699b      	ldr	r3, [r3, #24]
 8014196:	4413      	add	r3, r2
 8014198:	697a      	ldr	r2, [r7, #20]
 801419a:	4619      	mov	r1, r3
 801419c:	69b8      	ldr	r0, [r7, #24]
 801419e:	f7ff fe63 	bl	8013e68 <prvReloadTimer>
 80141a2:	e008      	b.n	80141b6 <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80141a4:	69bb      	ldr	r3, [r7, #24]
 80141a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80141aa:	f023 0301 	bic.w	r3, r3, #1
 80141ae:	b2da      	uxtb	r2, r3
 80141b0:	69bb      	ldr	r3, [r7, #24]
 80141b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80141b6:	69bb      	ldr	r3, [r7, #24]
 80141b8:	6a1b      	ldr	r3, [r3, #32]
 80141ba:	69b8      	ldr	r0, [r7, #24]
 80141bc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80141be:	e03c      	b.n	801423a <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80141c0:	69bb      	ldr	r3, [r7, #24]
 80141c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80141c6:	f023 0301 	bic.w	r3, r3, #1
 80141ca:	b2da      	uxtb	r2, r3
 80141cc:	69bb      	ldr	r3, [r7, #24]
 80141ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80141d2:	e032      	b.n	801423a <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80141d4:	69bb      	ldr	r3, [r7, #24]
 80141d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80141da:	f043 0301 	orr.w	r3, r3, #1
 80141de:	b2da      	uxtb	r2, r3
 80141e0:	69bb      	ldr	r3, [r7, #24]
 80141e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80141e6:	68ba      	ldr	r2, [r7, #8]
 80141e8:	69bb      	ldr	r3, [r7, #24]
 80141ea:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80141ec:	69bb      	ldr	r3, [r7, #24]
 80141ee:	699b      	ldr	r3, [r3, #24]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d102      	bne.n	80141fa <prvProcessReceivedCommands+0x12e>
 80141f4:	f000 fa40 	bl	8014678 <ulSetInterruptMask>
 80141f8:	e7fe      	b.n	80141f8 <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80141fa:	69bb      	ldr	r3, [r7, #24]
 80141fc:	699a      	ldr	r2, [r3, #24]
 80141fe:	697b      	ldr	r3, [r7, #20]
 8014200:	18d1      	adds	r1, r2, r3
 8014202:	697b      	ldr	r3, [r7, #20]
 8014204:	697a      	ldr	r2, [r7, #20]
 8014206:	69b8      	ldr	r0, [r7, #24]
 8014208:	f7ff ff1e 	bl	8014048 <prvInsertTimerInActiveList>
                        break;
 801420c:	e015      	b.n	801423a <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801420e:	69bb      	ldr	r3, [r7, #24]
 8014210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014214:	f003 0302 	and.w	r3, r3, #2
 8014218:	2b00      	cmp	r3, #0
 801421a:	d103      	bne.n	8014224 <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 801421c:	69b8      	ldr	r0, [r7, #24]
 801421e:	f000 fb41 	bl	80148a4 <vPortFree>
 8014222:	e00a      	b.n	801423a <prvProcessReceivedCommands+0x16e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8014224:	69bb      	ldr	r3, [r7, #24]
 8014226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801422a:	f023 0301 	bic.w	r3, r3, #1
 801422e:	b2da      	uxtb	r2, r3
 8014230:	69bb      	ldr	r3, [r7, #24]
 8014232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8014236:	e000      	b.n	801423a <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8014238:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801423a:	4b08      	ldr	r3, [pc, #32]	; (801425c <prvProcessReceivedCommands+0x190>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	1d39      	adds	r1, r7, #4
 8014240:	2200      	movs	r2, #0
 8014242:	4618      	mov	r0, r3
 8014244:	f7fe f82a 	bl	801229c <xQueueReceive>
 8014248:	4603      	mov	r3, r0
 801424a:	2b00      	cmp	r3, #0
 801424c:	f47f af42 	bne.w	80140d4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8014250:	bf00      	nop
 8014252:	bf00      	nop
 8014254:	3720      	adds	r7, #32
 8014256:	46bd      	mov	sp, r7
 8014258:	bd80      	pop	{r7, pc}
 801425a:	bf00      	nop
 801425c:	200574c0 	.word	0x200574c0

08014260 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8014260:	b580      	push	{r7, lr}
 8014262:	b082      	sub	sp, #8
 8014264:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014266:	e009      	b.n	801427c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014268:	4b0e      	ldr	r3, [pc, #56]	; (80142a4 <prvSwitchTimerLists+0x44>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	68db      	ldr	r3, [r3, #12]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8014272:	f04f 31ff 	mov.w	r1, #4294967295
 8014276:	6838      	ldr	r0, [r7, #0]
 8014278:	f7ff fe18 	bl	8013eac <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801427c:	4b09      	ldr	r3, [pc, #36]	; (80142a4 <prvSwitchTimerLists+0x44>)
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d1f0      	bne.n	8014268 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8014286:	4b07      	ldr	r3, [pc, #28]	; (80142a4 <prvSwitchTimerLists+0x44>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 801428c:	4b06      	ldr	r3, [pc, #24]	; (80142a8 <prvSwitchTimerLists+0x48>)
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	4a04      	ldr	r2, [pc, #16]	; (80142a4 <prvSwitchTimerLists+0x44>)
 8014292:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8014294:	4a04      	ldr	r2, [pc, #16]	; (80142a8 <prvSwitchTimerLists+0x48>)
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	6013      	str	r3, [r2, #0]
    }
 801429a:	bf00      	nop
 801429c:	3708      	adds	r7, #8
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}
 80142a2:	bf00      	nop
 80142a4:	200574b8 	.word	0x200574b8
 80142a8:	200574bc 	.word	0x200574bc

080142ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b082      	sub	sp, #8
 80142b0:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80142b2:	f000 f8a3 	bl	80143fc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80142b6:	4b15      	ldr	r3, [pc, #84]	; (801430c <prvCheckForValidListAndQueue+0x60>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d120      	bne.n	8014300 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 80142be:	4814      	ldr	r0, [pc, #80]	; (8014310 <prvCheckForValidListAndQueue+0x64>)
 80142c0:	f7fd fb80 	bl	80119c4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80142c4:	4813      	ldr	r0, [pc, #76]	; (8014314 <prvCheckForValidListAndQueue+0x68>)
 80142c6:	f7fd fb7d 	bl	80119c4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80142ca:	4b13      	ldr	r3, [pc, #76]	; (8014318 <prvCheckForValidListAndQueue+0x6c>)
 80142cc:	4a10      	ldr	r2, [pc, #64]	; (8014310 <prvCheckForValidListAndQueue+0x64>)
 80142ce:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80142d0:	4b12      	ldr	r3, [pc, #72]	; (801431c <prvCheckForValidListAndQueue+0x70>)
 80142d2:	4a10      	ldr	r2, [pc, #64]	; (8014314 <prvCheckForValidListAndQueue+0x68>)
 80142d4:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80142d6:	2300      	movs	r3, #0
 80142d8:	9300      	str	r3, [sp, #0]
 80142da:	4b11      	ldr	r3, [pc, #68]	; (8014320 <prvCheckForValidListAndQueue+0x74>)
 80142dc:	4a11      	ldr	r2, [pc, #68]	; (8014324 <prvCheckForValidListAndQueue+0x78>)
 80142de:	2110      	movs	r1, #16
 80142e0:	2014      	movs	r0, #20
 80142e2:	f7fd fc76 	bl	8011bd2 <xQueueGenericCreateStatic>
 80142e6:	4603      	mov	r3, r0
 80142e8:	4a08      	ldr	r2, [pc, #32]	; (801430c <prvCheckForValidListAndQueue+0x60>)
 80142ea:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80142ec:	4b07      	ldr	r3, [pc, #28]	; (801430c <prvCheckForValidListAndQueue+0x60>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d005      	beq.n	8014300 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80142f4:	4b05      	ldr	r3, [pc, #20]	; (801430c <prvCheckForValidListAndQueue+0x60>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	490b      	ldr	r1, [pc, #44]	; (8014328 <prvCheckForValidListAndQueue+0x7c>)
 80142fa:	4618      	mov	r0, r3
 80142fc:	f7fe fb38 	bl	8012970 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8014300:	f000 f88e 	bl	8014420 <vPortExitCritical>
    }
 8014304:	bf00      	nop
 8014306:	46bd      	mov	sp, r7
 8014308:	bd80      	pop	{r7, pc}
 801430a:	bf00      	nop
 801430c:	200574c0 	.word	0x200574c0
 8014310:	20057490 	.word	0x20057490
 8014314:	200574a4 	.word	0x200574a4
 8014318:	200574b8 	.word	0x200574b8
 801431c:	200574bc 	.word	0x200574bc
 8014320:	2005760c 	.word	0x2005760c
 8014324:	200574cc 	.word	0x200574cc
 8014328:	08025718 	.word	0x08025718

0801432c <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 801432c:	b480      	push	{r7}
 801432e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014330:	4b0b      	ldr	r3, [pc, #44]	; (8014360 <vPortSetupTimerInterrupt+0x34>)
 8014332:	2200      	movs	r2, #0
 8014334:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014336:	4b0b      	ldr	r3, [pc, #44]	; (8014364 <vPortSetupTimerInterrupt+0x38>)
 8014338:	2200      	movs	r2, #0
 801433a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801433c:	4b0a      	ldr	r3, [pc, #40]	; (8014368 <vPortSetupTimerInterrupt+0x3c>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	4a0a      	ldr	r2, [pc, #40]	; (801436c <vPortSetupTimerInterrupt+0x40>)
 8014342:	fba2 2303 	umull	r2, r3, r2, r3
 8014346:	099b      	lsrs	r3, r3, #6
 8014348:	4a09      	ldr	r2, [pc, #36]	; (8014370 <vPortSetupTimerInterrupt+0x44>)
 801434a:	3b01      	subs	r3, #1
 801434c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 801434e:	4b04      	ldr	r3, [pc, #16]	; (8014360 <vPortSetupTimerInterrupt+0x34>)
 8014350:	2207      	movs	r2, #7
 8014352:	601a      	str	r2, [r3, #0]
}
 8014354:	bf00      	nop
 8014356:	46bd      	mov	sp, r7
 8014358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435c:	4770      	bx	lr
 801435e:	bf00      	nop
 8014360:	e000e010 	.word	0xe000e010
 8014364:	e000e018 	.word	0xe000e018
 8014368:	20050000 	.word	0x20050000
 801436c:	10624dd3 	.word	0x10624dd3
 8014370:	e000e014 	.word	0xe000e014

08014374 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b082      	sub	sp, #8
 8014378:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 801437a:	2300      	movs	r3, #0
 801437c:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 801437e:	4b09      	ldr	r3, [pc, #36]	; (80143a4 <prvTaskExitError+0x30>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014386:	d002      	beq.n	801438e <prvTaskExitError+0x1a>
 8014388:	f000 f976 	bl	8014678 <ulSetInterruptMask>
 801438c:	e7fe      	b.n	801438c <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 801438e:	f000 f973 	bl	8014678 <ulSetInterruptMask>

    while( ulDummy == 0 )
 8014392:	bf00      	nop
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d0fc      	beq.n	8014394 <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 801439a:	bf00      	nop
 801439c:	bf00      	nop
 801439e:	3708      	adds	r7, #8
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}
 80143a4:	2005007c 	.word	0x2005007c

080143a8 <prvSetupFPU>:
#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

#if ( configENABLE_FPU == 1 )
    static void prvSetupFPU( void ) /* PRIVILEGED_FUNCTION */
    {
 80143a8:	b480      	push	{r7}
 80143aa:	af00      	add	r7, sp, #0
        #endif /* configENABLE_TRUSTZONE */

        /* CP10 = 11 ==> Full access to FPU i.e. both privileged and
         * unprivileged code should be able to access FPU. CP11 should be
         * programmed to the same value as CP10. */
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 80143ac:	4b08      	ldr	r3, [pc, #32]	; (80143d0 <prvSetupFPU+0x28>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	4a07      	ldr	r2, [pc, #28]	; (80143d0 <prvSetupFPU+0x28>)
 80143b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80143b6:	6013      	str	r3, [r2, #0]
                            );

        /* ASPEN = 1 ==> Hardware should automatically preserve floating point
         * context on exception entry and restore on exception return.
         * LSPEN = 1 ==> Enable lazy context save of FP state. */
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 80143b8:	4b06      	ldr	r3, [pc, #24]	; (80143d4 <prvSetupFPU+0x2c>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	4a05      	ldr	r2, [pc, #20]	; (80143d4 <prvSetupFPU+0x2c>)
 80143be:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80143c2:	6013      	str	r3, [r2, #0]
    }
 80143c4:	bf00      	nop
 80143c6:	46bd      	mov	sp, r7
 80143c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143cc:	4770      	bx	lr
 80143ce:	bf00      	nop
 80143d0:	e000ed88 	.word	0xe000ed88
 80143d4:	e000ef34 	.word	0xe000ef34

080143d8 <vPortYield>:
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 80143d8:	b480      	push	{r7}
 80143da:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80143dc:	4b06      	ldr	r3, [pc, #24]	; (80143f8 <vPortYield+0x20>)
 80143de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143e2:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80143e4:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80143e8:	f3bf 8f6f 	isb	sy
}
 80143ec:	bf00      	nop
 80143ee:	46bd      	mov	sp, r7
 80143f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f4:	4770      	bx	lr
 80143f6:	bf00      	nop
 80143f8:	e000ed04 	.word	0xe000ed04

080143fc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8014400:	f000 f93a 	bl	8014678 <ulSetInterruptMask>
    ulCriticalNesting++;
 8014404:	4b05      	ldr	r3, [pc, #20]	; (801441c <vPortEnterCritical+0x20>)
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	3301      	adds	r3, #1
 801440a:	4a04      	ldr	r2, [pc, #16]	; (801441c <vPortEnterCritical+0x20>)
 801440c:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 801440e:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8014412:	f3bf 8f6f 	isb	sy
}
 8014416:	bf00      	nop
 8014418:	bd80      	pop	{r7, pc}
 801441a:	bf00      	nop
 801441c:	2005007c 	.word	0x2005007c

08014420 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8014420:	b580      	push	{r7, lr}
 8014422:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 8014424:	4b0a      	ldr	r3, [pc, #40]	; (8014450 <vPortExitCritical+0x30>)
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d102      	bne.n	8014432 <vPortExitCritical+0x12>
 801442c:	f000 f924 	bl	8014678 <ulSetInterruptMask>
 8014430:	e7fe      	b.n	8014430 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 8014432:	4b07      	ldr	r3, [pc, #28]	; (8014450 <vPortExitCritical+0x30>)
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	3b01      	subs	r3, #1
 8014438:	4a05      	ldr	r2, [pc, #20]	; (8014450 <vPortExitCritical+0x30>)
 801443a:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 801443c:	4b04      	ldr	r3, [pc, #16]	; (8014450 <vPortExitCritical+0x30>)
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d102      	bne.n	801444a <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 8014444:	2000      	movs	r0, #0
 8014446:	f000 f924 	bl	8014692 <vClearInterruptMask>
    }
}
 801444a:	bf00      	nop
 801444c:	bd80      	pop	{r7, pc}
 801444e:	bf00      	nop
 8014450:	2005007c 	.word	0x2005007c

08014454 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b082      	sub	sp, #8
 8014458:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801445a:	f000 f90d 	bl	8014678 <ulSetInterruptMask>
 801445e:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8014460:	f7fe fe76 	bl	8013150 <xTaskIncrementTick>
 8014464:	4603      	mov	r3, r0
 8014466:	2b00      	cmp	r3, #0
 8014468:	d003      	beq.n	8014472 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801446a:	4b05      	ldr	r3, [pc, #20]	; (8014480 <xPortSysTickHandler+0x2c>)
 801446c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014470:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8014472:	6878      	ldr	r0, [r7, #4]
 8014474:	f000 f90d 	bl	8014692 <vClearInterruptMask>
}
 8014478:	bf00      	nop
 801447a:	3708      	adds	r7, #8
 801447c:	46bd      	mov	sp, r7
 801447e:	bd80      	pop	{r7, pc}
 8014480:	e000ed04 	.word	0xe000ed04

08014484 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b084      	sub	sp, #16
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	699b      	ldr	r3, [r3, #24]
 8014490:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	3b02      	subs	r3, #2
 8014496:	781b      	ldrb	r3, [r3, #0]
 8014498:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 801449a:	7afb      	ldrb	r3, [r7, #11]
 801449c:	2b02      	cmp	r3, #2
 801449e:	d104      	bne.n	80144aa <vPortSVCHandler_C+0x26>
            #endif /* configENABLE_TRUSTZONE */

            #if ( configENABLE_FPU == 1 )
            {
                /* Setup the Floating Point Unit (FPU). */
                prvSetupFPU();
 80144a0:	f7ff ff82 	bl	80143a8 <prvSetupFPU>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 80144a4:	f000 f8b4 	bl	8014610 <vRestoreContextOfFirstTask>
            break;
 80144a8:	e002      	b.n	80144b0 <vPortSVCHandler_C+0x2c>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 80144aa:	f000 f8e5 	bl	8014678 <ulSetInterruptMask>
 80144ae:	e7fe      	b.n	80144ae <vPortSVCHandler_C+0x2a>
    }
}
 80144b0:	bf00      	nop
 80144b2:	3710      	adds	r7, #16
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}

080144b8 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 80144b8:	b480      	push	{r7}
 80144ba:	b085      	sub	sp, #20
 80144bc:	af00      	add	r7, sp, #0
 80144be:	60f8      	str	r0, [r7, #12]
 80144c0:	60b9      	str	r1, [r7, #8]
 80144c2:	607a      	str	r2, [r7, #4]
 80144c4:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	3b04      	subs	r3, #4
 80144ca:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80144d2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	3b04      	subs	r3, #4
 80144d8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 80144da:	687a      	ldr	r2, [r7, #4]
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	3b04      	subs	r3, #4
 80144e4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 80144e6:	4a38      	ldr	r2, [pc, #224]	; (80145c8 <pxPortInitialiseStack+0x110>)
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	3b04      	subs	r3, #4
 80144f0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80144f8:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	3b04      	subs	r3, #4
 80144fe:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8014506:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	3b04      	subs	r3, #4
 801450c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8014514:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	3b04      	subs	r3, #4
 801451a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8014522:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	3b04      	subs	r3, #4
 8014528:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 801452a:	683a      	ldr	r2, [r7, #0]
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	3b04      	subs	r3, #4
 8014534:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 801453c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	3b04      	subs	r3, #4
 8014542:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 801454a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	3b04      	subs	r3, #4
 8014550:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8014558:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	3b04      	subs	r3, #4
 801455e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8014566:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	3b04      	subs	r3, #4
 801456c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8014574:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	3b04      	subs	r3, #4
 801457a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8014582:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	3b04      	subs	r3, #4
 8014588:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8014590:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	3b04      	subs	r3, #4
 8014596:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 801459e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	3b04      	subs	r3, #4
 80145a4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	f06f 0243 	mvn.w	r2, #67	; 0x43
 80145ac:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	3b04      	subs	r3, #4
 80145b2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 80145b4:	68ba      	ldr	r2, [r7, #8]
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 80145ba:	68fb      	ldr	r3, [r7, #12]
}
 80145bc:	4618      	mov	r0, r3
 80145be:	3714      	adds	r7, #20
 80145c0:	46bd      	mov	sp, r7
 80145c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c6:	4770      	bx	lr
 80145c8:	08014375 	.word	0x08014375

080145cc <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80145d0:	4b0c      	ldr	r3, [pc, #48]	; (8014604 <xPortStartScheduler+0x38>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	4a0b      	ldr	r2, [pc, #44]	; (8014604 <xPortStartScheduler+0x38>)
 80145d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80145da:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80145dc:	4b09      	ldr	r3, [pc, #36]	; (8014604 <xPortStartScheduler+0x38>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	4a08      	ldr	r2, [pc, #32]	; (8014604 <xPortStartScheduler+0x38>)
 80145e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80145e6:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80145e8:	f7ff fea0 	bl	801432c <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 80145ec:	4b06      	ldr	r3, [pc, #24]	; (8014608 <xPortStartScheduler+0x3c>)
 80145ee:	2200      	movs	r2, #0
 80145f0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 80145f2:	f000 f82d 	bl	8014650 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 80145f6:	f7fe febb 	bl	8013370 <vTaskSwitchContext>
    prvTaskExitError();
 80145fa:	f7ff febb 	bl	8014374 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 80145fe:	2300      	movs	r3, #0
}
 8014600:	4618      	mov	r0, r3
 8014602:	bd80      	pop	{r7, pc}
 8014604:	e000ed20 	.word	0xe000ed20
 8014608:	2005007c 	.word	0x2005007c
 801460c:	00000000 	.word	0x00000000

08014610 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8014610:	4a0b      	ldr	r2, [pc, #44]	; (8014640 <pxCurrentTCBConst2>)
 8014612:	6811      	ldr	r1, [r2, #0]
 8014614:	6808      	ldr	r0, [r1, #0]
 8014616:	c806      	ldmia	r0!, {r1, r2}
 8014618:	f381 880b 	msr	PSPLIM, r1
 801461c:	2102      	movs	r1, #2
 801461e:	f381 8814 	msr	CONTROL, r1
 8014622:	3020      	adds	r0, #32
 8014624:	f380 8809 	msr	PSP, r0
 8014628:	f3bf 8f6f 	isb	sy
 801462c:	f04f 0000 	mov.w	r0, #0
 8014630:	f380 8811 	msr	BASEPRI, r0
 8014634:	4710      	bx	r2
 8014636:	bf00      	nop
 8014638:	f3af 8000 	nop.w
 801463c:	f3af 8000 	nop.w

08014640 <pxCurrentTCBConst2>:
 8014640:	20056f90 	.word	0x20056f90
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 8014644:	bf00      	nop
 8014646:	bf00      	nop
	...

08014650 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8014650:	4807      	ldr	r0, [pc, #28]	; (8014670 <xVTORConst>)
 8014652:	6800      	ldr	r0, [r0, #0]
 8014654:	6800      	ldr	r0, [r0, #0]
 8014656:	f380 8808 	msr	MSP, r0
 801465a:	b662      	cpsie	i
 801465c:	b661      	cpsie	f
 801465e:	f3bf 8f4f 	dsb	sy
 8014662:	f3bf 8f6f 	isb	sy
 8014666:	df02      	svc	2
 8014668:	bf00      	nop
 801466a:	bf00      	nop
 801466c:	f3af 8000 	nop.w

08014670 <xVTORConst>:
 8014670:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8014674:	bf00      	nop
 8014676:	bf00      	nop

08014678 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8014678:	f3ef 8011 	mrs	r0, BASEPRI
 801467c:	f04f 0150 	mov.w	r1, #80	; 0x50
 8014680:	f381 8811 	msr	BASEPRI, r1
 8014684:	f3bf 8f4f 	dsb	sy
 8014688:	f3bf 8f6f 	isb	sy
 801468c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 801468e:	bf00      	nop
 8014690:	4618      	mov	r0, r3

08014692 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8014692:	f380 8811 	msr	BASEPRI, r0
 8014696:	f3bf 8f4f 	dsb	sy
 801469a:	f3bf 8f6f 	isb	sy
 801469e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 80146a0:	bf00      	nop
	...

080146b0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80146b0:	f3ef 8009 	mrs	r0, PSP
 80146b4:	f01e 0f10 	tst.w	lr, #16
 80146b8:	bf08      	it	eq
 80146ba:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80146be:	f3ef 820b 	mrs	r2, PSPLIM
 80146c2:	4673      	mov	r3, lr
 80146c4:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80146c8:	4a11      	ldr	r2, [pc, #68]	; (8014710 <pxCurrentTCBConst>)
 80146ca:	6811      	ldr	r1, [r2, #0]
 80146cc:	6008      	str	r0, [r1, #0]
 80146ce:	f04f 0050 	mov.w	r0, #80	; 0x50
 80146d2:	f380 8811 	msr	BASEPRI, r0
 80146d6:	f3bf 8f4f 	dsb	sy
 80146da:	f3bf 8f6f 	isb	sy
 80146de:	f7fe fe47 	bl	8013370 <vTaskSwitchContext>
 80146e2:	f04f 0000 	mov.w	r0, #0
 80146e6:	f380 8811 	msr	BASEPRI, r0
 80146ea:	4a09      	ldr	r2, [pc, #36]	; (8014710 <pxCurrentTCBConst>)
 80146ec:	6811      	ldr	r1, [r2, #0]
 80146ee:	6808      	ldr	r0, [r1, #0]
 80146f0:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80146f4:	f013 0f10 	tst.w	r3, #16
 80146f8:	bf08      	it	eq
 80146fa:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80146fe:	f382 880b 	msr	PSPLIM, r2
 8014702:	f380 8809 	msr	PSP, r0
 8014706:	4718      	bx	r3
 8014708:	f3af 8000 	nop.w
 801470c:	f3af 8000 	nop.w

08014710 <pxCurrentTCBConst>:
 8014710:	20056f90 	.word	0x20056f90
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8014714:	bf00      	nop
 8014716:	bf00      	nop
	...

08014720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8014720:	f01e 0f04 	tst.w	lr, #4
 8014724:	bf0c      	ite	eq
 8014726:	f3ef 8008 	mrseq	r0, MSP
 801472a:	f3ef 8009 	mrsne	r0, PSP
 801472e:	4904      	ldr	r1, [pc, #16]	; (8014740 <svchandler_address_const>)
 8014730:	4708      	bx	r1
 8014732:	bf00      	nop
 8014734:	f3af 8000 	nop.w
 8014738:	f3af 8000 	nop.w
 801473c:	f3af 8000 	nop.w

08014740 <svchandler_address_const>:
 8014740:	08014485 	.word	0x08014485
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 8014744:	bf00      	nop
 8014746:	bf00      	nop

08014748 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b088      	sub	sp, #32
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8014750:	2300      	movs	r3, #0
 8014752:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8014754:	f7fe fbd4 	bl	8012f00 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8014758:	4b4d      	ldr	r3, [pc, #308]	; (8014890 <pvPortMalloc+0x148>)
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d101      	bne.n	8014764 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8014760:	f000 f8ec 	bl	801493c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d012      	beq.n	8014790 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 801476a:	2208      	movs	r2, #8
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	f003 0307 	and.w	r3, r3, #7
 8014772:	1ad3      	subs	r3, r2, r3
 8014774:	3308      	adds	r3, #8
 8014776:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8014778:	693b      	ldr	r3, [r7, #16]
 801477a:	43db      	mvns	r3, r3
 801477c:	687a      	ldr	r2, [r7, #4]
 801477e:	429a      	cmp	r2, r3
 8014780:	d804      	bhi.n	801478c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8014782:	687a      	ldr	r2, [r7, #4]
 8014784:	693b      	ldr	r3, [r7, #16]
 8014786:	4413      	add	r3, r2
 8014788:	607b      	str	r3, [r7, #4]
 801478a:	e001      	b.n	8014790 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 801478c:	2300      	movs	r3, #0
 801478e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	2b00      	cmp	r3, #0
 8014794:	db68      	blt.n	8014868 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d065      	beq.n	8014868 <pvPortMalloc+0x120>
 801479c:	4b3d      	ldr	r3, [pc, #244]	; (8014894 <pvPortMalloc+0x14c>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	687a      	ldr	r2, [r7, #4]
 80147a2:	429a      	cmp	r2, r3
 80147a4:	d860      	bhi.n	8014868 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80147a6:	4b3c      	ldr	r3, [pc, #240]	; (8014898 <pvPortMalloc+0x150>)
 80147a8:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 80147aa:	4b3b      	ldr	r3, [pc, #236]	; (8014898 <pvPortMalloc+0x150>)
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80147b0:	e004      	b.n	80147bc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80147b2:	69fb      	ldr	r3, [r7, #28]
 80147b4:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80147b6:	69fb      	ldr	r3, [r7, #28]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80147bc:	69fb      	ldr	r3, [r7, #28]
 80147be:	685b      	ldr	r3, [r3, #4]
 80147c0:	687a      	ldr	r2, [r7, #4]
 80147c2:	429a      	cmp	r2, r3
 80147c4:	d903      	bls.n	80147ce <pvPortMalloc+0x86>
 80147c6:	69fb      	ldr	r3, [r7, #28]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d1f1      	bne.n	80147b2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80147ce:	4b30      	ldr	r3, [pc, #192]	; (8014890 <pvPortMalloc+0x148>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	69fa      	ldr	r2, [r7, #28]
 80147d4:	429a      	cmp	r2, r3
 80147d6:	d047      	beq.n	8014868 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80147d8:	69bb      	ldr	r3, [r7, #24]
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	2208      	movs	r2, #8
 80147de:	4413      	add	r3, r2
 80147e0:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80147e2:	69fb      	ldr	r3, [r7, #28]
 80147e4:	681a      	ldr	r2, [r3, #0]
 80147e6:	69bb      	ldr	r3, [r7, #24]
 80147e8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80147ea:	69fb      	ldr	r3, [r7, #28]
 80147ec:	685a      	ldr	r2, [r3, #4]
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	1ad2      	subs	r2, r2, r3
 80147f2:	2308      	movs	r3, #8
 80147f4:	005b      	lsls	r3, r3, #1
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d917      	bls.n	801482a <pvPortMalloc+0xe2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80147fa:	69fa      	ldr	r2, [r7, #28]
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	4413      	add	r3, r2
 8014800:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	f003 0307 	and.w	r3, r3, #7
 8014808:	2b00      	cmp	r3, #0
 801480a:	d002      	beq.n	8014812 <pvPortMalloc+0xca>
 801480c:	f7ff ff34 	bl	8014678 <ulSetInterruptMask>
 8014810:	e7fe      	b.n	8014810 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014812:	69fb      	ldr	r3, [r7, #28]
 8014814:	685a      	ldr	r2, [r3, #4]
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	1ad2      	subs	r2, r2, r3
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 801481e:	69fb      	ldr	r3, [r7, #28]
 8014820:	687a      	ldr	r2, [r7, #4]
 8014822:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014824:	68f8      	ldr	r0, [r7, #12]
 8014826:	f000 f8e5 	bl	80149f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 801482a:	4b1a      	ldr	r3, [pc, #104]	; (8014894 <pvPortMalloc+0x14c>)
 801482c:	681a      	ldr	r2, [r3, #0]
 801482e:	69fb      	ldr	r3, [r7, #28]
 8014830:	685b      	ldr	r3, [r3, #4]
 8014832:	1ad3      	subs	r3, r2, r3
 8014834:	4a17      	ldr	r2, [pc, #92]	; (8014894 <pvPortMalloc+0x14c>)
 8014836:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014838:	4b16      	ldr	r3, [pc, #88]	; (8014894 <pvPortMalloc+0x14c>)
 801483a:	681a      	ldr	r2, [r3, #0]
 801483c:	4b17      	ldr	r3, [pc, #92]	; (801489c <pvPortMalloc+0x154>)
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	429a      	cmp	r2, r3
 8014842:	d203      	bcs.n	801484c <pvPortMalloc+0x104>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014844:	4b13      	ldr	r3, [pc, #76]	; (8014894 <pvPortMalloc+0x14c>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	4a14      	ldr	r2, [pc, #80]	; (801489c <pvPortMalloc+0x154>)
 801484a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 801484c:	69fb      	ldr	r3, [r7, #28]
 801484e:	685b      	ldr	r3, [r3, #4]
 8014850:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014854:	69fb      	ldr	r3, [r7, #28]
 8014856:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8014858:	69fb      	ldr	r3, [r7, #28]
 801485a:	2200      	movs	r2, #0
 801485c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 801485e:	4b10      	ldr	r3, [pc, #64]	; (80148a0 <pvPortMalloc+0x158>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	3301      	adds	r3, #1
 8014864:	4a0e      	ldr	r2, [pc, #56]	; (80148a0 <pvPortMalloc+0x158>)
 8014866:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8014868:	f7fe fb58 	bl	8012f1c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 801486c:	697b      	ldr	r3, [r7, #20]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d101      	bne.n	8014876 <pvPortMalloc+0x12e>
        {
            vApplicationMallocFailedHook();
 8014872:	f7fd f867 	bl	8011944 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014876:	697b      	ldr	r3, [r7, #20]
 8014878:	f003 0307 	and.w	r3, r3, #7
 801487c:	2b00      	cmp	r3, #0
 801487e:	d002      	beq.n	8014886 <pvPortMalloc+0x13e>
 8014880:	f7ff fefa 	bl	8014678 <ulSetInterruptMask>
 8014884:	e7fe      	b.n	8014884 <pvPortMalloc+0x13c>
    return pvReturn;
 8014886:	697b      	ldr	r3, [r7, #20]
}
 8014888:	4618      	mov	r0, r3
 801488a:	3720      	adds	r7, #32
 801488c:	46bd      	mov	sp, r7
 801488e:	bd80      	pop	{r7, pc}
 8014890:	2007ba64 	.word	0x2007ba64
 8014894:	2007ba68 	.word	0x2007ba68
 8014898:	2007ba5c 	.word	0x2007ba5c
 801489c:	2007ba6c 	.word	0x2007ba6c
 80148a0:	2007ba70 	.word	0x2007ba70

080148a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80148a4:	b580      	push	{r7, lr}
 80148a6:	b084      	sub	sp, #16
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d039      	beq.n	801492a <vPortFree+0x86>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80148b6:	2308      	movs	r3, #8
 80148b8:	425b      	negs	r3, r3
 80148ba:	68fa      	ldr	r2, [r7, #12]
 80148bc:	4413      	add	r3, r2
 80148be:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	685b      	ldr	r3, [r3, #4]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	db02      	blt.n	80148d2 <vPortFree+0x2e>
 80148cc:	f7ff fed4 	bl	8014678 <ulSetInterruptMask>
 80148d0:	e7fe      	b.n	80148d0 <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d002      	beq.n	80148e0 <vPortFree+0x3c>
 80148da:	f7ff fecd 	bl	8014678 <ulSetInterruptMask>
 80148de:	e7fe      	b.n	80148de <vPortFree+0x3a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80148e0:	68bb      	ldr	r3, [r7, #8]
 80148e2:	685b      	ldr	r3, [r3, #4]
 80148e4:	0fdb      	lsrs	r3, r3, #31
 80148e6:	f003 0301 	and.w	r3, r3, #1
 80148ea:	b2db      	uxtb	r3, r3
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d01c      	beq.n	801492a <vPortFree+0x86>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d118      	bne.n	801492a <vPortFree+0x86>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80148f8:	68bb      	ldr	r3, [r7, #8]
 80148fa:	685b      	ldr	r3, [r3, #4]
 80148fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014900:	68bb      	ldr	r3, [r7, #8]
 8014902:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8014904:	f7fe fafc 	bl	8012f00 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8014908:	68bb      	ldr	r3, [r7, #8]
 801490a:	685a      	ldr	r2, [r3, #4]
 801490c:	4b09      	ldr	r3, [pc, #36]	; (8014934 <vPortFree+0x90>)
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	4413      	add	r3, r2
 8014912:	4a08      	ldr	r2, [pc, #32]	; (8014934 <vPortFree+0x90>)
 8014914:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014916:	68b8      	ldr	r0, [r7, #8]
 8014918:	f000 f86c 	bl	80149f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 801491c:	4b06      	ldr	r3, [pc, #24]	; (8014938 <vPortFree+0x94>)
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	3301      	adds	r3, #1
 8014922:	4a05      	ldr	r2, [pc, #20]	; (8014938 <vPortFree+0x94>)
 8014924:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8014926:	f7fe faf9 	bl	8012f1c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 801492a:	bf00      	nop
 801492c:	3710      	adds	r7, #16
 801492e:	46bd      	mov	sp, r7
 8014930:	bd80      	pop	{r7, pc}
 8014932:	bf00      	nop
 8014934:	2007ba68 	.word	0x2007ba68
 8014938:	2007ba74 	.word	0x2007ba74

0801493c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 801493c:	b480      	push	{r7}
 801493e:	b085      	sub	sp, #20
 8014940:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014942:	f44f 3311 	mov.w	r3, #148480	; 0x24400
 8014946:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8014948:	4b25      	ldr	r3, [pc, #148]	; (80149e0 <prvHeapInit+0xa4>)
 801494a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	f003 0307 	and.w	r3, r3, #7
 8014952:	2b00      	cmp	r3, #0
 8014954:	d00c      	beq.n	8014970 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	3307      	adds	r3, #7
 801495a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	f023 0307 	bic.w	r3, r3, #7
 8014962:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8014964:	68ba      	ldr	r2, [r7, #8]
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	1ad3      	subs	r3, r2, r3
 801496a:	4a1d      	ldr	r2, [pc, #116]	; (80149e0 <prvHeapInit+0xa4>)
 801496c:	4413      	add	r3, r2
 801496e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014974:	4a1b      	ldr	r2, [pc, #108]	; (80149e4 <prvHeapInit+0xa8>)
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 801497a:	4b1a      	ldr	r3, [pc, #104]	; (80149e4 <prvHeapInit+0xa8>)
 801497c:	2200      	movs	r2, #0
 801497e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	68ba      	ldr	r2, [r7, #8]
 8014984:	4413      	add	r3, r2
 8014986:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8014988:	2208      	movs	r2, #8
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	1a9b      	subs	r3, r3, r2
 801498e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	f023 0307 	bic.w	r3, r3, #7
 8014996:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	4a13      	ldr	r2, [pc, #76]	; (80149e8 <prvHeapInit+0xac>)
 801499c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 801499e:	4b12      	ldr	r3, [pc, #72]	; (80149e8 <prvHeapInit+0xac>)
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	2200      	movs	r2, #0
 80149a4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80149a6:	4b10      	ldr	r3, [pc, #64]	; (80149e8 <prvHeapInit+0xac>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	2200      	movs	r2, #0
 80149ac:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80149b2:	683b      	ldr	r3, [r7, #0]
 80149b4:	68fa      	ldr	r2, [r7, #12]
 80149b6:	1ad2      	subs	r2, r2, r3
 80149b8:	683b      	ldr	r3, [r7, #0]
 80149ba:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80149bc:	4b0a      	ldr	r3, [pc, #40]	; (80149e8 <prvHeapInit+0xac>)
 80149be:	681a      	ldr	r2, [r3, #0]
 80149c0:	683b      	ldr	r3, [r7, #0]
 80149c2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	685b      	ldr	r3, [r3, #4]
 80149c8:	4a08      	ldr	r2, [pc, #32]	; (80149ec <prvHeapInit+0xb0>)
 80149ca:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	685b      	ldr	r3, [r3, #4]
 80149d0:	4a07      	ldr	r2, [pc, #28]	; (80149f0 <prvHeapInit+0xb4>)
 80149d2:	6013      	str	r3, [r2, #0]
}
 80149d4:	bf00      	nop
 80149d6:	3714      	adds	r7, #20
 80149d8:	46bd      	mov	sp, r7
 80149da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149de:	4770      	bx	lr
 80149e0:	2005765c 	.word	0x2005765c
 80149e4:	2007ba5c 	.word	0x2007ba5c
 80149e8:	2007ba64 	.word	0x2007ba64
 80149ec:	2007ba6c 	.word	0x2007ba6c
 80149f0:	2007ba68 	.word	0x2007ba68

080149f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80149f4:	b480      	push	{r7}
 80149f6:	b085      	sub	sp, #20
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80149fc:	4b28      	ldr	r3, [pc, #160]	; (8014aa0 <prvInsertBlockIntoFreeList+0xac>)
 80149fe:	60fb      	str	r3, [r7, #12]
 8014a00:	e002      	b.n	8014a08 <prvInsertBlockIntoFreeList+0x14>
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	60fb      	str	r3, [r7, #12]
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	687a      	ldr	r2, [r7, #4]
 8014a0e:	429a      	cmp	r2, r3
 8014a10:	d8f7      	bhi.n	8014a02 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	685b      	ldr	r3, [r3, #4]
 8014a1a:	68ba      	ldr	r2, [r7, #8]
 8014a1c:	4413      	add	r3, r2
 8014a1e:	687a      	ldr	r2, [r7, #4]
 8014a20:	429a      	cmp	r2, r3
 8014a22:	d108      	bne.n	8014a36 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	685a      	ldr	r2, [r3, #4]
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	685b      	ldr	r3, [r3, #4]
 8014a2c:	441a      	add	r2, r3
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	685b      	ldr	r3, [r3, #4]
 8014a3e:	68ba      	ldr	r2, [r7, #8]
 8014a40:	441a      	add	r2, r3
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d118      	bne.n	8014a7c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	681a      	ldr	r2, [r3, #0]
 8014a4e:	4b15      	ldr	r3, [pc, #84]	; (8014aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	429a      	cmp	r2, r3
 8014a54:	d00d      	beq.n	8014a72 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	685a      	ldr	r2, [r3, #4]
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	685b      	ldr	r3, [r3, #4]
 8014a60:	441a      	add	r2, r3
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	681a      	ldr	r2, [r3, #0]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	601a      	str	r2, [r3, #0]
 8014a70:	e008      	b.n	8014a84 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014a72:	4b0c      	ldr	r3, [pc, #48]	; (8014aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8014a74:	681a      	ldr	r2, [r3, #0]
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	601a      	str	r2, [r3, #0]
 8014a7a:	e003      	b.n	8014a84 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	681a      	ldr	r2, [r3, #0]
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8014a84:	68fa      	ldr	r2, [r7, #12]
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	429a      	cmp	r2, r3
 8014a8a:	d002      	beq.n	8014a92 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	687a      	ldr	r2, [r7, #4]
 8014a90:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8014a92:	bf00      	nop
 8014a94:	3714      	adds	r7, #20
 8014a96:	46bd      	mov	sp, r7
 8014a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9c:	4770      	bx	lr
 8014a9e:	bf00      	nop
 8014aa0:	2007ba5c 	.word	0x2007ba5c
 8014aa4:	2007ba64 	.word	0x2007ba64

08014aa8 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b084      	sub	sp, #16
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
 8014ab0:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 8014ab2:	683b      	ldr	r3, [r7, #0]
 8014ab4:	22fa      	movs	r2, #250	; 0xfa
 8014ab6:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8014ab8:	683b      	ldr	r3, [r7, #0]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	330c      	adds	r3, #12
 8014abe:	461a      	mov	r2, r3
 8014ac0:	6839      	ldr	r1, [r7, #0]
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f002 fcae 	bl	8017424 <tcpip_send_msg_wait_sem>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8014acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d103      	bne.n	8014adc <netconn_apimsg+0x34>
    return apimsg->err;
 8014ad4:	683b      	ldr	r3, [r7, #0]
 8014ad6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014ada:	e001      	b.n	8014ae0 <netconn_apimsg+0x38>
  }
  return err;
 8014adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	3710      	adds	r7, #16
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}

08014ae8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b08c      	sub	sp, #48	; 0x30
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	4603      	mov	r3, r0
 8014af0:	603a      	str	r2, [r7, #0]
 8014af2:	71fb      	strb	r3, [r7, #7]
 8014af4:	460b      	mov	r3, r1
 8014af6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8014af8:	79fb      	ldrb	r3, [r7, #7]
 8014afa:	6839      	ldr	r1, [r7, #0]
 8014afc:	4618      	mov	r0, r3
 8014afe:	f001 f9a7 	bl	8015e50 <netconn_alloc>
 8014b02:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8014b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d054      	beq.n	8014bb4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8014b0a:	79bb      	ldrb	r3, [r7, #6]
 8014b0c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8014b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b10:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8014b12:	f107 0308 	add.w	r3, r7, #8
 8014b16:	4619      	mov	r1, r3
 8014b18:	4829      	ldr	r0, [pc, #164]	; (8014bc0 <netconn_new_with_proto_and_callback+0xd8>)
 8014b1a:	f7ff ffc5 	bl	8014aa8 <netconn_apimsg>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8014b24:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d043      	beq.n	8014bb4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8014b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b2e:	685b      	ldr	r3, [r3, #4]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d005      	beq.n	8014b40 <netconn_new_with_proto_and_callback+0x58>
 8014b34:	4b23      	ldr	r3, [pc, #140]	; (8014bc4 <netconn_new_with_proto_and_callback+0xdc>)
 8014b36:	22a3      	movs	r2, #163	; 0xa3
 8014b38:	4923      	ldr	r1, [pc, #140]	; (8014bc8 <netconn_new_with_proto_and_callback+0xe0>)
 8014b3a:	4824      	ldr	r0, [pc, #144]	; (8014bcc <netconn_new_with_proto_and_callback+0xe4>)
 8014b3c:	f00f fa44 	bl	8023fc8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8014b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b42:	3310      	adds	r3, #16
 8014b44:	4618      	mov	r0, r3
 8014b46:	f00e fd71 	bl	802362c <sys_mbox_valid>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d105      	bne.n	8014b5c <netconn_new_with_proto_and_callback+0x74>
 8014b50:	4b1c      	ldr	r3, [pc, #112]	; (8014bc4 <netconn_new_with_proto_and_callback+0xdc>)
 8014b52:	22a4      	movs	r2, #164	; 0xa4
 8014b54:	491e      	ldr	r1, [pc, #120]	; (8014bd0 <netconn_new_with_proto_and_callback+0xe8>)
 8014b56:	481d      	ldr	r0, [pc, #116]	; (8014bcc <netconn_new_with_proto_and_callback+0xe4>)
 8014b58:	f00f fa36 	bl	8023fc8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8014b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b5e:	3314      	adds	r3, #20
 8014b60:	4618      	mov	r0, r3
 8014b62:	f00e fd63 	bl	802362c <sys_mbox_valid>
 8014b66:	4603      	mov	r3, r0
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d005      	beq.n	8014b78 <netconn_new_with_proto_and_callback+0x90>
 8014b6c:	4b15      	ldr	r3, [pc, #84]	; (8014bc4 <netconn_new_with_proto_and_callback+0xdc>)
 8014b6e:	22a6      	movs	r2, #166	; 0xa6
 8014b70:	4918      	ldr	r1, [pc, #96]	; (8014bd4 <netconn_new_with_proto_and_callback+0xec>)
 8014b72:	4816      	ldr	r0, [pc, #88]	; (8014bcc <netconn_new_with_proto_and_callback+0xe4>)
 8014b74:	f00f fa28 	bl	8023fc8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8014b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b7a:	330c      	adds	r3, #12
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	f00e fe0f 	bl	80237a0 <sys_sem_valid>
 8014b82:	4603      	mov	r3, r0
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d105      	bne.n	8014b94 <netconn_new_with_proto_and_callback+0xac>
 8014b88:	4b0e      	ldr	r3, [pc, #56]	; (8014bc4 <netconn_new_with_proto_and_callback+0xdc>)
 8014b8a:	22a9      	movs	r2, #169	; 0xa9
 8014b8c:	4912      	ldr	r1, [pc, #72]	; (8014bd8 <netconn_new_with_proto_and_callback+0xf0>)
 8014b8e:	480f      	ldr	r0, [pc, #60]	; (8014bcc <netconn_new_with_proto_and_callback+0xe4>)
 8014b90:	f00f fa1a 	bl	8023fc8 <iprintf>
      sys_sem_free(&conn->op_completed);
 8014b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b96:	330c      	adds	r3, #12
 8014b98:	4618      	mov	r0, r3
 8014b9a:	f00e fde9 	bl	8023770 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8014b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ba0:	3310      	adds	r3, #16
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f00e fcae 	bl	8023504 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8014ba8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014baa:	2007      	movs	r0, #7
 8014bac:	f003 fb9e 	bl	80182ec <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	e000      	b.n	8014bb6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8014bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	3730      	adds	r7, #48	; 0x30
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	bd80      	pop	{r7, pc}
 8014bbe:	bf00      	nop
 8014bc0:	08015e25 	.word	0x08015e25
 8014bc4:	08025720 	.word	0x08025720
 8014bc8:	08025754 	.word	0x08025754
 8014bcc:	08025778 	.word	0x08025778
 8014bd0:	080257a0 	.word	0x080257a0
 8014bd4:	080257b8 	.word	0x080257b8
 8014bd8:	080257dc 	.word	0x080257dc

08014bdc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b08c      	sub	sp, #48	; 0x30
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d101      	bne.n	8014bee <netconn_prepare_delete+0x12>
    return ERR_OK;
 8014bea:	2300      	movs	r3, #0
 8014bec:	e014      	b.n	8014c18 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8014bf2:	2329      	movs	r3, #41	; 0x29
 8014bf4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8014bf6:	f107 030c 	add.w	r3, r7, #12
 8014bfa:	4619      	mov	r1, r3
 8014bfc:	4808      	ldr	r0, [pc, #32]	; (8014c20 <netconn_prepare_delete+0x44>)
 8014bfe:	f7ff ff53 	bl	8014aa8 <netconn_apimsg>
 8014c02:	4603      	mov	r3, r0
 8014c04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8014c08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d002      	beq.n	8014c16 <netconn_prepare_delete+0x3a>
    return err;
 8014c10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8014c14:	e000      	b.n	8014c18 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8014c16:	2300      	movs	r3, #0
}
 8014c18:	4618      	mov	r0, r3
 8014c1a:	3730      	adds	r7, #48	; 0x30
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	bd80      	pop	{r7, pc}
 8014c20:	080163a5 	.word	0x080163a5

08014c24 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b084      	sub	sp, #16
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d101      	bne.n	8014c36 <netconn_delete+0x12>
    return ERR_OK;
 8014c32:	2300      	movs	r3, #0
 8014c34:	e00d      	b.n	8014c52 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f7ff ffd0 	bl	8014bdc <netconn_prepare_delete>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8014c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d102      	bne.n	8014c4e <netconn_delete+0x2a>
    netconn_free(conn);
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f001 f979 	bl	8015f40 <netconn_free>
  }
  return err;
 8014c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014c52:	4618      	mov	r0, r3
 8014c54:	3710      	adds	r7, #16
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}
	...

08014c5c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b08e      	sub	sp, #56	; 0x38
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	60f8      	str	r0, [r7, #12]
 8014c64:	60b9      	str	r1, [r7, #8]
 8014c66:	4613      	mov	r3, r2
 8014c68:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d109      	bne.n	8014c84 <netconn_bind+0x28>
 8014c70:	4b11      	ldr	r3, [pc, #68]	; (8014cb8 <netconn_bind+0x5c>)
 8014c72:	f44f 729c 	mov.w	r2, #312	; 0x138
 8014c76:	4911      	ldr	r1, [pc, #68]	; (8014cbc <netconn_bind+0x60>)
 8014c78:	4811      	ldr	r0, [pc, #68]	; (8014cc0 <netconn_bind+0x64>)
 8014c7a:	f00f f9a5 	bl	8023fc8 <iprintf>
 8014c7e:	f06f 030f 	mvn.w	r3, #15
 8014c82:	e015      	b.n	8014cb0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8014c84:	68bb      	ldr	r3, [r7, #8]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d101      	bne.n	8014c8e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8014c8a:	4b0e      	ldr	r3, [pc, #56]	; (8014cc4 <netconn_bind+0x68>)
 8014c8c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8014c92:	68bb      	ldr	r3, [r7, #8]
 8014c94:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8014c96:	88fb      	ldrh	r3, [r7, #6]
 8014c98:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8014c9a:	f107 0314 	add.w	r3, r7, #20
 8014c9e:	4619      	mov	r1, r3
 8014ca0:	4809      	ldr	r0, [pc, #36]	; (8014cc8 <netconn_bind+0x6c>)
 8014ca2:	f7ff ff01 	bl	8014aa8 <netconn_apimsg>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8014cac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	3738      	adds	r7, #56	; 0x38
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}
 8014cb8:	08025720 	.word	0x08025720
 8014cbc:	08025858 	.word	0x08025858
 8014cc0:	08025778 	.word	0x08025778
 8014cc4:	08029b34 	.word	0x08029b34
 8014cc8:	08016571 	.word	0x08016571

08014ccc <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b08e      	sub	sp, #56	; 0x38
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	60f8      	str	r0, [r7, #12]
 8014cd4:	60b9      	str	r1, [r7, #8]
 8014cd6:	4613      	mov	r3, r2
 8014cd8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d109      	bne.n	8014cf4 <netconn_connect+0x28>
 8014ce0:	4b11      	ldr	r3, [pc, #68]	; (8014d28 <netconn_connect+0x5c>)
 8014ce2:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8014ce6:	4911      	ldr	r1, [pc, #68]	; (8014d2c <netconn_connect+0x60>)
 8014ce8:	4811      	ldr	r0, [pc, #68]	; (8014d30 <netconn_connect+0x64>)
 8014cea:	f00f f96d 	bl	8023fc8 <iprintf>
 8014cee:	f06f 030f 	mvn.w	r3, #15
 8014cf2:	e015      	b.n	8014d20 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8014cf4:	68bb      	ldr	r3, [r7, #8]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d101      	bne.n	8014cfe <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8014cfa:	4b0e      	ldr	r3, [pc, #56]	; (8014d34 <netconn_connect+0x68>)
 8014cfc:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8014d02:	68bb      	ldr	r3, [r7, #8]
 8014d04:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8014d06:	88fb      	ldrh	r3, [r7, #6]
 8014d08:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8014d0a:	f107 0314 	add.w	r3, r7, #20
 8014d0e:	4619      	mov	r1, r3
 8014d10:	4809      	ldr	r0, [pc, #36]	; (8014d38 <netconn_connect+0x6c>)
 8014d12:	f7ff fec9 	bl	8014aa8 <netconn_apimsg>
 8014d16:	4603      	mov	r3, r0
 8014d18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8014d1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8014d20:	4618      	mov	r0, r3
 8014d22:	3738      	adds	r7, #56	; 0x38
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd80      	pop	{r7, pc}
 8014d28:	08025720 	.word	0x08025720
 8014d2c:	08025894 	.word	0x08025894
 8014d30:	08025778 	.word	0x08025778
 8014d34:	08029b34 	.word	0x08029b34
 8014d38:	0801670d 	.word	0x0801670d

08014d3c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b08c      	sub	sp, #48	; 0x30
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
 8014d44:	460b      	mov	r3, r1
 8014d46:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d109      	bne.n	8014d62 <netconn_listen_with_backlog+0x26>
 8014d4e:	4b0d      	ldr	r3, [pc, #52]	; (8014d84 <netconn_listen_with_backlog+0x48>)
 8014d50:	f240 12bb 	movw	r2, #443	; 0x1bb
 8014d54:	490c      	ldr	r1, [pc, #48]	; (8014d88 <netconn_listen_with_backlog+0x4c>)
 8014d56:	480d      	ldr	r0, [pc, #52]	; (8014d8c <netconn_listen_with_backlog+0x50>)
 8014d58:	f00f f936 	bl	8023fc8 <iprintf>
 8014d5c:	f06f 030f 	mvn.w	r3, #15
 8014d60:	e00c      	b.n	8014d7c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8014d66:	f107 030c 	add.w	r3, r7, #12
 8014d6a:	4619      	mov	r1, r3
 8014d6c:	4808      	ldr	r0, [pc, #32]	; (8014d90 <netconn_listen_with_backlog+0x54>)
 8014d6e:	f7ff fe9b 	bl	8014aa8 <netconn_apimsg>
 8014d72:	4603      	mov	r3, r0
 8014d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8014d78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	3730      	adds	r7, #48	; 0x30
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bd80      	pop	{r7, pc}
 8014d84:	08025720 	.word	0x08025720
 8014d88:	080258d8 	.word	0x080258d8
 8014d8c:	08025778 	.word	0x08025778
 8014d90:	08016895 	.word	0x08016895

08014d94 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8014d94:	b580      	push	{r7, lr}
 8014d96:	b086      	sub	sp, #24
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
 8014d9c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8014d9e:	683b      	ldr	r3, [r7, #0]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d109      	bne.n	8014db8 <netconn_accept+0x24>
 8014da4:	4b3e      	ldr	r3, [pc, #248]	; (8014ea0 <netconn_accept+0x10c>)
 8014da6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8014daa:	493e      	ldr	r1, [pc, #248]	; (8014ea4 <netconn_accept+0x110>)
 8014dac:	483e      	ldr	r0, [pc, #248]	; (8014ea8 <netconn_accept+0x114>)
 8014dae:	f00f f90b 	bl	8023fc8 <iprintf>
 8014db2:	f06f 030f 	mvn.w	r3, #15
 8014db6:	e06e      	b.n	8014e96 <netconn_accept+0x102>
  *new_conn = NULL;
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	2200      	movs	r2, #0
 8014dbc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d109      	bne.n	8014dd8 <netconn_accept+0x44>
 8014dc4:	4b36      	ldr	r3, [pc, #216]	; (8014ea0 <netconn_accept+0x10c>)
 8014dc6:	f240 12e3 	movw	r2, #483	; 0x1e3
 8014dca:	4938      	ldr	r1, [pc, #224]	; (8014eac <netconn_accept+0x118>)
 8014dcc:	4836      	ldr	r0, [pc, #216]	; (8014ea8 <netconn_accept+0x114>)
 8014dce:	f00f f8fb 	bl	8023fc8 <iprintf>
 8014dd2:	f06f 030f 	mvn.w	r3, #15
 8014dd6:	e05e      	b.n	8014e96 <netconn_accept+0x102>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8014dd8:	6878      	ldr	r0, [r7, #4]
 8014dda:	f000 fb84 	bl	80154e6 <netconn_err>
 8014dde:	4603      	mov	r3, r0
 8014de0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8014de2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d002      	beq.n	8014df0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8014dea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014dee:	e052      	b.n	8014e96 <netconn_accept+0x102>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	3314      	adds	r3, #20
 8014df4:	4618      	mov	r0, r3
 8014df6:	f00e fc19 	bl	802362c <sys_mbox_valid>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d006      	beq.n	8014e0e <netconn_accept+0x7a>
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014e06:	f003 0301 	and.w	r3, r3, #1
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d002      	beq.n	8014e14 <netconn_accept+0x80>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8014e0e:	f06f 030e 	mvn.w	r3, #14
 8014e12:	e040      	b.n	8014e96 <netconn_accept+0x102>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014e1a:	f003 0302 	and.w	r3, r3, #2
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d00e      	beq.n	8014e40 <netconn_accept+0xac>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	3314      	adds	r3, #20
 8014e26:	f107 020c 	add.w	r2, r7, #12
 8014e2a:	4611      	mov	r1, r2
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f00e fbe6 	bl	80235fe <sys_arch_mbox_tryfetch>
 8014e32:	4603      	mov	r3, r0
 8014e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e38:	d10a      	bne.n	8014e50 <netconn_accept+0xbc>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8014e3a:	f06f 0306 	mvn.w	r3, #6
 8014e3e:	e02a      	b.n	8014e96 <netconn_accept+0x102>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	3314      	adds	r3, #20
 8014e44:	f107 010c 	add.w	r1, r7, #12
 8014e48:	2200      	movs	r2, #0
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f00e fba6 	bl	802359c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d005      	beq.n	8014e64 <netconn_accept+0xd0>
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	2101      	movs	r1, #1
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	f107 0213 	add.w	r2, r7, #19
 8014e6a:	4611      	mov	r1, r2
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f000 fb8b 	bl	8015588 <lwip_netconn_is_err_msg>
 8014e72:	4603      	mov	r3, r0
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d002      	beq.n	8014e7e <netconn_accept+0xea>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8014e78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014e7c:	e00b      	b.n	8014e96 <netconn_accept+0x102>
  }
  if (accept_ptr == NULL) {
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d102      	bne.n	8014e8a <netconn_accept+0xf6>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8014e84:	f06f 030e 	mvn.w	r3, #14
 8014e88:	e005      	b.n	8014e96 <netconn_accept+0x102>
  }
  newconn = (struct netconn *)accept_ptr;
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	697a      	ldr	r2, [r7, #20]
 8014e92:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8014e94:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3718      	adds	r7, #24
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}
 8014e9e:	bf00      	nop
 8014ea0:	08025720 	.word	0x08025720
 8014ea4:	080258f8 	.word	0x080258f8
 8014ea8:	08025778 	.word	0x08025778
 8014eac:	08025918 	.word	0x08025918

08014eb0 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b08a      	sub	sp, #40	; 0x28
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	60f8      	str	r0, [r7, #12]
 8014eb8:	60b9      	str	r1, [r7, #8]
 8014eba:	4613      	mov	r3, r2
 8014ebc:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d109      	bne.n	8014edc <netconn_recv_data+0x2c>
 8014ec8:	4b60      	ldr	r3, [pc, #384]	; (801504c <netconn_recv_data+0x19c>)
 8014eca:	f44f 7212 	mov.w	r2, #584	; 0x248
 8014ece:	4960      	ldr	r1, [pc, #384]	; (8015050 <netconn_recv_data+0x1a0>)
 8014ed0:	4860      	ldr	r0, [pc, #384]	; (8015054 <netconn_recv_data+0x1a4>)
 8014ed2:	f00f f879 	bl	8023fc8 <iprintf>
 8014ed6:	f06f 030f 	mvn.w	r3, #15
 8014eda:	e0b2      	b.n	8015042 <netconn_recv_data+0x192>
  *new_buf = NULL;
 8014edc:	68bb      	ldr	r3, [r7, #8]
 8014ede:	2200      	movs	r2, #0
 8014ee0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d109      	bne.n	8014efc <netconn_recv_data+0x4c>
 8014ee8:	4b58      	ldr	r3, [pc, #352]	; (801504c <netconn_recv_data+0x19c>)
 8014eea:	f240 224a 	movw	r2, #586	; 0x24a
 8014eee:	495a      	ldr	r1, [pc, #360]	; (8015058 <netconn_recv_data+0x1a8>)
 8014ef0:	4858      	ldr	r0, [pc, #352]	; (8015054 <netconn_recv_data+0x1a4>)
 8014ef2:	f00f f869 	bl	8023fc8 <iprintf>
 8014ef6:	f06f 030f 	mvn.w	r3, #15
 8014efa:	e0a2      	b.n	8015042 <netconn_recv_data+0x192>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	3310      	adds	r3, #16
 8014f00:	4618      	mov	r0, r3
 8014f02:	f00e fb93 	bl	802362c <sys_mbox_valid>
 8014f06:	4603      	mov	r3, r0
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d10e      	bne.n	8014f2a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8014f0c:	68f8      	ldr	r0, [r7, #12]
 8014f0e:	f000 faea 	bl	80154e6 <netconn_err>
 8014f12:	4603      	mov	r3, r0
 8014f14:	77fb      	strb	r3, [r7, #31]
    if (err != ERR_OK) {
 8014f16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d002      	beq.n	8014f24 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8014f1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014f22:	e08e      	b.n	8015042 <netconn_recv_data+0x192>
    }
    return ERR_CONN;
 8014f24:	f06f 030a 	mvn.w	r3, #10
 8014f28:	e08b      	b.n	8015042 <netconn_recv_data+0x192>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014f30:	f003 0302 	and.w	r3, r3, #2
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d110      	bne.n	8014f5a <netconn_recv_data+0xaa>
 8014f38:	79fb      	ldrb	r3, [r7, #7]
 8014f3a:	f003 0304 	and.w	r3, r3, #4
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d10b      	bne.n	8014f5a <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014f48:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d104      	bne.n	8014f5a <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d025      	beq.n	8014fa6 <netconn_recv_data+0xf6>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	3310      	adds	r3, #16
 8014f5e:	f107 0218 	add.w	r2, r7, #24
 8014f62:	4611      	mov	r1, r2
 8014f64:	4618      	mov	r0, r3
 8014f66:	f00e fb4a 	bl	80235fe <sys_arch_mbox_tryfetch>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f70:	d121      	bne.n	8014fb6 <netconn_recv_data+0x106>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8014f72:	68f8      	ldr	r0, [r7, #12]
 8014f74:	f000 fab7 	bl	80154e6 <netconn_err>
 8014f78:	4603      	mov	r3, r0
 8014f7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      if (err != ERR_OK) {
 8014f7e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d002      	beq.n	8014f8c <netconn_recv_data+0xdc>
        /* return pending error */
        return err;
 8014f86:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014f8a:	e05a      	b.n	8015042 <netconn_recv_data+0x192>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014f92:	f003 0301 	and.w	r3, r3, #1
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d002      	beq.n	8014fa0 <netconn_recv_data+0xf0>
        return ERR_CONN;
 8014f9a:	f06f 030a 	mvn.w	r3, #10
 8014f9e:	e050      	b.n	8015042 <netconn_recv_data+0x192>
      }
      return ERR_WOULDBLOCK;
 8014fa0:	f06f 0306 	mvn.w	r3, #6
 8014fa4:	e04d      	b.n	8015042 <netconn_recv_data+0x192>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	3310      	adds	r3, #16
 8014faa:	f107 0118 	add.w	r1, r7, #24
 8014fae:	2200      	movs	r2, #0
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f00e faf3 	bl	802359c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	781b      	ldrb	r3, [r3, #0]
 8014fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014fbe:	2b10      	cmp	r3, #16
 8014fc0:	d117      	bne.n	8014ff2 <netconn_recv_data+0x142>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8014fc2:	69bb      	ldr	r3, [r7, #24]
 8014fc4:	f107 0217 	add.w	r2, r7, #23
 8014fc8:	4611      	mov	r1, r2
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f000 fadc 	bl	8015588 <lwip_netconn_is_err_msg>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d009      	beq.n	8014fea <netconn_recv_data+0x13a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8014fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014fda:	f113 0f0f 	cmn.w	r3, #15
 8014fde:	d101      	bne.n	8014fe4 <netconn_recv_data+0x134>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	e02e      	b.n	8015042 <netconn_recv_data+0x192>
      }
      return err;
 8014fe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014fe8:	e02b      	b.n	8015042 <netconn_recv_data+0x192>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8014fea:	69bb      	ldr	r3, [r7, #24]
 8014fec:	891b      	ldrh	r3, [r3, #8]
 8014fee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014ff0:	e00d      	b.n	801500e <netconn_recv_data+0x15e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8014ff2:	69bb      	ldr	r3, [r7, #24]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d106      	bne.n	8015006 <netconn_recv_data+0x156>
 8014ff8:	4b14      	ldr	r3, [pc, #80]	; (801504c <netconn_recv_data+0x19c>)
 8014ffa:	f240 2291 	movw	r2, #657	; 0x291
 8014ffe:	4917      	ldr	r1, [pc, #92]	; (801505c <netconn_recv_data+0x1ac>)
 8015000:	4814      	ldr	r0, [pc, #80]	; (8015054 <netconn_recv_data+0x1a4>)
 8015002:	f00e ffe1 	bl	8023fc8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8015006:	69bb      	ldr	r3, [r7, #24]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	891b      	ldrh	r3, [r3, #8]
 801500c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
 801500e:	f00e fc63 	bl	80238d8 <sys_arch_protect>
 8015012:	6238      	str	r0, [r7, #32]
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	6a1a      	ldr	r2, [r3, #32]
 8015018:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801501a:	1ad2      	subs	r2, r2, r3
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	621a      	str	r2, [r3, #32]
 8015020:	6a38      	ldr	r0, [r7, #32]
 8015022:	f00e fc67 	bl	80238f4 <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801502a:	2b00      	cmp	r3, #0
 801502c:	d005      	beq.n	801503a <netconn_recv_data+0x18a>
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015032:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015034:	2101      	movs	r1, #1
 8015036:	68f8      	ldr	r0, [r7, #12]
 8015038:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801503a:	69ba      	ldr	r2, [r7, #24]
 801503c:	68bb      	ldr	r3, [r7, #8]
 801503e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8015040:	2300      	movs	r3, #0
}
 8015042:	4618      	mov	r0, r3
 8015044:	3728      	adds	r7, #40	; 0x28
 8015046:	46bd      	mov	sp, r7
 8015048:	bd80      	pop	{r7, pc}
 801504a:	bf00      	nop
 801504c:	08025720 	.word	0x08025720
 8015050:	08025938 	.word	0x08025938
 8015054:	08025778 	.word	0x08025778
 8015058:	08025958 	.word	0x08025958
 801505c:	08025974 	.word	0x08025974

08015060 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b084      	sub	sp, #16
 8015064:	af00      	add	r7, sp, #0
 8015066:	60f8      	str	r0, [r7, #12]
 8015068:	60b9      	str	r1, [r7, #8]
 801506a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d005      	beq.n	801507e <netconn_tcp_recvd_msg+0x1e>
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	781b      	ldrb	r3, [r3, #0]
 8015076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801507a:	2b10      	cmp	r3, #16
 801507c:	d009      	beq.n	8015092 <netconn_tcp_recvd_msg+0x32>
 801507e:	4b0c      	ldr	r3, [pc, #48]	; (80150b0 <netconn_tcp_recvd_msg+0x50>)
 8015080:	f240 22a7 	movw	r2, #679	; 0x2a7
 8015084:	490b      	ldr	r1, [pc, #44]	; (80150b4 <netconn_tcp_recvd_msg+0x54>)
 8015086:	480c      	ldr	r0, [pc, #48]	; (80150b8 <netconn_tcp_recvd_msg+0x58>)
 8015088:	f00e ff9e 	bl	8023fc8 <iprintf>
 801508c:	f06f 030f 	mvn.w	r3, #15
 8015090:	e00a      	b.n	80150a8 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	68fa      	ldr	r2, [r7, #12]
 8015096:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	68ba      	ldr	r2, [r7, #8]
 801509c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 801509e:	6879      	ldr	r1, [r7, #4]
 80150a0:	4806      	ldr	r0, [pc, #24]	; (80150bc <netconn_tcp_recvd_msg+0x5c>)
 80150a2:	f7ff fd01 	bl	8014aa8 <netconn_apimsg>
 80150a6:	4603      	mov	r3, r0
}
 80150a8:	4618      	mov	r0, r3
 80150aa:	3710      	adds	r7, #16
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd80      	pop	{r7, pc}
 80150b0:	08025720 	.word	0x08025720
 80150b4:	08025980 	.word	0x08025980
 80150b8:	08025778 	.word	0x08025778
 80150bc:	080169c5 	.word	0x080169c5

080150c0 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b090      	sub	sp, #64	; 0x40
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	60f8      	str	r0, [r7, #12]
 80150c8:	60b9      	str	r1, [r7, #8]
 80150ca:	4613      	mov	r3, r2
 80150cc:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	3310      	adds	r3, #16
 80150d2:	4618      	mov	r0, r3
 80150d4:	f00e faaa 	bl	802362c <sys_mbox_valid>
 80150d8:	4603      	mov	r3, r0
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d102      	bne.n	80150e4 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80150de:	f06f 030a 	mvn.w	r3, #10
 80150e2:	e072      	b.n	80151ca <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80150ea:	b25b      	sxtb	r3, r3
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	da09      	bge.n	8015104 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80150f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150fa:	b2da      	uxtb	r2, r3
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    goto handle_fin;
 8015102:	e03b      	b.n	801517c <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8015104:	79fb      	ldrb	r3, [r7, #7]
 8015106:	461a      	mov	r2, r3
 8015108:	68b9      	ldr	r1, [r7, #8]
 801510a:	68f8      	ldr	r0, [r7, #12]
 801510c:	f7ff fed0 	bl	8014eb0 <netconn_recv_data>
 8015110:	4603      	mov	r3, r0
 8015112:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8015116:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801511a:	2b00      	cmp	r3, #0
 801511c:	d002      	beq.n	8015124 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 801511e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8015122:	e052      	b.n	80151ca <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 8015124:	68bb      	ldr	r3, [r7, #8]
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 801512a:	79fb      	ldrb	r3, [r7, #7]
 801512c:	f003 0308 	and.w	r3, r3, #8
 8015130:	2b00      	cmp	r3, #0
 8015132:	d10e      	bne.n	8015152 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8015134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015136:	2b00      	cmp	r3, #0
 8015138:	d002      	beq.n	8015140 <netconn_recv_data_tcp+0x80>
 801513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801513c:	891b      	ldrh	r3, [r3, #8]
 801513e:	e000      	b.n	8015142 <netconn_recv_data_tcp+0x82>
 8015140:	2301      	movs	r3, #1
 8015142:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8015144:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015146:	f107 0214 	add.w	r2, r7, #20
 801514a:	4619      	mov	r1, r3
 801514c:	68f8      	ldr	r0, [r7, #12]
 801514e:	f7ff ff87 	bl	8015060 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8015152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015154:	2b00      	cmp	r3, #0
 8015156:	d136      	bne.n	80151c6 <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 8015158:	79fb      	ldrb	r3, [r7, #7]
 801515a:	f003 0310 	and.w	r3, r3, #16
 801515e:	2b00      	cmp	r3, #0
 8015160:	d00b      	beq.n	801517a <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015168:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801516c:	b2da      	uxtb	r2, r3
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return ERR_WOULDBLOCK;
 8015174:	f06f 0306 	mvn.w	r3, #6
 8015178:	e027      	b.n	80151ca <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 801517a:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015180:	2b00      	cmp	r3, #0
 8015182:	d005      	beq.n	8015190 <netconn_recv_data_tcp+0xd0>
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015188:	2200      	movs	r2, #0
 801518a:	2101      	movs	r1, #1
 801518c:	68f8      	ldr	r0, [r7, #12]
 801518e:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	685b      	ldr	r3, [r3, #4]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d10f      	bne.n	80151b8 <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8015198:	68f8      	ldr	r0, [r7, #12]
 801519a:	f000 f9a4 	bl	80154e6 <netconn_err>
 801519e:	4603      	mov	r3, r0
 80151a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80151a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d002      	beq.n	80151b2 <netconn_recv_data_tcp+0xf2>
          return err;
 80151ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80151b0:	e00b      	b.n	80151ca <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 80151b2:	f06f 030d 	mvn.w	r3, #13
 80151b6:	e008      	b.n	80151ca <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80151b8:	2101      	movs	r1, #1
 80151ba:	68f8      	ldr	r0, [r7, #12]
 80151bc:	f000 f956 	bl	801546c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80151c0:	f06f 030e 	mvn.w	r3, #14
 80151c4:	e001      	b.n	80151ca <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 80151c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80151ca:	4618      	mov	r0, r3
 80151cc:	3740      	adds	r7, #64	; 0x40
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}
	...

080151d4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b086      	sub	sp, #24
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
 80151dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80151de:	2300      	movs	r3, #0
 80151e0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80151e2:	683b      	ldr	r3, [r7, #0]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d109      	bne.n	80151fc <netconn_recv+0x28>
 80151e8:	4b32      	ldr	r3, [pc, #200]	; (80152b4 <netconn_recv+0xe0>)
 80151ea:	f240 3263 	movw	r2, #867	; 0x363
 80151ee:	4932      	ldr	r1, [pc, #200]	; (80152b8 <netconn_recv+0xe4>)
 80151f0:	4832      	ldr	r0, [pc, #200]	; (80152bc <netconn_recv+0xe8>)
 80151f2:	f00e fee9 	bl	8023fc8 <iprintf>
 80151f6:	f06f 030f 	mvn.w	r3, #15
 80151fa:	e056      	b.n	80152aa <netconn_recv+0xd6>
  *new_buf = NULL;
 80151fc:	683b      	ldr	r3, [r7, #0]
 80151fe:	2200      	movs	r2, #0
 8015200:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d109      	bne.n	801521c <netconn_recv+0x48>
 8015208:	4b2a      	ldr	r3, [pc, #168]	; (80152b4 <netconn_recv+0xe0>)
 801520a:	f240 3265 	movw	r2, #869	; 0x365
 801520e:	492c      	ldr	r1, [pc, #176]	; (80152c0 <netconn_recv+0xec>)
 8015210:	482a      	ldr	r0, [pc, #168]	; (80152bc <netconn_recv+0xe8>)
 8015212:	f00e fed9 	bl	8023fc8 <iprintf>
 8015216:	f06f 030f 	mvn.w	r3, #15
 801521a:	e046      	b.n	80152aa <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	781b      	ldrb	r3, [r3, #0]
 8015220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015224:	2b10      	cmp	r3, #16
 8015226:	d13a      	bne.n	801529e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8015228:	2300      	movs	r3, #0
 801522a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801522c:	2006      	movs	r0, #6
 801522e:	f002 ffe1 	bl	80181f4 <memp_malloc>
 8015232:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8015234:	697b      	ldr	r3, [r7, #20]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d102      	bne.n	8015240 <netconn_recv+0x6c>
      return ERR_MEM;
 801523a:	f04f 33ff 	mov.w	r3, #4294967295
 801523e:	e034      	b.n	80152aa <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8015240:	f107 030c 	add.w	r3, r7, #12
 8015244:	2200      	movs	r2, #0
 8015246:	4619      	mov	r1, r3
 8015248:	6878      	ldr	r0, [r7, #4]
 801524a:	f7ff ff39 	bl	80150c0 <netconn_recv_data_tcp>
 801524e:	4603      	mov	r3, r0
 8015250:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8015252:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d006      	beq.n	8015268 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 801525a:	6979      	ldr	r1, [r7, #20]
 801525c:	2006      	movs	r0, #6
 801525e:	f003 f845 	bl	80182ec <memp_free>
      return err;
 8015262:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015266:	e020      	b.n	80152aa <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d106      	bne.n	801527c <netconn_recv+0xa8>
 801526e:	4b11      	ldr	r3, [pc, #68]	; (80152b4 <netconn_recv+0xe0>)
 8015270:	f240 3279 	movw	r2, #889	; 0x379
 8015274:	4913      	ldr	r1, [pc, #76]	; (80152c4 <netconn_recv+0xf0>)
 8015276:	4811      	ldr	r0, [pc, #68]	; (80152bc <netconn_recv+0xe8>)
 8015278:	f00e fea6 	bl	8023fc8 <iprintf>

    buf->p = p;
 801527c:	68fa      	ldr	r2, [r7, #12]
 801527e:	697b      	ldr	r3, [r7, #20]
 8015280:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8015282:	68fa      	ldr	r2, [r7, #12]
 8015284:	697b      	ldr	r3, [r7, #20]
 8015286:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8015288:	697b      	ldr	r3, [r7, #20]
 801528a:	2200      	movs	r2, #0
 801528c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 801528e:	697b      	ldr	r3, [r7, #20]
 8015290:	2200      	movs	r2, #0
 8015292:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8015294:	683b      	ldr	r3, [r7, #0]
 8015296:	697a      	ldr	r2, [r7, #20]
 8015298:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 801529a:	2300      	movs	r3, #0
 801529c:	e005      	b.n	80152aa <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 801529e:	2200      	movs	r2, #0
 80152a0:	6839      	ldr	r1, [r7, #0]
 80152a2:	6878      	ldr	r0, [r7, #4]
 80152a4:	f7ff fe04 	bl	8014eb0 <netconn_recv_data>
 80152a8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80152aa:	4618      	mov	r0, r3
 80152ac:	3718      	adds	r7, #24
 80152ae:	46bd      	mov	sp, r7
 80152b0:	bd80      	pop	{r7, pc}
 80152b2:	bf00      	nop
 80152b4:	08025720 	.word	0x08025720
 80152b8:	08025938 	.word	0x08025938
 80152bc:	08025778 	.word	0x08025778
 80152c0:	08025958 	.word	0x08025958
 80152c4:	080259d0 	.word	0x080259d0

080152c8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b088      	sub	sp, #32
 80152cc:	af02      	add	r7, sp, #8
 80152ce:	60f8      	str	r0, [r7, #12]
 80152d0:	60b9      	str	r1, [r7, #8]
 80152d2:	607a      	str	r2, [r7, #4]
 80152d4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80152d6:	68bb      	ldr	r3, [r7, #8]
 80152d8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80152de:	78fa      	ldrb	r2, [r7, #3]
 80152e0:	f107 0110 	add.w	r1, r7, #16
 80152e4:	6a3b      	ldr	r3, [r7, #32]
 80152e6:	9300      	str	r3, [sp, #0]
 80152e8:	4613      	mov	r3, r2
 80152ea:	2201      	movs	r2, #1
 80152ec:	68f8      	ldr	r0, [r7, #12]
 80152ee:	f000 f805 	bl	80152fc <netconn_write_vectors_partly>
 80152f2:	4603      	mov	r3, r0
}
 80152f4:	4618      	mov	r0, r3
 80152f6:	3718      	adds	r7, #24
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd80      	pop	{r7, pc}

080152fc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	b092      	sub	sp, #72	; 0x48
 8015300:	af00      	add	r7, sp, #0
 8015302:	60f8      	str	r0, [r7, #12]
 8015304:	60b9      	str	r1, [r7, #8]
 8015306:	4611      	mov	r1, r2
 8015308:	461a      	mov	r2, r3
 801530a:	460b      	mov	r3, r1
 801530c:	80fb      	strh	r3, [r7, #6]
 801530e:	4613      	mov	r3, r2
 8015310:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d109      	bne.n	801532c <netconn_write_vectors_partly+0x30>
 8015318:	4b4e      	ldr	r3, [pc, #312]	; (8015454 <netconn_write_vectors_partly+0x158>)
 801531a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801531e:	494e      	ldr	r1, [pc, #312]	; (8015458 <netconn_write_vectors_partly+0x15c>)
 8015320:	484e      	ldr	r0, [pc, #312]	; (801545c <netconn_write_vectors_partly+0x160>)
 8015322:	f00e fe51 	bl	8023fc8 <iprintf>
 8015326:	f06f 030f 	mvn.w	r3, #15
 801532a:	e08f      	b.n	801544c <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	781b      	ldrb	r3, [r3, #0]
 8015330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015334:	2b10      	cmp	r3, #16
 8015336:	d009      	beq.n	801534c <netconn_write_vectors_partly+0x50>
 8015338:	4b46      	ldr	r3, [pc, #280]	; (8015454 <netconn_write_vectors_partly+0x158>)
 801533a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 801533e:	4948      	ldr	r1, [pc, #288]	; (8015460 <netconn_write_vectors_partly+0x164>)
 8015340:	4846      	ldr	r0, [pc, #280]	; (801545c <netconn_write_vectors_partly+0x160>)
 8015342:	f00e fe41 	bl	8023fc8 <iprintf>
 8015346:	f06f 0305 	mvn.w	r3, #5
 801534a:	e07f      	b.n	801544c <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015352:	f003 0302 	and.w	r3, r3, #2
 8015356:	2b00      	cmp	r3, #0
 8015358:	d104      	bne.n	8015364 <netconn_write_vectors_partly+0x68>
 801535a:	797b      	ldrb	r3, [r7, #5]
 801535c:	f003 0304 	and.w	r3, r3, #4
 8015360:	2b00      	cmp	r3, #0
 8015362:	d001      	beq.n	8015368 <netconn_write_vectors_partly+0x6c>
 8015364:	2301      	movs	r3, #1
 8015366:	e000      	b.n	801536a <netconn_write_vectors_partly+0x6e>
 8015368:	2300      	movs	r3, #0
 801536a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 801536e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015372:	2b00      	cmp	r3, #0
 8015374:	d005      	beq.n	8015382 <netconn_write_vectors_partly+0x86>
 8015376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015378:	2b00      	cmp	r3, #0
 801537a:	d102      	bne.n	8015382 <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 801537c:	f06f 0305 	mvn.w	r3, #5
 8015380:	e064      	b.n	801544c <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 8015382:	2300      	movs	r3, #0
 8015384:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8015386:	2300      	movs	r3, #0
 8015388:	643b      	str	r3, [r7, #64]	; 0x40
 801538a:	e015      	b.n	80153b8 <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 801538c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801538e:	00db      	lsls	r3, r3, #3
 8015390:	68ba      	ldr	r2, [r7, #8]
 8015392:	4413      	add	r3, r2
 8015394:	685b      	ldr	r3, [r3, #4]
 8015396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015398:	4413      	add	r3, r2
 801539a:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 801539c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801539e:	00db      	lsls	r3, r3, #3
 80153a0:	68ba      	ldr	r2, [r7, #8]
 80153a2:	4413      	add	r3, r2
 80153a4:	685b      	ldr	r3, [r3, #4]
 80153a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80153a8:	429a      	cmp	r2, r3
 80153aa:	d202      	bcs.n	80153b2 <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 80153ac:	f06f 0305 	mvn.w	r3, #5
 80153b0:	e04c      	b.n	801544c <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 80153b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80153b4:	3301      	adds	r3, #1
 80153b6:	643b      	str	r3, [r7, #64]	; 0x40
 80153b8:	88fb      	ldrh	r3, [r7, #6]
 80153ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80153bc:	429a      	cmp	r2, r3
 80153be:	dbe5      	blt.n	801538c <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 80153c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d101      	bne.n	80153ca <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 80153c6:	2300      	movs	r3, #0
 80153c8:	e040      	b.n	801544c <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 80153ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	da0a      	bge.n	80153e6 <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80153d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d102      	bne.n	80153dc <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 80153d6:	f06f 0305 	mvn.w	r3, #5
 80153da:	e037      	b.n	801544c <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80153dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80153e0:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80153e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153e4:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80153ee:	88fb      	ldrh	r3, [r7, #6]
 80153f0:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80153f2:	2300      	movs	r3, #0
 80153f4:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80153f6:	797b      	ldrb	r3, [r7, #5]
 80153f8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80153fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80153fe:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8015400:	2300      	movs	r3, #0
 8015402:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8015404:	f107 0314 	add.w	r3, r7, #20
 8015408:	4619      	mov	r1, r3
 801540a:	4816      	ldr	r0, [pc, #88]	; (8015464 <netconn_write_vectors_partly+0x168>)
 801540c:	f7ff fb4c 	bl	8014aa8 <netconn_apimsg>
 8015410:	4603      	mov	r3, r0
 8015412:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8015416:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801541a:	2b00      	cmp	r3, #0
 801541c:	d114      	bne.n	8015448 <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 801541e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015420:	2b00      	cmp	r3, #0
 8015422:	d002      	beq.n	801542a <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8015424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015428:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 801542a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801542e:	2b00      	cmp	r3, #0
 8015430:	d10a      	bne.n	8015448 <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8015432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015436:	429a      	cmp	r2, r3
 8015438:	d006      	beq.n	8015448 <netconn_write_vectors_partly+0x14c>
 801543a:	4b06      	ldr	r3, [pc, #24]	; (8015454 <netconn_write_vectors_partly+0x158>)
 801543c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8015440:	4909      	ldr	r1, [pc, #36]	; (8015468 <netconn_write_vectors_partly+0x16c>)
 8015442:	4806      	ldr	r0, [pc, #24]	; (801545c <netconn_write_vectors_partly+0x160>)
 8015444:	f00e fdc0 	bl	8023fc8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8015448:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801544c:	4618      	mov	r0, r3
 801544e:	3748      	adds	r7, #72	; 0x48
 8015450:	46bd      	mov	sp, r7
 8015452:	bd80      	pop	{r7, pc}
 8015454:	08025720 	.word	0x08025720
 8015458:	080259f8 	.word	0x080259f8
 801545c:	08025778 	.word	0x08025778
 8015460:	08025a14 	.word	0x08025a14
 8015464:	08016dd1 	.word	0x08016dd1
 8015468:	08025a38 	.word	0x08025a38

0801546c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b08c      	sub	sp, #48	; 0x30
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
 8015474:	460b      	mov	r3, r1
 8015476:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d109      	bne.n	8015492 <netconn_close_shutdown+0x26>
 801547e:	4b0f      	ldr	r3, [pc, #60]	; (80154bc <netconn_close_shutdown+0x50>)
 8015480:	f240 4247 	movw	r2, #1095	; 0x447
 8015484:	490e      	ldr	r1, [pc, #56]	; (80154c0 <netconn_close_shutdown+0x54>)
 8015486:	480f      	ldr	r0, [pc, #60]	; (80154c4 <netconn_close_shutdown+0x58>)
 8015488:	f00e fd9e 	bl	8023fc8 <iprintf>
 801548c:	f06f 030f 	mvn.w	r3, #15
 8015490:	e010      	b.n	80154b4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8015496:	78fb      	ldrb	r3, [r7, #3]
 8015498:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801549a:	2329      	movs	r3, #41	; 0x29
 801549c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 801549e:	f107 030c 	add.w	r3, r7, #12
 80154a2:	4619      	mov	r1, r3
 80154a4:	4808      	ldr	r0, [pc, #32]	; (80154c8 <netconn_close_shutdown+0x5c>)
 80154a6:	f7ff faff 	bl	8014aa8 <netconn_apimsg>
 80154aa:	4603      	mov	r3, r0
 80154ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80154b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80154b4:	4618      	mov	r0, r3
 80154b6:	3730      	adds	r7, #48	; 0x30
 80154b8:	46bd      	mov	sp, r7
 80154ba:	bd80      	pop	{r7, pc}
 80154bc:	08025720 	.word	0x08025720
 80154c0:	08025a5c 	.word	0x08025a5c
 80154c4:	08025778 	.word	0x08025778
 80154c8:	08016ee9 	.word	0x08016ee9

080154cc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b082      	sub	sp, #8
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80154d4:	2103      	movs	r1, #3
 80154d6:	6878      	ldr	r0, [r7, #4]
 80154d8:	f7ff ffc8 	bl	801546c <netconn_close_shutdown>
 80154dc:	4603      	mov	r3, r0
}
 80154de:	4618      	mov	r0, r3
 80154e0:	3708      	adds	r7, #8
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}

080154e6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80154e6:	b580      	push	{r7, lr}
 80154e8:	b084      	sub	sp, #16
 80154ea:	af00      	add	r7, sp, #0
 80154ec:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d101      	bne.n	80154f8 <netconn_err+0x12>
    return ERR_OK;
 80154f4:	2300      	movs	r3, #0
 80154f6:	e00d      	b.n	8015514 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80154f8:	f00e f9ee 	bl	80238d8 <sys_arch_protect>
 80154fc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	7a1b      	ldrb	r3, [r3, #8]
 8015502:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	2200      	movs	r2, #0
 8015508:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 801550a:	68f8      	ldr	r0, [r7, #12]
 801550c:	f00e f9f2 	bl	80238f4 <sys_arch_unprotect>
  return err;
 8015510:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015514:	4618      	mov	r0, r3
 8015516:	3710      	adds	r7, #16
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}

0801551c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b082      	sub	sp, #8
 8015520:	af00      	add	r7, sp, #0
 8015522:	4603      	mov	r3, r0
 8015524:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8015526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801552a:	f113 0f0d 	cmn.w	r3, #13
 801552e:	d009      	beq.n	8015544 <lwip_netconn_err_to_msg+0x28>
 8015530:	f113 0f0d 	cmn.w	r3, #13
 8015534:	dc0c      	bgt.n	8015550 <lwip_netconn_err_to_msg+0x34>
 8015536:	f113 0f0f 	cmn.w	r3, #15
 801553a:	d007      	beq.n	801554c <lwip_netconn_err_to_msg+0x30>
 801553c:	f113 0f0e 	cmn.w	r3, #14
 8015540:	d002      	beq.n	8015548 <lwip_netconn_err_to_msg+0x2c>
 8015542:	e005      	b.n	8015550 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8015544:	4b0a      	ldr	r3, [pc, #40]	; (8015570 <lwip_netconn_err_to_msg+0x54>)
 8015546:	e00e      	b.n	8015566 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8015548:	4b0a      	ldr	r3, [pc, #40]	; (8015574 <lwip_netconn_err_to_msg+0x58>)
 801554a:	e00c      	b.n	8015566 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 801554c:	4b0a      	ldr	r3, [pc, #40]	; (8015578 <lwip_netconn_err_to_msg+0x5c>)
 801554e:	e00a      	b.n	8015566 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8015550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d005      	beq.n	8015564 <lwip_netconn_err_to_msg+0x48>
 8015558:	4b08      	ldr	r3, [pc, #32]	; (801557c <lwip_netconn_err_to_msg+0x60>)
 801555a:	227d      	movs	r2, #125	; 0x7d
 801555c:	4908      	ldr	r1, [pc, #32]	; (8015580 <lwip_netconn_err_to_msg+0x64>)
 801555e:	4809      	ldr	r0, [pc, #36]	; (8015584 <lwip_netconn_err_to_msg+0x68>)
 8015560:	f00e fd32 	bl	8023fc8 <iprintf>
      return NULL;
 8015564:	2300      	movs	r3, #0
  }
}
 8015566:	4618      	mov	r0, r3
 8015568:	3708      	adds	r7, #8
 801556a:	46bd      	mov	sp, r7
 801556c:	bd80      	pop	{r7, pc}
 801556e:	bf00      	nop
 8015570:	080299b8 	.word	0x080299b8
 8015574:	080299b9 	.word	0x080299b9
 8015578:	080299ba 	.word	0x080299ba
 801557c:	08025a78 	.word	0x08025a78
 8015580:	08025aac 	.word	0x08025aac
 8015584:	08025abc 	.word	0x08025abc

08015588 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8015588:	b580      	push	{r7, lr}
 801558a:	b082      	sub	sp, #8
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
 8015590:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8015592:	683b      	ldr	r3, [r7, #0]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d105      	bne.n	80155a4 <lwip_netconn_is_err_msg+0x1c>
 8015598:	4b12      	ldr	r3, [pc, #72]	; (80155e4 <lwip_netconn_is_err_msg+0x5c>)
 801559a:	2285      	movs	r2, #133	; 0x85
 801559c:	4912      	ldr	r1, [pc, #72]	; (80155e8 <lwip_netconn_is_err_msg+0x60>)
 801559e:	4813      	ldr	r0, [pc, #76]	; (80155ec <lwip_netconn_is_err_msg+0x64>)
 80155a0:	f00e fd12 	bl	8023fc8 <iprintf>

  if (msg == &netconn_aborted) {
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	4a12      	ldr	r2, [pc, #72]	; (80155f0 <lwip_netconn_is_err_msg+0x68>)
 80155a8:	4293      	cmp	r3, r2
 80155aa:	d104      	bne.n	80155b6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80155ac:	683b      	ldr	r3, [r7, #0]
 80155ae:	22f3      	movs	r2, #243	; 0xf3
 80155b0:	701a      	strb	r2, [r3, #0]
    return 1;
 80155b2:	2301      	movs	r3, #1
 80155b4:	e012      	b.n	80155dc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	4a0e      	ldr	r2, [pc, #56]	; (80155f4 <lwip_netconn_is_err_msg+0x6c>)
 80155ba:	4293      	cmp	r3, r2
 80155bc:	d104      	bne.n	80155c8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80155be:	683b      	ldr	r3, [r7, #0]
 80155c0:	22f2      	movs	r2, #242	; 0xf2
 80155c2:	701a      	strb	r2, [r3, #0]
    return 1;
 80155c4:	2301      	movs	r3, #1
 80155c6:	e009      	b.n	80155dc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	4a0b      	ldr	r2, [pc, #44]	; (80155f8 <lwip_netconn_is_err_msg+0x70>)
 80155cc:	4293      	cmp	r3, r2
 80155ce:	d104      	bne.n	80155da <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	22f1      	movs	r2, #241	; 0xf1
 80155d4:	701a      	strb	r2, [r3, #0]
    return 1;
 80155d6:	2301      	movs	r3, #1
 80155d8:	e000      	b.n	80155dc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80155da:	2300      	movs	r3, #0
}
 80155dc:	4618      	mov	r0, r3
 80155de:	3708      	adds	r7, #8
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd80      	pop	{r7, pc}
 80155e4:	08025a78 	.word	0x08025a78
 80155e8:	08025ae4 	.word	0x08025ae4
 80155ec:	08025abc 	.word	0x08025abc
 80155f0:	080299b8 	.word	0x080299b8
 80155f4:	080299b9 	.word	0x080299b9
 80155f8:	080299ba 	.word	0x080299ba

080155fc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b08a      	sub	sp, #40	; 0x28
 8015600:	af00      	add	r7, sp, #0
 8015602:	60f8      	str	r0, [r7, #12]
 8015604:	60b9      	str	r1, [r7, #8]
 8015606:	607a      	str	r2, [r7, #4]
 8015608:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 801560a:	68bb      	ldr	r3, [r7, #8]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d105      	bne.n	801561c <recv_udp+0x20>
 8015610:	4b43      	ldr	r3, [pc, #268]	; (8015720 <recv_udp+0x124>)
 8015612:	22e5      	movs	r2, #229	; 0xe5
 8015614:	4943      	ldr	r1, [pc, #268]	; (8015724 <recv_udp+0x128>)
 8015616:	4844      	ldr	r0, [pc, #272]	; (8015728 <recv_udp+0x12c>)
 8015618:	f00e fcd6 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d105      	bne.n	801562e <recv_udp+0x32>
 8015622:	4b3f      	ldr	r3, [pc, #252]	; (8015720 <recv_udp+0x124>)
 8015624:	22e6      	movs	r2, #230	; 0xe6
 8015626:	4941      	ldr	r1, [pc, #260]	; (801572c <recv_udp+0x130>)
 8015628:	483f      	ldr	r0, [pc, #252]	; (8015728 <recv_udp+0x12c>)
 801562a:	f00e fccd 	bl	8023fc8 <iprintf>
  conn = (struct netconn *)arg;
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	627b      	str	r3, [r7, #36]	; 0x24

  if (conn == NULL) {
 8015632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015634:	2b00      	cmp	r3, #0
 8015636:	d103      	bne.n	8015640 <recv_udp+0x44>
    pbuf_free(p);
 8015638:	6878      	ldr	r0, [r7, #4]
 801563a:	f003 fdf1 	bl	8019220 <pbuf_free>
    return;
 801563e:	e06b      	b.n	8015718 <recv_udp+0x11c>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8015640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015642:	685b      	ldr	r3, [r3, #4]
 8015644:	68ba      	ldr	r2, [r7, #8]
 8015646:	429a      	cmp	r2, r3
 8015648:	d005      	beq.n	8015656 <recv_udp+0x5a>
 801564a:	4b35      	ldr	r3, [pc, #212]	; (8015720 <recv_udp+0x124>)
 801564c:	22ee      	movs	r2, #238	; 0xee
 801564e:	4938      	ldr	r1, [pc, #224]	; (8015730 <recv_udp+0x134>)
 8015650:	4835      	ldr	r0, [pc, #212]	; (8015728 <recv_udp+0x12c>)
 8015652:	f00e fcb9 	bl	8023fc8 <iprintf>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
 8015656:	f00e f93f 	bl	80238d8 <sys_arch_protect>
 801565a:	6238      	str	r0, [r7, #32]
 801565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801565e:	6a1b      	ldr	r3, [r3, #32]
 8015660:	61fb      	str	r3, [r7, #28]
 8015662:	6a38      	ldr	r0, [r7, #32]
 8015664:	f00e f946 	bl	80238f4 <sys_arch_unprotect>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
 8015668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801566a:	3310      	adds	r3, #16
 801566c:	4618      	mov	r0, r3
 801566e:	f00d ffdd 	bl	802362c <sys_mbox_valid>
 8015672:	4603      	mov	r3, r0
 8015674:	2b00      	cmp	r3, #0
 8015676:	d008      	beq.n	801568a <recv_udp+0x8e>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	891b      	ldrh	r3, [r3, #8]
 801567c:	461a      	mov	r2, r3
 801567e:	69fb      	ldr	r3, [r7, #28]
 8015680:	441a      	add	r2, r3
 8015682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015684:	69db      	ldr	r3, [r3, #28]
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
 8015686:	429a      	cmp	r2, r3
 8015688:	dd03      	ble.n	8015692 <recv_udp+0x96>
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	f003 fdc8 	bl	8019220 <pbuf_free>
    return;
 8015690:	e042      	b.n	8015718 <recv_udp+0x11c>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8015692:	2006      	movs	r0, #6
 8015694:	f002 fdae 	bl	80181f4 <memp_malloc>
 8015698:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 801569a:	69bb      	ldr	r3, [r7, #24]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d103      	bne.n	80156a8 <recv_udp+0xac>
    pbuf_free(p);
 80156a0:	6878      	ldr	r0, [r7, #4]
 80156a2:	f003 fdbd 	bl	8019220 <pbuf_free>
    return;
 80156a6:	e037      	b.n	8015718 <recv_udp+0x11c>
  } else {
    buf->p = p;
 80156a8:	69bb      	ldr	r3, [r7, #24]
 80156aa:	687a      	ldr	r2, [r7, #4]
 80156ac:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80156ae:	69bb      	ldr	r3, [r7, #24]
 80156b0:	687a      	ldr	r2, [r7, #4]
 80156b2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80156b4:	683b      	ldr	r3, [r7, #0]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d002      	beq.n	80156c0 <recv_udp+0xc4>
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	e000      	b.n	80156c2 <recv_udp+0xc6>
 80156c0:	2300      	movs	r3, #0
 80156c2:	69ba      	ldr	r2, [r7, #24]
 80156c4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80156c6:	69bb      	ldr	r3, [r7, #24]
 80156c8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80156ca:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	891b      	ldrh	r3, [r3, #8]
 80156d0:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80156d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156d4:	3310      	adds	r3, #16
 80156d6:	69b9      	ldr	r1, [r7, #24]
 80156d8:	4618      	mov	r0, r3
 80156da:	f00d ff3b 	bl	8023554 <sys_mbox_trypost>
 80156de:	4603      	mov	r3, r0
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d003      	beq.n	80156ec <recv_udp+0xf0>
    netbuf_delete(buf);
 80156e4:	69b8      	ldr	r0, [r7, #24]
 80156e6:	f001 fcab 	bl	8017040 <netbuf_delete>
    return;
 80156ea:	e015      	b.n	8015718 <recv_udp+0x11c>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
 80156ec:	f00e f8f4 	bl	80238d8 <sys_arch_protect>
 80156f0:	6138      	str	r0, [r7, #16]
 80156f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156f4:	6a1a      	ldr	r2, [r3, #32]
 80156f6:	8afb      	ldrh	r3, [r7, #22]
 80156f8:	441a      	add	r2, r3
 80156fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156fc:	621a      	str	r2, [r3, #32]
 80156fe:	6938      	ldr	r0, [r7, #16]
 8015700:	f00e f8f8 	bl	80238f4 <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8015704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015708:	2b00      	cmp	r3, #0
 801570a:	d005      	beq.n	8015718 <recv_udp+0x11c>
 801570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015710:	8afa      	ldrh	r2, [r7, #22]
 8015712:	2100      	movs	r1, #0
 8015714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015716:	4798      	blx	r3
  }
}
 8015718:	3728      	adds	r7, #40	; 0x28
 801571a:	46bd      	mov	sp, r7
 801571c:	bd80      	pop	{r7, pc}
 801571e:	bf00      	nop
 8015720:	08025a78 	.word	0x08025a78
 8015724:	08025af0 	.word	0x08025af0
 8015728:	08025abc 	.word	0x08025abc
 801572c:	08025b14 	.word	0x08025b14
 8015730:	08025b34 	.word	0x08025b34

08015734 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b088      	sub	sp, #32
 8015738:	af00      	add	r7, sp, #0
 801573a:	60f8      	str	r0, [r7, #12]
 801573c:	60b9      	str	r1, [r7, #8]
 801573e:	607a      	str	r2, [r7, #4]
 8015740:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8015742:	68bb      	ldr	r3, [r7, #8]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d106      	bne.n	8015756 <recv_tcp+0x22>
 8015748:	4b3c      	ldr	r3, [pc, #240]	; (801583c <recv_tcp+0x108>)
 801574a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801574e:	493c      	ldr	r1, [pc, #240]	; (8015840 <recv_tcp+0x10c>)
 8015750:	483c      	ldr	r0, [pc, #240]	; (8015844 <recv_tcp+0x110>)
 8015752:	f00e fc39 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d106      	bne.n	801576a <recv_tcp+0x36>
 801575c:	4b37      	ldr	r3, [pc, #220]	; (801583c <recv_tcp+0x108>)
 801575e:	f240 122d 	movw	r2, #301	; 0x12d
 8015762:	4939      	ldr	r1, [pc, #228]	; (8015848 <recv_tcp+0x114>)
 8015764:	4837      	ldr	r0, [pc, #220]	; (8015844 <recv_tcp+0x110>)
 8015766:	f00e fc2f 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 801576a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d006      	beq.n	8015780 <recv_tcp+0x4c>
 8015772:	4b32      	ldr	r3, [pc, #200]	; (801583c <recv_tcp+0x108>)
 8015774:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8015778:	4934      	ldr	r1, [pc, #208]	; (801584c <recv_tcp+0x118>)
 801577a:	4832      	ldr	r0, [pc, #200]	; (8015844 <recv_tcp+0x110>)
 801577c:	f00e fc24 	bl	8023fc8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d102      	bne.n	8015790 <recv_tcp+0x5c>
    return ERR_VAL;
 801578a:	f06f 0305 	mvn.w	r3, #5
 801578e:	e051      	b.n	8015834 <recv_tcp+0x100>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8015790:	697b      	ldr	r3, [r7, #20]
 8015792:	685b      	ldr	r3, [r3, #4]
 8015794:	68ba      	ldr	r2, [r7, #8]
 8015796:	429a      	cmp	r2, r3
 8015798:	d006      	beq.n	80157a8 <recv_tcp+0x74>
 801579a:	4b28      	ldr	r3, [pc, #160]	; (801583c <recv_tcp+0x108>)
 801579c:	f240 1235 	movw	r2, #309	; 0x135
 80157a0:	492b      	ldr	r1, [pc, #172]	; (8015850 <recv_tcp+0x11c>)
 80157a2:	4828      	ldr	r0, [pc, #160]	; (8015844 <recv_tcp+0x110>)
 80157a4:	f00e fc10 	bl	8023fc8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80157a8:	697b      	ldr	r3, [r7, #20]
 80157aa:	3310      	adds	r3, #16
 80157ac:	4618      	mov	r0, r3
 80157ae:	f00d ff3d 	bl	802362c <sys_mbox_valid>
 80157b2:	4603      	mov	r3, r0
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d10d      	bne.n	80157d4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d008      	beq.n	80157d0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	891b      	ldrh	r3, [r3, #8]
 80157c2:	4619      	mov	r1, r3
 80157c4:	68b8      	ldr	r0, [r7, #8]
 80157c6:	f004 fcf3 	bl	801a1b0 <tcp_recved>
      pbuf_free(p);
 80157ca:	6878      	ldr	r0, [r7, #4]
 80157cc:	f003 fd28 	bl	8019220 <pbuf_free>
    }
    return ERR_OK;
 80157d0:	2300      	movs	r3, #0
 80157d2:	e02f      	b.n	8015834 <recv_tcp+0x100>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d005      	beq.n	80157e6 <recv_tcp+0xb2>
    msg = p;
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	891b      	ldrh	r3, [r3, #8]
 80157e2:	83fb      	strh	r3, [r7, #30]
 80157e4:	e003      	b.n	80157ee <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80157e6:	4b1b      	ldr	r3, [pc, #108]	; (8015854 <recv_tcp+0x120>)
 80157e8:	61bb      	str	r3, [r7, #24]
    len = 0;
 80157ea:	2300      	movs	r3, #0
 80157ec:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80157ee:	697b      	ldr	r3, [r7, #20]
 80157f0:	3310      	adds	r3, #16
 80157f2:	69b9      	ldr	r1, [r7, #24]
 80157f4:	4618      	mov	r0, r3
 80157f6:	f00d fead 	bl	8023554 <sys_mbox_trypost>
 80157fa:	4603      	mov	r3, r0
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d002      	beq.n	8015806 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8015800:	f04f 33ff 	mov.w	r3, #4294967295
 8015804:	e016      	b.n	8015834 <recv_tcp+0x100>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
 8015806:	f00e f867 	bl	80238d8 <sys_arch_protect>
 801580a:	6138      	str	r0, [r7, #16]
 801580c:	697b      	ldr	r3, [r7, #20]
 801580e:	6a1a      	ldr	r2, [r3, #32]
 8015810:	8bfb      	ldrh	r3, [r7, #30]
 8015812:	441a      	add	r2, r3
 8015814:	697b      	ldr	r3, [r7, #20]
 8015816:	621a      	str	r2, [r3, #32]
 8015818:	6938      	ldr	r0, [r7, #16]
 801581a:	f00e f86b 	bl	80238f4 <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801581e:	697b      	ldr	r3, [r7, #20]
 8015820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015822:	2b00      	cmp	r3, #0
 8015824:	d005      	beq.n	8015832 <recv_tcp+0xfe>
 8015826:	697b      	ldr	r3, [r7, #20]
 8015828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801582a:	8bfa      	ldrh	r2, [r7, #30]
 801582c:	2100      	movs	r1, #0
 801582e:	6978      	ldr	r0, [r7, #20]
 8015830:	4798      	blx	r3
  }

  return ERR_OK;
 8015832:	2300      	movs	r3, #0
}
 8015834:	4618      	mov	r0, r3
 8015836:	3720      	adds	r7, #32
 8015838:	46bd      	mov	sp, r7
 801583a:	bd80      	pop	{r7, pc}
 801583c:	08025a78 	.word	0x08025a78
 8015840:	08025b54 	.word	0x08025b54
 8015844:	08025abc 	.word	0x08025abc
 8015848:	08025b78 	.word	0x08025b78
 801584c:	08025b98 	.word	0x08025b98
 8015850:	08025bb0 	.word	0x08025bb0
 8015854:	080299ba 	.word	0x080299ba

08015858 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b084      	sub	sp, #16
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
 8015860:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d106      	bne.n	801587a <poll_tcp+0x22>
 801586c:	4b2b      	ldr	r3, [pc, #172]	; (801591c <poll_tcp+0xc4>)
 801586e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8015872:	492b      	ldr	r1, [pc, #172]	; (8015920 <poll_tcp+0xc8>)
 8015874:	482b      	ldr	r0, [pc, #172]	; (8015924 <poll_tcp+0xcc>)
 8015876:	f00e fba7 	bl	8023fc8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	785b      	ldrb	r3, [r3, #1]
 801587e:	2b01      	cmp	r3, #1
 8015880:	d104      	bne.n	801588c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8015882:	2101      	movs	r1, #1
 8015884:	68f8      	ldr	r0, [r7, #12]
 8015886:	f001 f8d3 	bl	8016a30 <lwip_netconn_do_writemore>
 801588a:	e016      	b.n	80158ba <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	785b      	ldrb	r3, [r3, #1]
 8015890:	2b04      	cmp	r3, #4
 8015892:	d112      	bne.n	80158ba <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015898:	2b00      	cmp	r3, #0
 801589a:	d00a      	beq.n	80158b2 <poll_tcp+0x5a>
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158a0:	7a5b      	ldrb	r3, [r3, #9]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d005      	beq.n	80158b2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158aa:	7a5a      	ldrb	r2, [r3, #9]
 80158ac:	3a01      	subs	r2, #1
 80158ae:	b2d2      	uxtb	r2, r2
 80158b0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80158b2:	2101      	movs	r1, #1
 80158b4:	68f8      	ldr	r0, [r7, #12]
 80158b6:	f000 fc0b 	bl	80160d0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80158c0:	f003 0310 	and.w	r3, r3, #16
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d023      	beq.n	8015910 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	685b      	ldr	r3, [r3, #4]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d01f      	beq.n	8015910 <poll_tcp+0xb8>
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	685b      	ldr	r3, [r3, #4]
 80158d4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80158d8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80158dc:	d318      	bcc.n	8015910 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	685b      	ldr	r3, [r3, #4]
 80158e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80158e6:	2b04      	cmp	r3, #4
 80158e8:	d812      	bhi.n	8015910 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80158f0:	f023 0310 	bic.w	r3, r3, #16
 80158f4:	b2da      	uxtb	r2, r3
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015900:	2b00      	cmp	r3, #0
 8015902:	d005      	beq.n	8015910 <poll_tcp+0xb8>
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015908:	2200      	movs	r2, #0
 801590a:	2102      	movs	r1, #2
 801590c:	68f8      	ldr	r0, [r7, #12]
 801590e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8015910:	2300      	movs	r3, #0
}
 8015912:	4618      	mov	r0, r3
 8015914:	3710      	adds	r7, #16
 8015916:	46bd      	mov	sp, r7
 8015918:	bd80      	pop	{r7, pc}
 801591a:	bf00      	nop
 801591c:	08025a78 	.word	0x08025a78
 8015920:	08025bd0 	.word	0x08025bd0
 8015924:	08025abc 	.word	0x08025abc

08015928 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b086      	sub	sp, #24
 801592c:	af00      	add	r7, sp, #0
 801592e:	60f8      	str	r0, [r7, #12]
 8015930:	60b9      	str	r1, [r7, #8]
 8015932:	4613      	mov	r3, r2
 8015934:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801593a:	697b      	ldr	r3, [r7, #20]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d106      	bne.n	801594e <sent_tcp+0x26>
 8015940:	4b21      	ldr	r3, [pc, #132]	; (80159c8 <sent_tcp+0xa0>)
 8015942:	f240 1293 	movw	r2, #403	; 0x193
 8015946:	4921      	ldr	r1, [pc, #132]	; (80159cc <sent_tcp+0xa4>)
 8015948:	4821      	ldr	r0, [pc, #132]	; (80159d0 <sent_tcp+0xa8>)
 801594a:	f00e fb3d 	bl	8023fc8 <iprintf>

  if (conn) {
 801594e:	697b      	ldr	r3, [r7, #20]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d034      	beq.n	80159be <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8015954:	697b      	ldr	r3, [r7, #20]
 8015956:	785b      	ldrb	r3, [r3, #1]
 8015958:	2b01      	cmp	r3, #1
 801595a:	d104      	bne.n	8015966 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801595c:	2101      	movs	r1, #1
 801595e:	6978      	ldr	r0, [r7, #20]
 8015960:	f001 f866 	bl	8016a30 <lwip_netconn_do_writemore>
 8015964:	e007      	b.n	8015976 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8015966:	697b      	ldr	r3, [r7, #20]
 8015968:	785b      	ldrb	r3, [r3, #1]
 801596a:	2b04      	cmp	r3, #4
 801596c:	d103      	bne.n	8015976 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801596e:	2101      	movs	r1, #1
 8015970:	6978      	ldr	r0, [r7, #20]
 8015972:	f000 fbad 	bl	80160d0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8015976:	697b      	ldr	r3, [r7, #20]
 8015978:	685b      	ldr	r3, [r3, #4]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d01f      	beq.n	80159be <sent_tcp+0x96>
 801597e:	697b      	ldr	r3, [r7, #20]
 8015980:	685b      	ldr	r3, [r3, #4]
 8015982:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015986:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801598a:	d318      	bcc.n	80159be <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801598c:	697b      	ldr	r3, [r7, #20]
 801598e:	685b      	ldr	r3, [r3, #4]
 8015990:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8015994:	2b04      	cmp	r3, #4
 8015996:	d812      	bhi.n	80159be <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8015998:	697b      	ldr	r3, [r7, #20]
 801599a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801599e:	f023 0310 	bic.w	r3, r3, #16
 80159a2:	b2da      	uxtb	r2, r3
 80159a4:	697b      	ldr	r3, [r7, #20]
 80159a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80159aa:	697b      	ldr	r3, [r7, #20]
 80159ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d005      	beq.n	80159be <sent_tcp+0x96>
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159b6:	88fa      	ldrh	r2, [r7, #6]
 80159b8:	2102      	movs	r1, #2
 80159ba:	6978      	ldr	r0, [r7, #20]
 80159bc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80159be:	2300      	movs	r3, #0
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3718      	adds	r7, #24
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}
 80159c8:	08025a78 	.word	0x08025a78
 80159cc:	08025bd0 	.word	0x08025bd0
 80159d0:	08025abc 	.word	0x08025abc

080159d4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b088      	sub	sp, #32
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
 80159dc:	460b      	mov	r3, r1
 80159de:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80159e4:	69fb      	ldr	r3, [r7, #28]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d106      	bne.n	80159f8 <err_tcp+0x24>
 80159ea:	4b61      	ldr	r3, [pc, #388]	; (8015b70 <err_tcp+0x19c>)
 80159ec:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80159f0:	4960      	ldr	r1, [pc, #384]	; (8015b74 <err_tcp+0x1a0>)
 80159f2:	4861      	ldr	r0, [pc, #388]	; (8015b78 <err_tcp+0x1a4>)
 80159f4:	f00e fae8 	bl	8023fc8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80159f8:	f00d ff6e 	bl	80238d8 <sys_arch_protect>
 80159fc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80159fe:	69fb      	ldr	r3, [r7, #28]
 8015a00:	2200      	movs	r2, #0
 8015a02:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8015a04:	69fb      	ldr	r3, [r7, #28]
 8015a06:	78fa      	ldrb	r2, [r7, #3]
 8015a08:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8015a0a:	69fb      	ldr	r3, [r7, #28]
 8015a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015a10:	f043 0301 	orr.w	r3, r3, #1
 8015a14:	b2da      	uxtb	r2, r3
 8015a16:	69fb      	ldr	r3, [r7, #28]
 8015a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8015a1c:	69fb      	ldr	r3, [r7, #28]
 8015a1e:	785b      	ldrb	r3, [r3, #1]
 8015a20:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8015a22:	69fb      	ldr	r3, [r7, #28]
 8015a24:	2200      	movs	r2, #0
 8015a26:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8015a28:	69b8      	ldr	r0, [r7, #24]
 8015a2a:	f00d ff63 	bl	80238f4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8015a2e:	69fb      	ldr	r3, [r7, #28]
 8015a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d005      	beq.n	8015a42 <err_tcp+0x6e>
 8015a36:	69fb      	ldr	r3, [r7, #28]
 8015a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	2104      	movs	r1, #4
 8015a3e:	69f8      	ldr	r0, [r7, #28]
 8015a40:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015a42:	69fb      	ldr	r3, [r7, #28]
 8015a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d005      	beq.n	8015a56 <err_tcp+0x82>
 8015a4a:	69fb      	ldr	r3, [r7, #28]
 8015a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a4e:	2200      	movs	r2, #0
 8015a50:	2100      	movs	r1, #0
 8015a52:	69f8      	ldr	r0, [r7, #28]
 8015a54:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015a56:	69fb      	ldr	r3, [r7, #28]
 8015a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d005      	beq.n	8015a6a <err_tcp+0x96>
 8015a5e:	69fb      	ldr	r3, [r7, #28]
 8015a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a62:	2200      	movs	r2, #0
 8015a64:	2102      	movs	r1, #2
 8015a66:	69f8      	ldr	r0, [r7, #28]
 8015a68:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8015a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015a6e:	4618      	mov	r0, r3
 8015a70:	f7ff fd54 	bl	801551c <lwip_netconn_err_to_msg>
 8015a74:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8015a76:	69fb      	ldr	r3, [r7, #28]
 8015a78:	3310      	adds	r3, #16
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f00d fdd6 	bl	802362c <sys_mbox_valid>
 8015a80:	4603      	mov	r3, r0
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d005      	beq.n	8015a92 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8015a86:	69fb      	ldr	r3, [r7, #28]
 8015a88:	3310      	adds	r3, #16
 8015a8a:	6939      	ldr	r1, [r7, #16]
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f00d fd61 	bl	8023554 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8015a92:	69fb      	ldr	r3, [r7, #28]
 8015a94:	3314      	adds	r3, #20
 8015a96:	4618      	mov	r0, r3
 8015a98:	f00d fdc8 	bl	802362c <sys_mbox_valid>
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d005      	beq.n	8015aae <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8015aa2:	69fb      	ldr	r3, [r7, #28]
 8015aa4:	3314      	adds	r3, #20
 8015aa6:	6939      	ldr	r1, [r7, #16]
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f00d fd53 	bl	8023554 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8015aae:	7dfb      	ldrb	r3, [r7, #23]
 8015ab0:	2b01      	cmp	r3, #1
 8015ab2:	d005      	beq.n	8015ac0 <err_tcp+0xec>
 8015ab4:	7dfb      	ldrb	r3, [r7, #23]
 8015ab6:	2b04      	cmp	r3, #4
 8015ab8:	d002      	beq.n	8015ac0 <err_tcp+0xec>
 8015aba:	7dfb      	ldrb	r3, [r7, #23]
 8015abc:	2b03      	cmp	r3, #3
 8015abe:	d146      	bne.n	8015b4e <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8015ac0:	69fb      	ldr	r3, [r7, #28]
 8015ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015ac6:	f003 0304 	and.w	r3, r3, #4
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	bf14      	ite	ne
 8015ace:	2301      	movne	r3, #1
 8015ad0:	2300      	moveq	r3, #0
 8015ad2:	b2db      	uxtb	r3, r3
 8015ad4:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8015ad6:	69fb      	ldr	r3, [r7, #28]
 8015ad8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015adc:	f023 0304 	bic.w	r3, r3, #4
 8015ae0:	b2da      	uxtb	r2, r3
 8015ae2:	69fb      	ldr	r3, [r7, #28]
 8015ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (!was_nonblocking_connect) {
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d13b      	bne.n	8015b66 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015aee:	69fb      	ldr	r3, [r7, #28]
 8015af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d106      	bne.n	8015b04 <err_tcp+0x130>
 8015af6:	4b1e      	ldr	r3, [pc, #120]	; (8015b70 <err_tcp+0x19c>)
 8015af8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015afc:	491f      	ldr	r1, [pc, #124]	; (8015b7c <err_tcp+0x1a8>)
 8015afe:	481e      	ldr	r0, [pc, #120]	; (8015b78 <err_tcp+0x1a4>)
 8015b00:	f00e fa62 	bl	8023fc8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8015b04:	7dfb      	ldrb	r3, [r7, #23]
 8015b06:	2b04      	cmp	r3, #4
 8015b08:	d104      	bne.n	8015b14 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8015b0a:	69fb      	ldr	r3, [r7, #28]
 8015b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b0e:	2200      	movs	r2, #0
 8015b10:	711a      	strb	r2, [r3, #4]
 8015b12:	e003      	b.n	8015b1c <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8015b14:	69fb      	ldr	r3, [r7, #28]
 8015b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b18:	78fa      	ldrb	r2, [r7, #3]
 8015b1a:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015b1c:	69fb      	ldr	r3, [r7, #28]
 8015b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	330c      	adds	r3, #12
 8015b24:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8015b26:	68b8      	ldr	r0, [r7, #8]
 8015b28:	f00d fe3a 	bl	80237a0 <sys_sem_valid>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d106      	bne.n	8015b40 <err_tcp+0x16c>
 8015b32:	4b0f      	ldr	r3, [pc, #60]	; (8015b70 <err_tcp+0x19c>)
 8015b34:	f240 12ef 	movw	r2, #495	; 0x1ef
 8015b38:	4911      	ldr	r1, [pc, #68]	; (8015b80 <err_tcp+0x1ac>)
 8015b3a:	480f      	ldr	r0, [pc, #60]	; (8015b78 <err_tcp+0x1a4>)
 8015b3c:	f00e fa44 	bl	8023fc8 <iprintf>
      conn->current_msg = NULL;
 8015b40:	69fb      	ldr	r3, [r7, #28]
 8015b42:	2200      	movs	r2, #0
 8015b44:	629a      	str	r2, [r3, #40]	; 0x28
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8015b46:	68b8      	ldr	r0, [r7, #8]
 8015b48:	f00d fe05 	bl	8023756 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8015b4c:	e00b      	b.n	8015b66 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8015b4e:	69fb      	ldr	r3, [r7, #28]
 8015b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d008      	beq.n	8015b68 <err_tcp+0x194>
 8015b56:	4b06      	ldr	r3, [pc, #24]	; (8015b70 <err_tcp+0x19c>)
 8015b58:	f240 12f7 	movw	r2, #503	; 0x1f7
 8015b5c:	4909      	ldr	r1, [pc, #36]	; (8015b84 <err_tcp+0x1b0>)
 8015b5e:	4806      	ldr	r0, [pc, #24]	; (8015b78 <err_tcp+0x1a4>)
 8015b60:	f00e fa32 	bl	8023fc8 <iprintf>
  }
}
 8015b64:	e000      	b.n	8015b68 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 8015b66:	bf00      	nop
}
 8015b68:	bf00      	nop
 8015b6a:	3720      	adds	r7, #32
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	bd80      	pop	{r7, pc}
 8015b70:	08025a78 	.word	0x08025a78
 8015b74:	08025bd0 	.word	0x08025bd0
 8015b78:	08025abc 	.word	0x08025abc
 8015b7c:	08025be0 	.word	0x08025be0
 8015b80:	08025bfc 	.word	0x08025bfc
 8015b84:	08025c18 	.word	0x08025c18

08015b88 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b084      	sub	sp, #16
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	685b      	ldr	r3, [r3, #4]
 8015b94:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8015b96:	6879      	ldr	r1, [r7, #4]
 8015b98:	68f8      	ldr	r0, [r7, #12]
 8015b9a:	f005 fb11 	bl	801b1c0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8015b9e:	490a      	ldr	r1, [pc, #40]	; (8015bc8 <setup_tcp+0x40>)
 8015ba0:	68f8      	ldr	r0, [r7, #12]
 8015ba2:	f005 fb1f 	bl	801b1e4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8015ba6:	4909      	ldr	r1, [pc, #36]	; (8015bcc <setup_tcp+0x44>)
 8015ba8:	68f8      	ldr	r0, [r7, #12]
 8015baa:	f005 fb3d 	bl	801b228 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8015bae:	2202      	movs	r2, #2
 8015bb0:	4907      	ldr	r1, [pc, #28]	; (8015bd0 <setup_tcp+0x48>)
 8015bb2:	68f8      	ldr	r0, [r7, #12]
 8015bb4:	f005 fb94 	bl	801b2e0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8015bb8:	4906      	ldr	r1, [pc, #24]	; (8015bd4 <setup_tcp+0x4c>)
 8015bba:	68f8      	ldr	r0, [r7, #12]
 8015bbc:	f005 fb56 	bl	801b26c <tcp_err>
}
 8015bc0:	bf00      	nop
 8015bc2:	3710      	adds	r7, #16
 8015bc4:	46bd      	mov	sp, r7
 8015bc6:	bd80      	pop	{r7, pc}
 8015bc8:	08015735 	.word	0x08015735
 8015bcc:	08015929 	.word	0x08015929
 8015bd0:	08015859 	.word	0x08015859
 8015bd4:	080159d5 	.word	0x080159d5

08015bd8 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8015bd8:	b590      	push	{r4, r7, lr}
 8015bda:	b089      	sub	sp, #36	; 0x24
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	60f8      	str	r0, [r7, #12]
 8015be0:	60b9      	str	r1, [r7, #8]
 8015be2:	4613      	mov	r3, r2
 8015be4:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8015bea:	69fb      	ldr	r3, [r7, #28]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d102      	bne.n	8015bf6 <accept_function+0x1e>
    return ERR_VAL;
 8015bf0:	f06f 0305 	mvn.w	r3, #5
 8015bf4:	e0a1      	b.n	8015d3a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8015bf6:	69fb      	ldr	r3, [r7, #28]
 8015bf8:	3314      	adds	r3, #20
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f00d fd16 	bl	802362c <sys_mbox_valid>
 8015c00:	4603      	mov	r3, r0
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d102      	bne.n	8015c0c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8015c06:	f06f 0305 	mvn.w	r3, #5
 8015c0a:	e096      	b.n	8015d3a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8015c0c:	68bb      	ldr	r3, [r7, #8]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d11b      	bne.n	8015c4a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8015c12:	69fb      	ldr	r3, [r7, #28]
 8015c14:	f103 0414 	add.w	r4, r3, #20
 8015c18:	f06f 000c 	mvn.w	r0, #12
 8015c1c:	f7ff fc7e 	bl	801551c <lwip_netconn_err_to_msg>
 8015c20:	4603      	mov	r3, r0
 8015c22:	4619      	mov	r1, r3
 8015c24:	4620      	mov	r0, r4
 8015c26:	f00d fc95 	bl	8023554 <sys_mbox_trypost>
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d109      	bne.n	8015c44 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015c30:	69fb      	ldr	r3, [r7, #28]
 8015c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d005      	beq.n	8015c44 <accept_function+0x6c>
 8015c38:	69fb      	ldr	r3, [r7, #28]
 8015c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	2100      	movs	r1, #0
 8015c40:	69f8      	ldr	r0, [r7, #28]
 8015c42:	4798      	blx	r3
    }
    return ERR_VAL;
 8015c44:	f06f 0305 	mvn.w	r3, #5
 8015c48:	e077      	b.n	8015d3a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8015c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d006      	beq.n	8015c60 <accept_function+0x88>
 8015c52:	4b3c      	ldr	r3, [pc, #240]	; (8015d44 <accept_function+0x16c>)
 8015c54:	f240 222a 	movw	r2, #554	; 0x22a
 8015c58:	493b      	ldr	r1, [pc, #236]	; (8015d48 <accept_function+0x170>)
 8015c5a:	483c      	ldr	r0, [pc, #240]	; (8015d4c <accept_function+0x174>)
 8015c5c:	f00e f9b4 	bl	8023fc8 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8015c60:	69fb      	ldr	r3, [r7, #28]
 8015c62:	781a      	ldrb	r2, [r3, #0]
 8015c64:	69fb      	ldr	r3, [r7, #28]
 8015c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c68:	4619      	mov	r1, r3
 8015c6a:	4610      	mov	r0, r2
 8015c6c:	f000 f8f0 	bl	8015e50 <netconn_alloc>
 8015c70:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8015c72:	69bb      	ldr	r3, [r7, #24]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d11b      	bne.n	8015cb0 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8015c78:	69fb      	ldr	r3, [r7, #28]
 8015c7a:	f103 0414 	add.w	r4, r3, #20
 8015c7e:	f06f 000c 	mvn.w	r0, #12
 8015c82:	f7ff fc4b 	bl	801551c <lwip_netconn_err_to_msg>
 8015c86:	4603      	mov	r3, r0
 8015c88:	4619      	mov	r1, r3
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	f00d fc62 	bl	8023554 <sys_mbox_trypost>
 8015c90:	4603      	mov	r3, r0
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d109      	bne.n	8015caa <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015c96:	69fb      	ldr	r3, [r7, #28]
 8015c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d005      	beq.n	8015caa <accept_function+0xd2>
 8015c9e:	69fb      	ldr	r3, [r7, #28]
 8015ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ca2:	2200      	movs	r2, #0
 8015ca4:	2100      	movs	r1, #0
 8015ca6:	69f8      	ldr	r0, [r7, #28]
 8015ca8:	4798      	blx	r3
    }
    return ERR_MEM;
 8015caa:	f04f 33ff 	mov.w	r3, #4294967295
 8015cae:	e044      	b.n	8015d3a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8015cb0:	69bb      	ldr	r3, [r7, #24]
 8015cb2:	68ba      	ldr	r2, [r7, #8]
 8015cb4:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8015cb6:	69b8      	ldr	r0, [r7, #24]
 8015cb8:	f7ff ff66 	bl	8015b88 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8015cbc:	69fb      	ldr	r3, [r7, #28]
 8015cbe:	3314      	adds	r3, #20
 8015cc0:	69b9      	ldr	r1, [r7, #24]
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f00d fc46 	bl	8023554 <sys_mbox_trypost>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d02a      	beq.n	8015d24 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8015cce:	69bb      	ldr	r3, [r7, #24]
 8015cd0:	685b      	ldr	r3, [r3, #4]
 8015cd2:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8015cd4:	2100      	movs	r1, #0
 8015cd6:	6978      	ldr	r0, [r7, #20]
 8015cd8:	f005 fa72 	bl	801b1c0 <tcp_arg>
    tcp_recv(pcb, NULL);
 8015cdc:	2100      	movs	r1, #0
 8015cde:	6978      	ldr	r0, [r7, #20]
 8015ce0:	f005 fa80 	bl	801b1e4 <tcp_recv>
    tcp_sent(pcb, NULL);
 8015ce4:	2100      	movs	r1, #0
 8015ce6:	6978      	ldr	r0, [r7, #20]
 8015ce8:	f005 fa9e 	bl	801b228 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8015cec:	2200      	movs	r2, #0
 8015cee:	2100      	movs	r1, #0
 8015cf0:	6978      	ldr	r0, [r7, #20]
 8015cf2:	f005 faf5 	bl	801b2e0 <tcp_poll>
    tcp_err(pcb, NULL);
 8015cf6:	2100      	movs	r1, #0
 8015cf8:	6978      	ldr	r0, [r7, #20]
 8015cfa:	f005 fab7 	bl	801b26c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8015cfe:	69bb      	ldr	r3, [r7, #24]
 8015d00:	2200      	movs	r2, #0
 8015d02:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8015d04:	69bb      	ldr	r3, [r7, #24]
 8015d06:	3310      	adds	r3, #16
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f00d fbfb 	bl	8023504 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8015d0e:	69bb      	ldr	r3, [r7, #24]
 8015d10:	3310      	adds	r3, #16
 8015d12:	4618      	mov	r0, r3
 8015d14:	f00d fc9b 	bl	802364e <sys_mbox_set_invalid>
    netconn_free(newconn);
 8015d18:	69b8      	ldr	r0, [r7, #24]
 8015d1a:	f000 f911 	bl	8015f40 <netconn_free>
    return ERR_MEM;
 8015d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8015d22:	e00a      	b.n	8015d3a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015d24:	69fb      	ldr	r3, [r7, #28]
 8015d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d005      	beq.n	8015d38 <accept_function+0x160>
 8015d2c:	69fb      	ldr	r3, [r7, #28]
 8015d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d30:	2200      	movs	r2, #0
 8015d32:	2100      	movs	r1, #0
 8015d34:	69f8      	ldr	r0, [r7, #28]
 8015d36:	4798      	blx	r3
  }

  return ERR_OK;
 8015d38:	2300      	movs	r3, #0
}
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	3724      	adds	r7, #36	; 0x24
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	bd90      	pop	{r4, r7, pc}
 8015d42:	bf00      	nop
 8015d44:	08025a78 	.word	0x08025a78
 8015d48:	08025c34 	.word	0x08025c34
 8015d4c:	08025abc 	.word	0x08025abc

08015d50 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8015d50:	b590      	push	{r4, r7, lr}
 8015d52:	b085      	sub	sp, #20
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8015d58:	2300      	movs	r3, #0
 8015d5a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	685b      	ldr	r3, [r3, #4]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d006      	beq.n	8015d74 <pcb_new+0x24>
 8015d66:	4b2b      	ldr	r3, [pc, #172]	; (8015e14 <pcb_new+0xc4>)
 8015d68:	f240 2265 	movw	r2, #613	; 0x265
 8015d6c:	492a      	ldr	r1, [pc, #168]	; (8015e18 <pcb_new+0xc8>)
 8015d6e:	482b      	ldr	r0, [pc, #172]	; (8015e1c <pcb_new+0xcc>)
 8015d70:	f00e f92a 	bl	8023fc8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	781b      	ldrb	r3, [r3, #0]
 8015d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015d7e:	2b10      	cmp	r3, #16
 8015d80:	d022      	beq.n	8015dc8 <pcb_new+0x78>
 8015d82:	2b20      	cmp	r3, #32
 8015d84:	d133      	bne.n	8015dee <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	681c      	ldr	r4, [r3, #0]
 8015d8a:	7bfb      	ldrb	r3, [r7, #15]
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f00a fe04 	bl	802099a <udp_new_ip_type>
 8015d92:	4603      	mov	r3, r0
 8015d94:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	685b      	ldr	r3, [r3, #4]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d02a      	beq.n	8015df6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	781b      	ldrb	r3, [r3, #0]
 8015da6:	2b22      	cmp	r3, #34	; 0x22
 8015da8:	d104      	bne.n	8015db4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	685b      	ldr	r3, [r3, #4]
 8015db0:	2201      	movs	r2, #1
 8015db2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	6858      	ldr	r0, [r3, #4]
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	461a      	mov	r2, r3
 8015dc0:	4917      	ldr	r1, [pc, #92]	; (8015e20 <pcb_new+0xd0>)
 8015dc2:	f00a fd71 	bl	80208a8 <udp_recv>
      }
      break;
 8015dc6:	e016      	b.n	8015df6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	681c      	ldr	r4, [r3, #0]
 8015dcc:	7bfb      	ldrb	r3, [r7, #15]
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f005 f9e8 	bl	801b1a4 <tcp_new_ip_type>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	685b      	ldr	r3, [r3, #4]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d00b      	beq.n	8015dfa <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7ff fece 	bl	8015b88 <setup_tcp>
      }
      break;
 8015dec:	e005      	b.n	8015dfa <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	22fa      	movs	r2, #250	; 0xfa
 8015df2:	711a      	strb	r2, [r3, #4]
      return;
 8015df4:	e00a      	b.n	8015e0c <pcb_new+0xbc>
      break;
 8015df6:	bf00      	nop
 8015df8:	e000      	b.n	8015dfc <pcb_new+0xac>
      break;
 8015dfa:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	685b      	ldr	r3, [r3, #4]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d102      	bne.n	8015e0c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	22ff      	movs	r2, #255	; 0xff
 8015e0a:	711a      	strb	r2, [r3, #4]
  }
}
 8015e0c:	3714      	adds	r7, #20
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd90      	pop	{r4, r7, pc}
 8015e12:	bf00      	nop
 8015e14:	08025a78 	.word	0x08025a78
 8015e18:	08025c5c 	.word	0x08025c5c
 8015e1c:	08025abc 	.word	0x08025abc
 8015e20:	080155fd 	.word	0x080155fd

08015e24 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b084      	sub	sp, #16
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	2200      	movs	r2, #0
 8015e34:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	685b      	ldr	r3, [r3, #4]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d102      	bne.n	8015e46 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8015e40:	68f8      	ldr	r0, [r7, #12]
 8015e42:	f7ff ff85 	bl	8015d50 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8015e46:	bf00      	nop
 8015e48:	3710      	adds	r7, #16
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}
	...

08015e50 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b086      	sub	sp, #24
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	4603      	mov	r3, r0
 8015e58:	6039      	str	r1, [r7, #0]
 8015e5a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8015e60:	2007      	movs	r0, #7
 8015e62:	f002 f9c7 	bl	80181f4 <memp_malloc>
 8015e66:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d101      	bne.n	8015e72 <netconn_alloc+0x22>
    return NULL;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	e059      	b.n	8015f26 <netconn_alloc+0xd6>
  }

  conn->pending_err = ERR_OK;
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	2200      	movs	r2, #0
 8015e76:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	79fa      	ldrb	r2, [r7, #7]
 8015e7c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	2200      	movs	r2, #0
 8015e82:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8015e84:	79fb      	ldrb	r3, [r7, #7]
 8015e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015e8a:	2b10      	cmp	r3, #16
 8015e8c:	d004      	beq.n	8015e98 <netconn_alloc+0x48>
 8015e8e:	2b20      	cmp	r3, #32
 8015e90:	d105      	bne.n	8015e9e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8015e92:	2306      	movs	r3, #6
 8015e94:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8015e96:	e00a      	b.n	8015eae <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8015e98:	2306      	movs	r3, #6
 8015e9a:	617b      	str	r3, [r7, #20]
      break;
 8015e9c:	e007      	b.n	8015eae <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8015e9e:	4b24      	ldr	r3, [pc, #144]	; (8015f30 <netconn_alloc+0xe0>)
 8015ea0:	f240 22e5 	movw	r2, #741	; 0x2e5
 8015ea4:	4923      	ldr	r1, [pc, #140]	; (8015f34 <netconn_alloc+0xe4>)
 8015ea6:	4824      	ldr	r0, [pc, #144]	; (8015f38 <netconn_alloc+0xe8>)
 8015ea8:	f00e f88e 	bl	8023fc8 <iprintf>
      goto free_and_return;
 8015eac:	e036      	b.n	8015f1c <netconn_alloc+0xcc>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	3310      	adds	r3, #16
 8015eb2:	6979      	ldr	r1, [r7, #20]
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f00d faf3 	bl	80234a0 <sys_mbox_new>
 8015eba:	4603      	mov	r3, r0
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d12c      	bne.n	8015f1a <netconn_alloc+0xca>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	330c      	adds	r3, #12
 8015ec4:	2100      	movs	r1, #0
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f00d fbce 	bl	8023668 <sys_sem_new>
 8015ecc:	4603      	mov	r3, r0
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d005      	beq.n	8015ede <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	3310      	adds	r3, #16
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	f00d fb14 	bl	8023504 <sys_mbox_free>
    goto free_and_return;
 8015edc:	e01e      	b.n	8015f1c <netconn_alloc+0xcc>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	3314      	adds	r3, #20
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	f00d fbb3 	bl	802364e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	2200      	movs	r2, #0
 8015eec:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8015ef4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	683a      	ldr	r2, [r7, #0]
 8015efa:	62da      	str	r2, [r3, #44]	; 0x2c
#if LWIP_TCP
  conn->current_msg  = NULL;
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	2200      	movs	r2, #0
 8015f00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	4a0d      	ldr	r2, [pc, #52]	; (8015f3c <netconn_alloc+0xec>)
 8015f06:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	621a      	str	r2, [r3, #32]
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	7cfa      	ldrb	r2, [r7, #19]
 8015f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  return conn;
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	e005      	b.n	8015f26 <netconn_alloc+0xd6>
    goto free_and_return;
 8015f1a:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8015f1c:	68f9      	ldr	r1, [r7, #12]
 8015f1e:	2007      	movs	r0, #7
 8015f20:	f002 f9e4 	bl	80182ec <memp_free>
  return NULL;
 8015f24:	2300      	movs	r3, #0
}
 8015f26:	4618      	mov	r0, r3
 8015f28:	3718      	adds	r7, #24
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd80      	pop	{r7, pc}
 8015f2e:	bf00      	nop
 8015f30:	08025a78 	.word	0x08025a78
 8015f34:	08025c7c 	.word	0x08025c7c
 8015f38:	08025abc 	.word	0x08025abc
 8015f3c:	77359400 	.word	0x77359400

08015f40 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b082      	sub	sp, #8
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	685b      	ldr	r3, [r3, #4]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d006      	beq.n	8015f5e <netconn_free+0x1e>
 8015f50:	4b1b      	ldr	r3, [pc, #108]	; (8015fc0 <netconn_free+0x80>)
 8015f52:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015f56:	491b      	ldr	r1, [pc, #108]	; (8015fc4 <netconn_free+0x84>)
 8015f58:	481b      	ldr	r0, [pc, #108]	; (8015fc8 <netconn_free+0x88>)
 8015f5a:	f00e f835 	bl	8023fc8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	3310      	adds	r3, #16
 8015f62:	4618      	mov	r0, r3
 8015f64:	f00d fb62 	bl	802362c <sys_mbox_valid>
 8015f68:	4603      	mov	r3, r0
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d006      	beq.n	8015f7c <netconn_free+0x3c>
 8015f6e:	4b14      	ldr	r3, [pc, #80]	; (8015fc0 <netconn_free+0x80>)
 8015f70:	f240 3223 	movw	r2, #803	; 0x323
 8015f74:	4915      	ldr	r1, [pc, #84]	; (8015fcc <netconn_free+0x8c>)
 8015f76:	4814      	ldr	r0, [pc, #80]	; (8015fc8 <netconn_free+0x88>)
 8015f78:	f00e f826 	bl	8023fc8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	3314      	adds	r3, #20
 8015f80:	4618      	mov	r0, r3
 8015f82:	f00d fb53 	bl	802362c <sys_mbox_valid>
 8015f86:	4603      	mov	r3, r0
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d006      	beq.n	8015f9a <netconn_free+0x5a>
 8015f8c:	4b0c      	ldr	r3, [pc, #48]	; (8015fc0 <netconn_free+0x80>)
 8015f8e:	f240 3226 	movw	r2, #806	; 0x326
 8015f92:	490f      	ldr	r1, [pc, #60]	; (8015fd0 <netconn_free+0x90>)
 8015f94:	480c      	ldr	r0, [pc, #48]	; (8015fc8 <netconn_free+0x88>)
 8015f96:	f00e f817 	bl	8023fc8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	330c      	adds	r3, #12
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	f00d fbe6 	bl	8023770 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	330c      	adds	r3, #12
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f00d fc0a 	bl	80237c2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8015fae:	6879      	ldr	r1, [r7, #4]
 8015fb0:	2007      	movs	r0, #7
 8015fb2:	f002 f99b 	bl	80182ec <memp_free>
}
 8015fb6:	bf00      	nop
 8015fb8:	3708      	adds	r7, #8
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bd80      	pop	{r7, pc}
 8015fbe:	bf00      	nop
 8015fc0:	08025a78 	.word	0x08025a78
 8015fc4:	08025ca4 	.word	0x08025ca4
 8015fc8:	08025abc 	.word	0x08025abc
 8015fcc:	08025cd4 	.word	0x08025cd4
 8015fd0:	08025d10 	.word	0x08025d10

08015fd4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	b086      	sub	sp, #24
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	3310      	adds	r3, #16
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f00d fb23 	bl	802362c <sys_mbox_valid>
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d02f      	beq.n	801604c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8015fec:	e018      	b.n	8016020 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	781b      	ldrb	r3, [r3, #0]
 8015ff2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015ff6:	2b10      	cmp	r3, #16
 8015ff8:	d10e      	bne.n	8016018 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8015ffa:	693b      	ldr	r3, [r7, #16]
 8015ffc:	f107 020f 	add.w	r2, r7, #15
 8016000:	4611      	mov	r1, r2
 8016002:	4618      	mov	r0, r3
 8016004:	f7ff fac0 	bl	8015588 <lwip_netconn_is_err_msg>
 8016008:	4603      	mov	r3, r0
 801600a:	2b00      	cmp	r3, #0
 801600c:	d108      	bne.n	8016020 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 801600e:	693b      	ldr	r3, [r7, #16]
 8016010:	4618      	mov	r0, r3
 8016012:	f003 f905 	bl	8019220 <pbuf_free>
 8016016:	e003      	b.n	8016020 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8016018:	693b      	ldr	r3, [r7, #16]
 801601a:	4618      	mov	r0, r3
 801601c:	f001 f810 	bl	8017040 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	3310      	adds	r3, #16
 8016024:	f107 0210 	add.w	r2, r7, #16
 8016028:	4611      	mov	r1, r2
 801602a:	4618      	mov	r0, r3
 801602c:	f00d fae7 	bl	80235fe <sys_arch_mbox_tryfetch>
 8016030:	4603      	mov	r3, r0
 8016032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016036:	d1da      	bne.n	8015fee <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	3310      	adds	r3, #16
 801603c:	4618      	mov	r0, r3
 801603e:	f00d fa61 	bl	8023504 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	3310      	adds	r3, #16
 8016046:	4618      	mov	r0, r3
 8016048:	f00d fb01 	bl	802364e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	3314      	adds	r3, #20
 8016050:	4618      	mov	r0, r3
 8016052:	f00d faeb 	bl	802362c <sys_mbox_valid>
 8016056:	4603      	mov	r3, r0
 8016058:	2b00      	cmp	r3, #0
 801605a:	d034      	beq.n	80160c6 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 801605c:	e01d      	b.n	801609a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 801605e:	693b      	ldr	r3, [r7, #16]
 8016060:	f107 020e 	add.w	r2, r7, #14
 8016064:	4611      	mov	r1, r2
 8016066:	4618      	mov	r0, r3
 8016068:	f7ff fa8e 	bl	8015588 <lwip_netconn_is_err_msg>
 801606c:	4603      	mov	r3, r0
 801606e:	2b00      	cmp	r3, #0
 8016070:	d113      	bne.n	801609a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8016072:	693b      	ldr	r3, [r7, #16]
 8016074:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8016076:	6978      	ldr	r0, [r7, #20]
 8016078:	f7ff ffac 	bl	8015fd4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 801607c:	697b      	ldr	r3, [r7, #20]
 801607e:	685b      	ldr	r3, [r3, #4]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d007      	beq.n	8016094 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8016084:	697b      	ldr	r3, [r7, #20]
 8016086:	685b      	ldr	r3, [r3, #4]
 8016088:	4618      	mov	r0, r3
 801608a:	f003 fec9 	bl	8019e20 <tcp_abort>
            newconn->pcb.tcp = NULL;
 801608e:	697b      	ldr	r3, [r7, #20]
 8016090:	2200      	movs	r2, #0
 8016092:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8016094:	6978      	ldr	r0, [r7, #20]
 8016096:	f7ff ff53 	bl	8015f40 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	3314      	adds	r3, #20
 801609e:	f107 0210 	add.w	r2, r7, #16
 80160a2:	4611      	mov	r1, r2
 80160a4:	4618      	mov	r0, r3
 80160a6:	f00d faaa 	bl	80235fe <sys_arch_mbox_tryfetch>
 80160aa:	4603      	mov	r3, r0
 80160ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160b0:	d1d5      	bne.n	801605e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	3314      	adds	r3, #20
 80160b6:	4618      	mov	r0, r3
 80160b8:	f00d fa24 	bl	8023504 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	3314      	adds	r3, #20
 80160c0:	4618      	mov	r0, r3
 80160c2:	f00d fac4 	bl	802364e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80160c6:	bf00      	nop
 80160c8:	3718      	adds	r7, #24
 80160ca:	46bd      	mov	sp, r7
 80160cc:	bd80      	pop	{r7, pc}
	...

080160d0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b086      	sub	sp, #24
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
 80160d8:	460b      	mov	r3, r1
 80160da:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80160dc:	2300      	movs	r3, #0
 80160de:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d106      	bne.n	80160f4 <lwip_netconn_do_close_internal+0x24>
 80160e6:	4b87      	ldr	r3, [pc, #540]	; (8016304 <lwip_netconn_do_close_internal+0x234>)
 80160e8:	f240 32a2 	movw	r2, #930	; 0x3a2
 80160ec:	4986      	ldr	r1, [pc, #536]	; (8016308 <lwip_netconn_do_close_internal+0x238>)
 80160ee:	4887      	ldr	r0, [pc, #540]	; (801630c <lwip_netconn_do_close_internal+0x23c>)
 80160f0:	f00d ff6a 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80160fc:	2b10      	cmp	r3, #16
 80160fe:	d006      	beq.n	801610e <lwip_netconn_do_close_internal+0x3e>
 8016100:	4b80      	ldr	r3, [pc, #512]	; (8016304 <lwip_netconn_do_close_internal+0x234>)
 8016102:	f240 32a3 	movw	r2, #931	; 0x3a3
 8016106:	4982      	ldr	r1, [pc, #520]	; (8016310 <lwip_netconn_do_close_internal+0x240>)
 8016108:	4880      	ldr	r0, [pc, #512]	; (801630c <lwip_netconn_do_close_internal+0x23c>)
 801610a:	f00d ff5d 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	785b      	ldrb	r3, [r3, #1]
 8016112:	2b04      	cmp	r3, #4
 8016114:	d006      	beq.n	8016124 <lwip_netconn_do_close_internal+0x54>
 8016116:	4b7b      	ldr	r3, [pc, #492]	; (8016304 <lwip_netconn_do_close_internal+0x234>)
 8016118:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 801611c:	497d      	ldr	r1, [pc, #500]	; (8016314 <lwip_netconn_do_close_internal+0x244>)
 801611e:	487b      	ldr	r0, [pc, #492]	; (801630c <lwip_netconn_do_close_internal+0x23c>)
 8016120:	f00d ff52 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	685b      	ldr	r3, [r3, #4]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d106      	bne.n	801613a <lwip_netconn_do_close_internal+0x6a>
 801612c:	4b75      	ldr	r3, [pc, #468]	; (8016304 <lwip_netconn_do_close_internal+0x234>)
 801612e:	f240 32a5 	movw	r2, #933	; 0x3a5
 8016132:	4979      	ldr	r1, [pc, #484]	; (8016318 <lwip_netconn_do_close_internal+0x248>)
 8016134:	4875      	ldr	r0, [pc, #468]	; (801630c <lwip_netconn_do_close_internal+0x23c>)
 8016136:	f00d ff47 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801613e:	2b00      	cmp	r3, #0
 8016140:	d106      	bne.n	8016150 <lwip_netconn_do_close_internal+0x80>
 8016142:	4b70      	ldr	r3, [pc, #448]	; (8016304 <lwip_netconn_do_close_internal+0x234>)
 8016144:	f240 32a6 	movw	r2, #934	; 0x3a6
 8016148:	4974      	ldr	r1, [pc, #464]	; (801631c <lwip_netconn_do_close_internal+0x24c>)
 801614a:	4870      	ldr	r0, [pc, #448]	; (801630c <lwip_netconn_do_close_internal+0x23c>)
 801614c:	f00d ff3c 	bl	8023fc8 <iprintf>

  tpcb = conn->pcb.tcp;
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	685b      	ldr	r3, [r3, #4]
 8016154:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801615a:	7a1b      	ldrb	r3, [r3, #8]
 801615c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 801615e:	7bfb      	ldrb	r3, [r7, #15]
 8016160:	f003 0301 	and.w	r3, r3, #1
 8016164:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8016166:	7bfb      	ldrb	r3, [r7, #15]
 8016168:	f003 0302 	and.w	r3, r3, #2
 801616c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 801616e:	7bfb      	ldrb	r3, [r7, #15]
 8016170:	2b03      	cmp	r3, #3
 8016172:	d102      	bne.n	801617a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8016174:	2301      	movs	r3, #1
 8016176:	75bb      	strb	r3, [r7, #22]
 8016178:	e01f      	b.n	80161ba <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 801617a:	7bbb      	ldrb	r3, [r7, #14]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d00e      	beq.n	801619e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8016180:	693b      	ldr	r3, [r7, #16]
 8016182:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8016184:	2b05      	cmp	r3, #5
 8016186:	d007      	beq.n	8016198 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8016188:	693b      	ldr	r3, [r7, #16]
 801618a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 801618c:	2b06      	cmp	r3, #6
 801618e:	d003      	beq.n	8016198 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8016190:	693b      	ldr	r3, [r7, #16]
 8016192:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8016194:	2b08      	cmp	r3, #8
 8016196:	d102      	bne.n	801619e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8016198:	2301      	movs	r3, #1
 801619a:	75bb      	strb	r3, [r7, #22]
 801619c:	e00d      	b.n	80161ba <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801619e:	7b7b      	ldrb	r3, [r7, #13]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d008      	beq.n	80161b6 <lwip_netconn_do_close_internal+0xe6>
 80161a4:	693b      	ldr	r3, [r7, #16]
 80161a6:	8b5b      	ldrh	r3, [r3, #26]
 80161a8:	f003 0310 	and.w	r3, r3, #16
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d002      	beq.n	80161b6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80161b0:	2301      	movs	r3, #1
 80161b2:	75bb      	strb	r3, [r7, #22]
 80161b4:	e001      	b.n	80161ba <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80161b6:	2300      	movs	r3, #0
 80161b8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80161ba:	7dbb      	ldrb	r3, [r7, #22]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d003      	beq.n	80161c8 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80161c0:	2100      	movs	r1, #0
 80161c2:	6938      	ldr	r0, [r7, #16]
 80161c4:	f004 fffc 	bl	801b1c0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80161c8:	693b      	ldr	r3, [r7, #16]
 80161ca:	7d1b      	ldrb	r3, [r3, #20]
 80161cc:	2b01      	cmp	r3, #1
 80161ce:	d104      	bne.n	80161da <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80161d0:	2100      	movs	r1, #0
 80161d2:	6938      	ldr	r0, [r7, #16]
 80161d4:	f005 f86c 	bl	801b2b0 <tcp_accept>
 80161d8:	e01d      	b.n	8016216 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80161da:	7bbb      	ldrb	r3, [r7, #14]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d007      	beq.n	80161f0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80161e0:	2100      	movs	r1, #0
 80161e2:	6938      	ldr	r0, [r7, #16]
 80161e4:	f004 fffe 	bl	801b1e4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80161e8:	2100      	movs	r1, #0
 80161ea:	6938      	ldr	r0, [r7, #16]
 80161ec:	f005 f860 	bl	801b2b0 <tcp_accept>
    }
    if (shut_tx) {
 80161f0:	7b7b      	ldrb	r3, [r7, #13]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d003      	beq.n	80161fe <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80161f6:	2100      	movs	r1, #0
 80161f8:	6938      	ldr	r0, [r7, #16]
 80161fa:	f005 f815 	bl	801b228 <tcp_sent>
    }
    if (shut_close) {
 80161fe:	7dbb      	ldrb	r3, [r7, #22]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d008      	beq.n	8016216 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8016204:	2200      	movs	r2, #0
 8016206:	2100      	movs	r1, #0
 8016208:	6938      	ldr	r0, [r7, #16]
 801620a:	f005 f869 	bl	801b2e0 <tcp_poll>
      tcp_err(tpcb, NULL);
 801620e:	2100      	movs	r1, #0
 8016210:	6938      	ldr	r0, [r7, #16]
 8016212:	f005 f82b 	bl	801b26c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8016216:	7dbb      	ldrb	r3, [r7, #22]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d005      	beq.n	8016228 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 801621c:	6938      	ldr	r0, [r7, #16]
 801621e:	f003 fcb9 	bl	8019b94 <tcp_close>
 8016222:	4603      	mov	r3, r0
 8016224:	75fb      	strb	r3, [r7, #23]
 8016226:	e007      	b.n	8016238 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8016228:	7bbb      	ldrb	r3, [r7, #14]
 801622a:	7b7a      	ldrb	r2, [r7, #13]
 801622c:	4619      	mov	r1, r3
 801622e:	6938      	ldr	r0, [r7, #16]
 8016230:	f003 fcdc 	bl	8019bec <tcp_shutdown>
 8016234:	4603      	mov	r3, r0
 8016236:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8016238:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d102      	bne.n	8016246 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8016240:	2301      	movs	r3, #1
 8016242:	757b      	strb	r3, [r7, #21]
 8016244:	e016      	b.n	8016274 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8016246:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801624a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801624e:	d10f      	bne.n	8016270 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016254:	7a5b      	ldrb	r3, [r3, #9]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d10c      	bne.n	8016274 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 801625a:	2301      	movs	r3, #1
 801625c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 801625e:	7dbb      	ldrb	r3, [r7, #22]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d007      	beq.n	8016274 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8016264:	6938      	ldr	r0, [r7, #16]
 8016266:	f003 fddb 	bl	8019e20 <tcp_abort>
          err = ERR_OK;
 801626a:	2300      	movs	r3, #0
 801626c:	75fb      	strb	r3, [r7, #23]
 801626e:	e001      	b.n	8016274 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8016270:	2301      	movs	r3, #1
 8016272:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8016274:	7d7b      	ldrb	r3, [r7, #21]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d052      	beq.n	8016320 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	330c      	adds	r3, #12
 8016282:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016288:	7dfa      	ldrb	r2, [r7, #23]
 801628a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	2200      	movs	r2, #0
 8016290:	629a      	str	r2, [r3, #40]	; 0x28
    conn->state = NETCONN_NONE;
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	2200      	movs	r2, #0
 8016296:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8016298:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d129      	bne.n	80162f4 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80162a0:	7dbb      	ldrb	r3, [r7, #22]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d00c      	beq.n	80162c0 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	2200      	movs	r2, #0
 80162aa:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d005      	beq.n	80162c0 <lwip_netconn_do_close_internal+0x1f0>
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162b8:	2200      	movs	r2, #0
 80162ba:	2104      	movs	r1, #4
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	4798      	blx	r3
      }
      if (shut_rx) {
 80162c0:	7bbb      	ldrb	r3, [r7, #14]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d009      	beq.n	80162da <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d005      	beq.n	80162da <lwip_netconn_do_close_internal+0x20a>
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162d2:	2200      	movs	r2, #0
 80162d4:	2100      	movs	r1, #0
 80162d6:	6878      	ldr	r0, [r7, #4]
 80162d8:	4798      	blx	r3
      }
      if (shut_tx) {
 80162da:	7b7b      	ldrb	r3, [r7, #13]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d009      	beq.n	80162f4 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d005      	beq.n	80162f4 <lwip_netconn_do_close_internal+0x224>
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162ec:	2200      	movs	r2, #0
 80162ee:	2102      	movs	r1, #2
 80162f0:	6878      	ldr	r0, [r7, #4]
 80162f2:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80162f4:	78fb      	ldrb	r3, [r7, #3]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d002      	beq.n	8016300 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80162fa:	68b8      	ldr	r0, [r7, #8]
 80162fc:	f00d fa2b 	bl	8023756 <sys_sem_signal>
    }
    return ERR_OK;
 8016300:	2300      	movs	r3, #0
 8016302:	e03c      	b.n	801637e <lwip_netconn_do_close_internal+0x2ae>
 8016304:	08025a78 	.word	0x08025a78
 8016308:	08025d4c 	.word	0x08025d4c
 801630c:	08025abc 	.word	0x08025abc
 8016310:	08025d5c 	.word	0x08025d5c
 8016314:	08025d7c 	.word	0x08025d7c
 8016318:	08025da0 	.word	0x08025da0
 801631c:	08025be0 	.word	0x08025be0
  }
  if (!close_finished) {
 8016320:	7d7b      	ldrb	r3, [r7, #21]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d11e      	bne.n	8016364 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8016326:	693b      	ldr	r3, [r7, #16]
 8016328:	7d1b      	ldrb	r3, [r3, #20]
 801632a:	2b01      	cmp	r3, #1
 801632c:	d106      	bne.n	801633c <lwip_netconn_do_close_internal+0x26c>
 801632e:	4b16      	ldr	r3, [pc, #88]	; (8016388 <lwip_netconn_do_close_internal+0x2b8>)
 8016330:	f240 4241 	movw	r2, #1089	; 0x441
 8016334:	4915      	ldr	r1, [pc, #84]	; (801638c <lwip_netconn_do_close_internal+0x2bc>)
 8016336:	4816      	ldr	r0, [pc, #88]	; (8016390 <lwip_netconn_do_close_internal+0x2c0>)
 8016338:	f00d fe46 	bl	8023fc8 <iprintf>
    if (shut_tx) {
 801633c:	7b7b      	ldrb	r3, [r7, #13]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d003      	beq.n	801634a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8016342:	4914      	ldr	r1, [pc, #80]	; (8016394 <lwip_netconn_do_close_internal+0x2c4>)
 8016344:	6938      	ldr	r0, [r7, #16]
 8016346:	f004 ff6f 	bl	801b228 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 801634a:	2201      	movs	r2, #1
 801634c:	4912      	ldr	r1, [pc, #72]	; (8016398 <lwip_netconn_do_close_internal+0x2c8>)
 801634e:	6938      	ldr	r0, [r7, #16]
 8016350:	f004 ffc6 	bl	801b2e0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8016354:	4911      	ldr	r1, [pc, #68]	; (801639c <lwip_netconn_do_close_internal+0x2cc>)
 8016356:	6938      	ldr	r0, [r7, #16]
 8016358:	f004 ff88 	bl	801b26c <tcp_err>
    tcp_arg(tpcb, conn);
 801635c:	6879      	ldr	r1, [r7, #4]
 801635e:	6938      	ldr	r0, [r7, #16]
 8016360:	f004 ff2e 	bl	801b1c0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8016364:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d106      	bne.n	801637a <lwip_netconn_do_close_internal+0x2aa>
 801636c:	4b06      	ldr	r3, [pc, #24]	; (8016388 <lwip_netconn_do_close_internal+0x2b8>)
 801636e:	f240 424d 	movw	r2, #1101	; 0x44d
 8016372:	490b      	ldr	r1, [pc, #44]	; (80163a0 <lwip_netconn_do_close_internal+0x2d0>)
 8016374:	4806      	ldr	r0, [pc, #24]	; (8016390 <lwip_netconn_do_close_internal+0x2c0>)
 8016376:	f00d fe27 	bl	8023fc8 <iprintf>
  return err;
 801637a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801637e:	4618      	mov	r0, r3
 8016380:	3718      	adds	r7, #24
 8016382:	46bd      	mov	sp, r7
 8016384:	bd80      	pop	{r7, pc}
 8016386:	bf00      	nop
 8016388:	08025a78 	.word	0x08025a78
 801638c:	08025db4 	.word	0x08025db4
 8016390:	08025abc 	.word	0x08025abc
 8016394:	08015929 	.word	0x08015929
 8016398:	08015859 	.word	0x08015859
 801639c:	080159d5 	.word	0x080159d5
 80163a0:	08025dd8 	.word	0x08025dd8

080163a4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b084      	sub	sp, #16
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	785b      	ldrb	r3, [r3, #1]
 80163b6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80163b8:	7afb      	ldrb	r3, [r7, #11]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d00d      	beq.n	80163da <lwip_netconn_do_delconn+0x36>
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	781b      	ldrb	r3, [r3, #0]
 80163c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80163c8:	2b10      	cmp	r3, #16
 80163ca:	d006      	beq.n	80163da <lwip_netconn_do_delconn+0x36>
 80163cc:	4b61      	ldr	r3, [pc, #388]	; (8016554 <lwip_netconn_do_delconn+0x1b0>)
 80163ce:	f240 425e 	movw	r2, #1118	; 0x45e
 80163d2:	4961      	ldr	r1, [pc, #388]	; (8016558 <lwip_netconn_do_delconn+0x1b4>)
 80163d4:	4861      	ldr	r0, [pc, #388]	; (801655c <lwip_netconn_do_delconn+0x1b8>)
 80163d6:	f00d fdf7 	bl	8023fc8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80163da:	7afb      	ldrb	r3, [r7, #11]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d005      	beq.n	80163ec <lwip_netconn_do_delconn+0x48>
 80163e0:	7afb      	ldrb	r3, [r7, #11]
 80163e2:	2b02      	cmp	r3, #2
 80163e4:	d002      	beq.n	80163ec <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80163e6:	7afb      	ldrb	r3, [r7, #11]
 80163e8:	2b03      	cmp	r3, #3
 80163ea:	d10a      	bne.n	8016402 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 80163ec:	7afb      	ldrb	r3, [r7, #11]
 80163ee:	2b03      	cmp	r3, #3
 80163f0:	d10b      	bne.n	801640a <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80163fa:	f003 0304 	and.w	r3, r3, #4
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d103      	bne.n	801640a <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	22fb      	movs	r2, #251	; 0xfb
 8016406:	711a      	strb	r2, [r3, #4]
 8016408:	e098      	b.n	801653c <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 801640a:	7afb      	ldrb	r3, [r7, #11]
 801640c:	2b03      	cmp	r3, #3
 801640e:	d10e      	bne.n	801642e <lwip_netconn_do_delconn+0x8a>
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016418:	f003 0304 	and.w	r3, r3, #4
 801641c:	2b00      	cmp	r3, #0
 801641e:	d106      	bne.n	801642e <lwip_netconn_do_delconn+0x8a>
 8016420:	4b4c      	ldr	r3, [pc, #304]	; (8016554 <lwip_netconn_do_delconn+0x1b0>)
 8016422:	f240 427a 	movw	r2, #1146	; 0x47a
 8016426:	494e      	ldr	r1, [pc, #312]	; (8016560 <lwip_netconn_do_delconn+0x1bc>)
 8016428:	484c      	ldr	r0, [pc, #304]	; (801655c <lwip_netconn_do_delconn+0x1b8>)
 801642a:	f00d fdcd 	bl	8023fc8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	2200      	movs	r2, #0
 8016432:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	4618      	mov	r0, r3
 801643a:	f7ff fdcb 	bl	8015fd4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	685b      	ldr	r3, [r3, #4]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d05f      	beq.n	8016508 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	781b      	ldrb	r3, [r3, #0]
 801644e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016452:	2b10      	cmp	r3, #16
 8016454:	d00d      	beq.n	8016472 <lwip_netconn_do_delconn+0xce>
 8016456:	2b20      	cmp	r3, #32
 8016458:	d151      	bne.n	80164fe <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	685b      	ldr	r3, [r3, #4]
 8016460:	2200      	movs	r2, #0
 8016462:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	685b      	ldr	r3, [r3, #4]
 801646a:	4618      	mov	r0, r3
 801646c:	f00a fa3c 	bl	80208e8 <udp_remove>
          break;
 8016470:	e046      	b.n	8016500 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016478:	2b00      	cmp	r3, #0
 801647a:	d006      	beq.n	801648a <lwip_netconn_do_delconn+0xe6>
 801647c:	4b35      	ldr	r3, [pc, #212]	; (8016554 <lwip_netconn_do_delconn+0x1b0>)
 801647e:	f240 4294 	movw	r2, #1172	; 0x494
 8016482:	4938      	ldr	r1, [pc, #224]	; (8016564 <lwip_netconn_do_delconn+0x1c0>)
 8016484:	4835      	ldr	r0, [pc, #212]	; (801655c <lwip_netconn_do_delconn+0x1b8>)
 8016486:	f00d fd9f 	bl	8023fc8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	2204      	movs	r2, #4
 8016490:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	2203      	movs	r2, #3
 8016496:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	68fa      	ldr	r2, [r7, #12]
 801649e:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	2100      	movs	r1, #0
 80164a6:	4618      	mov	r0, r3
 80164a8:	f7ff fe12 	bl	80160d0 <lwip_netconn_do_close_internal>
 80164ac:	4603      	mov	r3, r0
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d04b      	beq.n	801654a <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	785b      	ldrb	r3, [r3, #1]
 80164b8:	2b04      	cmp	r3, #4
 80164ba:	d006      	beq.n	80164ca <lwip_netconn_do_delconn+0x126>
 80164bc:	4b25      	ldr	r3, [pc, #148]	; (8016554 <lwip_netconn_do_delconn+0x1b0>)
 80164be:	f240 429a 	movw	r2, #1178	; 0x49a
 80164c2:	4929      	ldr	r1, [pc, #164]	; (8016568 <lwip_netconn_do_delconn+0x1c4>)
 80164c4:	4825      	ldr	r0, [pc, #148]	; (801655c <lwip_netconn_do_delconn+0x1b8>)
 80164c6:	f00d fd7f 	bl	8023fc8 <iprintf>
            UNLOCK_TCPIP_CORE();
 80164ca:	4828      	ldr	r0, [pc, #160]	; (801656c <lwip_netconn_do_delconn+0x1c8>)
 80164cc:	f00d f9d7 	bl	802387e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	330c      	adds	r3, #12
 80164d6:	2100      	movs	r1, #0
 80164d8:	4618      	mov	r0, r3
 80164da:	f00d f90b 	bl	80236f4 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80164de:	4823      	ldr	r0, [pc, #140]	; (801656c <lwip_netconn_do_delconn+0x1c8>)
 80164e0:	f00d f9be 	bl	8023860 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	785b      	ldrb	r3, [r3, #1]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d02d      	beq.n	801654a <lwip_netconn_do_delconn+0x1a6>
 80164ee:	4b19      	ldr	r3, [pc, #100]	; (8016554 <lwip_netconn_do_delconn+0x1b0>)
 80164f0:	f240 429e 	movw	r2, #1182	; 0x49e
 80164f4:	491c      	ldr	r1, [pc, #112]	; (8016568 <lwip_netconn_do_delconn+0x1c4>)
 80164f6:	4819      	ldr	r0, [pc, #100]	; (801655c <lwip_netconn_do_delconn+0x1b8>)
 80164f8:	f00d fd66 	bl	8023fc8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80164fc:	e025      	b.n	801654a <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 80164fe:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	2200      	movs	r2, #0
 8016506:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801650e:	2b00      	cmp	r3, #0
 8016510:	d007      	beq.n	8016522 <lwip_netconn_do_delconn+0x17e>
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016518:	68fa      	ldr	r2, [r7, #12]
 801651a:	6810      	ldr	r0, [r2, #0]
 801651c:	2200      	movs	r2, #0
 801651e:	2100      	movs	r1, #0
 8016520:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016528:	2b00      	cmp	r3, #0
 801652a:	d007      	beq.n	801653c <lwip_netconn_do_delconn+0x198>
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016532:	68fa      	ldr	r2, [r7, #12]
 8016534:	6810      	ldr	r0, [r2, #0]
 8016536:	2200      	movs	r2, #0
 8016538:	2102      	movs	r1, #2
 801653a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	330c      	adds	r3, #12
 8016542:	4618      	mov	r0, r3
 8016544:	f00d f92c 	bl	80237a0 <sys_sem_valid>
 8016548:	e000      	b.n	801654c <lwip_netconn_do_delconn+0x1a8>
          return;
 801654a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 801654c:	3710      	adds	r7, #16
 801654e:	46bd      	mov	sp, r7
 8016550:	bd80      	pop	{r7, pc}
 8016552:	bf00      	nop
 8016554:	08025a78 	.word	0x08025a78
 8016558:	08025de8 	.word	0x08025de8
 801655c:	08025abc 	.word	0x08025abc
 8016560:	08025dfc 	.word	0x08025dfc
 8016564:	08025e1c 	.word	0x08025e1c
 8016568:	08025e38 	.word	0x08025e38
 801656c:	2007ba84 	.word	0x2007ba84

08016570 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b084      	sub	sp, #16
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 801657c:	68bb      	ldr	r3, [r7, #8]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	685b      	ldr	r3, [r3, #4]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d025      	beq.n	80165d2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016586:	68bb      	ldr	r3, [r7, #8]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	781b      	ldrb	r3, [r3, #0]
 801658c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016590:	2b10      	cmp	r3, #16
 8016592:	d00e      	beq.n	80165b2 <lwip_netconn_do_bind+0x42>
 8016594:	2b20      	cmp	r3, #32
 8016596:	d119      	bne.n	80165cc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016598:	68bb      	ldr	r3, [r7, #8]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	6858      	ldr	r0, [r3, #4]
 801659e:	68bb      	ldr	r3, [r7, #8]
 80165a0:	6899      	ldr	r1, [r3, #8]
 80165a2:	68bb      	ldr	r3, [r7, #8]
 80165a4:	899b      	ldrh	r3, [r3, #12]
 80165a6:	461a      	mov	r2, r3
 80165a8:	f009 fffc 	bl	80205a4 <udp_bind>
 80165ac:	4603      	mov	r3, r0
 80165ae:	73fb      	strb	r3, [r7, #15]
        break;
 80165b0:	e011      	b.n	80165d6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80165b2:	68bb      	ldr	r3, [r7, #8]
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	6858      	ldr	r0, [r3, #4]
 80165b8:	68bb      	ldr	r3, [r7, #8]
 80165ba:	6899      	ldr	r1, [r3, #8]
 80165bc:	68bb      	ldr	r3, [r7, #8]
 80165be:	899b      	ldrh	r3, [r3, #12]
 80165c0:	461a      	mov	r2, r3
 80165c2:	f003 fc39 	bl	8019e38 <tcp_bind>
 80165c6:	4603      	mov	r3, r0
 80165c8:	73fb      	strb	r3, [r7, #15]
        break;
 80165ca:	e004      	b.n	80165d6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80165cc:	23fa      	movs	r3, #250	; 0xfa
 80165ce:	73fb      	strb	r3, [r7, #15]
        break;
 80165d0:	e001      	b.n	80165d6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80165d2:	23fa      	movs	r3, #250	; 0xfa
 80165d4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80165d6:	68bb      	ldr	r3, [r7, #8]
 80165d8:	7bfa      	ldrb	r2, [r7, #15]
 80165da:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80165dc:	bf00      	nop
 80165de:	3710      	adds	r7, #16
 80165e0:	46bd      	mov	sp, r7
 80165e2:	bd80      	pop	{r7, pc}

080165e4 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b088      	sub	sp, #32
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	60f8      	str	r0, [r7, #12]
 80165ec:	60b9      	str	r1, [r7, #8]
 80165ee:	4613      	mov	r3, r2
 80165f0:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 80165f2:	2300      	movs	r3, #0
 80165f4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80165fa:	69bb      	ldr	r3, [r7, #24]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d102      	bne.n	8016606 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8016600:	f06f 0305 	mvn.w	r3, #5
 8016604:	e074      	b.n	80166f0 <lwip_netconn_do_connected+0x10c>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8016606:	69bb      	ldr	r3, [r7, #24]
 8016608:	785b      	ldrb	r3, [r3, #1]
 801660a:	2b03      	cmp	r3, #3
 801660c:	d006      	beq.n	801661c <lwip_netconn_do_connected+0x38>
 801660e:	4b3a      	ldr	r3, [pc, #232]	; (80166f8 <lwip_netconn_do_connected+0x114>)
 8016610:	f240 5223 	movw	r2, #1315	; 0x523
 8016614:	4939      	ldr	r1, [pc, #228]	; (80166fc <lwip_netconn_do_connected+0x118>)
 8016616:	483a      	ldr	r0, [pc, #232]	; (8016700 <lwip_netconn_do_connected+0x11c>)
 8016618:	f00d fcd6 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 801661c:	69bb      	ldr	r3, [r7, #24]
 801661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016620:	2b00      	cmp	r3, #0
 8016622:	d10d      	bne.n	8016640 <lwip_netconn_do_connected+0x5c>
 8016624:	69bb      	ldr	r3, [r7, #24]
 8016626:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801662a:	f003 0304 	and.w	r3, r3, #4
 801662e:	2b00      	cmp	r3, #0
 8016630:	d106      	bne.n	8016640 <lwip_netconn_do_connected+0x5c>
 8016632:	4b31      	ldr	r3, [pc, #196]	; (80166f8 <lwip_netconn_do_connected+0x114>)
 8016634:	f240 5224 	movw	r2, #1316	; 0x524
 8016638:	4932      	ldr	r1, [pc, #200]	; (8016704 <lwip_netconn_do_connected+0x120>)
 801663a:	4831      	ldr	r0, [pc, #196]	; (8016700 <lwip_netconn_do_connected+0x11c>)
 801663c:	f00d fcc4 	bl	8023fc8 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8016640:	69bb      	ldr	r3, [r7, #24]
 8016642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016644:	2b00      	cmp	r3, #0
 8016646:	d008      	beq.n	801665a <lwip_netconn_do_connected+0x76>
    conn->current_msg->err = err;
 8016648:	69bb      	ldr	r3, [r7, #24]
 801664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801664c:	79fa      	ldrb	r2, [r7, #7]
 801664e:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016650:	69bb      	ldr	r3, [r7, #24]
 8016652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	330c      	adds	r3, #12
 8016658:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 801665a:	69bb      	ldr	r3, [r7, #24]
 801665c:	781b      	ldrb	r3, [r3, #0]
 801665e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016662:	2b10      	cmp	r3, #16
 8016664:	d106      	bne.n	8016674 <lwip_netconn_do_connected+0x90>
 8016666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d102      	bne.n	8016674 <lwip_netconn_do_connected+0x90>
    setup_tcp(conn);
 801666e:	69b8      	ldr	r0, [r7, #24]
 8016670:	f7ff fa8a 	bl	8015b88 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8016674:	69bb      	ldr	r3, [r7, #24]
 8016676:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801667a:	f003 0304 	and.w	r3, r3, #4
 801667e:	2b00      	cmp	r3, #0
 8016680:	bf0c      	ite	eq
 8016682:	2301      	moveq	r3, #1
 8016684:	2300      	movne	r3, #0
 8016686:	b2db      	uxtb	r3, r3
 8016688:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 801668a:	69bb      	ldr	r3, [r7, #24]
 801668c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016690:	f023 0304 	bic.w	r3, r3, #4
 8016694:	b2da      	uxtb	r2, r3
 8016696:	69bb      	ldr	r3, [r7, #24]
 8016698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  LWIP_ASSERT("blocking connect state error",
 801669c:	697b      	ldr	r3, [r7, #20]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d002      	beq.n	80166a8 <lwip_netconn_do_connected+0xc4>
 80166a2:	69fb      	ldr	r3, [r7, #28]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d10c      	bne.n	80166c2 <lwip_netconn_do_connected+0xde>
 80166a8:	697b      	ldr	r3, [r7, #20]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d102      	bne.n	80166b4 <lwip_netconn_do_connected+0xd0>
 80166ae:	69fb      	ldr	r3, [r7, #28]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d006      	beq.n	80166c2 <lwip_netconn_do_connected+0xde>
 80166b4:	4b10      	ldr	r3, [pc, #64]	; (80166f8 <lwip_netconn_do_connected+0x114>)
 80166b6:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 80166ba:	4913      	ldr	r1, [pc, #76]	; (8016708 <lwip_netconn_do_connected+0x124>)
 80166bc:	4810      	ldr	r0, [pc, #64]	; (8016700 <lwip_netconn_do_connected+0x11c>)
 80166be:	f00d fc83 	bl	8023fc8 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 80166c2:	69bb      	ldr	r3, [r7, #24]
 80166c4:	2200      	movs	r2, #0
 80166c6:	629a      	str	r2, [r3, #40]	; 0x28
  conn->state = NETCONN_NONE;
 80166c8:	69bb      	ldr	r3, [r7, #24]
 80166ca:	2200      	movs	r2, #0
 80166cc:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80166ce:	69bb      	ldr	r3, [r7, #24]
 80166d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d005      	beq.n	80166e2 <lwip_netconn_do_connected+0xfe>
 80166d6:	69bb      	ldr	r3, [r7, #24]
 80166d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166da:	2200      	movs	r2, #0
 80166dc:	2102      	movs	r1, #2
 80166de:	69b8      	ldr	r0, [r7, #24]
 80166e0:	4798      	blx	r3

  if (was_blocking) {
 80166e2:	697b      	ldr	r3, [r7, #20]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d002      	beq.n	80166ee <lwip_netconn_do_connected+0x10a>
    sys_sem_signal(op_completed_sem);
 80166e8:	69f8      	ldr	r0, [r7, #28]
 80166ea:	f00d f834 	bl	8023756 <sys_sem_signal>
  }
  return ERR_OK;
 80166ee:	2300      	movs	r3, #0
}
 80166f0:	4618      	mov	r0, r3
 80166f2:	3720      	adds	r7, #32
 80166f4:	46bd      	mov	sp, r7
 80166f6:	bd80      	pop	{r7, pc}
 80166f8:	08025a78 	.word	0x08025a78
 80166fc:	08025e40 	.word	0x08025e40
 8016700:	08025abc 	.word	0x08025abc
 8016704:	08025e60 	.word	0x08025e60
 8016708:	08025ea0 	.word	0x08025ea0

0801670c <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 801670c:	b580      	push	{r7, lr}
 801670e:	b086      	sub	sp, #24
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8016718:	693b      	ldr	r3, [r7, #16]
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	685b      	ldr	r3, [r3, #4]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d102      	bne.n	8016728 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8016722:	23f1      	movs	r3, #241	; 0xf1
 8016724:	75fb      	strb	r3, [r7, #23]
 8016726:	e0a0      	b.n	801686a <lwip_netconn_do_connect+0x15e>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016728:	693b      	ldr	r3, [r7, #16]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	781b      	ldrb	r3, [r3, #0]
 801672e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016732:	2b10      	cmp	r3, #16
 8016734:	d00f      	beq.n	8016756 <lwip_netconn_do_connect+0x4a>
 8016736:	2b20      	cmp	r3, #32
 8016738:	f040 808c 	bne.w	8016854 <lwip_netconn_do_connect+0x148>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801673c:	693b      	ldr	r3, [r7, #16]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	6858      	ldr	r0, [r3, #4]
 8016742:	693b      	ldr	r3, [r7, #16]
 8016744:	6899      	ldr	r1, [r3, #8]
 8016746:	693b      	ldr	r3, [r7, #16]
 8016748:	899b      	ldrh	r3, [r3, #12]
 801674a:	461a      	mov	r2, r3
 801674c:	f00a f818 	bl	8020780 <udp_connect>
 8016750:	4603      	mov	r3, r0
 8016752:	75fb      	strb	r3, [r7, #23]
        break;
 8016754:	e089      	b.n	801686a <lwip_netconn_do_connect+0x15e>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8016756:	693b      	ldr	r3, [r7, #16]
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	785b      	ldrb	r3, [r3, #1]
 801675c:	2b03      	cmp	r3, #3
 801675e:	d102      	bne.n	8016766 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8016760:	23f7      	movs	r3, #247	; 0xf7
 8016762:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8016764:	e080      	b.n	8016868 <lwip_netconn_do_connect+0x15c>
        } else if (msg->conn->state != NETCONN_NONE) {
 8016766:	693b      	ldr	r3, [r7, #16]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	785b      	ldrb	r3, [r3, #1]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d002      	beq.n	8016776 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8016770:	23f6      	movs	r3, #246	; 0xf6
 8016772:	75fb      	strb	r3, [r7, #23]
        break;
 8016774:	e078      	b.n	8016868 <lwip_netconn_do_connect+0x15c>
          setup_tcp(msg->conn);
 8016776:	693b      	ldr	r3, [r7, #16]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	4618      	mov	r0, r3
 801677c:	f7ff fa04 	bl	8015b88 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8016780:	693b      	ldr	r3, [r7, #16]
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	6858      	ldr	r0, [r3, #4]
 8016786:	693b      	ldr	r3, [r7, #16]
 8016788:	6899      	ldr	r1, [r3, #8]
 801678a:	693b      	ldr	r3, [r7, #16]
 801678c:	899a      	ldrh	r2, [r3, #12]
 801678e:	4b3b      	ldr	r3, [pc, #236]	; (801687c <lwip_netconn_do_connect+0x170>)
 8016790:	f003 fda4 	bl	801a2dc <tcp_connect>
 8016794:	4603      	mov	r3, r0
 8016796:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8016798:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d163      	bne.n	8016868 <lwip_netconn_do_connect+0x15c>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80167a0:	693b      	ldr	r3, [r7, #16]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80167a8:	f003 0302 	and.w	r3, r3, #2
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	bf14      	ite	ne
 80167b0:	2301      	movne	r3, #1
 80167b2:	2300      	moveq	r3, #0
 80167b4:	b2db      	uxtb	r3, r3
 80167b6:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 80167b8:	693b      	ldr	r3, [r7, #16]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	2203      	movs	r2, #3
 80167be:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80167c0:	7bfb      	ldrb	r3, [r7, #15]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d00b      	beq.n	80167de <lwip_netconn_do_connect+0xd2>
 80167c6:	693b      	ldr	r3, [r7, #16]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80167ce:	693b      	ldr	r3, [r7, #16]
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	f042 0204 	orr.w	r2, r2, #4
 80167d6:	b2d2      	uxtb	r2, r2
 80167d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80167dc:	e00a      	b.n	80167f4 <lwip_netconn_do_connect+0xe8>
 80167de:	693b      	ldr	r3, [r7, #16]
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80167e6:	693b      	ldr	r3, [r7, #16]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	f022 0204 	bic.w	r2, r2, #4
 80167ee:	b2d2      	uxtb	r2, r2
 80167f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            if (non_blocking) {
 80167f4:	7bfb      	ldrb	r3, [r7, #15]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d002      	beq.n	8016800 <lwip_netconn_do_connect+0xf4>
              err = ERR_INPROGRESS;
 80167fa:	23fb      	movs	r3, #251	; 0xfb
 80167fc:	75fb      	strb	r3, [r7, #23]
        break;
 80167fe:	e033      	b.n	8016868 <lwip_netconn_do_connect+0x15c>
              msg->conn->current_msg = msg;
 8016800:	693b      	ldr	r3, [r7, #16]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	693a      	ldr	r2, [r7, #16]
 8016806:	629a      	str	r2, [r3, #40]	; 0x28
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8016808:	693b      	ldr	r3, [r7, #16]
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	785b      	ldrb	r3, [r3, #1]
 801680e:	2b03      	cmp	r3, #3
 8016810:	d006      	beq.n	8016820 <lwip_netconn_do_connect+0x114>
 8016812:	4b1b      	ldr	r3, [pc, #108]	; (8016880 <lwip_netconn_do_connect+0x174>)
 8016814:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8016818:	491a      	ldr	r1, [pc, #104]	; (8016884 <lwip_netconn_do_connect+0x178>)
 801681a:	481b      	ldr	r0, [pc, #108]	; (8016888 <lwip_netconn_do_connect+0x17c>)
 801681c:	f00d fbd4 	bl	8023fc8 <iprintf>
              UNLOCK_TCPIP_CORE();
 8016820:	481a      	ldr	r0, [pc, #104]	; (801688c <lwip_netconn_do_connect+0x180>)
 8016822:	f00d f82c 	bl	802387e <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016826:	693b      	ldr	r3, [r7, #16]
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	330c      	adds	r3, #12
 801682c:	2100      	movs	r1, #0
 801682e:	4618      	mov	r0, r3
 8016830:	f00c ff60 	bl	80236f4 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8016834:	4815      	ldr	r0, [pc, #84]	; (801688c <lwip_netconn_do_connect+0x180>)
 8016836:	f00d f813 	bl	8023860 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 801683a:	693b      	ldr	r3, [r7, #16]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	785b      	ldrb	r3, [r3, #1]
 8016840:	2b03      	cmp	r3, #3
 8016842:	d116      	bne.n	8016872 <lwip_netconn_do_connect+0x166>
 8016844:	4b0e      	ldr	r3, [pc, #56]	; (8016880 <lwip_netconn_do_connect+0x174>)
 8016846:	f240 5274 	movw	r2, #1396	; 0x574
 801684a:	490e      	ldr	r1, [pc, #56]	; (8016884 <lwip_netconn_do_connect+0x178>)
 801684c:	480e      	ldr	r0, [pc, #56]	; (8016888 <lwip_netconn_do_connect+0x17c>)
 801684e:	f00d fbbb 	bl	8023fc8 <iprintf>
              return;
 8016852:	e00e      	b.n	8016872 <lwip_netconn_do_connect+0x166>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8016854:	4b0a      	ldr	r3, [pc, #40]	; (8016880 <lwip_netconn_do_connect+0x174>)
 8016856:	f240 527d 	movw	r2, #1405	; 0x57d
 801685a:	490d      	ldr	r1, [pc, #52]	; (8016890 <lwip_netconn_do_connect+0x184>)
 801685c:	480a      	ldr	r0, [pc, #40]	; (8016888 <lwip_netconn_do_connect+0x17c>)
 801685e:	f00d fbb3 	bl	8023fc8 <iprintf>
 8016862:	23fa      	movs	r3, #250	; 0xfa
 8016864:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8016866:	e000      	b.n	801686a <lwip_netconn_do_connect+0x15e>
        break;
 8016868:	bf00      	nop
    }
  }
  msg->err = err;
 801686a:	693b      	ldr	r3, [r7, #16]
 801686c:	7dfa      	ldrb	r2, [r7, #23]
 801686e:	711a      	strb	r2, [r3, #4]
 8016870:	e000      	b.n	8016874 <lwip_netconn_do_connect+0x168>
              return;
 8016872:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8016874:	3718      	adds	r7, #24
 8016876:	46bd      	mov	sp, r7
 8016878:	bd80      	pop	{r7, pc}
 801687a:	bf00      	nop
 801687c:	080165e5 	.word	0x080165e5
 8016880:	08025a78 	.word	0x08025a78
 8016884:	08025e38 	.word	0x08025e38
 8016888:	08025abc 	.word	0x08025abc
 801688c:	2007ba84 	.word	0x2007ba84
 8016890:	08025ec0 	.word	0x08025ec0

08016894 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b086      	sub	sp, #24
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80168a0:	697b      	ldr	r3, [r7, #20]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	685b      	ldr	r3, [r3, #4]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d07f      	beq.n	80169aa <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80168aa:	697b      	ldr	r3, [r7, #20]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	781b      	ldrb	r3, [r3, #0]
 80168b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80168b4:	2b10      	cmp	r3, #16
 80168b6:	d175      	bne.n	80169a4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80168b8:	697b      	ldr	r3, [r7, #20]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	785b      	ldrb	r3, [r3, #1]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d165      	bne.n	801698e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80168c2:	697b      	ldr	r3, [r7, #20]
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	685b      	ldr	r3, [r3, #4]
 80168c8:	7d1b      	ldrb	r3, [r3, #20]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d002      	beq.n	80168d4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80168ce:	23fa      	movs	r3, #250	; 0xfa
 80168d0:	72fb      	strb	r3, [r7, #11]
 80168d2:	e06c      	b.n	80169ae <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80168d4:	23ff      	movs	r3, #255	; 0xff
 80168d6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80168d8:	697b      	ldr	r3, [r7, #20]
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	685b      	ldr	r3, [r3, #4]
 80168de:	f107 020b 	add.w	r2, r7, #11
 80168e2:	7cf9      	ldrb	r1, [r7, #19]
 80168e4:	4618      	mov	r0, r3
 80168e6:	f003 fb5f 	bl	8019fa8 <tcp_listen_with_backlog_and_err>
 80168ea:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d05d      	beq.n	80169ae <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80168f2:	697b      	ldr	r3, [r7, #20]
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	3310      	adds	r3, #16
 80168f8:	4618      	mov	r0, r3
 80168fa:	f00c fe97 	bl	802362c <sys_mbox_valid>
 80168fe:	4603      	mov	r3, r0
 8016900:	2b00      	cmp	r3, #0
 8016902:	d00b      	beq.n	801691c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8016904:	697b      	ldr	r3, [r7, #20]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	3310      	adds	r3, #16
 801690a:	4618      	mov	r0, r3
 801690c:	f00c fdfa 	bl	8023504 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8016910:	697b      	ldr	r3, [r7, #20]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	3310      	adds	r3, #16
 8016916:	4618      	mov	r0, r3
 8016918:	f00c fe99 	bl	802364e <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 801691c:	2300      	movs	r3, #0
 801691e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8016920:	697b      	ldr	r3, [r7, #20]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	3314      	adds	r3, #20
 8016926:	4618      	mov	r0, r3
 8016928:	f00c fe80 	bl	802362c <sys_mbox_valid>
 801692c:	4603      	mov	r3, r0
 801692e:	2b00      	cmp	r3, #0
 8016930:	d108      	bne.n	8016944 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8016932:	697b      	ldr	r3, [r7, #20]
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	3314      	adds	r3, #20
 8016938:	2106      	movs	r1, #6
 801693a:	4618      	mov	r0, r3
 801693c:	f00c fdb0 	bl	80234a0 <sys_mbox_new>
 8016940:	4603      	mov	r3, r0
 8016942:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8016944:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d118      	bne.n	801697e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 801694c:	697b      	ldr	r3, [r7, #20]
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	2202      	movs	r2, #2
 8016952:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8016954:	697b      	ldr	r3, [r7, #20]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	68fa      	ldr	r2, [r7, #12]
 801695a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 801695c:	697b      	ldr	r3, [r7, #20]
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	685a      	ldr	r2, [r3, #4]
 8016962:	697b      	ldr	r3, [r7, #20]
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	4619      	mov	r1, r3
 8016968:	4610      	mov	r0, r2
 801696a:	f004 fc29 	bl	801b1c0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 801696e:	697b      	ldr	r3, [r7, #20]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	685b      	ldr	r3, [r3, #4]
 8016974:	4912      	ldr	r1, [pc, #72]	; (80169c0 <lwip_netconn_do_listen+0x12c>)
 8016976:	4618      	mov	r0, r3
 8016978:	f004 fc9a 	bl	801b2b0 <tcp_accept>
 801697c:	e017      	b.n	80169ae <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 801697e:	68f8      	ldr	r0, [r7, #12]
 8016980:	f003 f908 	bl	8019b94 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8016984:	697b      	ldr	r3, [r7, #20]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	2200      	movs	r2, #0
 801698a:	605a      	str	r2, [r3, #4]
 801698c:	e00f      	b.n	80169ae <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 801698e:	697b      	ldr	r3, [r7, #20]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	785b      	ldrb	r3, [r3, #1]
 8016994:	2b02      	cmp	r3, #2
 8016996:	d102      	bne.n	801699e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8016998:	2300      	movs	r3, #0
 801699a:	72fb      	strb	r3, [r7, #11]
 801699c:	e007      	b.n	80169ae <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 801699e:	23f5      	movs	r3, #245	; 0xf5
 80169a0:	72fb      	strb	r3, [r7, #11]
 80169a2:	e004      	b.n	80169ae <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80169a4:	23f0      	movs	r3, #240	; 0xf0
 80169a6:	72fb      	strb	r3, [r7, #11]
 80169a8:	e001      	b.n	80169ae <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80169aa:	23f5      	movs	r3, #245	; 0xf5
 80169ac:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80169ae:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80169b2:	697b      	ldr	r3, [r7, #20]
 80169b4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80169b6:	bf00      	nop
 80169b8:	3718      	adds	r7, #24
 80169ba:	46bd      	mov	sp, r7
 80169bc:	bd80      	pop	{r7, pc}
 80169be:	bf00      	nop
 80169c0:	08015bd9 	.word	0x08015bd9

080169c4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b086      	sub	sp, #24
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80169d0:	693b      	ldr	r3, [r7, #16]
 80169d2:	2200      	movs	r2, #0
 80169d4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80169d6:	693b      	ldr	r3, [r7, #16]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	685b      	ldr	r3, [r3, #4]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d022      	beq.n	8016a26 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80169e0:	693b      	ldr	r3, [r7, #16]
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	781b      	ldrb	r3, [r3, #0]
 80169e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80169ea:	2b10      	cmp	r3, #16
 80169ec:	d11b      	bne.n	8016a26 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80169ee:	693b      	ldr	r3, [r7, #16]
 80169f0:	689b      	ldr	r3, [r3, #8]
 80169f2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80169f4:	697b      	ldr	r3, [r7, #20]
 80169f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80169fa:	d202      	bcs.n	8016a02 <lwip_netconn_do_recv+0x3e>
 80169fc:	697b      	ldr	r3, [r7, #20]
 80169fe:	b29b      	uxth	r3, r3
 8016a00:	e001      	b.n	8016a06 <lwip_netconn_do_recv+0x42>
 8016a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a06:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8016a08:	693b      	ldr	r3, [r7, #16]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	685b      	ldr	r3, [r3, #4]
 8016a0e:	89fa      	ldrh	r2, [r7, #14]
 8016a10:	4611      	mov	r1, r2
 8016a12:	4618      	mov	r0, r3
 8016a14:	f003 fbcc 	bl	801a1b0 <tcp_recved>
        remaining -= recved;
 8016a18:	89fb      	ldrh	r3, [r7, #14]
 8016a1a:	697a      	ldr	r2, [r7, #20]
 8016a1c:	1ad3      	subs	r3, r2, r3
 8016a1e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8016a20:	697b      	ldr	r3, [r7, #20]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d1e6      	bne.n	80169f4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8016a26:	bf00      	nop
 8016a28:	3718      	adds	r7, #24
 8016a2a:	46bd      	mov	sp, r7
 8016a2c:	bd80      	pop	{r7, pc}
	...

08016a30 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b088      	sub	sp, #32
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
 8016a38:	460b      	mov	r3, r1
 8016a3a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d106      	bne.n	8016a54 <lwip_netconn_do_writemore+0x24>
 8016a46:	4b61      	ldr	r3, [pc, #388]	; (8016bcc <lwip_netconn_do_writemore+0x19c>)
 8016a48:	f240 6273 	movw	r2, #1651	; 0x673
 8016a4c:	4960      	ldr	r1, [pc, #384]	; (8016bd0 <lwip_netconn_do_writemore+0x1a0>)
 8016a4e:	4861      	ldr	r0, [pc, #388]	; (8016bd4 <lwip_netconn_do_writemore+0x1a4>)
 8016a50:	f00d faba 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	785b      	ldrb	r3, [r3, #1]
 8016a58:	2b01      	cmp	r3, #1
 8016a5a:	d006      	beq.n	8016a6a <lwip_netconn_do_writemore+0x3a>
 8016a5c:	4b5b      	ldr	r3, [pc, #364]	; (8016bcc <lwip_netconn_do_writemore+0x19c>)
 8016a5e:	f240 6274 	movw	r2, #1652	; 0x674
 8016a62:	495d      	ldr	r1, [pc, #372]	; (8016bd8 <lwip_netconn_do_writemore+0x1a8>)
 8016a64:	485b      	ldr	r0, [pc, #364]	; (8016bd4 <lwip_netconn_do_writemore+0x1a4>)
 8016a66:	f00d faaf 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d106      	bne.n	8016a80 <lwip_netconn_do_writemore+0x50>
 8016a72:	4b56      	ldr	r3, [pc, #344]	; (8016bcc <lwip_netconn_do_writemore+0x19c>)
 8016a74:	f240 6275 	movw	r2, #1653	; 0x675
 8016a78:	4958      	ldr	r1, [pc, #352]	; (8016bdc <lwip_netconn_do_writemore+0x1ac>)
 8016a7a:	4856      	ldr	r0, [pc, #344]	; (8016bd4 <lwip_netconn_do_writemore+0x1a4>)
 8016a7c:	f00d faa4 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	685b      	ldr	r3, [r3, #4]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d106      	bne.n	8016a96 <lwip_netconn_do_writemore+0x66>
 8016a88:	4b50      	ldr	r3, [pc, #320]	; (8016bcc <lwip_netconn_do_writemore+0x19c>)
 8016a8a:	f240 6276 	movw	r2, #1654	; 0x676
 8016a8e:	4954      	ldr	r1, [pc, #336]	; (8016be0 <lwip_netconn_do_writemore+0x1b0>)
 8016a90:	4850      	ldr	r0, [pc, #320]	; (8016bd4 <lwip_netconn_do_writemore+0x1a4>)
 8016a92:	f00d fa99 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a9a:	699a      	ldr	r2, [r3, #24]
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016aa0:	695b      	ldr	r3, [r3, #20]
 8016aa2:	429a      	cmp	r2, r3
 8016aa4:	d306      	bcc.n	8016ab4 <lwip_netconn_do_writemore+0x84>
 8016aa6:	4b49      	ldr	r3, [pc, #292]	; (8016bcc <lwip_netconn_do_writemore+0x19c>)
 8016aa8:	f240 6277 	movw	r2, #1655	; 0x677
 8016aac:	494d      	ldr	r1, [pc, #308]	; (8016be4 <lwip_netconn_do_writemore+0x1b4>)
 8016aae:	4849      	ldr	r0, [pc, #292]	; (8016bd4 <lwip_netconn_do_writemore+0x1a4>)
 8016ab0:	f00d fa8a 	bl	8023fc8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ab8:	899b      	ldrh	r3, [r3, #12]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d106      	bne.n	8016acc <lwip_netconn_do_writemore+0x9c>
 8016abe:	4b43      	ldr	r3, [pc, #268]	; (8016bcc <lwip_netconn_do_writemore+0x19c>)
 8016ac0:	f240 6279 	movw	r2, #1657	; 0x679
 8016ac4:	4948      	ldr	r1, [pc, #288]	; (8016be8 <lwip_netconn_do_writemore+0x1b8>)
 8016ac6:	4843      	ldr	r0, [pc, #268]	; (8016bd4 <lwip_netconn_do_writemore+0x1a4>)
 8016ac8:	f00d fa7e 	bl	8023fc8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ad0:	7f1b      	ldrb	r3, [r3, #28]
 8016ad2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016ada:	f003 0302 	and.w	r3, r3, #2
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d104      	bne.n	8016aec <lwip_netconn_do_writemore+0xbc>
 8016ae2:	7ebb      	ldrb	r3, [r7, #26]
 8016ae4:	f003 0304 	and.w	r3, r3, #4
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d001      	beq.n	8016af0 <lwip_netconn_do_writemore+0xc0>
 8016aec:	2301      	movs	r3, #1
 8016aee:	e000      	b.n	8016af2 <lwip_netconn_do_writemore+0xc2>
 8016af0:	2300      	movs	r3, #0
 8016af2:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016af8:	689b      	ldr	r3, [r3, #8]
 8016afa:	681a      	ldr	r2, [r3, #0]
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b00:	691b      	ldr	r3, [r3, #16]
 8016b02:	4413      	add	r3, r2
 8016b04:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b0a:	689b      	ldr	r3, [r3, #8]
 8016b0c:	685a      	ldr	r2, [r3, #4]
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b12:	691b      	ldr	r3, [r3, #16]
 8016b14:	1ad3      	subs	r3, r2, r3
 8016b16:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8016b18:	693b      	ldr	r3, [r7, #16]
 8016b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016b1e:	d307      	bcc.n	8016b30 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 8016b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b24:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8016b26:	7ebb      	ldrb	r3, [r7, #26]
 8016b28:	f043 0302 	orr.w	r3, r3, #2
 8016b2c:	76bb      	strb	r3, [r7, #26]
 8016b2e:	e001      	b.n	8016b34 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 8016b30:	693b      	ldr	r3, [r7, #16]
 8016b32:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	685b      	ldr	r3, [r3, #4]
 8016b38:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016b3c:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8016b3e:	89fa      	ldrh	r2, [r7, #14]
 8016b40:	8bbb      	ldrh	r3, [r7, #28]
 8016b42:	429a      	cmp	r2, r3
 8016b44:	d216      	bcs.n	8016b74 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 8016b46:	89fb      	ldrh	r3, [r7, #14]
 8016b48:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8016b4a:	7e3b      	ldrb	r3, [r7, #24]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d00d      	beq.n	8016b6c <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 8016b50:	8bbb      	ldrh	r3, [r7, #28]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d10e      	bne.n	8016b74 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b5a:	699b      	ldr	r3, [r3, #24]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d102      	bne.n	8016b66 <lwip_netconn_do_writemore+0x136>
 8016b60:	f06f 0306 	mvn.w	r3, #6
 8016b64:	e000      	b.n	8016b68 <lwip_netconn_do_writemore+0x138>
 8016b66:	2300      	movs	r3, #0
 8016b68:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8016b6a:	e08f      	b.n	8016c8c <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8016b6c:	7ebb      	ldrb	r3, [r7, #26]
 8016b6e:	f043 0302 	orr.w	r3, r3, #2
 8016b72:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b78:	691a      	ldr	r2, [r3, #16]
 8016b7a:	8bbb      	ldrh	r3, [r7, #28]
 8016b7c:	441a      	add	r2, r3
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b82:	689b      	ldr	r3, [r3, #8]
 8016b84:	685b      	ldr	r3, [r3, #4]
 8016b86:	429a      	cmp	r2, r3
 8016b88:	d906      	bls.n	8016b98 <lwip_netconn_do_writemore+0x168>
 8016b8a:	4b10      	ldr	r3, [pc, #64]	; (8016bcc <lwip_netconn_do_writemore+0x19c>)
 8016b8c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8016b90:	4916      	ldr	r1, [pc, #88]	; (8016bec <lwip_netconn_do_writemore+0x1bc>)
 8016b92:	4810      	ldr	r0, [pc, #64]	; (8016bd4 <lwip_netconn_do_writemore+0x1a4>)
 8016b94:	f00d fa18 	bl	8023fc8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8016b98:	8bbb      	ldrh	r3, [r7, #28]
 8016b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016b9e:	4293      	cmp	r3, r2
 8016ba0:	d103      	bne.n	8016baa <lwip_netconn_do_writemore+0x17a>
 8016ba2:	693b      	ldr	r3, [r7, #16]
 8016ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016ba8:	d209      	bcs.n	8016bbe <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8016baa:	693b      	ldr	r3, [r7, #16]
 8016bac:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8016bae:	8bba      	ldrh	r2, [r7, #28]
 8016bb0:	429a      	cmp	r2, r3
 8016bb2:	d11d      	bne.n	8016bf0 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016bb8:	899b      	ldrh	r3, [r3, #12]
 8016bba:	2b01      	cmp	r3, #1
 8016bbc:	d918      	bls.n	8016bf0 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 8016bbe:	2301      	movs	r3, #1
 8016bc0:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8016bc2:	7ebb      	ldrb	r3, [r7, #26]
 8016bc4:	f043 0302 	orr.w	r3, r3, #2
 8016bc8:	76bb      	strb	r3, [r7, #26]
 8016bca:	e013      	b.n	8016bf4 <lwip_netconn_do_writemore+0x1c4>
 8016bcc:	08025a78 	.word	0x08025a78
 8016bd0:	08025bd0 	.word	0x08025bd0
 8016bd4:	08025abc 	.word	0x08025abc
 8016bd8:	08025ed8 	.word	0x08025ed8
 8016bdc:	08025be0 	.word	0x08025be0
 8016be0:	08025ef8 	.word	0x08025ef8
 8016be4:	08025f10 	.word	0x08025f10
 8016be8:	08025f50 	.word	0x08025f50
 8016bec:	08025f78 	.word	0x08025f78
      } else {
        write_more = 0;
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	6858      	ldr	r0, [r3, #4]
 8016bf8:	7ebb      	ldrb	r3, [r7, #26]
 8016bfa:	8bba      	ldrh	r2, [r7, #28]
 8016bfc:	6979      	ldr	r1, [r7, #20]
 8016bfe:	f007 faa3 	bl	801e148 <tcp_write>
 8016c02:	4603      	mov	r3, r0
 8016c04:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8016c06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d12c      	bne.n	8016c68 <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c12:	6999      	ldr	r1, [r3, #24]
 8016c14:	8bba      	ldrh	r2, [r7, #28]
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c1a:	440a      	add	r2, r1
 8016c1c:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c22:	6919      	ldr	r1, [r3, #16]
 8016c24:	8bba      	ldrh	r2, [r7, #28]
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c2a:	440a      	add	r2, r1
 8016c2c:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c32:	691a      	ldr	r2, [r3, #16]
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c38:	689b      	ldr	r3, [r3, #8]
 8016c3a:	685b      	ldr	r3, [r3, #4]
 8016c3c:	429a      	cmp	r2, r3
 8016c3e:	d113      	bne.n	8016c68 <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c44:	899a      	ldrh	r2, [r3, #12]
 8016c46:	3a01      	subs	r2, #1
 8016c48:	b292      	uxth	r2, r2
 8016c4a:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c50:	899b      	ldrh	r3, [r3, #12]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d008      	beq.n	8016c68 <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c5a:	689a      	ldr	r2, [r3, #8]
 8016c5c:	3208      	adds	r2, #8
 8016c5e:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c64:	2200      	movs	r2, #0
 8016c66:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8016c68:	7e7b      	ldrb	r3, [r7, #25]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d004      	beq.n	8016c78 <lwip_netconn_do_writemore+0x248>
 8016c6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	f43f af3e 	beq.w	8016af4 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8016c78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d004      	beq.n	8016c8a <lwip_netconn_do_writemore+0x25a>
 8016c80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c88:	d136      	bne.n	8016cf8 <lwip_netconn_do_writemore+0x2c8>
err_mem:
 8016c8a:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8016c8c:	7e3b      	ldrb	r3, [r7, #24]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d01b      	beq.n	8016cca <lwip_netconn_do_writemore+0x29a>
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c96:	699a      	ldr	r2, [r3, #24]
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c9c:	695b      	ldr	r3, [r3, #20]
 8016c9e:	429a      	cmp	r2, r3
 8016ca0:	d213      	bcs.n	8016cca <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d005      	beq.n	8016cb6 <lwip_netconn_do_writemore+0x286>
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cae:	2200      	movs	r2, #0
 8016cb0:	2103      	movs	r1, #3
 8016cb2:	6878      	ldr	r0, [r7, #4]
 8016cb4:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016cbc:	f043 0310 	orr.w	r3, r3, #16
 8016cc0:	b2da      	uxtb	r2, r3
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8016cc8:	e016      	b.n	8016cf8 <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	685b      	ldr	r3, [r3, #4]
 8016cce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016cd2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8016cd6:	d305      	bcc.n	8016ce4 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	685b      	ldr	r3, [r3, #4]
 8016cdc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8016ce0:	2b04      	cmp	r3, #4
 8016ce2:	d909      	bls.n	8016cf8 <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d005      	beq.n	8016cf8 <lwip_netconn_do_writemore+0x2c8>
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cf0:	2200      	movs	r2, #0
 8016cf2:	2103      	movs	r1, #3
 8016cf4:	6878      	ldr	r0, [r7, #4]
 8016cf6:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8016cf8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d11d      	bne.n	8016d3c <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d04:	699a      	ldr	r2, [r3, #24]
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d0a:	695b      	ldr	r3, [r3, #20]
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	d002      	beq.n	8016d16 <lwip_netconn_do_writemore+0x2e6>
 8016d10:	7e3b      	ldrb	r3, [r7, #24]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d001      	beq.n	8016d1a <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8016d16:	2301      	movs	r3, #1
 8016d18:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	685b      	ldr	r3, [r3, #4]
 8016d1e:	4618      	mov	r0, r3
 8016d20:	f008 f880 	bl	801ee24 <tcp_output>
 8016d24:	4603      	mov	r3, r0
 8016d26:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8016d28:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8016d2c:	f113 0f04 	cmn.w	r3, #4
 8016d30:	d12c      	bne.n	8016d8c <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8016d32:	7b3b      	ldrb	r3, [r7, #12]
 8016d34:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016d36:	2301      	movs	r3, #1
 8016d38:	76fb      	strb	r3, [r7, #27]
 8016d3a:	e027      	b.n	8016d8c <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 8016d3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d44:	d120      	bne.n	8016d88 <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	685b      	ldr	r3, [r3, #4]
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	f008 f86a 	bl	801ee24 <tcp_output>
 8016d50:	4603      	mov	r3, r0
 8016d52:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8016d54:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8016d58:	f113 0f04 	cmn.w	r3, #4
 8016d5c:	d104      	bne.n	8016d68 <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8016d5e:	7b7b      	ldrb	r3, [r7, #13]
 8016d60:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016d62:	2301      	movs	r3, #1
 8016d64:	76fb      	strb	r3, [r7, #27]
 8016d66:	e011      	b.n	8016d8c <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 8016d68:	7e3b      	ldrb	r3, [r7, #24]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d00e      	beq.n	8016d8c <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d72:	699b      	ldr	r3, [r3, #24]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d102      	bne.n	8016d7e <lwip_netconn_do_writemore+0x34e>
 8016d78:	f06f 0306 	mvn.w	r3, #6
 8016d7c:	e000      	b.n	8016d80 <lwip_netconn_do_writemore+0x350>
 8016d7e:	2300      	movs	r3, #0
 8016d80:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016d82:	2301      	movs	r3, #1
 8016d84:	76fb      	strb	r3, [r7, #27]
 8016d86:	e001      	b.n	8016d8c <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8016d88:	2301      	movs	r3, #1
 8016d8a:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8016d8c:	7efb      	ldrb	r3, [r7, #27]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d015      	beq.n	8016dbe <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	330c      	adds	r3, #12
 8016d9a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016da0:	7ffa      	ldrb	r2, [r7, #31]
 8016da2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	2200      	movs	r2, #0
 8016da8:	629a      	str	r2, [r3, #40]	; 0x28
    conn->state = NETCONN_NONE;
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	2200      	movs	r2, #0
 8016dae:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8016db0:	78fb      	ldrb	r3, [r7, #3]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d006      	beq.n	8016dc4 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8016db6:	68b8      	ldr	r0, [r7, #8]
 8016db8:	f00c fccd 	bl	8023756 <sys_sem_signal>
 8016dbc:	e002      	b.n	8016dc4 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8016dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8016dc2:	e000      	b.n	8016dc6 <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 8016dc4:	2300      	movs	r3, #0
}
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	3720      	adds	r7, #32
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	bd80      	pop	{r7, pc}
 8016dce:	bf00      	nop

08016dd0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b084      	sub	sp, #16
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8016ddc:	68bb      	ldr	r3, [r7, #8]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	4618      	mov	r0, r3
 8016de2:	f7fe fb80 	bl	80154e6 <netconn_err>
 8016de6:	4603      	mov	r3, r0
 8016de8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8016dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d166      	bne.n	8016ec0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8016df2:	68bb      	ldr	r3, [r7, #8]
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	781b      	ldrb	r3, [r3, #0]
 8016df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016dfc:	2b10      	cmp	r3, #16
 8016dfe:	d15d      	bne.n	8016ebc <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8016e00:	68bb      	ldr	r3, [r7, #8]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	785b      	ldrb	r3, [r3, #1]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d002      	beq.n	8016e10 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8016e0a:	23fb      	movs	r3, #251	; 0xfb
 8016e0c:	73fb      	strb	r3, [r7, #15]
 8016e0e:	e057      	b.n	8016ec0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8016e10:	68bb      	ldr	r3, [r7, #8]
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	685b      	ldr	r3, [r3, #4]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d04d      	beq.n	8016eb6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8016e1a:	68bb      	ldr	r3, [r7, #8]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	2201      	movs	r2, #1
 8016e20:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016e22:	68bb      	ldr	r3, [r7, #8]
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d006      	beq.n	8016e3a <lwip_netconn_do_write+0x6a>
 8016e2c:	4b28      	ldr	r3, [pc, #160]	; (8016ed0 <lwip_netconn_do_write+0x100>)
 8016e2e:	f240 7223 	movw	r2, #1827	; 0x723
 8016e32:	4928      	ldr	r1, [pc, #160]	; (8016ed4 <lwip_netconn_do_write+0x104>)
 8016e34:	4828      	ldr	r0, [pc, #160]	; (8016ed8 <lwip_netconn_do_write+0x108>)
 8016e36:	f00d f8c7 	bl	8023fc8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8016e3a:	68bb      	ldr	r3, [r7, #8]
 8016e3c:	695b      	ldr	r3, [r3, #20]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d106      	bne.n	8016e50 <lwip_netconn_do_write+0x80>
 8016e42:	4b23      	ldr	r3, [pc, #140]	; (8016ed0 <lwip_netconn_do_write+0x100>)
 8016e44:	f240 7224 	movw	r2, #1828	; 0x724
 8016e48:	4924      	ldr	r1, [pc, #144]	; (8016edc <lwip_netconn_do_write+0x10c>)
 8016e4a:	4823      	ldr	r0, [pc, #140]	; (8016ed8 <lwip_netconn_do_write+0x108>)
 8016e4c:	f00d f8bc 	bl	8023fc8 <iprintf>
        msg->conn->current_msg = msg;
 8016e50:	68bb      	ldr	r3, [r7, #8]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	68ba      	ldr	r2, [r7, #8]
 8016e56:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8016e58:	68bb      	ldr	r3, [r7, #8]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	2100      	movs	r1, #0
 8016e5e:	4618      	mov	r0, r3
 8016e60:	f7ff fde6 	bl	8016a30 <lwip_netconn_do_writemore>
 8016e64:	4603      	mov	r3, r0
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d02e      	beq.n	8016ec8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8016e6a:	68bb      	ldr	r3, [r7, #8]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	785b      	ldrb	r3, [r3, #1]
 8016e70:	2b01      	cmp	r3, #1
 8016e72:	d006      	beq.n	8016e82 <lwip_netconn_do_write+0xb2>
 8016e74:	4b16      	ldr	r3, [pc, #88]	; (8016ed0 <lwip_netconn_do_write+0x100>)
 8016e76:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8016e7a:	4919      	ldr	r1, [pc, #100]	; (8016ee0 <lwip_netconn_do_write+0x110>)
 8016e7c:	4816      	ldr	r0, [pc, #88]	; (8016ed8 <lwip_netconn_do_write+0x108>)
 8016e7e:	f00d f8a3 	bl	8023fc8 <iprintf>
          UNLOCK_TCPIP_CORE();
 8016e82:	4818      	ldr	r0, [pc, #96]	; (8016ee4 <lwip_netconn_do_write+0x114>)
 8016e84:	f00c fcfb 	bl	802387e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016e88:	68bb      	ldr	r3, [r7, #8]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	330c      	adds	r3, #12
 8016e8e:	2100      	movs	r1, #0
 8016e90:	4618      	mov	r0, r3
 8016e92:	f00c fc2f 	bl	80236f4 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8016e96:	4813      	ldr	r0, [pc, #76]	; (8016ee4 <lwip_netconn_do_write+0x114>)
 8016e98:	f00c fce2 	bl	8023860 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8016e9c:	68bb      	ldr	r3, [r7, #8]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	785b      	ldrb	r3, [r3, #1]
 8016ea2:	2b01      	cmp	r3, #1
 8016ea4:	d110      	bne.n	8016ec8 <lwip_netconn_do_write+0xf8>
 8016ea6:	4b0a      	ldr	r3, [pc, #40]	; (8016ed0 <lwip_netconn_do_write+0x100>)
 8016ea8:	f240 722c 	movw	r2, #1836	; 0x72c
 8016eac:	490c      	ldr	r1, [pc, #48]	; (8016ee0 <lwip_netconn_do_write+0x110>)
 8016eae:	480a      	ldr	r0, [pc, #40]	; (8016ed8 <lwip_netconn_do_write+0x108>)
 8016eb0:	f00d f88a 	bl	8023fc8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8016eb4:	e008      	b.n	8016ec8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8016eb6:	23f5      	movs	r3, #245	; 0xf5
 8016eb8:	73fb      	strb	r3, [r7, #15]
 8016eba:	e001      	b.n	8016ec0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8016ebc:	23fa      	movs	r3, #250	; 0xfa
 8016ebe:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8016ec0:	68bb      	ldr	r3, [r7, #8]
 8016ec2:	7bfa      	ldrb	r2, [r7, #15]
 8016ec4:	711a      	strb	r2, [r3, #4]
 8016ec6:	e000      	b.n	8016eca <lwip_netconn_do_write+0xfa>
        return;
 8016ec8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8016eca:	3710      	adds	r7, #16
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}
 8016ed0:	08025a78 	.word	0x08025a78
 8016ed4:	08025e1c 	.word	0x08025e1c
 8016ed8:	08025abc 	.word	0x08025abc
 8016edc:	08025fa4 	.word	0x08025fa4
 8016ee0:	08025e38 	.word	0x08025e38
 8016ee4:	2007ba84 	.word	0x2007ba84

08016ee8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b084      	sub	sp, #16
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	785b      	ldrb	r3, [r3, #1]
 8016efa:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	685b      	ldr	r3, [r3, #4]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d069      	beq.n	8016fda <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	781b      	ldrb	r3, [r3, #0]
 8016f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8016f10:	2b10      	cmp	r3, #16
 8016f12:	d162      	bne.n	8016fda <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8016f18:	2b03      	cmp	r3, #3
 8016f1a:	d002      	beq.n	8016f22 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8016f1c:	7afb      	ldrb	r3, [r7, #11]
 8016f1e:	2b02      	cmp	r3, #2
 8016f20:	d05b      	beq.n	8016fda <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8016f22:	7afb      	ldrb	r3, [r7, #11]
 8016f24:	2b03      	cmp	r3, #3
 8016f26:	d103      	bne.n	8016f30 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	22f5      	movs	r2, #245	; 0xf5
 8016f2c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8016f2e:	e059      	b.n	8016fe4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8016f30:	7afb      	ldrb	r3, [r7, #11]
 8016f32:	2b01      	cmp	r3, #1
 8016f34:	d103      	bne.n	8016f3e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	22fb      	movs	r2, #251	; 0xfb
 8016f3a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8016f3c:	e052      	b.n	8016fe4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	7a1b      	ldrb	r3, [r3, #8]
 8016f42:	f003 0301 	and.w	r3, r3, #1
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d004      	beq.n	8016f54 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	4618      	mov	r0, r3
 8016f50:	f7ff f840 	bl	8015fd4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d006      	beq.n	8016f6c <lwip_netconn_do_close+0x84>
 8016f5e:	4b23      	ldr	r3, [pc, #140]	; (8016fec <lwip_netconn_do_close+0x104>)
 8016f60:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8016f64:	4922      	ldr	r1, [pc, #136]	; (8016ff0 <lwip_netconn_do_close+0x108>)
 8016f66:	4823      	ldr	r0, [pc, #140]	; (8016ff4 <lwip_netconn_do_close+0x10c>)
 8016f68:	f00d f82e 	bl	8023fc8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	2204      	movs	r2, #4
 8016f72:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	68fa      	ldr	r2, [r7, #12]
 8016f7a:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	2100      	movs	r1, #0
 8016f82:	4618      	mov	r0, r3
 8016f84:	f7ff f8a4 	bl	80160d0 <lwip_netconn_do_close_internal>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d029      	beq.n	8016fe2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	785b      	ldrb	r3, [r3, #1]
 8016f94:	2b04      	cmp	r3, #4
 8016f96:	d006      	beq.n	8016fa6 <lwip_netconn_do_close+0xbe>
 8016f98:	4b14      	ldr	r3, [pc, #80]	; (8016fec <lwip_netconn_do_close+0x104>)
 8016f9a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8016f9e:	4916      	ldr	r1, [pc, #88]	; (8016ff8 <lwip_netconn_do_close+0x110>)
 8016fa0:	4814      	ldr	r0, [pc, #80]	; (8016ff4 <lwip_netconn_do_close+0x10c>)
 8016fa2:	f00d f811 	bl	8023fc8 <iprintf>
        UNLOCK_TCPIP_CORE();
 8016fa6:	4815      	ldr	r0, [pc, #84]	; (8016ffc <lwip_netconn_do_close+0x114>)
 8016fa8:	f00c fc69 	bl	802387e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	330c      	adds	r3, #12
 8016fb2:	2100      	movs	r1, #0
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	f00c fb9d 	bl	80236f4 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8016fba:	4810      	ldr	r0, [pc, #64]	; (8016ffc <lwip_netconn_do_close+0x114>)
 8016fbc:	f00c fc50 	bl	8023860 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	785b      	ldrb	r3, [r3, #1]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d00b      	beq.n	8016fe2 <lwip_netconn_do_close+0xfa>
 8016fca:	4b08      	ldr	r3, [pc, #32]	; (8016fec <lwip_netconn_do_close+0x104>)
 8016fcc:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8016fd0:	4909      	ldr	r1, [pc, #36]	; (8016ff8 <lwip_netconn_do_close+0x110>)
 8016fd2:	4808      	ldr	r0, [pc, #32]	; (8016ff4 <lwip_netconn_do_close+0x10c>)
 8016fd4:	f00c fff8 	bl	8023fc8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8016fd8:	e003      	b.n	8016fe2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	22f5      	movs	r2, #245	; 0xf5
 8016fde:	711a      	strb	r2, [r3, #4]
 8016fe0:	e000      	b.n	8016fe4 <lwip_netconn_do_close+0xfc>
      return;
 8016fe2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8016fe4:	3710      	adds	r7, #16
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	bd80      	pop	{r7, pc}
 8016fea:	bf00      	nop
 8016fec:	08025a78 	.word	0x08025a78
 8016ff0:	08025e1c 	.word	0x08025e1c
 8016ff4:	08025abc 	.word	0x08025abc
 8016ff8:	08025e38 	.word	0x08025e38
 8016ffc:	2007ba84 	.word	0x2007ba84

08017000 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 8017000:	b480      	push	{r7}
 8017002:	b083      	sub	sp, #12
 8017004:	af00      	add	r7, sp, #0
 8017006:	4603      	mov	r3, r0
 8017008:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 801700a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801700e:	2b00      	cmp	r3, #0
 8017010:	dc04      	bgt.n	801701c <lwip_strerr+0x1c>
 8017012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017016:	f113 0f10 	cmn.w	r3, #16
 801701a:	da01      	bge.n	8017020 <lwip_strerr+0x20>
    return "Unknown error.";
 801701c:	4b06      	ldr	r3, [pc, #24]	; (8017038 <lwip_strerr+0x38>)
 801701e:	e005      	b.n	801702c <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 8017020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017024:	425b      	negs	r3, r3
 8017026:	4a05      	ldr	r2, [pc, #20]	; (801703c <lwip_strerr+0x3c>)
 8017028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 801702c:	4618      	mov	r0, r3
 801702e:	370c      	adds	r7, #12
 8017030:	46bd      	mov	sp, r7
 8017032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017036:	4770      	bx	lr
 8017038:	0802610c 	.word	0x0802610c
 801703c:	20050080 	.word	0x20050080

08017040 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b082      	sub	sp, #8
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d013      	beq.n	8017076 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d00b      	beq.n	801706e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	4618      	mov	r0, r3
 801705c:	f002 f8e0 	bl	8019220 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	2200      	movs	r2, #0
 8017064:	605a      	str	r2, [r3, #4]
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	685a      	ldr	r2, [r3, #4]
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801706e:	6879      	ldr	r1, [r7, #4]
 8017070:	2006      	movs	r0, #6
 8017072:	f001 f93b 	bl	80182ec <memp_free>
  }
}
 8017076:	bf00      	nop
 8017078:	3708      	adds	r7, #8
 801707a:	46bd      	mov	sp, r7
 801707c:	bd80      	pop	{r7, pc}
	...

08017080 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8017080:	b580      	push	{r7, lr}
 8017082:	b084      	sub	sp, #16
 8017084:	af00      	add	r7, sp, #0
 8017086:	60f8      	str	r0, [r7, #12]
 8017088:	60b9      	str	r1, [r7, #8]
 801708a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	2b00      	cmp	r3, #0
 8017090:	d108      	bne.n	80170a4 <netbuf_data+0x24>
 8017092:	4b1b      	ldr	r3, [pc, #108]	; (8017100 <netbuf_data+0x80>)
 8017094:	22c6      	movs	r2, #198	; 0xc6
 8017096:	491b      	ldr	r1, [pc, #108]	; (8017104 <netbuf_data+0x84>)
 8017098:	481b      	ldr	r0, [pc, #108]	; (8017108 <netbuf_data+0x88>)
 801709a:	f00c ff95 	bl	8023fc8 <iprintf>
 801709e:	f06f 030f 	mvn.w	r3, #15
 80170a2:	e029      	b.n	80170f8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80170a4:	68bb      	ldr	r3, [r7, #8]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d108      	bne.n	80170bc <netbuf_data+0x3c>
 80170aa:	4b15      	ldr	r3, [pc, #84]	; (8017100 <netbuf_data+0x80>)
 80170ac:	22c7      	movs	r2, #199	; 0xc7
 80170ae:	4917      	ldr	r1, [pc, #92]	; (801710c <netbuf_data+0x8c>)
 80170b0:	4815      	ldr	r0, [pc, #84]	; (8017108 <netbuf_data+0x88>)
 80170b2:	f00c ff89 	bl	8023fc8 <iprintf>
 80170b6:	f06f 030f 	mvn.w	r3, #15
 80170ba:	e01d      	b.n	80170f8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d108      	bne.n	80170d4 <netbuf_data+0x54>
 80170c2:	4b0f      	ldr	r3, [pc, #60]	; (8017100 <netbuf_data+0x80>)
 80170c4:	22c8      	movs	r2, #200	; 0xc8
 80170c6:	4912      	ldr	r1, [pc, #72]	; (8017110 <netbuf_data+0x90>)
 80170c8:	480f      	ldr	r0, [pc, #60]	; (8017108 <netbuf_data+0x88>)
 80170ca:	f00c ff7d 	bl	8023fc8 <iprintf>
 80170ce:	f06f 030f 	mvn.w	r3, #15
 80170d2:	e011      	b.n	80170f8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	685b      	ldr	r3, [r3, #4]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d102      	bne.n	80170e2 <netbuf_data+0x62>
    return ERR_BUF;
 80170dc:	f06f 0301 	mvn.w	r3, #1
 80170e0:	e00a      	b.n	80170f8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	685b      	ldr	r3, [r3, #4]
 80170e6:	685a      	ldr	r2, [r3, #4]
 80170e8:	68bb      	ldr	r3, [r7, #8]
 80170ea:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	685b      	ldr	r3, [r3, #4]
 80170f0:	895a      	ldrh	r2, [r3, #10]
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 80170f6:	2300      	movs	r3, #0
}
 80170f8:	4618      	mov	r0, r3
 80170fa:	3710      	adds	r7, #16
 80170fc:	46bd      	mov	sp, r7
 80170fe:	bd80      	pop	{r7, pc}
 8017100:	0802611c 	.word	0x0802611c
 8017104:	08026224 	.word	0x08026224
 8017108:	0802616c 	.word	0x0802616c
 801710c:	08026240 	.word	0x08026240
 8017110:	08026260 	.word	0x08026260

08017114 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8017114:	b580      	push	{r7, lr}
 8017116:	b082      	sub	sp, #8
 8017118:	af00      	add	r7, sp, #0
 801711a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d108      	bne.n	8017134 <netbuf_next+0x20>
 8017122:	4b11      	ldr	r3, [pc, #68]	; (8017168 <netbuf_next+0x54>)
 8017124:	22e0      	movs	r2, #224	; 0xe0
 8017126:	4911      	ldr	r1, [pc, #68]	; (801716c <netbuf_next+0x58>)
 8017128:	4811      	ldr	r0, [pc, #68]	; (8017170 <netbuf_next+0x5c>)
 801712a:	f00c ff4d 	bl	8023fc8 <iprintf>
 801712e:	f04f 33ff 	mov.w	r3, #4294967295
 8017132:	e014      	b.n	801715e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	685b      	ldr	r3, [r3, #4]
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d102      	bne.n	8017144 <netbuf_next+0x30>
    return -1;
 801713e:	f04f 33ff 	mov.w	r3, #4294967295
 8017142:	e00c      	b.n	801715e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	685b      	ldr	r3, [r3, #4]
 8017148:	681a      	ldr	r2, [r3, #0]
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	685b      	ldr	r3, [r3, #4]
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d101      	bne.n	801715c <netbuf_next+0x48>
    return 1;
 8017158:	2301      	movs	r3, #1
 801715a:	e000      	b.n	801715e <netbuf_next+0x4a>
  }
  return 0;
 801715c:	2300      	movs	r3, #0
}
 801715e:	4618      	mov	r0, r3
 8017160:	3708      	adds	r7, #8
 8017162:	46bd      	mov	sp, r7
 8017164:	bd80      	pop	{r7, pc}
 8017166:	bf00      	nop
 8017168:	0802611c 	.word	0x0802611c
 801716c:	0802627c 	.word	0x0802627c
 8017170:	0802616c 	.word	0x0802616c

08017174 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b084      	sub	sp, #16
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
 801717c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801717e:	f008 ff29 	bl	801ffd4 <sys_timeouts_sleeptime>
 8017182:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801718a:	d10b      	bne.n	80171a4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801718c:	4813      	ldr	r0, [pc, #76]	; (80171dc <tcpip_timeouts_mbox_fetch+0x68>)
 801718e:	f00c fb76 	bl	802387e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8017192:	2200      	movs	r2, #0
 8017194:	6839      	ldr	r1, [r7, #0]
 8017196:	6878      	ldr	r0, [r7, #4]
 8017198:	f00c fa00 	bl	802359c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801719c:	480f      	ldr	r0, [pc, #60]	; (80171dc <tcpip_timeouts_mbox_fetch+0x68>)
 801719e:	f00c fb5f 	bl	8023860 <sys_mutex_lock>
    return;
 80171a2:	e018      	b.n	80171d6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d102      	bne.n	80171b0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80171aa:	f008 fed9 	bl	801ff60 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80171ae:	e7e6      	b.n	801717e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80171b0:	480a      	ldr	r0, [pc, #40]	; (80171dc <tcpip_timeouts_mbox_fetch+0x68>)
 80171b2:	f00c fb64 	bl	802387e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80171b6:	68fa      	ldr	r2, [r7, #12]
 80171b8:	6839      	ldr	r1, [r7, #0]
 80171ba:	6878      	ldr	r0, [r7, #4]
 80171bc:	f00c f9ee 	bl	802359c <sys_arch_mbox_fetch>
 80171c0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80171c2:	4806      	ldr	r0, [pc, #24]	; (80171dc <tcpip_timeouts_mbox_fetch+0x68>)
 80171c4:	f00c fb4c 	bl	8023860 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80171c8:	68bb      	ldr	r3, [r7, #8]
 80171ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171ce:	d102      	bne.n	80171d6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80171d0:	f008 fec6 	bl	801ff60 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80171d4:	e7d3      	b.n	801717e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80171d6:	3710      	adds	r7, #16
 80171d8:	46bd      	mov	sp, r7
 80171da:	bd80      	pop	{r7, pc}
 80171dc:	2007ba84 	.word	0x2007ba84

080171e0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b084      	sub	sp, #16
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80171e8:	4810      	ldr	r0, [pc, #64]	; (801722c <tcpip_thread+0x4c>)
 80171ea:	f00c fb39 	bl	8023860 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80171ee:	4b10      	ldr	r3, [pc, #64]	; (8017230 <tcpip_thread+0x50>)
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d005      	beq.n	8017202 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80171f6:	4b0e      	ldr	r3, [pc, #56]	; (8017230 <tcpip_thread+0x50>)
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	4a0e      	ldr	r2, [pc, #56]	; (8017234 <tcpip_thread+0x54>)
 80171fc:	6812      	ldr	r2, [r2, #0]
 80171fe:	4610      	mov	r0, r2
 8017200:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8017202:	f107 030c 	add.w	r3, r7, #12
 8017206:	4619      	mov	r1, r3
 8017208:	480b      	ldr	r0, [pc, #44]	; (8017238 <tcpip_thread+0x58>)
 801720a:	f7ff ffb3 	bl	8017174 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d106      	bne.n	8017222 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8017214:	4b09      	ldr	r3, [pc, #36]	; (801723c <tcpip_thread+0x5c>)
 8017216:	2291      	movs	r2, #145	; 0x91
 8017218:	4909      	ldr	r1, [pc, #36]	; (8017240 <tcpip_thread+0x60>)
 801721a:	480a      	ldr	r0, [pc, #40]	; (8017244 <tcpip_thread+0x64>)
 801721c:	f00c fed4 	bl	8023fc8 <iprintf>
      continue;
 8017220:	e003      	b.n	801722a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	4618      	mov	r0, r3
 8017226:	f000 f80f 	bl	8017248 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801722a:	e7ea      	b.n	8017202 <tcpip_thread+0x22>
 801722c:	2007ba84 	.word	0x2007ba84
 8017230:	2007ba78 	.word	0x2007ba78
 8017234:	2007ba7c 	.word	0x2007ba7c
 8017238:	2007ba80 	.word	0x2007ba80
 801723c:	080262b4 	.word	0x080262b4
 8017240:	080262e4 	.word	0x080262e4
 8017244:	08026304 	.word	0x08026304

08017248 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8017248:	b580      	push	{r7, lr}
 801724a:	b082      	sub	sp, #8
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	781b      	ldrb	r3, [r3, #0]
 8017254:	2b02      	cmp	r3, #2
 8017256:	d026      	beq.n	80172a6 <tcpip_thread_handle_msg+0x5e>
 8017258:	2b02      	cmp	r3, #2
 801725a:	dc2b      	bgt.n	80172b4 <tcpip_thread_handle_msg+0x6c>
 801725c:	2b00      	cmp	r3, #0
 801725e:	d002      	beq.n	8017266 <tcpip_thread_handle_msg+0x1e>
 8017260:	2b01      	cmp	r3, #1
 8017262:	d015      	beq.n	8017290 <tcpip_thread_handle_msg+0x48>
 8017264:	e026      	b.n	80172b4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	68db      	ldr	r3, [r3, #12]
 801726a:	687a      	ldr	r2, [r7, #4]
 801726c:	6850      	ldr	r0, [r2, #4]
 801726e:	687a      	ldr	r2, [r7, #4]
 8017270:	6892      	ldr	r2, [r2, #8]
 8017272:	4611      	mov	r1, r2
 8017274:	4798      	blx	r3
 8017276:	4603      	mov	r3, r0
 8017278:	2b00      	cmp	r3, #0
 801727a:	d004      	beq.n	8017286 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	685b      	ldr	r3, [r3, #4]
 8017280:	4618      	mov	r0, r3
 8017282:	f001 ffcd 	bl	8019220 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8017286:	6879      	ldr	r1, [r7, #4]
 8017288:	2009      	movs	r0, #9
 801728a:	f001 f82f 	bl	80182ec <memp_free>
      break;
 801728e:	e018      	b.n	80172c2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	685b      	ldr	r3, [r3, #4]
 8017294:	687a      	ldr	r2, [r7, #4]
 8017296:	6892      	ldr	r2, [r2, #8]
 8017298:	4610      	mov	r0, r2
 801729a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801729c:	6879      	ldr	r1, [r7, #4]
 801729e:	2008      	movs	r0, #8
 80172a0:	f001 f824 	bl	80182ec <memp_free>
      break;
 80172a4:	e00d      	b.n	80172c2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	685b      	ldr	r3, [r3, #4]
 80172aa:	687a      	ldr	r2, [r7, #4]
 80172ac:	6892      	ldr	r2, [r2, #8]
 80172ae:	4610      	mov	r0, r2
 80172b0:	4798      	blx	r3
      break;
 80172b2:	e006      	b.n	80172c2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80172b4:	4b05      	ldr	r3, [pc, #20]	; (80172cc <tcpip_thread_handle_msg+0x84>)
 80172b6:	22cf      	movs	r2, #207	; 0xcf
 80172b8:	4905      	ldr	r1, [pc, #20]	; (80172d0 <tcpip_thread_handle_msg+0x88>)
 80172ba:	4806      	ldr	r0, [pc, #24]	; (80172d4 <tcpip_thread_handle_msg+0x8c>)
 80172bc:	f00c fe84 	bl	8023fc8 <iprintf>
      break;
 80172c0:	bf00      	nop
  }
}
 80172c2:	bf00      	nop
 80172c4:	3708      	adds	r7, #8
 80172c6:	46bd      	mov	sp, r7
 80172c8:	bd80      	pop	{r7, pc}
 80172ca:	bf00      	nop
 80172cc:	080262b4 	.word	0x080262b4
 80172d0:	080262e4 	.word	0x080262e4
 80172d4:	08026304 	.word	0x08026304

080172d8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b086      	sub	sp, #24
 80172dc:	af00      	add	r7, sp, #0
 80172de:	60f8      	str	r0, [r7, #12]
 80172e0:	60b9      	str	r1, [r7, #8]
 80172e2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80172e4:	481a      	ldr	r0, [pc, #104]	; (8017350 <tcpip_inpkt+0x78>)
 80172e6:	f00c f9a1 	bl	802362c <sys_mbox_valid>
 80172ea:	4603      	mov	r3, r0
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d105      	bne.n	80172fc <tcpip_inpkt+0x24>
 80172f0:	4b18      	ldr	r3, [pc, #96]	; (8017354 <tcpip_inpkt+0x7c>)
 80172f2:	22fc      	movs	r2, #252	; 0xfc
 80172f4:	4918      	ldr	r1, [pc, #96]	; (8017358 <tcpip_inpkt+0x80>)
 80172f6:	4819      	ldr	r0, [pc, #100]	; (801735c <tcpip_inpkt+0x84>)
 80172f8:	f00c fe66 	bl	8023fc8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80172fc:	2009      	movs	r0, #9
 80172fe:	f000 ff79 	bl	80181f4 <memp_malloc>
 8017302:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8017304:	697b      	ldr	r3, [r7, #20]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d102      	bne.n	8017310 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801730a:	f04f 33ff 	mov.w	r3, #4294967295
 801730e:	e01a      	b.n	8017346 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8017310:	697b      	ldr	r3, [r7, #20]
 8017312:	2200      	movs	r2, #0
 8017314:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8017316:	697b      	ldr	r3, [r7, #20]
 8017318:	68fa      	ldr	r2, [r7, #12]
 801731a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801731c:	697b      	ldr	r3, [r7, #20]
 801731e:	68ba      	ldr	r2, [r7, #8]
 8017320:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8017322:	697b      	ldr	r3, [r7, #20]
 8017324:	687a      	ldr	r2, [r7, #4]
 8017326:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017328:	6979      	ldr	r1, [r7, #20]
 801732a:	4809      	ldr	r0, [pc, #36]	; (8017350 <tcpip_inpkt+0x78>)
 801732c:	f00c f912 	bl	8023554 <sys_mbox_trypost>
 8017330:	4603      	mov	r3, r0
 8017332:	2b00      	cmp	r3, #0
 8017334:	d006      	beq.n	8017344 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8017336:	6979      	ldr	r1, [r7, #20]
 8017338:	2009      	movs	r0, #9
 801733a:	f000 ffd7 	bl	80182ec <memp_free>
    return ERR_MEM;
 801733e:	f04f 33ff 	mov.w	r3, #4294967295
 8017342:	e000      	b.n	8017346 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8017344:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8017346:	4618      	mov	r0, r3
 8017348:	3718      	adds	r7, #24
 801734a:	46bd      	mov	sp, r7
 801734c:	bd80      	pop	{r7, pc}
 801734e:	bf00      	nop
 8017350:	2007ba80 	.word	0x2007ba80
 8017354:	080262b4 	.word	0x080262b4
 8017358:	0802632c 	.word	0x0802632c
 801735c:	08026304 	.word	0x08026304

08017360 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8017360:	b580      	push	{r7, lr}
 8017362:	b082      	sub	sp, #8
 8017364:	af00      	add	r7, sp, #0
 8017366:	6078      	str	r0, [r7, #4]
 8017368:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801736a:	683b      	ldr	r3, [r7, #0]
 801736c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017370:	f003 0318 	and.w	r3, r3, #24
 8017374:	2b00      	cmp	r3, #0
 8017376:	d006      	beq.n	8017386 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8017378:	4a08      	ldr	r2, [pc, #32]	; (801739c <tcpip_input+0x3c>)
 801737a:	6839      	ldr	r1, [r7, #0]
 801737c:	6878      	ldr	r0, [r7, #4]
 801737e:	f7ff ffab 	bl	80172d8 <tcpip_inpkt>
 8017382:	4603      	mov	r3, r0
 8017384:	e005      	b.n	8017392 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8017386:	4a06      	ldr	r2, [pc, #24]	; (80173a0 <tcpip_input+0x40>)
 8017388:	6839      	ldr	r1, [r7, #0]
 801738a:	6878      	ldr	r0, [r7, #4]
 801738c:	f7ff ffa4 	bl	80172d8 <tcpip_inpkt>
 8017390:	4603      	mov	r3, r0
}
 8017392:	4618      	mov	r0, r3
 8017394:	3708      	adds	r7, #8
 8017396:	46bd      	mov	sp, r7
 8017398:	bd80      	pop	{r7, pc}
 801739a:	bf00      	nop
 801739c:	0802329d 	.word	0x0802329d
 80173a0:	08022079 	.word	0x08022079

080173a4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80173a4:	b580      	push	{r7, lr}
 80173a6:	b084      	sub	sp, #16
 80173a8:	af00      	add	r7, sp, #0
 80173aa:	6078      	str	r0, [r7, #4]
 80173ac:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80173ae:	4819      	ldr	r0, [pc, #100]	; (8017414 <tcpip_try_callback+0x70>)
 80173b0:	f00c f93c 	bl	802362c <sys_mbox_valid>
 80173b4:	4603      	mov	r3, r0
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d106      	bne.n	80173c8 <tcpip_try_callback+0x24>
 80173ba:	4b17      	ldr	r3, [pc, #92]	; (8017418 <tcpip_try_callback+0x74>)
 80173bc:	f240 125d 	movw	r2, #349	; 0x15d
 80173c0:	4916      	ldr	r1, [pc, #88]	; (801741c <tcpip_try_callback+0x78>)
 80173c2:	4817      	ldr	r0, [pc, #92]	; (8017420 <tcpip_try_callback+0x7c>)
 80173c4:	f00c fe00 	bl	8023fc8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80173c8:	2008      	movs	r0, #8
 80173ca:	f000 ff13 	bl	80181f4 <memp_malloc>
 80173ce:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d102      	bne.n	80173dc <tcpip_try_callback+0x38>
    return ERR_MEM;
 80173d6:	f04f 33ff 	mov.w	r3, #4294967295
 80173da:	e017      	b.n	801740c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	2201      	movs	r2, #1
 80173e0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	687a      	ldr	r2, [r7, #4]
 80173e6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	683a      	ldr	r2, [r7, #0]
 80173ec:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80173ee:	68f9      	ldr	r1, [r7, #12]
 80173f0:	4808      	ldr	r0, [pc, #32]	; (8017414 <tcpip_try_callback+0x70>)
 80173f2:	f00c f8af 	bl	8023554 <sys_mbox_trypost>
 80173f6:	4603      	mov	r3, r0
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d006      	beq.n	801740a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80173fc:	68f9      	ldr	r1, [r7, #12]
 80173fe:	2008      	movs	r0, #8
 8017400:	f000 ff74 	bl	80182ec <memp_free>
    return ERR_MEM;
 8017404:	f04f 33ff 	mov.w	r3, #4294967295
 8017408:	e000      	b.n	801740c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801740a:	2300      	movs	r3, #0
}
 801740c:	4618      	mov	r0, r3
 801740e:	3710      	adds	r7, #16
 8017410:	46bd      	mov	sp, r7
 8017412:	bd80      	pop	{r7, pc}
 8017414:	2007ba80 	.word	0x2007ba80
 8017418:	080262b4 	.word	0x080262b4
 801741c:	0802632c 	.word	0x0802632c
 8017420:	08026304 	.word	0x08026304

08017424 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8017424:	b580      	push	{r7, lr}
 8017426:	b084      	sub	sp, #16
 8017428:	af00      	add	r7, sp, #0
 801742a:	60f8      	str	r0, [r7, #12]
 801742c:	60b9      	str	r1, [r7, #8]
 801742e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8017430:	4806      	ldr	r0, [pc, #24]	; (801744c <tcpip_send_msg_wait_sem+0x28>)
 8017432:	f00c fa15 	bl	8023860 <sys_mutex_lock>
  fn(apimsg);
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	68b8      	ldr	r0, [r7, #8]
 801743a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801743c:	4803      	ldr	r0, [pc, #12]	; (801744c <tcpip_send_msg_wait_sem+0x28>)
 801743e:	f00c fa1e 	bl	802387e <sys_mutex_unlock>
  return ERR_OK;
 8017442:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8017444:	4618      	mov	r0, r3
 8017446:	3710      	adds	r7, #16
 8017448:	46bd      	mov	sp, r7
 801744a:	bd80      	pop	{r7, pc}
 801744c:	2007ba84 	.word	0x2007ba84

08017450 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8017450:	b580      	push	{r7, lr}
 8017452:	b084      	sub	sp, #16
 8017454:	af02      	add	r7, sp, #8
 8017456:	6078      	str	r0, [r7, #4]
 8017458:	6039      	str	r1, [r7, #0]
  lwip_init();
 801745a:	f000 f92d 	bl	80176b8 <lwip_init>

  tcpip_init_done = initfunc;
 801745e:	4a17      	ldr	r2, [pc, #92]	; (80174bc <tcpip_init+0x6c>)
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8017464:	4a16      	ldr	r2, [pc, #88]	; (80174c0 <tcpip_init+0x70>)
 8017466:	683b      	ldr	r3, [r7, #0]
 8017468:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801746a:	2106      	movs	r1, #6
 801746c:	4815      	ldr	r0, [pc, #84]	; (80174c4 <tcpip_init+0x74>)
 801746e:	f00c f817 	bl	80234a0 <sys_mbox_new>
 8017472:	4603      	mov	r3, r0
 8017474:	2b00      	cmp	r3, #0
 8017476:	d006      	beq.n	8017486 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8017478:	4b13      	ldr	r3, [pc, #76]	; (80174c8 <tcpip_init+0x78>)
 801747a:	f240 2261 	movw	r2, #609	; 0x261
 801747e:	4913      	ldr	r1, [pc, #76]	; (80174cc <tcpip_init+0x7c>)
 8017480:	4813      	ldr	r0, [pc, #76]	; (80174d0 <tcpip_init+0x80>)
 8017482:	f00c fda1 	bl	8023fc8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8017486:	4813      	ldr	r0, [pc, #76]	; (80174d4 <tcpip_init+0x84>)
 8017488:	f00c f9b4 	bl	80237f4 <sys_mutex_new>
 801748c:	4603      	mov	r3, r0
 801748e:	2b00      	cmp	r3, #0
 8017490:	d006      	beq.n	80174a0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8017492:	4b0d      	ldr	r3, [pc, #52]	; (80174c8 <tcpip_init+0x78>)
 8017494:	f240 2265 	movw	r2, #613	; 0x265
 8017498:	490f      	ldr	r1, [pc, #60]	; (80174d8 <tcpip_init+0x88>)
 801749a:	480d      	ldr	r0, [pc, #52]	; (80174d0 <tcpip_init+0x80>)
 801749c:	f00c fd94 	bl	8023fc8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80174a0:	2318      	movs	r3, #24
 80174a2:	9300      	str	r3, [sp, #0]
 80174a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80174a8:	2200      	movs	r2, #0
 80174aa:	490c      	ldr	r1, [pc, #48]	; (80174dc <tcpip_init+0x8c>)
 80174ac:	480c      	ldr	r0, [pc, #48]	; (80174e0 <tcpip_init+0x90>)
 80174ae:	f00c f9f3 	bl	8023898 <sys_thread_new>
}
 80174b2:	bf00      	nop
 80174b4:	3708      	adds	r7, #8
 80174b6:	46bd      	mov	sp, r7
 80174b8:	bd80      	pop	{r7, pc}
 80174ba:	bf00      	nop
 80174bc:	2007ba78 	.word	0x2007ba78
 80174c0:	2007ba7c 	.word	0x2007ba7c
 80174c4:	2007ba80 	.word	0x2007ba80
 80174c8:	080262b4 	.word	0x080262b4
 80174cc:	0802633c 	.word	0x0802633c
 80174d0:	08026304 	.word	0x08026304
 80174d4:	2007ba84 	.word	0x2007ba84
 80174d8:	08026360 	.word	0x08026360
 80174dc:	080171e1 	.word	0x080171e1
 80174e0:	08026384 	.word	0x08026384

080174e4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80174e4:	b480      	push	{r7}
 80174e6:	b083      	sub	sp, #12
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	4603      	mov	r3, r0
 80174ec:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80174ee:	88fb      	ldrh	r3, [r7, #6]
 80174f0:	021b      	lsls	r3, r3, #8
 80174f2:	b21a      	sxth	r2, r3
 80174f4:	88fb      	ldrh	r3, [r7, #6]
 80174f6:	0a1b      	lsrs	r3, r3, #8
 80174f8:	b29b      	uxth	r3, r3
 80174fa:	b21b      	sxth	r3, r3
 80174fc:	4313      	orrs	r3, r2
 80174fe:	b21b      	sxth	r3, r3
 8017500:	b29b      	uxth	r3, r3
}
 8017502:	4618      	mov	r0, r3
 8017504:	370c      	adds	r7, #12
 8017506:	46bd      	mov	sp, r7
 8017508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801750c:	4770      	bx	lr

0801750e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801750e:	b480      	push	{r7}
 8017510:	b083      	sub	sp, #12
 8017512:	af00      	add	r7, sp, #0
 8017514:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	061a      	lsls	r2, r3, #24
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	021b      	lsls	r3, r3, #8
 801751e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8017522:	431a      	orrs	r2, r3
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	0a1b      	lsrs	r3, r3, #8
 8017528:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801752c:	431a      	orrs	r2, r3
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	0e1b      	lsrs	r3, r3, #24
 8017532:	4313      	orrs	r3, r2
}
 8017534:	4618      	mov	r0, r3
 8017536:	370c      	adds	r7, #12
 8017538:	46bd      	mov	sp, r7
 801753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801753e:	4770      	bx	lr

08017540 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8017540:	b480      	push	{r7}
 8017542:	b089      	sub	sp, #36	; 0x24
 8017544:	af00      	add	r7, sp, #0
 8017546:	6078      	str	r0, [r7, #4]
 8017548:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801754e:	2300      	movs	r3, #0
 8017550:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8017552:	2300      	movs	r3, #0
 8017554:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8017556:	69fb      	ldr	r3, [r7, #28]
 8017558:	f003 0301 	and.w	r3, r3, #1
 801755c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801755e:	693b      	ldr	r3, [r7, #16]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d00d      	beq.n	8017580 <lwip_standard_chksum+0x40>
 8017564:	683b      	ldr	r3, [r7, #0]
 8017566:	2b00      	cmp	r3, #0
 8017568:	dd0a      	ble.n	8017580 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 801756a:	69fa      	ldr	r2, [r7, #28]
 801756c:	1c53      	adds	r3, r2, #1
 801756e:	61fb      	str	r3, [r7, #28]
 8017570:	f107 030e 	add.w	r3, r7, #14
 8017574:	3301      	adds	r3, #1
 8017576:	7812      	ldrb	r2, [r2, #0]
 8017578:	701a      	strb	r2, [r3, #0]
    len--;
 801757a:	683b      	ldr	r3, [r7, #0]
 801757c:	3b01      	subs	r3, #1
 801757e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8017580:	69fb      	ldr	r3, [r7, #28]
 8017582:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8017584:	e00a      	b.n	801759c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8017586:	69bb      	ldr	r3, [r7, #24]
 8017588:	1c9a      	adds	r2, r3, #2
 801758a:	61ba      	str	r2, [r7, #24]
 801758c:	881b      	ldrh	r3, [r3, #0]
 801758e:	461a      	mov	r2, r3
 8017590:	697b      	ldr	r3, [r7, #20]
 8017592:	4413      	add	r3, r2
 8017594:	617b      	str	r3, [r7, #20]
    len -= 2;
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	3b02      	subs	r3, #2
 801759a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 801759c:	683b      	ldr	r3, [r7, #0]
 801759e:	2b01      	cmp	r3, #1
 80175a0:	dcf1      	bgt.n	8017586 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80175a2:	683b      	ldr	r3, [r7, #0]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	dd04      	ble.n	80175b2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80175a8:	f107 030e 	add.w	r3, r7, #14
 80175ac:	69ba      	ldr	r2, [r7, #24]
 80175ae:	7812      	ldrb	r2, [r2, #0]
 80175b0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80175b2:	89fb      	ldrh	r3, [r7, #14]
 80175b4:	461a      	mov	r2, r3
 80175b6:	697b      	ldr	r3, [r7, #20]
 80175b8:	4413      	add	r3, r2
 80175ba:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80175bc:	697b      	ldr	r3, [r7, #20]
 80175be:	0c1a      	lsrs	r2, r3, #16
 80175c0:	697b      	ldr	r3, [r7, #20]
 80175c2:	b29b      	uxth	r3, r3
 80175c4:	4413      	add	r3, r2
 80175c6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80175c8:	697b      	ldr	r3, [r7, #20]
 80175ca:	0c1a      	lsrs	r2, r3, #16
 80175cc:	697b      	ldr	r3, [r7, #20]
 80175ce:	b29b      	uxth	r3, r3
 80175d0:	4413      	add	r3, r2
 80175d2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80175d4:	693b      	ldr	r3, [r7, #16]
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d007      	beq.n	80175ea <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80175da:	697b      	ldr	r3, [r7, #20]
 80175dc:	021b      	lsls	r3, r3, #8
 80175de:	b29a      	uxth	r2, r3
 80175e0:	697b      	ldr	r3, [r7, #20]
 80175e2:	0a1b      	lsrs	r3, r3, #8
 80175e4:	b2db      	uxtb	r3, r3
 80175e6:	4313      	orrs	r3, r2
 80175e8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80175ea:	697b      	ldr	r3, [r7, #20]
 80175ec:	b29b      	uxth	r3, r3
}
 80175ee:	4618      	mov	r0, r3
 80175f0:	3724      	adds	r7, #36	; 0x24
 80175f2:	46bd      	mov	sp, r7
 80175f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f8:	4770      	bx	lr

080175fa <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80175fa:	b580      	push	{r7, lr}
 80175fc:	b082      	sub	sp, #8
 80175fe:	af00      	add	r7, sp, #0
 8017600:	6078      	str	r0, [r7, #4]
 8017602:	460b      	mov	r3, r1
 8017604:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8017606:	887b      	ldrh	r3, [r7, #2]
 8017608:	4619      	mov	r1, r3
 801760a:	6878      	ldr	r0, [r7, #4]
 801760c:	f7ff ff98 	bl	8017540 <lwip_standard_chksum>
 8017610:	4603      	mov	r3, r0
 8017612:	43db      	mvns	r3, r3
 8017614:	b29b      	uxth	r3, r3
}
 8017616:	4618      	mov	r0, r3
 8017618:	3708      	adds	r7, #8
 801761a:	46bd      	mov	sp, r7
 801761c:	bd80      	pop	{r7, pc}

0801761e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 801761e:	b580      	push	{r7, lr}
 8017620:	b086      	sub	sp, #24
 8017622:	af00      	add	r7, sp, #0
 8017624:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8017626:	2300      	movs	r3, #0
 8017628:	60fb      	str	r3, [r7, #12]

  acc = 0;
 801762a:	2300      	movs	r3, #0
 801762c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	613b      	str	r3, [r7, #16]
 8017632:	e02b      	b.n	801768c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8017634:	693b      	ldr	r3, [r7, #16]
 8017636:	685a      	ldr	r2, [r3, #4]
 8017638:	693b      	ldr	r3, [r7, #16]
 801763a:	895b      	ldrh	r3, [r3, #10]
 801763c:	4619      	mov	r1, r3
 801763e:	4610      	mov	r0, r2
 8017640:	f7ff ff7e 	bl	8017540 <lwip_standard_chksum>
 8017644:	4603      	mov	r3, r0
 8017646:	461a      	mov	r2, r3
 8017648:	697b      	ldr	r3, [r7, #20]
 801764a:	4413      	add	r3, r2
 801764c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801764e:	697b      	ldr	r3, [r7, #20]
 8017650:	0c1a      	lsrs	r2, r3, #16
 8017652:	697b      	ldr	r3, [r7, #20]
 8017654:	b29b      	uxth	r3, r3
 8017656:	4413      	add	r3, r2
 8017658:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 801765a:	693b      	ldr	r3, [r7, #16]
 801765c:	895b      	ldrh	r3, [r3, #10]
 801765e:	f003 0301 	and.w	r3, r3, #1
 8017662:	b29b      	uxth	r3, r3
 8017664:	2b00      	cmp	r3, #0
 8017666:	d00e      	beq.n	8017686 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	2b00      	cmp	r3, #0
 801766c:	bf0c      	ite	eq
 801766e:	2301      	moveq	r3, #1
 8017670:	2300      	movne	r3, #0
 8017672:	b2db      	uxtb	r3, r3
 8017674:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8017676:	697b      	ldr	r3, [r7, #20]
 8017678:	021b      	lsls	r3, r3, #8
 801767a:	b29a      	uxth	r2, r3
 801767c:	697b      	ldr	r3, [r7, #20]
 801767e:	0a1b      	lsrs	r3, r3, #8
 8017680:	b2db      	uxtb	r3, r3
 8017682:	4313      	orrs	r3, r2
 8017684:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8017686:	693b      	ldr	r3, [r7, #16]
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	613b      	str	r3, [r7, #16]
 801768c:	693b      	ldr	r3, [r7, #16]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d1d0      	bne.n	8017634 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d007      	beq.n	80176a8 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8017698:	697b      	ldr	r3, [r7, #20]
 801769a:	021b      	lsls	r3, r3, #8
 801769c:	b29a      	uxth	r2, r3
 801769e:	697b      	ldr	r3, [r7, #20]
 80176a0:	0a1b      	lsrs	r3, r3, #8
 80176a2:	b2db      	uxtb	r3, r3
 80176a4:	4313      	orrs	r3, r2
 80176a6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80176a8:	697b      	ldr	r3, [r7, #20]
 80176aa:	b29b      	uxth	r3, r3
 80176ac:	43db      	mvns	r3, r3
 80176ae:	b29b      	uxth	r3, r3
}
 80176b0:	4618      	mov	r0, r3
 80176b2:	3718      	adds	r7, #24
 80176b4:	46bd      	mov	sp, r7
 80176b6:	bd80      	pop	{r7, pc}

080176b8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b082      	sub	sp, #8
 80176bc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80176be:	2300      	movs	r3, #0
 80176c0:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 80176c2:	f002 f847 	bl	8019754 <stats_init>
#if !NO_SYS
  sys_init();
 80176c6:	f00c f889 	bl	80237dc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80176ca:	f000 f8d5 	bl	8017878 <mem_init>
  memp_init();
 80176ce:	f000 fcf5 	bl	80180bc <memp_init>
  pbuf_init();
  netif_init();
 80176d2:	f000 fe35 	bl	8018340 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80176d6:	f008 fcb5 	bl	8020044 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80176da:	f002 f84b 	bl	8019774 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80176de:	f008 fbf7 	bl	801fed0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80176e2:	bf00      	nop
 80176e4:	3708      	adds	r7, #8
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd80      	pop	{r7, pc}
	...

080176ec <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80176ec:	b480      	push	{r7}
 80176ee:	b083      	sub	sp, #12
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	4603      	mov	r3, r0
 80176f4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80176f6:	4b05      	ldr	r3, [pc, #20]	; (801770c <ptr_to_mem+0x20>)
 80176f8:	681a      	ldr	r2, [r3, #0]
 80176fa:	88fb      	ldrh	r3, [r7, #6]
 80176fc:	4413      	add	r3, r2
}
 80176fe:	4618      	mov	r0, r3
 8017700:	370c      	adds	r7, #12
 8017702:	46bd      	mov	sp, r7
 8017704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017708:	4770      	bx	lr
 801770a:	bf00      	nop
 801770c:	2007baa0 	.word	0x2007baa0

08017710 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8017710:	b480      	push	{r7}
 8017712:	b083      	sub	sp, #12
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8017718:	4b05      	ldr	r3, [pc, #20]	; (8017730 <mem_to_ptr+0x20>)
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	687a      	ldr	r2, [r7, #4]
 801771e:	1ad3      	subs	r3, r2, r3
 8017720:	b29b      	uxth	r3, r3
}
 8017722:	4618      	mov	r0, r3
 8017724:	370c      	adds	r7, #12
 8017726:	46bd      	mov	sp, r7
 8017728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801772c:	4770      	bx	lr
 801772e:	bf00      	nop
 8017730:	2007baa0 	.word	0x2007baa0

08017734 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8017734:	b590      	push	{r4, r7, lr}
 8017736:	b085      	sub	sp, #20
 8017738:	af00      	add	r7, sp, #0
 801773a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801773c:	4b45      	ldr	r3, [pc, #276]	; (8017854 <plug_holes+0x120>)
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	687a      	ldr	r2, [r7, #4]
 8017742:	429a      	cmp	r2, r3
 8017744:	d206      	bcs.n	8017754 <plug_holes+0x20>
 8017746:	4b44      	ldr	r3, [pc, #272]	; (8017858 <plug_holes+0x124>)
 8017748:	f240 12df 	movw	r2, #479	; 0x1df
 801774c:	4943      	ldr	r1, [pc, #268]	; (801785c <plug_holes+0x128>)
 801774e:	4844      	ldr	r0, [pc, #272]	; (8017860 <plug_holes+0x12c>)
 8017750:	f00c fc3a 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8017754:	4b43      	ldr	r3, [pc, #268]	; (8017864 <plug_holes+0x130>)
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	687a      	ldr	r2, [r7, #4]
 801775a:	429a      	cmp	r2, r3
 801775c:	d306      	bcc.n	801776c <plug_holes+0x38>
 801775e:	4b3e      	ldr	r3, [pc, #248]	; (8017858 <plug_holes+0x124>)
 8017760:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017764:	4940      	ldr	r1, [pc, #256]	; (8017868 <plug_holes+0x134>)
 8017766:	483e      	ldr	r0, [pc, #248]	; (8017860 <plug_holes+0x12c>)
 8017768:	f00c fc2e 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	791b      	ldrb	r3, [r3, #4]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d006      	beq.n	8017782 <plug_holes+0x4e>
 8017774:	4b38      	ldr	r3, [pc, #224]	; (8017858 <plug_holes+0x124>)
 8017776:	f240 12e1 	movw	r2, #481	; 0x1e1
 801777a:	493c      	ldr	r1, [pc, #240]	; (801786c <plug_holes+0x138>)
 801777c:	4838      	ldr	r0, [pc, #224]	; (8017860 <plug_holes+0x12c>)
 801777e:	f00c fc23 	bl	8023fc8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	881b      	ldrh	r3, [r3, #0]
 8017786:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801778a:	d906      	bls.n	801779a <plug_holes+0x66>
 801778c:	4b32      	ldr	r3, [pc, #200]	; (8017858 <plug_holes+0x124>)
 801778e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8017792:	4937      	ldr	r1, [pc, #220]	; (8017870 <plug_holes+0x13c>)
 8017794:	4832      	ldr	r0, [pc, #200]	; (8017860 <plug_holes+0x12c>)
 8017796:	f00c fc17 	bl	8023fc8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	881b      	ldrh	r3, [r3, #0]
 801779e:	4618      	mov	r0, r3
 80177a0:	f7ff ffa4 	bl	80176ec <ptr_to_mem>
 80177a4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80177a6:	687a      	ldr	r2, [r7, #4]
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	429a      	cmp	r2, r3
 80177ac:	d024      	beq.n	80177f8 <plug_holes+0xc4>
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	791b      	ldrb	r3, [r3, #4]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d120      	bne.n	80177f8 <plug_holes+0xc4>
 80177b6:	4b2b      	ldr	r3, [pc, #172]	; (8017864 <plug_holes+0x130>)
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	68fa      	ldr	r2, [r7, #12]
 80177bc:	429a      	cmp	r2, r3
 80177be:	d01b      	beq.n	80177f8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80177c0:	4b2c      	ldr	r3, [pc, #176]	; (8017874 <plug_holes+0x140>)
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	68fa      	ldr	r2, [r7, #12]
 80177c6:	429a      	cmp	r2, r3
 80177c8:	d102      	bne.n	80177d0 <plug_holes+0x9c>
      lfree = mem;
 80177ca:	4a2a      	ldr	r2, [pc, #168]	; (8017874 <plug_holes+0x140>)
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	881a      	ldrh	r2, [r3, #0]
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	881b      	ldrh	r3, [r3, #0]
 80177dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80177e0:	d00a      	beq.n	80177f8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	881b      	ldrh	r3, [r3, #0]
 80177e6:	4618      	mov	r0, r3
 80177e8:	f7ff ff80 	bl	80176ec <ptr_to_mem>
 80177ec:	4604      	mov	r4, r0
 80177ee:	6878      	ldr	r0, [r7, #4]
 80177f0:	f7ff ff8e 	bl	8017710 <mem_to_ptr>
 80177f4:	4603      	mov	r3, r0
 80177f6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	885b      	ldrh	r3, [r3, #2]
 80177fc:	4618      	mov	r0, r3
 80177fe:	f7ff ff75 	bl	80176ec <ptr_to_mem>
 8017802:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8017804:	68ba      	ldr	r2, [r7, #8]
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	429a      	cmp	r2, r3
 801780a:	d01f      	beq.n	801784c <plug_holes+0x118>
 801780c:	68bb      	ldr	r3, [r7, #8]
 801780e:	791b      	ldrb	r3, [r3, #4]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d11b      	bne.n	801784c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8017814:	4b17      	ldr	r3, [pc, #92]	; (8017874 <plug_holes+0x140>)
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	687a      	ldr	r2, [r7, #4]
 801781a:	429a      	cmp	r2, r3
 801781c:	d102      	bne.n	8017824 <plug_holes+0xf0>
      lfree = pmem;
 801781e:	4a15      	ldr	r2, [pc, #84]	; (8017874 <plug_holes+0x140>)
 8017820:	68bb      	ldr	r3, [r7, #8]
 8017822:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	881a      	ldrh	r2, [r3, #0]
 8017828:	68bb      	ldr	r3, [r7, #8]
 801782a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	881b      	ldrh	r3, [r3, #0]
 8017830:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017834:	d00a      	beq.n	801784c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	881b      	ldrh	r3, [r3, #0]
 801783a:	4618      	mov	r0, r3
 801783c:	f7ff ff56 	bl	80176ec <ptr_to_mem>
 8017840:	4604      	mov	r4, r0
 8017842:	68b8      	ldr	r0, [r7, #8]
 8017844:	f7ff ff64 	bl	8017710 <mem_to_ptr>
 8017848:	4603      	mov	r3, r0
 801784a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801784c:	bf00      	nop
 801784e:	3714      	adds	r7, #20
 8017850:	46bd      	mov	sp, r7
 8017852:	bd90      	pop	{r4, r7, pc}
 8017854:	2007baa0 	.word	0x2007baa0
 8017858:	08026394 	.word	0x08026394
 801785c:	080263c4 	.word	0x080263c4
 8017860:	080263dc 	.word	0x080263dc
 8017864:	2007baa4 	.word	0x2007baa4
 8017868:	08026404 	.word	0x08026404
 801786c:	08026420 	.word	0x08026420
 8017870:	0802643c 	.word	0x0802643c
 8017874:	2007baac 	.word	0x2007baac

08017878 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b082      	sub	sp, #8
 801787c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801787e:	4b1f      	ldr	r3, [pc, #124]	; (80178fc <mem_init+0x84>)
 8017880:	4a1f      	ldr	r2, [pc, #124]	; (8017900 <mem_init+0x88>)
 8017882:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8017884:	4b1d      	ldr	r3, [pc, #116]	; (80178fc <mem_init+0x84>)
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8017890:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	2200      	movs	r2, #0
 8017896:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	2200      	movs	r2, #0
 801789c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801789e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80178a2:	f7ff ff23 	bl	80176ec <ptr_to_mem>
 80178a6:	4603      	mov	r3, r0
 80178a8:	4a16      	ldr	r2, [pc, #88]	; (8017904 <mem_init+0x8c>)
 80178aa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80178ac:	4b15      	ldr	r3, [pc, #84]	; (8017904 <mem_init+0x8c>)
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	2201      	movs	r2, #1
 80178b2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80178b4:	4b13      	ldr	r3, [pc, #76]	; (8017904 <mem_init+0x8c>)
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80178bc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80178be:	4b11      	ldr	r3, [pc, #68]	; (8017904 <mem_init+0x8c>)
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80178c6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80178c8:	4b0c      	ldr	r3, [pc, #48]	; (80178fc <mem_init+0x84>)
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	4a0e      	ldr	r2, [pc, #56]	; (8017908 <mem_init+0x90>)
 80178ce:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 80178d0:	4b0e      	ldr	r3, [pc, #56]	; (801790c <mem_init+0x94>)
 80178d2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80178d6:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80178da:	480d      	ldr	r0, [pc, #52]	; (8017910 <mem_init+0x98>)
 80178dc:	f00b ff8a 	bl	80237f4 <sys_mutex_new>
 80178e0:	4603      	mov	r3, r0
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d006      	beq.n	80178f4 <mem_init+0x7c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80178e6:	4b0b      	ldr	r3, [pc, #44]	; (8017914 <mem_init+0x9c>)
 80178e8:	f240 221f 	movw	r2, #543	; 0x21f
 80178ec:	490a      	ldr	r1, [pc, #40]	; (8017918 <mem_init+0xa0>)
 80178ee:	480b      	ldr	r0, [pc, #44]	; (801791c <mem_init+0xa4>)
 80178f0:	f00c fb6a 	bl	8023fc8 <iprintf>
  }
}
 80178f4:	bf00      	nop
 80178f6:	3708      	adds	r7, #8
 80178f8:	46bd      	mov	sp, r7
 80178fa:	bd80      	pop	{r7, pc}
 80178fc:	2007baa0 	.word	0x2007baa0
 8017900:	20044000 	.word	0x20044000
 8017904:	2007baa4 	.word	0x2007baa4
 8017908:	2007baac 	.word	0x2007baac
 801790c:	2007ecb8 	.word	0x2007ecb8
 8017910:	2007baa8 	.word	0x2007baa8
 8017914:	08026394 	.word	0x08026394
 8017918:	08026468 	.word	0x08026468
 801791c:	080263dc 	.word	0x080263dc

08017920 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b086      	sub	sp, #24
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8017928:	6878      	ldr	r0, [r7, #4]
 801792a:	f7ff fef1 	bl	8017710 <mem_to_ptr>
 801792e:	4603      	mov	r3, r0
 8017930:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	881b      	ldrh	r3, [r3, #0]
 8017936:	4618      	mov	r0, r3
 8017938:	f7ff fed8 	bl	80176ec <ptr_to_mem>
 801793c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	885b      	ldrh	r3, [r3, #2]
 8017942:	4618      	mov	r0, r3
 8017944:	f7ff fed2 	bl	80176ec <ptr_to_mem>
 8017948:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	881b      	ldrh	r3, [r3, #0]
 801794e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017952:	d818      	bhi.n	8017986 <mem_link_valid+0x66>
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	885b      	ldrh	r3, [r3, #2]
 8017958:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801795c:	d813      	bhi.n	8017986 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8017962:	8afa      	ldrh	r2, [r7, #22]
 8017964:	429a      	cmp	r2, r3
 8017966:	d004      	beq.n	8017972 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	881b      	ldrh	r3, [r3, #0]
 801796c:	8afa      	ldrh	r2, [r7, #22]
 801796e:	429a      	cmp	r2, r3
 8017970:	d109      	bne.n	8017986 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8017972:	4b08      	ldr	r3, [pc, #32]	; (8017994 <mem_link_valid+0x74>)
 8017974:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017976:	693a      	ldr	r2, [r7, #16]
 8017978:	429a      	cmp	r2, r3
 801797a:	d006      	beq.n	801798a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801797c:	693b      	ldr	r3, [r7, #16]
 801797e:	885b      	ldrh	r3, [r3, #2]
 8017980:	8afa      	ldrh	r2, [r7, #22]
 8017982:	429a      	cmp	r2, r3
 8017984:	d001      	beq.n	801798a <mem_link_valid+0x6a>
    return 0;
 8017986:	2300      	movs	r3, #0
 8017988:	e000      	b.n	801798c <mem_link_valid+0x6c>
  }
  return 1;
 801798a:	2301      	movs	r3, #1
}
 801798c:	4618      	mov	r0, r3
 801798e:	3718      	adds	r7, #24
 8017990:	46bd      	mov	sp, r7
 8017992:	bd80      	pop	{r7, pc}
 8017994:	2007baa4 	.word	0x2007baa4

08017998 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8017998:	b580      	push	{r7, lr}
 801799a:	b088      	sub	sp, #32
 801799c:	af00      	add	r7, sp, #0
 801799e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d103      	bne.n	80179ae <mem_free+0x16>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
 80179a6:	485a      	ldr	r0, [pc, #360]	; (8017b10 <mem_free+0x178>)
 80179a8:	f00c fb7c 	bl	80240a4 <puts>
    return;
 80179ac:	e0ac      	b.n	8017b08 <mem_free+0x170>
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	f003 0303 	and.w	r3, r3, #3
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d018      	beq.n	80179ea <mem_free+0x52>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80179b8:	4b56      	ldr	r3, [pc, #344]	; (8017b14 <mem_free+0x17c>)
 80179ba:	f240 2273 	movw	r2, #627	; 0x273
 80179be:	4956      	ldr	r1, [pc, #344]	; (8017b18 <mem_free+0x180>)
 80179c0:	4856      	ldr	r0, [pc, #344]	; (8017b1c <mem_free+0x184>)
 80179c2:	f00c fb01 	bl	8023fc8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
 80179c6:	4854      	ldr	r0, [pc, #336]	; (8017b18 <mem_free+0x180>)
 80179c8:	f00c fb6c 	bl	80240a4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80179cc:	f00b ff84 	bl	80238d8 <sys_arch_protect>
 80179d0:	60f8      	str	r0, [r7, #12]
 80179d2:	4b53      	ldr	r3, [pc, #332]	; (8017b20 <mem_free+0x188>)
 80179d4:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80179d8:	3301      	adds	r3, #1
 80179da:	b29a      	uxth	r2, r3
 80179dc:	4b50      	ldr	r3, [pc, #320]	; (8017b20 <mem_free+0x188>)
 80179de:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 80179e2:	68f8      	ldr	r0, [r7, #12]
 80179e4:	f00b ff86 	bl	80238f4 <sys_arch_unprotect>
    return;
 80179e8:	e08e      	b.n	8017b08 <mem_free+0x170>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	3b08      	subs	r3, #8
 80179ee:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80179f0:	4b4c      	ldr	r3, [pc, #304]	; (8017b24 <mem_free+0x18c>)
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	69fa      	ldr	r2, [r7, #28]
 80179f6:	429a      	cmp	r2, r3
 80179f8:	d306      	bcc.n	8017a08 <mem_free+0x70>
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	f103 020c 	add.w	r2, r3, #12
 8017a00:	4b49      	ldr	r3, [pc, #292]	; (8017b28 <mem_free+0x190>)
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	429a      	cmp	r2, r3
 8017a06:	d918      	bls.n	8017a3a <mem_free+0xa2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8017a08:	4b42      	ldr	r3, [pc, #264]	; (8017b14 <mem_free+0x17c>)
 8017a0a:	f240 227f 	movw	r2, #639	; 0x27f
 8017a0e:	4947      	ldr	r1, [pc, #284]	; (8017b2c <mem_free+0x194>)
 8017a10:	4842      	ldr	r0, [pc, #264]	; (8017b1c <mem_free+0x184>)
 8017a12:	f00c fad9 	bl	8023fc8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
 8017a16:	4845      	ldr	r0, [pc, #276]	; (8017b2c <mem_free+0x194>)
 8017a18:	f00c fb44 	bl	80240a4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017a1c:	f00b ff5c 	bl	80238d8 <sys_arch_protect>
 8017a20:	6138      	str	r0, [r7, #16]
 8017a22:	4b3f      	ldr	r3, [pc, #252]	; (8017b20 <mem_free+0x188>)
 8017a24:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8017a28:	3301      	adds	r3, #1
 8017a2a:	b29a      	uxth	r2, r3
 8017a2c:	4b3c      	ldr	r3, [pc, #240]	; (8017b20 <mem_free+0x188>)
 8017a2e:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8017a32:	6938      	ldr	r0, [r7, #16]
 8017a34:	f00b ff5e 	bl	80238f4 <sys_arch_unprotect>
    return;
 8017a38:	e066      	b.n	8017b08 <mem_free+0x170>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8017a3a:	483d      	ldr	r0, [pc, #244]	; (8017b30 <mem_free+0x198>)
 8017a3c:	f00b ff10 	bl	8023860 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8017a40:	69fb      	ldr	r3, [r7, #28]
 8017a42:	791b      	ldrb	r3, [r3, #4]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d11b      	bne.n	8017a80 <mem_free+0xe8>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8017a48:	4b32      	ldr	r3, [pc, #200]	; (8017b14 <mem_free+0x17c>)
 8017a4a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8017a4e:	4939      	ldr	r1, [pc, #228]	; (8017b34 <mem_free+0x19c>)
 8017a50:	4832      	ldr	r0, [pc, #200]	; (8017b1c <mem_free+0x184>)
 8017a52:	f00c fab9 	bl	8023fc8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8017a56:	4836      	ldr	r0, [pc, #216]	; (8017b30 <mem_free+0x198>)
 8017a58:	f00b ff11 	bl	802387e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
 8017a5c:	4836      	ldr	r0, [pc, #216]	; (8017b38 <mem_free+0x1a0>)
 8017a5e:	f00c fb21 	bl	80240a4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017a62:	f00b ff39 	bl	80238d8 <sys_arch_protect>
 8017a66:	6178      	str	r0, [r7, #20]
 8017a68:	4b2d      	ldr	r3, [pc, #180]	; (8017b20 <mem_free+0x188>)
 8017a6a:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8017a6e:	3301      	adds	r3, #1
 8017a70:	b29a      	uxth	r2, r3
 8017a72:	4b2b      	ldr	r3, [pc, #172]	; (8017b20 <mem_free+0x188>)
 8017a74:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8017a78:	6978      	ldr	r0, [r7, #20]
 8017a7a:	f00b ff3b 	bl	80238f4 <sys_arch_unprotect>
    return;
 8017a7e:	e043      	b.n	8017b08 <mem_free+0x170>
  }

  if (!mem_link_valid(mem)) {
 8017a80:	69f8      	ldr	r0, [r7, #28]
 8017a82:	f7ff ff4d 	bl	8017920 <mem_link_valid>
 8017a86:	4603      	mov	r3, r0
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d11b      	bne.n	8017ac4 <mem_free+0x12c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8017a8c:	4b21      	ldr	r3, [pc, #132]	; (8017b14 <mem_free+0x17c>)
 8017a8e:	f240 2295 	movw	r2, #661	; 0x295
 8017a92:	492a      	ldr	r1, [pc, #168]	; (8017b3c <mem_free+0x1a4>)
 8017a94:	4821      	ldr	r0, [pc, #132]	; (8017b1c <mem_free+0x184>)
 8017a96:	f00c fa97 	bl	8023fc8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8017a9a:	4825      	ldr	r0, [pc, #148]	; (8017b30 <mem_free+0x198>)
 8017a9c:	f00b feef 	bl	802387e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
 8017aa0:	4827      	ldr	r0, [pc, #156]	; (8017b40 <mem_free+0x1a8>)
 8017aa2:	f00c faff 	bl	80240a4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017aa6:	f00b ff17 	bl	80238d8 <sys_arch_protect>
 8017aaa:	61b8      	str	r0, [r7, #24]
 8017aac:	4b1c      	ldr	r3, [pc, #112]	; (8017b20 <mem_free+0x188>)
 8017aae:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8017ab2:	3301      	adds	r3, #1
 8017ab4:	b29a      	uxth	r2, r3
 8017ab6:	4b1a      	ldr	r3, [pc, #104]	; (8017b20 <mem_free+0x188>)
 8017ab8:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8017abc:	69b8      	ldr	r0, [r7, #24]
 8017abe:	f00b ff19 	bl	80238f4 <sys_arch_unprotect>
    return;
 8017ac2:	e021      	b.n	8017b08 <mem_free+0x170>
  }

  /* mem is now unused. */
  mem->used = 0;
 8017ac4:	69fb      	ldr	r3, [r7, #28]
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8017aca:	4b1e      	ldr	r3, [pc, #120]	; (8017b44 <mem_free+0x1ac>)
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	69fa      	ldr	r2, [r7, #28]
 8017ad0:	429a      	cmp	r2, r3
 8017ad2:	d202      	bcs.n	8017ada <mem_free+0x142>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8017ad4:	4a1b      	ldr	r2, [pc, #108]	; (8017b44 <mem_free+0x1ac>)
 8017ad6:	69fb      	ldr	r3, [r7, #28]
 8017ad8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8017ada:	4b11      	ldr	r3, [pc, #68]	; (8017b20 <mem_free+0x188>)
 8017adc:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 8017ae0:	4b10      	ldr	r3, [pc, #64]	; (8017b24 <mem_free+0x18c>)
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	69f9      	ldr	r1, [r7, #28]
 8017ae6:	1acb      	subs	r3, r1, r3
 8017ae8:	b299      	uxth	r1, r3
 8017aea:	69fb      	ldr	r3, [r7, #28]
 8017aec:	881b      	ldrh	r3, [r3, #0]
 8017aee:	1acb      	subs	r3, r1, r3
 8017af0:	b29b      	uxth	r3, r3
 8017af2:	4413      	add	r3, r2
 8017af4:	b29a      	uxth	r2, r3
 8017af6:	4b0a      	ldr	r3, [pc, #40]	; (8017b20 <mem_free+0x188>)
 8017af8:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8017afc:	69f8      	ldr	r0, [r7, #28]
 8017afe:	f7ff fe19 	bl	8017734 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017b02:	480b      	ldr	r0, [pc, #44]	; (8017b30 <mem_free+0x198>)
 8017b04:	f00b febb 	bl	802387e <sys_mutex_unlock>
}
 8017b08:	3720      	adds	r7, #32
 8017b0a:	46bd      	mov	sp, r7
 8017b0c:	bd80      	pop	{r7, pc}
 8017b0e:	bf00      	nop
 8017b10:	08026484 	.word	0x08026484
 8017b14:	08026394 	.word	0x08026394
 8017b18:	080264a4 	.word	0x080264a4
 8017b1c:	080263dc 	.word	0x080263dc
 8017b20:	2007ecb8 	.word	0x2007ecb8
 8017b24:	2007baa0 	.word	0x2007baa0
 8017b28:	2007baa4 	.word	0x2007baa4
 8017b2c:	080264c8 	.word	0x080264c8
 8017b30:	2007baa8 	.word	0x2007baa8
 8017b34:	080264e4 	.word	0x080264e4
 8017b38:	0802650c 	.word	0x0802650c
 8017b3c:	08026534 	.word	0x08026534
 8017b40:	08026568 	.word	0x08026568
 8017b44:	2007baac 	.word	0x2007baac

08017b48 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8017b48:	b580      	push	{r7, lr}
 8017b4a:	b088      	sub	sp, #32
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	6078      	str	r0, [r7, #4]
 8017b50:	460b      	mov	r3, r1
 8017b52:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8017b54:	887b      	ldrh	r3, [r7, #2]
 8017b56:	3303      	adds	r3, #3
 8017b58:	b29b      	uxth	r3, r3
 8017b5a:	f023 0303 	bic.w	r3, r3, #3
 8017b5e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8017b60:	8bfb      	ldrh	r3, [r7, #30]
 8017b62:	2b0b      	cmp	r3, #11
 8017b64:	d801      	bhi.n	8017b6a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8017b66:	230c      	movs	r3, #12
 8017b68:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8017b6a:	8bfb      	ldrh	r3, [r7, #30]
 8017b6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017b70:	d803      	bhi.n	8017b7a <mem_trim+0x32>
 8017b72:	8bfa      	ldrh	r2, [r7, #30]
 8017b74:	887b      	ldrh	r3, [r7, #2]
 8017b76:	429a      	cmp	r2, r3
 8017b78:	d201      	bcs.n	8017b7e <mem_trim+0x36>
    return NULL;
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	e0fb      	b.n	8017d76 <mem_trim+0x22e>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8017b7e:	4b80      	ldr	r3, [pc, #512]	; (8017d80 <mem_trim+0x238>)
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	687a      	ldr	r2, [r7, #4]
 8017b84:	429a      	cmp	r2, r3
 8017b86:	d304      	bcc.n	8017b92 <mem_trim+0x4a>
 8017b88:	4b7e      	ldr	r3, [pc, #504]	; (8017d84 <mem_trim+0x23c>)
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	687a      	ldr	r2, [r7, #4]
 8017b8e:	429a      	cmp	r2, r3
 8017b90:	d306      	bcc.n	8017ba0 <mem_trim+0x58>
 8017b92:	4b7d      	ldr	r3, [pc, #500]	; (8017d88 <mem_trim+0x240>)
 8017b94:	f240 22d1 	movw	r2, #721	; 0x2d1
 8017b98:	497c      	ldr	r1, [pc, #496]	; (8017d8c <mem_trim+0x244>)
 8017b9a:	487d      	ldr	r0, [pc, #500]	; (8017d90 <mem_trim+0x248>)
 8017b9c:	f00c fa14 	bl	8023fc8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8017ba0:	4b77      	ldr	r3, [pc, #476]	; (8017d80 <mem_trim+0x238>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	687a      	ldr	r2, [r7, #4]
 8017ba6:	429a      	cmp	r2, r3
 8017ba8:	d304      	bcc.n	8017bb4 <mem_trim+0x6c>
 8017baa:	4b76      	ldr	r3, [pc, #472]	; (8017d84 <mem_trim+0x23c>)
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	687a      	ldr	r2, [r7, #4]
 8017bb0:	429a      	cmp	r2, r3
 8017bb2:	d312      	bcc.n	8017bda <mem_trim+0x92>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
 8017bb4:	4877      	ldr	r0, [pc, #476]	; (8017d94 <mem_trim+0x24c>)
 8017bb6:	f00c fa75 	bl	80240a4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017bba:	f00b fe8d 	bl	80238d8 <sys_arch_protect>
 8017bbe:	60b8      	str	r0, [r7, #8]
 8017bc0:	4b75      	ldr	r3, [pc, #468]	; (8017d98 <mem_trim+0x250>)
 8017bc2:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8017bc6:	3301      	adds	r3, #1
 8017bc8:	b29a      	uxth	r2, r3
 8017bca:	4b73      	ldr	r3, [pc, #460]	; (8017d98 <mem_trim+0x250>)
 8017bcc:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8017bd0:	68b8      	ldr	r0, [r7, #8]
 8017bd2:	f00b fe8f 	bl	80238f4 <sys_arch_unprotect>
    return rmem;
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	e0cd      	b.n	8017d76 <mem_trim+0x22e>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	3b08      	subs	r3, #8
 8017bde:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8017be0:	69b8      	ldr	r0, [r7, #24]
 8017be2:	f7ff fd95 	bl	8017710 <mem_to_ptr>
 8017be6:	4603      	mov	r3, r0
 8017be8:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8017bea:	69bb      	ldr	r3, [r7, #24]
 8017bec:	881a      	ldrh	r2, [r3, #0]
 8017bee:	8afb      	ldrh	r3, [r7, #22]
 8017bf0:	1ad3      	subs	r3, r2, r3
 8017bf2:	b29b      	uxth	r3, r3
 8017bf4:	3b08      	subs	r3, #8
 8017bf6:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8017bf8:	8bfa      	ldrh	r2, [r7, #30]
 8017bfa:	8abb      	ldrh	r3, [r7, #20]
 8017bfc:	429a      	cmp	r2, r3
 8017bfe:	d906      	bls.n	8017c0e <mem_trim+0xc6>
 8017c00:	4b61      	ldr	r3, [pc, #388]	; (8017d88 <mem_trim+0x240>)
 8017c02:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8017c06:	4965      	ldr	r1, [pc, #404]	; (8017d9c <mem_trim+0x254>)
 8017c08:	4861      	ldr	r0, [pc, #388]	; (8017d90 <mem_trim+0x248>)
 8017c0a:	f00c f9dd 	bl	8023fc8 <iprintf>
  if (newsize > size) {
 8017c0e:	8bfa      	ldrh	r2, [r7, #30]
 8017c10:	8abb      	ldrh	r3, [r7, #20]
 8017c12:	429a      	cmp	r2, r3
 8017c14:	d901      	bls.n	8017c1a <mem_trim+0xd2>
    /* not supported */
    return NULL;
 8017c16:	2300      	movs	r3, #0
 8017c18:	e0ad      	b.n	8017d76 <mem_trim+0x22e>
  }
  if (newsize == size) {
 8017c1a:	8bfa      	ldrh	r2, [r7, #30]
 8017c1c:	8abb      	ldrh	r3, [r7, #20]
 8017c1e:	429a      	cmp	r2, r3
 8017c20:	d101      	bne.n	8017c26 <mem_trim+0xde>
    /* No change in size, simply return */
    return rmem;
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	e0a7      	b.n	8017d76 <mem_trim+0x22e>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8017c26:	485e      	ldr	r0, [pc, #376]	; (8017da0 <mem_trim+0x258>)
 8017c28:	f00b fe1a 	bl	8023860 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8017c2c:	69bb      	ldr	r3, [r7, #24]
 8017c2e:	881b      	ldrh	r3, [r3, #0]
 8017c30:	4618      	mov	r0, r3
 8017c32:	f7ff fd5b 	bl	80176ec <ptr_to_mem>
 8017c36:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8017c38:	693b      	ldr	r3, [r7, #16]
 8017c3a:	791b      	ldrb	r3, [r3, #4]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d14b      	bne.n	8017cd8 <mem_trim+0x190>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8017c40:	69bb      	ldr	r3, [r7, #24]
 8017c42:	881b      	ldrh	r3, [r3, #0]
 8017c44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017c48:	d106      	bne.n	8017c58 <mem_trim+0x110>
 8017c4a:	4b4f      	ldr	r3, [pc, #316]	; (8017d88 <mem_trim+0x240>)
 8017c4c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8017c50:	4954      	ldr	r1, [pc, #336]	; (8017da4 <mem_trim+0x25c>)
 8017c52:	484f      	ldr	r0, [pc, #316]	; (8017d90 <mem_trim+0x248>)
 8017c54:	f00c f9b8 	bl	8023fc8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8017c58:	693b      	ldr	r3, [r7, #16]
 8017c5a:	881b      	ldrh	r3, [r3, #0]
 8017c5c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017c5e:	8afa      	ldrh	r2, [r7, #22]
 8017c60:	8bfb      	ldrh	r3, [r7, #30]
 8017c62:	4413      	add	r3, r2
 8017c64:	b29b      	uxth	r3, r3
 8017c66:	3308      	adds	r3, #8
 8017c68:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8017c6a:	4b4f      	ldr	r3, [pc, #316]	; (8017da8 <mem_trim+0x260>)
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	693a      	ldr	r2, [r7, #16]
 8017c70:	429a      	cmp	r2, r3
 8017c72:	d106      	bne.n	8017c82 <mem_trim+0x13a>
      lfree = ptr_to_mem(ptr2);
 8017c74:	89fb      	ldrh	r3, [r7, #14]
 8017c76:	4618      	mov	r0, r3
 8017c78:	f7ff fd38 	bl	80176ec <ptr_to_mem>
 8017c7c:	4603      	mov	r3, r0
 8017c7e:	4a4a      	ldr	r2, [pc, #296]	; (8017da8 <mem_trim+0x260>)
 8017c80:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8017c82:	89fb      	ldrh	r3, [r7, #14]
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7ff fd31 	bl	80176ec <ptr_to_mem>
 8017c8a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8017c8c:	693b      	ldr	r3, [r7, #16]
 8017c8e:	2200      	movs	r2, #0
 8017c90:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8017c92:	693b      	ldr	r3, [r7, #16]
 8017c94:	89ba      	ldrh	r2, [r7, #12]
 8017c96:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8017c98:	693b      	ldr	r3, [r7, #16]
 8017c9a:	8afa      	ldrh	r2, [r7, #22]
 8017c9c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8017c9e:	69bb      	ldr	r3, [r7, #24]
 8017ca0:	89fa      	ldrh	r2, [r7, #14]
 8017ca2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017ca4:	693b      	ldr	r3, [r7, #16]
 8017ca6:	881b      	ldrh	r3, [r3, #0]
 8017ca8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017cac:	d007      	beq.n	8017cbe <mem_trim+0x176>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8017cae:	693b      	ldr	r3, [r7, #16]
 8017cb0:	881b      	ldrh	r3, [r3, #0]
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	f7ff fd1a 	bl	80176ec <ptr_to_mem>
 8017cb8:	4602      	mov	r2, r0
 8017cba:	89fb      	ldrh	r3, [r7, #14]
 8017cbc:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8017cbe:	4b36      	ldr	r3, [pc, #216]	; (8017d98 <mem_trim+0x250>)
 8017cc0:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 8017cc4:	8bf9      	ldrh	r1, [r7, #30]
 8017cc6:	8abb      	ldrh	r3, [r7, #20]
 8017cc8:	1acb      	subs	r3, r1, r3
 8017cca:	b29b      	uxth	r3, r3
 8017ccc:	4413      	add	r3, r2
 8017cce:	b29a      	uxth	r2, r3
 8017cd0:	4b31      	ldr	r3, [pc, #196]	; (8017d98 <mem_trim+0x250>)
 8017cd2:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8017cd6:	e04a      	b.n	8017d6e <mem_trim+0x226>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8017cd8:	8bfb      	ldrh	r3, [r7, #30]
 8017cda:	f103 0214 	add.w	r2, r3, #20
 8017cde:	8abb      	ldrh	r3, [r7, #20]
 8017ce0:	429a      	cmp	r2, r3
 8017ce2:	d844      	bhi.n	8017d6e <mem_trim+0x226>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017ce4:	8afa      	ldrh	r2, [r7, #22]
 8017ce6:	8bfb      	ldrh	r3, [r7, #30]
 8017ce8:	4413      	add	r3, r2
 8017cea:	b29b      	uxth	r3, r3
 8017cec:	3308      	adds	r3, #8
 8017cee:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8017cf0:	69bb      	ldr	r3, [r7, #24]
 8017cf2:	881b      	ldrh	r3, [r3, #0]
 8017cf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017cf8:	d106      	bne.n	8017d08 <mem_trim+0x1c0>
 8017cfa:	4b23      	ldr	r3, [pc, #140]	; (8017d88 <mem_trim+0x240>)
 8017cfc:	f240 3216 	movw	r2, #790	; 0x316
 8017d00:	4928      	ldr	r1, [pc, #160]	; (8017da4 <mem_trim+0x25c>)
 8017d02:	4823      	ldr	r0, [pc, #140]	; (8017d90 <mem_trim+0x248>)
 8017d04:	f00c f960 	bl	8023fc8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8017d08:	89fb      	ldrh	r3, [r7, #14]
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	f7ff fcee 	bl	80176ec <ptr_to_mem>
 8017d10:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8017d12:	4b25      	ldr	r3, [pc, #148]	; (8017da8 <mem_trim+0x260>)
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	693a      	ldr	r2, [r7, #16]
 8017d18:	429a      	cmp	r2, r3
 8017d1a:	d202      	bcs.n	8017d22 <mem_trim+0x1da>
      lfree = mem2;
 8017d1c:	4a22      	ldr	r2, [pc, #136]	; (8017da8 <mem_trim+0x260>)
 8017d1e:	693b      	ldr	r3, [r7, #16]
 8017d20:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8017d22:	693b      	ldr	r3, [r7, #16]
 8017d24:	2200      	movs	r2, #0
 8017d26:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8017d28:	69bb      	ldr	r3, [r7, #24]
 8017d2a:	881a      	ldrh	r2, [r3, #0]
 8017d2c:	693b      	ldr	r3, [r7, #16]
 8017d2e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8017d30:	693b      	ldr	r3, [r7, #16]
 8017d32:	8afa      	ldrh	r2, [r7, #22]
 8017d34:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8017d36:	69bb      	ldr	r3, [r7, #24]
 8017d38:	89fa      	ldrh	r2, [r7, #14]
 8017d3a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017d3c:	693b      	ldr	r3, [r7, #16]
 8017d3e:	881b      	ldrh	r3, [r3, #0]
 8017d40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017d44:	d007      	beq.n	8017d56 <mem_trim+0x20e>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8017d46:	693b      	ldr	r3, [r7, #16]
 8017d48:	881b      	ldrh	r3, [r3, #0]
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	f7ff fcce 	bl	80176ec <ptr_to_mem>
 8017d50:	4602      	mov	r2, r0
 8017d52:	89fb      	ldrh	r3, [r7, #14]
 8017d54:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8017d56:	4b10      	ldr	r3, [pc, #64]	; (8017d98 <mem_trim+0x250>)
 8017d58:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 8017d5c:	8bf9      	ldrh	r1, [r7, #30]
 8017d5e:	8abb      	ldrh	r3, [r7, #20]
 8017d60:	1acb      	subs	r3, r1, r3
 8017d62:	b29b      	uxth	r3, r3
 8017d64:	4413      	add	r3, r2
 8017d66:	b29a      	uxth	r2, r3
 8017d68:	4b0b      	ldr	r3, [pc, #44]	; (8017d98 <mem_trim+0x250>)
 8017d6a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017d6e:	480c      	ldr	r0, [pc, #48]	; (8017da0 <mem_trim+0x258>)
 8017d70:	f00b fd85 	bl	802387e <sys_mutex_unlock>
  return rmem;
 8017d74:	687b      	ldr	r3, [r7, #4]
}
 8017d76:	4618      	mov	r0, r3
 8017d78:	3720      	adds	r7, #32
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	bd80      	pop	{r7, pc}
 8017d7e:	bf00      	nop
 8017d80:	2007baa0 	.word	0x2007baa0
 8017d84:	2007baa4 	.word	0x2007baa4
 8017d88:	08026394 	.word	0x08026394
 8017d8c:	0802659c 	.word	0x0802659c
 8017d90:	080263dc 	.word	0x080263dc
 8017d94:	080265b4 	.word	0x080265b4
 8017d98:	2007ecb8 	.word	0x2007ecb8
 8017d9c:	080265d0 	.word	0x080265d0
 8017da0:	2007baa8 	.word	0x2007baa8
 8017da4:	080265f0 	.word	0x080265f0
 8017da8:	2007baac 	.word	0x2007baac

08017dac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8017dac:	b590      	push	{r4, r7, lr}
 8017dae:	b089      	sub	sp, #36	; 0x24
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	4603      	mov	r3, r0
 8017db4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8017db6:	88fb      	ldrh	r3, [r7, #6]
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d101      	bne.n	8017dc0 <mem_malloc+0x14>
    return NULL;
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	e127      	b.n	8018010 <mem_malloc+0x264>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8017dc0:	88fb      	ldrh	r3, [r7, #6]
 8017dc2:	3303      	adds	r3, #3
 8017dc4:	b29b      	uxth	r3, r3
 8017dc6:	f023 0303 	bic.w	r3, r3, #3
 8017dca:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8017dcc:	8bbb      	ldrh	r3, [r7, #28]
 8017dce:	2b0b      	cmp	r3, #11
 8017dd0:	d801      	bhi.n	8017dd6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8017dd2:	230c      	movs	r3, #12
 8017dd4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8017dd6:	8bbb      	ldrh	r3, [r7, #28]
 8017dd8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017ddc:	d803      	bhi.n	8017de6 <mem_malloc+0x3a>
 8017dde:	8bba      	ldrh	r2, [r7, #28]
 8017de0:	88fb      	ldrh	r3, [r7, #6]
 8017de2:	429a      	cmp	r2, r3
 8017de4:	d201      	bcs.n	8017dea <mem_malloc+0x3e>
    return NULL;
 8017de6:	2300      	movs	r3, #0
 8017de8:	e112      	b.n	8018010 <mem_malloc+0x264>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8017dea:	488b      	ldr	r0, [pc, #556]	; (8018018 <mem_malloc+0x26c>)
 8017dec:	f00b fd38 	bl	8023860 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017df0:	4b8a      	ldr	r3, [pc, #552]	; (801801c <mem_malloc+0x270>)
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	4618      	mov	r0, r3
 8017df6:	f7ff fc8b 	bl	8017710 <mem_to_ptr>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	83fb      	strh	r3, [r7, #30]
 8017dfe:	e0ee      	b.n	8017fde <mem_malloc+0x232>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8017e00:	8bfb      	ldrh	r3, [r7, #30]
 8017e02:	4618      	mov	r0, r3
 8017e04:	f7ff fc72 	bl	80176ec <ptr_to_mem>
 8017e08:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8017e0a:	697b      	ldr	r3, [r7, #20]
 8017e0c:	791b      	ldrb	r3, [r3, #4]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	f040 80de 	bne.w	8017fd0 <mem_malloc+0x224>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8017e14:	697b      	ldr	r3, [r7, #20]
 8017e16:	881b      	ldrh	r3, [r3, #0]
 8017e18:	461a      	mov	r2, r3
 8017e1a:	8bfb      	ldrh	r3, [r7, #30]
 8017e1c:	1ad3      	subs	r3, r2, r3
 8017e1e:	f1a3 0208 	sub.w	r2, r3, #8
 8017e22:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8017e24:	429a      	cmp	r2, r3
 8017e26:	f0c0 80d3 	bcc.w	8017fd0 <mem_malloc+0x224>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8017e2a:	697b      	ldr	r3, [r7, #20]
 8017e2c:	881b      	ldrh	r3, [r3, #0]
 8017e2e:	461a      	mov	r2, r3
 8017e30:	8bfb      	ldrh	r3, [r7, #30]
 8017e32:	1ad3      	subs	r3, r2, r3
 8017e34:	f1a3 0208 	sub.w	r2, r3, #8
 8017e38:	8bbb      	ldrh	r3, [r7, #28]
 8017e3a:	3314      	adds	r3, #20
 8017e3c:	429a      	cmp	r2, r3
 8017e3e:	d34c      	bcc.n	8017eda <mem_malloc+0x12e>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8017e40:	8bfa      	ldrh	r2, [r7, #30]
 8017e42:	8bbb      	ldrh	r3, [r7, #28]
 8017e44:	4413      	add	r3, r2
 8017e46:	b29b      	uxth	r3, r3
 8017e48:	3308      	adds	r3, #8
 8017e4a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8017e4c:	8a7b      	ldrh	r3, [r7, #18]
 8017e4e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017e52:	d106      	bne.n	8017e62 <mem_malloc+0xb6>
 8017e54:	4b72      	ldr	r3, [pc, #456]	; (8018020 <mem_malloc+0x274>)
 8017e56:	f240 3287 	movw	r2, #903	; 0x387
 8017e5a:	4972      	ldr	r1, [pc, #456]	; (8018024 <mem_malloc+0x278>)
 8017e5c:	4872      	ldr	r0, [pc, #456]	; (8018028 <mem_malloc+0x27c>)
 8017e5e:	f00c f8b3 	bl	8023fc8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8017e62:	8a7b      	ldrh	r3, [r7, #18]
 8017e64:	4618      	mov	r0, r3
 8017e66:	f7ff fc41 	bl	80176ec <ptr_to_mem>
 8017e6a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	2200      	movs	r2, #0
 8017e70:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8017e72:	697b      	ldr	r3, [r7, #20]
 8017e74:	881a      	ldrh	r2, [r3, #0]
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	8bfa      	ldrh	r2, [r7, #30]
 8017e7e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8017e80:	697b      	ldr	r3, [r7, #20]
 8017e82:	8a7a      	ldrh	r2, [r7, #18]
 8017e84:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8017e86:	697b      	ldr	r3, [r7, #20]
 8017e88:	2201      	movs	r2, #1
 8017e8a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8017e8c:	68fb      	ldr	r3, [r7, #12]
 8017e8e:	881b      	ldrh	r3, [r3, #0]
 8017e90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8017e94:	d007      	beq.n	8017ea6 <mem_malloc+0xfa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	881b      	ldrh	r3, [r3, #0]
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	f7ff fc26 	bl	80176ec <ptr_to_mem>
 8017ea0:	4602      	mov	r2, r0
 8017ea2:	8a7b      	ldrh	r3, [r7, #18]
 8017ea4:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8017ea6:	4b61      	ldr	r3, [pc, #388]	; (801802c <mem_malloc+0x280>)
 8017ea8:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 8017eac:	8bbb      	ldrh	r3, [r7, #28]
 8017eae:	4413      	add	r3, r2
 8017eb0:	b29b      	uxth	r3, r3
 8017eb2:	3308      	adds	r3, #8
 8017eb4:	b29a      	uxth	r2, r3
 8017eb6:	4b5d      	ldr	r3, [pc, #372]	; (801802c <mem_malloc+0x280>)
 8017eb8:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8017ebc:	4b5b      	ldr	r3, [pc, #364]	; (801802c <mem_malloc+0x280>)
 8017ebe:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 8017ec2:	4b5a      	ldr	r3, [pc, #360]	; (801802c <mem_malloc+0x280>)
 8017ec4:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8017ec8:	429a      	cmp	r2, r3
 8017eca:	d227      	bcs.n	8017f1c <mem_malloc+0x170>
 8017ecc:	4b57      	ldr	r3, [pc, #348]	; (801802c <mem_malloc+0x280>)
 8017ece:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 8017ed2:	4b56      	ldr	r3, [pc, #344]	; (801802c <mem_malloc+0x280>)
 8017ed4:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8017ed8:	e020      	b.n	8017f1c <mem_malloc+0x170>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8017eda:	697b      	ldr	r3, [r7, #20]
 8017edc:	2201      	movs	r2, #1
 8017ede:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8017ee0:	4b52      	ldr	r3, [pc, #328]	; (801802c <mem_malloc+0x280>)
 8017ee2:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 8017ee6:	697b      	ldr	r3, [r7, #20]
 8017ee8:	881b      	ldrh	r3, [r3, #0]
 8017eea:	4413      	add	r3, r2
 8017eec:	b29c      	uxth	r4, r3
 8017eee:	6978      	ldr	r0, [r7, #20]
 8017ef0:	f7ff fc0e 	bl	8017710 <mem_to_ptr>
 8017ef4:	4603      	mov	r3, r0
 8017ef6:	1ae3      	subs	r3, r4, r3
 8017ef8:	b29a      	uxth	r2, r3
 8017efa:	4b4c      	ldr	r3, [pc, #304]	; (801802c <mem_malloc+0x280>)
 8017efc:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8017f00:	4b4a      	ldr	r3, [pc, #296]	; (801802c <mem_malloc+0x280>)
 8017f02:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	; 0xb2
 8017f06:	4b49      	ldr	r3, [pc, #292]	; (801802c <mem_malloc+0x280>)
 8017f08:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8017f0c:	429a      	cmp	r2, r3
 8017f0e:	d205      	bcs.n	8017f1c <mem_malloc+0x170>
 8017f10:	4b46      	ldr	r3, [pc, #280]	; (801802c <mem_malloc+0x280>)
 8017f12:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 8017f16:	4b45      	ldr	r3, [pc, #276]	; (801802c <mem_malloc+0x280>)
 8017f18:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8017f1c:	4b3f      	ldr	r3, [pc, #252]	; (801801c <mem_malloc+0x270>)
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	697a      	ldr	r2, [r7, #20]
 8017f22:	429a      	cmp	r2, r3
 8017f24:	d127      	bne.n	8017f76 <mem_malloc+0x1ca>
          struct mem *cur = lfree;
 8017f26:	4b3d      	ldr	r3, [pc, #244]	; (801801c <mem_malloc+0x270>)
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8017f2c:	e005      	b.n	8017f3a <mem_malloc+0x18e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8017f2e:	69bb      	ldr	r3, [r7, #24]
 8017f30:	881b      	ldrh	r3, [r3, #0]
 8017f32:	4618      	mov	r0, r3
 8017f34:	f7ff fbda 	bl	80176ec <ptr_to_mem>
 8017f38:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8017f3a:	69bb      	ldr	r3, [r7, #24]
 8017f3c:	791b      	ldrb	r3, [r3, #4]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d004      	beq.n	8017f4c <mem_malloc+0x1a0>
 8017f42:	4b3b      	ldr	r3, [pc, #236]	; (8018030 <mem_malloc+0x284>)
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	69ba      	ldr	r2, [r7, #24]
 8017f48:	429a      	cmp	r2, r3
 8017f4a:	d1f0      	bne.n	8017f2e <mem_malloc+0x182>
          }
          lfree = cur;
 8017f4c:	4a33      	ldr	r2, [pc, #204]	; (801801c <mem_malloc+0x270>)
 8017f4e:	69bb      	ldr	r3, [r7, #24]
 8017f50:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8017f52:	4b32      	ldr	r3, [pc, #200]	; (801801c <mem_malloc+0x270>)
 8017f54:	681a      	ldr	r2, [r3, #0]
 8017f56:	4b36      	ldr	r3, [pc, #216]	; (8018030 <mem_malloc+0x284>)
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	429a      	cmp	r2, r3
 8017f5c:	d00b      	beq.n	8017f76 <mem_malloc+0x1ca>
 8017f5e:	4b2f      	ldr	r3, [pc, #188]	; (801801c <mem_malloc+0x270>)
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	791b      	ldrb	r3, [r3, #4]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d006      	beq.n	8017f76 <mem_malloc+0x1ca>
 8017f68:	4b2d      	ldr	r3, [pc, #180]	; (8018020 <mem_malloc+0x274>)
 8017f6a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8017f6e:	4931      	ldr	r1, [pc, #196]	; (8018034 <mem_malloc+0x288>)
 8017f70:	482d      	ldr	r0, [pc, #180]	; (8018028 <mem_malloc+0x27c>)
 8017f72:	f00c f829 	bl	8023fc8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8017f76:	4828      	ldr	r0, [pc, #160]	; (8018018 <mem_malloc+0x26c>)
 8017f78:	f00b fc81 	bl	802387e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017f7c:	8bba      	ldrh	r2, [r7, #28]
 8017f7e:	697b      	ldr	r3, [r7, #20]
 8017f80:	4413      	add	r3, r2
 8017f82:	3308      	adds	r3, #8
 8017f84:	4a2a      	ldr	r2, [pc, #168]	; (8018030 <mem_malloc+0x284>)
 8017f86:	6812      	ldr	r2, [r2, #0]
 8017f88:	4293      	cmp	r3, r2
 8017f8a:	d906      	bls.n	8017f9a <mem_malloc+0x1ee>
 8017f8c:	4b24      	ldr	r3, [pc, #144]	; (8018020 <mem_malloc+0x274>)
 8017f8e:	f240 32b9 	movw	r2, #953	; 0x3b9
 8017f92:	4929      	ldr	r1, [pc, #164]	; (8018038 <mem_malloc+0x28c>)
 8017f94:	4824      	ldr	r0, [pc, #144]	; (8018028 <mem_malloc+0x27c>)
 8017f96:	f00c f817 	bl	8023fc8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017f9a:	697b      	ldr	r3, [r7, #20]
 8017f9c:	f003 0303 	and.w	r3, r3, #3
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d006      	beq.n	8017fb2 <mem_malloc+0x206>
 8017fa4:	4b1e      	ldr	r3, [pc, #120]	; (8018020 <mem_malloc+0x274>)
 8017fa6:	f240 32bb 	movw	r2, #955	; 0x3bb
 8017faa:	4924      	ldr	r1, [pc, #144]	; (801803c <mem_malloc+0x290>)
 8017fac:	481e      	ldr	r0, [pc, #120]	; (8018028 <mem_malloc+0x27c>)
 8017fae:	f00c f80b 	bl	8023fc8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017fb2:	697b      	ldr	r3, [r7, #20]
 8017fb4:	f003 0303 	and.w	r3, r3, #3
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d006      	beq.n	8017fca <mem_malloc+0x21e>
 8017fbc:	4b18      	ldr	r3, [pc, #96]	; (8018020 <mem_malloc+0x274>)
 8017fbe:	f240 32bd 	movw	r2, #957	; 0x3bd
 8017fc2:	491f      	ldr	r1, [pc, #124]	; (8018040 <mem_malloc+0x294>)
 8017fc4:	4818      	ldr	r0, [pc, #96]	; (8018028 <mem_malloc+0x27c>)
 8017fc6:	f00b ffff 	bl	8023fc8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8017fca:	697b      	ldr	r3, [r7, #20]
 8017fcc:	3308      	adds	r3, #8
 8017fce:	e01f      	b.n	8018010 <mem_malloc+0x264>
         ptr = ptr_to_mem(ptr)->next) {
 8017fd0:	8bfb      	ldrh	r3, [r7, #30]
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	f7ff fb8a 	bl	80176ec <ptr_to_mem>
 8017fd8:	4603      	mov	r3, r0
 8017fda:	881b      	ldrh	r3, [r3, #0]
 8017fdc:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017fde:	8bfa      	ldrh	r2, [r7, #30]
 8017fe0:	8bbb      	ldrh	r3, [r7, #28]
 8017fe2:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8017fe6:	429a      	cmp	r2, r3
 8017fe8:	f4ff af0a 	bcc.w	8017e00 <mem_malloc+0x54>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8017fec:	4b0f      	ldr	r3, [pc, #60]	; (801802c <mem_malloc+0x280>)
 8017fee:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8017ff2:	3301      	adds	r3, #1
 8017ff4:	b29a      	uxth	r2, r3
 8017ff6:	4b0d      	ldr	r3, [pc, #52]	; (801802c <mem_malloc+0x280>)
 8017ff8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8017ffc:	4806      	ldr	r0, [pc, #24]	; (8018018 <mem_malloc+0x26c>)
 8017ffe:	f00b fc3e 	bl	802387e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
 8018002:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8018006:	4619      	mov	r1, r3
 8018008:	480e      	ldr	r0, [pc, #56]	; (8018044 <mem_malloc+0x298>)
 801800a:	f00b ffdd 	bl	8023fc8 <iprintf>
  return NULL;
 801800e:	2300      	movs	r3, #0
}
 8018010:	4618      	mov	r0, r3
 8018012:	3724      	adds	r7, #36	; 0x24
 8018014:	46bd      	mov	sp, r7
 8018016:	bd90      	pop	{r4, r7, pc}
 8018018:	2007baa8 	.word	0x2007baa8
 801801c:	2007baac 	.word	0x2007baac
 8018020:	08026394 	.word	0x08026394
 8018024:	080265f0 	.word	0x080265f0
 8018028:	080263dc 	.word	0x080263dc
 801802c:	2007ecb8 	.word	0x2007ecb8
 8018030:	2007baa4 	.word	0x2007baa4
 8018034:	08026604 	.word	0x08026604
 8018038:	08026620 	.word	0x08026620
 801803c:	08026650 	.word	0x08026650
 8018040:	08026680 	.word	0x08026680
 8018044:	080266a4 	.word	0x080266a4

08018048 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8018048:	b480      	push	{r7}
 801804a:	b085      	sub	sp, #20
 801804c:	af00      	add	r7, sp, #0
 801804e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	691b      	ldr	r3, [r3, #16]
 8018054:	2200      	movs	r2, #0
 8018056:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	68db      	ldr	r3, [r3, #12]
 801805c:	3303      	adds	r3, #3
 801805e:	f023 0303 	bic.w	r3, r3, #3
 8018062:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8018064:	2300      	movs	r3, #0
 8018066:	60fb      	str	r3, [r7, #12]
 8018068:	e011      	b.n	801808e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	691b      	ldr	r3, [r3, #16]
 801806e:	681a      	ldr	r2, [r3, #0]
 8018070:	68bb      	ldr	r3, [r7, #8]
 8018072:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	691b      	ldr	r3, [r3, #16]
 8018078:	68ba      	ldr	r2, [r7, #8]
 801807a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	891b      	ldrh	r3, [r3, #8]
 8018080:	461a      	mov	r2, r3
 8018082:	68bb      	ldr	r3, [r7, #8]
 8018084:	4413      	add	r3, r2
 8018086:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	3301      	adds	r3, #1
 801808c:	60fb      	str	r3, [r7, #12]
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	895b      	ldrh	r3, [r3, #10]
 8018092:	461a      	mov	r2, r3
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	4293      	cmp	r3, r2
 8018098:	dbe7      	blt.n	801806a <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	685b      	ldr	r3, [r3, #4]
 801809e:	687a      	ldr	r2, [r7, #4]
 80180a0:	8952      	ldrh	r2, [r2, #10]
 80180a2:	80da      	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	685b      	ldr	r3, [r3, #4]
 80180a8:	687a      	ldr	r2, [r7, #4]
 80180aa:	6812      	ldr	r2, [r2, #0]
 80180ac:	601a      	str	r2, [r3, #0]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80180ae:	bf00      	nop
 80180b0:	3714      	adds	r7, #20
 80180b2:	46bd      	mov	sp, r7
 80180b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b8:	4770      	bx	lr
	...

080180bc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80180bc:	b580      	push	{r7, lr}
 80180be:	b082      	sub	sp, #8
 80180c0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80180c2:	2300      	movs	r3, #0
 80180c4:	80fb      	strh	r3, [r7, #6]
 80180c6:	e013      	b.n	80180f0 <memp_init+0x34>
    memp_init_pool(memp_pools[i]);
 80180c8:	88fb      	ldrh	r3, [r7, #6]
 80180ca:	4a0d      	ldr	r2, [pc, #52]	; (8018100 <memp_init+0x44>)
 80180cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80180d0:	4618      	mov	r0, r3
 80180d2:	f7ff ffb9 	bl	8018048 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 80180d6:	88fb      	ldrh	r3, [r7, #6]
 80180d8:	4a09      	ldr	r2, [pc, #36]	; (8018100 <memp_init+0x44>)
 80180da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80180de:	88fb      	ldrh	r3, [r7, #6]
 80180e0:	6852      	ldr	r2, [r2, #4]
 80180e2:	4908      	ldr	r1, [pc, #32]	; (8018104 <memp_init+0x48>)
 80180e4:	332e      	adds	r3, #46	; 0x2e
 80180e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80180ea:	88fb      	ldrh	r3, [r7, #6]
 80180ec:	3301      	adds	r3, #1
 80180ee:	80fb      	strh	r3, [r7, #6]
 80180f0:	88fb      	ldrh	r3, [r7, #6]
 80180f2:	2b0c      	cmp	r3, #12
 80180f4:	d9e8      	bls.n	80180c8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80180f6:	bf00      	nop
 80180f8:	bf00      	nop
 80180fa:	3708      	adds	r7, #8
 80180fc:	46bd      	mov	sp, r7
 80180fe:	bd80      	pop	{r7, pc}
 8018100:	08029ac0 	.word	0x08029ac0
 8018104:	2007ecb8 	.word	0x2007ecb8

08018108 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8018108:	b580      	push	{r7, lr}
 801810a:	b084      	sub	sp, #16
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8018110:	f00b fbe2 	bl	80238d8 <sys_arch_protect>
 8018114:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	691b      	ldr	r3, [r3, #16]
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801811e:	68bb      	ldr	r3, [r7, #8]
 8018120:	2b00      	cmp	r3, #0
 8018122:	d029      	beq.n	8018178 <do_memp_malloc_pool+0x70>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	691b      	ldr	r3, [r3, #16]
 8018128:	68ba      	ldr	r2, [r7, #8]
 801812a:	6812      	ldr	r2, [r2, #0]
 801812c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801812e:	68bb      	ldr	r3, [r7, #8]
 8018130:	f003 0303 	and.w	r3, r3, #3
 8018134:	2b00      	cmp	r3, #0
 8018136:	d006      	beq.n	8018146 <do_memp_malloc_pool+0x3e>
 8018138:	4b19      	ldr	r3, [pc, #100]	; (80181a0 <do_memp_malloc_pool+0x98>)
 801813a:	f44f 728c 	mov.w	r2, #280	; 0x118
 801813e:	4919      	ldr	r1, [pc, #100]	; (80181a4 <do_memp_malloc_pool+0x9c>)
 8018140:	4819      	ldr	r0, [pc, #100]	; (80181a8 <do_memp_malloc_pool+0xa0>)
 8018142:	f00b ff41 	bl	8023fc8 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	685b      	ldr	r3, [r3, #4]
 801814a:	891a      	ldrh	r2, [r3, #8]
 801814c:	3201      	adds	r2, #1
 801814e:	b292      	uxth	r2, r2
 8018150:	811a      	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	685b      	ldr	r3, [r3, #4]
 8018156:	891a      	ldrh	r2, [r3, #8]
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	685b      	ldr	r3, [r3, #4]
 801815c:	895b      	ldrh	r3, [r3, #10]
 801815e:	429a      	cmp	r2, r3
 8018160:	d905      	bls.n	801816e <do_memp_malloc_pool+0x66>
      desc->stats->max = desc->stats->used;
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	685a      	ldr	r2, [r3, #4]
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	685b      	ldr	r3, [r3, #4]
 801816a:	8912      	ldrh	r2, [r2, #8]
 801816c:	815a      	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801816e:	68f8      	ldr	r0, [r7, #12]
 8018170:	f00b fbc0 	bl	80238f4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8018174:	68bb      	ldr	r3, [r7, #8]
 8018176:	e00f      	b.n	8018198 <do_memp_malloc_pool+0x90>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	685b      	ldr	r3, [r3, #4]
 801817c:	889a      	ldrh	r2, [r3, #4]
 801817e:	3201      	adds	r2, #1
 8018180:	b292      	uxth	r2, r2
 8018182:	809a      	strh	r2, [r3, #4]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8018184:	68f8      	ldr	r0, [r7, #12]
 8018186:	f00b fbb5 	bl	80238f4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	4619      	mov	r1, r3
 8018190:	4806      	ldr	r0, [pc, #24]	; (80181ac <do_memp_malloc_pool+0xa4>)
 8018192:	f00b ff19 	bl	8023fc8 <iprintf>
  }

  return NULL;
 8018196:	2300      	movs	r3, #0
}
 8018198:	4618      	mov	r0, r3
 801819a:	3710      	adds	r7, #16
 801819c:	46bd      	mov	sp, r7
 801819e:	bd80      	pop	{r7, pc}
 80181a0:	08026794 	.word	0x08026794
 80181a4:	080267c4 	.word	0x080267c4
 80181a8:	080267e8 	.word	0x080267e8
 80181ac:	08026810 	.word	0x08026810

080181b0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b082      	sub	sp, #8
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d106      	bne.n	80181cc <memp_malloc_pool+0x1c>
 80181be:	4b0a      	ldr	r3, [pc, #40]	; (80181e8 <memp_malloc_pool+0x38>)
 80181c0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80181c4:	4909      	ldr	r1, [pc, #36]	; (80181ec <memp_malloc_pool+0x3c>)
 80181c6:	480a      	ldr	r0, [pc, #40]	; (80181f0 <memp_malloc_pool+0x40>)
 80181c8:	f00b fefe 	bl	8023fc8 <iprintf>
  if (desc == NULL) {
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d101      	bne.n	80181d6 <memp_malloc_pool+0x26>
    return NULL;
 80181d2:	2300      	movs	r3, #0
 80181d4:	e003      	b.n	80181de <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80181d6:	6878      	ldr	r0, [r7, #4]
 80181d8:	f7ff ff96 	bl	8018108 <do_memp_malloc_pool>
 80181dc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80181de:	4618      	mov	r0, r3
 80181e0:	3708      	adds	r7, #8
 80181e2:	46bd      	mov	sp, r7
 80181e4:	bd80      	pop	{r7, pc}
 80181e6:	bf00      	nop
 80181e8:	08026794 	.word	0x08026794
 80181ec:	08026838 	.word	0x08026838
 80181f0:	080267e8 	.word	0x080267e8

080181f4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b084      	sub	sp, #16
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	4603      	mov	r3, r0
 80181fc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80181fe:	79fb      	ldrb	r3, [r7, #7]
 8018200:	2b0c      	cmp	r3, #12
 8018202:	d908      	bls.n	8018216 <memp_malloc+0x22>
 8018204:	4b0a      	ldr	r3, [pc, #40]	; (8018230 <memp_malloc+0x3c>)
 8018206:	f240 1257 	movw	r2, #343	; 0x157
 801820a:	490a      	ldr	r1, [pc, #40]	; (8018234 <memp_malloc+0x40>)
 801820c:	480a      	ldr	r0, [pc, #40]	; (8018238 <memp_malloc+0x44>)
 801820e:	f00b fedb 	bl	8023fc8 <iprintf>
 8018212:	2300      	movs	r3, #0
 8018214:	e008      	b.n	8018228 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8018216:	79fb      	ldrb	r3, [r7, #7]
 8018218:	4a08      	ldr	r2, [pc, #32]	; (801823c <memp_malloc+0x48>)
 801821a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801821e:	4618      	mov	r0, r3
 8018220:	f7ff ff72 	bl	8018108 <do_memp_malloc_pool>
 8018224:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8018226:	68fb      	ldr	r3, [r7, #12]
}
 8018228:	4618      	mov	r0, r3
 801822a:	3710      	adds	r7, #16
 801822c:	46bd      	mov	sp, r7
 801822e:	bd80      	pop	{r7, pc}
 8018230:	08026794 	.word	0x08026794
 8018234:	0802684c 	.word	0x0802684c
 8018238:	080267e8 	.word	0x080267e8
 801823c:	08029ac0 	.word	0x08029ac0

08018240 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8018240:	b580      	push	{r7, lr}
 8018242:	b084      	sub	sp, #16
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
 8018248:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801824a:	683b      	ldr	r3, [r7, #0]
 801824c:	f003 0303 	and.w	r3, r3, #3
 8018250:	2b00      	cmp	r3, #0
 8018252:	d006      	beq.n	8018262 <do_memp_free_pool+0x22>
 8018254:	4b10      	ldr	r3, [pc, #64]	; (8018298 <do_memp_free_pool+0x58>)
 8018256:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801825a:	4910      	ldr	r1, [pc, #64]	; (801829c <do_memp_free_pool+0x5c>)
 801825c:	4810      	ldr	r0, [pc, #64]	; (80182a0 <do_memp_free_pool+0x60>)
 801825e:	f00b feb3 	bl	8023fc8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8018262:	683b      	ldr	r3, [r7, #0]
 8018264:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8018266:	f00b fb37 	bl	80238d8 <sys_arch_protect>
 801826a:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	685b      	ldr	r3, [r3, #4]
 8018270:	891a      	ldrh	r2, [r3, #8]
 8018272:	3a01      	subs	r2, #1
 8018274:	b292      	uxth	r2, r2
 8018276:	811a      	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	691b      	ldr	r3, [r3, #16]
 801827c:	681a      	ldr	r2, [r3, #0]
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	691b      	ldr	r3, [r3, #16]
 8018286:	68fa      	ldr	r2, [r7, #12]
 8018288:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801828a:	68b8      	ldr	r0, [r7, #8]
 801828c:	f00b fb32 	bl	80238f4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8018290:	bf00      	nop
 8018292:	3710      	adds	r7, #16
 8018294:	46bd      	mov	sp, r7
 8018296:	bd80      	pop	{r7, pc}
 8018298:	08026794 	.word	0x08026794
 801829c:	0802686c 	.word	0x0802686c
 80182a0:	080267e8 	.word	0x080267e8

080182a4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b082      	sub	sp, #8
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
 80182ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d106      	bne.n	80182c2 <memp_free_pool+0x1e>
 80182b4:	4b0a      	ldr	r3, [pc, #40]	; (80182e0 <memp_free_pool+0x3c>)
 80182b6:	f240 1295 	movw	r2, #405	; 0x195
 80182ba:	490a      	ldr	r1, [pc, #40]	; (80182e4 <memp_free_pool+0x40>)
 80182bc:	480a      	ldr	r0, [pc, #40]	; (80182e8 <memp_free_pool+0x44>)
 80182be:	f00b fe83 	bl	8023fc8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d007      	beq.n	80182d8 <memp_free_pool+0x34>
 80182c8:	683b      	ldr	r3, [r7, #0]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d004      	beq.n	80182d8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80182ce:	6839      	ldr	r1, [r7, #0]
 80182d0:	6878      	ldr	r0, [r7, #4]
 80182d2:	f7ff ffb5 	bl	8018240 <do_memp_free_pool>
 80182d6:	e000      	b.n	80182da <memp_free_pool+0x36>
    return;
 80182d8:	bf00      	nop
}
 80182da:	3708      	adds	r7, #8
 80182dc:	46bd      	mov	sp, r7
 80182de:	bd80      	pop	{r7, pc}
 80182e0:	08026794 	.word	0x08026794
 80182e4:	08026838 	.word	0x08026838
 80182e8:	080267e8 	.word	0x080267e8

080182ec <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b082      	sub	sp, #8
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	4603      	mov	r3, r0
 80182f4:	6039      	str	r1, [r7, #0]
 80182f6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80182f8:	79fb      	ldrb	r3, [r7, #7]
 80182fa:	2b0c      	cmp	r3, #12
 80182fc:	d907      	bls.n	801830e <memp_free+0x22>
 80182fe:	4b0c      	ldr	r3, [pc, #48]	; (8018330 <memp_free+0x44>)
 8018300:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8018304:	490b      	ldr	r1, [pc, #44]	; (8018334 <memp_free+0x48>)
 8018306:	480c      	ldr	r0, [pc, #48]	; (8018338 <memp_free+0x4c>)
 8018308:	f00b fe5e 	bl	8023fc8 <iprintf>
 801830c:	e00c      	b.n	8018328 <memp_free+0x3c>

  if (mem == NULL) {
 801830e:	683b      	ldr	r3, [r7, #0]
 8018310:	2b00      	cmp	r3, #0
 8018312:	d008      	beq.n	8018326 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8018314:	79fb      	ldrb	r3, [r7, #7]
 8018316:	4a09      	ldr	r2, [pc, #36]	; (801833c <memp_free+0x50>)
 8018318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801831c:	6839      	ldr	r1, [r7, #0]
 801831e:	4618      	mov	r0, r3
 8018320:	f7ff ff8e 	bl	8018240 <do_memp_free_pool>
 8018324:	e000      	b.n	8018328 <memp_free+0x3c>
    return;
 8018326:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8018328:	3708      	adds	r7, #8
 801832a:	46bd      	mov	sp, r7
 801832c:	bd80      	pop	{r7, pc}
 801832e:	bf00      	nop
 8018330:	08026794 	.word	0x08026794
 8018334:	0802688c 	.word	0x0802688c
 8018338:	080267e8 	.word	0x080267e8
 801833c:	08029ac0 	.word	0x08029ac0

08018340 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8018340:	b480      	push	{r7}
 8018342:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8018344:	bf00      	nop
 8018346:	46bd      	mov	sp, r7
 8018348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801834c:	4770      	bx	lr
	...

08018350 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8018350:	b580      	push	{r7, lr}
 8018352:	b088      	sub	sp, #32
 8018354:	af02      	add	r7, sp, #8
 8018356:	60f8      	str	r0, [r7, #12]
 8018358:	60b9      	str	r1, [r7, #8]
 801835a:	607a      	str	r2, [r7, #4]
 801835c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	2b00      	cmp	r3, #0
 8018362:	d108      	bne.n	8018376 <netif_add+0x26>
 8018364:	4b96      	ldr	r3, [pc, #600]	; (80185c0 <netif_add+0x270>)
 8018366:	f240 1227 	movw	r2, #295	; 0x127
 801836a:	4996      	ldr	r1, [pc, #600]	; (80185c4 <netif_add+0x274>)
 801836c:	4896      	ldr	r0, [pc, #600]	; (80185c8 <netif_add+0x278>)
 801836e:	f00b fe2b 	bl	8023fc8 <iprintf>
 8018372:	2300      	movs	r3, #0
 8018374:	e14c      	b.n	8018610 <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8018376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018378:	2b00      	cmp	r3, #0
 801837a:	d108      	bne.n	801838e <netif_add+0x3e>
 801837c:	4b90      	ldr	r3, [pc, #576]	; (80185c0 <netif_add+0x270>)
 801837e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8018382:	4992      	ldr	r1, [pc, #584]	; (80185cc <netif_add+0x27c>)
 8018384:	4890      	ldr	r0, [pc, #576]	; (80185c8 <netif_add+0x278>)
 8018386:	f00b fe1f 	bl	8023fc8 <iprintf>
 801838a:	2300      	movs	r3, #0
 801838c:	e140      	b.n	8018610 <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801838e:	68bb      	ldr	r3, [r7, #8]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d101      	bne.n	8018398 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8018394:	4b8e      	ldr	r3, [pc, #568]	; (80185d0 <netif_add+0x280>)
 8018396:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	2b00      	cmp	r3, #0
 801839c:	d101      	bne.n	80183a2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801839e:	4b8c      	ldr	r3, [pc, #560]	; (80185d0 <netif_add+0x280>)
 80183a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80183a2:	683b      	ldr	r3, [r7, #0]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d101      	bne.n	80183ac <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80183a8:	4b89      	ldr	r3, [pc, #548]	; (80185d0 <netif_add+0x280>)
 80183aa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	2200      	movs	r2, #0
 80183b0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	2200      	movs	r2, #0
 80183b6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	2200      	movs	r2, #0
 80183bc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	4a84      	ldr	r2, [pc, #528]	; (80185d4 <netif_add+0x284>)
 80183c2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	2200      	movs	r2, #0
 80183c8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	2200      	movs	r2, #0
 80183ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	2200      	movs	r2, #0
 80183d6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	6a3a      	ldr	r2, [r7, #32]
 80183dc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80183de:	4b7e      	ldr	r3, [pc, #504]	; (80185d8 <netif_add+0x288>)
 80183e0:	781a      	ldrb	r2, [r3, #0]
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80183ec:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80183ee:	683b      	ldr	r3, [r7, #0]
 80183f0:	687a      	ldr	r2, [r7, #4]
 80183f2:	68b9      	ldr	r1, [r7, #8]
 80183f4:	68f8      	ldr	r0, [r7, #12]
 80183f6:	f000 f9f5 	bl	80187e4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80183fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183fc:	68f8      	ldr	r0, [r7, #12]
 80183fe:	4798      	blx	r3
 8018400:	4603      	mov	r3, r0
 8018402:	2b00      	cmp	r3, #0
 8018404:	d001      	beq.n	801840a <netif_add+0xba>
    return NULL;
 8018406:	2300      	movs	r3, #0
 8018408:	e102      	b.n	8018610 <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018410:	2bff      	cmp	r3, #255	; 0xff
 8018412:	d103      	bne.n	801841c <netif_add+0xcc>
        netif->num = 0;
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	2200      	movs	r2, #0
 8018418:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 801841c:	2300      	movs	r3, #0
 801841e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8018420:	4b6e      	ldr	r3, [pc, #440]	; (80185dc <netif_add+0x28c>)
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	617b      	str	r3, [r7, #20]
 8018426:	e02b      	b.n	8018480 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8018428:	697a      	ldr	r2, [r7, #20]
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	429a      	cmp	r2, r3
 801842e:	d106      	bne.n	801843e <netif_add+0xee>
 8018430:	4b63      	ldr	r3, [pc, #396]	; (80185c0 <netif_add+0x270>)
 8018432:	f240 128b 	movw	r2, #395	; 0x18b
 8018436:	496a      	ldr	r1, [pc, #424]	; (80185e0 <netif_add+0x290>)
 8018438:	4863      	ldr	r0, [pc, #396]	; (80185c8 <netif_add+0x278>)
 801843a:	f00b fdc5 	bl	8023fc8 <iprintf>
        num_netifs++;
 801843e:	693b      	ldr	r3, [r7, #16]
 8018440:	3301      	adds	r3, #1
 8018442:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8018444:	693b      	ldr	r3, [r7, #16]
 8018446:	2bff      	cmp	r3, #255	; 0xff
 8018448:	dd06      	ble.n	8018458 <netif_add+0x108>
 801844a:	4b5d      	ldr	r3, [pc, #372]	; (80185c0 <netif_add+0x270>)
 801844c:	f240 128d 	movw	r2, #397	; 0x18d
 8018450:	4964      	ldr	r1, [pc, #400]	; (80185e4 <netif_add+0x294>)
 8018452:	485d      	ldr	r0, [pc, #372]	; (80185c8 <netif_add+0x278>)
 8018454:	f00b fdb8 	bl	8023fc8 <iprintf>
        if (netif2->num == netif->num) {
 8018458:	697b      	ldr	r3, [r7, #20]
 801845a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018464:	429a      	cmp	r2, r3
 8018466:	d108      	bne.n	801847a <netif_add+0x12a>
          netif->num++;
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801846e:	3301      	adds	r3, #1
 8018470:	b2da      	uxtb	r2, r3
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8018478:	e005      	b.n	8018486 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801847a:	697b      	ldr	r3, [r7, #20]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	617b      	str	r3, [r7, #20]
 8018480:	697b      	ldr	r3, [r7, #20]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d1d0      	bne.n	8018428 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8018486:	697b      	ldr	r3, [r7, #20]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d1be      	bne.n	801840a <netif_add+0xba>
  }
  if (netif->num == 254) {
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018492:	2bfe      	cmp	r3, #254	; 0xfe
 8018494:	d103      	bne.n	801849e <netif_add+0x14e>
    netif_num = 0;
 8018496:	4b50      	ldr	r3, [pc, #320]	; (80185d8 <netif_add+0x288>)
 8018498:	2200      	movs	r2, #0
 801849a:	701a      	strb	r2, [r3, #0]
 801849c:	e006      	b.n	80184ac <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80184a4:	3301      	adds	r3, #1
 80184a6:	b2da      	uxtb	r2, r3
 80184a8:	4b4b      	ldr	r3, [pc, #300]	; (80185d8 <netif_add+0x288>)
 80184aa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80184ac:	4b4b      	ldr	r3, [pc, #300]	; (80185dc <netif_add+0x28c>)
 80184ae:	681a      	ldr	r2, [r3, #0]
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80184b4:	4a49      	ldr	r2, [pc, #292]	; (80185dc <netif_add+0x28c>)
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80184c0:	4619      	mov	r1, r3
 80184c2:	68fb      	ldr	r3, [r7, #12]
 80184c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80184c8:	461a      	mov	r2, r3
 80184ca:	4847      	ldr	r0, [pc, #284]	; (80185e8 <netif_add+0x298>)
 80184cc:	f00b fd7c 	bl	8023fc8 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 80184d0:	4846      	ldr	r0, [pc, #280]	; (80185ec <netif_add+0x29c>)
 80184d2:	f00b fd79 	bl	8023fc8 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 80184d6:	68bb      	ldr	r3, [r7, #8]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d003      	beq.n	80184e4 <netif_add+0x194>
 80184dc:	68bb      	ldr	r3, [r7, #8]
 80184de:	781b      	ldrb	r3, [r3, #0]
 80184e0:	4619      	mov	r1, r3
 80184e2:	e000      	b.n	80184e6 <netif_add+0x196>
 80184e4:	2100      	movs	r1, #0
 80184e6:	68bb      	ldr	r3, [r7, #8]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d004      	beq.n	80184f6 <netif_add+0x1a6>
 80184ec:	68bb      	ldr	r3, [r7, #8]
 80184ee:	3301      	adds	r3, #1
 80184f0:	781b      	ldrb	r3, [r3, #0]
 80184f2:	461a      	mov	r2, r3
 80184f4:	e000      	b.n	80184f8 <netif_add+0x1a8>
 80184f6:	2200      	movs	r2, #0
 80184f8:	68bb      	ldr	r3, [r7, #8]
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	d004      	beq.n	8018508 <netif_add+0x1b8>
 80184fe:	68bb      	ldr	r3, [r7, #8]
 8018500:	3302      	adds	r3, #2
 8018502:	781b      	ldrb	r3, [r3, #0]
 8018504:	4618      	mov	r0, r3
 8018506:	e000      	b.n	801850a <netif_add+0x1ba>
 8018508:	2000      	movs	r0, #0
 801850a:	68bb      	ldr	r3, [r7, #8]
 801850c:	2b00      	cmp	r3, #0
 801850e:	d003      	beq.n	8018518 <netif_add+0x1c8>
 8018510:	68bb      	ldr	r3, [r7, #8]
 8018512:	3303      	adds	r3, #3
 8018514:	781b      	ldrb	r3, [r3, #0]
 8018516:	e000      	b.n	801851a <netif_add+0x1ca>
 8018518:	2300      	movs	r3, #0
 801851a:	9300      	str	r3, [sp, #0]
 801851c:	4603      	mov	r3, r0
 801851e:	4834      	ldr	r0, [pc, #208]	; (80185f0 <netif_add+0x2a0>)
 8018520:	f00b fd52 	bl	8023fc8 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 8018524:	4833      	ldr	r0, [pc, #204]	; (80185f4 <netif_add+0x2a4>)
 8018526:	f00b fd4f 	bl	8023fc8 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	2b00      	cmp	r3, #0
 801852e:	d003      	beq.n	8018538 <netif_add+0x1e8>
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	781b      	ldrb	r3, [r3, #0]
 8018534:	4619      	mov	r1, r3
 8018536:	e000      	b.n	801853a <netif_add+0x1ea>
 8018538:	2100      	movs	r1, #0
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	2b00      	cmp	r3, #0
 801853e:	d004      	beq.n	801854a <netif_add+0x1fa>
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	3301      	adds	r3, #1
 8018544:	781b      	ldrb	r3, [r3, #0]
 8018546:	461a      	mov	r2, r3
 8018548:	e000      	b.n	801854c <netif_add+0x1fc>
 801854a:	2200      	movs	r2, #0
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d004      	beq.n	801855c <netif_add+0x20c>
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	3302      	adds	r3, #2
 8018556:	781b      	ldrb	r3, [r3, #0]
 8018558:	4618      	mov	r0, r3
 801855a:	e000      	b.n	801855e <netif_add+0x20e>
 801855c:	2000      	movs	r0, #0
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d003      	beq.n	801856c <netif_add+0x21c>
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	3303      	adds	r3, #3
 8018568:	781b      	ldrb	r3, [r3, #0]
 801856a:	e000      	b.n	801856e <netif_add+0x21e>
 801856c:	2300      	movs	r3, #0
 801856e:	9300      	str	r3, [sp, #0]
 8018570:	4603      	mov	r3, r0
 8018572:	481f      	ldr	r0, [pc, #124]	; (80185f0 <netif_add+0x2a0>)
 8018574:	f00b fd28 	bl	8023fc8 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 8018578:	481f      	ldr	r0, [pc, #124]	; (80185f8 <netif_add+0x2a8>)
 801857a:	f00b fd25 	bl	8023fc8 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 801857e:	683b      	ldr	r3, [r7, #0]
 8018580:	2b00      	cmp	r3, #0
 8018582:	d003      	beq.n	801858c <netif_add+0x23c>
 8018584:	683b      	ldr	r3, [r7, #0]
 8018586:	781b      	ldrb	r3, [r3, #0]
 8018588:	4619      	mov	r1, r3
 801858a:	e000      	b.n	801858e <netif_add+0x23e>
 801858c:	2100      	movs	r1, #0
 801858e:	683b      	ldr	r3, [r7, #0]
 8018590:	2b00      	cmp	r3, #0
 8018592:	d004      	beq.n	801859e <netif_add+0x24e>
 8018594:	683b      	ldr	r3, [r7, #0]
 8018596:	3301      	adds	r3, #1
 8018598:	781b      	ldrb	r3, [r3, #0]
 801859a:	461a      	mov	r2, r3
 801859c:	e000      	b.n	80185a0 <netif_add+0x250>
 801859e:	2200      	movs	r2, #0
 80185a0:	683b      	ldr	r3, [r7, #0]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d004      	beq.n	80185b0 <netif_add+0x260>
 80185a6:	683b      	ldr	r3, [r7, #0]
 80185a8:	3302      	adds	r3, #2
 80185aa:	781b      	ldrb	r3, [r3, #0]
 80185ac:	4618      	mov	r0, r3
 80185ae:	e000      	b.n	80185b2 <netif_add+0x262>
 80185b0:	2000      	movs	r0, #0
 80185b2:	683b      	ldr	r3, [r7, #0]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d021      	beq.n	80185fc <netif_add+0x2ac>
 80185b8:	683b      	ldr	r3, [r7, #0]
 80185ba:	3303      	adds	r3, #3
 80185bc:	781b      	ldrb	r3, [r3, #0]
 80185be:	e01e      	b.n	80185fe <netif_add+0x2ae>
 80185c0:	080268a8 	.word	0x080268a8
 80185c4:	0802693c 	.word	0x0802693c
 80185c8:	080268f8 	.word	0x080268f8
 80185cc:	08026958 	.word	0x08026958
 80185d0:	08029b34 	.word	0x08029b34
 80185d4:	08018ae7 	.word	0x08018ae7
 80185d8:	2007ecb4 	.word	0x2007ecb4
 80185dc:	2007ecac 	.word	0x2007ecac
 80185e0:	0802697c 	.word	0x0802697c
 80185e4:	08026990 	.word	0x08026990
 80185e8:	080269c0 	.word	0x080269c0
 80185ec:	080269e0 	.word	0x080269e0
 80185f0:	080269e8 	.word	0x080269e8
 80185f4:	080269f8 	.word	0x080269f8
 80185f8:	08026a04 	.word	0x08026a04
 80185fc:	2300      	movs	r3, #0
 80185fe:	9300      	str	r3, [sp, #0]
 8018600:	4603      	mov	r3, r0
 8018602:	4805      	ldr	r0, [pc, #20]	; (8018618 <netif_add+0x2c8>)
 8018604:	f00b fce0 	bl	8023fc8 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 8018608:	200a      	movs	r0, #10
 801860a:	f00b fcef 	bl	8023fec <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801860e:	68fb      	ldr	r3, [r7, #12]
}
 8018610:	4618      	mov	r0, r3
 8018612:	3718      	adds	r7, #24
 8018614:	46bd      	mov	sp, r7
 8018616:	bd80      	pop	{r7, pc}
 8018618:	080269e8 	.word	0x080269e8

0801861c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801861c:	b580      	push	{r7, lr}
 801861e:	b082      	sub	sp, #8
 8018620:	af00      	add	r7, sp, #0
 8018622:	6078      	str	r0, [r7, #4]
 8018624:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8018626:	6839      	ldr	r1, [r7, #0]
 8018628:	6878      	ldr	r0, [r7, #4]
 801862a:	f003 f805 	bl	801b638 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801862e:	6839      	ldr	r1, [r7, #0]
 8018630:	6878      	ldr	r0, [r7, #4]
 8018632:	f008 f9bf 	bl	80209b4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8018636:	bf00      	nop
 8018638:	3708      	adds	r7, #8
 801863a:	46bd      	mov	sp, r7
 801863c:	bd80      	pop	{r7, pc}
	...

08018640 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b086      	sub	sp, #24
 8018644:	af00      	add	r7, sp, #0
 8018646:	60f8      	str	r0, [r7, #12]
 8018648:	60b9      	str	r1, [r7, #8]
 801864a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801864c:	68bb      	ldr	r3, [r7, #8]
 801864e:	2b00      	cmp	r3, #0
 8018650:	d106      	bne.n	8018660 <netif_do_set_ipaddr+0x20>
 8018652:	4b1e      	ldr	r3, [pc, #120]	; (80186cc <netif_do_set_ipaddr+0x8c>)
 8018654:	f240 12cb 	movw	r2, #459	; 0x1cb
 8018658:	491d      	ldr	r1, [pc, #116]	; (80186d0 <netif_do_set_ipaddr+0x90>)
 801865a:	481e      	ldr	r0, [pc, #120]	; (80186d4 <netif_do_set_ipaddr+0x94>)
 801865c:	f00b fcb4 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	2b00      	cmp	r3, #0
 8018664:	d106      	bne.n	8018674 <netif_do_set_ipaddr+0x34>
 8018666:	4b19      	ldr	r3, [pc, #100]	; (80186cc <netif_do_set_ipaddr+0x8c>)
 8018668:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801866c:	4918      	ldr	r1, [pc, #96]	; (80186d0 <netif_do_set_ipaddr+0x90>)
 801866e:	4819      	ldr	r0, [pc, #100]	; (80186d4 <netif_do_set_ipaddr+0x94>)
 8018670:	f00b fcaa 	bl	8023fc8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8018674:	68bb      	ldr	r3, [r7, #8]
 8018676:	681a      	ldr	r2, [r3, #0]
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	3304      	adds	r3, #4
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	429a      	cmp	r2, r3
 8018680:	d01f      	beq.n	80186c2 <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8018682:	68bb      	ldr	r3, [r7, #8]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	3304      	adds	r3, #4
 801868c:	681a      	ldr	r2, [r3, #0]
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 8018692:	4811      	ldr	r0, [pc, #68]	; (80186d8 <netif_do_set_ipaddr+0x98>)
 8018694:	f00b fd06 	bl	80240a4 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8018698:	f107 0314 	add.w	r3, r7, #20
 801869c:	4619      	mov	r1, r3
 801869e:	6878      	ldr	r0, [r7, #4]
 80186a0:	f7ff ffbc 	bl	801861c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80186a4:	68bb      	ldr	r3, [r7, #8]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d002      	beq.n	80186b0 <netif_do_set_ipaddr+0x70>
 80186aa:	68bb      	ldr	r3, [r7, #8]
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	e000      	b.n	80186b2 <netif_do_set_ipaddr+0x72>
 80186b0:	2300      	movs	r3, #0
 80186b2:	68fa      	ldr	r2, [r7, #12]
 80186b4:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80186b6:	2101      	movs	r1, #1
 80186b8:	68f8      	ldr	r0, [r7, #12]
 80186ba:	f000 f92d 	bl	8018918 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80186be:	2301      	movs	r3, #1
 80186c0:	e000      	b.n	80186c4 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 80186c2:	2300      	movs	r3, #0
}
 80186c4:	4618      	mov	r0, r3
 80186c6:	3718      	adds	r7, #24
 80186c8:	46bd      	mov	sp, r7
 80186ca:	bd80      	pop	{r7, pc}
 80186cc:	080268a8 	.word	0x080268a8
 80186d0:	08026a0c 	.word	0x08026a0c
 80186d4:	080268f8 	.word	0x080268f8
 80186d8:	08026a1c 	.word	0x08026a1c

080186dc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80186dc:	b5b0      	push	{r4, r5, r7, lr}
 80186de:	b088      	sub	sp, #32
 80186e0:	af04      	add	r7, sp, #16
 80186e2:	60f8      	str	r0, [r7, #12]
 80186e4:	60b9      	str	r1, [r7, #8]
 80186e6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80186e8:	68bb      	ldr	r3, [r7, #8]
 80186ea:	681a      	ldr	r2, [r3, #0]
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	3308      	adds	r3, #8
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	429a      	cmp	r2, r3
 80186f4:	d02d      	beq.n	8018752 <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80186f6:	68bb      	ldr	r3, [r7, #8]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d002      	beq.n	8018702 <netif_do_set_netmask+0x26>
 80186fc:	68bb      	ldr	r3, [r7, #8]
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	e000      	b.n	8018704 <netif_do_set_netmask+0x28>
 8018702:	2300      	movs	r3, #0
 8018704:	68fa      	ldr	r2, [r7, #12]
 8018706:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801870e:	4618      	mov	r0, r3
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018716:	461c      	mov	r4, r3
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	3308      	adds	r3, #8
 801871c:	781b      	ldrb	r3, [r3, #0]
 801871e:	461d      	mov	r5, r3
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	3308      	adds	r3, #8
 8018724:	3301      	adds	r3, #1
 8018726:	781b      	ldrb	r3, [r3, #0]
 8018728:	461a      	mov	r2, r3
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	3308      	adds	r3, #8
 801872e:	3302      	adds	r3, #2
 8018730:	781b      	ldrb	r3, [r3, #0]
 8018732:	4619      	mov	r1, r3
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	3308      	adds	r3, #8
 8018738:	3303      	adds	r3, #3
 801873a:	781b      	ldrb	r3, [r3, #0]
 801873c:	9302      	str	r3, [sp, #8]
 801873e:	9101      	str	r1, [sp, #4]
 8018740:	9200      	str	r2, [sp, #0]
 8018742:	462b      	mov	r3, r5
 8018744:	4622      	mov	r2, r4
 8018746:	4601      	mov	r1, r0
 8018748:	4804      	ldr	r0, [pc, #16]	; (801875c <netif_do_set_netmask+0x80>)
 801874a:	f00b fc3d 	bl	8023fc8 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801874e:	2301      	movs	r3, #1
 8018750:	e000      	b.n	8018754 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 8018752:	2300      	movs	r3, #0
}
 8018754:	4618      	mov	r0, r3
 8018756:	3710      	adds	r7, #16
 8018758:	46bd      	mov	sp, r7
 801875a:	bdb0      	pop	{r4, r5, r7, pc}
 801875c:	08026a6c 	.word	0x08026a6c

08018760 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8018760:	b5b0      	push	{r4, r5, r7, lr}
 8018762:	b088      	sub	sp, #32
 8018764:	af04      	add	r7, sp, #16
 8018766:	60f8      	str	r0, [r7, #12]
 8018768:	60b9      	str	r1, [r7, #8]
 801876a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801876c:	68bb      	ldr	r3, [r7, #8]
 801876e:	681a      	ldr	r2, [r3, #0]
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	330c      	adds	r3, #12
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	429a      	cmp	r2, r3
 8018778:	d02d      	beq.n	80187d6 <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801877a:	68bb      	ldr	r3, [r7, #8]
 801877c:	2b00      	cmp	r3, #0
 801877e:	d002      	beq.n	8018786 <netif_do_set_gw+0x26>
 8018780:	68bb      	ldr	r3, [r7, #8]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	e000      	b.n	8018788 <netif_do_set_gw+0x28>
 8018786:	2300      	movs	r3, #0
 8018788:	68fa      	ldr	r2, [r7, #12]
 801878a:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 801878c:	68fb      	ldr	r3, [r7, #12]
 801878e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8018792:	4618      	mov	r0, r3
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801879a:	461c      	mov	r4, r3
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	330c      	adds	r3, #12
 80187a0:	781b      	ldrb	r3, [r3, #0]
 80187a2:	461d      	mov	r5, r3
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	330c      	adds	r3, #12
 80187a8:	3301      	adds	r3, #1
 80187aa:	781b      	ldrb	r3, [r3, #0]
 80187ac:	461a      	mov	r2, r3
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	330c      	adds	r3, #12
 80187b2:	3302      	adds	r3, #2
 80187b4:	781b      	ldrb	r3, [r3, #0]
 80187b6:	4619      	mov	r1, r3
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	330c      	adds	r3, #12
 80187bc:	3303      	adds	r3, #3
 80187be:	781b      	ldrb	r3, [r3, #0]
 80187c0:	9302      	str	r3, [sp, #8]
 80187c2:	9101      	str	r1, [sp, #4]
 80187c4:	9200      	str	r2, [sp, #0]
 80187c6:	462b      	mov	r3, r5
 80187c8:	4622      	mov	r2, r4
 80187ca:	4601      	mov	r1, r0
 80187cc:	4804      	ldr	r0, [pc, #16]	; (80187e0 <netif_do_set_gw+0x80>)
 80187ce:	f00b fbfb 	bl	8023fc8 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80187d2:	2301      	movs	r3, #1
 80187d4:	e000      	b.n	80187d8 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 80187d6:	2300      	movs	r3, #0
}
 80187d8:	4618      	mov	r0, r3
 80187da:	3710      	adds	r7, #16
 80187dc:	46bd      	mov	sp, r7
 80187de:	bdb0      	pop	{r4, r5, r7, pc}
 80187e0:	08026acc 	.word	0x08026acc

080187e4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	b088      	sub	sp, #32
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	60f8      	str	r0, [r7, #12]
 80187ec:	60b9      	str	r1, [r7, #8]
 80187ee:	607a      	str	r2, [r7, #4]
 80187f0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80187f2:	2300      	movs	r3, #0
 80187f4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80187f6:	2300      	movs	r3, #0
 80187f8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80187fa:	68bb      	ldr	r3, [r7, #8]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d101      	bne.n	8018804 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8018800:	4b1c      	ldr	r3, [pc, #112]	; (8018874 <netif_set_addr+0x90>)
 8018802:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	2b00      	cmp	r3, #0
 8018808:	d101      	bne.n	801880e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801880a:	4b1a      	ldr	r3, [pc, #104]	; (8018874 <netif_set_addr+0x90>)
 801880c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801880e:	683b      	ldr	r3, [r7, #0]
 8018810:	2b00      	cmp	r3, #0
 8018812:	d101      	bne.n	8018818 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8018814:	4b17      	ldr	r3, [pc, #92]	; (8018874 <netif_set_addr+0x90>)
 8018816:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8018818:	68bb      	ldr	r3, [r7, #8]
 801881a:	2b00      	cmp	r3, #0
 801881c:	d003      	beq.n	8018826 <netif_set_addr+0x42>
 801881e:	68bb      	ldr	r3, [r7, #8]
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	2b00      	cmp	r3, #0
 8018824:	d101      	bne.n	801882a <netif_set_addr+0x46>
 8018826:	2301      	movs	r3, #1
 8018828:	e000      	b.n	801882c <netif_set_addr+0x48>
 801882a:	2300      	movs	r3, #0
 801882c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801882e:	697b      	ldr	r3, [r7, #20]
 8018830:	2b00      	cmp	r3, #0
 8018832:	d006      	beq.n	8018842 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8018834:	f107 0310 	add.w	r3, r7, #16
 8018838:	461a      	mov	r2, r3
 801883a:	68b9      	ldr	r1, [r7, #8]
 801883c:	68f8      	ldr	r0, [r7, #12]
 801883e:	f7ff feff 	bl	8018640 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8018842:	69fa      	ldr	r2, [r7, #28]
 8018844:	6879      	ldr	r1, [r7, #4]
 8018846:	68f8      	ldr	r0, [r7, #12]
 8018848:	f7ff ff48 	bl	80186dc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801884c:	69ba      	ldr	r2, [r7, #24]
 801884e:	6839      	ldr	r1, [r7, #0]
 8018850:	68f8      	ldr	r0, [r7, #12]
 8018852:	f7ff ff85 	bl	8018760 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8018856:	697b      	ldr	r3, [r7, #20]
 8018858:	2b00      	cmp	r3, #0
 801885a:	d106      	bne.n	801886a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801885c:	f107 0310 	add.w	r3, r7, #16
 8018860:	461a      	mov	r2, r3
 8018862:	68b9      	ldr	r1, [r7, #8]
 8018864:	68f8      	ldr	r0, [r7, #12]
 8018866:	f7ff feeb 	bl	8018640 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801886a:	bf00      	nop
 801886c:	3720      	adds	r7, #32
 801886e:	46bd      	mov	sp, r7
 8018870:	bd80      	pop	{r7, pc}
 8018872:	bf00      	nop
 8018874:	08029b34 	.word	0x08029b34

08018878 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8018878:	b580      	push	{r7, lr}
 801887a:	b082      	sub	sp, #8
 801887c:	af00      	add	r7, sp, #0
 801887e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8018880:	4a0d      	ldr	r2, [pc, #52]	; (80188b8 <netif_set_default+0x40>)
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	2b00      	cmp	r3, #0
 801888a:	d004      	beq.n	8018896 <netif_set_default+0x1e>
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8018892:	4619      	mov	r1, r3
 8018894:	e000      	b.n	8018898 <netif_set_default+0x20>
 8018896:	2127      	movs	r1, #39	; 0x27
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	2b00      	cmp	r3, #0
 801889c:	d003      	beq.n	80188a6 <netif_set_default+0x2e>
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80188a4:	e000      	b.n	80188a8 <netif_set_default+0x30>
 80188a6:	2327      	movs	r3, #39	; 0x27
 80188a8:	461a      	mov	r2, r3
 80188aa:	4804      	ldr	r0, [pc, #16]	; (80188bc <netif_set_default+0x44>)
 80188ac:	f00b fb8c 	bl	8023fc8 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80188b0:	bf00      	nop
 80188b2:	3708      	adds	r7, #8
 80188b4:	46bd      	mov	sp, r7
 80188b6:	bd80      	pop	{r7, pc}
 80188b8:	2007ecb0 	.word	0x2007ecb0
 80188bc:	08026b40 	.word	0x08026b40

080188c0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b082      	sub	sp, #8
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d107      	bne.n	80188de <netif_set_up+0x1e>
 80188ce:	4b0f      	ldr	r3, [pc, #60]	; (801890c <netif_set_up+0x4c>)
 80188d0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80188d4:	490e      	ldr	r1, [pc, #56]	; (8018910 <netif_set_up+0x50>)
 80188d6:	480f      	ldr	r0, [pc, #60]	; (8018914 <netif_set_up+0x54>)
 80188d8:	f00b fb76 	bl	8023fc8 <iprintf>
 80188dc:	e013      	b.n	8018906 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80188e4:	f003 0301 	and.w	r3, r3, #1
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d10c      	bne.n	8018906 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80188f2:	f043 0301 	orr.w	r3, r3, #1
 80188f6:	b2da      	uxtb	r2, r3
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80188fe:	2103      	movs	r1, #3
 8018900:	6878      	ldr	r0, [r7, #4]
 8018902:	f000 f809 	bl	8018918 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8018906:	3708      	adds	r7, #8
 8018908:	46bd      	mov	sp, r7
 801890a:	bd80      	pop	{r7, pc}
 801890c:	080268a8 	.word	0x080268a8
 8018910:	08026b68 	.word	0x08026b68
 8018914:	080268f8 	.word	0x080268f8

08018918 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8018918:	b580      	push	{r7, lr}
 801891a:	b082      	sub	sp, #8
 801891c:	af00      	add	r7, sp, #0
 801891e:	6078      	str	r0, [r7, #4]
 8018920:	460b      	mov	r3, r1
 8018922:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	2b00      	cmp	r3, #0
 8018928:	d106      	bne.n	8018938 <netif_issue_reports+0x20>
 801892a:	4b18      	ldr	r3, [pc, #96]	; (801898c <netif_issue_reports+0x74>)
 801892c:	f240 326d 	movw	r2, #877	; 0x36d
 8018930:	4917      	ldr	r1, [pc, #92]	; (8018990 <netif_issue_reports+0x78>)
 8018932:	4818      	ldr	r0, [pc, #96]	; (8018994 <netif_issue_reports+0x7c>)
 8018934:	f00b fb48 	bl	8023fc8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801893e:	f003 0304 	and.w	r3, r3, #4
 8018942:	2b00      	cmp	r3, #0
 8018944:	d01e      	beq.n	8018984 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801894c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8018950:	2b00      	cmp	r3, #0
 8018952:	d017      	beq.n	8018984 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8018954:	78fb      	ldrb	r3, [r7, #3]
 8018956:	f003 0301 	and.w	r3, r3, #1
 801895a:	2b00      	cmp	r3, #0
 801895c:	d013      	beq.n	8018986 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	3304      	adds	r3, #4
 8018962:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8018964:	2b00      	cmp	r3, #0
 8018966:	d00e      	beq.n	8018986 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801896e:	f003 0308 	and.w	r3, r3, #8
 8018972:	2b00      	cmp	r3, #0
 8018974:	d007      	beq.n	8018986 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	3304      	adds	r3, #4
 801897a:	4619      	mov	r1, r3
 801897c:	6878      	ldr	r0, [r7, #4]
 801897e:	f009 f835 	bl	80219ec <etharp_request>
 8018982:	e000      	b.n	8018986 <netif_issue_reports+0x6e>
    return;
 8018984:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8018986:	3708      	adds	r7, #8
 8018988:	46bd      	mov	sp, r7
 801898a:	bd80      	pop	{r7, pc}
 801898c:	080268a8 	.word	0x080268a8
 8018990:	08026b84 	.word	0x08026b84
 8018994:	080268f8 	.word	0x080268f8

08018998 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b082      	sub	sp, #8
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d107      	bne.n	80189b6 <netif_set_down+0x1e>
 80189a6:	4b12      	ldr	r3, [pc, #72]	; (80189f0 <netif_set_down+0x58>)
 80189a8:	f240 329b 	movw	r2, #923	; 0x39b
 80189ac:	4911      	ldr	r1, [pc, #68]	; (80189f4 <netif_set_down+0x5c>)
 80189ae:	4812      	ldr	r0, [pc, #72]	; (80189f8 <netif_set_down+0x60>)
 80189b0:	f00b fb0a 	bl	8023fc8 <iprintf>
 80189b4:	e019      	b.n	80189ea <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80189bc:	f003 0301 	and.w	r3, r3, #1
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d012      	beq.n	80189ea <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80189ca:	f023 0301 	bic.w	r3, r3, #1
 80189ce:	b2da      	uxtb	r2, r3
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80189dc:	f003 0308 	and.w	r3, r3, #8
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d002      	beq.n	80189ea <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80189e4:	6878      	ldr	r0, [r7, #4]
 80189e6:	f008 fb7f 	bl	80210e8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80189ea:	3708      	adds	r7, #8
 80189ec:	46bd      	mov	sp, r7
 80189ee:	bd80      	pop	{r7, pc}
 80189f0:	080268a8 	.word	0x080268a8
 80189f4:	08026ba8 	.word	0x08026ba8
 80189f8:	080268f8 	.word	0x080268f8

080189fc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80189fc:	b580      	push	{r7, lr}
 80189fe:	b082      	sub	sp, #8
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d107      	bne.n	8018a1a <netif_set_link_up+0x1e>
 8018a0a:	4b13      	ldr	r3, [pc, #76]	; (8018a58 <netif_set_link_up+0x5c>)
 8018a0c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8018a10:	4912      	ldr	r1, [pc, #72]	; (8018a5c <netif_set_link_up+0x60>)
 8018a12:	4813      	ldr	r0, [pc, #76]	; (8018a60 <netif_set_link_up+0x64>)
 8018a14:	f00b fad8 	bl	8023fc8 <iprintf>
 8018a18:	e01b      	b.n	8018a52 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018a20:	f003 0304 	and.w	r3, r3, #4
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d114      	bne.n	8018a52 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018a2e:	f043 0304 	orr.w	r3, r3, #4
 8018a32:	b2da      	uxtb	r2, r3
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8018a3a:	2103      	movs	r1, #3
 8018a3c:	6878      	ldr	r0, [r7, #4]
 8018a3e:	f7ff ff6b 	bl	8018918 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	69db      	ldr	r3, [r3, #28]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d003      	beq.n	8018a52 <netif_set_link_up+0x56>
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	69db      	ldr	r3, [r3, #28]
 8018a4e:	6878      	ldr	r0, [r7, #4]
 8018a50:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8018a52:	3708      	adds	r7, #8
 8018a54:	46bd      	mov	sp, r7
 8018a56:	bd80      	pop	{r7, pc}
 8018a58:	080268a8 	.word	0x080268a8
 8018a5c:	08026bc8 	.word	0x08026bc8
 8018a60:	080268f8 	.word	0x080268f8

08018a64 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b082      	sub	sp, #8
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d107      	bne.n	8018a82 <netif_set_link_down+0x1e>
 8018a72:	4b11      	ldr	r3, [pc, #68]	; (8018ab8 <netif_set_link_down+0x54>)
 8018a74:	f240 4206 	movw	r2, #1030	; 0x406
 8018a78:	4910      	ldr	r1, [pc, #64]	; (8018abc <netif_set_link_down+0x58>)
 8018a7a:	4811      	ldr	r0, [pc, #68]	; (8018ac0 <netif_set_link_down+0x5c>)
 8018a7c:	f00b faa4 	bl	8023fc8 <iprintf>
 8018a80:	e017      	b.n	8018ab2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018a88:	f003 0304 	and.w	r3, r3, #4
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d010      	beq.n	8018ab2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018a96:	f023 0304 	bic.w	r3, r3, #4
 8018a9a:	b2da      	uxtb	r2, r3
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	69db      	ldr	r3, [r3, #28]
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d003      	beq.n	8018ab2 <netif_set_link_down+0x4e>
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	69db      	ldr	r3, [r3, #28]
 8018aae:	6878      	ldr	r0, [r7, #4]
 8018ab0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8018ab2:	3708      	adds	r7, #8
 8018ab4:	46bd      	mov	sp, r7
 8018ab6:	bd80      	pop	{r7, pc}
 8018ab8:	080268a8 	.word	0x080268a8
 8018abc:	08026bec 	.word	0x08026bec
 8018ac0:	080268f8 	.word	0x080268f8

08018ac4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8018ac4:	b480      	push	{r7}
 8018ac6:	b083      	sub	sp, #12
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	6078      	str	r0, [r7, #4]
 8018acc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d002      	beq.n	8018ada <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	683a      	ldr	r2, [r7, #0]
 8018ad8:	61da      	str	r2, [r3, #28]
  }
}
 8018ada:	bf00      	nop
 8018adc:	370c      	adds	r7, #12
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae4:	4770      	bx	lr

08018ae6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8018ae6:	b480      	push	{r7}
 8018ae8:	b085      	sub	sp, #20
 8018aea:	af00      	add	r7, sp, #0
 8018aec:	60f8      	str	r0, [r7, #12]
 8018aee:	60b9      	str	r1, [r7, #8]
 8018af0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8018af2:	f06f 030b 	mvn.w	r3, #11
}
 8018af6:	4618      	mov	r0, r3
 8018af8:	3714      	adds	r7, #20
 8018afa:	46bd      	mov	sp, r7
 8018afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b00:	4770      	bx	lr
	...

08018b04 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8018b04:	b480      	push	{r7}
 8018b06:	b085      	sub	sp, #20
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	4603      	mov	r3, r0
 8018b0c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8018b0e:	79fb      	ldrb	r3, [r7, #7]
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d013      	beq.n	8018b3c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8018b14:	4b0d      	ldr	r3, [pc, #52]	; (8018b4c <netif_get_by_index+0x48>)
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	60fb      	str	r3, [r7, #12]
 8018b1a:	e00c      	b.n	8018b36 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018b22:	3301      	adds	r3, #1
 8018b24:	b2db      	uxtb	r3, r3
 8018b26:	79fa      	ldrb	r2, [r7, #7]
 8018b28:	429a      	cmp	r2, r3
 8018b2a:	d101      	bne.n	8018b30 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	e006      	b.n	8018b3e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	60fb      	str	r3, [r7, #12]
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d1ef      	bne.n	8018b1c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8018b3c:	2300      	movs	r3, #0
}
 8018b3e:	4618      	mov	r0, r3
 8018b40:	3714      	adds	r7, #20
 8018b42:	46bd      	mov	sp, r7
 8018b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b48:	4770      	bx	lr
 8018b4a:	bf00      	nop
 8018b4c:	2007ecac 	.word	0x2007ecac

08018b50 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b082      	sub	sp, #8
 8018b54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8018b56:	f00a febf 	bl	80238d8 <sys_arch_protect>
 8018b5a:	6038      	str	r0, [r7, #0]
 8018b5c:	4b0d      	ldr	r3, [pc, #52]	; (8018b94 <pbuf_free_ooseq+0x44>)
 8018b5e:	2200      	movs	r2, #0
 8018b60:	701a      	strb	r2, [r3, #0]
 8018b62:	6838      	ldr	r0, [r7, #0]
 8018b64:	f00a fec6 	bl	80238f4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018b68:	4b0b      	ldr	r3, [pc, #44]	; (8018b98 <pbuf_free_ooseq+0x48>)
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	607b      	str	r3, [r7, #4]
 8018b6e:	e00a      	b.n	8018b86 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d003      	beq.n	8018b80 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8018b78:	6878      	ldr	r0, [r7, #4]
 8018b7a:	f002 fd9b 	bl	801b6b4 <tcp_free_ooseq>
      return;
 8018b7e:	e005      	b.n	8018b8c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	68db      	ldr	r3, [r3, #12]
 8018b84:	607b      	str	r3, [r7, #4]
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d1f1      	bne.n	8018b70 <pbuf_free_ooseq+0x20>
    }
  }
}
 8018b8c:	3708      	adds	r7, #8
 8018b8e:	46bd      	mov	sp, r7
 8018b90:	bd80      	pop	{r7, pc}
 8018b92:	bf00      	nop
 8018b94:	2007ecb5 	.word	0x2007ecb5
 8018b98:	2007edc4 	.word	0x2007edc4

08018b9c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b082      	sub	sp, #8
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8018ba4:	f7ff ffd4 	bl	8018b50 <pbuf_free_ooseq>
}
 8018ba8:	bf00      	nop
 8018baa:	3708      	adds	r7, #8
 8018bac:	46bd      	mov	sp, r7
 8018bae:	bd80      	pop	{r7, pc}

08018bb0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8018bb0:	b580      	push	{r7, lr}
 8018bb2:	b082      	sub	sp, #8
 8018bb4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8018bb6:	f00a fe8f 	bl	80238d8 <sys_arch_protect>
 8018bba:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8018bbc:	4b0f      	ldr	r3, [pc, #60]	; (8018bfc <pbuf_pool_is_empty+0x4c>)
 8018bbe:	781b      	ldrb	r3, [r3, #0]
 8018bc0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8018bc2:	4b0e      	ldr	r3, [pc, #56]	; (8018bfc <pbuf_pool_is_empty+0x4c>)
 8018bc4:	2201      	movs	r2, #1
 8018bc6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8018bc8:	6878      	ldr	r0, [r7, #4]
 8018bca:	f00a fe93 	bl	80238f4 <sys_arch_unprotect>

  if (!queued) {
 8018bce:	78fb      	ldrb	r3, [r7, #3]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d10f      	bne.n	8018bf4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8018bd4:	2100      	movs	r1, #0
 8018bd6:	480a      	ldr	r0, [pc, #40]	; (8018c00 <pbuf_pool_is_empty+0x50>)
 8018bd8:	f7fe fbe4 	bl	80173a4 <tcpip_try_callback>
 8018bdc:	4603      	mov	r3, r0
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d008      	beq.n	8018bf4 <pbuf_pool_is_empty+0x44>
 8018be2:	f00a fe79 	bl	80238d8 <sys_arch_protect>
 8018be6:	6078      	str	r0, [r7, #4]
 8018be8:	4b04      	ldr	r3, [pc, #16]	; (8018bfc <pbuf_pool_is_empty+0x4c>)
 8018bea:	2200      	movs	r2, #0
 8018bec:	701a      	strb	r2, [r3, #0]
 8018bee:	6878      	ldr	r0, [r7, #4]
 8018bf0:	f00a fe80 	bl	80238f4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8018bf4:	bf00      	nop
 8018bf6:	3708      	adds	r7, #8
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	bd80      	pop	{r7, pc}
 8018bfc:	2007ecb5 	.word	0x2007ecb5
 8018c00:	08018b9d 	.word	0x08018b9d

08018c04 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8018c04:	b480      	push	{r7}
 8018c06:	b085      	sub	sp, #20
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	60f8      	str	r0, [r7, #12]
 8018c0c:	60b9      	str	r1, [r7, #8]
 8018c0e:	4611      	mov	r1, r2
 8018c10:	461a      	mov	r2, r3
 8018c12:	460b      	mov	r3, r1
 8018c14:	80fb      	strh	r3, [r7, #6]
 8018c16:	4613      	mov	r3, r2
 8018c18:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8018c1a:	68fb      	ldr	r3, [r7, #12]
 8018c1c:	2200      	movs	r2, #0
 8018c1e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	68ba      	ldr	r2, [r7, #8]
 8018c24:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	88fa      	ldrh	r2, [r7, #6]
 8018c2a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	88ba      	ldrh	r2, [r7, #4]
 8018c30:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8018c32:	8b3b      	ldrh	r3, [r7, #24]
 8018c34:	b2da      	uxtb	r2, r3
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8018c3a:	68fb      	ldr	r3, [r7, #12]
 8018c3c:	7f3a      	ldrb	r2, [r7, #28]
 8018c3e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8018c40:	68fb      	ldr	r3, [r7, #12]
 8018c42:	2201      	movs	r2, #1
 8018c44:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8018c46:	68fb      	ldr	r3, [r7, #12]
 8018c48:	2200      	movs	r2, #0
 8018c4a:	73da      	strb	r2, [r3, #15]
}
 8018c4c:	bf00      	nop
 8018c4e:	3714      	adds	r7, #20
 8018c50:	46bd      	mov	sp, r7
 8018c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c56:	4770      	bx	lr

08018c58 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b08c      	sub	sp, #48	; 0x30
 8018c5c:	af02      	add	r7, sp, #8
 8018c5e:	4603      	mov	r3, r0
 8018c60:	71fb      	strb	r3, [r7, #7]
 8018c62:	460b      	mov	r3, r1
 8018c64:	80bb      	strh	r3, [r7, #4]
 8018c66:	4613      	mov	r3, r2
 8018c68:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8018c6a:	79fb      	ldrb	r3, [r7, #7]
 8018c6c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8018c6e:	887b      	ldrh	r3, [r7, #2]
 8018c70:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8018c74:	d07f      	beq.n	8018d76 <pbuf_alloc+0x11e>
 8018c76:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8018c7a:	f300 80c8 	bgt.w	8018e0e <pbuf_alloc+0x1b6>
 8018c7e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8018c82:	d010      	beq.n	8018ca6 <pbuf_alloc+0x4e>
 8018c84:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8018c88:	f300 80c1 	bgt.w	8018e0e <pbuf_alloc+0x1b6>
 8018c8c:	2b01      	cmp	r3, #1
 8018c8e:	d002      	beq.n	8018c96 <pbuf_alloc+0x3e>
 8018c90:	2b41      	cmp	r3, #65	; 0x41
 8018c92:	f040 80bc 	bne.w	8018e0e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8018c96:	887a      	ldrh	r2, [r7, #2]
 8018c98:	88bb      	ldrh	r3, [r7, #4]
 8018c9a:	4619      	mov	r1, r3
 8018c9c:	2000      	movs	r0, #0
 8018c9e:	f000 f8d1 	bl	8018e44 <pbuf_alloc_reference>
 8018ca2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8018ca4:	e0bd      	b.n	8018e22 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8018ca6:	2300      	movs	r3, #0
 8018ca8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8018caa:	2300      	movs	r3, #0
 8018cac:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8018cae:	88bb      	ldrh	r3, [r7, #4]
 8018cb0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8018cb2:	200c      	movs	r0, #12
 8018cb4:	f7ff fa9e 	bl	80181f4 <memp_malloc>
 8018cb8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8018cba:	693b      	ldr	r3, [r7, #16]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d109      	bne.n	8018cd4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8018cc0:	f7ff ff76 	bl	8018bb0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8018cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d002      	beq.n	8018cd0 <pbuf_alloc+0x78>
            pbuf_free(p);
 8018cca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018ccc:	f000 faa8 	bl	8019220 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8018cd0:	2300      	movs	r3, #0
 8018cd2:	e0a7      	b.n	8018e24 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8018cd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018cd6:	3303      	adds	r3, #3
 8018cd8:	b29b      	uxth	r3, r3
 8018cda:	f023 0303 	bic.w	r3, r3, #3
 8018cde:	b29b      	uxth	r3, r3
 8018ce0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8018ce4:	b29b      	uxth	r3, r3
 8018ce6:	8b7a      	ldrh	r2, [r7, #26]
 8018ce8:	4293      	cmp	r3, r2
 8018cea:	bf28      	it	cs
 8018cec:	4613      	movcs	r3, r2
 8018cee:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8018cf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018cf2:	3310      	adds	r3, #16
 8018cf4:	693a      	ldr	r2, [r7, #16]
 8018cf6:	4413      	add	r3, r2
 8018cf8:	3303      	adds	r3, #3
 8018cfa:	f023 0303 	bic.w	r3, r3, #3
 8018cfe:	4618      	mov	r0, r3
 8018d00:	89f9      	ldrh	r1, [r7, #14]
 8018d02:	8b7a      	ldrh	r2, [r7, #26]
 8018d04:	2300      	movs	r3, #0
 8018d06:	9301      	str	r3, [sp, #4]
 8018d08:	887b      	ldrh	r3, [r7, #2]
 8018d0a:	9300      	str	r3, [sp, #0]
 8018d0c:	460b      	mov	r3, r1
 8018d0e:	4601      	mov	r1, r0
 8018d10:	6938      	ldr	r0, [r7, #16]
 8018d12:	f7ff ff77 	bl	8018c04 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8018d16:	693b      	ldr	r3, [r7, #16]
 8018d18:	685b      	ldr	r3, [r3, #4]
 8018d1a:	f003 0303 	and.w	r3, r3, #3
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d006      	beq.n	8018d30 <pbuf_alloc+0xd8>
 8018d22:	4b42      	ldr	r3, [pc, #264]	; (8018e2c <pbuf_alloc+0x1d4>)
 8018d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018d28:	4941      	ldr	r1, [pc, #260]	; (8018e30 <pbuf_alloc+0x1d8>)
 8018d2a:	4842      	ldr	r0, [pc, #264]	; (8018e34 <pbuf_alloc+0x1dc>)
 8018d2c:	f00b f94c 	bl	8023fc8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8018d30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018d32:	3303      	adds	r3, #3
 8018d34:	f023 0303 	bic.w	r3, r3, #3
 8018d38:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8018d3c:	d106      	bne.n	8018d4c <pbuf_alloc+0xf4>
 8018d3e:	4b3b      	ldr	r3, [pc, #236]	; (8018e2c <pbuf_alloc+0x1d4>)
 8018d40:	f44f 7281 	mov.w	r2, #258	; 0x102
 8018d44:	493c      	ldr	r1, [pc, #240]	; (8018e38 <pbuf_alloc+0x1e0>)
 8018d46:	483b      	ldr	r0, [pc, #236]	; (8018e34 <pbuf_alloc+0x1dc>)
 8018d48:	f00b f93e 	bl	8023fc8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8018d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d102      	bne.n	8018d58 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8018d52:	693b      	ldr	r3, [r7, #16]
 8018d54:	627b      	str	r3, [r7, #36]	; 0x24
 8018d56:	e002      	b.n	8018d5e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8018d58:	69fb      	ldr	r3, [r7, #28]
 8018d5a:	693a      	ldr	r2, [r7, #16]
 8018d5c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8018d5e:	693b      	ldr	r3, [r7, #16]
 8018d60:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8018d62:	8b7a      	ldrh	r2, [r7, #26]
 8018d64:	89fb      	ldrh	r3, [r7, #14]
 8018d66:	1ad3      	subs	r3, r2, r3
 8018d68:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8018d6a:	2300      	movs	r3, #0
 8018d6c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8018d6e:	8b7b      	ldrh	r3, [r7, #26]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d19e      	bne.n	8018cb2 <pbuf_alloc+0x5a>
      break;
 8018d74:	e055      	b.n	8018e22 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8018d76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018d78:	3303      	adds	r3, #3
 8018d7a:	b29b      	uxth	r3, r3
 8018d7c:	f023 0303 	bic.w	r3, r3, #3
 8018d80:	b29a      	uxth	r2, r3
 8018d82:	88bb      	ldrh	r3, [r7, #4]
 8018d84:	3303      	adds	r3, #3
 8018d86:	b29b      	uxth	r3, r3
 8018d88:	f023 0303 	bic.w	r3, r3, #3
 8018d8c:	b29b      	uxth	r3, r3
 8018d8e:	4413      	add	r3, r2
 8018d90:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8018d92:	8b3b      	ldrh	r3, [r7, #24]
 8018d94:	3310      	adds	r3, #16
 8018d96:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018d98:	8b3a      	ldrh	r2, [r7, #24]
 8018d9a:	88bb      	ldrh	r3, [r7, #4]
 8018d9c:	3303      	adds	r3, #3
 8018d9e:	f023 0303 	bic.w	r3, r3, #3
 8018da2:	429a      	cmp	r2, r3
 8018da4:	d306      	bcc.n	8018db4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8018da6:	8afa      	ldrh	r2, [r7, #22]
 8018da8:	88bb      	ldrh	r3, [r7, #4]
 8018daa:	3303      	adds	r3, #3
 8018dac:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018db0:	429a      	cmp	r2, r3
 8018db2:	d201      	bcs.n	8018db8 <pbuf_alloc+0x160>
        return NULL;
 8018db4:	2300      	movs	r3, #0
 8018db6:	e035      	b.n	8018e24 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8018db8:	8afb      	ldrh	r3, [r7, #22]
 8018dba:	4618      	mov	r0, r3
 8018dbc:	f7fe fff6 	bl	8017dac <mem_malloc>
 8018dc0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8018dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d101      	bne.n	8018dcc <pbuf_alloc+0x174>
        return NULL;
 8018dc8:	2300      	movs	r3, #0
 8018dca:	e02b      	b.n	8018e24 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8018dcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018dce:	3310      	adds	r3, #16
 8018dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018dd2:	4413      	add	r3, r2
 8018dd4:	3303      	adds	r3, #3
 8018dd6:	f023 0303 	bic.w	r3, r3, #3
 8018dda:	4618      	mov	r0, r3
 8018ddc:	88b9      	ldrh	r1, [r7, #4]
 8018dde:	88ba      	ldrh	r2, [r7, #4]
 8018de0:	2300      	movs	r3, #0
 8018de2:	9301      	str	r3, [sp, #4]
 8018de4:	887b      	ldrh	r3, [r7, #2]
 8018de6:	9300      	str	r3, [sp, #0]
 8018de8:	460b      	mov	r3, r1
 8018dea:	4601      	mov	r1, r0
 8018dec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018dee:	f7ff ff09 	bl	8018c04 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8018df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018df4:	685b      	ldr	r3, [r3, #4]
 8018df6:	f003 0303 	and.w	r3, r3, #3
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d010      	beq.n	8018e20 <pbuf_alloc+0x1c8>
 8018dfe:	4b0b      	ldr	r3, [pc, #44]	; (8018e2c <pbuf_alloc+0x1d4>)
 8018e00:	f44f 7291 	mov.w	r2, #290	; 0x122
 8018e04:	490d      	ldr	r1, [pc, #52]	; (8018e3c <pbuf_alloc+0x1e4>)
 8018e06:	480b      	ldr	r0, [pc, #44]	; (8018e34 <pbuf_alloc+0x1dc>)
 8018e08:	f00b f8de 	bl	8023fc8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8018e0c:	e008      	b.n	8018e20 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8018e0e:	4b07      	ldr	r3, [pc, #28]	; (8018e2c <pbuf_alloc+0x1d4>)
 8018e10:	f240 1227 	movw	r2, #295	; 0x127
 8018e14:	490a      	ldr	r1, [pc, #40]	; (8018e40 <pbuf_alloc+0x1e8>)
 8018e16:	4807      	ldr	r0, [pc, #28]	; (8018e34 <pbuf_alloc+0x1dc>)
 8018e18:	f00b f8d6 	bl	8023fc8 <iprintf>
      return NULL;
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	e001      	b.n	8018e24 <pbuf_alloc+0x1cc>
      break;
 8018e20:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8018e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018e24:	4618      	mov	r0, r3
 8018e26:	3728      	adds	r7, #40	; 0x28
 8018e28:	46bd      	mov	sp, r7
 8018e2a:	bd80      	pop	{r7, pc}
 8018e2c:	08026c48 	.word	0x08026c48
 8018e30:	08026c78 	.word	0x08026c78
 8018e34:	08026ca8 	.word	0x08026ca8
 8018e38:	08026cd0 	.word	0x08026cd0
 8018e3c:	08026d04 	.word	0x08026d04
 8018e40:	08026d30 	.word	0x08026d30

08018e44 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b086      	sub	sp, #24
 8018e48:	af02      	add	r7, sp, #8
 8018e4a:	6078      	str	r0, [r7, #4]
 8018e4c:	460b      	mov	r3, r1
 8018e4e:	807b      	strh	r3, [r7, #2]
 8018e50:	4613      	mov	r3, r2
 8018e52:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8018e54:	883b      	ldrh	r3, [r7, #0]
 8018e56:	2b41      	cmp	r3, #65	; 0x41
 8018e58:	d009      	beq.n	8018e6e <pbuf_alloc_reference+0x2a>
 8018e5a:	883b      	ldrh	r3, [r7, #0]
 8018e5c:	2b01      	cmp	r3, #1
 8018e5e:	d006      	beq.n	8018e6e <pbuf_alloc_reference+0x2a>
 8018e60:	4b0f      	ldr	r3, [pc, #60]	; (8018ea0 <pbuf_alloc_reference+0x5c>)
 8018e62:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8018e66:	490f      	ldr	r1, [pc, #60]	; (8018ea4 <pbuf_alloc_reference+0x60>)
 8018e68:	480f      	ldr	r0, [pc, #60]	; (8018ea8 <pbuf_alloc_reference+0x64>)
 8018e6a:	f00b f8ad 	bl	8023fc8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8018e6e:	200b      	movs	r0, #11
 8018e70:	f7ff f9c0 	bl	80181f4 <memp_malloc>
 8018e74:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d101      	bne.n	8018e80 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8018e7c:	2300      	movs	r3, #0
 8018e7e:	e00b      	b.n	8018e98 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8018e80:	8879      	ldrh	r1, [r7, #2]
 8018e82:	887a      	ldrh	r2, [r7, #2]
 8018e84:	2300      	movs	r3, #0
 8018e86:	9301      	str	r3, [sp, #4]
 8018e88:	883b      	ldrh	r3, [r7, #0]
 8018e8a:	9300      	str	r3, [sp, #0]
 8018e8c:	460b      	mov	r3, r1
 8018e8e:	6879      	ldr	r1, [r7, #4]
 8018e90:	68f8      	ldr	r0, [r7, #12]
 8018e92:	f7ff feb7 	bl	8018c04 <pbuf_init_alloced_pbuf>
  return p;
 8018e96:	68fb      	ldr	r3, [r7, #12]
}
 8018e98:	4618      	mov	r0, r3
 8018e9a:	3710      	adds	r7, #16
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	bd80      	pop	{r7, pc}
 8018ea0:	08026c48 	.word	0x08026c48
 8018ea4:	08026d4c 	.word	0x08026d4c
 8018ea8:	08026ca8 	.word	0x08026ca8

08018eac <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8018eac:	b580      	push	{r7, lr}
 8018eae:	b088      	sub	sp, #32
 8018eb0:	af02      	add	r7, sp, #8
 8018eb2:	607b      	str	r3, [r7, #4]
 8018eb4:	4603      	mov	r3, r0
 8018eb6:	73fb      	strb	r3, [r7, #15]
 8018eb8:	460b      	mov	r3, r1
 8018eba:	81bb      	strh	r3, [r7, #12]
 8018ebc:	4613      	mov	r3, r2
 8018ebe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8018ec0:	7bfb      	ldrb	r3, [r7, #15]
 8018ec2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8018ec4:	8a7b      	ldrh	r3, [r7, #18]
 8018ec6:	3303      	adds	r3, #3
 8018ec8:	f023 0203 	bic.w	r2, r3, #3
 8018ecc:	89bb      	ldrh	r3, [r7, #12]
 8018ece:	441a      	add	r2, r3
 8018ed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ed2:	429a      	cmp	r2, r3
 8018ed4:	d901      	bls.n	8018eda <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8018ed6:	2300      	movs	r3, #0
 8018ed8:	e018      	b.n	8018f0c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8018eda:	6a3b      	ldr	r3, [r7, #32]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d007      	beq.n	8018ef0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8018ee0:	8a7b      	ldrh	r3, [r7, #18]
 8018ee2:	3303      	adds	r3, #3
 8018ee4:	f023 0303 	bic.w	r3, r3, #3
 8018ee8:	6a3a      	ldr	r2, [r7, #32]
 8018eea:	4413      	add	r3, r2
 8018eec:	617b      	str	r3, [r7, #20]
 8018eee:	e001      	b.n	8018ef4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8018ef4:	6878      	ldr	r0, [r7, #4]
 8018ef6:	89b9      	ldrh	r1, [r7, #12]
 8018ef8:	89ba      	ldrh	r2, [r7, #12]
 8018efa:	2302      	movs	r3, #2
 8018efc:	9301      	str	r3, [sp, #4]
 8018efe:	897b      	ldrh	r3, [r7, #10]
 8018f00:	9300      	str	r3, [sp, #0]
 8018f02:	460b      	mov	r3, r1
 8018f04:	6979      	ldr	r1, [r7, #20]
 8018f06:	f7ff fe7d 	bl	8018c04 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8018f0a:	687b      	ldr	r3, [r7, #4]
}
 8018f0c:	4618      	mov	r0, r3
 8018f0e:	3718      	adds	r7, #24
 8018f10:	46bd      	mov	sp, r7
 8018f12:	bd80      	pop	{r7, pc}

08018f14 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8018f14:	b580      	push	{r7, lr}
 8018f16:	b084      	sub	sp, #16
 8018f18:	af00      	add	r7, sp, #0
 8018f1a:	6078      	str	r0, [r7, #4]
 8018f1c:	460b      	mov	r3, r1
 8018f1e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d106      	bne.n	8018f34 <pbuf_realloc+0x20>
 8018f26:	4b3a      	ldr	r3, [pc, #232]	; (8019010 <pbuf_realloc+0xfc>)
 8018f28:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8018f2c:	4939      	ldr	r1, [pc, #228]	; (8019014 <pbuf_realloc+0x100>)
 8018f2e:	483a      	ldr	r0, [pc, #232]	; (8019018 <pbuf_realloc+0x104>)
 8018f30:	f00b f84a 	bl	8023fc8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	891b      	ldrh	r3, [r3, #8]
 8018f38:	887a      	ldrh	r2, [r7, #2]
 8018f3a:	429a      	cmp	r2, r3
 8018f3c:	d263      	bcs.n	8019006 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	891a      	ldrh	r2, [r3, #8]
 8018f42:	887b      	ldrh	r3, [r7, #2]
 8018f44:	1ad3      	subs	r3, r2, r3
 8018f46:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8018f48:	887b      	ldrh	r3, [r7, #2]
 8018f4a:	817b      	strh	r3, [r7, #10]
  q = p;
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8018f50:	e018      	b.n	8018f84 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	895b      	ldrh	r3, [r3, #10]
 8018f56:	897a      	ldrh	r2, [r7, #10]
 8018f58:	1ad3      	subs	r3, r2, r3
 8018f5a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	891a      	ldrh	r2, [r3, #8]
 8018f60:	893b      	ldrh	r3, [r7, #8]
 8018f62:	1ad3      	subs	r3, r2, r3
 8018f64:	b29a      	uxth	r2, r3
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d106      	bne.n	8018f84 <pbuf_realloc+0x70>
 8018f76:	4b26      	ldr	r3, [pc, #152]	; (8019010 <pbuf_realloc+0xfc>)
 8018f78:	f240 12af 	movw	r2, #431	; 0x1af
 8018f7c:	4927      	ldr	r1, [pc, #156]	; (801901c <pbuf_realloc+0x108>)
 8018f7e:	4826      	ldr	r0, [pc, #152]	; (8019018 <pbuf_realloc+0x104>)
 8018f80:	f00b f822 	bl	8023fc8 <iprintf>
  while (rem_len > q->len) {
 8018f84:	68fb      	ldr	r3, [r7, #12]
 8018f86:	895b      	ldrh	r3, [r3, #10]
 8018f88:	897a      	ldrh	r2, [r7, #10]
 8018f8a:	429a      	cmp	r2, r3
 8018f8c:	d8e1      	bhi.n	8018f52 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	7b1b      	ldrb	r3, [r3, #12]
 8018f92:	f003 030f 	and.w	r3, r3, #15
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d121      	bne.n	8018fde <pbuf_realloc+0xca>
 8018f9a:	68fb      	ldr	r3, [r7, #12]
 8018f9c:	895b      	ldrh	r3, [r3, #10]
 8018f9e:	897a      	ldrh	r2, [r7, #10]
 8018fa0:	429a      	cmp	r2, r3
 8018fa2:	d01c      	beq.n	8018fde <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	7b5b      	ldrb	r3, [r3, #13]
 8018fa8:	f003 0302 	and.w	r3, r3, #2
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d116      	bne.n	8018fde <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	685a      	ldr	r2, [r3, #4]
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	1ad3      	subs	r3, r2, r3
 8018fb8:	b29a      	uxth	r2, r3
 8018fba:	897b      	ldrh	r3, [r7, #10]
 8018fbc:	4413      	add	r3, r2
 8018fbe:	b29b      	uxth	r3, r3
 8018fc0:	4619      	mov	r1, r3
 8018fc2:	68f8      	ldr	r0, [r7, #12]
 8018fc4:	f7fe fdc0 	bl	8017b48 <mem_trim>
 8018fc8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d106      	bne.n	8018fde <pbuf_realloc+0xca>
 8018fd0:	4b0f      	ldr	r3, [pc, #60]	; (8019010 <pbuf_realloc+0xfc>)
 8018fd2:	f240 12bd 	movw	r2, #445	; 0x1bd
 8018fd6:	4912      	ldr	r1, [pc, #72]	; (8019020 <pbuf_realloc+0x10c>)
 8018fd8:	480f      	ldr	r0, [pc, #60]	; (8019018 <pbuf_realloc+0x104>)
 8018fda:	f00a fff5 	bl	8023fc8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	897a      	ldrh	r2, [r7, #10]
 8018fe2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	895a      	ldrh	r2, [r3, #10]
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d004      	beq.n	8018ffe <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	f000 f911 	bl	8019220 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	2200      	movs	r2, #0
 8019002:	601a      	str	r2, [r3, #0]
 8019004:	e000      	b.n	8019008 <pbuf_realloc+0xf4>
    return;
 8019006:	bf00      	nop

}
 8019008:	3710      	adds	r7, #16
 801900a:	46bd      	mov	sp, r7
 801900c:	bd80      	pop	{r7, pc}
 801900e:	bf00      	nop
 8019010:	08026c48 	.word	0x08026c48
 8019014:	08026d60 	.word	0x08026d60
 8019018:	08026ca8 	.word	0x08026ca8
 801901c:	08026d78 	.word	0x08026d78
 8019020:	08026d90 	.word	0x08026d90

08019024 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b086      	sub	sp, #24
 8019028:	af00      	add	r7, sp, #0
 801902a:	60f8      	str	r0, [r7, #12]
 801902c:	60b9      	str	r1, [r7, #8]
 801902e:	4613      	mov	r3, r2
 8019030:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8019032:	68fb      	ldr	r3, [r7, #12]
 8019034:	2b00      	cmp	r3, #0
 8019036:	d106      	bne.n	8019046 <pbuf_add_header_impl+0x22>
 8019038:	4b2b      	ldr	r3, [pc, #172]	; (80190e8 <pbuf_add_header_impl+0xc4>)
 801903a:	f240 12df 	movw	r2, #479	; 0x1df
 801903e:	492b      	ldr	r1, [pc, #172]	; (80190ec <pbuf_add_header_impl+0xc8>)
 8019040:	482b      	ldr	r0, [pc, #172]	; (80190f0 <pbuf_add_header_impl+0xcc>)
 8019042:	f00a ffc1 	bl	8023fc8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	2b00      	cmp	r3, #0
 801904a:	d003      	beq.n	8019054 <pbuf_add_header_impl+0x30>
 801904c:	68bb      	ldr	r3, [r7, #8]
 801904e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019052:	d301      	bcc.n	8019058 <pbuf_add_header_impl+0x34>
    return 1;
 8019054:	2301      	movs	r3, #1
 8019056:	e043      	b.n	80190e0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8019058:	68bb      	ldr	r3, [r7, #8]
 801905a:	2b00      	cmp	r3, #0
 801905c:	d101      	bne.n	8019062 <pbuf_add_header_impl+0x3e>
    return 0;
 801905e:	2300      	movs	r3, #0
 8019060:	e03e      	b.n	80190e0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8019062:	68bb      	ldr	r3, [r7, #8]
 8019064:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8019066:	68fb      	ldr	r3, [r7, #12]
 8019068:	891a      	ldrh	r2, [r3, #8]
 801906a:	8a7b      	ldrh	r3, [r7, #18]
 801906c:	4413      	add	r3, r2
 801906e:	b29b      	uxth	r3, r3
 8019070:	8a7a      	ldrh	r2, [r7, #18]
 8019072:	429a      	cmp	r2, r3
 8019074:	d901      	bls.n	801907a <pbuf_add_header_impl+0x56>
    return 1;
 8019076:	2301      	movs	r3, #1
 8019078:	e032      	b.n	80190e0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	7b1b      	ldrb	r3, [r3, #12]
 801907e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8019080:	8a3b      	ldrh	r3, [r7, #16]
 8019082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019086:	2b00      	cmp	r3, #0
 8019088:	d00c      	beq.n	80190a4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	685a      	ldr	r2, [r3, #4]
 801908e:	68bb      	ldr	r3, [r7, #8]
 8019090:	425b      	negs	r3, r3
 8019092:	4413      	add	r3, r2
 8019094:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	3310      	adds	r3, #16
 801909a:	697a      	ldr	r2, [r7, #20]
 801909c:	429a      	cmp	r2, r3
 801909e:	d20d      	bcs.n	80190bc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80190a0:	2301      	movs	r3, #1
 80190a2:	e01d      	b.n	80190e0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80190a4:	79fb      	ldrb	r3, [r7, #7]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d006      	beq.n	80190b8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	685a      	ldr	r2, [r3, #4]
 80190ae:	68bb      	ldr	r3, [r7, #8]
 80190b0:	425b      	negs	r3, r3
 80190b2:	4413      	add	r3, r2
 80190b4:	617b      	str	r3, [r7, #20]
 80190b6:	e001      	b.n	80190bc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80190b8:	2301      	movs	r3, #1
 80190ba:	e011      	b.n	80190e0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	697a      	ldr	r2, [r7, #20]
 80190c0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80190c2:	68fb      	ldr	r3, [r7, #12]
 80190c4:	895a      	ldrh	r2, [r3, #10]
 80190c6:	8a7b      	ldrh	r3, [r7, #18]
 80190c8:	4413      	add	r3, r2
 80190ca:	b29a      	uxth	r2, r3
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	891a      	ldrh	r2, [r3, #8]
 80190d4:	8a7b      	ldrh	r3, [r7, #18]
 80190d6:	4413      	add	r3, r2
 80190d8:	b29a      	uxth	r2, r3
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	811a      	strh	r2, [r3, #8]


  return 0;
 80190de:	2300      	movs	r3, #0
}
 80190e0:	4618      	mov	r0, r3
 80190e2:	3718      	adds	r7, #24
 80190e4:	46bd      	mov	sp, r7
 80190e6:	bd80      	pop	{r7, pc}
 80190e8:	08026c48 	.word	0x08026c48
 80190ec:	08026dac 	.word	0x08026dac
 80190f0:	08026ca8 	.word	0x08026ca8

080190f4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80190f4:	b580      	push	{r7, lr}
 80190f6:	b082      	sub	sp, #8
 80190f8:	af00      	add	r7, sp, #0
 80190fa:	6078      	str	r0, [r7, #4]
 80190fc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80190fe:	2200      	movs	r2, #0
 8019100:	6839      	ldr	r1, [r7, #0]
 8019102:	6878      	ldr	r0, [r7, #4]
 8019104:	f7ff ff8e 	bl	8019024 <pbuf_add_header_impl>
 8019108:	4603      	mov	r3, r0
}
 801910a:	4618      	mov	r0, r3
 801910c:	3708      	adds	r7, #8
 801910e:	46bd      	mov	sp, r7
 8019110:	bd80      	pop	{r7, pc}
	...

08019114 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b084      	sub	sp, #16
 8019118:	af00      	add	r7, sp, #0
 801911a:	6078      	str	r0, [r7, #4]
 801911c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	2b00      	cmp	r3, #0
 8019122:	d106      	bne.n	8019132 <pbuf_remove_header+0x1e>
 8019124:	4b20      	ldr	r3, [pc, #128]	; (80191a8 <pbuf_remove_header+0x94>)
 8019126:	f240 224b 	movw	r2, #587	; 0x24b
 801912a:	4920      	ldr	r1, [pc, #128]	; (80191ac <pbuf_remove_header+0x98>)
 801912c:	4820      	ldr	r0, [pc, #128]	; (80191b0 <pbuf_remove_header+0x9c>)
 801912e:	f00a ff4b 	bl	8023fc8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	2b00      	cmp	r3, #0
 8019136:	d003      	beq.n	8019140 <pbuf_remove_header+0x2c>
 8019138:	683b      	ldr	r3, [r7, #0]
 801913a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801913e:	d301      	bcc.n	8019144 <pbuf_remove_header+0x30>
    return 1;
 8019140:	2301      	movs	r3, #1
 8019142:	e02c      	b.n	801919e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8019144:	683b      	ldr	r3, [r7, #0]
 8019146:	2b00      	cmp	r3, #0
 8019148:	d101      	bne.n	801914e <pbuf_remove_header+0x3a>
    return 0;
 801914a:	2300      	movs	r3, #0
 801914c:	e027      	b.n	801919e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801914e:	683b      	ldr	r3, [r7, #0]
 8019150:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	895b      	ldrh	r3, [r3, #10]
 8019156:	89fa      	ldrh	r2, [r7, #14]
 8019158:	429a      	cmp	r2, r3
 801915a:	d908      	bls.n	801916e <pbuf_remove_header+0x5a>
 801915c:	4b12      	ldr	r3, [pc, #72]	; (80191a8 <pbuf_remove_header+0x94>)
 801915e:	f240 2255 	movw	r2, #597	; 0x255
 8019162:	4914      	ldr	r1, [pc, #80]	; (80191b4 <pbuf_remove_header+0xa0>)
 8019164:	4812      	ldr	r0, [pc, #72]	; (80191b0 <pbuf_remove_header+0x9c>)
 8019166:	f00a ff2f 	bl	8023fc8 <iprintf>
 801916a:	2301      	movs	r3, #1
 801916c:	e017      	b.n	801919e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	685b      	ldr	r3, [r3, #4]
 8019172:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	685a      	ldr	r2, [r3, #4]
 8019178:	683b      	ldr	r3, [r7, #0]
 801917a:	441a      	add	r2, r3
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	895a      	ldrh	r2, [r3, #10]
 8019184:	89fb      	ldrh	r3, [r7, #14]
 8019186:	1ad3      	subs	r3, r2, r3
 8019188:	b29a      	uxth	r2, r3
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	891a      	ldrh	r2, [r3, #8]
 8019192:	89fb      	ldrh	r3, [r7, #14]
 8019194:	1ad3      	subs	r3, r2, r3
 8019196:	b29a      	uxth	r2, r3
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801919c:	2300      	movs	r3, #0
}
 801919e:	4618      	mov	r0, r3
 80191a0:	3710      	adds	r7, #16
 80191a2:	46bd      	mov	sp, r7
 80191a4:	bd80      	pop	{r7, pc}
 80191a6:	bf00      	nop
 80191a8:	08026c48 	.word	0x08026c48
 80191ac:	08026dac 	.word	0x08026dac
 80191b0:	08026ca8 	.word	0x08026ca8
 80191b4:	08026db8 	.word	0x08026db8

080191b8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80191b8:	b580      	push	{r7, lr}
 80191ba:	b082      	sub	sp, #8
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
 80191c0:	460b      	mov	r3, r1
 80191c2:	807b      	strh	r3, [r7, #2]
 80191c4:	4613      	mov	r3, r2
 80191c6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80191c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	da08      	bge.n	80191e2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80191d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80191d4:	425b      	negs	r3, r3
 80191d6:	4619      	mov	r1, r3
 80191d8:	6878      	ldr	r0, [r7, #4]
 80191da:	f7ff ff9b 	bl	8019114 <pbuf_remove_header>
 80191de:	4603      	mov	r3, r0
 80191e0:	e007      	b.n	80191f2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80191e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80191e6:	787a      	ldrb	r2, [r7, #1]
 80191e8:	4619      	mov	r1, r3
 80191ea:	6878      	ldr	r0, [r7, #4]
 80191ec:	f7ff ff1a 	bl	8019024 <pbuf_add_header_impl>
 80191f0:	4603      	mov	r3, r0
  }
}
 80191f2:	4618      	mov	r0, r3
 80191f4:	3708      	adds	r7, #8
 80191f6:	46bd      	mov	sp, r7
 80191f8:	bd80      	pop	{r7, pc}

080191fa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80191fa:	b580      	push	{r7, lr}
 80191fc:	b082      	sub	sp, #8
 80191fe:	af00      	add	r7, sp, #0
 8019200:	6078      	str	r0, [r7, #4]
 8019202:	460b      	mov	r3, r1
 8019204:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8019206:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801920a:	2201      	movs	r2, #1
 801920c:	4619      	mov	r1, r3
 801920e:	6878      	ldr	r0, [r7, #4]
 8019210:	f7ff ffd2 	bl	80191b8 <pbuf_header_impl>
 8019214:	4603      	mov	r3, r0
}
 8019216:	4618      	mov	r0, r3
 8019218:	3708      	adds	r7, #8
 801921a:	46bd      	mov	sp, r7
 801921c:	bd80      	pop	{r7, pc}
	...

08019220 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8019220:	b580      	push	{r7, lr}
 8019222:	b088      	sub	sp, #32
 8019224:	af00      	add	r7, sp, #0
 8019226:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	2b00      	cmp	r3, #0
 801922c:	d10b      	bne.n	8019246 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	2b00      	cmp	r3, #0
 8019232:	d106      	bne.n	8019242 <pbuf_free+0x22>
 8019234:	4b3b      	ldr	r3, [pc, #236]	; (8019324 <pbuf_free+0x104>)
 8019236:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801923a:	493b      	ldr	r1, [pc, #236]	; (8019328 <pbuf_free+0x108>)
 801923c:	483b      	ldr	r0, [pc, #236]	; (801932c <pbuf_free+0x10c>)
 801923e:	f00a fec3 	bl	8023fc8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8019242:	2300      	movs	r3, #0
 8019244:	e069      	b.n	801931a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8019246:	2300      	movs	r3, #0
 8019248:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801924a:	e062      	b.n	8019312 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801924c:	f00a fb44 	bl	80238d8 <sys_arch_protect>
 8019250:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	7b9b      	ldrb	r3, [r3, #14]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d106      	bne.n	8019268 <pbuf_free+0x48>
 801925a:	4b32      	ldr	r3, [pc, #200]	; (8019324 <pbuf_free+0x104>)
 801925c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8019260:	4933      	ldr	r1, [pc, #204]	; (8019330 <pbuf_free+0x110>)
 8019262:	4832      	ldr	r0, [pc, #200]	; (801932c <pbuf_free+0x10c>)
 8019264:	f00a feb0 	bl	8023fc8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	7b9b      	ldrb	r3, [r3, #14]
 801926c:	3b01      	subs	r3, #1
 801926e:	b2da      	uxtb	r2, r3
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	739a      	strb	r2, [r3, #14]
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	7b9b      	ldrb	r3, [r3, #14]
 8019278:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801927a:	69b8      	ldr	r0, [r7, #24]
 801927c:	f00a fb3a 	bl	80238f4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8019280:	7dfb      	ldrb	r3, [r7, #23]
 8019282:	2b00      	cmp	r3, #0
 8019284:	d143      	bne.n	801930e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	7b1b      	ldrb	r3, [r3, #12]
 8019290:	f003 030f 	and.w	r3, r3, #15
 8019294:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	7b5b      	ldrb	r3, [r3, #13]
 801929a:	f003 0302 	and.w	r3, r3, #2
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d011      	beq.n	80192c6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80192a6:	68bb      	ldr	r3, [r7, #8]
 80192a8:	691b      	ldr	r3, [r3, #16]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d106      	bne.n	80192bc <pbuf_free+0x9c>
 80192ae:	4b1d      	ldr	r3, [pc, #116]	; (8019324 <pbuf_free+0x104>)
 80192b0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80192b4:	491f      	ldr	r1, [pc, #124]	; (8019334 <pbuf_free+0x114>)
 80192b6:	481d      	ldr	r0, [pc, #116]	; (801932c <pbuf_free+0x10c>)
 80192b8:	f00a fe86 	bl	8023fc8 <iprintf>
        pc->custom_free_function(p);
 80192bc:	68bb      	ldr	r3, [r7, #8]
 80192be:	691b      	ldr	r3, [r3, #16]
 80192c0:	6878      	ldr	r0, [r7, #4]
 80192c2:	4798      	blx	r3
 80192c4:	e01d      	b.n	8019302 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80192c6:	7bfb      	ldrb	r3, [r7, #15]
 80192c8:	2b02      	cmp	r3, #2
 80192ca:	d104      	bne.n	80192d6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80192cc:	6879      	ldr	r1, [r7, #4]
 80192ce:	200c      	movs	r0, #12
 80192d0:	f7ff f80c 	bl	80182ec <memp_free>
 80192d4:	e015      	b.n	8019302 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80192d6:	7bfb      	ldrb	r3, [r7, #15]
 80192d8:	2b01      	cmp	r3, #1
 80192da:	d104      	bne.n	80192e6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80192dc:	6879      	ldr	r1, [r7, #4]
 80192de:	200b      	movs	r0, #11
 80192e0:	f7ff f804 	bl	80182ec <memp_free>
 80192e4:	e00d      	b.n	8019302 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80192e6:	7bfb      	ldrb	r3, [r7, #15]
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d103      	bne.n	80192f4 <pbuf_free+0xd4>
          mem_free(p);
 80192ec:	6878      	ldr	r0, [r7, #4]
 80192ee:	f7fe fb53 	bl	8017998 <mem_free>
 80192f2:	e006      	b.n	8019302 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80192f4:	4b0b      	ldr	r3, [pc, #44]	; (8019324 <pbuf_free+0x104>)
 80192f6:	f240 320f 	movw	r2, #783	; 0x30f
 80192fa:	490f      	ldr	r1, [pc, #60]	; (8019338 <pbuf_free+0x118>)
 80192fc:	480b      	ldr	r0, [pc, #44]	; (801932c <pbuf_free+0x10c>)
 80192fe:	f00a fe63 	bl	8023fc8 <iprintf>
        }
      }
      count++;
 8019302:	7ffb      	ldrb	r3, [r7, #31]
 8019304:	3301      	adds	r3, #1
 8019306:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8019308:	693b      	ldr	r3, [r7, #16]
 801930a:	607b      	str	r3, [r7, #4]
 801930c:	e001      	b.n	8019312 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801930e:	2300      	movs	r3, #0
 8019310:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	2b00      	cmp	r3, #0
 8019316:	d199      	bne.n	801924c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8019318:	7ffb      	ldrb	r3, [r7, #31]
}
 801931a:	4618      	mov	r0, r3
 801931c:	3720      	adds	r7, #32
 801931e:	46bd      	mov	sp, r7
 8019320:	bd80      	pop	{r7, pc}
 8019322:	bf00      	nop
 8019324:	08026c48 	.word	0x08026c48
 8019328:	08026dac 	.word	0x08026dac
 801932c:	08026ca8 	.word	0x08026ca8
 8019330:	08026dd8 	.word	0x08026dd8
 8019334:	08026df0 	.word	0x08026df0
 8019338:	08026e14 	.word	0x08026e14

0801933c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801933c:	b480      	push	{r7}
 801933e:	b085      	sub	sp, #20
 8019340:	af00      	add	r7, sp, #0
 8019342:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8019344:	2300      	movs	r3, #0
 8019346:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8019348:	e005      	b.n	8019356 <pbuf_clen+0x1a>
    ++len;
 801934a:	89fb      	ldrh	r3, [r7, #14]
 801934c:	3301      	adds	r3, #1
 801934e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	2b00      	cmp	r3, #0
 801935a:	d1f6      	bne.n	801934a <pbuf_clen+0xe>
  }
  return len;
 801935c:	89fb      	ldrh	r3, [r7, #14]
}
 801935e:	4618      	mov	r0, r3
 8019360:	3714      	adds	r7, #20
 8019362:	46bd      	mov	sp, r7
 8019364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019368:	4770      	bx	lr
	...

0801936c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801936c:	b580      	push	{r7, lr}
 801936e:	b084      	sub	sp, #16
 8019370:	af00      	add	r7, sp, #0
 8019372:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	2b00      	cmp	r3, #0
 8019378:	d016      	beq.n	80193a8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801937a:	f00a faad 	bl	80238d8 <sys_arch_protect>
 801937e:	60f8      	str	r0, [r7, #12]
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	7b9b      	ldrb	r3, [r3, #14]
 8019384:	3301      	adds	r3, #1
 8019386:	b2da      	uxtb	r2, r3
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	739a      	strb	r2, [r3, #14]
 801938c:	68f8      	ldr	r0, [r7, #12]
 801938e:	f00a fab1 	bl	80238f4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	7b9b      	ldrb	r3, [r3, #14]
 8019396:	2b00      	cmp	r3, #0
 8019398:	d106      	bne.n	80193a8 <pbuf_ref+0x3c>
 801939a:	4b05      	ldr	r3, [pc, #20]	; (80193b0 <pbuf_ref+0x44>)
 801939c:	f240 3242 	movw	r2, #834	; 0x342
 80193a0:	4904      	ldr	r1, [pc, #16]	; (80193b4 <pbuf_ref+0x48>)
 80193a2:	4805      	ldr	r0, [pc, #20]	; (80193b8 <pbuf_ref+0x4c>)
 80193a4:	f00a fe10 	bl	8023fc8 <iprintf>
  }
}
 80193a8:	bf00      	nop
 80193aa:	3710      	adds	r7, #16
 80193ac:	46bd      	mov	sp, r7
 80193ae:	bd80      	pop	{r7, pc}
 80193b0:	08026c48 	.word	0x08026c48
 80193b4:	08026e28 	.word	0x08026e28
 80193b8:	08026ca8 	.word	0x08026ca8

080193bc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80193bc:	b580      	push	{r7, lr}
 80193be:	b084      	sub	sp, #16
 80193c0:	af00      	add	r7, sp, #0
 80193c2:	6078      	str	r0, [r7, #4]
 80193c4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d002      	beq.n	80193d2 <pbuf_cat+0x16>
 80193cc:	683b      	ldr	r3, [r7, #0]
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d107      	bne.n	80193e2 <pbuf_cat+0x26>
 80193d2:	4b20      	ldr	r3, [pc, #128]	; (8019454 <pbuf_cat+0x98>)
 80193d4:	f240 3259 	movw	r2, #857	; 0x359
 80193d8:	491f      	ldr	r1, [pc, #124]	; (8019458 <pbuf_cat+0x9c>)
 80193da:	4820      	ldr	r0, [pc, #128]	; (801945c <pbuf_cat+0xa0>)
 80193dc:	f00a fdf4 	bl	8023fc8 <iprintf>
 80193e0:	e034      	b.n	801944c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	60fb      	str	r3, [r7, #12]
 80193e6:	e00a      	b.n	80193fe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	891a      	ldrh	r2, [r3, #8]
 80193ec:	683b      	ldr	r3, [r7, #0]
 80193ee:	891b      	ldrh	r3, [r3, #8]
 80193f0:	4413      	add	r3, r2
 80193f2:	b29a      	uxth	r2, r3
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	60fb      	str	r3, [r7, #12]
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d1f0      	bne.n	80193e8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	891a      	ldrh	r2, [r3, #8]
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	895b      	ldrh	r3, [r3, #10]
 801940e:	429a      	cmp	r2, r3
 8019410:	d006      	beq.n	8019420 <pbuf_cat+0x64>
 8019412:	4b10      	ldr	r3, [pc, #64]	; (8019454 <pbuf_cat+0x98>)
 8019414:	f240 3262 	movw	r2, #866	; 0x362
 8019418:	4911      	ldr	r1, [pc, #68]	; (8019460 <pbuf_cat+0xa4>)
 801941a:	4810      	ldr	r0, [pc, #64]	; (801945c <pbuf_cat+0xa0>)
 801941c:	f00a fdd4 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d006      	beq.n	8019436 <pbuf_cat+0x7a>
 8019428:	4b0a      	ldr	r3, [pc, #40]	; (8019454 <pbuf_cat+0x98>)
 801942a:	f240 3263 	movw	r2, #867	; 0x363
 801942e:	490d      	ldr	r1, [pc, #52]	; (8019464 <pbuf_cat+0xa8>)
 8019430:	480a      	ldr	r0, [pc, #40]	; (801945c <pbuf_cat+0xa0>)
 8019432:	f00a fdc9 	bl	8023fc8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	891a      	ldrh	r2, [r3, #8]
 801943a:	683b      	ldr	r3, [r7, #0]
 801943c:	891b      	ldrh	r3, [r3, #8]
 801943e:	4413      	add	r3, r2
 8019440:	b29a      	uxth	r2, r3
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8019446:	68fb      	ldr	r3, [r7, #12]
 8019448:	683a      	ldr	r2, [r7, #0]
 801944a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801944c:	3710      	adds	r7, #16
 801944e:	46bd      	mov	sp, r7
 8019450:	bd80      	pop	{r7, pc}
 8019452:	bf00      	nop
 8019454:	08026c48 	.word	0x08026c48
 8019458:	08026e3c 	.word	0x08026e3c
 801945c:	08026ca8 	.word	0x08026ca8
 8019460:	08026e74 	.word	0x08026e74
 8019464:	08026ea4 	.word	0x08026ea4

08019468 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8019468:	b580      	push	{r7, lr}
 801946a:	b086      	sub	sp, #24
 801946c:	af00      	add	r7, sp, #0
 801946e:	6078      	str	r0, [r7, #4]
 8019470:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8019472:	2300      	movs	r3, #0
 8019474:	617b      	str	r3, [r7, #20]
 8019476:	2300      	movs	r3, #0
 8019478:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d008      	beq.n	8019492 <pbuf_copy+0x2a>
 8019480:	683b      	ldr	r3, [r7, #0]
 8019482:	2b00      	cmp	r3, #0
 8019484:	d005      	beq.n	8019492 <pbuf_copy+0x2a>
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	891a      	ldrh	r2, [r3, #8]
 801948a:	683b      	ldr	r3, [r7, #0]
 801948c:	891b      	ldrh	r3, [r3, #8]
 801948e:	429a      	cmp	r2, r3
 8019490:	d209      	bcs.n	80194a6 <pbuf_copy+0x3e>
 8019492:	4b57      	ldr	r3, [pc, #348]	; (80195f0 <pbuf_copy+0x188>)
 8019494:	f240 32c9 	movw	r2, #969	; 0x3c9
 8019498:	4956      	ldr	r1, [pc, #344]	; (80195f4 <pbuf_copy+0x18c>)
 801949a:	4857      	ldr	r0, [pc, #348]	; (80195f8 <pbuf_copy+0x190>)
 801949c:	f00a fd94 	bl	8023fc8 <iprintf>
 80194a0:	f06f 030f 	mvn.w	r3, #15
 80194a4:	e09f      	b.n	80195e6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	895b      	ldrh	r3, [r3, #10]
 80194aa:	461a      	mov	r2, r3
 80194ac:	697b      	ldr	r3, [r7, #20]
 80194ae:	1ad2      	subs	r2, r2, r3
 80194b0:	683b      	ldr	r3, [r7, #0]
 80194b2:	895b      	ldrh	r3, [r3, #10]
 80194b4:	4619      	mov	r1, r3
 80194b6:	693b      	ldr	r3, [r7, #16]
 80194b8:	1acb      	subs	r3, r1, r3
 80194ba:	429a      	cmp	r2, r3
 80194bc:	d306      	bcc.n	80194cc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80194be:	683b      	ldr	r3, [r7, #0]
 80194c0:	895b      	ldrh	r3, [r3, #10]
 80194c2:	461a      	mov	r2, r3
 80194c4:	693b      	ldr	r3, [r7, #16]
 80194c6:	1ad3      	subs	r3, r2, r3
 80194c8:	60fb      	str	r3, [r7, #12]
 80194ca:	e005      	b.n	80194d8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	895b      	ldrh	r3, [r3, #10]
 80194d0:	461a      	mov	r2, r3
 80194d2:	697b      	ldr	r3, [r7, #20]
 80194d4:	1ad3      	subs	r3, r2, r3
 80194d6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	685a      	ldr	r2, [r3, #4]
 80194dc:	697b      	ldr	r3, [r7, #20]
 80194de:	18d0      	adds	r0, r2, r3
 80194e0:	683b      	ldr	r3, [r7, #0]
 80194e2:	685a      	ldr	r2, [r3, #4]
 80194e4:	693b      	ldr	r3, [r7, #16]
 80194e6:	4413      	add	r3, r2
 80194e8:	68fa      	ldr	r2, [r7, #12]
 80194ea:	4619      	mov	r1, r3
 80194ec:	f00a ffd7 	bl	802449e <memcpy>
    offset_to += len;
 80194f0:	697a      	ldr	r2, [r7, #20]
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	4413      	add	r3, r2
 80194f6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80194f8:	693a      	ldr	r2, [r7, #16]
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	4413      	add	r3, r2
 80194fe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	895b      	ldrh	r3, [r3, #10]
 8019504:	461a      	mov	r2, r3
 8019506:	697b      	ldr	r3, [r7, #20]
 8019508:	4293      	cmp	r3, r2
 801950a:	d906      	bls.n	801951a <pbuf_copy+0xb2>
 801950c:	4b38      	ldr	r3, [pc, #224]	; (80195f0 <pbuf_copy+0x188>)
 801950e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8019512:	493a      	ldr	r1, [pc, #232]	; (80195fc <pbuf_copy+0x194>)
 8019514:	4838      	ldr	r0, [pc, #224]	; (80195f8 <pbuf_copy+0x190>)
 8019516:	f00a fd57 	bl	8023fc8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801951a:	683b      	ldr	r3, [r7, #0]
 801951c:	895b      	ldrh	r3, [r3, #10]
 801951e:	461a      	mov	r2, r3
 8019520:	693b      	ldr	r3, [r7, #16]
 8019522:	4293      	cmp	r3, r2
 8019524:	d906      	bls.n	8019534 <pbuf_copy+0xcc>
 8019526:	4b32      	ldr	r3, [pc, #200]	; (80195f0 <pbuf_copy+0x188>)
 8019528:	f240 32da 	movw	r2, #986	; 0x3da
 801952c:	4934      	ldr	r1, [pc, #208]	; (8019600 <pbuf_copy+0x198>)
 801952e:	4832      	ldr	r0, [pc, #200]	; (80195f8 <pbuf_copy+0x190>)
 8019530:	f00a fd4a 	bl	8023fc8 <iprintf>
    if (offset_from >= p_from->len) {
 8019534:	683b      	ldr	r3, [r7, #0]
 8019536:	895b      	ldrh	r3, [r3, #10]
 8019538:	461a      	mov	r2, r3
 801953a:	693b      	ldr	r3, [r7, #16]
 801953c:	4293      	cmp	r3, r2
 801953e:	d304      	bcc.n	801954a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8019540:	2300      	movs	r3, #0
 8019542:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8019544:	683b      	ldr	r3, [r7, #0]
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	895b      	ldrh	r3, [r3, #10]
 801954e:	461a      	mov	r2, r3
 8019550:	697b      	ldr	r3, [r7, #20]
 8019552:	4293      	cmp	r3, r2
 8019554:	d114      	bne.n	8019580 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8019556:	2300      	movs	r3, #0
 8019558:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d10c      	bne.n	8019580 <pbuf_copy+0x118>
 8019566:	683b      	ldr	r3, [r7, #0]
 8019568:	2b00      	cmp	r3, #0
 801956a:	d009      	beq.n	8019580 <pbuf_copy+0x118>
 801956c:	4b20      	ldr	r3, [pc, #128]	; (80195f0 <pbuf_copy+0x188>)
 801956e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8019572:	4924      	ldr	r1, [pc, #144]	; (8019604 <pbuf_copy+0x19c>)
 8019574:	4820      	ldr	r0, [pc, #128]	; (80195f8 <pbuf_copy+0x190>)
 8019576:	f00a fd27 	bl	8023fc8 <iprintf>
 801957a:	f06f 030f 	mvn.w	r3, #15
 801957e:	e032      	b.n	80195e6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8019580:	683b      	ldr	r3, [r7, #0]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d013      	beq.n	80195ae <pbuf_copy+0x146>
 8019586:	683b      	ldr	r3, [r7, #0]
 8019588:	895a      	ldrh	r2, [r3, #10]
 801958a:	683b      	ldr	r3, [r7, #0]
 801958c:	891b      	ldrh	r3, [r3, #8]
 801958e:	429a      	cmp	r2, r3
 8019590:	d10d      	bne.n	80195ae <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8019592:	683b      	ldr	r3, [r7, #0]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d009      	beq.n	80195ae <pbuf_copy+0x146>
 801959a:	4b15      	ldr	r3, [pc, #84]	; (80195f0 <pbuf_copy+0x188>)
 801959c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80195a0:	4919      	ldr	r1, [pc, #100]	; (8019608 <pbuf_copy+0x1a0>)
 80195a2:	4815      	ldr	r0, [pc, #84]	; (80195f8 <pbuf_copy+0x190>)
 80195a4:	f00a fd10 	bl	8023fc8 <iprintf>
 80195a8:	f06f 0305 	mvn.w	r3, #5
 80195ac:	e01b      	b.n	80195e6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d013      	beq.n	80195dc <pbuf_copy+0x174>
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	895a      	ldrh	r2, [r3, #10]
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	891b      	ldrh	r3, [r3, #8]
 80195bc:	429a      	cmp	r2, r3
 80195be:	d10d      	bne.n	80195dc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d009      	beq.n	80195dc <pbuf_copy+0x174>
 80195c8:	4b09      	ldr	r3, [pc, #36]	; (80195f0 <pbuf_copy+0x188>)
 80195ca:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80195ce:	490e      	ldr	r1, [pc, #56]	; (8019608 <pbuf_copy+0x1a0>)
 80195d0:	4809      	ldr	r0, [pc, #36]	; (80195f8 <pbuf_copy+0x190>)
 80195d2:	f00a fcf9 	bl	8023fc8 <iprintf>
 80195d6:	f06f 0305 	mvn.w	r3, #5
 80195da:	e004      	b.n	80195e6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80195dc:	683b      	ldr	r3, [r7, #0]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	f47f af61 	bne.w	80194a6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80195e4:	2300      	movs	r3, #0
}
 80195e6:	4618      	mov	r0, r3
 80195e8:	3718      	adds	r7, #24
 80195ea:	46bd      	mov	sp, r7
 80195ec:	bd80      	pop	{r7, pc}
 80195ee:	bf00      	nop
 80195f0:	08026c48 	.word	0x08026c48
 80195f4:	08026ef0 	.word	0x08026ef0
 80195f8:	08026ca8 	.word	0x08026ca8
 80195fc:	08026f20 	.word	0x08026f20
 8019600:	08026f38 	.word	0x08026f38
 8019604:	08026f54 	.word	0x08026f54
 8019608:	08026f64 	.word	0x08026f64

0801960c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801960c:	b580      	push	{r7, lr}
 801960e:	b088      	sub	sp, #32
 8019610:	af00      	add	r7, sp, #0
 8019612:	60f8      	str	r0, [r7, #12]
 8019614:	60b9      	str	r1, [r7, #8]
 8019616:	4611      	mov	r1, r2
 8019618:	461a      	mov	r2, r3
 801961a:	460b      	mov	r3, r1
 801961c:	80fb      	strh	r3, [r7, #6]
 801961e:	4613      	mov	r3, r2
 8019620:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8019622:	2300      	movs	r3, #0
 8019624:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8019626:	2300      	movs	r3, #0
 8019628:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	2b00      	cmp	r3, #0
 801962e:	d108      	bne.n	8019642 <pbuf_copy_partial+0x36>
 8019630:	4b2b      	ldr	r3, [pc, #172]	; (80196e0 <pbuf_copy_partial+0xd4>)
 8019632:	f240 420a 	movw	r2, #1034	; 0x40a
 8019636:	492b      	ldr	r1, [pc, #172]	; (80196e4 <pbuf_copy_partial+0xd8>)
 8019638:	482b      	ldr	r0, [pc, #172]	; (80196e8 <pbuf_copy_partial+0xdc>)
 801963a:	f00a fcc5 	bl	8023fc8 <iprintf>
 801963e:	2300      	movs	r3, #0
 8019640:	e04a      	b.n	80196d8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8019642:	68bb      	ldr	r3, [r7, #8]
 8019644:	2b00      	cmp	r3, #0
 8019646:	d108      	bne.n	801965a <pbuf_copy_partial+0x4e>
 8019648:	4b25      	ldr	r3, [pc, #148]	; (80196e0 <pbuf_copy_partial+0xd4>)
 801964a:	f240 420b 	movw	r2, #1035	; 0x40b
 801964e:	4927      	ldr	r1, [pc, #156]	; (80196ec <pbuf_copy_partial+0xe0>)
 8019650:	4825      	ldr	r0, [pc, #148]	; (80196e8 <pbuf_copy_partial+0xdc>)
 8019652:	f00a fcb9 	bl	8023fc8 <iprintf>
 8019656:	2300      	movs	r3, #0
 8019658:	e03e      	b.n	80196d8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	61fb      	str	r3, [r7, #28]
 801965e:	e034      	b.n	80196ca <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8019660:	88bb      	ldrh	r3, [r7, #4]
 8019662:	2b00      	cmp	r3, #0
 8019664:	d00a      	beq.n	801967c <pbuf_copy_partial+0x70>
 8019666:	69fb      	ldr	r3, [r7, #28]
 8019668:	895b      	ldrh	r3, [r3, #10]
 801966a:	88ba      	ldrh	r2, [r7, #4]
 801966c:	429a      	cmp	r2, r3
 801966e:	d305      	bcc.n	801967c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8019670:	69fb      	ldr	r3, [r7, #28]
 8019672:	895b      	ldrh	r3, [r3, #10]
 8019674:	88ba      	ldrh	r2, [r7, #4]
 8019676:	1ad3      	subs	r3, r2, r3
 8019678:	80bb      	strh	r3, [r7, #4]
 801967a:	e023      	b.n	80196c4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801967c:	69fb      	ldr	r3, [r7, #28]
 801967e:	895a      	ldrh	r2, [r3, #10]
 8019680:	88bb      	ldrh	r3, [r7, #4]
 8019682:	1ad3      	subs	r3, r2, r3
 8019684:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8019686:	8b3a      	ldrh	r2, [r7, #24]
 8019688:	88fb      	ldrh	r3, [r7, #6]
 801968a:	429a      	cmp	r2, r3
 801968c:	d901      	bls.n	8019692 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801968e:	88fb      	ldrh	r3, [r7, #6]
 8019690:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8019692:	8b7b      	ldrh	r3, [r7, #26]
 8019694:	68ba      	ldr	r2, [r7, #8]
 8019696:	18d0      	adds	r0, r2, r3
 8019698:	69fb      	ldr	r3, [r7, #28]
 801969a:	685a      	ldr	r2, [r3, #4]
 801969c:	88bb      	ldrh	r3, [r7, #4]
 801969e:	4413      	add	r3, r2
 80196a0:	8b3a      	ldrh	r2, [r7, #24]
 80196a2:	4619      	mov	r1, r3
 80196a4:	f00a fefb 	bl	802449e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80196a8:	8afa      	ldrh	r2, [r7, #22]
 80196aa:	8b3b      	ldrh	r3, [r7, #24]
 80196ac:	4413      	add	r3, r2
 80196ae:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80196b0:	8b7a      	ldrh	r2, [r7, #26]
 80196b2:	8b3b      	ldrh	r3, [r7, #24]
 80196b4:	4413      	add	r3, r2
 80196b6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80196b8:	88fa      	ldrh	r2, [r7, #6]
 80196ba:	8b3b      	ldrh	r3, [r7, #24]
 80196bc:	1ad3      	subs	r3, r2, r3
 80196be:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80196c0:	2300      	movs	r3, #0
 80196c2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80196c4:	69fb      	ldr	r3, [r7, #28]
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	61fb      	str	r3, [r7, #28]
 80196ca:	88fb      	ldrh	r3, [r7, #6]
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d002      	beq.n	80196d6 <pbuf_copy_partial+0xca>
 80196d0:	69fb      	ldr	r3, [r7, #28]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d1c4      	bne.n	8019660 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80196d6:	8afb      	ldrh	r3, [r7, #22]
}
 80196d8:	4618      	mov	r0, r3
 80196da:	3720      	adds	r7, #32
 80196dc:	46bd      	mov	sp, r7
 80196de:	bd80      	pop	{r7, pc}
 80196e0:	08026c48 	.word	0x08026c48
 80196e4:	08026f90 	.word	0x08026f90
 80196e8:	08026ca8 	.word	0x08026ca8
 80196ec:	08026fb0 	.word	0x08026fb0

080196f0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80196f0:	b580      	push	{r7, lr}
 80196f2:	b084      	sub	sp, #16
 80196f4:	af00      	add	r7, sp, #0
 80196f6:	4603      	mov	r3, r0
 80196f8:	603a      	str	r2, [r7, #0]
 80196fa:	71fb      	strb	r3, [r7, #7]
 80196fc:	460b      	mov	r3, r1
 80196fe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8019700:	683b      	ldr	r3, [r7, #0]
 8019702:	8919      	ldrh	r1, [r3, #8]
 8019704:	88ba      	ldrh	r2, [r7, #4]
 8019706:	79fb      	ldrb	r3, [r7, #7]
 8019708:	4618      	mov	r0, r3
 801970a:	f7ff faa5 	bl	8018c58 <pbuf_alloc>
 801970e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8019710:	68fb      	ldr	r3, [r7, #12]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d101      	bne.n	801971a <pbuf_clone+0x2a>
    return NULL;
 8019716:	2300      	movs	r3, #0
 8019718:	e011      	b.n	801973e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801971a:	6839      	ldr	r1, [r7, #0]
 801971c:	68f8      	ldr	r0, [r7, #12]
 801971e:	f7ff fea3 	bl	8019468 <pbuf_copy>
 8019722:	4603      	mov	r3, r0
 8019724:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8019726:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801972a:	2b00      	cmp	r3, #0
 801972c:	d006      	beq.n	801973c <pbuf_clone+0x4c>
 801972e:	4b06      	ldr	r3, [pc, #24]	; (8019748 <pbuf_clone+0x58>)
 8019730:	f240 5224 	movw	r2, #1316	; 0x524
 8019734:	4905      	ldr	r1, [pc, #20]	; (801974c <pbuf_clone+0x5c>)
 8019736:	4806      	ldr	r0, [pc, #24]	; (8019750 <pbuf_clone+0x60>)
 8019738:	f00a fc46 	bl	8023fc8 <iprintf>
  return q;
 801973c:	68fb      	ldr	r3, [r7, #12]
}
 801973e:	4618      	mov	r0, r3
 8019740:	3710      	adds	r7, #16
 8019742:	46bd      	mov	sp, r7
 8019744:	bd80      	pop	{r7, pc}
 8019746:	bf00      	nop
 8019748:	08026c48 	.word	0x08026c48
 801974c:	080270bc 	.word	0x080270bc
 8019750:	08026ca8 	.word	0x08026ca8

08019754 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8019754:	b480      	push	{r7}
 8019756:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
 8019758:	4b04      	ldr	r3, [pc, #16]	; (801976c <stats_init+0x18>)
 801975a:	4a05      	ldr	r2, [pc, #20]	; (8019770 <stats_init+0x1c>)
 801975c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8019760:	bf00      	nop
 8019762:	46bd      	mov	sp, r7
 8019764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019768:	4770      	bx	lr
 801976a:	bf00      	nop
 801976c:	2007ecb8 	.word	0x2007ecb8
 8019770:	080270d0 	.word	0x080270d0

08019774 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8019774:	b580      	push	{r7, lr}
 8019776:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019778:	f00a fb26 	bl	8023dc8 <rand>
 801977c:	4603      	mov	r3, r0
 801977e:	b29b      	uxth	r3, r3
 8019780:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019784:	b29b      	uxth	r3, r3
 8019786:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801978a:	b29a      	uxth	r2, r3
 801978c:	4b01      	ldr	r3, [pc, #4]	; (8019794 <tcp_init+0x20>)
 801978e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019790:	bf00      	nop
 8019792:	bd80      	pop	{r7, pc}
 8019794:	200500c4 	.word	0x200500c4

08019798 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8019798:	b580      	push	{r7, lr}
 801979a:	b082      	sub	sp, #8
 801979c:	af00      	add	r7, sp, #0
 801979e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	7d1b      	ldrb	r3, [r3, #20]
 80197a4:	2b01      	cmp	r3, #1
 80197a6:	d105      	bne.n	80197b4 <tcp_free+0x1c>
 80197a8:	4b06      	ldr	r3, [pc, #24]	; (80197c4 <tcp_free+0x2c>)
 80197aa:	22d4      	movs	r2, #212	; 0xd4
 80197ac:	4906      	ldr	r1, [pc, #24]	; (80197c8 <tcp_free+0x30>)
 80197ae:	4807      	ldr	r0, [pc, #28]	; (80197cc <tcp_free+0x34>)
 80197b0:	f00a fc0a 	bl	8023fc8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80197b4:	6879      	ldr	r1, [r7, #4]
 80197b6:	2001      	movs	r0, #1
 80197b8:	f7fe fd98 	bl	80182ec <memp_free>
}
 80197bc:	bf00      	nop
 80197be:	3708      	adds	r7, #8
 80197c0:	46bd      	mov	sp, r7
 80197c2:	bd80      	pop	{r7, pc}
 80197c4:	0802714c 	.word	0x0802714c
 80197c8:	0802717c 	.word	0x0802717c
 80197cc:	08027190 	.word	0x08027190

080197d0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80197d0:	b580      	push	{r7, lr}
 80197d2:	b082      	sub	sp, #8
 80197d4:	af00      	add	r7, sp, #0
 80197d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	7d1b      	ldrb	r3, [r3, #20]
 80197dc:	2b01      	cmp	r3, #1
 80197de:	d105      	bne.n	80197ec <tcp_free_listen+0x1c>
 80197e0:	4b06      	ldr	r3, [pc, #24]	; (80197fc <tcp_free_listen+0x2c>)
 80197e2:	22df      	movs	r2, #223	; 0xdf
 80197e4:	4906      	ldr	r1, [pc, #24]	; (8019800 <tcp_free_listen+0x30>)
 80197e6:	4807      	ldr	r0, [pc, #28]	; (8019804 <tcp_free_listen+0x34>)
 80197e8:	f00a fbee 	bl	8023fc8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80197ec:	6879      	ldr	r1, [r7, #4]
 80197ee:	2002      	movs	r0, #2
 80197f0:	f7fe fd7c 	bl	80182ec <memp_free>
}
 80197f4:	bf00      	nop
 80197f6:	3708      	adds	r7, #8
 80197f8:	46bd      	mov	sp, r7
 80197fa:	bd80      	pop	{r7, pc}
 80197fc:	0802714c 	.word	0x0802714c
 8019800:	080271b8 	.word	0x080271b8
 8019804:	08027190 	.word	0x08027190

08019808 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8019808:	b580      	push	{r7, lr}
 801980a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801980c:	f001 f9be 	bl	801ab8c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8019810:	4b07      	ldr	r3, [pc, #28]	; (8019830 <tcp_tmr+0x28>)
 8019812:	781b      	ldrb	r3, [r3, #0]
 8019814:	3301      	adds	r3, #1
 8019816:	b2da      	uxtb	r2, r3
 8019818:	4b05      	ldr	r3, [pc, #20]	; (8019830 <tcp_tmr+0x28>)
 801981a:	701a      	strb	r2, [r3, #0]
 801981c:	4b04      	ldr	r3, [pc, #16]	; (8019830 <tcp_tmr+0x28>)
 801981e:	781b      	ldrb	r3, [r3, #0]
 8019820:	f003 0301 	and.w	r3, r3, #1
 8019824:	2b00      	cmp	r3, #0
 8019826:	d001      	beq.n	801982c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8019828:	f000 fe70 	bl	801a50c <tcp_slowtmr>
  }
}
 801982c:	bf00      	nop
 801982e:	bd80      	pop	{r7, pc}
 8019830:	2007edcd 	.word	0x2007edcd

08019834 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8019834:	b580      	push	{r7, lr}
 8019836:	b084      	sub	sp, #16
 8019838:	af00      	add	r7, sp, #0
 801983a:	6078      	str	r0, [r7, #4]
 801983c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801983e:	683b      	ldr	r3, [r7, #0]
 8019840:	2b00      	cmp	r3, #0
 8019842:	d105      	bne.n	8019850 <tcp_remove_listener+0x1c>
 8019844:	4b0d      	ldr	r3, [pc, #52]	; (801987c <tcp_remove_listener+0x48>)
 8019846:	22ff      	movs	r2, #255	; 0xff
 8019848:	490d      	ldr	r1, [pc, #52]	; (8019880 <tcp_remove_listener+0x4c>)
 801984a:	480e      	ldr	r0, [pc, #56]	; (8019884 <tcp_remove_listener+0x50>)
 801984c:	f00a fbbc 	bl	8023fc8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	60fb      	str	r3, [r7, #12]
 8019854:	e00a      	b.n	801986c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801985a:	683a      	ldr	r2, [r7, #0]
 801985c:	429a      	cmp	r2, r3
 801985e:	d102      	bne.n	8019866 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8019860:	68fb      	ldr	r3, [r7, #12]
 8019862:	2200      	movs	r2, #0
 8019864:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	68db      	ldr	r3, [r3, #12]
 801986a:	60fb      	str	r3, [r7, #12]
 801986c:	68fb      	ldr	r3, [r7, #12]
 801986e:	2b00      	cmp	r3, #0
 8019870:	d1f1      	bne.n	8019856 <tcp_remove_listener+0x22>
    }
  }
}
 8019872:	bf00      	nop
 8019874:	bf00      	nop
 8019876:	3710      	adds	r7, #16
 8019878:	46bd      	mov	sp, r7
 801987a:	bd80      	pop	{r7, pc}
 801987c:	0802714c 	.word	0x0802714c
 8019880:	080271d4 	.word	0x080271d4
 8019884:	08027190 	.word	0x08027190

08019888 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8019888:	b580      	push	{r7, lr}
 801988a:	b084      	sub	sp, #16
 801988c:	af00      	add	r7, sp, #0
 801988e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	2b00      	cmp	r3, #0
 8019894:	d106      	bne.n	80198a4 <tcp_listen_closed+0x1c>
 8019896:	4b14      	ldr	r3, [pc, #80]	; (80198e8 <tcp_listen_closed+0x60>)
 8019898:	f240 1211 	movw	r2, #273	; 0x111
 801989c:	4913      	ldr	r1, [pc, #76]	; (80198ec <tcp_listen_closed+0x64>)
 801989e:	4814      	ldr	r0, [pc, #80]	; (80198f0 <tcp_listen_closed+0x68>)
 80198a0:	f00a fb92 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	7d1b      	ldrb	r3, [r3, #20]
 80198a8:	2b01      	cmp	r3, #1
 80198aa:	d006      	beq.n	80198ba <tcp_listen_closed+0x32>
 80198ac:	4b0e      	ldr	r3, [pc, #56]	; (80198e8 <tcp_listen_closed+0x60>)
 80198ae:	f44f 7289 	mov.w	r2, #274	; 0x112
 80198b2:	4910      	ldr	r1, [pc, #64]	; (80198f4 <tcp_listen_closed+0x6c>)
 80198b4:	480e      	ldr	r0, [pc, #56]	; (80198f0 <tcp_listen_closed+0x68>)
 80198b6:	f00a fb87 	bl	8023fc8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80198ba:	2301      	movs	r3, #1
 80198bc:	60fb      	str	r3, [r7, #12]
 80198be:	e00b      	b.n	80198d8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80198c0:	4a0d      	ldr	r2, [pc, #52]	; (80198f8 <tcp_listen_closed+0x70>)
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	6879      	ldr	r1, [r7, #4]
 80198cc:	4618      	mov	r0, r3
 80198ce:	f7ff ffb1 	bl	8019834 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	3301      	adds	r3, #1
 80198d6:	60fb      	str	r3, [r7, #12]
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	2b03      	cmp	r3, #3
 80198dc:	d9f0      	bls.n	80198c0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80198de:	bf00      	nop
 80198e0:	bf00      	nop
 80198e2:	3710      	adds	r7, #16
 80198e4:	46bd      	mov	sp, r7
 80198e6:	bd80      	pop	{r7, pc}
 80198e8:	0802714c 	.word	0x0802714c
 80198ec:	080271fc 	.word	0x080271fc
 80198f0:	08027190 	.word	0x08027190
 80198f4:	08027208 	.word	0x08027208
 80198f8:	08029b0c 	.word	0x08029b0c

080198fc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80198fc:	b5b0      	push	{r4, r5, r7, lr}
 80198fe:	b088      	sub	sp, #32
 8019900:	af04      	add	r7, sp, #16
 8019902:	6078      	str	r0, [r7, #4]
 8019904:	460b      	mov	r3, r1
 8019906:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	2b00      	cmp	r3, #0
 801990c:	d106      	bne.n	801991c <tcp_close_shutdown+0x20>
 801990e:	4b63      	ldr	r3, [pc, #396]	; (8019a9c <tcp_close_shutdown+0x1a0>)
 8019910:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8019914:	4962      	ldr	r1, [pc, #392]	; (8019aa0 <tcp_close_shutdown+0x1a4>)
 8019916:	4863      	ldr	r0, [pc, #396]	; (8019aa4 <tcp_close_shutdown+0x1a8>)
 8019918:	f00a fb56 	bl	8023fc8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801991c:	78fb      	ldrb	r3, [r7, #3]
 801991e:	2b00      	cmp	r3, #0
 8019920:	d066      	beq.n	80199f0 <tcp_close_shutdown+0xf4>
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	7d1b      	ldrb	r3, [r3, #20]
 8019926:	2b04      	cmp	r3, #4
 8019928:	d003      	beq.n	8019932 <tcp_close_shutdown+0x36>
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	7d1b      	ldrb	r3, [r3, #20]
 801992e:	2b07      	cmp	r3, #7
 8019930:	d15e      	bne.n	80199f0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019936:	2b00      	cmp	r3, #0
 8019938:	d104      	bne.n	8019944 <tcp_close_shutdown+0x48>
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801993e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019942:	d055      	beq.n	80199f0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	8b5b      	ldrh	r3, [r3, #26]
 8019948:	f003 0310 	and.w	r3, r3, #16
 801994c:	2b00      	cmp	r3, #0
 801994e:	d106      	bne.n	801995e <tcp_close_shutdown+0x62>
 8019950:	4b52      	ldr	r3, [pc, #328]	; (8019a9c <tcp_close_shutdown+0x1a0>)
 8019952:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8019956:	4954      	ldr	r1, [pc, #336]	; (8019aa8 <tcp_close_shutdown+0x1ac>)
 8019958:	4852      	ldr	r0, [pc, #328]	; (8019aa4 <tcp_close_shutdown+0x1a8>)
 801995a:	f00a fb35 	bl	8023fc8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019966:	687d      	ldr	r5, [r7, #4]
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	3304      	adds	r3, #4
 801996c:	687a      	ldr	r2, [r7, #4]
 801996e:	8ad2      	ldrh	r2, [r2, #22]
 8019970:	6879      	ldr	r1, [r7, #4]
 8019972:	8b09      	ldrh	r1, [r1, #24]
 8019974:	9102      	str	r1, [sp, #8]
 8019976:	9201      	str	r2, [sp, #4]
 8019978:	9300      	str	r3, [sp, #0]
 801997a:	462b      	mov	r3, r5
 801997c:	4622      	mov	r2, r4
 801997e:	4601      	mov	r1, r0
 8019980:	6878      	ldr	r0, [r7, #4]
 8019982:	f006 f823 	bl	801f9cc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8019986:	6878      	ldr	r0, [r7, #4]
 8019988:	f001 fcda 	bl	801b340 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801998c:	4b47      	ldr	r3, [pc, #284]	; (8019aac <tcp_close_shutdown+0x1b0>)
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	687a      	ldr	r2, [r7, #4]
 8019992:	429a      	cmp	r2, r3
 8019994:	d105      	bne.n	80199a2 <tcp_close_shutdown+0xa6>
 8019996:	4b45      	ldr	r3, [pc, #276]	; (8019aac <tcp_close_shutdown+0x1b0>)
 8019998:	681b      	ldr	r3, [r3, #0]
 801999a:	68db      	ldr	r3, [r3, #12]
 801999c:	4a43      	ldr	r2, [pc, #268]	; (8019aac <tcp_close_shutdown+0x1b0>)
 801999e:	6013      	str	r3, [r2, #0]
 80199a0:	e013      	b.n	80199ca <tcp_close_shutdown+0xce>
 80199a2:	4b42      	ldr	r3, [pc, #264]	; (8019aac <tcp_close_shutdown+0x1b0>)
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	60fb      	str	r3, [r7, #12]
 80199a8:	e00c      	b.n	80199c4 <tcp_close_shutdown+0xc8>
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	68db      	ldr	r3, [r3, #12]
 80199ae:	687a      	ldr	r2, [r7, #4]
 80199b0:	429a      	cmp	r2, r3
 80199b2:	d104      	bne.n	80199be <tcp_close_shutdown+0xc2>
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	68da      	ldr	r2, [r3, #12]
 80199b8:	68fb      	ldr	r3, [r7, #12]
 80199ba:	60da      	str	r2, [r3, #12]
 80199bc:	e005      	b.n	80199ca <tcp_close_shutdown+0xce>
 80199be:	68fb      	ldr	r3, [r7, #12]
 80199c0:	68db      	ldr	r3, [r3, #12]
 80199c2:	60fb      	str	r3, [r7, #12]
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d1ef      	bne.n	80199aa <tcp_close_shutdown+0xae>
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	2200      	movs	r2, #0
 80199ce:	60da      	str	r2, [r3, #12]
 80199d0:	4b37      	ldr	r3, [pc, #220]	; (8019ab0 <tcp_close_shutdown+0x1b4>)
 80199d2:	2201      	movs	r2, #1
 80199d4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80199d6:	4b37      	ldr	r3, [pc, #220]	; (8019ab4 <tcp_close_shutdown+0x1b8>)
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	687a      	ldr	r2, [r7, #4]
 80199dc:	429a      	cmp	r2, r3
 80199de:	d102      	bne.n	80199e6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80199e0:	f004 f9de 	bl	801dda0 <tcp_trigger_input_pcb_close>
 80199e4:	e002      	b.n	80199ec <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80199e6:	6878      	ldr	r0, [r7, #4]
 80199e8:	f7ff fed6 	bl	8019798 <tcp_free>
      }
      return ERR_OK;
 80199ec:	2300      	movs	r3, #0
 80199ee:	e050      	b.n	8019a92 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	7d1b      	ldrb	r3, [r3, #20]
 80199f4:	2b02      	cmp	r3, #2
 80199f6:	d03b      	beq.n	8019a70 <tcp_close_shutdown+0x174>
 80199f8:	2b02      	cmp	r3, #2
 80199fa:	dc44      	bgt.n	8019a86 <tcp_close_shutdown+0x18a>
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d002      	beq.n	8019a06 <tcp_close_shutdown+0x10a>
 8019a00:	2b01      	cmp	r3, #1
 8019a02:	d02a      	beq.n	8019a5a <tcp_close_shutdown+0x15e>
 8019a04:	e03f      	b.n	8019a86 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	8adb      	ldrh	r3, [r3, #22]
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d021      	beq.n	8019a52 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019a0e:	4b2a      	ldr	r3, [pc, #168]	; (8019ab8 <tcp_close_shutdown+0x1bc>)
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	687a      	ldr	r2, [r7, #4]
 8019a14:	429a      	cmp	r2, r3
 8019a16:	d105      	bne.n	8019a24 <tcp_close_shutdown+0x128>
 8019a18:	4b27      	ldr	r3, [pc, #156]	; (8019ab8 <tcp_close_shutdown+0x1bc>)
 8019a1a:	681b      	ldr	r3, [r3, #0]
 8019a1c:	68db      	ldr	r3, [r3, #12]
 8019a1e:	4a26      	ldr	r2, [pc, #152]	; (8019ab8 <tcp_close_shutdown+0x1bc>)
 8019a20:	6013      	str	r3, [r2, #0]
 8019a22:	e013      	b.n	8019a4c <tcp_close_shutdown+0x150>
 8019a24:	4b24      	ldr	r3, [pc, #144]	; (8019ab8 <tcp_close_shutdown+0x1bc>)
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	60bb      	str	r3, [r7, #8]
 8019a2a:	e00c      	b.n	8019a46 <tcp_close_shutdown+0x14a>
 8019a2c:	68bb      	ldr	r3, [r7, #8]
 8019a2e:	68db      	ldr	r3, [r3, #12]
 8019a30:	687a      	ldr	r2, [r7, #4]
 8019a32:	429a      	cmp	r2, r3
 8019a34:	d104      	bne.n	8019a40 <tcp_close_shutdown+0x144>
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	68da      	ldr	r2, [r3, #12]
 8019a3a:	68bb      	ldr	r3, [r7, #8]
 8019a3c:	60da      	str	r2, [r3, #12]
 8019a3e:	e005      	b.n	8019a4c <tcp_close_shutdown+0x150>
 8019a40:	68bb      	ldr	r3, [r7, #8]
 8019a42:	68db      	ldr	r3, [r3, #12]
 8019a44:	60bb      	str	r3, [r7, #8]
 8019a46:	68bb      	ldr	r3, [r7, #8]
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d1ef      	bne.n	8019a2c <tcp_close_shutdown+0x130>
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	2200      	movs	r2, #0
 8019a50:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8019a52:	6878      	ldr	r0, [r7, #4]
 8019a54:	f7ff fea0 	bl	8019798 <tcp_free>
      break;
 8019a58:	e01a      	b.n	8019a90 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8019a5a:	6878      	ldr	r0, [r7, #4]
 8019a5c:	f7ff ff14 	bl	8019888 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8019a60:	6879      	ldr	r1, [r7, #4]
 8019a62:	4816      	ldr	r0, [pc, #88]	; (8019abc <tcp_close_shutdown+0x1c0>)
 8019a64:	f001 fcbc 	bl	801b3e0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8019a68:	6878      	ldr	r0, [r7, #4]
 8019a6a:	f7ff feb1 	bl	80197d0 <tcp_free_listen>
      break;
 8019a6e:	e00f      	b.n	8019a90 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019a70:	6879      	ldr	r1, [r7, #4]
 8019a72:	480e      	ldr	r0, [pc, #56]	; (8019aac <tcp_close_shutdown+0x1b0>)
 8019a74:	f001 fcb4 	bl	801b3e0 <tcp_pcb_remove>
 8019a78:	4b0d      	ldr	r3, [pc, #52]	; (8019ab0 <tcp_close_shutdown+0x1b4>)
 8019a7a:	2201      	movs	r2, #1
 8019a7c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8019a7e:	6878      	ldr	r0, [r7, #4]
 8019a80:	f7ff fe8a 	bl	8019798 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8019a84:	e004      	b.n	8019a90 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8019a86:	6878      	ldr	r0, [r7, #4]
 8019a88:	f000 f81a 	bl	8019ac0 <tcp_close_shutdown_fin>
 8019a8c:	4603      	mov	r3, r0
 8019a8e:	e000      	b.n	8019a92 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8019a90:	2300      	movs	r3, #0
}
 8019a92:	4618      	mov	r0, r3
 8019a94:	3710      	adds	r7, #16
 8019a96:	46bd      	mov	sp, r7
 8019a98:	bdb0      	pop	{r4, r5, r7, pc}
 8019a9a:	bf00      	nop
 8019a9c:	0802714c 	.word	0x0802714c
 8019aa0:	08027220 	.word	0x08027220
 8019aa4:	08027190 	.word	0x08027190
 8019aa8:	08027240 	.word	0x08027240
 8019aac:	2007edc4 	.word	0x2007edc4
 8019ab0:	2007edcc 	.word	0x2007edcc
 8019ab4:	2007ee08 	.word	0x2007ee08
 8019ab8:	2007edbc 	.word	0x2007edbc
 8019abc:	2007edc0 	.word	0x2007edc0

08019ac0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8019ac0:	b580      	push	{r7, lr}
 8019ac2:	b084      	sub	sp, #16
 8019ac4:	af00      	add	r7, sp, #0
 8019ac6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d106      	bne.n	8019adc <tcp_close_shutdown_fin+0x1c>
 8019ace:	4b2e      	ldr	r3, [pc, #184]	; (8019b88 <tcp_close_shutdown_fin+0xc8>)
 8019ad0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8019ad4:	492d      	ldr	r1, [pc, #180]	; (8019b8c <tcp_close_shutdown_fin+0xcc>)
 8019ad6:	482e      	ldr	r0, [pc, #184]	; (8019b90 <tcp_close_shutdown_fin+0xd0>)
 8019ad8:	f00a fa76 	bl	8023fc8 <iprintf>

  switch (pcb->state) {
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	7d1b      	ldrb	r3, [r3, #20]
 8019ae0:	2b07      	cmp	r3, #7
 8019ae2:	d020      	beq.n	8019b26 <tcp_close_shutdown_fin+0x66>
 8019ae4:	2b07      	cmp	r3, #7
 8019ae6:	dc2b      	bgt.n	8019b40 <tcp_close_shutdown_fin+0x80>
 8019ae8:	2b03      	cmp	r3, #3
 8019aea:	d002      	beq.n	8019af2 <tcp_close_shutdown_fin+0x32>
 8019aec:	2b04      	cmp	r3, #4
 8019aee:	d00d      	beq.n	8019b0c <tcp_close_shutdown_fin+0x4c>
 8019af0:	e026      	b.n	8019b40 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8019af2:	6878      	ldr	r0, [r7, #4]
 8019af4:	f005 f846 	bl	801eb84 <tcp_send_fin>
 8019af8:	4603      	mov	r3, r0
 8019afa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d11f      	bne.n	8019b44 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	2205      	movs	r2, #5
 8019b08:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019b0a:	e01b      	b.n	8019b44 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8019b0c:	6878      	ldr	r0, [r7, #4]
 8019b0e:	f005 f839 	bl	801eb84 <tcp_send_fin>
 8019b12:	4603      	mov	r3, r0
 8019b14:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d114      	bne.n	8019b48 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	2205      	movs	r2, #5
 8019b22:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019b24:	e010      	b.n	8019b48 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8019b26:	6878      	ldr	r0, [r7, #4]
 8019b28:	f005 f82c 	bl	801eb84 <tcp_send_fin>
 8019b2c:	4603      	mov	r3, r0
 8019b2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d109      	bne.n	8019b4c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	2209      	movs	r2, #9
 8019b3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019b3e:	e005      	b.n	8019b4c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8019b40:	2300      	movs	r3, #0
 8019b42:	e01c      	b.n	8019b7e <tcp_close_shutdown_fin+0xbe>
      break;
 8019b44:	bf00      	nop
 8019b46:	e002      	b.n	8019b4e <tcp_close_shutdown_fin+0x8e>
      break;
 8019b48:	bf00      	nop
 8019b4a:	e000      	b.n	8019b4e <tcp_close_shutdown_fin+0x8e>
      break;
 8019b4c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8019b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d103      	bne.n	8019b5e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8019b56:	6878      	ldr	r0, [r7, #4]
 8019b58:	f005 f964 	bl	801ee24 <tcp_output>
 8019b5c:	e00d      	b.n	8019b7a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8019b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b66:	d108      	bne.n	8019b7a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	8b5b      	ldrh	r3, [r3, #26]
 8019b6c:	f043 0308 	orr.w	r3, r3, #8
 8019b70:	b29a      	uxth	r2, r3
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8019b76:	2300      	movs	r3, #0
 8019b78:	e001      	b.n	8019b7e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8019b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019b7e:	4618      	mov	r0, r3
 8019b80:	3710      	adds	r7, #16
 8019b82:	46bd      	mov	sp, r7
 8019b84:	bd80      	pop	{r7, pc}
 8019b86:	bf00      	nop
 8019b88:	0802714c 	.word	0x0802714c
 8019b8c:	080271fc 	.word	0x080271fc
 8019b90:	08027190 	.word	0x08027190

08019b94 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8019b94:	b580      	push	{r7, lr}
 8019b96:	b082      	sub	sp, #8
 8019b98:	af00      	add	r7, sp, #0
 8019b9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d109      	bne.n	8019bb6 <tcp_close+0x22>
 8019ba2:	4b0f      	ldr	r3, [pc, #60]	; (8019be0 <tcp_close+0x4c>)
 8019ba4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8019ba8:	490e      	ldr	r1, [pc, #56]	; (8019be4 <tcp_close+0x50>)
 8019baa:	480f      	ldr	r0, [pc, #60]	; (8019be8 <tcp_close+0x54>)
 8019bac:	f00a fa0c 	bl	8023fc8 <iprintf>
 8019bb0:	f06f 030f 	mvn.w	r3, #15
 8019bb4:	e00f      	b.n	8019bd6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	7d1b      	ldrb	r3, [r3, #20]
 8019bba:	2b01      	cmp	r3, #1
 8019bbc:	d006      	beq.n	8019bcc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	8b5b      	ldrh	r3, [r3, #26]
 8019bc2:	f043 0310 	orr.w	r3, r3, #16
 8019bc6:	b29a      	uxth	r2, r3
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8019bcc:	2101      	movs	r1, #1
 8019bce:	6878      	ldr	r0, [r7, #4]
 8019bd0:	f7ff fe94 	bl	80198fc <tcp_close_shutdown>
 8019bd4:	4603      	mov	r3, r0
}
 8019bd6:	4618      	mov	r0, r3
 8019bd8:	3708      	adds	r7, #8
 8019bda:	46bd      	mov	sp, r7
 8019bdc:	bd80      	pop	{r7, pc}
 8019bde:	bf00      	nop
 8019be0:	0802714c 	.word	0x0802714c
 8019be4:	0802725c 	.word	0x0802725c
 8019be8:	08027190 	.word	0x08027190

08019bec <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8019bec:	b580      	push	{r7, lr}
 8019bee:	b084      	sub	sp, #16
 8019bf0:	af00      	add	r7, sp, #0
 8019bf2:	60f8      	str	r0, [r7, #12]
 8019bf4:	60b9      	str	r1, [r7, #8]
 8019bf6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d109      	bne.n	8019c12 <tcp_shutdown+0x26>
 8019bfe:	4b26      	ldr	r3, [pc, #152]	; (8019c98 <tcp_shutdown+0xac>)
 8019c00:	f240 2207 	movw	r2, #519	; 0x207
 8019c04:	4925      	ldr	r1, [pc, #148]	; (8019c9c <tcp_shutdown+0xb0>)
 8019c06:	4826      	ldr	r0, [pc, #152]	; (8019ca0 <tcp_shutdown+0xb4>)
 8019c08:	f00a f9de 	bl	8023fc8 <iprintf>
 8019c0c:	f06f 030f 	mvn.w	r3, #15
 8019c10:	e03d      	b.n	8019c8e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	7d1b      	ldrb	r3, [r3, #20]
 8019c16:	2b01      	cmp	r3, #1
 8019c18:	d102      	bne.n	8019c20 <tcp_shutdown+0x34>
    return ERR_CONN;
 8019c1a:	f06f 030a 	mvn.w	r3, #10
 8019c1e:	e036      	b.n	8019c8e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8019c20:	68bb      	ldr	r3, [r7, #8]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d01b      	beq.n	8019c5e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	8b5b      	ldrh	r3, [r3, #26]
 8019c2a:	f043 0310 	orr.w	r3, r3, #16
 8019c2e:	b29a      	uxth	r2, r3
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d005      	beq.n	8019c46 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8019c3a:	2101      	movs	r1, #1
 8019c3c:	68f8      	ldr	r0, [r7, #12]
 8019c3e:	f7ff fe5d 	bl	80198fc <tcp_close_shutdown>
 8019c42:	4603      	mov	r3, r0
 8019c44:	e023      	b.n	8019c8e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d007      	beq.n	8019c5e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019c52:	4618      	mov	r0, r3
 8019c54:	f7ff fae4 	bl	8019220 <pbuf_free>
      pcb->refused_data = NULL;
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	2200      	movs	r2, #0
 8019c5c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d013      	beq.n	8019c8c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	7d1b      	ldrb	r3, [r3, #20]
 8019c68:	2b04      	cmp	r3, #4
 8019c6a:	dc02      	bgt.n	8019c72 <tcp_shutdown+0x86>
 8019c6c:	2b03      	cmp	r3, #3
 8019c6e:	da02      	bge.n	8019c76 <tcp_shutdown+0x8a>
 8019c70:	e009      	b.n	8019c86 <tcp_shutdown+0x9a>
 8019c72:	2b07      	cmp	r3, #7
 8019c74:	d107      	bne.n	8019c86 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8019c76:	68bb      	ldr	r3, [r7, #8]
 8019c78:	b2db      	uxtb	r3, r3
 8019c7a:	4619      	mov	r1, r3
 8019c7c:	68f8      	ldr	r0, [r7, #12]
 8019c7e:	f7ff fe3d 	bl	80198fc <tcp_close_shutdown>
 8019c82:	4603      	mov	r3, r0
 8019c84:	e003      	b.n	8019c8e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8019c86:	f06f 030a 	mvn.w	r3, #10
 8019c8a:	e000      	b.n	8019c8e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8019c8c:	2300      	movs	r3, #0
}
 8019c8e:	4618      	mov	r0, r3
 8019c90:	3710      	adds	r7, #16
 8019c92:	46bd      	mov	sp, r7
 8019c94:	bd80      	pop	{r7, pc}
 8019c96:	bf00      	nop
 8019c98:	0802714c 	.word	0x0802714c
 8019c9c:	08027274 	.word	0x08027274
 8019ca0:	08027190 	.word	0x08027190

08019ca4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8019ca4:	b580      	push	{r7, lr}
 8019ca6:	b08e      	sub	sp, #56	; 0x38
 8019ca8:	af04      	add	r7, sp, #16
 8019caa:	6078      	str	r0, [r7, #4]
 8019cac:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d107      	bne.n	8019cc4 <tcp_abandon+0x20>
 8019cb4:	4b52      	ldr	r3, [pc, #328]	; (8019e00 <tcp_abandon+0x15c>)
 8019cb6:	f240 223d 	movw	r2, #573	; 0x23d
 8019cba:	4952      	ldr	r1, [pc, #328]	; (8019e04 <tcp_abandon+0x160>)
 8019cbc:	4852      	ldr	r0, [pc, #328]	; (8019e08 <tcp_abandon+0x164>)
 8019cbe:	f00a f983 	bl	8023fc8 <iprintf>
 8019cc2:	e099      	b.n	8019df8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	7d1b      	ldrb	r3, [r3, #20]
 8019cc8:	2b01      	cmp	r3, #1
 8019cca:	d106      	bne.n	8019cda <tcp_abandon+0x36>
 8019ccc:	4b4c      	ldr	r3, [pc, #304]	; (8019e00 <tcp_abandon+0x15c>)
 8019cce:	f44f 7210 	mov.w	r2, #576	; 0x240
 8019cd2:	494e      	ldr	r1, [pc, #312]	; (8019e0c <tcp_abandon+0x168>)
 8019cd4:	484c      	ldr	r0, [pc, #304]	; (8019e08 <tcp_abandon+0x164>)
 8019cd6:	f00a f977 	bl	8023fc8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	7d1b      	ldrb	r3, [r3, #20]
 8019cde:	2b0a      	cmp	r3, #10
 8019ce0:	d107      	bne.n	8019cf2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8019ce2:	6879      	ldr	r1, [r7, #4]
 8019ce4:	484a      	ldr	r0, [pc, #296]	; (8019e10 <tcp_abandon+0x16c>)
 8019ce6:	f001 fb7b 	bl	801b3e0 <tcp_pcb_remove>
    tcp_free(pcb);
 8019cea:	6878      	ldr	r0, [r7, #4]
 8019cec:	f7ff fd54 	bl	8019798 <tcp_free>
 8019cf0:	e082      	b.n	8019df8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8019cf2:	2300      	movs	r3, #0
 8019cf4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8019cf6:	2300      	movs	r3, #0
 8019cf8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019cfe:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d04:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019d0c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	691b      	ldr	r3, [r3, #16]
 8019d12:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	7d1b      	ldrb	r3, [r3, #20]
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d126      	bne.n	8019d6a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	8adb      	ldrh	r3, [r3, #22]
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d02e      	beq.n	8019d82 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019d24:	4b3b      	ldr	r3, [pc, #236]	; (8019e14 <tcp_abandon+0x170>)
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	687a      	ldr	r2, [r7, #4]
 8019d2a:	429a      	cmp	r2, r3
 8019d2c:	d105      	bne.n	8019d3a <tcp_abandon+0x96>
 8019d2e:	4b39      	ldr	r3, [pc, #228]	; (8019e14 <tcp_abandon+0x170>)
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	68db      	ldr	r3, [r3, #12]
 8019d34:	4a37      	ldr	r2, [pc, #220]	; (8019e14 <tcp_abandon+0x170>)
 8019d36:	6013      	str	r3, [r2, #0]
 8019d38:	e013      	b.n	8019d62 <tcp_abandon+0xbe>
 8019d3a:	4b36      	ldr	r3, [pc, #216]	; (8019e14 <tcp_abandon+0x170>)
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	61fb      	str	r3, [r7, #28]
 8019d40:	e00c      	b.n	8019d5c <tcp_abandon+0xb8>
 8019d42:	69fb      	ldr	r3, [r7, #28]
 8019d44:	68db      	ldr	r3, [r3, #12]
 8019d46:	687a      	ldr	r2, [r7, #4]
 8019d48:	429a      	cmp	r2, r3
 8019d4a:	d104      	bne.n	8019d56 <tcp_abandon+0xb2>
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	68da      	ldr	r2, [r3, #12]
 8019d50:	69fb      	ldr	r3, [r7, #28]
 8019d52:	60da      	str	r2, [r3, #12]
 8019d54:	e005      	b.n	8019d62 <tcp_abandon+0xbe>
 8019d56:	69fb      	ldr	r3, [r7, #28]
 8019d58:	68db      	ldr	r3, [r3, #12]
 8019d5a:	61fb      	str	r3, [r7, #28]
 8019d5c:	69fb      	ldr	r3, [r7, #28]
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	d1ef      	bne.n	8019d42 <tcp_abandon+0x9e>
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	2200      	movs	r2, #0
 8019d66:	60da      	str	r2, [r3, #12]
 8019d68:	e00b      	b.n	8019d82 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8019d6a:	683b      	ldr	r3, [r7, #0]
 8019d6c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	8adb      	ldrh	r3, [r3, #22]
 8019d72:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019d74:	6879      	ldr	r1, [r7, #4]
 8019d76:	4828      	ldr	r0, [pc, #160]	; (8019e18 <tcp_abandon+0x174>)
 8019d78:	f001 fb32 	bl	801b3e0 <tcp_pcb_remove>
 8019d7c:	4b27      	ldr	r3, [pc, #156]	; (8019e1c <tcp_abandon+0x178>)
 8019d7e:	2201      	movs	r2, #1
 8019d80:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d004      	beq.n	8019d94 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d8e:	4618      	mov	r0, r3
 8019d90:	f000 ffdc 	bl	801ad4c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d004      	beq.n	8019da6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019da0:	4618      	mov	r0, r3
 8019da2:	f000 ffd3 	bl	801ad4c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d004      	beq.n	8019db8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019db2:	4618      	mov	r0, r3
 8019db4:	f000 ffca 	bl	801ad4c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8019db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d00e      	beq.n	8019ddc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8019dbe:	6879      	ldr	r1, [r7, #4]
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	3304      	adds	r3, #4
 8019dc4:	687a      	ldr	r2, [r7, #4]
 8019dc6:	8b12      	ldrh	r2, [r2, #24]
 8019dc8:	9202      	str	r2, [sp, #8]
 8019dca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019dcc:	9201      	str	r2, [sp, #4]
 8019dce:	9300      	str	r3, [sp, #0]
 8019dd0:	460b      	mov	r3, r1
 8019dd2:	697a      	ldr	r2, [r7, #20]
 8019dd4:	69b9      	ldr	r1, [r7, #24]
 8019dd6:	6878      	ldr	r0, [r7, #4]
 8019dd8:	f005 fdf8 	bl	801f9cc <tcp_rst>
    }
    last_state = pcb->state;
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	7d1b      	ldrb	r3, [r3, #20]
 8019de0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8019de2:	6878      	ldr	r0, [r7, #4]
 8019de4:	f7ff fcd8 	bl	8019798 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8019de8:	693b      	ldr	r3, [r7, #16]
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d004      	beq.n	8019df8 <tcp_abandon+0x154>
 8019dee:	693b      	ldr	r3, [r7, #16]
 8019df0:	f06f 010c 	mvn.w	r1, #12
 8019df4:	68f8      	ldr	r0, [r7, #12]
 8019df6:	4798      	blx	r3
  }
}
 8019df8:	3728      	adds	r7, #40	; 0x28
 8019dfa:	46bd      	mov	sp, r7
 8019dfc:	bd80      	pop	{r7, pc}
 8019dfe:	bf00      	nop
 8019e00:	0802714c 	.word	0x0802714c
 8019e04:	08027290 	.word	0x08027290
 8019e08:	08027190 	.word	0x08027190
 8019e0c:	080272ac 	.word	0x080272ac
 8019e10:	2007edc8 	.word	0x2007edc8
 8019e14:	2007edbc 	.word	0x2007edbc
 8019e18:	2007edc4 	.word	0x2007edc4
 8019e1c:	2007edcc 	.word	0x2007edcc

08019e20 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b082      	sub	sp, #8
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8019e28:	2101      	movs	r1, #1
 8019e2a:	6878      	ldr	r0, [r7, #4]
 8019e2c:	f7ff ff3a 	bl	8019ca4 <tcp_abandon>
}
 8019e30:	bf00      	nop
 8019e32:	3708      	adds	r7, #8
 8019e34:	46bd      	mov	sp, r7
 8019e36:	bd80      	pop	{r7, pc}

08019e38 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019e38:	b580      	push	{r7, lr}
 8019e3a:	b088      	sub	sp, #32
 8019e3c:	af00      	add	r7, sp, #0
 8019e3e:	60f8      	str	r0, [r7, #12]
 8019e40:	60b9      	str	r1, [r7, #8]
 8019e42:	4613      	mov	r3, r2
 8019e44:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8019e46:	2304      	movs	r3, #4
 8019e48:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019e4a:	68bb      	ldr	r3, [r7, #8]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d101      	bne.n	8019e54 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8019e50:	4b3e      	ldr	r3, [pc, #248]	; (8019f4c <tcp_bind+0x114>)
 8019e52:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019e54:	68fb      	ldr	r3, [r7, #12]
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	d109      	bne.n	8019e6e <tcp_bind+0x36>
 8019e5a:	4b3d      	ldr	r3, [pc, #244]	; (8019f50 <tcp_bind+0x118>)
 8019e5c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8019e60:	493c      	ldr	r1, [pc, #240]	; (8019f54 <tcp_bind+0x11c>)
 8019e62:	483d      	ldr	r0, [pc, #244]	; (8019f58 <tcp_bind+0x120>)
 8019e64:	f00a f8b0 	bl	8023fc8 <iprintf>
 8019e68:	f06f 030f 	mvn.w	r3, #15
 8019e6c:	e06a      	b.n	8019f44 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	7d1b      	ldrb	r3, [r3, #20]
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d009      	beq.n	8019e8a <tcp_bind+0x52>
 8019e76:	4b36      	ldr	r3, [pc, #216]	; (8019f50 <tcp_bind+0x118>)
 8019e78:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019e7c:	4937      	ldr	r1, [pc, #220]	; (8019f5c <tcp_bind+0x124>)
 8019e7e:	4836      	ldr	r0, [pc, #216]	; (8019f58 <tcp_bind+0x120>)
 8019e80:	f00a f8a2 	bl	8023fc8 <iprintf>
 8019e84:	f06f 0305 	mvn.w	r3, #5
 8019e88:	e05c      	b.n	8019f44 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8019e8a:	88fb      	ldrh	r3, [r7, #6]
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	d109      	bne.n	8019ea4 <tcp_bind+0x6c>
    port = tcp_new_port();
 8019e90:	f000 f9de 	bl	801a250 <tcp_new_port>
 8019e94:	4603      	mov	r3, r0
 8019e96:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019e98:	88fb      	ldrh	r3, [r7, #6]
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d135      	bne.n	8019f0a <tcp_bind+0xd2>
      return ERR_BUF;
 8019e9e:	f06f 0301 	mvn.w	r3, #1
 8019ea2:	e04f      	b.n	8019f44 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8019ea4:	2300      	movs	r3, #0
 8019ea6:	61fb      	str	r3, [r7, #28]
 8019ea8:	e02b      	b.n	8019f02 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019eaa:	4a2d      	ldr	r2, [pc, #180]	; (8019f60 <tcp_bind+0x128>)
 8019eac:	69fb      	ldr	r3, [r7, #28]
 8019eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	61bb      	str	r3, [r7, #24]
 8019eb6:	e01e      	b.n	8019ef6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8019eb8:	69bb      	ldr	r3, [r7, #24]
 8019eba:	8adb      	ldrh	r3, [r3, #22]
 8019ebc:	88fa      	ldrh	r2, [r7, #6]
 8019ebe:	429a      	cmp	r2, r3
 8019ec0:	d116      	bne.n	8019ef0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8019ec2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d010      	beq.n	8019eea <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8019ec8:	69bb      	ldr	r3, [r7, #24]
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d00c      	beq.n	8019eea <tcp_bind+0xb2>
 8019ed0:	68bb      	ldr	r3, [r7, #8]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d009      	beq.n	8019eea <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8019ed6:	68bb      	ldr	r3, [r7, #8]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d005      	beq.n	8019eea <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8019ede:	69bb      	ldr	r3, [r7, #24]
 8019ee0:	681a      	ldr	r2, [r3, #0]
 8019ee2:	68bb      	ldr	r3, [r7, #8]
 8019ee4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8019ee6:	429a      	cmp	r2, r3
 8019ee8:	d102      	bne.n	8019ef0 <tcp_bind+0xb8>
              return ERR_USE;
 8019eea:	f06f 0307 	mvn.w	r3, #7
 8019eee:	e029      	b.n	8019f44 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019ef0:	69bb      	ldr	r3, [r7, #24]
 8019ef2:	68db      	ldr	r3, [r3, #12]
 8019ef4:	61bb      	str	r3, [r7, #24]
 8019ef6:	69bb      	ldr	r3, [r7, #24]
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d1dd      	bne.n	8019eb8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8019efc:	69fb      	ldr	r3, [r7, #28]
 8019efe:	3301      	adds	r3, #1
 8019f00:	61fb      	str	r3, [r7, #28]
 8019f02:	69fa      	ldr	r2, [r7, #28]
 8019f04:	697b      	ldr	r3, [r7, #20]
 8019f06:	429a      	cmp	r2, r3
 8019f08:	dbcf      	blt.n	8019eaa <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8019f0a:	68bb      	ldr	r3, [r7, #8]
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d00c      	beq.n	8019f2a <tcp_bind+0xf2>
 8019f10:	68bb      	ldr	r3, [r7, #8]
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d008      	beq.n	8019f2a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8019f18:	68bb      	ldr	r3, [r7, #8]
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d002      	beq.n	8019f24 <tcp_bind+0xec>
 8019f1e:	68bb      	ldr	r3, [r7, #8]
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	e000      	b.n	8019f26 <tcp_bind+0xee>
 8019f24:	2300      	movs	r3, #0
 8019f26:	68fa      	ldr	r2, [r7, #12]
 8019f28:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	88fa      	ldrh	r2, [r7, #6]
 8019f2e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8019f30:	4b0c      	ldr	r3, [pc, #48]	; (8019f64 <tcp_bind+0x12c>)
 8019f32:	681a      	ldr	r2, [r3, #0]
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	60da      	str	r2, [r3, #12]
 8019f38:	4a0a      	ldr	r2, [pc, #40]	; (8019f64 <tcp_bind+0x12c>)
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	6013      	str	r3, [r2, #0]
 8019f3e:	f005 ff07 	bl	801fd50 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8019f42:	2300      	movs	r3, #0
}
 8019f44:	4618      	mov	r0, r3
 8019f46:	3720      	adds	r7, #32
 8019f48:	46bd      	mov	sp, r7
 8019f4a:	bd80      	pop	{r7, pc}
 8019f4c:	08029b34 	.word	0x08029b34
 8019f50:	0802714c 	.word	0x0802714c
 8019f54:	080272e0 	.word	0x080272e0
 8019f58:	08027190 	.word	0x08027190
 8019f5c:	080272f8 	.word	0x080272f8
 8019f60:	08029b0c 	.word	0x08029b0c
 8019f64:	2007edbc 	.word	0x2007edbc

08019f68 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8019f68:	b580      	push	{r7, lr}
 8019f6a:	b084      	sub	sp, #16
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	60f8      	str	r0, [r7, #12]
 8019f70:	60b9      	str	r1, [r7, #8]
 8019f72:	4613      	mov	r3, r2
 8019f74:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8019f76:	68bb      	ldr	r3, [r7, #8]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d106      	bne.n	8019f8a <tcp_accept_null+0x22>
 8019f7c:	4b07      	ldr	r3, [pc, #28]	; (8019f9c <tcp_accept_null+0x34>)
 8019f7e:	f240 320f 	movw	r2, #783	; 0x30f
 8019f82:	4907      	ldr	r1, [pc, #28]	; (8019fa0 <tcp_accept_null+0x38>)
 8019f84:	4807      	ldr	r0, [pc, #28]	; (8019fa4 <tcp_accept_null+0x3c>)
 8019f86:	f00a f81f 	bl	8023fc8 <iprintf>

  tcp_abort(pcb);
 8019f8a:	68b8      	ldr	r0, [r7, #8]
 8019f8c:	f7ff ff48 	bl	8019e20 <tcp_abort>

  return ERR_ABRT;
 8019f90:	f06f 030c 	mvn.w	r3, #12
}
 8019f94:	4618      	mov	r0, r3
 8019f96:	3710      	adds	r7, #16
 8019f98:	46bd      	mov	sp, r7
 8019f9a:	bd80      	pop	{r7, pc}
 8019f9c:	0802714c 	.word	0x0802714c
 8019fa0:	08027320 	.word	0x08027320
 8019fa4:	08027190 	.word	0x08027190

08019fa8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	b088      	sub	sp, #32
 8019fac:	af00      	add	r7, sp, #0
 8019fae:	60f8      	str	r0, [r7, #12]
 8019fb0:	460b      	mov	r3, r1
 8019fb2:	607a      	str	r2, [r7, #4]
 8019fb4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8019fb6:	2300      	movs	r3, #0
 8019fb8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d109      	bne.n	8019fd4 <tcp_listen_with_backlog_and_err+0x2c>
 8019fc0:	4b47      	ldr	r3, [pc, #284]	; (801a0e0 <tcp_listen_with_backlog_and_err+0x138>)
 8019fc2:	f240 3259 	movw	r2, #857	; 0x359
 8019fc6:	4947      	ldr	r1, [pc, #284]	; (801a0e4 <tcp_listen_with_backlog_and_err+0x13c>)
 8019fc8:	4847      	ldr	r0, [pc, #284]	; (801a0e8 <tcp_listen_with_backlog_and_err+0x140>)
 8019fca:	f009 fffd 	bl	8023fc8 <iprintf>
 8019fce:	23f0      	movs	r3, #240	; 0xf0
 8019fd0:	76fb      	strb	r3, [r7, #27]
 8019fd2:	e079      	b.n	801a0c8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8019fd4:	68fb      	ldr	r3, [r7, #12]
 8019fd6:	7d1b      	ldrb	r3, [r3, #20]
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d009      	beq.n	8019ff0 <tcp_listen_with_backlog_and_err+0x48>
 8019fdc:	4b40      	ldr	r3, [pc, #256]	; (801a0e0 <tcp_listen_with_backlog_and_err+0x138>)
 8019fde:	f240 325a 	movw	r2, #858	; 0x35a
 8019fe2:	4942      	ldr	r1, [pc, #264]	; (801a0ec <tcp_listen_with_backlog_and_err+0x144>)
 8019fe4:	4840      	ldr	r0, [pc, #256]	; (801a0e8 <tcp_listen_with_backlog_and_err+0x140>)
 8019fe6:	f009 ffef 	bl	8023fc8 <iprintf>
 8019fea:	23f1      	movs	r3, #241	; 0xf1
 8019fec:	76fb      	strb	r3, [r7, #27]
 8019fee:	e06b      	b.n	801a0c8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	7d1b      	ldrb	r3, [r3, #20]
 8019ff4:	2b01      	cmp	r3, #1
 8019ff6:	d104      	bne.n	801a002 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8019ffc:	23f7      	movs	r3, #247	; 0xf7
 8019ffe:	76fb      	strb	r3, [r7, #27]
    goto done;
 801a000:	e062      	b.n	801a0c8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801a002:	2002      	movs	r0, #2
 801a004:	f7fe f8f6 	bl	80181f4 <memp_malloc>
 801a008:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801a00a:	69fb      	ldr	r3, [r7, #28]
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d102      	bne.n	801a016 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 801a010:	23ff      	movs	r3, #255	; 0xff
 801a012:	76fb      	strb	r3, [r7, #27]
    goto done;
 801a014:	e058      	b.n	801a0c8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	691a      	ldr	r2, [r3, #16]
 801a01a:	69fb      	ldr	r3, [r7, #28]
 801a01c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	8ada      	ldrh	r2, [r3, #22]
 801a022:	69fb      	ldr	r3, [r7, #28]
 801a024:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801a026:	69fb      	ldr	r3, [r7, #28]
 801a028:	2201      	movs	r2, #1
 801a02a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801a02c:	68fb      	ldr	r3, [r7, #12]
 801a02e:	7d5a      	ldrb	r2, [r3, #21]
 801a030:	69fb      	ldr	r3, [r7, #28]
 801a032:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801a034:	68fb      	ldr	r3, [r7, #12]
 801a036:	7a5a      	ldrb	r2, [r3, #9]
 801a038:	69fb      	ldr	r3, [r7, #28]
 801a03a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801a03c:	69fb      	ldr	r3, [r7, #28]
 801a03e:	2200      	movs	r2, #0
 801a040:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	7ada      	ldrb	r2, [r3, #11]
 801a046:	69fb      	ldr	r3, [r7, #28]
 801a048:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801a04a:	68fb      	ldr	r3, [r7, #12]
 801a04c:	7a9a      	ldrb	r2, [r3, #10]
 801a04e:	69fb      	ldr	r3, [r7, #28]
 801a050:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801a052:	68fb      	ldr	r3, [r7, #12]
 801a054:	681a      	ldr	r2, [r3, #0]
 801a056:	69fb      	ldr	r3, [r7, #28]
 801a058:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	8adb      	ldrh	r3, [r3, #22]
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d021      	beq.n	801a0a6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801a062:	4b23      	ldr	r3, [pc, #140]	; (801a0f0 <tcp_listen_with_backlog_and_err+0x148>)
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	68fa      	ldr	r2, [r7, #12]
 801a068:	429a      	cmp	r2, r3
 801a06a:	d105      	bne.n	801a078 <tcp_listen_with_backlog_and_err+0xd0>
 801a06c:	4b20      	ldr	r3, [pc, #128]	; (801a0f0 <tcp_listen_with_backlog_and_err+0x148>)
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	68db      	ldr	r3, [r3, #12]
 801a072:	4a1f      	ldr	r2, [pc, #124]	; (801a0f0 <tcp_listen_with_backlog_and_err+0x148>)
 801a074:	6013      	str	r3, [r2, #0]
 801a076:	e013      	b.n	801a0a0 <tcp_listen_with_backlog_and_err+0xf8>
 801a078:	4b1d      	ldr	r3, [pc, #116]	; (801a0f0 <tcp_listen_with_backlog_and_err+0x148>)
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	617b      	str	r3, [r7, #20]
 801a07e:	e00c      	b.n	801a09a <tcp_listen_with_backlog_and_err+0xf2>
 801a080:	697b      	ldr	r3, [r7, #20]
 801a082:	68db      	ldr	r3, [r3, #12]
 801a084:	68fa      	ldr	r2, [r7, #12]
 801a086:	429a      	cmp	r2, r3
 801a088:	d104      	bne.n	801a094 <tcp_listen_with_backlog_and_err+0xec>
 801a08a:	68fb      	ldr	r3, [r7, #12]
 801a08c:	68da      	ldr	r2, [r3, #12]
 801a08e:	697b      	ldr	r3, [r7, #20]
 801a090:	60da      	str	r2, [r3, #12]
 801a092:	e005      	b.n	801a0a0 <tcp_listen_with_backlog_and_err+0xf8>
 801a094:	697b      	ldr	r3, [r7, #20]
 801a096:	68db      	ldr	r3, [r3, #12]
 801a098:	617b      	str	r3, [r7, #20]
 801a09a:	697b      	ldr	r3, [r7, #20]
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d1ef      	bne.n	801a080 <tcp_listen_with_backlog_and_err+0xd8>
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	2200      	movs	r2, #0
 801a0a4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801a0a6:	68f8      	ldr	r0, [r7, #12]
 801a0a8:	f7ff fb76 	bl	8019798 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801a0ac:	69fb      	ldr	r3, [r7, #28]
 801a0ae:	4a11      	ldr	r2, [pc, #68]	; (801a0f4 <tcp_listen_with_backlog_and_err+0x14c>)
 801a0b0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801a0b2:	4b11      	ldr	r3, [pc, #68]	; (801a0f8 <tcp_listen_with_backlog_and_err+0x150>)
 801a0b4:	681a      	ldr	r2, [r3, #0]
 801a0b6:	69fb      	ldr	r3, [r7, #28]
 801a0b8:	60da      	str	r2, [r3, #12]
 801a0ba:	4a0f      	ldr	r2, [pc, #60]	; (801a0f8 <tcp_listen_with_backlog_and_err+0x150>)
 801a0bc:	69fb      	ldr	r3, [r7, #28]
 801a0be:	6013      	str	r3, [r2, #0]
 801a0c0:	f005 fe46 	bl	801fd50 <tcp_timer_needed>
  res = ERR_OK;
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d002      	beq.n	801a0d4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	7efa      	ldrb	r2, [r7, #27]
 801a0d2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801a0d4:	69fb      	ldr	r3, [r7, #28]
}
 801a0d6:	4618      	mov	r0, r3
 801a0d8:	3720      	adds	r7, #32
 801a0da:	46bd      	mov	sp, r7
 801a0dc:	bd80      	pop	{r7, pc}
 801a0de:	bf00      	nop
 801a0e0:	0802714c 	.word	0x0802714c
 801a0e4:	08027340 	.word	0x08027340
 801a0e8:	08027190 	.word	0x08027190
 801a0ec:	08027370 	.word	0x08027370
 801a0f0:	2007edbc 	.word	0x2007edbc
 801a0f4:	08019f69 	.word	0x08019f69
 801a0f8:	2007edc0 	.word	0x2007edc0

0801a0fc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b084      	sub	sp, #16
 801a100:	af00      	add	r7, sp, #0
 801a102:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d106      	bne.n	801a118 <tcp_update_rcv_ann_wnd+0x1c>
 801a10a:	4b25      	ldr	r3, [pc, #148]	; (801a1a0 <tcp_update_rcv_ann_wnd+0xa4>)
 801a10c:	f240 32a6 	movw	r2, #934	; 0x3a6
 801a110:	4924      	ldr	r1, [pc, #144]	; (801a1a4 <tcp_update_rcv_ann_wnd+0xa8>)
 801a112:	4825      	ldr	r0, [pc, #148]	; (801a1a8 <tcp_update_rcv_ann_wnd+0xac>)
 801a114:	f009 ff58 	bl	8023fc8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a11c:	687a      	ldr	r2, [r7, #4]
 801a11e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801a120:	4413      	add	r3, r2
 801a122:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a128:	687a      	ldr	r2, [r7, #4]
 801a12a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801a12c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801a130:	bf28      	it	cs
 801a132:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801a136:	b292      	uxth	r2, r2
 801a138:	4413      	add	r3, r2
 801a13a:	68fa      	ldr	r2, [r7, #12]
 801a13c:	1ad3      	subs	r3, r2, r3
 801a13e:	2b00      	cmp	r3, #0
 801a140:	db08      	blt.n	801a154 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a14e:	68fa      	ldr	r2, [r7, #12]
 801a150:	1ad3      	subs	r3, r2, r3
 801a152:	e020      	b.n	801a196 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a15c:	1ad3      	subs	r3, r2, r3
 801a15e:	2b00      	cmp	r3, #0
 801a160:	dd03      	ble.n	801a16a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	2200      	movs	r2, #0
 801a166:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a168:	e014      	b.n	801a194 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a172:	1ad3      	subs	r3, r2, r3
 801a174:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801a176:	68bb      	ldr	r3, [r7, #8]
 801a178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a17c:	d306      	bcc.n	801a18c <tcp_update_rcv_ann_wnd+0x90>
 801a17e:	4b08      	ldr	r3, [pc, #32]	; (801a1a0 <tcp_update_rcv_ann_wnd+0xa4>)
 801a180:	f240 32b6 	movw	r2, #950	; 0x3b6
 801a184:	4909      	ldr	r1, [pc, #36]	; (801a1ac <tcp_update_rcv_ann_wnd+0xb0>)
 801a186:	4808      	ldr	r0, [pc, #32]	; (801a1a8 <tcp_update_rcv_ann_wnd+0xac>)
 801a188:	f009 ff1e 	bl	8023fc8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801a18c:	68bb      	ldr	r3, [r7, #8]
 801a18e:	b29a      	uxth	r2, r3
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801a194:	2300      	movs	r3, #0
  }
}
 801a196:	4618      	mov	r0, r3
 801a198:	3710      	adds	r7, #16
 801a19a:	46bd      	mov	sp, r7
 801a19c:	bd80      	pop	{r7, pc}
 801a19e:	bf00      	nop
 801a1a0:	0802714c 	.word	0x0802714c
 801a1a4:	080273a8 	.word	0x080273a8
 801a1a8:	08027190 	.word	0x08027190
 801a1ac:	080273cc 	.word	0x080273cc

0801a1b0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801a1b0:	b580      	push	{r7, lr}
 801a1b2:	b084      	sub	sp, #16
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	6078      	str	r0, [r7, #4]
 801a1b8:	460b      	mov	r3, r1
 801a1ba:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d107      	bne.n	801a1d2 <tcp_recved+0x22>
 801a1c2:	4b1f      	ldr	r3, [pc, #124]	; (801a240 <tcp_recved+0x90>)
 801a1c4:	f240 32cf 	movw	r2, #975	; 0x3cf
 801a1c8:	491e      	ldr	r1, [pc, #120]	; (801a244 <tcp_recved+0x94>)
 801a1ca:	481f      	ldr	r0, [pc, #124]	; (801a248 <tcp_recved+0x98>)
 801a1cc:	f009 fefc 	bl	8023fc8 <iprintf>
 801a1d0:	e032      	b.n	801a238 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	7d1b      	ldrb	r3, [r3, #20]
 801a1d6:	2b01      	cmp	r3, #1
 801a1d8:	d106      	bne.n	801a1e8 <tcp_recved+0x38>
 801a1da:	4b19      	ldr	r3, [pc, #100]	; (801a240 <tcp_recved+0x90>)
 801a1dc:	f240 32d2 	movw	r2, #978	; 0x3d2
 801a1e0:	491a      	ldr	r1, [pc, #104]	; (801a24c <tcp_recved+0x9c>)
 801a1e2:	4819      	ldr	r0, [pc, #100]	; (801a248 <tcp_recved+0x98>)
 801a1e4:	f009 fef0 	bl	8023fc8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a1ec:	887b      	ldrh	r3, [r7, #2]
 801a1ee:	4413      	add	r3, r2
 801a1f0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801a1f2:	89fb      	ldrh	r3, [r7, #14]
 801a1f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801a1f8:	d804      	bhi.n	801a204 <tcp_recved+0x54>
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a1fe:	89fa      	ldrh	r2, [r7, #14]
 801a200:	429a      	cmp	r2, r3
 801a202:	d204      	bcs.n	801a20e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a20a:	851a      	strh	r2, [r3, #40]	; 0x28
 801a20c:	e002      	b.n	801a214 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	89fa      	ldrh	r2, [r7, #14]
 801a212:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801a214:	6878      	ldr	r0, [r7, #4]
 801a216:	f7ff ff71 	bl	801a0fc <tcp_update_rcv_ann_wnd>
 801a21a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801a21c:	68bb      	ldr	r3, [r7, #8]
 801a21e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a222:	d309      	bcc.n	801a238 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	8b5b      	ldrh	r3, [r3, #26]
 801a228:	f043 0302 	orr.w	r3, r3, #2
 801a22c:	b29a      	uxth	r2, r3
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801a232:	6878      	ldr	r0, [r7, #4]
 801a234:	f004 fdf6 	bl	801ee24 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801a238:	3710      	adds	r7, #16
 801a23a:	46bd      	mov	sp, r7
 801a23c:	bd80      	pop	{r7, pc}
 801a23e:	bf00      	nop
 801a240:	0802714c 	.word	0x0802714c
 801a244:	080273e8 	.word	0x080273e8
 801a248:	08027190 	.word	0x08027190
 801a24c:	08027400 	.word	0x08027400

0801a250 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801a250:	b480      	push	{r7}
 801a252:	b083      	sub	sp, #12
 801a254:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801a256:	2300      	movs	r3, #0
 801a258:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801a25a:	4b1e      	ldr	r3, [pc, #120]	; (801a2d4 <tcp_new_port+0x84>)
 801a25c:	881b      	ldrh	r3, [r3, #0]
 801a25e:	3301      	adds	r3, #1
 801a260:	b29a      	uxth	r2, r3
 801a262:	4b1c      	ldr	r3, [pc, #112]	; (801a2d4 <tcp_new_port+0x84>)
 801a264:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801a266:	4b1b      	ldr	r3, [pc, #108]	; (801a2d4 <tcp_new_port+0x84>)
 801a268:	881b      	ldrh	r3, [r3, #0]
 801a26a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a26e:	4293      	cmp	r3, r2
 801a270:	d103      	bne.n	801a27a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801a272:	4b18      	ldr	r3, [pc, #96]	; (801a2d4 <tcp_new_port+0x84>)
 801a274:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801a278:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801a27a:	2300      	movs	r3, #0
 801a27c:	71fb      	strb	r3, [r7, #7]
 801a27e:	e01e      	b.n	801a2be <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801a280:	79fb      	ldrb	r3, [r7, #7]
 801a282:	4a15      	ldr	r2, [pc, #84]	; (801a2d8 <tcp_new_port+0x88>)
 801a284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	603b      	str	r3, [r7, #0]
 801a28c:	e011      	b.n	801a2b2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801a28e:	683b      	ldr	r3, [r7, #0]
 801a290:	8ada      	ldrh	r2, [r3, #22]
 801a292:	4b10      	ldr	r3, [pc, #64]	; (801a2d4 <tcp_new_port+0x84>)
 801a294:	881b      	ldrh	r3, [r3, #0]
 801a296:	429a      	cmp	r2, r3
 801a298:	d108      	bne.n	801a2ac <tcp_new_port+0x5c>
        n++;
 801a29a:	88bb      	ldrh	r3, [r7, #4]
 801a29c:	3301      	adds	r3, #1
 801a29e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801a2a0:	88bb      	ldrh	r3, [r7, #4]
 801a2a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801a2a6:	d3d8      	bcc.n	801a25a <tcp_new_port+0xa>
          return 0;
 801a2a8:	2300      	movs	r3, #0
 801a2aa:	e00d      	b.n	801a2c8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801a2ac:	683b      	ldr	r3, [r7, #0]
 801a2ae:	68db      	ldr	r3, [r3, #12]
 801a2b0:	603b      	str	r3, [r7, #0]
 801a2b2:	683b      	ldr	r3, [r7, #0]
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d1ea      	bne.n	801a28e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801a2b8:	79fb      	ldrb	r3, [r7, #7]
 801a2ba:	3301      	adds	r3, #1
 801a2bc:	71fb      	strb	r3, [r7, #7]
 801a2be:	79fb      	ldrb	r3, [r7, #7]
 801a2c0:	2b03      	cmp	r3, #3
 801a2c2:	d9dd      	bls.n	801a280 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801a2c4:	4b03      	ldr	r3, [pc, #12]	; (801a2d4 <tcp_new_port+0x84>)
 801a2c6:	881b      	ldrh	r3, [r3, #0]
}
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	370c      	adds	r7, #12
 801a2cc:	46bd      	mov	sp, r7
 801a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d2:	4770      	bx	lr
 801a2d4:	200500c4 	.word	0x200500c4
 801a2d8:	08029b0c 	.word	0x08029b0c

0801a2dc <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801a2dc:	b580      	push	{r7, lr}
 801a2de:	b08a      	sub	sp, #40	; 0x28
 801a2e0:	af00      	add	r7, sp, #0
 801a2e2:	60f8      	str	r0, [r7, #12]
 801a2e4:	60b9      	str	r1, [r7, #8]
 801a2e6:	603b      	str	r3, [r7, #0]
 801a2e8:	4613      	mov	r3, r2
 801a2ea:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 801a2ec:	2300      	movs	r3, #0
 801a2ee:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d109      	bne.n	801a30a <tcp_connect+0x2e>
 801a2f6:	4b7d      	ldr	r3, [pc, #500]	; (801a4ec <tcp_connect+0x210>)
 801a2f8:	f240 4235 	movw	r2, #1077	; 0x435
 801a2fc:	497c      	ldr	r1, [pc, #496]	; (801a4f0 <tcp_connect+0x214>)
 801a2fe:	487d      	ldr	r0, [pc, #500]	; (801a4f4 <tcp_connect+0x218>)
 801a300:	f009 fe62 	bl	8023fc8 <iprintf>
 801a304:	f06f 030f 	mvn.w	r3, #15
 801a308:	e0ec      	b.n	801a4e4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801a30a:	68bb      	ldr	r3, [r7, #8]
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d109      	bne.n	801a324 <tcp_connect+0x48>
 801a310:	4b76      	ldr	r3, [pc, #472]	; (801a4ec <tcp_connect+0x210>)
 801a312:	f240 4236 	movw	r2, #1078	; 0x436
 801a316:	4978      	ldr	r1, [pc, #480]	; (801a4f8 <tcp_connect+0x21c>)
 801a318:	4876      	ldr	r0, [pc, #472]	; (801a4f4 <tcp_connect+0x218>)
 801a31a:	f009 fe55 	bl	8023fc8 <iprintf>
 801a31e:	f06f 030f 	mvn.w	r3, #15
 801a322:	e0df      	b.n	801a4e4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	7d1b      	ldrb	r3, [r3, #20]
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d009      	beq.n	801a340 <tcp_connect+0x64>
 801a32c:	4b6f      	ldr	r3, [pc, #444]	; (801a4ec <tcp_connect+0x210>)
 801a32e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801a332:	4972      	ldr	r1, [pc, #456]	; (801a4fc <tcp_connect+0x220>)
 801a334:	486f      	ldr	r0, [pc, #444]	; (801a4f4 <tcp_connect+0x218>)
 801a336:	f009 fe47 	bl	8023fc8 <iprintf>
 801a33a:	f06f 0309 	mvn.w	r3, #9
 801a33e:	e0d1      	b.n	801a4e4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801a340:	68bb      	ldr	r3, [r7, #8]
 801a342:	2b00      	cmp	r3, #0
 801a344:	d002      	beq.n	801a34c <tcp_connect+0x70>
 801a346:	68bb      	ldr	r3, [r7, #8]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	e000      	b.n	801a34e <tcp_connect+0x72>
 801a34c:	2300      	movs	r3, #0
 801a34e:	68fa      	ldr	r2, [r7, #12]
 801a350:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	88fa      	ldrh	r2, [r7, #6]
 801a356:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801a358:	68fb      	ldr	r3, [r7, #12]
 801a35a:	7a1b      	ldrb	r3, [r3, #8]
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	d006      	beq.n	801a36e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	7a1b      	ldrb	r3, [r3, #8]
 801a364:	4618      	mov	r0, r3
 801a366:	f7fe fbcd 	bl	8018b04 <netif_get_by_index>
 801a36a:	6278      	str	r0, [r7, #36]	; 0x24
 801a36c:	e005      	b.n	801a37a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	3304      	adds	r3, #4
 801a372:	4618      	mov	r0, r3
 801a374:	f007 fddc 	bl	8021f30 <ip4_route>
 801a378:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 801a37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	d102      	bne.n	801a386 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 801a380:	f06f 0303 	mvn.w	r3, #3
 801a384:	e0ae      	b.n	801a4e4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d003      	beq.n	801a394 <tcp_connect+0xb8>
 801a38c:	68fb      	ldr	r3, [r7, #12]
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d111      	bne.n	801a3b8 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 801a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a396:	2b00      	cmp	r3, #0
 801a398:	d002      	beq.n	801a3a0 <tcp_connect+0xc4>
 801a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a39c:	3304      	adds	r3, #4
 801a39e:	e000      	b.n	801a3a2 <tcp_connect+0xc6>
 801a3a0:	2300      	movs	r3, #0
 801a3a2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 801a3a4:	69fb      	ldr	r3, [r7, #28]
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	d102      	bne.n	801a3b0 <tcp_connect+0xd4>
      return ERR_RTE;
 801a3aa:	f06f 0303 	mvn.w	r3, #3
 801a3ae:	e099      	b.n	801a4e4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a3b0:	69fb      	ldr	r3, [r7, #28]
 801a3b2:	681a      	ldr	r2, [r3, #0]
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	8adb      	ldrh	r3, [r3, #22]
 801a3bc:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	8adb      	ldrh	r3, [r3, #22]
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d10c      	bne.n	801a3e0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801a3c6:	f7ff ff43 	bl	801a250 <tcp_new_port>
 801a3ca:	4603      	mov	r3, r0
 801a3cc:	461a      	mov	r2, r3
 801a3ce:	68fb      	ldr	r3, [r7, #12]
 801a3d0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801a3d2:	68fb      	ldr	r3, [r7, #12]
 801a3d4:	8adb      	ldrh	r3, [r3, #22]
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	d102      	bne.n	801a3e0 <tcp_connect+0x104>
      return ERR_BUF;
 801a3da:	f06f 0301 	mvn.w	r3, #1
 801a3de:	e081      	b.n	801a4e4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 801a3e0:	68f8      	ldr	r0, [r7, #12]
 801a3e2:	f001 f891 	bl	801b508 <tcp_next_iss>
 801a3e6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	2200      	movs	r2, #0
 801a3ec:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	697a      	ldr	r2, [r7, #20]
 801a3f2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 801a3f4:	697b      	ldr	r3, [r7, #20]
 801a3f6:	1e5a      	subs	r2, r3, #1
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 801a3fc:	697b      	ldr	r3, [r7, #20]
 801a3fe:	1e5a      	subs	r2, r3, #1
 801a400:	68fb      	ldr	r3, [r7, #12]
 801a402:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 801a404:	697b      	ldr	r3, [r7, #20]
 801a406:	1e5a      	subs	r2, r3, #1
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a412:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a414:	68fb      	ldr	r3, [r7, #12]
 801a416:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a418:	68fb      	ldr	r3, [r7, #12]
 801a41a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801a424:	68fb      	ldr	r3, [r7, #12]
 801a426:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a42a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 801a42e:	68fb      	ldr	r3, [r7, #12]
 801a430:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a434:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	3304      	adds	r3, #4
 801a43e:	461a      	mov	r2, r3
 801a440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a442:	f001 f887 	bl	801b554 <tcp_eff_send_mss_netif>
 801a446:	4603      	mov	r3, r0
 801a448:	461a      	mov	r2, r3
 801a44a:	68fb      	ldr	r3, [r7, #12]
 801a44c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801a44e:	68fb      	ldr	r3, [r7, #12]
 801a450:	2201      	movs	r2, #1
 801a452:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	683a      	ldr	r2, [r7, #0]
 801a45a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801a45e:	2102      	movs	r1, #2
 801a460:	68f8      	ldr	r0, [r7, #12]
 801a462:	f004 fbdf 	bl	801ec24 <tcp_enqueue_flags>
 801a466:	4603      	mov	r3, r0
 801a468:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801a46a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d136      	bne.n	801a4e0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	2202      	movs	r2, #2
 801a476:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 801a478:	8b7b      	ldrh	r3, [r7, #26]
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d021      	beq.n	801a4c2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801a47e:	4b20      	ldr	r3, [pc, #128]	; (801a500 <tcp_connect+0x224>)
 801a480:	681b      	ldr	r3, [r3, #0]
 801a482:	68fa      	ldr	r2, [r7, #12]
 801a484:	429a      	cmp	r2, r3
 801a486:	d105      	bne.n	801a494 <tcp_connect+0x1b8>
 801a488:	4b1d      	ldr	r3, [pc, #116]	; (801a500 <tcp_connect+0x224>)
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	68db      	ldr	r3, [r3, #12]
 801a48e:	4a1c      	ldr	r2, [pc, #112]	; (801a500 <tcp_connect+0x224>)
 801a490:	6013      	str	r3, [r2, #0]
 801a492:	e013      	b.n	801a4bc <tcp_connect+0x1e0>
 801a494:	4b1a      	ldr	r3, [pc, #104]	; (801a500 <tcp_connect+0x224>)
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	623b      	str	r3, [r7, #32]
 801a49a:	e00c      	b.n	801a4b6 <tcp_connect+0x1da>
 801a49c:	6a3b      	ldr	r3, [r7, #32]
 801a49e:	68db      	ldr	r3, [r3, #12]
 801a4a0:	68fa      	ldr	r2, [r7, #12]
 801a4a2:	429a      	cmp	r2, r3
 801a4a4:	d104      	bne.n	801a4b0 <tcp_connect+0x1d4>
 801a4a6:	68fb      	ldr	r3, [r7, #12]
 801a4a8:	68da      	ldr	r2, [r3, #12]
 801a4aa:	6a3b      	ldr	r3, [r7, #32]
 801a4ac:	60da      	str	r2, [r3, #12]
 801a4ae:	e005      	b.n	801a4bc <tcp_connect+0x1e0>
 801a4b0:	6a3b      	ldr	r3, [r7, #32]
 801a4b2:	68db      	ldr	r3, [r3, #12]
 801a4b4:	623b      	str	r3, [r7, #32]
 801a4b6:	6a3b      	ldr	r3, [r7, #32]
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d1ef      	bne.n	801a49c <tcp_connect+0x1c0>
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	2200      	movs	r2, #0
 801a4c0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801a4c2:	4b10      	ldr	r3, [pc, #64]	; (801a504 <tcp_connect+0x228>)
 801a4c4:	681a      	ldr	r2, [r3, #0]
 801a4c6:	68fb      	ldr	r3, [r7, #12]
 801a4c8:	60da      	str	r2, [r3, #12]
 801a4ca:	4a0e      	ldr	r2, [pc, #56]	; (801a504 <tcp_connect+0x228>)
 801a4cc:	68fb      	ldr	r3, [r7, #12]
 801a4ce:	6013      	str	r3, [r2, #0]
 801a4d0:	f005 fc3e 	bl	801fd50 <tcp_timer_needed>
 801a4d4:	4b0c      	ldr	r3, [pc, #48]	; (801a508 <tcp_connect+0x22c>)
 801a4d6:	2201      	movs	r2, #1
 801a4d8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801a4da:	68f8      	ldr	r0, [r7, #12]
 801a4dc:	f004 fca2 	bl	801ee24 <tcp_output>
  }
  return ret;
 801a4e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801a4e4:	4618      	mov	r0, r3
 801a4e6:	3728      	adds	r7, #40	; 0x28
 801a4e8:	46bd      	mov	sp, r7
 801a4ea:	bd80      	pop	{r7, pc}
 801a4ec:	0802714c 	.word	0x0802714c
 801a4f0:	08027428 	.word	0x08027428
 801a4f4:	08027190 	.word	0x08027190
 801a4f8:	08027444 	.word	0x08027444
 801a4fc:	08027460 	.word	0x08027460
 801a500:	2007edbc 	.word	0x2007edbc
 801a504:	2007edc4 	.word	0x2007edc4
 801a508:	2007edcc 	.word	0x2007edcc

0801a50c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801a50c:	b5b0      	push	{r4, r5, r7, lr}
 801a50e:	b090      	sub	sp, #64	; 0x40
 801a510:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801a512:	2300      	movs	r3, #0
 801a514:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801a518:	4b94      	ldr	r3, [pc, #592]	; (801a76c <tcp_slowtmr+0x260>)
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	3301      	adds	r3, #1
 801a51e:	4a93      	ldr	r2, [pc, #588]	; (801a76c <tcp_slowtmr+0x260>)
 801a520:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801a522:	4b93      	ldr	r3, [pc, #588]	; (801a770 <tcp_slowtmr+0x264>)
 801a524:	781b      	ldrb	r3, [r3, #0]
 801a526:	3301      	adds	r3, #1
 801a528:	b2da      	uxtb	r2, r3
 801a52a:	4b91      	ldr	r3, [pc, #580]	; (801a770 <tcp_slowtmr+0x264>)
 801a52c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801a52e:	2300      	movs	r3, #0
 801a530:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801a532:	4b90      	ldr	r3, [pc, #576]	; (801a774 <tcp_slowtmr+0x268>)
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801a538:	e29f      	b.n	801aa7a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801a53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a53c:	7d1b      	ldrb	r3, [r3, #20]
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d106      	bne.n	801a550 <tcp_slowtmr+0x44>
 801a542:	4b8d      	ldr	r3, [pc, #564]	; (801a778 <tcp_slowtmr+0x26c>)
 801a544:	f240 42be 	movw	r2, #1214	; 0x4be
 801a548:	498c      	ldr	r1, [pc, #560]	; (801a77c <tcp_slowtmr+0x270>)
 801a54a:	488d      	ldr	r0, [pc, #564]	; (801a780 <tcp_slowtmr+0x274>)
 801a54c:	f009 fd3c 	bl	8023fc8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801a550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a552:	7d1b      	ldrb	r3, [r3, #20]
 801a554:	2b01      	cmp	r3, #1
 801a556:	d106      	bne.n	801a566 <tcp_slowtmr+0x5a>
 801a558:	4b87      	ldr	r3, [pc, #540]	; (801a778 <tcp_slowtmr+0x26c>)
 801a55a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801a55e:	4989      	ldr	r1, [pc, #548]	; (801a784 <tcp_slowtmr+0x278>)
 801a560:	4887      	ldr	r0, [pc, #540]	; (801a780 <tcp_slowtmr+0x274>)
 801a562:	f009 fd31 	bl	8023fc8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801a566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a568:	7d1b      	ldrb	r3, [r3, #20]
 801a56a:	2b0a      	cmp	r3, #10
 801a56c:	d106      	bne.n	801a57c <tcp_slowtmr+0x70>
 801a56e:	4b82      	ldr	r3, [pc, #520]	; (801a778 <tcp_slowtmr+0x26c>)
 801a570:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801a574:	4984      	ldr	r1, [pc, #528]	; (801a788 <tcp_slowtmr+0x27c>)
 801a576:	4882      	ldr	r0, [pc, #520]	; (801a780 <tcp_slowtmr+0x274>)
 801a578:	f009 fd26 	bl	8023fc8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801a57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a57e:	7f9a      	ldrb	r2, [r3, #30]
 801a580:	4b7b      	ldr	r3, [pc, #492]	; (801a770 <tcp_slowtmr+0x264>)
 801a582:	781b      	ldrb	r3, [r3, #0]
 801a584:	429a      	cmp	r2, r3
 801a586:	d105      	bne.n	801a594 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801a588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a58a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a58e:	68db      	ldr	r3, [r3, #12]
 801a590:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801a592:	e272      	b.n	801aa7a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 801a594:	4b76      	ldr	r3, [pc, #472]	; (801a770 <tcp_slowtmr+0x264>)
 801a596:	781a      	ldrb	r2, [r3, #0]
 801a598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a59a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801a59c:	2300      	movs	r3, #0
 801a59e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801a5a2:	2300      	movs	r3, #0
 801a5a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801a5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5aa:	7d1b      	ldrb	r3, [r3, #20]
 801a5ac:	2b02      	cmp	r3, #2
 801a5ae:	d10a      	bne.n	801a5c6 <tcp_slowtmr+0xba>
 801a5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a5b6:	2b05      	cmp	r3, #5
 801a5b8:	d905      	bls.n	801a5c6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801a5ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5be:	3301      	adds	r3, #1
 801a5c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 801a5c4:	e11e      	b.n	801a804 <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801a5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a5cc:	2b0b      	cmp	r3, #11
 801a5ce:	d905      	bls.n	801a5dc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801a5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5d4:	3301      	adds	r3, #1
 801a5d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a5da:	e113      	b.n	801a804 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d075      	beq.n	801a6d2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801a5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d006      	beq.n	801a5fc <tcp_slowtmr+0xf0>
 801a5ee:	4b62      	ldr	r3, [pc, #392]	; (801a778 <tcp_slowtmr+0x26c>)
 801a5f0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801a5f4:	4965      	ldr	r1, [pc, #404]	; (801a78c <tcp_slowtmr+0x280>)
 801a5f6:	4862      	ldr	r0, [pc, #392]	; (801a780 <tcp_slowtmr+0x274>)
 801a5f8:	f009 fce6 	bl	8023fc8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801a5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a600:	2b00      	cmp	r3, #0
 801a602:	d106      	bne.n	801a612 <tcp_slowtmr+0x106>
 801a604:	4b5c      	ldr	r3, [pc, #368]	; (801a778 <tcp_slowtmr+0x26c>)
 801a606:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801a60a:	4961      	ldr	r1, [pc, #388]	; (801a790 <tcp_slowtmr+0x284>)
 801a60c:	485c      	ldr	r0, [pc, #368]	; (801a780 <tcp_slowtmr+0x274>)
 801a60e:	f009 fcdb 	bl	8023fc8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a614:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a618:	2b0b      	cmp	r3, #11
 801a61a:	d905      	bls.n	801a628 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801a61c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a620:	3301      	adds	r3, #1
 801a622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a626:	e0ed      	b.n	801a804 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801a628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a62a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a62e:	3b01      	subs	r3, #1
 801a630:	4a58      	ldr	r2, [pc, #352]	; (801a794 <tcp_slowtmr+0x288>)
 801a632:	5cd3      	ldrb	r3, [r2, r3]
 801a634:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801a636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a638:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a63c:	7c7a      	ldrb	r2, [r7, #17]
 801a63e:	429a      	cmp	r2, r3
 801a640:	d907      	bls.n	801a652 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801a642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a644:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a648:	3301      	adds	r3, #1
 801a64a:	b2da      	uxtb	r2, r3
 801a64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a64e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801a652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a654:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a658:	7c7a      	ldrb	r2, [r7, #17]
 801a65a:	429a      	cmp	r2, r3
 801a65c:	f200 80d2 	bhi.w	801a804 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801a660:	2301      	movs	r3, #1
 801a662:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801a664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a666:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d108      	bne.n	801a680 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801a66e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a670:	f005 faa0 	bl	801fbb4 <tcp_zero_window_probe>
 801a674:	4603      	mov	r3, r0
 801a676:	2b00      	cmp	r3, #0
 801a678:	d014      	beq.n	801a6a4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801a67a:	2300      	movs	r3, #0
 801a67c:	623b      	str	r3, [r7, #32]
 801a67e:	e011      	b.n	801a6a4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801a680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a682:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a686:	4619      	mov	r1, r3
 801a688:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a68a:	f004 f925 	bl	801e8d8 <tcp_split_unsent_seg>
 801a68e:	4603      	mov	r3, r0
 801a690:	2b00      	cmp	r3, #0
 801a692:	d107      	bne.n	801a6a4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801a694:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a696:	f004 fbc5 	bl	801ee24 <tcp_output>
 801a69a:	4603      	mov	r3, r0
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	d101      	bne.n	801a6a4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801a6a0:	2300      	movs	r3, #0
 801a6a2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801a6a4:	6a3b      	ldr	r3, [r7, #32]
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	f000 80ac 	beq.w	801a804 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801a6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6ae:	2200      	movs	r2, #0
 801a6b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801a6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a6ba:	2b06      	cmp	r3, #6
 801a6bc:	f200 80a2 	bhi.w	801a804 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801a6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a6c6:	3301      	adds	r3, #1
 801a6c8:	b2da      	uxtb	r2, r3
 801a6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801a6d0:	e098      	b.n	801a804 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801a6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	db0f      	blt.n	801a6fc <tcp_slowtmr+0x1f0>
 801a6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a6e2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a6e6:	4293      	cmp	r3, r2
 801a6e8:	d008      	beq.n	801a6fc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801a6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a6f0:	b29b      	uxth	r3, r3
 801a6f2:	3301      	adds	r3, #1
 801a6f4:	b29b      	uxth	r3, r3
 801a6f6:	b21a      	sxth	r2, r3
 801a6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6fa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801a6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6fe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801a702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a704:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801a708:	429a      	cmp	r2, r3
 801a70a:	db7b      	blt.n	801a804 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801a70c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a70e:	f004 fe89 	bl	801f424 <tcp_rexmit_rto_prepare>
 801a712:	4603      	mov	r3, r0
 801a714:	2b00      	cmp	r3, #0
 801a716:	d007      	beq.n	801a728 <tcp_slowtmr+0x21c>
 801a718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a71a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d171      	bne.n	801a804 <tcp_slowtmr+0x2f8>
 801a720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a724:	2b00      	cmp	r3, #0
 801a726:	d06d      	beq.n	801a804 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801a728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a72a:	7d1b      	ldrb	r3, [r3, #20]
 801a72c:	2b02      	cmp	r3, #2
 801a72e:	d03a      	beq.n	801a7a6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801a730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a732:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a736:	2b0c      	cmp	r3, #12
 801a738:	bf28      	it	cs
 801a73a:	230c      	movcs	r3, #12
 801a73c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801a73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a740:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a744:	10db      	asrs	r3, r3, #3
 801a746:	b21b      	sxth	r3, r3
 801a748:	461a      	mov	r2, r3
 801a74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a74c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a750:	4413      	add	r3, r2
 801a752:	7efa      	ldrb	r2, [r7, #27]
 801a754:	4910      	ldr	r1, [pc, #64]	; (801a798 <tcp_slowtmr+0x28c>)
 801a756:	5c8a      	ldrb	r2, [r1, r2]
 801a758:	4093      	lsls	r3, r2
 801a75a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801a75c:	697b      	ldr	r3, [r7, #20]
 801a75e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801a762:	4293      	cmp	r3, r2
 801a764:	dc1a      	bgt.n	801a79c <tcp_slowtmr+0x290>
 801a766:	697b      	ldr	r3, [r7, #20]
 801a768:	b21a      	sxth	r2, r3
 801a76a:	e019      	b.n	801a7a0 <tcp_slowtmr+0x294>
 801a76c:	2007edb8 	.word	0x2007edb8
 801a770:	2007edce 	.word	0x2007edce
 801a774:	2007edc4 	.word	0x2007edc4
 801a778:	0802714c 	.word	0x0802714c
 801a77c:	08027490 	.word	0x08027490
 801a780:	08027190 	.word	0x08027190
 801a784:	080274bc 	.word	0x080274bc
 801a788:	080274e8 	.word	0x080274e8
 801a78c:	08027518 	.word	0x08027518
 801a790:	0802754c 	.word	0x0802754c
 801a794:	08029b04 	.word	0x08029b04
 801a798:	08029af4 	.word	0x08029af4
 801a79c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801a7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7a8:	2200      	movs	r2, #0
 801a7aa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801a7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a7b8:	4293      	cmp	r3, r2
 801a7ba:	bf28      	it	cs
 801a7bc:	4613      	movcs	r3, r2
 801a7be:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801a7c0:	8a7b      	ldrh	r3, [r7, #18]
 801a7c2:	085b      	lsrs	r3, r3, #1
 801a7c4:	b29a      	uxth	r2, r3
 801a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801a7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a7d6:	005b      	lsls	r3, r3, #1
 801a7d8:	b29b      	uxth	r3, r3
 801a7da:	429a      	cmp	r2, r3
 801a7dc:	d206      	bcs.n	801a7ec <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801a7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a7e2:	005b      	lsls	r3, r3, #1
 801a7e4:	b29a      	uxth	r2, r3
 801a7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801a7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7ee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801a7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7f8:	2200      	movs	r2, #0
 801a7fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801a7fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a800:	f004 fe8a 	bl	801f518 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801a804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a806:	7d1b      	ldrb	r3, [r3, #20]
 801a808:	2b06      	cmp	r3, #6
 801a80a:	d111      	bne.n	801a830 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801a80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a80e:	8b5b      	ldrh	r3, [r3, #26]
 801a810:	f003 0310 	and.w	r3, r3, #16
 801a814:	2b00      	cmp	r3, #0
 801a816:	d00b      	beq.n	801a830 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a818:	4b9d      	ldr	r3, [pc, #628]	; (801aa90 <tcp_slowtmr+0x584>)
 801a81a:	681a      	ldr	r2, [r3, #0]
 801a81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a81e:	6a1b      	ldr	r3, [r3, #32]
 801a820:	1ad3      	subs	r3, r2, r3
 801a822:	2b28      	cmp	r3, #40	; 0x28
 801a824:	d904      	bls.n	801a830 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801a826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a82a:	3301      	adds	r3, #1
 801a82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a832:	7a5b      	ldrb	r3, [r3, #9]
 801a834:	f003 0308 	and.w	r3, r3, #8
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d04c      	beq.n	801a8d6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801a83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a83e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a840:	2b04      	cmp	r3, #4
 801a842:	d003      	beq.n	801a84c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801a844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a846:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801a848:	2b07      	cmp	r3, #7
 801a84a:	d144      	bne.n	801a8d6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a84c:	4b90      	ldr	r3, [pc, #576]	; (801aa90 <tcp_slowtmr+0x584>)
 801a84e:	681a      	ldr	r2, [r3, #0]
 801a850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a852:	6a1b      	ldr	r3, [r3, #32]
 801a854:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801a856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801a85c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801a860:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801a864:	498b      	ldr	r1, [pc, #556]	; (801aa94 <tcp_slowtmr+0x588>)
 801a866:	fba1 1303 	umull	r1, r3, r1, r3
 801a86a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a86c:	429a      	cmp	r2, r3
 801a86e:	d90a      	bls.n	801a886 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801a870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a874:	3301      	adds	r3, #1
 801a876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801a87a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a87e:	3301      	adds	r3, #1
 801a880:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a884:	e027      	b.n	801a8d6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a886:	4b82      	ldr	r3, [pc, #520]	; (801aa90 <tcp_slowtmr+0x584>)
 801a888:	681a      	ldr	r2, [r3, #0]
 801a88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a88c:	6a1b      	ldr	r3, [r3, #32]
 801a88e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801a890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a892:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801a896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a898:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801a89c:	4618      	mov	r0, r3
 801a89e:	4b7e      	ldr	r3, [pc, #504]	; (801aa98 <tcp_slowtmr+0x58c>)
 801a8a0:	fb00 f303 	mul.w	r3, r0, r3
 801a8a4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801a8a6:	497b      	ldr	r1, [pc, #492]	; (801aa94 <tcp_slowtmr+0x588>)
 801a8a8:	fba1 1303 	umull	r1, r3, r1, r3
 801a8ac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a8ae:	429a      	cmp	r2, r3
 801a8b0:	d911      	bls.n	801a8d6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801a8b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a8b4:	f005 f93e 	bl	801fb34 <tcp_keepalive>
 801a8b8:	4603      	mov	r3, r0
 801a8ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801a8be:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d107      	bne.n	801a8d6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801a8cc:	3301      	adds	r3, #1
 801a8ce:	b2da      	uxtb	r2, r3
 801a8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8d2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801a8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d011      	beq.n	801a902 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801a8de:	4b6c      	ldr	r3, [pc, #432]	; (801aa90 <tcp_slowtmr+0x584>)
 801a8e0:	681a      	ldr	r2, [r3, #0]
 801a8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8e4:	6a1b      	ldr	r3, [r3, #32]
 801a8e6:	1ad2      	subs	r2, r2, r3
 801a8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8ea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801a8ee:	4619      	mov	r1, r3
 801a8f0:	460b      	mov	r3, r1
 801a8f2:	005b      	lsls	r3, r3, #1
 801a8f4:	440b      	add	r3, r1
 801a8f6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801a8f8:	429a      	cmp	r2, r3
 801a8fa:	d302      	bcc.n	801a902 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801a8fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a8fe:	f000 fed9 	bl	801b6b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801a902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a904:	7d1b      	ldrb	r3, [r3, #20]
 801a906:	2b03      	cmp	r3, #3
 801a908:	d10b      	bne.n	801a922 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a90a:	4b61      	ldr	r3, [pc, #388]	; (801aa90 <tcp_slowtmr+0x584>)
 801a90c:	681a      	ldr	r2, [r3, #0]
 801a90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a910:	6a1b      	ldr	r3, [r3, #32]
 801a912:	1ad3      	subs	r3, r2, r3
 801a914:	2b28      	cmp	r3, #40	; 0x28
 801a916:	d904      	bls.n	801a922 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801a918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a91c:	3301      	adds	r3, #1
 801a91e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801a922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a924:	7d1b      	ldrb	r3, [r3, #20]
 801a926:	2b09      	cmp	r3, #9
 801a928:	d10b      	bne.n	801a942 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a92a:	4b59      	ldr	r3, [pc, #356]	; (801aa90 <tcp_slowtmr+0x584>)
 801a92c:	681a      	ldr	r2, [r3, #0]
 801a92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a930:	6a1b      	ldr	r3, [r3, #32]
 801a932:	1ad3      	subs	r3, r2, r3
 801a934:	2bf0      	cmp	r3, #240	; 0xf0
 801a936:	d904      	bls.n	801a942 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801a938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a93c:	3301      	adds	r3, #1
 801a93e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a946:	2b00      	cmp	r3, #0
 801a948:	d060      	beq.n	801aa0c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801a94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a94c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a950:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801a952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a954:	f000 fcf4 	bl	801b340 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801a958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d010      	beq.n	801a980 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801a95e:	4b4f      	ldr	r3, [pc, #316]	; (801aa9c <tcp_slowtmr+0x590>)
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a964:	429a      	cmp	r2, r3
 801a966:	d106      	bne.n	801a976 <tcp_slowtmr+0x46a>
 801a968:	4b4d      	ldr	r3, [pc, #308]	; (801aaa0 <tcp_slowtmr+0x594>)
 801a96a:	f240 526d 	movw	r2, #1389	; 0x56d
 801a96e:	494d      	ldr	r1, [pc, #308]	; (801aaa4 <tcp_slowtmr+0x598>)
 801a970:	484d      	ldr	r0, [pc, #308]	; (801aaa8 <tcp_slowtmr+0x59c>)
 801a972:	f009 fb29 	bl	8023fc8 <iprintf>
        prev->next = pcb->next;
 801a976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a978:	68da      	ldr	r2, [r3, #12]
 801a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a97c:	60da      	str	r2, [r3, #12]
 801a97e:	e00f      	b.n	801a9a0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801a980:	4b46      	ldr	r3, [pc, #280]	; (801aa9c <tcp_slowtmr+0x590>)
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a986:	429a      	cmp	r2, r3
 801a988:	d006      	beq.n	801a998 <tcp_slowtmr+0x48c>
 801a98a:	4b45      	ldr	r3, [pc, #276]	; (801aaa0 <tcp_slowtmr+0x594>)
 801a98c:	f240 5271 	movw	r2, #1393	; 0x571
 801a990:	4946      	ldr	r1, [pc, #280]	; (801aaac <tcp_slowtmr+0x5a0>)
 801a992:	4845      	ldr	r0, [pc, #276]	; (801aaa8 <tcp_slowtmr+0x59c>)
 801a994:	f009 fb18 	bl	8023fc8 <iprintf>
        tcp_active_pcbs = pcb->next;
 801a998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a99a:	68db      	ldr	r3, [r3, #12]
 801a99c:	4a3f      	ldr	r2, [pc, #252]	; (801aa9c <tcp_slowtmr+0x590>)
 801a99e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801a9a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d013      	beq.n	801a9d0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801a9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9aa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801a9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9ae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a9b0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801a9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9b4:	3304      	adds	r3, #4
 801a9b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a9b8:	8ad2      	ldrh	r2, [r2, #22]
 801a9ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a9bc:	8b09      	ldrh	r1, [r1, #24]
 801a9be:	9102      	str	r1, [sp, #8]
 801a9c0:	9201      	str	r2, [sp, #4]
 801a9c2:	9300      	str	r3, [sp, #0]
 801a9c4:	462b      	mov	r3, r5
 801a9c6:	4622      	mov	r2, r4
 801a9c8:	4601      	mov	r1, r0
 801a9ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a9cc:	f004 fffe 	bl	801f9cc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801a9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9d2:	691b      	ldr	r3, [r3, #16]
 801a9d4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801a9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9d8:	7d1b      	ldrb	r3, [r3, #20]
 801a9da:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801a9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9de:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801a9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9e2:	68db      	ldr	r3, [r3, #12]
 801a9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a9e6:	6838      	ldr	r0, [r7, #0]
 801a9e8:	f7fe fed6 	bl	8019798 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801a9ec:	4b30      	ldr	r3, [pc, #192]	; (801aab0 <tcp_slowtmr+0x5a4>)
 801a9ee:	2200      	movs	r2, #0
 801a9f0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801a9f2:	68fb      	ldr	r3, [r7, #12]
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d004      	beq.n	801aa02 <tcp_slowtmr+0x4f6>
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	f06f 010c 	mvn.w	r1, #12
 801a9fe:	68b8      	ldr	r0, [r7, #8]
 801aa00:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801aa02:	4b2b      	ldr	r3, [pc, #172]	; (801aab0 <tcp_slowtmr+0x5a4>)
 801aa04:	781b      	ldrb	r3, [r3, #0]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d037      	beq.n	801aa7a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801aa0a:	e590      	b.n	801a52e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801aa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa0e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801aa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa12:	68db      	ldr	r3, [r3, #12]
 801aa14:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801aa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa18:	7f1b      	ldrb	r3, [r3, #28]
 801aa1a:	3301      	adds	r3, #1
 801aa1c:	b2da      	uxtb	r2, r3
 801aa1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa20:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801aa22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa24:	7f1a      	ldrb	r2, [r3, #28]
 801aa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa28:	7f5b      	ldrb	r3, [r3, #29]
 801aa2a:	429a      	cmp	r2, r3
 801aa2c:	d325      	bcc.n	801aa7a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801aa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa30:	2200      	movs	r2, #0
 801aa32:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801aa34:	4b1e      	ldr	r3, [pc, #120]	; (801aab0 <tcp_slowtmr+0x5a4>)
 801aa36:	2200      	movs	r2, #0
 801aa38:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801aa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d00b      	beq.n	801aa5c <tcp_slowtmr+0x550>
 801aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801aa4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aa4c:	6912      	ldr	r2, [r2, #16]
 801aa4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801aa50:	4610      	mov	r0, r2
 801aa52:	4798      	blx	r3
 801aa54:	4603      	mov	r3, r0
 801aa56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801aa5a:	e002      	b.n	801aa62 <tcp_slowtmr+0x556>
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801aa62:	4b13      	ldr	r3, [pc, #76]	; (801aab0 <tcp_slowtmr+0x5a4>)
 801aa64:	781b      	ldrb	r3, [r3, #0]
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d000      	beq.n	801aa6c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801aa6a:	e560      	b.n	801a52e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801aa6c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d102      	bne.n	801aa7a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801aa74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aa76:	f004 f9d5 	bl	801ee24 <tcp_output>
  while (pcb != NULL) {
 801aa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	f47f ad5c 	bne.w	801a53a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801aa82:	2300      	movs	r3, #0
 801aa84:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801aa86:	4b0b      	ldr	r3, [pc, #44]	; (801aab4 <tcp_slowtmr+0x5a8>)
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801aa8c:	e067      	b.n	801ab5e <tcp_slowtmr+0x652>
 801aa8e:	bf00      	nop
 801aa90:	2007edb8 	.word	0x2007edb8
 801aa94:	10624dd3 	.word	0x10624dd3
 801aa98:	000124f8 	.word	0x000124f8
 801aa9c:	2007edc4 	.word	0x2007edc4
 801aaa0:	0802714c 	.word	0x0802714c
 801aaa4:	08027584 	.word	0x08027584
 801aaa8:	08027190 	.word	0x08027190
 801aaac:	080275b0 	.word	0x080275b0
 801aab0:	2007edcc 	.word	0x2007edcc
 801aab4:	2007edc8 	.word	0x2007edc8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801aab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aaba:	7d1b      	ldrb	r3, [r3, #20]
 801aabc:	2b0a      	cmp	r3, #10
 801aabe:	d006      	beq.n	801aace <tcp_slowtmr+0x5c2>
 801aac0:	4b2b      	ldr	r3, [pc, #172]	; (801ab70 <tcp_slowtmr+0x664>)
 801aac2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801aac6:	492b      	ldr	r1, [pc, #172]	; (801ab74 <tcp_slowtmr+0x668>)
 801aac8:	482b      	ldr	r0, [pc, #172]	; (801ab78 <tcp_slowtmr+0x66c>)
 801aaca:	f009 fa7d 	bl	8023fc8 <iprintf>
    pcb_remove = 0;
 801aace:	2300      	movs	r3, #0
 801aad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801aad4:	4b29      	ldr	r3, [pc, #164]	; (801ab7c <tcp_slowtmr+0x670>)
 801aad6:	681a      	ldr	r2, [r3, #0]
 801aad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aada:	6a1b      	ldr	r3, [r3, #32]
 801aadc:	1ad3      	subs	r3, r2, r3
 801aade:	2bf0      	cmp	r3, #240	; 0xf0
 801aae0:	d904      	bls.n	801aaec <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801aae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aae6:	3301      	adds	r3, #1
 801aae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801aaec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d02f      	beq.n	801ab54 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801aaf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801aaf6:	f000 fc23 	bl	801b340 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801aafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d010      	beq.n	801ab22 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801ab00:	4b1f      	ldr	r3, [pc, #124]	; (801ab80 <tcp_slowtmr+0x674>)
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ab06:	429a      	cmp	r2, r3
 801ab08:	d106      	bne.n	801ab18 <tcp_slowtmr+0x60c>
 801ab0a:	4b19      	ldr	r3, [pc, #100]	; (801ab70 <tcp_slowtmr+0x664>)
 801ab0c:	f240 52af 	movw	r2, #1455	; 0x5af
 801ab10:	491c      	ldr	r1, [pc, #112]	; (801ab84 <tcp_slowtmr+0x678>)
 801ab12:	4819      	ldr	r0, [pc, #100]	; (801ab78 <tcp_slowtmr+0x66c>)
 801ab14:	f009 fa58 	bl	8023fc8 <iprintf>
        prev->next = pcb->next;
 801ab18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab1a:	68da      	ldr	r2, [r3, #12]
 801ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab1e:	60da      	str	r2, [r3, #12]
 801ab20:	e00f      	b.n	801ab42 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801ab22:	4b17      	ldr	r3, [pc, #92]	; (801ab80 <tcp_slowtmr+0x674>)
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ab28:	429a      	cmp	r2, r3
 801ab2a:	d006      	beq.n	801ab3a <tcp_slowtmr+0x62e>
 801ab2c:	4b10      	ldr	r3, [pc, #64]	; (801ab70 <tcp_slowtmr+0x664>)
 801ab2e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801ab32:	4915      	ldr	r1, [pc, #84]	; (801ab88 <tcp_slowtmr+0x67c>)
 801ab34:	4810      	ldr	r0, [pc, #64]	; (801ab78 <tcp_slowtmr+0x66c>)
 801ab36:	f009 fa47 	bl	8023fc8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801ab3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab3c:	68db      	ldr	r3, [r3, #12]
 801ab3e:	4a10      	ldr	r2, [pc, #64]	; (801ab80 <tcp_slowtmr+0x674>)
 801ab40:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801ab42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab44:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801ab46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab48:	68db      	ldr	r3, [r3, #12]
 801ab4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801ab4c:	69f8      	ldr	r0, [r7, #28]
 801ab4e:	f7fe fe23 	bl	8019798 <tcp_free>
 801ab52:	e004      	b.n	801ab5e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801ab54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab56:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab5a:	68db      	ldr	r3, [r3, #12]
 801ab5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801ab5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d1a9      	bne.n	801aab8 <tcp_slowtmr+0x5ac>
    }
  }
}
 801ab64:	bf00      	nop
 801ab66:	bf00      	nop
 801ab68:	3730      	adds	r7, #48	; 0x30
 801ab6a:	46bd      	mov	sp, r7
 801ab6c:	bdb0      	pop	{r4, r5, r7, pc}
 801ab6e:	bf00      	nop
 801ab70:	0802714c 	.word	0x0802714c
 801ab74:	080275dc 	.word	0x080275dc
 801ab78:	08027190 	.word	0x08027190
 801ab7c:	2007edb8 	.word	0x2007edb8
 801ab80:	2007edc8 	.word	0x2007edc8
 801ab84:	0802760c 	.word	0x0802760c
 801ab88:	08027634 	.word	0x08027634

0801ab8c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801ab8c:	b580      	push	{r7, lr}
 801ab8e:	b082      	sub	sp, #8
 801ab90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801ab92:	4b2d      	ldr	r3, [pc, #180]	; (801ac48 <tcp_fasttmr+0xbc>)
 801ab94:	781b      	ldrb	r3, [r3, #0]
 801ab96:	3301      	adds	r3, #1
 801ab98:	b2da      	uxtb	r2, r3
 801ab9a:	4b2b      	ldr	r3, [pc, #172]	; (801ac48 <tcp_fasttmr+0xbc>)
 801ab9c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801ab9e:	4b2b      	ldr	r3, [pc, #172]	; (801ac4c <tcp_fasttmr+0xc0>)
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801aba4:	e048      	b.n	801ac38 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	7f9a      	ldrb	r2, [r3, #30]
 801abaa:	4b27      	ldr	r3, [pc, #156]	; (801ac48 <tcp_fasttmr+0xbc>)
 801abac:	781b      	ldrb	r3, [r3, #0]
 801abae:	429a      	cmp	r2, r3
 801abb0:	d03f      	beq.n	801ac32 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801abb2:	4b25      	ldr	r3, [pc, #148]	; (801ac48 <tcp_fasttmr+0xbc>)
 801abb4:	781a      	ldrb	r2, [r3, #0]
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	8b5b      	ldrh	r3, [r3, #26]
 801abbe:	f003 0301 	and.w	r3, r3, #1
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	d010      	beq.n	801abe8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	8b5b      	ldrh	r3, [r3, #26]
 801abca:	f043 0302 	orr.w	r3, r3, #2
 801abce:	b29a      	uxth	r2, r3
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801abd4:	6878      	ldr	r0, [r7, #4]
 801abd6:	f004 f925 	bl	801ee24 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	8b5b      	ldrh	r3, [r3, #26]
 801abde:	f023 0303 	bic.w	r3, r3, #3
 801abe2:	b29a      	uxth	r2, r3
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	8b5b      	ldrh	r3, [r3, #26]
 801abec:	f003 0308 	and.w	r3, r3, #8
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d009      	beq.n	801ac08 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	8b5b      	ldrh	r3, [r3, #26]
 801abf8:	f023 0308 	bic.w	r3, r3, #8
 801abfc:	b29a      	uxth	r2, r3
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801ac02:	6878      	ldr	r0, [r7, #4]
 801ac04:	f7fe ff5c 	bl	8019ac0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	68db      	ldr	r3, [r3, #12]
 801ac0c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	d00a      	beq.n	801ac2c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801ac16:	4b0e      	ldr	r3, [pc, #56]	; (801ac50 <tcp_fasttmr+0xc4>)
 801ac18:	2200      	movs	r2, #0
 801ac1a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801ac1c:	6878      	ldr	r0, [r7, #4]
 801ac1e:	f000 f819 	bl	801ac54 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801ac22:	4b0b      	ldr	r3, [pc, #44]	; (801ac50 <tcp_fasttmr+0xc4>)
 801ac24:	781b      	ldrb	r3, [r3, #0]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d000      	beq.n	801ac2c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801ac2a:	e7b8      	b.n	801ab9e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801ac2c:	683b      	ldr	r3, [r7, #0]
 801ac2e:	607b      	str	r3, [r7, #4]
 801ac30:	e002      	b.n	801ac38 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	68db      	ldr	r3, [r3, #12]
 801ac36:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d1b3      	bne.n	801aba6 <tcp_fasttmr+0x1a>
    }
  }
}
 801ac3e:	bf00      	nop
 801ac40:	bf00      	nop
 801ac42:	3708      	adds	r7, #8
 801ac44:	46bd      	mov	sp, r7
 801ac46:	bd80      	pop	{r7, pc}
 801ac48:	2007edce 	.word	0x2007edce
 801ac4c:	2007edc4 	.word	0x2007edc4
 801ac50:	2007edcc 	.word	0x2007edcc

0801ac54 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801ac54:	b590      	push	{r4, r7, lr}
 801ac56:	b085      	sub	sp, #20
 801ac58:	af00      	add	r7, sp, #0
 801ac5a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d109      	bne.n	801ac76 <tcp_process_refused_data+0x22>
 801ac62:	4b37      	ldr	r3, [pc, #220]	; (801ad40 <tcp_process_refused_data+0xec>)
 801ac64:	f240 6209 	movw	r2, #1545	; 0x609
 801ac68:	4936      	ldr	r1, [pc, #216]	; (801ad44 <tcp_process_refused_data+0xf0>)
 801ac6a:	4837      	ldr	r0, [pc, #220]	; (801ad48 <tcp_process_refused_data+0xf4>)
 801ac6c:	f009 f9ac 	bl	8023fc8 <iprintf>
 801ac70:	f06f 030f 	mvn.w	r3, #15
 801ac74:	e060      	b.n	801ad38 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ac7a:	7b5b      	ldrb	r3, [r3, #13]
 801ac7c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ac82:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	2200      	movs	r2, #0
 801ac88:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d00b      	beq.n	801acac <tcp_process_refused_data+0x58>
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	6918      	ldr	r0, [r3, #16]
 801ac9e:	2300      	movs	r3, #0
 801aca0:	68ba      	ldr	r2, [r7, #8]
 801aca2:	6879      	ldr	r1, [r7, #4]
 801aca4:	47a0      	blx	r4
 801aca6:	4603      	mov	r3, r0
 801aca8:	73fb      	strb	r3, [r7, #15]
 801acaa:	e007      	b.n	801acbc <tcp_process_refused_data+0x68>
 801acac:	2300      	movs	r3, #0
 801acae:	68ba      	ldr	r2, [r7, #8]
 801acb0:	6879      	ldr	r1, [r7, #4]
 801acb2:	2000      	movs	r0, #0
 801acb4:	f000 f8a4 	bl	801ae00 <tcp_recv_null>
 801acb8:	4603      	mov	r3, r0
 801acba:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801acbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d12a      	bne.n	801ad1a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801acc4:	7bbb      	ldrb	r3, [r7, #14]
 801acc6:	f003 0320 	and.w	r3, r3, #32
 801acca:	2b00      	cmp	r3, #0
 801accc:	d033      	beq.n	801ad36 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801acd2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801acd6:	d005      	beq.n	801ace4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801acdc:	3301      	adds	r3, #1
 801acde:	b29a      	uxth	r2, r3
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801acea:	2b00      	cmp	r3, #0
 801acec:	d00b      	beq.n	801ad06 <tcp_process_refused_data+0xb2>
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	6918      	ldr	r0, [r3, #16]
 801acf8:	2300      	movs	r3, #0
 801acfa:	2200      	movs	r2, #0
 801acfc:	6879      	ldr	r1, [r7, #4]
 801acfe:	47a0      	blx	r4
 801ad00:	4603      	mov	r3, r0
 801ad02:	73fb      	strb	r3, [r7, #15]
 801ad04:	e001      	b.n	801ad0a <tcp_process_refused_data+0xb6>
 801ad06:	2300      	movs	r3, #0
 801ad08:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801ad0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad0e:	f113 0f0d 	cmn.w	r3, #13
 801ad12:	d110      	bne.n	801ad36 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801ad14:	f06f 030c 	mvn.w	r3, #12
 801ad18:	e00e      	b.n	801ad38 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801ad1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad1e:	f113 0f0d 	cmn.w	r3, #13
 801ad22:	d102      	bne.n	801ad2a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801ad24:	f06f 030c 	mvn.w	r3, #12
 801ad28:	e006      	b.n	801ad38 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	68ba      	ldr	r2, [r7, #8]
 801ad2e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801ad30:	f06f 0304 	mvn.w	r3, #4
 801ad34:	e000      	b.n	801ad38 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801ad36:	2300      	movs	r3, #0
}
 801ad38:	4618      	mov	r0, r3
 801ad3a:	3714      	adds	r7, #20
 801ad3c:	46bd      	mov	sp, r7
 801ad3e:	bd90      	pop	{r4, r7, pc}
 801ad40:	0802714c 	.word	0x0802714c
 801ad44:	0802765c 	.word	0x0802765c
 801ad48:	08027190 	.word	0x08027190

0801ad4c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801ad4c:	b580      	push	{r7, lr}
 801ad4e:	b084      	sub	sp, #16
 801ad50:	af00      	add	r7, sp, #0
 801ad52:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801ad54:	e007      	b.n	801ad66 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801ad5c:	6878      	ldr	r0, [r7, #4]
 801ad5e:	f000 f80a 	bl	801ad76 <tcp_seg_free>
    seg = next;
 801ad62:	68fb      	ldr	r3, [r7, #12]
 801ad64:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	2b00      	cmp	r3, #0
 801ad6a:	d1f4      	bne.n	801ad56 <tcp_segs_free+0xa>
  }
}
 801ad6c:	bf00      	nop
 801ad6e:	bf00      	nop
 801ad70:	3710      	adds	r7, #16
 801ad72:	46bd      	mov	sp, r7
 801ad74:	bd80      	pop	{r7, pc}

0801ad76 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801ad76:	b580      	push	{r7, lr}
 801ad78:	b082      	sub	sp, #8
 801ad7a:	af00      	add	r7, sp, #0
 801ad7c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d00c      	beq.n	801ad9e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	685b      	ldr	r3, [r3, #4]
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d004      	beq.n	801ad96 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	685b      	ldr	r3, [r3, #4]
 801ad90:	4618      	mov	r0, r3
 801ad92:	f7fe fa45 	bl	8019220 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801ad96:	6879      	ldr	r1, [r7, #4]
 801ad98:	2003      	movs	r0, #3
 801ad9a:	f7fd faa7 	bl	80182ec <memp_free>
  }
}
 801ad9e:	bf00      	nop
 801ada0:	3708      	adds	r7, #8
 801ada2:	46bd      	mov	sp, r7
 801ada4:	bd80      	pop	{r7, pc}
	...

0801ada8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801ada8:	b580      	push	{r7, lr}
 801adaa:	b084      	sub	sp, #16
 801adac:	af00      	add	r7, sp, #0
 801adae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d106      	bne.n	801adc4 <tcp_seg_copy+0x1c>
 801adb6:	4b0f      	ldr	r3, [pc, #60]	; (801adf4 <tcp_seg_copy+0x4c>)
 801adb8:	f240 6282 	movw	r2, #1666	; 0x682
 801adbc:	490e      	ldr	r1, [pc, #56]	; (801adf8 <tcp_seg_copy+0x50>)
 801adbe:	480f      	ldr	r0, [pc, #60]	; (801adfc <tcp_seg_copy+0x54>)
 801adc0:	f009 f902 	bl	8023fc8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801adc4:	2003      	movs	r0, #3
 801adc6:	f7fd fa15 	bl	80181f4 <memp_malloc>
 801adca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801adcc:	68fb      	ldr	r3, [r7, #12]
 801adce:	2b00      	cmp	r3, #0
 801add0:	d101      	bne.n	801add6 <tcp_seg_copy+0x2e>
    return NULL;
 801add2:	2300      	movs	r3, #0
 801add4:	e00a      	b.n	801adec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801add6:	2214      	movs	r2, #20
 801add8:	6879      	ldr	r1, [r7, #4]
 801adda:	68f8      	ldr	r0, [r7, #12]
 801addc:	f009 fb5f 	bl	802449e <memcpy>
  pbuf_ref(cseg->p);
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	685b      	ldr	r3, [r3, #4]
 801ade4:	4618      	mov	r0, r3
 801ade6:	f7fe fac1 	bl	801936c <pbuf_ref>
  return cseg;
 801adea:	68fb      	ldr	r3, [r7, #12]
}
 801adec:	4618      	mov	r0, r3
 801adee:	3710      	adds	r7, #16
 801adf0:	46bd      	mov	sp, r7
 801adf2:	bd80      	pop	{r7, pc}
 801adf4:	0802714c 	.word	0x0802714c
 801adf8:	080276a0 	.word	0x080276a0
 801adfc:	08027190 	.word	0x08027190

0801ae00 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801ae00:	b580      	push	{r7, lr}
 801ae02:	b084      	sub	sp, #16
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	60f8      	str	r0, [r7, #12]
 801ae08:	60b9      	str	r1, [r7, #8]
 801ae0a:	607a      	str	r2, [r7, #4]
 801ae0c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801ae0e:	68bb      	ldr	r3, [r7, #8]
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	d109      	bne.n	801ae28 <tcp_recv_null+0x28>
 801ae14:	4b12      	ldr	r3, [pc, #72]	; (801ae60 <tcp_recv_null+0x60>)
 801ae16:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801ae1a:	4912      	ldr	r1, [pc, #72]	; (801ae64 <tcp_recv_null+0x64>)
 801ae1c:	4812      	ldr	r0, [pc, #72]	; (801ae68 <tcp_recv_null+0x68>)
 801ae1e:	f009 f8d3 	bl	8023fc8 <iprintf>
 801ae22:	f06f 030f 	mvn.w	r3, #15
 801ae26:	e016      	b.n	801ae56 <tcp_recv_null+0x56>

  if (p != NULL) {
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	d009      	beq.n	801ae42 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	891b      	ldrh	r3, [r3, #8]
 801ae32:	4619      	mov	r1, r3
 801ae34:	68b8      	ldr	r0, [r7, #8]
 801ae36:	f7ff f9bb 	bl	801a1b0 <tcp_recved>
    pbuf_free(p);
 801ae3a:	6878      	ldr	r0, [r7, #4]
 801ae3c:	f7fe f9f0 	bl	8019220 <pbuf_free>
 801ae40:	e008      	b.n	801ae54 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801ae42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d104      	bne.n	801ae54 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801ae4a:	68b8      	ldr	r0, [r7, #8]
 801ae4c:	f7fe fea2 	bl	8019b94 <tcp_close>
 801ae50:	4603      	mov	r3, r0
 801ae52:	e000      	b.n	801ae56 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801ae54:	2300      	movs	r3, #0
}
 801ae56:	4618      	mov	r0, r3
 801ae58:	3710      	adds	r7, #16
 801ae5a:	46bd      	mov	sp, r7
 801ae5c:	bd80      	pop	{r7, pc}
 801ae5e:	bf00      	nop
 801ae60:	0802714c 	.word	0x0802714c
 801ae64:	080276bc 	.word	0x080276bc
 801ae68:	08027190 	.word	0x08027190

0801ae6c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801ae6c:	b580      	push	{r7, lr}
 801ae6e:	b086      	sub	sp, #24
 801ae70:	af00      	add	r7, sp, #0
 801ae72:	4603      	mov	r3, r0
 801ae74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801ae76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	db01      	blt.n	801ae82 <tcp_kill_prio+0x16>
 801ae7e:	79fb      	ldrb	r3, [r7, #7]
 801ae80:	e000      	b.n	801ae84 <tcp_kill_prio+0x18>
 801ae82:	237f      	movs	r3, #127	; 0x7f
 801ae84:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801ae86:	7afb      	ldrb	r3, [r7, #11]
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d034      	beq.n	801aef6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801ae8c:	7afb      	ldrb	r3, [r7, #11]
 801ae8e:	3b01      	subs	r3, #1
 801ae90:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801ae92:	2300      	movs	r3, #0
 801ae94:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801ae96:	2300      	movs	r3, #0
 801ae98:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ae9a:	4b19      	ldr	r3, [pc, #100]	; (801af00 <tcp_kill_prio+0x94>)
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	617b      	str	r3, [r7, #20]
 801aea0:	e01f      	b.n	801aee2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801aea2:	697b      	ldr	r3, [r7, #20]
 801aea4:	7d5b      	ldrb	r3, [r3, #21]
 801aea6:	7afa      	ldrb	r2, [r7, #11]
 801aea8:	429a      	cmp	r2, r3
 801aeaa:	d80c      	bhi.n	801aec6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801aeac:	697b      	ldr	r3, [r7, #20]
 801aeae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801aeb0:	7afa      	ldrb	r2, [r7, #11]
 801aeb2:	429a      	cmp	r2, r3
 801aeb4:	d112      	bne.n	801aedc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801aeb6:	4b13      	ldr	r3, [pc, #76]	; (801af04 <tcp_kill_prio+0x98>)
 801aeb8:	681a      	ldr	r2, [r3, #0]
 801aeba:	697b      	ldr	r3, [r7, #20]
 801aebc:	6a1b      	ldr	r3, [r3, #32]
 801aebe:	1ad3      	subs	r3, r2, r3
 801aec0:	68fa      	ldr	r2, [r7, #12]
 801aec2:	429a      	cmp	r2, r3
 801aec4:	d80a      	bhi.n	801aedc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801aec6:	4b0f      	ldr	r3, [pc, #60]	; (801af04 <tcp_kill_prio+0x98>)
 801aec8:	681a      	ldr	r2, [r3, #0]
 801aeca:	697b      	ldr	r3, [r7, #20]
 801aecc:	6a1b      	ldr	r3, [r3, #32]
 801aece:	1ad3      	subs	r3, r2, r3
 801aed0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801aed2:	697b      	ldr	r3, [r7, #20]
 801aed4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801aed6:	697b      	ldr	r3, [r7, #20]
 801aed8:	7d5b      	ldrb	r3, [r3, #21]
 801aeda:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801aedc:	697b      	ldr	r3, [r7, #20]
 801aede:	68db      	ldr	r3, [r3, #12]
 801aee0:	617b      	str	r3, [r7, #20]
 801aee2:	697b      	ldr	r3, [r7, #20]
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d1dc      	bne.n	801aea2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801aee8:	693b      	ldr	r3, [r7, #16]
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d004      	beq.n	801aef8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801aeee:	6938      	ldr	r0, [r7, #16]
 801aef0:	f7fe ff96 	bl	8019e20 <tcp_abort>
 801aef4:	e000      	b.n	801aef8 <tcp_kill_prio+0x8c>
    return;
 801aef6:	bf00      	nop
  }
}
 801aef8:	3718      	adds	r7, #24
 801aefa:	46bd      	mov	sp, r7
 801aefc:	bd80      	pop	{r7, pc}
 801aefe:	bf00      	nop
 801af00:	2007edc4 	.word	0x2007edc4
 801af04:	2007edb8 	.word	0x2007edb8

0801af08 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801af08:	b580      	push	{r7, lr}
 801af0a:	b086      	sub	sp, #24
 801af0c:	af00      	add	r7, sp, #0
 801af0e:	4603      	mov	r3, r0
 801af10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801af12:	79fb      	ldrb	r3, [r7, #7]
 801af14:	2b08      	cmp	r3, #8
 801af16:	d009      	beq.n	801af2c <tcp_kill_state+0x24>
 801af18:	79fb      	ldrb	r3, [r7, #7]
 801af1a:	2b09      	cmp	r3, #9
 801af1c:	d006      	beq.n	801af2c <tcp_kill_state+0x24>
 801af1e:	4b1a      	ldr	r3, [pc, #104]	; (801af88 <tcp_kill_state+0x80>)
 801af20:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801af24:	4919      	ldr	r1, [pc, #100]	; (801af8c <tcp_kill_state+0x84>)
 801af26:	481a      	ldr	r0, [pc, #104]	; (801af90 <tcp_kill_state+0x88>)
 801af28:	f009 f84e 	bl	8023fc8 <iprintf>

  inactivity = 0;
 801af2c:	2300      	movs	r3, #0
 801af2e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801af30:	2300      	movs	r3, #0
 801af32:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801af34:	4b17      	ldr	r3, [pc, #92]	; (801af94 <tcp_kill_state+0x8c>)
 801af36:	681b      	ldr	r3, [r3, #0]
 801af38:	617b      	str	r3, [r7, #20]
 801af3a:	e017      	b.n	801af6c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801af3c:	697b      	ldr	r3, [r7, #20]
 801af3e:	7d1b      	ldrb	r3, [r3, #20]
 801af40:	79fa      	ldrb	r2, [r7, #7]
 801af42:	429a      	cmp	r2, r3
 801af44:	d10f      	bne.n	801af66 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801af46:	4b14      	ldr	r3, [pc, #80]	; (801af98 <tcp_kill_state+0x90>)
 801af48:	681a      	ldr	r2, [r3, #0]
 801af4a:	697b      	ldr	r3, [r7, #20]
 801af4c:	6a1b      	ldr	r3, [r3, #32]
 801af4e:	1ad3      	subs	r3, r2, r3
 801af50:	68fa      	ldr	r2, [r7, #12]
 801af52:	429a      	cmp	r2, r3
 801af54:	d807      	bhi.n	801af66 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801af56:	4b10      	ldr	r3, [pc, #64]	; (801af98 <tcp_kill_state+0x90>)
 801af58:	681a      	ldr	r2, [r3, #0]
 801af5a:	697b      	ldr	r3, [r7, #20]
 801af5c:	6a1b      	ldr	r3, [r3, #32]
 801af5e:	1ad3      	subs	r3, r2, r3
 801af60:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801af62:	697b      	ldr	r3, [r7, #20]
 801af64:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801af66:	697b      	ldr	r3, [r7, #20]
 801af68:	68db      	ldr	r3, [r3, #12]
 801af6a:	617b      	str	r3, [r7, #20]
 801af6c:	697b      	ldr	r3, [r7, #20]
 801af6e:	2b00      	cmp	r3, #0
 801af70:	d1e4      	bne.n	801af3c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801af72:	693b      	ldr	r3, [r7, #16]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d003      	beq.n	801af80 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801af78:	2100      	movs	r1, #0
 801af7a:	6938      	ldr	r0, [r7, #16]
 801af7c:	f7fe fe92 	bl	8019ca4 <tcp_abandon>
  }
}
 801af80:	bf00      	nop
 801af82:	3718      	adds	r7, #24
 801af84:	46bd      	mov	sp, r7
 801af86:	bd80      	pop	{r7, pc}
 801af88:	0802714c 	.word	0x0802714c
 801af8c:	080276d8 	.word	0x080276d8
 801af90:	08027190 	.word	0x08027190
 801af94:	2007edc4 	.word	0x2007edc4
 801af98:	2007edb8 	.word	0x2007edb8

0801af9c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801af9c:	b580      	push	{r7, lr}
 801af9e:	b084      	sub	sp, #16
 801afa0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801afa2:	2300      	movs	r3, #0
 801afa4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801afa6:	2300      	movs	r3, #0
 801afa8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801afaa:	4b12      	ldr	r3, [pc, #72]	; (801aff4 <tcp_kill_timewait+0x58>)
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	60fb      	str	r3, [r7, #12]
 801afb0:	e012      	b.n	801afd8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801afb2:	4b11      	ldr	r3, [pc, #68]	; (801aff8 <tcp_kill_timewait+0x5c>)
 801afb4:	681a      	ldr	r2, [r3, #0]
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	6a1b      	ldr	r3, [r3, #32]
 801afba:	1ad3      	subs	r3, r2, r3
 801afbc:	687a      	ldr	r2, [r7, #4]
 801afbe:	429a      	cmp	r2, r3
 801afc0:	d807      	bhi.n	801afd2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801afc2:	4b0d      	ldr	r3, [pc, #52]	; (801aff8 <tcp_kill_timewait+0x5c>)
 801afc4:	681a      	ldr	r2, [r3, #0]
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	6a1b      	ldr	r3, [r3, #32]
 801afca:	1ad3      	subs	r3, r2, r3
 801afcc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801afd2:	68fb      	ldr	r3, [r7, #12]
 801afd4:	68db      	ldr	r3, [r3, #12]
 801afd6:	60fb      	str	r3, [r7, #12]
 801afd8:	68fb      	ldr	r3, [r7, #12]
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d1e9      	bne.n	801afb2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801afde:	68bb      	ldr	r3, [r7, #8]
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d002      	beq.n	801afea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801afe4:	68b8      	ldr	r0, [r7, #8]
 801afe6:	f7fe ff1b 	bl	8019e20 <tcp_abort>
  }
}
 801afea:	bf00      	nop
 801afec:	3710      	adds	r7, #16
 801afee:	46bd      	mov	sp, r7
 801aff0:	bd80      	pop	{r7, pc}
 801aff2:	bf00      	nop
 801aff4:	2007edc8 	.word	0x2007edc8
 801aff8:	2007edb8 	.word	0x2007edb8

0801affc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801affc:	b580      	push	{r7, lr}
 801affe:	b082      	sub	sp, #8
 801b000:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801b002:	4b10      	ldr	r3, [pc, #64]	; (801b044 <tcp_handle_closepend+0x48>)
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801b008:	e014      	b.n	801b034 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	68db      	ldr	r3, [r3, #12]
 801b00e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	8b5b      	ldrh	r3, [r3, #26]
 801b014:	f003 0308 	and.w	r3, r3, #8
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d009      	beq.n	801b030 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	8b5b      	ldrh	r3, [r3, #26]
 801b020:	f023 0308 	bic.w	r3, r3, #8
 801b024:	b29a      	uxth	r2, r3
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801b02a:	6878      	ldr	r0, [r7, #4]
 801b02c:	f7fe fd48 	bl	8019ac0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801b030:	683b      	ldr	r3, [r7, #0]
 801b032:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	2b00      	cmp	r3, #0
 801b038:	d1e7      	bne.n	801b00a <tcp_handle_closepend+0xe>
  }
}
 801b03a:	bf00      	nop
 801b03c:	bf00      	nop
 801b03e:	3708      	adds	r7, #8
 801b040:	46bd      	mov	sp, r7
 801b042:	bd80      	pop	{r7, pc}
 801b044:	2007edc4 	.word	0x2007edc4

0801b048 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801b048:	b580      	push	{r7, lr}
 801b04a:	b084      	sub	sp, #16
 801b04c:	af00      	add	r7, sp, #0
 801b04e:	4603      	mov	r3, r0
 801b050:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b052:	2001      	movs	r0, #1
 801b054:	f7fd f8ce 	bl	80181f4 <memp_malloc>
 801b058:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801b05a:	68fb      	ldr	r3, [r7, #12]
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d14e      	bne.n	801b0fe <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801b060:	f7ff ffcc 	bl	801affc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801b064:	f7ff ff9a 	bl	801af9c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b068:	2001      	movs	r0, #1
 801b06a:	f7fd f8c3 	bl	80181f4 <memp_malloc>
 801b06e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801b070:	68fb      	ldr	r3, [r7, #12]
 801b072:	2b00      	cmp	r3, #0
 801b074:	d139      	bne.n	801b0ea <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801b076:	2009      	movs	r0, #9
 801b078:	f7ff ff46 	bl	801af08 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b07c:	2001      	movs	r0, #1
 801b07e:	f7fd f8b9 	bl	80181f4 <memp_malloc>
 801b082:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801b084:	68fb      	ldr	r3, [r7, #12]
 801b086:	2b00      	cmp	r3, #0
 801b088:	d125      	bne.n	801b0d6 <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801b08a:	2008      	movs	r0, #8
 801b08c:	f7ff ff3c 	bl	801af08 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b090:	2001      	movs	r0, #1
 801b092:	f7fd f8af 	bl	80181f4 <memp_malloc>
 801b096:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d111      	bne.n	801b0c2 <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801b09e:	79fb      	ldrb	r3, [r7, #7]
 801b0a0:	4618      	mov	r0, r3
 801b0a2:	f7ff fee3 	bl	801ae6c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801b0a6:	2001      	movs	r0, #1
 801b0a8:	f7fd f8a4 	bl	80181f4 <memp_malloc>
 801b0ac:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 801b0ae:	68fb      	ldr	r3, [r7, #12]
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d006      	beq.n	801b0c2 <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801b0b4:	4b36      	ldr	r3, [pc, #216]	; (801b190 <tcp_alloc+0x148>)
 801b0b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801b0ba:	889a      	ldrh	r2, [r3, #4]
 801b0bc:	3a01      	subs	r2, #1
 801b0be:	b292      	uxth	r2, r2
 801b0c0:	809a      	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
 801b0c2:	68fb      	ldr	r3, [r7, #12]
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d006      	beq.n	801b0d6 <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801b0c8:	4b31      	ldr	r3, [pc, #196]	; (801b190 <tcp_alloc+0x148>)
 801b0ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801b0ce:	889a      	ldrh	r2, [r3, #4]
 801b0d0:	3a01      	subs	r2, #1
 801b0d2:	b292      	uxth	r2, r2
 801b0d4:	809a      	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
 801b0d6:	68fb      	ldr	r3, [r7, #12]
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d006      	beq.n	801b0ea <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801b0dc:	4b2c      	ldr	r3, [pc, #176]	; (801b190 <tcp_alloc+0x148>)
 801b0de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801b0e2:	889a      	ldrh	r2, [r3, #4]
 801b0e4:	3a01      	subs	r2, #1
 801b0e6:	b292      	uxth	r2, r2
 801b0e8:	809a      	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
 801b0ea:	68fb      	ldr	r3, [r7, #12]
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d006      	beq.n	801b0fe <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801b0f0:	4b27      	ldr	r3, [pc, #156]	; (801b190 <tcp_alloc+0x148>)
 801b0f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801b0f6:	889a      	ldrh	r2, [r3, #4]
 801b0f8:	3a01      	subs	r2, #1
 801b0fa:	b292      	uxth	r2, r2
 801b0fc:	809a      	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
 801b0fe:	68fb      	ldr	r3, [r7, #12]
 801b100:	2b00      	cmp	r3, #0
 801b102:	d03f      	beq.n	801b184 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801b104:	229c      	movs	r2, #156	; 0x9c
 801b106:	2100      	movs	r1, #0
 801b108:	68f8      	ldr	r0, [r7, #12]
 801b10a:	f009 f92f 	bl	802436c <memset>
    pcb->prio = prio;
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	79fa      	ldrb	r2, [r7, #7]
 801b112:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801b114:	68fb      	ldr	r3, [r7, #12]
 801b116:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801b11a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801b11e:	68fb      	ldr	r3, [r7, #12]
 801b120:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801b124:	855a      	strh	r2, [r3, #42]	; 0x2a
 801b126:	68fb      	ldr	r3, [r7, #12]
 801b128:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801b12a:	68fb      	ldr	r3, [r7, #12]
 801b12c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	22ff      	movs	r2, #255	; 0xff
 801b132:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	f44f 7206 	mov.w	r2, #536	; 0x218
 801b13a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	2206      	movs	r2, #6
 801b140:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801b144:	68fb      	ldr	r3, [r7, #12]
 801b146:	2206      	movs	r2, #6
 801b148:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b150:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801b152:	68fb      	ldr	r3, [r7, #12]
 801b154:	2201      	movs	r2, #1
 801b156:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801b15a:	4b0e      	ldr	r3, [pc, #56]	; (801b194 <tcp_alloc+0x14c>)
 801b15c:	681a      	ldr	r2, [r3, #0]
 801b15e:	68fb      	ldr	r3, [r7, #12]
 801b160:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801b162:	4b0d      	ldr	r3, [pc, #52]	; (801b198 <tcp_alloc+0x150>)
 801b164:	781a      	ldrb	r2, [r3, #0]
 801b166:	68fb      	ldr	r3, [r7, #12]
 801b168:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801b16a:	68fb      	ldr	r3, [r7, #12]
 801b16c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801b170:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801b174:	68fb      	ldr	r3, [r7, #12]
 801b176:	4a09      	ldr	r2, [pc, #36]	; (801b19c <tcp_alloc+0x154>)
 801b178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801b17c:	68fb      	ldr	r3, [r7, #12]
 801b17e:	4a08      	ldr	r2, [pc, #32]	; (801b1a0 <tcp_alloc+0x158>)
 801b180:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801b184:	68fb      	ldr	r3, [r7, #12]
}
 801b186:	4618      	mov	r0, r3
 801b188:	3710      	adds	r7, #16
 801b18a:	46bd      	mov	sp, r7
 801b18c:	bd80      	pop	{r7, pc}
 801b18e:	bf00      	nop
 801b190:	2007ecb8 	.word	0x2007ecb8
 801b194:	2007edb8 	.word	0x2007edb8
 801b198:	2007edce 	.word	0x2007edce
 801b19c:	0801ae01 	.word	0x0801ae01
 801b1a0:	006ddd00 	.word	0x006ddd00

0801b1a4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801b1a4:	b580      	push	{r7, lr}
 801b1a6:	b084      	sub	sp, #16
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	4603      	mov	r3, r0
 801b1ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801b1ae:	2040      	movs	r0, #64	; 0x40
 801b1b0:	f7ff ff4a 	bl	801b048 <tcp_alloc>
 801b1b4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801b1b6:	68fb      	ldr	r3, [r7, #12]
}
 801b1b8:	4618      	mov	r0, r3
 801b1ba:	3710      	adds	r7, #16
 801b1bc:	46bd      	mov	sp, r7
 801b1be:	bd80      	pop	{r7, pc}

0801b1c0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801b1c0:	b480      	push	{r7}
 801b1c2:	b083      	sub	sp, #12
 801b1c4:	af00      	add	r7, sp, #0
 801b1c6:	6078      	str	r0, [r7, #4]
 801b1c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	d002      	beq.n	801b1d6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	683a      	ldr	r2, [r7, #0]
 801b1d4:	611a      	str	r2, [r3, #16]
  }
}
 801b1d6:	bf00      	nop
 801b1d8:	370c      	adds	r7, #12
 801b1da:	46bd      	mov	sp, r7
 801b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1e0:	4770      	bx	lr
	...

0801b1e4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801b1e4:	b580      	push	{r7, lr}
 801b1e6:	b082      	sub	sp, #8
 801b1e8:	af00      	add	r7, sp, #0
 801b1ea:	6078      	str	r0, [r7, #4]
 801b1ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d00e      	beq.n	801b212 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	7d1b      	ldrb	r3, [r3, #20]
 801b1f8:	2b01      	cmp	r3, #1
 801b1fa:	d106      	bne.n	801b20a <tcp_recv+0x26>
 801b1fc:	4b07      	ldr	r3, [pc, #28]	; (801b21c <tcp_recv+0x38>)
 801b1fe:	f240 72df 	movw	r2, #2015	; 0x7df
 801b202:	4907      	ldr	r1, [pc, #28]	; (801b220 <tcp_recv+0x3c>)
 801b204:	4807      	ldr	r0, [pc, #28]	; (801b224 <tcp_recv+0x40>)
 801b206:	f008 fedf 	bl	8023fc8 <iprintf>
    pcb->recv = recv;
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	683a      	ldr	r2, [r7, #0]
 801b20e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801b212:	bf00      	nop
 801b214:	3708      	adds	r7, #8
 801b216:	46bd      	mov	sp, r7
 801b218:	bd80      	pop	{r7, pc}
 801b21a:	bf00      	nop
 801b21c:	0802714c 	.word	0x0802714c
 801b220:	080276e8 	.word	0x080276e8
 801b224:	08027190 	.word	0x08027190

0801b228 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801b228:	b580      	push	{r7, lr}
 801b22a:	b082      	sub	sp, #8
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	6078      	str	r0, [r7, #4]
 801b230:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	2b00      	cmp	r3, #0
 801b236:	d00e      	beq.n	801b256 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	7d1b      	ldrb	r3, [r3, #20]
 801b23c:	2b01      	cmp	r3, #1
 801b23e:	d106      	bne.n	801b24e <tcp_sent+0x26>
 801b240:	4b07      	ldr	r3, [pc, #28]	; (801b260 <tcp_sent+0x38>)
 801b242:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801b246:	4907      	ldr	r1, [pc, #28]	; (801b264 <tcp_sent+0x3c>)
 801b248:	4807      	ldr	r0, [pc, #28]	; (801b268 <tcp_sent+0x40>)
 801b24a:	f008 febd 	bl	8023fc8 <iprintf>
    pcb->sent = sent;
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	683a      	ldr	r2, [r7, #0]
 801b252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801b256:	bf00      	nop
 801b258:	3708      	adds	r7, #8
 801b25a:	46bd      	mov	sp, r7
 801b25c:	bd80      	pop	{r7, pc}
 801b25e:	bf00      	nop
 801b260:	0802714c 	.word	0x0802714c
 801b264:	08027710 	.word	0x08027710
 801b268:	08027190 	.word	0x08027190

0801b26c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801b26c:	b580      	push	{r7, lr}
 801b26e:	b082      	sub	sp, #8
 801b270:	af00      	add	r7, sp, #0
 801b272:	6078      	str	r0, [r7, #4]
 801b274:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d00e      	beq.n	801b29a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	7d1b      	ldrb	r3, [r3, #20]
 801b280:	2b01      	cmp	r3, #1
 801b282:	d106      	bne.n	801b292 <tcp_err+0x26>
 801b284:	4b07      	ldr	r3, [pc, #28]	; (801b2a4 <tcp_err+0x38>)
 801b286:	f640 020d 	movw	r2, #2061	; 0x80d
 801b28a:	4907      	ldr	r1, [pc, #28]	; (801b2a8 <tcp_err+0x3c>)
 801b28c:	4807      	ldr	r0, [pc, #28]	; (801b2ac <tcp_err+0x40>)
 801b28e:	f008 fe9b 	bl	8023fc8 <iprintf>
    pcb->errf = err;
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	683a      	ldr	r2, [r7, #0]
 801b296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801b29a:	bf00      	nop
 801b29c:	3708      	adds	r7, #8
 801b29e:	46bd      	mov	sp, r7
 801b2a0:	bd80      	pop	{r7, pc}
 801b2a2:	bf00      	nop
 801b2a4:	0802714c 	.word	0x0802714c
 801b2a8:	08027738 	.word	0x08027738
 801b2ac:	08027190 	.word	0x08027190

0801b2b0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801b2b0:	b480      	push	{r7}
 801b2b2:	b085      	sub	sp, #20
 801b2b4:	af00      	add	r7, sp, #0
 801b2b6:	6078      	str	r0, [r7, #4]
 801b2b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d008      	beq.n	801b2d2 <tcp_accept+0x22>
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	7d1b      	ldrb	r3, [r3, #20]
 801b2c4:	2b01      	cmp	r3, #1
 801b2c6:	d104      	bne.n	801b2d2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801b2cc:	68fb      	ldr	r3, [r7, #12]
 801b2ce:	683a      	ldr	r2, [r7, #0]
 801b2d0:	619a      	str	r2, [r3, #24]
  }
}
 801b2d2:	bf00      	nop
 801b2d4:	3714      	adds	r7, #20
 801b2d6:	46bd      	mov	sp, r7
 801b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2dc:	4770      	bx	lr
	...

0801b2e0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801b2e0:	b580      	push	{r7, lr}
 801b2e2:	b084      	sub	sp, #16
 801b2e4:	af00      	add	r7, sp, #0
 801b2e6:	60f8      	str	r0, [r7, #12]
 801b2e8:	60b9      	str	r1, [r7, #8]
 801b2ea:	4613      	mov	r3, r2
 801b2ec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801b2ee:	68fb      	ldr	r3, [r7, #12]
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d107      	bne.n	801b304 <tcp_poll+0x24>
 801b2f4:	4b0e      	ldr	r3, [pc, #56]	; (801b330 <tcp_poll+0x50>)
 801b2f6:	f640 023d 	movw	r2, #2109	; 0x83d
 801b2fa:	490e      	ldr	r1, [pc, #56]	; (801b334 <tcp_poll+0x54>)
 801b2fc:	480e      	ldr	r0, [pc, #56]	; (801b338 <tcp_poll+0x58>)
 801b2fe:	f008 fe63 	bl	8023fc8 <iprintf>
 801b302:	e011      	b.n	801b328 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801b304:	68fb      	ldr	r3, [r7, #12]
 801b306:	7d1b      	ldrb	r3, [r3, #20]
 801b308:	2b01      	cmp	r3, #1
 801b30a:	d106      	bne.n	801b31a <tcp_poll+0x3a>
 801b30c:	4b08      	ldr	r3, [pc, #32]	; (801b330 <tcp_poll+0x50>)
 801b30e:	f640 023e 	movw	r2, #2110	; 0x83e
 801b312:	490a      	ldr	r1, [pc, #40]	; (801b33c <tcp_poll+0x5c>)
 801b314:	4808      	ldr	r0, [pc, #32]	; (801b338 <tcp_poll+0x58>)
 801b316:	f008 fe57 	bl	8023fc8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801b31a:	68fb      	ldr	r3, [r7, #12]
 801b31c:	68ba      	ldr	r2, [r7, #8]
 801b31e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	79fa      	ldrb	r2, [r7, #7]
 801b326:	775a      	strb	r2, [r3, #29]
}
 801b328:	3710      	adds	r7, #16
 801b32a:	46bd      	mov	sp, r7
 801b32c:	bd80      	pop	{r7, pc}
 801b32e:	bf00      	nop
 801b330:	0802714c 	.word	0x0802714c
 801b334:	08027760 	.word	0x08027760
 801b338:	08027190 	.word	0x08027190
 801b33c:	08027778 	.word	0x08027778

0801b340 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801b340:	b580      	push	{r7, lr}
 801b342:	b082      	sub	sp, #8
 801b344:	af00      	add	r7, sp, #0
 801b346:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d107      	bne.n	801b35e <tcp_pcb_purge+0x1e>
 801b34e:	4b21      	ldr	r3, [pc, #132]	; (801b3d4 <tcp_pcb_purge+0x94>)
 801b350:	f640 0251 	movw	r2, #2129	; 0x851
 801b354:	4920      	ldr	r1, [pc, #128]	; (801b3d8 <tcp_pcb_purge+0x98>)
 801b356:	4821      	ldr	r0, [pc, #132]	; (801b3dc <tcp_pcb_purge+0x9c>)
 801b358:	f008 fe36 	bl	8023fc8 <iprintf>
 801b35c:	e037      	b.n	801b3ce <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	7d1b      	ldrb	r3, [r3, #20]
 801b362:	2b00      	cmp	r3, #0
 801b364:	d033      	beq.n	801b3ce <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801b36a:	2b0a      	cmp	r3, #10
 801b36c:	d02f      	beq.n	801b3ce <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801b372:	2b01      	cmp	r3, #1
 801b374:	d02b      	beq.n	801b3ce <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d007      	beq.n	801b38e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b382:	4618      	mov	r0, r3
 801b384:	f7fd ff4c 	bl	8019220 <pbuf_free>
      pcb->refused_data = NULL;
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	2200      	movs	r2, #0
 801b38c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b392:	2b00      	cmp	r3, #0
 801b394:	d002      	beq.n	801b39c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801b396:	6878      	ldr	r0, [r7, #4]
 801b398:	f000 f98c 	bl	801b6b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b3a2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b3a8:	4618      	mov	r0, r3
 801b3aa:	f7ff fccf 	bl	801ad4c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3b2:	4618      	mov	r0, r3
 801b3b4:	f7ff fcca 	bl	801ad4c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	2200      	movs	r2, #0
 801b3bc:	66da      	str	r2, [r3, #108]	; 0x6c
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	2200      	movs	r2, #0
 801b3ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801b3ce:	3708      	adds	r7, #8
 801b3d0:	46bd      	mov	sp, r7
 801b3d2:	bd80      	pop	{r7, pc}
 801b3d4:	0802714c 	.word	0x0802714c
 801b3d8:	08027798 	.word	0x08027798
 801b3dc:	08027190 	.word	0x08027190

0801b3e0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801b3e0:	b580      	push	{r7, lr}
 801b3e2:	b084      	sub	sp, #16
 801b3e4:	af00      	add	r7, sp, #0
 801b3e6:	6078      	str	r0, [r7, #4]
 801b3e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801b3ea:	683b      	ldr	r3, [r7, #0]
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	d106      	bne.n	801b3fe <tcp_pcb_remove+0x1e>
 801b3f0:	4b3e      	ldr	r3, [pc, #248]	; (801b4ec <tcp_pcb_remove+0x10c>)
 801b3f2:	f640 0283 	movw	r2, #2179	; 0x883
 801b3f6:	493e      	ldr	r1, [pc, #248]	; (801b4f0 <tcp_pcb_remove+0x110>)
 801b3f8:	483e      	ldr	r0, [pc, #248]	; (801b4f4 <tcp_pcb_remove+0x114>)
 801b3fa:	f008 fde5 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	2b00      	cmp	r3, #0
 801b402:	d106      	bne.n	801b412 <tcp_pcb_remove+0x32>
 801b404:	4b39      	ldr	r3, [pc, #228]	; (801b4ec <tcp_pcb_remove+0x10c>)
 801b406:	f640 0284 	movw	r2, #2180	; 0x884
 801b40a:	493b      	ldr	r1, [pc, #236]	; (801b4f8 <tcp_pcb_remove+0x118>)
 801b40c:	4839      	ldr	r0, [pc, #228]	; (801b4f4 <tcp_pcb_remove+0x114>)
 801b40e:	f008 fddb 	bl	8023fc8 <iprintf>

  TCP_RMV(pcblist, pcb);
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	683a      	ldr	r2, [r7, #0]
 801b418:	429a      	cmp	r2, r3
 801b41a:	d105      	bne.n	801b428 <tcp_pcb_remove+0x48>
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	68da      	ldr	r2, [r3, #12]
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	601a      	str	r2, [r3, #0]
 801b426:	e013      	b.n	801b450 <tcp_pcb_remove+0x70>
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	681b      	ldr	r3, [r3, #0]
 801b42c:	60fb      	str	r3, [r7, #12]
 801b42e:	e00c      	b.n	801b44a <tcp_pcb_remove+0x6a>
 801b430:	68fb      	ldr	r3, [r7, #12]
 801b432:	68db      	ldr	r3, [r3, #12]
 801b434:	683a      	ldr	r2, [r7, #0]
 801b436:	429a      	cmp	r2, r3
 801b438:	d104      	bne.n	801b444 <tcp_pcb_remove+0x64>
 801b43a:	683b      	ldr	r3, [r7, #0]
 801b43c:	68da      	ldr	r2, [r3, #12]
 801b43e:	68fb      	ldr	r3, [r7, #12]
 801b440:	60da      	str	r2, [r3, #12]
 801b442:	e005      	b.n	801b450 <tcp_pcb_remove+0x70>
 801b444:	68fb      	ldr	r3, [r7, #12]
 801b446:	68db      	ldr	r3, [r3, #12]
 801b448:	60fb      	str	r3, [r7, #12]
 801b44a:	68fb      	ldr	r3, [r7, #12]
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d1ef      	bne.n	801b430 <tcp_pcb_remove+0x50>
 801b450:	683b      	ldr	r3, [r7, #0]
 801b452:	2200      	movs	r2, #0
 801b454:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801b456:	6838      	ldr	r0, [r7, #0]
 801b458:	f7ff ff72 	bl	801b340 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801b45c:	683b      	ldr	r3, [r7, #0]
 801b45e:	7d1b      	ldrb	r3, [r3, #20]
 801b460:	2b0a      	cmp	r3, #10
 801b462:	d013      	beq.n	801b48c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801b464:	683b      	ldr	r3, [r7, #0]
 801b466:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801b468:	2b01      	cmp	r3, #1
 801b46a:	d00f      	beq.n	801b48c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801b46c:	683b      	ldr	r3, [r7, #0]
 801b46e:	8b5b      	ldrh	r3, [r3, #26]
 801b470:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801b474:	2b00      	cmp	r3, #0
 801b476:	d009      	beq.n	801b48c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801b478:	683b      	ldr	r3, [r7, #0]
 801b47a:	8b5b      	ldrh	r3, [r3, #26]
 801b47c:	f043 0302 	orr.w	r3, r3, #2
 801b480:	b29a      	uxth	r2, r3
 801b482:	683b      	ldr	r3, [r7, #0]
 801b484:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b486:	6838      	ldr	r0, [r7, #0]
 801b488:	f003 fccc 	bl	801ee24 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801b48c:	683b      	ldr	r3, [r7, #0]
 801b48e:	7d1b      	ldrb	r3, [r3, #20]
 801b490:	2b01      	cmp	r3, #1
 801b492:	d020      	beq.n	801b4d6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801b494:	683b      	ldr	r3, [r7, #0]
 801b496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b498:	2b00      	cmp	r3, #0
 801b49a:	d006      	beq.n	801b4aa <tcp_pcb_remove+0xca>
 801b49c:	4b13      	ldr	r3, [pc, #76]	; (801b4ec <tcp_pcb_remove+0x10c>)
 801b49e:	f640 0293 	movw	r2, #2195	; 0x893
 801b4a2:	4916      	ldr	r1, [pc, #88]	; (801b4fc <tcp_pcb_remove+0x11c>)
 801b4a4:	4813      	ldr	r0, [pc, #76]	; (801b4f4 <tcp_pcb_remove+0x114>)
 801b4a6:	f008 fd8f 	bl	8023fc8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801b4aa:	683b      	ldr	r3, [r7, #0]
 801b4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	d006      	beq.n	801b4c0 <tcp_pcb_remove+0xe0>
 801b4b2:	4b0e      	ldr	r3, [pc, #56]	; (801b4ec <tcp_pcb_remove+0x10c>)
 801b4b4:	f640 0294 	movw	r2, #2196	; 0x894
 801b4b8:	4911      	ldr	r1, [pc, #68]	; (801b500 <tcp_pcb_remove+0x120>)
 801b4ba:	480e      	ldr	r0, [pc, #56]	; (801b4f4 <tcp_pcb_remove+0x114>)
 801b4bc:	f008 fd84 	bl	8023fc8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801b4c0:	683b      	ldr	r3, [r7, #0]
 801b4c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d006      	beq.n	801b4d6 <tcp_pcb_remove+0xf6>
 801b4c8:	4b08      	ldr	r3, [pc, #32]	; (801b4ec <tcp_pcb_remove+0x10c>)
 801b4ca:	f640 0296 	movw	r2, #2198	; 0x896
 801b4ce:	490d      	ldr	r1, [pc, #52]	; (801b504 <tcp_pcb_remove+0x124>)
 801b4d0:	4808      	ldr	r0, [pc, #32]	; (801b4f4 <tcp_pcb_remove+0x114>)
 801b4d2:	f008 fd79 	bl	8023fc8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801b4d6:	683b      	ldr	r3, [r7, #0]
 801b4d8:	2200      	movs	r2, #0
 801b4da:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801b4dc:	683b      	ldr	r3, [r7, #0]
 801b4de:	2200      	movs	r2, #0
 801b4e0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801b4e2:	bf00      	nop
 801b4e4:	3710      	adds	r7, #16
 801b4e6:	46bd      	mov	sp, r7
 801b4e8:	bd80      	pop	{r7, pc}
 801b4ea:	bf00      	nop
 801b4ec:	0802714c 	.word	0x0802714c
 801b4f0:	080277b4 	.word	0x080277b4
 801b4f4:	08027190 	.word	0x08027190
 801b4f8:	080277d0 	.word	0x080277d0
 801b4fc:	080277f0 	.word	0x080277f0
 801b500:	08027808 	.word	0x08027808
 801b504:	08027824 	.word	0x08027824

0801b508 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801b508:	b580      	push	{r7, lr}
 801b50a:	b082      	sub	sp, #8
 801b50c:	af00      	add	r7, sp, #0
 801b50e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	2b00      	cmp	r3, #0
 801b514:	d106      	bne.n	801b524 <tcp_next_iss+0x1c>
 801b516:	4b0a      	ldr	r3, [pc, #40]	; (801b540 <tcp_next_iss+0x38>)
 801b518:	f640 02af 	movw	r2, #2223	; 0x8af
 801b51c:	4909      	ldr	r1, [pc, #36]	; (801b544 <tcp_next_iss+0x3c>)
 801b51e:	480a      	ldr	r0, [pc, #40]	; (801b548 <tcp_next_iss+0x40>)
 801b520:	f008 fd52 	bl	8023fc8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801b524:	4b09      	ldr	r3, [pc, #36]	; (801b54c <tcp_next_iss+0x44>)
 801b526:	681a      	ldr	r2, [r3, #0]
 801b528:	4b09      	ldr	r3, [pc, #36]	; (801b550 <tcp_next_iss+0x48>)
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	4413      	add	r3, r2
 801b52e:	4a07      	ldr	r2, [pc, #28]	; (801b54c <tcp_next_iss+0x44>)
 801b530:	6013      	str	r3, [r2, #0]
  return iss;
 801b532:	4b06      	ldr	r3, [pc, #24]	; (801b54c <tcp_next_iss+0x44>)
 801b534:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801b536:	4618      	mov	r0, r3
 801b538:	3708      	adds	r7, #8
 801b53a:	46bd      	mov	sp, r7
 801b53c:	bd80      	pop	{r7, pc}
 801b53e:	bf00      	nop
 801b540:	0802714c 	.word	0x0802714c
 801b544:	0802783c 	.word	0x0802783c
 801b548:	08027190 	.word	0x08027190
 801b54c:	200500c8 	.word	0x200500c8
 801b550:	2007edb8 	.word	0x2007edb8

0801b554 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801b554:	b580      	push	{r7, lr}
 801b556:	b086      	sub	sp, #24
 801b558:	af00      	add	r7, sp, #0
 801b55a:	4603      	mov	r3, r0
 801b55c:	60b9      	str	r1, [r7, #8]
 801b55e:	607a      	str	r2, [r7, #4]
 801b560:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	2b00      	cmp	r3, #0
 801b566:	d106      	bne.n	801b576 <tcp_eff_send_mss_netif+0x22>
 801b568:	4b14      	ldr	r3, [pc, #80]	; (801b5bc <tcp_eff_send_mss_netif+0x68>)
 801b56a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801b56e:	4914      	ldr	r1, [pc, #80]	; (801b5c0 <tcp_eff_send_mss_netif+0x6c>)
 801b570:	4814      	ldr	r0, [pc, #80]	; (801b5c4 <tcp_eff_send_mss_netif+0x70>)
 801b572:	f008 fd29 	bl	8023fc8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801b576:	68bb      	ldr	r3, [r7, #8]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d101      	bne.n	801b580 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801b57c:	89fb      	ldrh	r3, [r7, #14]
 801b57e:	e019      	b.n	801b5b4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801b580:	68bb      	ldr	r3, [r7, #8]
 801b582:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b584:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801b586:	8afb      	ldrh	r3, [r7, #22]
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d012      	beq.n	801b5b2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801b58c:	2328      	movs	r3, #40	; 0x28
 801b58e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801b590:	8afa      	ldrh	r2, [r7, #22]
 801b592:	8abb      	ldrh	r3, [r7, #20]
 801b594:	429a      	cmp	r2, r3
 801b596:	d904      	bls.n	801b5a2 <tcp_eff_send_mss_netif+0x4e>
 801b598:	8afa      	ldrh	r2, [r7, #22]
 801b59a:	8abb      	ldrh	r3, [r7, #20]
 801b59c:	1ad3      	subs	r3, r2, r3
 801b59e:	b29b      	uxth	r3, r3
 801b5a0:	e000      	b.n	801b5a4 <tcp_eff_send_mss_netif+0x50>
 801b5a2:	2300      	movs	r3, #0
 801b5a4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801b5a6:	8a7a      	ldrh	r2, [r7, #18]
 801b5a8:	89fb      	ldrh	r3, [r7, #14]
 801b5aa:	4293      	cmp	r3, r2
 801b5ac:	bf28      	it	cs
 801b5ae:	4613      	movcs	r3, r2
 801b5b0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801b5b2:	89fb      	ldrh	r3, [r7, #14]
}
 801b5b4:	4618      	mov	r0, r3
 801b5b6:	3718      	adds	r7, #24
 801b5b8:	46bd      	mov	sp, r7
 801b5ba:	bd80      	pop	{r7, pc}
 801b5bc:	0802714c 	.word	0x0802714c
 801b5c0:	08027858 	.word	0x08027858
 801b5c4:	08027190 	.word	0x08027190

0801b5c8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801b5c8:	b580      	push	{r7, lr}
 801b5ca:	b084      	sub	sp, #16
 801b5cc:	af00      	add	r7, sp, #0
 801b5ce:	6078      	str	r0, [r7, #4]
 801b5d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801b5d2:	683b      	ldr	r3, [r7, #0]
 801b5d4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	d11d      	bne.n	801b618 <tcp_netif_ip_addr_changed_pcblist+0x50>
 801b5dc:	4b12      	ldr	r3, [pc, #72]	; (801b628 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801b5de:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801b5e2:	4912      	ldr	r1, [pc, #72]	; (801b62c <tcp_netif_ip_addr_changed_pcblist+0x64>)
 801b5e4:	4812      	ldr	r0, [pc, #72]	; (801b630 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 801b5e6:	f008 fcef 	bl	8023fc8 <iprintf>

  while (pcb != NULL) {
 801b5ea:	e015      	b.n	801b618 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801b5ec:	68fb      	ldr	r3, [r7, #12]
 801b5ee:	681a      	ldr	r2, [r3, #0]
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	681b      	ldr	r3, [r3, #0]
 801b5f4:	429a      	cmp	r2, r3
 801b5f6:	d10c      	bne.n	801b612 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801b5f8:	68fb      	ldr	r3, [r7, #12]
 801b5fa:	68db      	ldr	r3, [r3, #12]
 801b5fc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 801b5fe:	68f9      	ldr	r1, [r7, #12]
 801b600:	480c      	ldr	r0, [pc, #48]	; (801b634 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 801b602:	f008 fce1 	bl	8023fc8 <iprintf>
      tcp_abort(pcb);
 801b606:	68f8      	ldr	r0, [r7, #12]
 801b608:	f7fe fc0a 	bl	8019e20 <tcp_abort>
      pcb = next;
 801b60c:	68bb      	ldr	r3, [r7, #8]
 801b60e:	60fb      	str	r3, [r7, #12]
 801b610:	e002      	b.n	801b618 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 801b612:	68fb      	ldr	r3, [r7, #12]
 801b614:	68db      	ldr	r3, [r3, #12]
 801b616:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801b618:	68fb      	ldr	r3, [r7, #12]
 801b61a:	2b00      	cmp	r3, #0
 801b61c:	d1e6      	bne.n	801b5ec <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801b61e:	bf00      	nop
 801b620:	bf00      	nop
 801b622:	3710      	adds	r7, #16
 801b624:	46bd      	mov	sp, r7
 801b626:	bd80      	pop	{r7, pc}
 801b628:	0802714c 	.word	0x0802714c
 801b62c:	08027880 	.word	0x08027880
 801b630:	08027190 	.word	0x08027190
 801b634:	080278b4 	.word	0x080278b4

0801b638 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b638:	b580      	push	{r7, lr}
 801b63a:	b084      	sub	sp, #16
 801b63c:	af00      	add	r7, sp, #0
 801b63e:	6078      	str	r0, [r7, #4]
 801b640:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	2b00      	cmp	r3, #0
 801b646:	d02a      	beq.n	801b69e <tcp_netif_ip_addr_changed+0x66>
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d026      	beq.n	801b69e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801b650:	4b15      	ldr	r3, [pc, #84]	; (801b6a8 <tcp_netif_ip_addr_changed+0x70>)
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	4619      	mov	r1, r3
 801b656:	6878      	ldr	r0, [r7, #4]
 801b658:	f7ff ffb6 	bl	801b5c8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801b65c:	4b13      	ldr	r3, [pc, #76]	; (801b6ac <tcp_netif_ip_addr_changed+0x74>)
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	4619      	mov	r1, r3
 801b662:	6878      	ldr	r0, [r7, #4]
 801b664:	f7ff ffb0 	bl	801b5c8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801b668:	683b      	ldr	r3, [r7, #0]
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d017      	beq.n	801b69e <tcp_netif_ip_addr_changed+0x66>
 801b66e:	683b      	ldr	r3, [r7, #0]
 801b670:	681b      	ldr	r3, [r3, #0]
 801b672:	2b00      	cmp	r3, #0
 801b674:	d013      	beq.n	801b69e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b676:	4b0e      	ldr	r3, [pc, #56]	; (801b6b0 <tcp_netif_ip_addr_changed+0x78>)
 801b678:	681b      	ldr	r3, [r3, #0]
 801b67a:	60fb      	str	r3, [r7, #12]
 801b67c:	e00c      	b.n	801b698 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801b67e:	68fb      	ldr	r3, [r7, #12]
 801b680:	681a      	ldr	r2, [r3, #0]
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	681b      	ldr	r3, [r3, #0]
 801b686:	429a      	cmp	r2, r3
 801b688:	d103      	bne.n	801b692 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801b68a:	683b      	ldr	r3, [r7, #0]
 801b68c:	681a      	ldr	r2, [r3, #0]
 801b68e:	68fb      	ldr	r3, [r7, #12]
 801b690:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b692:	68fb      	ldr	r3, [r7, #12]
 801b694:	68db      	ldr	r3, [r3, #12]
 801b696:	60fb      	str	r3, [r7, #12]
 801b698:	68fb      	ldr	r3, [r7, #12]
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d1ef      	bne.n	801b67e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801b69e:	bf00      	nop
 801b6a0:	3710      	adds	r7, #16
 801b6a2:	46bd      	mov	sp, r7
 801b6a4:	bd80      	pop	{r7, pc}
 801b6a6:	bf00      	nop
 801b6a8:	2007edc4 	.word	0x2007edc4
 801b6ac:	2007edbc 	.word	0x2007edbc
 801b6b0:	2007edc0 	.word	0x2007edc0

0801b6b4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801b6b4:	b580      	push	{r7, lr}
 801b6b6:	b082      	sub	sp, #8
 801b6b8:	af00      	add	r7, sp, #0
 801b6ba:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d007      	beq.n	801b6d4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b6c8:	4618      	mov	r0, r3
 801b6ca:	f7ff fb3f 	bl	801ad4c <tcp_segs_free>
    pcb->ooseq = NULL;
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	2200      	movs	r2, #0
 801b6d2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801b6d4:	bf00      	nop
 801b6d6:	3708      	adds	r7, #8
 801b6d8:	46bd      	mov	sp, r7
 801b6da:	bd80      	pop	{r7, pc}

0801b6dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801b6dc:	b590      	push	{r4, r7, lr}
 801b6de:	b08d      	sub	sp, #52	; 0x34
 801b6e0:	af04      	add	r7, sp, #16
 801b6e2:	6078      	str	r0, [r7, #4]
 801b6e4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d105      	bne.n	801b6f8 <tcp_input+0x1c>
 801b6ec:	4b9b      	ldr	r3, [pc, #620]	; (801b95c <tcp_input+0x280>)
 801b6ee:	2283      	movs	r2, #131	; 0x83
 801b6f0:	499b      	ldr	r1, [pc, #620]	; (801b960 <tcp_input+0x284>)
 801b6f2:	489c      	ldr	r0, [pc, #624]	; (801b964 <tcp_input+0x288>)
 801b6f4:	f008 fc68 	bl	8023fc8 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 801b6f8:	4b9b      	ldr	r3, [pc, #620]	; (801b968 <tcp_input+0x28c>)
 801b6fa:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 801b6fe:	3301      	adds	r3, #1
 801b700:	b29a      	uxth	r2, r3
 801b702:	4b99      	ldr	r3, [pc, #612]	; (801b968 <tcp_input+0x28c>)
 801b704:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	685b      	ldr	r3, [r3, #4]
 801b70c:	4a97      	ldr	r2, [pc, #604]	; (801b96c <tcp_input+0x290>)
 801b70e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	895b      	ldrh	r3, [r3, #10]
 801b714:	2b13      	cmp	r3, #19
 801b716:	d809      	bhi.n	801b72c <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 801b718:	4b93      	ldr	r3, [pc, #588]	; (801b968 <tcp_input+0x28c>)
 801b71a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 801b71e:	3301      	adds	r3, #1
 801b720:	b29a      	uxth	r2, r3
 801b722:	4b91      	ldr	r3, [pc, #580]	; (801b968 <tcp_input+0x28c>)
 801b724:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 801b728:	f000 bc1c 	b.w	801bf64 <tcp_input+0x888>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801b72c:	4b90      	ldr	r3, [pc, #576]	; (801b970 <tcp_input+0x294>)
 801b72e:	695b      	ldr	r3, [r3, #20]
 801b730:	4a8f      	ldr	r2, [pc, #572]	; (801b970 <tcp_input+0x294>)
 801b732:	6812      	ldr	r2, [r2, #0]
 801b734:	4611      	mov	r1, r2
 801b736:	4618      	mov	r0, r3
 801b738:	f006 ff02 	bl	8022540 <ip4_addr_isbroadcast_u32>
 801b73c:	4603      	mov	r3, r0
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d105      	bne.n	801b74e <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801b742:	4b8b      	ldr	r3, [pc, #556]	; (801b970 <tcp_input+0x294>)
 801b744:	695b      	ldr	r3, [r3, #20]
 801b746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801b74a:	2be0      	cmp	r3, #224	; 0xe0
 801b74c:	d109      	bne.n	801b762 <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 801b74e:	4b86      	ldr	r3, [pc, #536]	; (801b968 <tcp_input+0x28c>)
 801b750:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 801b754:	3301      	adds	r3, #1
 801b756:	b29a      	uxth	r2, r3
 801b758:	4b83      	ldr	r3, [pc, #524]	; (801b968 <tcp_input+0x28c>)
 801b75a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 801b75e:	f000 bc01 	b.w	801bf64 <tcp_input+0x888>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801b762:	4b82      	ldr	r3, [pc, #520]	; (801b96c <tcp_input+0x290>)
 801b764:	681b      	ldr	r3, [r3, #0]
 801b766:	899b      	ldrh	r3, [r3, #12]
 801b768:	b29b      	uxth	r3, r3
 801b76a:	4618      	mov	r0, r3
 801b76c:	f7fb feba 	bl	80174e4 <lwip_htons>
 801b770:	4603      	mov	r3, r0
 801b772:	0b1b      	lsrs	r3, r3, #12
 801b774:	b29b      	uxth	r3, r3
 801b776:	b2db      	uxtb	r3, r3
 801b778:	009b      	lsls	r3, r3, #2
 801b77a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801b77c:	7cbb      	ldrb	r3, [r7, #18]
 801b77e:	2b13      	cmp	r3, #19
 801b780:	d905      	bls.n	801b78e <tcp_input+0xb2>
 801b782:	7cbb      	ldrb	r3, [r7, #18]
 801b784:	b29a      	uxth	r2, r3
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	891b      	ldrh	r3, [r3, #8]
 801b78a:	429a      	cmp	r2, r3
 801b78c:	d908      	bls.n	801b7a0 <tcp_input+0xc4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 801b78e:	4b76      	ldr	r3, [pc, #472]	; (801b968 <tcp_input+0x28c>)
 801b790:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 801b794:	3301      	adds	r3, #1
 801b796:	b29a      	uxth	r2, r3
 801b798:	4b73      	ldr	r3, [pc, #460]	; (801b968 <tcp_input+0x28c>)
 801b79a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 801b79e:	e3e1      	b.n	801bf64 <tcp_input+0x888>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801b7a0:	7cbb      	ldrb	r3, [r7, #18]
 801b7a2:	b29b      	uxth	r3, r3
 801b7a4:	3b14      	subs	r3, #20
 801b7a6:	b29a      	uxth	r2, r3
 801b7a8:	4b72      	ldr	r3, [pc, #456]	; (801b974 <tcp_input+0x298>)
 801b7aa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801b7ac:	4b72      	ldr	r3, [pc, #456]	; (801b978 <tcp_input+0x29c>)
 801b7ae:	2200      	movs	r2, #0
 801b7b0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	895a      	ldrh	r2, [r3, #10]
 801b7b6:	7cbb      	ldrb	r3, [r7, #18]
 801b7b8:	b29b      	uxth	r3, r3
 801b7ba:	429a      	cmp	r2, r3
 801b7bc:	d309      	bcc.n	801b7d2 <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801b7be:	4b6d      	ldr	r3, [pc, #436]	; (801b974 <tcp_input+0x298>)
 801b7c0:	881a      	ldrh	r2, [r3, #0]
 801b7c2:	4b6e      	ldr	r3, [pc, #440]	; (801b97c <tcp_input+0x2a0>)
 801b7c4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801b7c6:	7cbb      	ldrb	r3, [r7, #18]
 801b7c8:	4619      	mov	r1, r3
 801b7ca:	6878      	ldr	r0, [r7, #4]
 801b7cc:	f7fd fca2 	bl	8019114 <pbuf_remove_header>
 801b7d0:	e056      	b.n	801b880 <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	681b      	ldr	r3, [r3, #0]
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d105      	bne.n	801b7e6 <tcp_input+0x10a>
 801b7da:	4b60      	ldr	r3, [pc, #384]	; (801b95c <tcp_input+0x280>)
 801b7dc:	22c2      	movs	r2, #194	; 0xc2
 801b7de:	4968      	ldr	r1, [pc, #416]	; (801b980 <tcp_input+0x2a4>)
 801b7e0:	4860      	ldr	r0, [pc, #384]	; (801b964 <tcp_input+0x288>)
 801b7e2:	f008 fbf1 	bl	8023fc8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801b7e6:	2114      	movs	r1, #20
 801b7e8:	6878      	ldr	r0, [r7, #4]
 801b7ea:	f7fd fc93 	bl	8019114 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	895a      	ldrh	r2, [r3, #10]
 801b7f2:	4b62      	ldr	r3, [pc, #392]	; (801b97c <tcp_input+0x2a0>)
 801b7f4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801b7f6:	4b5f      	ldr	r3, [pc, #380]	; (801b974 <tcp_input+0x298>)
 801b7f8:	881a      	ldrh	r2, [r3, #0]
 801b7fa:	4b60      	ldr	r3, [pc, #384]	; (801b97c <tcp_input+0x2a0>)
 801b7fc:	881b      	ldrh	r3, [r3, #0]
 801b7fe:	1ad3      	subs	r3, r2, r3
 801b800:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801b802:	4b5e      	ldr	r3, [pc, #376]	; (801b97c <tcp_input+0x2a0>)
 801b804:	881b      	ldrh	r3, [r3, #0]
 801b806:	4619      	mov	r1, r3
 801b808:	6878      	ldr	r0, [r7, #4]
 801b80a:	f7fd fc83 	bl	8019114 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	681b      	ldr	r3, [r3, #0]
 801b812:	895b      	ldrh	r3, [r3, #10]
 801b814:	8a3a      	ldrh	r2, [r7, #16]
 801b816:	429a      	cmp	r2, r3
 801b818:	d908      	bls.n	801b82c <tcp_input+0x150>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 801b81a:	4b53      	ldr	r3, [pc, #332]	; (801b968 <tcp_input+0x28c>)
 801b81c:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 801b820:	3301      	adds	r3, #1
 801b822:	b29a      	uxth	r2, r3
 801b824:	4b50      	ldr	r3, [pc, #320]	; (801b968 <tcp_input+0x28c>)
 801b826:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 801b82a:	e39b      	b.n	801bf64 <tcp_input+0x888>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	685b      	ldr	r3, [r3, #4]
 801b832:	4a51      	ldr	r2, [pc, #324]	; (801b978 <tcp_input+0x29c>)
 801b834:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	681b      	ldr	r3, [r3, #0]
 801b83a:	8a3a      	ldrh	r2, [r7, #16]
 801b83c:	4611      	mov	r1, r2
 801b83e:	4618      	mov	r0, r3
 801b840:	f7fd fc68 	bl	8019114 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	891a      	ldrh	r2, [r3, #8]
 801b848:	8a3b      	ldrh	r3, [r7, #16]
 801b84a:	1ad3      	subs	r3, r2, r3
 801b84c:	b29a      	uxth	r2, r3
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	895b      	ldrh	r3, [r3, #10]
 801b856:	2b00      	cmp	r3, #0
 801b858:	d005      	beq.n	801b866 <tcp_input+0x18a>
 801b85a:	4b40      	ldr	r3, [pc, #256]	; (801b95c <tcp_input+0x280>)
 801b85c:	22df      	movs	r2, #223	; 0xdf
 801b85e:	4949      	ldr	r1, [pc, #292]	; (801b984 <tcp_input+0x2a8>)
 801b860:	4840      	ldr	r0, [pc, #256]	; (801b964 <tcp_input+0x288>)
 801b862:	f008 fbb1 	bl	8023fc8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	891a      	ldrh	r2, [r3, #8]
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	891b      	ldrh	r3, [r3, #8]
 801b870:	429a      	cmp	r2, r3
 801b872:	d005      	beq.n	801b880 <tcp_input+0x1a4>
 801b874:	4b39      	ldr	r3, [pc, #228]	; (801b95c <tcp_input+0x280>)
 801b876:	22e0      	movs	r2, #224	; 0xe0
 801b878:	4943      	ldr	r1, [pc, #268]	; (801b988 <tcp_input+0x2ac>)
 801b87a:	483a      	ldr	r0, [pc, #232]	; (801b964 <tcp_input+0x288>)
 801b87c:	f008 fba4 	bl	8023fc8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801b880:	4b3a      	ldr	r3, [pc, #232]	; (801b96c <tcp_input+0x290>)
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	881b      	ldrh	r3, [r3, #0]
 801b886:	b29b      	uxth	r3, r3
 801b888:	4a38      	ldr	r2, [pc, #224]	; (801b96c <tcp_input+0x290>)
 801b88a:	6814      	ldr	r4, [r2, #0]
 801b88c:	4618      	mov	r0, r3
 801b88e:	f7fb fe29 	bl	80174e4 <lwip_htons>
 801b892:	4603      	mov	r3, r0
 801b894:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801b896:	4b35      	ldr	r3, [pc, #212]	; (801b96c <tcp_input+0x290>)
 801b898:	681b      	ldr	r3, [r3, #0]
 801b89a:	885b      	ldrh	r3, [r3, #2]
 801b89c:	b29b      	uxth	r3, r3
 801b89e:	4a33      	ldr	r2, [pc, #204]	; (801b96c <tcp_input+0x290>)
 801b8a0:	6814      	ldr	r4, [r2, #0]
 801b8a2:	4618      	mov	r0, r3
 801b8a4:	f7fb fe1e 	bl	80174e4 <lwip_htons>
 801b8a8:	4603      	mov	r3, r0
 801b8aa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801b8ac:	4b2f      	ldr	r3, [pc, #188]	; (801b96c <tcp_input+0x290>)
 801b8ae:	681b      	ldr	r3, [r3, #0]
 801b8b0:	685b      	ldr	r3, [r3, #4]
 801b8b2:	4a2e      	ldr	r2, [pc, #184]	; (801b96c <tcp_input+0x290>)
 801b8b4:	6814      	ldr	r4, [r2, #0]
 801b8b6:	4618      	mov	r0, r3
 801b8b8:	f7fb fe29 	bl	801750e <lwip_htonl>
 801b8bc:	4603      	mov	r3, r0
 801b8be:	6063      	str	r3, [r4, #4]
 801b8c0:	6863      	ldr	r3, [r4, #4]
 801b8c2:	4a32      	ldr	r2, [pc, #200]	; (801b98c <tcp_input+0x2b0>)
 801b8c4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801b8c6:	4b29      	ldr	r3, [pc, #164]	; (801b96c <tcp_input+0x290>)
 801b8c8:	681b      	ldr	r3, [r3, #0]
 801b8ca:	689b      	ldr	r3, [r3, #8]
 801b8cc:	4a27      	ldr	r2, [pc, #156]	; (801b96c <tcp_input+0x290>)
 801b8ce:	6814      	ldr	r4, [r2, #0]
 801b8d0:	4618      	mov	r0, r3
 801b8d2:	f7fb fe1c 	bl	801750e <lwip_htonl>
 801b8d6:	4603      	mov	r3, r0
 801b8d8:	60a3      	str	r3, [r4, #8]
 801b8da:	68a3      	ldr	r3, [r4, #8]
 801b8dc:	4a2c      	ldr	r2, [pc, #176]	; (801b990 <tcp_input+0x2b4>)
 801b8de:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801b8e0:	4b22      	ldr	r3, [pc, #136]	; (801b96c <tcp_input+0x290>)
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	89db      	ldrh	r3, [r3, #14]
 801b8e6:	b29b      	uxth	r3, r3
 801b8e8:	4a20      	ldr	r2, [pc, #128]	; (801b96c <tcp_input+0x290>)
 801b8ea:	6814      	ldr	r4, [r2, #0]
 801b8ec:	4618      	mov	r0, r3
 801b8ee:	f7fb fdf9 	bl	80174e4 <lwip_htons>
 801b8f2:	4603      	mov	r3, r0
 801b8f4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801b8f6:	4b1d      	ldr	r3, [pc, #116]	; (801b96c <tcp_input+0x290>)
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	899b      	ldrh	r3, [r3, #12]
 801b8fc:	b29b      	uxth	r3, r3
 801b8fe:	4618      	mov	r0, r3
 801b900:	f7fb fdf0 	bl	80174e4 <lwip_htons>
 801b904:	4603      	mov	r3, r0
 801b906:	b2db      	uxtb	r3, r3
 801b908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b90c:	b2da      	uxtb	r2, r3
 801b90e:	4b21      	ldr	r3, [pc, #132]	; (801b994 <tcp_input+0x2b8>)
 801b910:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	891a      	ldrh	r2, [r3, #8]
 801b916:	4b20      	ldr	r3, [pc, #128]	; (801b998 <tcp_input+0x2bc>)
 801b918:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801b91a:	4b1e      	ldr	r3, [pc, #120]	; (801b994 <tcp_input+0x2b8>)
 801b91c:	781b      	ldrb	r3, [r3, #0]
 801b91e:	f003 0303 	and.w	r3, r3, #3
 801b922:	2b00      	cmp	r3, #0
 801b924:	d014      	beq.n	801b950 <tcp_input+0x274>
    tcplen++;
 801b926:	4b1c      	ldr	r3, [pc, #112]	; (801b998 <tcp_input+0x2bc>)
 801b928:	881b      	ldrh	r3, [r3, #0]
 801b92a:	3301      	adds	r3, #1
 801b92c:	b29a      	uxth	r2, r3
 801b92e:	4b1a      	ldr	r3, [pc, #104]	; (801b998 <tcp_input+0x2bc>)
 801b930:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	891a      	ldrh	r2, [r3, #8]
 801b936:	4b18      	ldr	r3, [pc, #96]	; (801b998 <tcp_input+0x2bc>)
 801b938:	881b      	ldrh	r3, [r3, #0]
 801b93a:	429a      	cmp	r2, r3
 801b93c:	d908      	bls.n	801b950 <tcp_input+0x274>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 801b93e:	4b0a      	ldr	r3, [pc, #40]	; (801b968 <tcp_input+0x28c>)
 801b940:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 801b944:	3301      	adds	r3, #1
 801b946:	b29a      	uxth	r2, r3
 801b948:	4b07      	ldr	r3, [pc, #28]	; (801b968 <tcp_input+0x28c>)
 801b94a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 801b94e:	e309      	b.n	801bf64 <tcp_input+0x888>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801b950:	2300      	movs	r3, #0
 801b952:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b954:	4b11      	ldr	r3, [pc, #68]	; (801b99c <tcp_input+0x2c0>)
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	61bb      	str	r3, [r7, #24]
 801b95a:	e0a1      	b.n	801baa0 <tcp_input+0x3c4>
 801b95c:	080278dc 	.word	0x080278dc
 801b960:	08027910 	.word	0x08027910
 801b964:	08027928 	.word	0x08027928
 801b968:	2007ecb8 	.word	0x2007ecb8
 801b96c:	2007ede4 	.word	0x2007ede4
 801b970:	2007ba88 	.word	0x2007ba88
 801b974:	2007ede8 	.word	0x2007ede8
 801b978:	2007edec 	.word	0x2007edec
 801b97c:	2007edea 	.word	0x2007edea
 801b980:	08027950 	.word	0x08027950
 801b984:	08027960 	.word	0x08027960
 801b988:	0802796c 	.word	0x0802796c
 801b98c:	2007edf4 	.word	0x2007edf4
 801b990:	2007edf8 	.word	0x2007edf8
 801b994:	2007ee00 	.word	0x2007ee00
 801b998:	2007edfe 	.word	0x2007edfe
 801b99c:	2007edc4 	.word	0x2007edc4
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801b9a0:	69bb      	ldr	r3, [r7, #24]
 801b9a2:	7d1b      	ldrb	r3, [r3, #20]
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d105      	bne.n	801b9b4 <tcp_input+0x2d8>
 801b9a8:	4b8a      	ldr	r3, [pc, #552]	; (801bbd4 <tcp_input+0x4f8>)
 801b9aa:	22fb      	movs	r2, #251	; 0xfb
 801b9ac:	498a      	ldr	r1, [pc, #552]	; (801bbd8 <tcp_input+0x4fc>)
 801b9ae:	488b      	ldr	r0, [pc, #556]	; (801bbdc <tcp_input+0x500>)
 801b9b0:	f008 fb0a 	bl	8023fc8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801b9b4:	69bb      	ldr	r3, [r7, #24]
 801b9b6:	7d1b      	ldrb	r3, [r3, #20]
 801b9b8:	2b0a      	cmp	r3, #10
 801b9ba:	d105      	bne.n	801b9c8 <tcp_input+0x2ec>
 801b9bc:	4b85      	ldr	r3, [pc, #532]	; (801bbd4 <tcp_input+0x4f8>)
 801b9be:	22fc      	movs	r2, #252	; 0xfc
 801b9c0:	4987      	ldr	r1, [pc, #540]	; (801bbe0 <tcp_input+0x504>)
 801b9c2:	4886      	ldr	r0, [pc, #536]	; (801bbdc <tcp_input+0x500>)
 801b9c4:	f008 fb00 	bl	8023fc8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801b9c8:	69bb      	ldr	r3, [r7, #24]
 801b9ca:	7d1b      	ldrb	r3, [r3, #20]
 801b9cc:	2b01      	cmp	r3, #1
 801b9ce:	d105      	bne.n	801b9dc <tcp_input+0x300>
 801b9d0:	4b80      	ldr	r3, [pc, #512]	; (801bbd4 <tcp_input+0x4f8>)
 801b9d2:	22fd      	movs	r2, #253	; 0xfd
 801b9d4:	4983      	ldr	r1, [pc, #524]	; (801bbe4 <tcp_input+0x508>)
 801b9d6:	4881      	ldr	r0, [pc, #516]	; (801bbdc <tcp_input+0x500>)
 801b9d8:	f008 faf6 	bl	8023fc8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b9dc:	69bb      	ldr	r3, [r7, #24]
 801b9de:	7a1b      	ldrb	r3, [r3, #8]
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d00c      	beq.n	801b9fe <tcp_input+0x322>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b9e4:	69bb      	ldr	r3, [r7, #24]
 801b9e6:	7a1a      	ldrb	r2, [r3, #8]
 801b9e8:	4b7f      	ldr	r3, [pc, #508]	; (801bbe8 <tcp_input+0x50c>)
 801b9ea:	685b      	ldr	r3, [r3, #4]
 801b9ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b9f0:	3301      	adds	r3, #1
 801b9f2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b9f4:	429a      	cmp	r2, r3
 801b9f6:	d002      	beq.n	801b9fe <tcp_input+0x322>
      prev = pcb;
 801b9f8:	69bb      	ldr	r3, [r7, #24]
 801b9fa:	61fb      	str	r3, [r7, #28]
      continue;
 801b9fc:	e04d      	b.n	801ba9a <tcp_input+0x3be>
    }

    if (pcb->remote_port == tcphdr->src &&
 801b9fe:	69bb      	ldr	r3, [r7, #24]
 801ba00:	8b1a      	ldrh	r2, [r3, #24]
 801ba02:	4b7a      	ldr	r3, [pc, #488]	; (801bbec <tcp_input+0x510>)
 801ba04:	681b      	ldr	r3, [r3, #0]
 801ba06:	881b      	ldrh	r3, [r3, #0]
 801ba08:	b29b      	uxth	r3, r3
 801ba0a:	429a      	cmp	r2, r3
 801ba0c:	d143      	bne.n	801ba96 <tcp_input+0x3ba>
        pcb->local_port == tcphdr->dest &&
 801ba0e:	69bb      	ldr	r3, [r7, #24]
 801ba10:	8ada      	ldrh	r2, [r3, #22]
 801ba12:	4b76      	ldr	r3, [pc, #472]	; (801bbec <tcp_input+0x510>)
 801ba14:	681b      	ldr	r3, [r3, #0]
 801ba16:	885b      	ldrh	r3, [r3, #2]
 801ba18:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801ba1a:	429a      	cmp	r2, r3
 801ba1c:	d13b      	bne.n	801ba96 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ba1e:	69bb      	ldr	r3, [r7, #24]
 801ba20:	685a      	ldr	r2, [r3, #4]
 801ba22:	4b71      	ldr	r3, [pc, #452]	; (801bbe8 <tcp_input+0x50c>)
 801ba24:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801ba26:	429a      	cmp	r2, r3
 801ba28:	d135      	bne.n	801ba96 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ba2a:	69bb      	ldr	r3, [r7, #24]
 801ba2c:	681a      	ldr	r2, [r3, #0]
 801ba2e:	4b6e      	ldr	r3, [pc, #440]	; (801bbe8 <tcp_input+0x50c>)
 801ba30:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ba32:	429a      	cmp	r2, r3
 801ba34:	d12f      	bne.n	801ba96 <tcp_input+0x3ba>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801ba36:	69bb      	ldr	r3, [r7, #24]
 801ba38:	68db      	ldr	r3, [r3, #12]
 801ba3a:	69ba      	ldr	r2, [r7, #24]
 801ba3c:	429a      	cmp	r2, r3
 801ba3e:	d106      	bne.n	801ba4e <tcp_input+0x372>
 801ba40:	4b64      	ldr	r3, [pc, #400]	; (801bbd4 <tcp_input+0x4f8>)
 801ba42:	f240 120d 	movw	r2, #269	; 0x10d
 801ba46:	496a      	ldr	r1, [pc, #424]	; (801bbf0 <tcp_input+0x514>)
 801ba48:	4864      	ldr	r0, [pc, #400]	; (801bbdc <tcp_input+0x500>)
 801ba4a:	f008 fabd 	bl	8023fc8 <iprintf>
      if (prev != NULL) {
 801ba4e:	69fb      	ldr	r3, [r7, #28]
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	d00b      	beq.n	801ba6c <tcp_input+0x390>
        prev->next = pcb->next;
 801ba54:	69bb      	ldr	r3, [r7, #24]
 801ba56:	68da      	ldr	r2, [r3, #12]
 801ba58:	69fb      	ldr	r3, [r7, #28]
 801ba5a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801ba5c:	4b65      	ldr	r3, [pc, #404]	; (801bbf4 <tcp_input+0x518>)
 801ba5e:	681a      	ldr	r2, [r3, #0]
 801ba60:	69bb      	ldr	r3, [r7, #24]
 801ba62:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801ba64:	4a63      	ldr	r2, [pc, #396]	; (801bbf4 <tcp_input+0x518>)
 801ba66:	69bb      	ldr	r3, [r7, #24]
 801ba68:	6013      	str	r3, [r2, #0]
 801ba6a:	e007      	b.n	801ba7c <tcp_input+0x3a0>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 801ba6c:	4b62      	ldr	r3, [pc, #392]	; (801bbf8 <tcp_input+0x51c>)
 801ba6e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 801ba72:	3301      	adds	r3, #1
 801ba74:	b29a      	uxth	r2, r3
 801ba76:	4b60      	ldr	r3, [pc, #384]	; (801bbf8 <tcp_input+0x51c>)
 801ba78:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801ba7c:	69bb      	ldr	r3, [r7, #24]
 801ba7e:	68db      	ldr	r3, [r3, #12]
 801ba80:	69ba      	ldr	r2, [r7, #24]
 801ba82:	429a      	cmp	r2, r3
 801ba84:	d111      	bne.n	801baaa <tcp_input+0x3ce>
 801ba86:	4b53      	ldr	r3, [pc, #332]	; (801bbd4 <tcp_input+0x4f8>)
 801ba88:	f240 1215 	movw	r2, #277	; 0x115
 801ba8c:	495b      	ldr	r1, [pc, #364]	; (801bbfc <tcp_input+0x520>)
 801ba8e:	4853      	ldr	r0, [pc, #332]	; (801bbdc <tcp_input+0x500>)
 801ba90:	f008 fa9a 	bl	8023fc8 <iprintf>
      break;
 801ba94:	e009      	b.n	801baaa <tcp_input+0x3ce>
    }
    prev = pcb;
 801ba96:	69bb      	ldr	r3, [r7, #24]
 801ba98:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ba9a:	69bb      	ldr	r3, [r7, #24]
 801ba9c:	68db      	ldr	r3, [r3, #12]
 801ba9e:	61bb      	str	r3, [r7, #24]
 801baa0:	69bb      	ldr	r3, [r7, #24]
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	f47f af7c 	bne.w	801b9a0 <tcp_input+0x2c4>
 801baa8:	e000      	b.n	801baac <tcp_input+0x3d0>
      break;
 801baaa:	bf00      	nop
  }

  if (pcb == NULL) {
 801baac:	69bb      	ldr	r3, [r7, #24]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	f040 80bb 	bne.w	801bc2a <tcp_input+0x54e>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bab4:	4b52      	ldr	r3, [pc, #328]	; (801bc00 <tcp_input+0x524>)
 801bab6:	681b      	ldr	r3, [r3, #0]
 801bab8:	61bb      	str	r3, [r7, #24]
 801baba:	e03f      	b.n	801bb3c <tcp_input+0x460>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801babc:	69bb      	ldr	r3, [r7, #24]
 801babe:	7d1b      	ldrb	r3, [r3, #20]
 801bac0:	2b0a      	cmp	r3, #10
 801bac2:	d006      	beq.n	801bad2 <tcp_input+0x3f6>
 801bac4:	4b43      	ldr	r3, [pc, #268]	; (801bbd4 <tcp_input+0x4f8>)
 801bac6:	f240 121f 	movw	r2, #287	; 0x11f
 801baca:	494e      	ldr	r1, [pc, #312]	; (801bc04 <tcp_input+0x528>)
 801bacc:	4843      	ldr	r0, [pc, #268]	; (801bbdc <tcp_input+0x500>)
 801bace:	f008 fa7b 	bl	8023fc8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bad2:	69bb      	ldr	r3, [r7, #24]
 801bad4:	7a1b      	ldrb	r3, [r3, #8]
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d009      	beq.n	801baee <tcp_input+0x412>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801bada:	69bb      	ldr	r3, [r7, #24]
 801badc:	7a1a      	ldrb	r2, [r3, #8]
 801bade:	4b42      	ldr	r3, [pc, #264]	; (801bbe8 <tcp_input+0x50c>)
 801bae0:	685b      	ldr	r3, [r3, #4]
 801bae2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bae6:	3301      	adds	r3, #1
 801bae8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801baea:	429a      	cmp	r2, r3
 801baec:	d122      	bne.n	801bb34 <tcp_input+0x458>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801baee:	69bb      	ldr	r3, [r7, #24]
 801baf0:	8b1a      	ldrh	r2, [r3, #24]
 801baf2:	4b3e      	ldr	r3, [pc, #248]	; (801bbec <tcp_input+0x510>)
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	881b      	ldrh	r3, [r3, #0]
 801baf8:	b29b      	uxth	r3, r3
 801bafa:	429a      	cmp	r2, r3
 801bafc:	d11b      	bne.n	801bb36 <tcp_input+0x45a>
          pcb->local_port == tcphdr->dest &&
 801bafe:	69bb      	ldr	r3, [r7, #24]
 801bb00:	8ada      	ldrh	r2, [r3, #22]
 801bb02:	4b3a      	ldr	r3, [pc, #232]	; (801bbec <tcp_input+0x510>)
 801bb04:	681b      	ldr	r3, [r3, #0]
 801bb06:	885b      	ldrh	r3, [r3, #2]
 801bb08:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801bb0a:	429a      	cmp	r2, r3
 801bb0c:	d113      	bne.n	801bb36 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801bb0e:	69bb      	ldr	r3, [r7, #24]
 801bb10:	685a      	ldr	r2, [r3, #4]
 801bb12:	4b35      	ldr	r3, [pc, #212]	; (801bbe8 <tcp_input+0x50c>)
 801bb14:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801bb16:	429a      	cmp	r2, r3
 801bb18:	d10d      	bne.n	801bb36 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801bb1a:	69bb      	ldr	r3, [r7, #24]
 801bb1c:	681a      	ldr	r2, [r3, #0]
 801bb1e:	4b32      	ldr	r3, [pc, #200]	; (801bbe8 <tcp_input+0x50c>)
 801bb20:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801bb22:	429a      	cmp	r2, r3
 801bb24:	d107      	bne.n	801bb36 <tcp_input+0x45a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801bb26:	69b8      	ldr	r0, [r7, #24]
 801bb28:	f000 fb88 	bl	801c23c <tcp_timewait_input>
        }
        pbuf_free(p);
 801bb2c:	6878      	ldr	r0, [r7, #4]
 801bb2e:	f7fd fb77 	bl	8019220 <pbuf_free>
        return;
 801bb32:	e224      	b.n	801bf7e <tcp_input+0x8a2>
        continue;
 801bb34:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bb36:	69bb      	ldr	r3, [r7, #24]
 801bb38:	68db      	ldr	r3, [r3, #12]
 801bb3a:	61bb      	str	r3, [r7, #24]
 801bb3c:	69bb      	ldr	r3, [r7, #24]
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	d1bc      	bne.n	801babc <tcp_input+0x3e0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801bb42:	2300      	movs	r3, #0
 801bb44:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801bb46:	4b30      	ldr	r3, [pc, #192]	; (801bc08 <tcp_input+0x52c>)
 801bb48:	681b      	ldr	r3, [r3, #0]
 801bb4a:	617b      	str	r3, [r7, #20]
 801bb4c:	e02a      	b.n	801bba4 <tcp_input+0x4c8>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801bb4e:	697b      	ldr	r3, [r7, #20]
 801bb50:	7a1b      	ldrb	r3, [r3, #8]
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d00c      	beq.n	801bb70 <tcp_input+0x494>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801bb56:	697b      	ldr	r3, [r7, #20]
 801bb58:	7a1a      	ldrb	r2, [r3, #8]
 801bb5a:	4b23      	ldr	r3, [pc, #140]	; (801bbe8 <tcp_input+0x50c>)
 801bb5c:	685b      	ldr	r3, [r3, #4]
 801bb5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bb62:	3301      	adds	r3, #1
 801bb64:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801bb66:	429a      	cmp	r2, r3
 801bb68:	d002      	beq.n	801bb70 <tcp_input+0x494>
        prev = (struct tcp_pcb *)lpcb;
 801bb6a:	697b      	ldr	r3, [r7, #20]
 801bb6c:	61fb      	str	r3, [r7, #28]
        continue;
 801bb6e:	e016      	b.n	801bb9e <tcp_input+0x4c2>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801bb70:	697b      	ldr	r3, [r7, #20]
 801bb72:	8ada      	ldrh	r2, [r3, #22]
 801bb74:	4b1d      	ldr	r3, [pc, #116]	; (801bbec <tcp_input+0x510>)
 801bb76:	681b      	ldr	r3, [r3, #0]
 801bb78:	885b      	ldrh	r3, [r3, #2]
 801bb7a:	b29b      	uxth	r3, r3
 801bb7c:	429a      	cmp	r2, r3
 801bb7e:	d10c      	bne.n	801bb9a <tcp_input+0x4be>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801bb80:	697b      	ldr	r3, [r7, #20]
 801bb82:	681a      	ldr	r2, [r3, #0]
 801bb84:	4b18      	ldr	r3, [pc, #96]	; (801bbe8 <tcp_input+0x50c>)
 801bb86:	695b      	ldr	r3, [r3, #20]
 801bb88:	429a      	cmp	r2, r3
 801bb8a:	d00f      	beq.n	801bbac <tcp_input+0x4d0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801bb8c:	697b      	ldr	r3, [r7, #20]
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d00d      	beq.n	801bbae <tcp_input+0x4d2>
 801bb92:	697b      	ldr	r3, [r7, #20]
 801bb94:	681b      	ldr	r3, [r3, #0]
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d009      	beq.n	801bbae <tcp_input+0x4d2>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801bb9a:	697b      	ldr	r3, [r7, #20]
 801bb9c:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801bb9e:	697b      	ldr	r3, [r7, #20]
 801bba0:	68db      	ldr	r3, [r3, #12]
 801bba2:	617b      	str	r3, [r7, #20]
 801bba4:	697b      	ldr	r3, [r7, #20]
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d1d1      	bne.n	801bb4e <tcp_input+0x472>
 801bbaa:	e000      	b.n	801bbae <tcp_input+0x4d2>
            break;
 801bbac:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801bbae:	697b      	ldr	r3, [r7, #20]
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d03a      	beq.n	801bc2a <tcp_input+0x54e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801bbb4:	69fb      	ldr	r3, [r7, #28]
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d028      	beq.n	801bc0c <tcp_input+0x530>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801bbba:	697b      	ldr	r3, [r7, #20]
 801bbbc:	68da      	ldr	r2, [r3, #12]
 801bbbe:	69fb      	ldr	r3, [r7, #28]
 801bbc0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801bbc2:	4b11      	ldr	r3, [pc, #68]	; (801bc08 <tcp_input+0x52c>)
 801bbc4:	681a      	ldr	r2, [r3, #0]
 801bbc6:	697b      	ldr	r3, [r7, #20]
 801bbc8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801bbca:	4a0f      	ldr	r2, [pc, #60]	; (801bc08 <tcp_input+0x52c>)
 801bbcc:	697b      	ldr	r3, [r7, #20]
 801bbce:	6013      	str	r3, [r2, #0]
 801bbd0:	e024      	b.n	801bc1c <tcp_input+0x540>
 801bbd2:	bf00      	nop
 801bbd4:	080278dc 	.word	0x080278dc
 801bbd8:	0802798c 	.word	0x0802798c
 801bbdc:	08027928 	.word	0x08027928
 801bbe0:	080279b4 	.word	0x080279b4
 801bbe4:	080279e0 	.word	0x080279e0
 801bbe8:	2007ba88 	.word	0x2007ba88
 801bbec:	2007ede4 	.word	0x2007ede4
 801bbf0:	08027a08 	.word	0x08027a08
 801bbf4:	2007edc4 	.word	0x2007edc4
 801bbf8:	2007ecb8 	.word	0x2007ecb8
 801bbfc:	08027a34 	.word	0x08027a34
 801bc00:	2007edc8 	.word	0x2007edc8
 801bc04:	08027a60 	.word	0x08027a60
 801bc08:	2007edc0 	.word	0x2007edc0
      } else {
        TCP_STATS_INC(tcp.cachehit);
 801bc0c:	4ba0      	ldr	r3, [pc, #640]	; (801be90 <tcp_input+0x7b4>)
 801bc0e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 801bc12:	3301      	adds	r3, #1
 801bc14:	b29a      	uxth	r2, r3
 801bc16:	4b9e      	ldr	r3, [pc, #632]	; (801be90 <tcp_input+0x7b4>)
 801bc18:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801bc1c:	6978      	ldr	r0, [r7, #20]
 801bc1e:	f000 fa05 	bl	801c02c <tcp_listen_input>
      }
      pbuf_free(p);
 801bc22:	6878      	ldr	r0, [r7, #4]
 801bc24:	f7fd fafc 	bl	8019220 <pbuf_free>
      return;
 801bc28:	e1a9      	b.n	801bf7e <tcp_input+0x8a2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801bc2a:	69bb      	ldr	r3, [r7, #24]
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	f000 815f 	beq.w	801bef0 <tcp_input+0x814>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801bc32:	4b98      	ldr	r3, [pc, #608]	; (801be94 <tcp_input+0x7b8>)
 801bc34:	2200      	movs	r2, #0
 801bc36:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	891a      	ldrh	r2, [r3, #8]
 801bc3c:	4b95      	ldr	r3, [pc, #596]	; (801be94 <tcp_input+0x7b8>)
 801bc3e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801bc40:	4a94      	ldr	r2, [pc, #592]	; (801be94 <tcp_input+0x7b8>)
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801bc46:	4b94      	ldr	r3, [pc, #592]	; (801be98 <tcp_input+0x7bc>)
 801bc48:	681b      	ldr	r3, [r3, #0]
 801bc4a:	4a92      	ldr	r2, [pc, #584]	; (801be94 <tcp_input+0x7b8>)
 801bc4c:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 801bc4e:	4b93      	ldr	r3, [pc, #588]	; (801be9c <tcp_input+0x7c0>)
 801bc50:	2200      	movs	r2, #0
 801bc52:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801bc54:	4b92      	ldr	r3, [pc, #584]	; (801bea0 <tcp_input+0x7c4>)
 801bc56:	2200      	movs	r2, #0
 801bc58:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801bc5a:	4b92      	ldr	r3, [pc, #584]	; (801bea4 <tcp_input+0x7c8>)
 801bc5c:	2200      	movs	r2, #0
 801bc5e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801bc60:	4b91      	ldr	r3, [pc, #580]	; (801bea8 <tcp_input+0x7cc>)
 801bc62:	781b      	ldrb	r3, [r3, #0]
 801bc64:	f003 0308 	and.w	r3, r3, #8
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	d006      	beq.n	801bc7a <tcp_input+0x59e>
      p->flags |= PBUF_FLAG_PUSH;
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	7b5b      	ldrb	r3, [r3, #13]
 801bc70:	f043 0301 	orr.w	r3, r3, #1
 801bc74:	b2da      	uxtb	r2, r3
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801bc7a:	69bb      	ldr	r3, [r7, #24]
 801bc7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	d01e      	beq.n	801bcc0 <tcp_input+0x5e4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801bc82:	69b8      	ldr	r0, [r7, #24]
 801bc84:	f7fe ffe6 	bl	801ac54 <tcp_process_refused_data>
 801bc88:	4603      	mov	r3, r0
 801bc8a:	f113 0f0d 	cmn.w	r3, #13
 801bc8e:	d007      	beq.n	801bca0 <tcp_input+0x5c4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801bc90:	69bb      	ldr	r3, [r7, #24]
 801bc92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801bc94:	2b00      	cmp	r3, #0
 801bc96:	d013      	beq.n	801bcc0 <tcp_input+0x5e4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801bc98:	4b84      	ldr	r3, [pc, #528]	; (801beac <tcp_input+0x7d0>)
 801bc9a:	881b      	ldrh	r3, [r3, #0]
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d00f      	beq.n	801bcc0 <tcp_input+0x5e4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801bca0:	69bb      	ldr	r3, [r7, #24]
 801bca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	d102      	bne.n	801bcae <tcp_input+0x5d2>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801bca8:	69b8      	ldr	r0, [r7, #24]
 801bcaa:	f003 fee1 	bl	801fa70 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 801bcae:	4b78      	ldr	r3, [pc, #480]	; (801be90 <tcp_input+0x7b4>)
 801bcb0:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 801bcb4:	3301      	adds	r3, #1
 801bcb6:	b29a      	uxth	r2, r3
 801bcb8:	4b75      	ldr	r3, [pc, #468]	; (801be90 <tcp_input+0x7b4>)
 801bcba:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801bcbe:	e104      	b.n	801beca <tcp_input+0x7ee>
      }
    }
    tcp_input_pcb = pcb;
 801bcc0:	4a7b      	ldr	r2, [pc, #492]	; (801beb0 <tcp_input+0x7d4>)
 801bcc2:	69bb      	ldr	r3, [r7, #24]
 801bcc4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801bcc6:	69b8      	ldr	r0, [r7, #24]
 801bcc8:	f000 fb32 	bl	801c330 <tcp_process>
 801bccc:	4603      	mov	r3, r0
 801bcce:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801bcd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801bcd4:	f113 0f0d 	cmn.w	r3, #13
 801bcd8:	f000 80d1 	beq.w	801be7e <tcp_input+0x7a2>
      if (recv_flags & TF_RESET) {
 801bcdc:	4b70      	ldr	r3, [pc, #448]	; (801bea0 <tcp_input+0x7c4>)
 801bcde:	781b      	ldrb	r3, [r3, #0]
 801bce0:	f003 0308 	and.w	r3, r3, #8
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d015      	beq.n	801bd14 <tcp_input+0x638>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801bce8:	69bb      	ldr	r3, [r7, #24]
 801bcea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d008      	beq.n	801bd04 <tcp_input+0x628>
 801bcf2:	69bb      	ldr	r3, [r7, #24]
 801bcf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bcf8:	69ba      	ldr	r2, [r7, #24]
 801bcfa:	6912      	ldr	r2, [r2, #16]
 801bcfc:	f06f 010d 	mvn.w	r1, #13
 801bd00:	4610      	mov	r0, r2
 801bd02:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801bd04:	69b9      	ldr	r1, [r7, #24]
 801bd06:	486b      	ldr	r0, [pc, #428]	; (801beb4 <tcp_input+0x7d8>)
 801bd08:	f7ff fb6a 	bl	801b3e0 <tcp_pcb_remove>
        tcp_free(pcb);
 801bd0c:	69b8      	ldr	r0, [r7, #24]
 801bd0e:	f7fd fd43 	bl	8019798 <tcp_free>
 801bd12:	e0da      	b.n	801beca <tcp_input+0x7ee>
      } else {
        err = ERR_OK;
 801bd14:	2300      	movs	r3, #0
 801bd16:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801bd18:	4b62      	ldr	r3, [pc, #392]	; (801bea4 <tcp_input+0x7c8>)
 801bd1a:	881b      	ldrh	r3, [r3, #0]
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	d01d      	beq.n	801bd5c <tcp_input+0x680>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801bd20:	4b60      	ldr	r3, [pc, #384]	; (801bea4 <tcp_input+0x7c8>)
 801bd22:	881b      	ldrh	r3, [r3, #0]
 801bd24:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801bd26:	69bb      	ldr	r3, [r7, #24]
 801bd28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	d00a      	beq.n	801bd46 <tcp_input+0x66a>
 801bd30:	69bb      	ldr	r3, [r7, #24]
 801bd32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bd36:	69ba      	ldr	r2, [r7, #24]
 801bd38:	6910      	ldr	r0, [r2, #16]
 801bd3a:	89fa      	ldrh	r2, [r7, #14]
 801bd3c:	69b9      	ldr	r1, [r7, #24]
 801bd3e:	4798      	blx	r3
 801bd40:	4603      	mov	r3, r0
 801bd42:	74fb      	strb	r3, [r7, #19]
 801bd44:	e001      	b.n	801bd4a <tcp_input+0x66e>
 801bd46:	2300      	movs	r3, #0
 801bd48:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801bd4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801bd4e:	f113 0f0d 	cmn.w	r3, #13
 801bd52:	f000 8096 	beq.w	801be82 <tcp_input+0x7a6>
              goto aborted;
            }
          }
          recv_acked = 0;
 801bd56:	4b53      	ldr	r3, [pc, #332]	; (801bea4 <tcp_input+0x7c8>)
 801bd58:	2200      	movs	r2, #0
 801bd5a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801bd5c:	69b8      	ldr	r0, [r7, #24]
 801bd5e:	f000 f925 	bl	801bfac <tcp_input_delayed_close>
 801bd62:	4603      	mov	r3, r0
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	f040 808e 	bne.w	801be86 <tcp_input+0x7aa>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801bd6a:	4b4c      	ldr	r3, [pc, #304]	; (801be9c <tcp_input+0x7c0>)
 801bd6c:	681b      	ldr	r3, [r3, #0]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d041      	beq.n	801bdf6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801bd72:	69bb      	ldr	r3, [r7, #24]
 801bd74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	d006      	beq.n	801bd88 <tcp_input+0x6ac>
 801bd7a:	4b4f      	ldr	r3, [pc, #316]	; (801beb8 <tcp_input+0x7dc>)
 801bd7c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801bd80:	494e      	ldr	r1, [pc, #312]	; (801bebc <tcp_input+0x7e0>)
 801bd82:	484f      	ldr	r0, [pc, #316]	; (801bec0 <tcp_input+0x7e4>)
 801bd84:	f008 f920 	bl	8023fc8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801bd88:	69bb      	ldr	r3, [r7, #24]
 801bd8a:	8b5b      	ldrh	r3, [r3, #26]
 801bd8c:	f003 0310 	and.w	r3, r3, #16
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	d008      	beq.n	801bda6 <tcp_input+0x6ca>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801bd94:	4b41      	ldr	r3, [pc, #260]	; (801be9c <tcp_input+0x7c0>)
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	4618      	mov	r0, r3
 801bd9a:	f7fd fa41 	bl	8019220 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801bd9e:	69b8      	ldr	r0, [r7, #24]
 801bda0:	f7fe f83e 	bl	8019e20 <tcp_abort>
            goto aborted;
 801bda4:	e091      	b.n	801beca <tcp_input+0x7ee>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801bda6:	69bb      	ldr	r3, [r7, #24]
 801bda8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d00c      	beq.n	801bdca <tcp_input+0x6ee>
 801bdb0:	69bb      	ldr	r3, [r7, #24]
 801bdb2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801bdb6:	69bb      	ldr	r3, [r7, #24]
 801bdb8:	6918      	ldr	r0, [r3, #16]
 801bdba:	4b38      	ldr	r3, [pc, #224]	; (801be9c <tcp_input+0x7c0>)
 801bdbc:	681a      	ldr	r2, [r3, #0]
 801bdbe:	2300      	movs	r3, #0
 801bdc0:	69b9      	ldr	r1, [r7, #24]
 801bdc2:	47a0      	blx	r4
 801bdc4:	4603      	mov	r3, r0
 801bdc6:	74fb      	strb	r3, [r7, #19]
 801bdc8:	e008      	b.n	801bddc <tcp_input+0x700>
 801bdca:	4b34      	ldr	r3, [pc, #208]	; (801be9c <tcp_input+0x7c0>)
 801bdcc:	681a      	ldr	r2, [r3, #0]
 801bdce:	2300      	movs	r3, #0
 801bdd0:	69b9      	ldr	r1, [r7, #24]
 801bdd2:	2000      	movs	r0, #0
 801bdd4:	f7ff f814 	bl	801ae00 <tcp_recv_null>
 801bdd8:	4603      	mov	r3, r0
 801bdda:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801bddc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801bde0:	f113 0f0d 	cmn.w	r3, #13
 801bde4:	d051      	beq.n	801be8a <tcp_input+0x7ae>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801bde6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d003      	beq.n	801bdf6 <tcp_input+0x71a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801bdee:	4b2b      	ldr	r3, [pc, #172]	; (801be9c <tcp_input+0x7c0>)
 801bdf0:	681a      	ldr	r2, [r3, #0]
 801bdf2:	69bb      	ldr	r3, [r7, #24]
 801bdf4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801bdf6:	4b2a      	ldr	r3, [pc, #168]	; (801bea0 <tcp_input+0x7c4>)
 801bdf8:	781b      	ldrb	r3, [r3, #0]
 801bdfa:	f003 0320 	and.w	r3, r3, #32
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d030      	beq.n	801be64 <tcp_input+0x788>
          if (pcb->refused_data != NULL) {
 801be02:	69bb      	ldr	r3, [r7, #24]
 801be04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801be06:	2b00      	cmp	r3, #0
 801be08:	d009      	beq.n	801be1e <tcp_input+0x742>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801be0a:	69bb      	ldr	r3, [r7, #24]
 801be0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801be0e:	7b5a      	ldrb	r2, [r3, #13]
 801be10:	69bb      	ldr	r3, [r7, #24]
 801be12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801be14:	f042 0220 	orr.w	r2, r2, #32
 801be18:	b2d2      	uxtb	r2, r2
 801be1a:	735a      	strb	r2, [r3, #13]
 801be1c:	e022      	b.n	801be64 <tcp_input+0x788>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801be1e:	69bb      	ldr	r3, [r7, #24]
 801be20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801be22:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801be26:	d005      	beq.n	801be34 <tcp_input+0x758>
              pcb->rcv_wnd++;
 801be28:	69bb      	ldr	r3, [r7, #24]
 801be2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801be2c:	3301      	adds	r3, #1
 801be2e:	b29a      	uxth	r2, r3
 801be30:	69bb      	ldr	r3, [r7, #24]
 801be32:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801be34:	69bb      	ldr	r3, [r7, #24]
 801be36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	d00b      	beq.n	801be56 <tcp_input+0x77a>
 801be3e:	69bb      	ldr	r3, [r7, #24]
 801be40:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801be44:	69bb      	ldr	r3, [r7, #24]
 801be46:	6918      	ldr	r0, [r3, #16]
 801be48:	2300      	movs	r3, #0
 801be4a:	2200      	movs	r2, #0
 801be4c:	69b9      	ldr	r1, [r7, #24]
 801be4e:	47a0      	blx	r4
 801be50:	4603      	mov	r3, r0
 801be52:	74fb      	strb	r3, [r7, #19]
 801be54:	e001      	b.n	801be5a <tcp_input+0x77e>
 801be56:	2300      	movs	r3, #0
 801be58:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801be5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801be5e:	f113 0f0d 	cmn.w	r3, #13
 801be62:	d02f      	beq.n	801bec4 <tcp_input+0x7e8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801be64:	4b12      	ldr	r3, [pc, #72]	; (801beb0 <tcp_input+0x7d4>)
 801be66:	2200      	movs	r2, #0
 801be68:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801be6a:	69b8      	ldr	r0, [r7, #24]
 801be6c:	f000 f89e 	bl	801bfac <tcp_input_delayed_close>
 801be70:	4603      	mov	r3, r0
 801be72:	2b00      	cmp	r3, #0
 801be74:	d128      	bne.n	801bec8 <tcp_input+0x7ec>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801be76:	69b8      	ldr	r0, [r7, #24]
 801be78:	f002 ffd4 	bl	801ee24 <tcp_output>
 801be7c:	e025      	b.n	801beca <tcp_input+0x7ee>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801be7e:	bf00      	nop
 801be80:	e023      	b.n	801beca <tcp_input+0x7ee>
              goto aborted;
 801be82:	bf00      	nop
 801be84:	e021      	b.n	801beca <tcp_input+0x7ee>
          goto aborted;
 801be86:	bf00      	nop
 801be88:	e01f      	b.n	801beca <tcp_input+0x7ee>
            goto aborted;
 801be8a:	bf00      	nop
 801be8c:	e01d      	b.n	801beca <tcp_input+0x7ee>
 801be8e:	bf00      	nop
 801be90:	2007ecb8 	.word	0x2007ecb8
 801be94:	2007edd0 	.word	0x2007edd0
 801be98:	2007ede4 	.word	0x2007ede4
 801be9c:	2007ee04 	.word	0x2007ee04
 801bea0:	2007ee01 	.word	0x2007ee01
 801bea4:	2007edfc 	.word	0x2007edfc
 801bea8:	2007ee00 	.word	0x2007ee00
 801beac:	2007edfe 	.word	0x2007edfe
 801beb0:	2007ee08 	.word	0x2007ee08
 801beb4:	2007edc4 	.word	0x2007edc4
 801beb8:	080278dc 	.word	0x080278dc
 801bebc:	08027a90 	.word	0x08027a90
 801bec0:	08027928 	.word	0x08027928
              goto aborted;
 801bec4:	bf00      	nop
 801bec6:	e000      	b.n	801beca <tcp_input+0x7ee>
          goto aborted;
 801bec8:	bf00      	nop
    tcp_input_pcb = NULL;
 801beca:	4b2e      	ldr	r3, [pc, #184]	; (801bf84 <tcp_input+0x8a8>)
 801becc:	2200      	movs	r2, #0
 801bece:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801bed0:	4b2d      	ldr	r3, [pc, #180]	; (801bf88 <tcp_input+0x8ac>)
 801bed2:	2200      	movs	r2, #0
 801bed4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801bed6:	4b2d      	ldr	r3, [pc, #180]	; (801bf8c <tcp_input+0x8b0>)
 801bed8:	685b      	ldr	r3, [r3, #4]
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d04e      	beq.n	801bf7c <tcp_input+0x8a0>
      pbuf_free(inseg.p);
 801bede:	4b2b      	ldr	r3, [pc, #172]	; (801bf8c <tcp_input+0x8b0>)
 801bee0:	685b      	ldr	r3, [r3, #4]
 801bee2:	4618      	mov	r0, r3
 801bee4:	f7fd f99c 	bl	8019220 <pbuf_free>
      inseg.p = NULL;
 801bee8:	4b28      	ldr	r3, [pc, #160]	; (801bf8c <tcp_input+0x8b0>)
 801beea:	2200      	movs	r2, #0
 801beec:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801beee:	e045      	b.n	801bf7c <tcp_input+0x8a0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801bef0:	4b27      	ldr	r3, [pc, #156]	; (801bf90 <tcp_input+0x8b4>)
 801bef2:	681b      	ldr	r3, [r3, #0]
 801bef4:	899b      	ldrh	r3, [r3, #12]
 801bef6:	b29b      	uxth	r3, r3
 801bef8:	4618      	mov	r0, r3
 801befa:	f7fb faf3 	bl	80174e4 <lwip_htons>
 801befe:	4603      	mov	r3, r0
 801bf00:	b2db      	uxtb	r3, r3
 801bf02:	f003 0304 	and.w	r3, r3, #4
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d128      	bne.n	801bf5c <tcp_input+0x880>
      TCP_STATS_INC(tcp.proterr);
 801bf0a:	4b22      	ldr	r3, [pc, #136]	; (801bf94 <tcp_input+0x8b8>)
 801bf0c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 801bf10:	3301      	adds	r3, #1
 801bf12:	b29a      	uxth	r2, r3
 801bf14:	4b1f      	ldr	r3, [pc, #124]	; (801bf94 <tcp_input+0x8b8>)
 801bf16:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 801bf1a:	4b1e      	ldr	r3, [pc, #120]	; (801bf94 <tcp_input+0x8b8>)
 801bf1c:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 801bf20:	3301      	adds	r3, #1
 801bf22:	b29a      	uxth	r2, r3
 801bf24:	4b1b      	ldr	r3, [pc, #108]	; (801bf94 <tcp_input+0x8b8>)
 801bf26:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bf2a:	4b1b      	ldr	r3, [pc, #108]	; (801bf98 <tcp_input+0x8bc>)
 801bf2c:	6819      	ldr	r1, [r3, #0]
 801bf2e:	4b1b      	ldr	r3, [pc, #108]	; (801bf9c <tcp_input+0x8c0>)
 801bf30:	881b      	ldrh	r3, [r3, #0]
 801bf32:	461a      	mov	r2, r3
 801bf34:	4b1a      	ldr	r3, [pc, #104]	; (801bfa0 <tcp_input+0x8c4>)
 801bf36:	681b      	ldr	r3, [r3, #0]
 801bf38:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bf3a:	4b15      	ldr	r3, [pc, #84]	; (801bf90 <tcp_input+0x8b4>)
 801bf3c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bf3e:	885b      	ldrh	r3, [r3, #2]
 801bf40:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bf42:	4a13      	ldr	r2, [pc, #76]	; (801bf90 <tcp_input+0x8b4>)
 801bf44:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bf46:	8812      	ldrh	r2, [r2, #0]
 801bf48:	b292      	uxth	r2, r2
 801bf4a:	9202      	str	r2, [sp, #8]
 801bf4c:	9301      	str	r3, [sp, #4]
 801bf4e:	4b15      	ldr	r3, [pc, #84]	; (801bfa4 <tcp_input+0x8c8>)
 801bf50:	9300      	str	r3, [sp, #0]
 801bf52:	4b15      	ldr	r3, [pc, #84]	; (801bfa8 <tcp_input+0x8cc>)
 801bf54:	4602      	mov	r2, r0
 801bf56:	2000      	movs	r0, #0
 801bf58:	f003 fd38 	bl	801f9cc <tcp_rst>
    pbuf_free(p);
 801bf5c:	6878      	ldr	r0, [r7, #4]
 801bf5e:	f7fd f95f 	bl	8019220 <pbuf_free>
  return;
 801bf62:	e00b      	b.n	801bf7c <tcp_input+0x8a0>
dropped:
  TCP_STATS_INC(tcp.drop);
 801bf64:	4b0b      	ldr	r3, [pc, #44]	; (801bf94 <tcp_input+0x8b8>)
 801bf66:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 801bf6a:	3301      	adds	r3, #1
 801bf6c:	b29a      	uxth	r2, r3
 801bf6e:	4b09      	ldr	r3, [pc, #36]	; (801bf94 <tcp_input+0x8b8>)
 801bf70:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801bf74:	6878      	ldr	r0, [r7, #4]
 801bf76:	f7fd f953 	bl	8019220 <pbuf_free>
 801bf7a:	e000      	b.n	801bf7e <tcp_input+0x8a2>
  return;
 801bf7c:	bf00      	nop
}
 801bf7e:	3724      	adds	r7, #36	; 0x24
 801bf80:	46bd      	mov	sp, r7
 801bf82:	bd90      	pop	{r4, r7, pc}
 801bf84:	2007ee08 	.word	0x2007ee08
 801bf88:	2007ee04 	.word	0x2007ee04
 801bf8c:	2007edd0 	.word	0x2007edd0
 801bf90:	2007ede4 	.word	0x2007ede4
 801bf94:	2007ecb8 	.word	0x2007ecb8
 801bf98:	2007edf8 	.word	0x2007edf8
 801bf9c:	2007edfe 	.word	0x2007edfe
 801bfa0:	2007edf4 	.word	0x2007edf4
 801bfa4:	2007ba98 	.word	0x2007ba98
 801bfa8:	2007ba9c 	.word	0x2007ba9c

0801bfac <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801bfac:	b580      	push	{r7, lr}
 801bfae:	b082      	sub	sp, #8
 801bfb0:	af00      	add	r7, sp, #0
 801bfb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801bfb4:	687b      	ldr	r3, [r7, #4]
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	d106      	bne.n	801bfc8 <tcp_input_delayed_close+0x1c>
 801bfba:	4b17      	ldr	r3, [pc, #92]	; (801c018 <tcp_input_delayed_close+0x6c>)
 801bfbc:	f240 225a 	movw	r2, #602	; 0x25a
 801bfc0:	4916      	ldr	r1, [pc, #88]	; (801c01c <tcp_input_delayed_close+0x70>)
 801bfc2:	4817      	ldr	r0, [pc, #92]	; (801c020 <tcp_input_delayed_close+0x74>)
 801bfc4:	f008 f800 	bl	8023fc8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801bfc8:	4b16      	ldr	r3, [pc, #88]	; (801c024 <tcp_input_delayed_close+0x78>)
 801bfca:	781b      	ldrb	r3, [r3, #0]
 801bfcc:	f003 0310 	and.w	r3, r3, #16
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	d01c      	beq.n	801c00e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	8b5b      	ldrh	r3, [r3, #26]
 801bfd8:	f003 0310 	and.w	r3, r3, #16
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d10d      	bne.n	801bffc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d008      	beq.n	801bffc <tcp_input_delayed_close+0x50>
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bff0:	687a      	ldr	r2, [r7, #4]
 801bff2:	6912      	ldr	r2, [r2, #16]
 801bff4:	f06f 010e 	mvn.w	r1, #14
 801bff8:	4610      	mov	r0, r2
 801bffa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801bffc:	6879      	ldr	r1, [r7, #4]
 801bffe:	480a      	ldr	r0, [pc, #40]	; (801c028 <tcp_input_delayed_close+0x7c>)
 801c000:	f7ff f9ee 	bl	801b3e0 <tcp_pcb_remove>
    tcp_free(pcb);
 801c004:	6878      	ldr	r0, [r7, #4]
 801c006:	f7fd fbc7 	bl	8019798 <tcp_free>
    return 1;
 801c00a:	2301      	movs	r3, #1
 801c00c:	e000      	b.n	801c010 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801c00e:	2300      	movs	r3, #0
}
 801c010:	4618      	mov	r0, r3
 801c012:	3708      	adds	r7, #8
 801c014:	46bd      	mov	sp, r7
 801c016:	bd80      	pop	{r7, pc}
 801c018:	080278dc 	.word	0x080278dc
 801c01c:	08027aac 	.word	0x08027aac
 801c020:	08027928 	.word	0x08027928
 801c024:	2007ee01 	.word	0x2007ee01
 801c028:	2007edc4 	.word	0x2007edc4

0801c02c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801c02c:	b590      	push	{r4, r7, lr}
 801c02e:	b08b      	sub	sp, #44	; 0x2c
 801c030:	af04      	add	r7, sp, #16
 801c032:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801c034:	4b73      	ldr	r3, [pc, #460]	; (801c204 <tcp_listen_input+0x1d8>)
 801c036:	781b      	ldrb	r3, [r3, #0]
 801c038:	f003 0304 	and.w	r3, r3, #4
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	f040 80da 	bne.w	801c1f6 <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	2b00      	cmp	r3, #0
 801c046:	d106      	bne.n	801c056 <tcp_listen_input+0x2a>
 801c048:	4b6f      	ldr	r3, [pc, #444]	; (801c208 <tcp_listen_input+0x1dc>)
 801c04a:	f240 2281 	movw	r2, #641	; 0x281
 801c04e:	496f      	ldr	r1, [pc, #444]	; (801c20c <tcp_listen_input+0x1e0>)
 801c050:	486f      	ldr	r0, [pc, #444]	; (801c210 <tcp_listen_input+0x1e4>)
 801c052:	f007 ffb9 	bl	8023fc8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801c056:	4b6b      	ldr	r3, [pc, #428]	; (801c204 <tcp_listen_input+0x1d8>)
 801c058:	781b      	ldrb	r3, [r3, #0]
 801c05a:	f003 0310 	and.w	r3, r3, #16
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d019      	beq.n	801c096 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c062:	4b6c      	ldr	r3, [pc, #432]	; (801c214 <tcp_listen_input+0x1e8>)
 801c064:	6819      	ldr	r1, [r3, #0]
 801c066:	4b6c      	ldr	r3, [pc, #432]	; (801c218 <tcp_listen_input+0x1ec>)
 801c068:	881b      	ldrh	r3, [r3, #0]
 801c06a:	461a      	mov	r2, r3
 801c06c:	4b6b      	ldr	r3, [pc, #428]	; (801c21c <tcp_listen_input+0x1f0>)
 801c06e:	681b      	ldr	r3, [r3, #0]
 801c070:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c072:	4b6b      	ldr	r3, [pc, #428]	; (801c220 <tcp_listen_input+0x1f4>)
 801c074:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c076:	885b      	ldrh	r3, [r3, #2]
 801c078:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c07a:	4a69      	ldr	r2, [pc, #420]	; (801c220 <tcp_listen_input+0x1f4>)
 801c07c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c07e:	8812      	ldrh	r2, [r2, #0]
 801c080:	b292      	uxth	r2, r2
 801c082:	9202      	str	r2, [sp, #8]
 801c084:	9301      	str	r3, [sp, #4]
 801c086:	4b67      	ldr	r3, [pc, #412]	; (801c224 <tcp_listen_input+0x1f8>)
 801c088:	9300      	str	r3, [sp, #0]
 801c08a:	4b67      	ldr	r3, [pc, #412]	; (801c228 <tcp_listen_input+0x1fc>)
 801c08c:	4602      	mov	r2, r0
 801c08e:	6878      	ldr	r0, [r7, #4]
 801c090:	f003 fc9c 	bl	801f9cc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801c094:	e0b1      	b.n	801c1fa <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 801c096:	4b5b      	ldr	r3, [pc, #364]	; (801c204 <tcp_listen_input+0x1d8>)
 801c098:	781b      	ldrb	r3, [r3, #0]
 801c09a:	f003 0302 	and.w	r3, r3, #2
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	f000 80ab 	beq.w	801c1fa <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	7d5b      	ldrb	r3, [r3, #21]
 801c0a8:	4618      	mov	r0, r3
 801c0aa:	f7fe ffcd 	bl	801b048 <tcp_alloc>
 801c0ae:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801c0b0:	697b      	ldr	r3, [r7, #20]
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d119      	bne.n	801c0ea <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 801c0b6:	4b5d      	ldr	r3, [pc, #372]	; (801c22c <tcp_listen_input+0x200>)
 801c0b8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801c0bc:	3301      	adds	r3, #1
 801c0be:	b29a      	uxth	r2, r3
 801c0c0:	4b5a      	ldr	r3, [pc, #360]	; (801c22c <tcp_listen_input+0x200>)
 801c0c2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	699b      	ldr	r3, [r3, #24]
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d00a      	beq.n	801c0e4 <tcp_listen_input+0xb8>
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	699b      	ldr	r3, [r3, #24]
 801c0d2:	687a      	ldr	r2, [r7, #4]
 801c0d4:	6910      	ldr	r0, [r2, #16]
 801c0d6:	f04f 32ff 	mov.w	r2, #4294967295
 801c0da:	2100      	movs	r1, #0
 801c0dc:	4798      	blx	r3
 801c0de:	4603      	mov	r3, r0
 801c0e0:	73bb      	strb	r3, [r7, #14]
      return;
 801c0e2:	e08b      	b.n	801c1fc <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801c0e4:	23f0      	movs	r3, #240	; 0xf0
 801c0e6:	73bb      	strb	r3, [r7, #14]
      return;
 801c0e8:	e088      	b.n	801c1fc <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801c0ea:	4b51      	ldr	r3, [pc, #324]	; (801c230 <tcp_listen_input+0x204>)
 801c0ec:	695a      	ldr	r2, [r3, #20]
 801c0ee:	697b      	ldr	r3, [r7, #20]
 801c0f0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801c0f2:	4b4f      	ldr	r3, [pc, #316]	; (801c230 <tcp_listen_input+0x204>)
 801c0f4:	691a      	ldr	r2, [r3, #16]
 801c0f6:	697b      	ldr	r3, [r7, #20]
 801c0f8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	8ada      	ldrh	r2, [r3, #22]
 801c0fe:	697b      	ldr	r3, [r7, #20]
 801c100:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801c102:	4b47      	ldr	r3, [pc, #284]	; (801c220 <tcp_listen_input+0x1f4>)
 801c104:	681b      	ldr	r3, [r3, #0]
 801c106:	881b      	ldrh	r3, [r3, #0]
 801c108:	b29a      	uxth	r2, r3
 801c10a:	697b      	ldr	r3, [r7, #20]
 801c10c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801c10e:	697b      	ldr	r3, [r7, #20]
 801c110:	2203      	movs	r2, #3
 801c112:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801c114:	4b41      	ldr	r3, [pc, #260]	; (801c21c <tcp_listen_input+0x1f0>)
 801c116:	681b      	ldr	r3, [r3, #0]
 801c118:	1c5a      	adds	r2, r3, #1
 801c11a:	697b      	ldr	r3, [r7, #20]
 801c11c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801c11e:	697b      	ldr	r3, [r7, #20]
 801c120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c122:	697b      	ldr	r3, [r7, #20]
 801c124:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801c126:	6978      	ldr	r0, [r7, #20]
 801c128:	f7ff f9ee 	bl	801b508 <tcp_next_iss>
 801c12c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801c12e:	697b      	ldr	r3, [r7, #20]
 801c130:	693a      	ldr	r2, [r7, #16]
 801c132:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801c134:	697b      	ldr	r3, [r7, #20]
 801c136:	693a      	ldr	r2, [r7, #16]
 801c138:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801c13a:	697b      	ldr	r3, [r7, #20]
 801c13c:	693a      	ldr	r2, [r7, #16]
 801c13e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801c140:	697b      	ldr	r3, [r7, #20]
 801c142:	693a      	ldr	r2, [r7, #16]
 801c144:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801c146:	4b35      	ldr	r3, [pc, #212]	; (801c21c <tcp_listen_input+0x1f0>)
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	1e5a      	subs	r2, r3, #1
 801c14c:	697b      	ldr	r3, [r7, #20]
 801c14e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	691a      	ldr	r2, [r3, #16]
 801c154:	697b      	ldr	r3, [r7, #20]
 801c156:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801c158:	697b      	ldr	r3, [r7, #20]
 801c15a:	687a      	ldr	r2, [r7, #4]
 801c15c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	7a5b      	ldrb	r3, [r3, #9]
 801c162:	f003 030c 	and.w	r3, r3, #12
 801c166:	b2da      	uxtb	r2, r3
 801c168:	697b      	ldr	r3, [r7, #20]
 801c16a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	7a1a      	ldrb	r2, [r3, #8]
 801c170:	697b      	ldr	r3, [r7, #20]
 801c172:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801c174:	4b2f      	ldr	r3, [pc, #188]	; (801c234 <tcp_listen_input+0x208>)
 801c176:	681a      	ldr	r2, [r3, #0]
 801c178:	697b      	ldr	r3, [r7, #20]
 801c17a:	60da      	str	r2, [r3, #12]
 801c17c:	4a2d      	ldr	r2, [pc, #180]	; (801c234 <tcp_listen_input+0x208>)
 801c17e:	697b      	ldr	r3, [r7, #20]
 801c180:	6013      	str	r3, [r2, #0]
 801c182:	f003 fde5 	bl	801fd50 <tcp_timer_needed>
 801c186:	4b2c      	ldr	r3, [pc, #176]	; (801c238 <tcp_listen_input+0x20c>)
 801c188:	2201      	movs	r2, #1
 801c18a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801c18c:	6978      	ldr	r0, [r7, #20]
 801c18e:	f001 fd91 	bl	801dcb4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801c192:	4b23      	ldr	r3, [pc, #140]	; (801c220 <tcp_listen_input+0x1f4>)
 801c194:	681b      	ldr	r3, [r3, #0]
 801c196:	89db      	ldrh	r3, [r3, #14]
 801c198:	b29a      	uxth	r2, r3
 801c19a:	697b      	ldr	r3, [r7, #20]
 801c19c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801c1a0:	697b      	ldr	r3, [r7, #20]
 801c1a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c1a6:	697b      	ldr	r3, [r7, #20]
 801c1a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801c1ac:	697b      	ldr	r3, [r7, #20]
 801c1ae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801c1b0:	697b      	ldr	r3, [r7, #20]
 801c1b2:	3304      	adds	r3, #4
 801c1b4:	4618      	mov	r0, r3
 801c1b6:	f005 febb 	bl	8021f30 <ip4_route>
 801c1ba:	4601      	mov	r1, r0
 801c1bc:	697b      	ldr	r3, [r7, #20]
 801c1be:	3304      	adds	r3, #4
 801c1c0:	461a      	mov	r2, r3
 801c1c2:	4620      	mov	r0, r4
 801c1c4:	f7ff f9c6 	bl	801b554 <tcp_eff_send_mss_netif>
 801c1c8:	4603      	mov	r3, r0
 801c1ca:	461a      	mov	r2, r3
 801c1cc:	697b      	ldr	r3, [r7, #20]
 801c1ce:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801c1d0:	2112      	movs	r1, #18
 801c1d2:	6978      	ldr	r0, [r7, #20]
 801c1d4:	f002 fd26 	bl	801ec24 <tcp_enqueue_flags>
 801c1d8:	4603      	mov	r3, r0
 801c1da:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801c1dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	d004      	beq.n	801c1ee <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 801c1e4:	2100      	movs	r1, #0
 801c1e6:	6978      	ldr	r0, [r7, #20]
 801c1e8:	f7fd fd5c 	bl	8019ca4 <tcp_abandon>
      return;
 801c1ec:	e006      	b.n	801c1fc <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 801c1ee:	6978      	ldr	r0, [r7, #20]
 801c1f0:	f002 fe18 	bl	801ee24 <tcp_output>
  return;
 801c1f4:	e001      	b.n	801c1fa <tcp_listen_input+0x1ce>
    return;
 801c1f6:	bf00      	nop
 801c1f8:	e000      	b.n	801c1fc <tcp_listen_input+0x1d0>
  return;
 801c1fa:	bf00      	nop
}
 801c1fc:	371c      	adds	r7, #28
 801c1fe:	46bd      	mov	sp, r7
 801c200:	bd90      	pop	{r4, r7, pc}
 801c202:	bf00      	nop
 801c204:	2007ee00 	.word	0x2007ee00
 801c208:	080278dc 	.word	0x080278dc
 801c20c:	08027ad4 	.word	0x08027ad4
 801c210:	08027928 	.word	0x08027928
 801c214:	2007edf8 	.word	0x2007edf8
 801c218:	2007edfe 	.word	0x2007edfe
 801c21c:	2007edf4 	.word	0x2007edf4
 801c220:	2007ede4 	.word	0x2007ede4
 801c224:	2007ba98 	.word	0x2007ba98
 801c228:	2007ba9c 	.word	0x2007ba9c
 801c22c:	2007ecb8 	.word	0x2007ecb8
 801c230:	2007ba88 	.word	0x2007ba88
 801c234:	2007edc4 	.word	0x2007edc4
 801c238:	2007edcc 	.word	0x2007edcc

0801c23c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801c23c:	b580      	push	{r7, lr}
 801c23e:	b086      	sub	sp, #24
 801c240:	af04      	add	r7, sp, #16
 801c242:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801c244:	4b2f      	ldr	r3, [pc, #188]	; (801c304 <tcp_timewait_input+0xc8>)
 801c246:	781b      	ldrb	r3, [r3, #0]
 801c248:	f003 0304 	and.w	r3, r3, #4
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d153      	bne.n	801c2f8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	2b00      	cmp	r3, #0
 801c254:	d106      	bne.n	801c264 <tcp_timewait_input+0x28>
 801c256:	4b2c      	ldr	r3, [pc, #176]	; (801c308 <tcp_timewait_input+0xcc>)
 801c258:	f240 22ee 	movw	r2, #750	; 0x2ee
 801c25c:	492b      	ldr	r1, [pc, #172]	; (801c30c <tcp_timewait_input+0xd0>)
 801c25e:	482c      	ldr	r0, [pc, #176]	; (801c310 <tcp_timewait_input+0xd4>)
 801c260:	f007 feb2 	bl	8023fc8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801c264:	4b27      	ldr	r3, [pc, #156]	; (801c304 <tcp_timewait_input+0xc8>)
 801c266:	781b      	ldrb	r3, [r3, #0]
 801c268:	f003 0302 	and.w	r3, r3, #2
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	d02a      	beq.n	801c2c6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801c270:	4b28      	ldr	r3, [pc, #160]	; (801c314 <tcp_timewait_input+0xd8>)
 801c272:	681a      	ldr	r2, [r3, #0]
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c278:	1ad3      	subs	r3, r2, r3
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	db2d      	blt.n	801c2da <tcp_timewait_input+0x9e>
 801c27e:	4b25      	ldr	r3, [pc, #148]	; (801c314 <tcp_timewait_input+0xd8>)
 801c280:	681a      	ldr	r2, [r3, #0]
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c286:	6879      	ldr	r1, [r7, #4]
 801c288:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c28a:	440b      	add	r3, r1
 801c28c:	1ad3      	subs	r3, r2, r3
 801c28e:	2b00      	cmp	r3, #0
 801c290:	dc23      	bgt.n	801c2da <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c292:	4b21      	ldr	r3, [pc, #132]	; (801c318 <tcp_timewait_input+0xdc>)
 801c294:	6819      	ldr	r1, [r3, #0]
 801c296:	4b21      	ldr	r3, [pc, #132]	; (801c31c <tcp_timewait_input+0xe0>)
 801c298:	881b      	ldrh	r3, [r3, #0]
 801c29a:	461a      	mov	r2, r3
 801c29c:	4b1d      	ldr	r3, [pc, #116]	; (801c314 <tcp_timewait_input+0xd8>)
 801c29e:	681b      	ldr	r3, [r3, #0]
 801c2a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c2a2:	4b1f      	ldr	r3, [pc, #124]	; (801c320 <tcp_timewait_input+0xe4>)
 801c2a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c2a6:	885b      	ldrh	r3, [r3, #2]
 801c2a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c2aa:	4a1d      	ldr	r2, [pc, #116]	; (801c320 <tcp_timewait_input+0xe4>)
 801c2ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c2ae:	8812      	ldrh	r2, [r2, #0]
 801c2b0:	b292      	uxth	r2, r2
 801c2b2:	9202      	str	r2, [sp, #8]
 801c2b4:	9301      	str	r3, [sp, #4]
 801c2b6:	4b1b      	ldr	r3, [pc, #108]	; (801c324 <tcp_timewait_input+0xe8>)
 801c2b8:	9300      	str	r3, [sp, #0]
 801c2ba:	4b1b      	ldr	r3, [pc, #108]	; (801c328 <tcp_timewait_input+0xec>)
 801c2bc:	4602      	mov	r2, r0
 801c2be:	6878      	ldr	r0, [r7, #4]
 801c2c0:	f003 fb84 	bl	801f9cc <tcp_rst>
      return;
 801c2c4:	e01b      	b.n	801c2fe <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801c2c6:	4b0f      	ldr	r3, [pc, #60]	; (801c304 <tcp_timewait_input+0xc8>)
 801c2c8:	781b      	ldrb	r3, [r3, #0]
 801c2ca:	f003 0301 	and.w	r3, r3, #1
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d003      	beq.n	801c2da <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801c2d2:	4b16      	ldr	r3, [pc, #88]	; (801c32c <tcp_timewait_input+0xf0>)
 801c2d4:	681a      	ldr	r2, [r3, #0]
 801c2d6:	687b      	ldr	r3, [r7, #4]
 801c2d8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801c2da:	4b10      	ldr	r3, [pc, #64]	; (801c31c <tcp_timewait_input+0xe0>)
 801c2dc:	881b      	ldrh	r3, [r3, #0]
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	d00c      	beq.n	801c2fc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	8b5b      	ldrh	r3, [r3, #26]
 801c2e6:	f043 0302 	orr.w	r3, r3, #2
 801c2ea:	b29a      	uxth	r2, r3
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801c2f0:	6878      	ldr	r0, [r7, #4]
 801c2f2:	f002 fd97 	bl	801ee24 <tcp_output>
  }
  return;
 801c2f6:	e001      	b.n	801c2fc <tcp_timewait_input+0xc0>
    return;
 801c2f8:	bf00      	nop
 801c2fa:	e000      	b.n	801c2fe <tcp_timewait_input+0xc2>
  return;
 801c2fc:	bf00      	nop
}
 801c2fe:	3708      	adds	r7, #8
 801c300:	46bd      	mov	sp, r7
 801c302:	bd80      	pop	{r7, pc}
 801c304:	2007ee00 	.word	0x2007ee00
 801c308:	080278dc 	.word	0x080278dc
 801c30c:	08027af4 	.word	0x08027af4
 801c310:	08027928 	.word	0x08027928
 801c314:	2007edf4 	.word	0x2007edf4
 801c318:	2007edf8 	.word	0x2007edf8
 801c31c:	2007edfe 	.word	0x2007edfe
 801c320:	2007ede4 	.word	0x2007ede4
 801c324:	2007ba98 	.word	0x2007ba98
 801c328:	2007ba9c 	.word	0x2007ba9c
 801c32c:	2007edb8 	.word	0x2007edb8

0801c330 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801c330:	b590      	push	{r4, r7, lr}
 801c332:	b08d      	sub	sp, #52	; 0x34
 801c334:	af04      	add	r7, sp, #16
 801c336:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801c338:	2300      	movs	r3, #0
 801c33a:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 801c33c:	2300      	movs	r3, #0
 801c33e:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	2b00      	cmp	r3, #0
 801c344:	d106      	bne.n	801c354 <tcp_process+0x24>
 801c346:	4b9d      	ldr	r3, [pc, #628]	; (801c5bc <tcp_process+0x28c>)
 801c348:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801c34c:	499c      	ldr	r1, [pc, #624]	; (801c5c0 <tcp_process+0x290>)
 801c34e:	489d      	ldr	r0, [pc, #628]	; (801c5c4 <tcp_process+0x294>)
 801c350:	f007 fe3a 	bl	8023fc8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801c354:	4b9c      	ldr	r3, [pc, #624]	; (801c5c8 <tcp_process+0x298>)
 801c356:	781b      	ldrb	r3, [r3, #0]
 801c358:	f003 0304 	and.w	r3, r3, #4
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	d04e      	beq.n	801c3fe <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	7d1b      	ldrb	r3, [r3, #20]
 801c364:	2b02      	cmp	r3, #2
 801c366:	d108      	bne.n	801c37a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c36c:	4b97      	ldr	r3, [pc, #604]	; (801c5cc <tcp_process+0x29c>)
 801c36e:	681b      	ldr	r3, [r3, #0]
 801c370:	429a      	cmp	r2, r3
 801c372:	d123      	bne.n	801c3bc <tcp_process+0x8c>
        acceptable = 1;
 801c374:	2301      	movs	r3, #1
 801c376:	77fb      	strb	r3, [r7, #31]
 801c378:	e020      	b.n	801c3bc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c37e:	4b94      	ldr	r3, [pc, #592]	; (801c5d0 <tcp_process+0x2a0>)
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	429a      	cmp	r2, r3
 801c384:	d102      	bne.n	801c38c <tcp_process+0x5c>
        acceptable = 1;
 801c386:	2301      	movs	r3, #1
 801c388:	77fb      	strb	r3, [r7, #31]
 801c38a:	e017      	b.n	801c3bc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c38c:	4b90      	ldr	r3, [pc, #576]	; (801c5d0 <tcp_process+0x2a0>)
 801c38e:	681a      	ldr	r2, [r3, #0]
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c394:	1ad3      	subs	r3, r2, r3
 801c396:	2b00      	cmp	r3, #0
 801c398:	db10      	blt.n	801c3bc <tcp_process+0x8c>
 801c39a:	4b8d      	ldr	r3, [pc, #564]	; (801c5d0 <tcp_process+0x2a0>)
 801c39c:	681a      	ldr	r2, [r3, #0]
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3a2:	6879      	ldr	r1, [r7, #4]
 801c3a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c3a6:	440b      	add	r3, r1
 801c3a8:	1ad3      	subs	r3, r2, r3
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	dc06      	bgt.n	801c3bc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	8b5b      	ldrh	r3, [r3, #26]
 801c3b2:	f043 0302 	orr.w	r3, r3, #2
 801c3b6:	b29a      	uxth	r2, r3
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801c3bc:	7ffb      	ldrb	r3, [r7, #31]
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d01b      	beq.n	801c3fa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	7d1b      	ldrb	r3, [r3, #20]
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d106      	bne.n	801c3d8 <tcp_process+0xa8>
 801c3ca:	4b7c      	ldr	r3, [pc, #496]	; (801c5bc <tcp_process+0x28c>)
 801c3cc:	f44f 724e 	mov.w	r2, #824	; 0x338
 801c3d0:	4980      	ldr	r1, [pc, #512]	; (801c5d4 <tcp_process+0x2a4>)
 801c3d2:	487c      	ldr	r0, [pc, #496]	; (801c5c4 <tcp_process+0x294>)
 801c3d4:	f007 fdf8 	bl	8023fc8 <iprintf>
      recv_flags |= TF_RESET;
 801c3d8:	4b7f      	ldr	r3, [pc, #508]	; (801c5d8 <tcp_process+0x2a8>)
 801c3da:	781b      	ldrb	r3, [r3, #0]
 801c3dc:	f043 0308 	orr.w	r3, r3, #8
 801c3e0:	b2da      	uxtb	r2, r3
 801c3e2:	4b7d      	ldr	r3, [pc, #500]	; (801c5d8 <tcp_process+0x2a8>)
 801c3e4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	8b5b      	ldrh	r3, [r3, #26]
 801c3ea:	f023 0301 	bic.w	r3, r3, #1
 801c3ee:	b29a      	uxth	r2, r3
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801c3f4:	f06f 030d 	mvn.w	r3, #13
 801c3f8:	e37a      	b.n	801caf0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801c3fa:	2300      	movs	r3, #0
 801c3fc:	e378      	b.n	801caf0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801c3fe:	4b72      	ldr	r3, [pc, #456]	; (801c5c8 <tcp_process+0x298>)
 801c400:	781b      	ldrb	r3, [r3, #0]
 801c402:	f003 0302 	and.w	r3, r3, #2
 801c406:	2b00      	cmp	r3, #0
 801c408:	d010      	beq.n	801c42c <tcp_process+0xfc>
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	7d1b      	ldrb	r3, [r3, #20]
 801c40e:	2b02      	cmp	r3, #2
 801c410:	d00c      	beq.n	801c42c <tcp_process+0xfc>
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	7d1b      	ldrb	r3, [r3, #20]
 801c416:	2b03      	cmp	r3, #3
 801c418:	d008      	beq.n	801c42c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	8b5b      	ldrh	r3, [r3, #26]
 801c41e:	f043 0302 	orr.w	r3, r3, #2
 801c422:	b29a      	uxth	r2, r3
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801c428:	2300      	movs	r3, #0
 801c42a:	e361      	b.n	801caf0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	8b5b      	ldrh	r3, [r3, #26]
 801c430:	f003 0310 	and.w	r3, r3, #16
 801c434:	2b00      	cmp	r3, #0
 801c436:	d103      	bne.n	801c440 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801c438:	4b68      	ldr	r3, [pc, #416]	; (801c5dc <tcp_process+0x2ac>)
 801c43a:	681a      	ldr	r2, [r3, #0]
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	2200      	movs	r2, #0
 801c444:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	2200      	movs	r2, #0
 801c44c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801c450:	6878      	ldr	r0, [r7, #4]
 801c452:	f001 fc2f 	bl	801dcb4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	7d1b      	ldrb	r3, [r3, #20]
 801c45a:	3b02      	subs	r3, #2
 801c45c:	2b07      	cmp	r3, #7
 801c45e:	f200 8337 	bhi.w	801cad0 <tcp_process+0x7a0>
 801c462:	a201      	add	r2, pc, #4	; (adr r2, 801c468 <tcp_process+0x138>)
 801c464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c468:	0801c489 	.word	0x0801c489
 801c46c:	0801c6b9 	.word	0x0801c6b9
 801c470:	0801c831 	.word	0x0801c831
 801c474:	0801c85b 	.word	0x0801c85b
 801c478:	0801c97f 	.word	0x0801c97f
 801c47c:	0801c831 	.word	0x0801c831
 801c480:	0801ca0b 	.word	0x0801ca0b
 801c484:	0801ca9b 	.word	0x0801ca9b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801c488:	4b4f      	ldr	r3, [pc, #316]	; (801c5c8 <tcp_process+0x298>)
 801c48a:	781b      	ldrb	r3, [r3, #0]
 801c48c:	f003 0310 	and.w	r3, r3, #16
 801c490:	2b00      	cmp	r3, #0
 801c492:	f000 80e4 	beq.w	801c65e <tcp_process+0x32e>
 801c496:	4b4c      	ldr	r3, [pc, #304]	; (801c5c8 <tcp_process+0x298>)
 801c498:	781b      	ldrb	r3, [r3, #0]
 801c49a:	f003 0302 	and.w	r3, r3, #2
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	f000 80dd 	beq.w	801c65e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c4a8:	1c5a      	adds	r2, r3, #1
 801c4aa:	4b48      	ldr	r3, [pc, #288]	; (801c5cc <tcp_process+0x29c>)
 801c4ac:	681b      	ldr	r3, [r3, #0]
 801c4ae:	429a      	cmp	r2, r3
 801c4b0:	f040 80d5 	bne.w	801c65e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801c4b4:	4b46      	ldr	r3, [pc, #280]	; (801c5d0 <tcp_process+0x2a0>)
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	1c5a      	adds	r2, r3, #1
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801c4c6:	4b41      	ldr	r3, [pc, #260]	; (801c5cc <tcp_process+0x29c>)
 801c4c8:	681a      	ldr	r2, [r3, #0]
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801c4ce:	4b44      	ldr	r3, [pc, #272]	; (801c5e0 <tcp_process+0x2b0>)
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	89db      	ldrh	r3, [r3, #14]
 801c4d4:	b29a      	uxth	r2, r3
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801c4e8:	4b39      	ldr	r3, [pc, #228]	; (801c5d0 <tcp_process+0x2a0>)
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	1e5a      	subs	r2, r3, #1
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	2204      	movs	r2, #4
 801c4f6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	3304      	adds	r3, #4
 801c500:	4618      	mov	r0, r3
 801c502:	f005 fd15 	bl	8021f30 <ip4_route>
 801c506:	4601      	mov	r1, r0
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	3304      	adds	r3, #4
 801c50c:	461a      	mov	r2, r3
 801c50e:	4620      	mov	r0, r4
 801c510:	f7ff f820 	bl	801b554 <tcp_eff_send_mss_netif>
 801c514:	4603      	mov	r3, r0
 801c516:	461a      	mov	r2, r3
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c520:	009a      	lsls	r2, r3, #2
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c526:	005b      	lsls	r3, r3, #1
 801c528:	f241 111c 	movw	r1, #4380	; 0x111c
 801c52c:	428b      	cmp	r3, r1
 801c52e:	bf38      	it	cc
 801c530:	460b      	movcc	r3, r1
 801c532:	429a      	cmp	r2, r3
 801c534:	d204      	bcs.n	801c540 <tcp_process+0x210>
 801c536:	687b      	ldr	r3, [r7, #4]
 801c538:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c53a:	009b      	lsls	r3, r3, #2
 801c53c:	b29b      	uxth	r3, r3
 801c53e:	e00d      	b.n	801c55c <tcp_process+0x22c>
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c544:	005b      	lsls	r3, r3, #1
 801c546:	f241 121c 	movw	r2, #4380	; 0x111c
 801c54a:	4293      	cmp	r3, r2
 801c54c:	d904      	bls.n	801c558 <tcp_process+0x228>
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c552:	005b      	lsls	r3, r3, #1
 801c554:	b29b      	uxth	r3, r3
 801c556:	e001      	b.n	801c55c <tcp_process+0x22c>
 801c558:	f241 131c 	movw	r3, #4380	; 0x111c
 801c55c:	687a      	ldr	r2, [r7, #4]
 801c55e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c568:	2b00      	cmp	r3, #0
 801c56a:	d106      	bne.n	801c57a <tcp_process+0x24a>
 801c56c:	4b13      	ldr	r3, [pc, #76]	; (801c5bc <tcp_process+0x28c>)
 801c56e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801c572:	491c      	ldr	r1, [pc, #112]	; (801c5e4 <tcp_process+0x2b4>)
 801c574:	4813      	ldr	r0, [pc, #76]	; (801c5c4 <tcp_process+0x294>)
 801c576:	f007 fd27 	bl	8023fc8 <iprintf>
        --pcb->snd_queuelen;
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c580:	3b01      	subs	r3, #1
 801c582:	b29a      	uxth	r2, r3
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c58e:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 801c590:	697b      	ldr	r3, [r7, #20]
 801c592:	2b00      	cmp	r3, #0
 801c594:	d12a      	bne.n	801c5ec <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c59a:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801c59c:	697b      	ldr	r3, [r7, #20]
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	d106      	bne.n	801c5b0 <tcp_process+0x280>
 801c5a2:	4b06      	ldr	r3, [pc, #24]	; (801c5bc <tcp_process+0x28c>)
 801c5a4:	f44f 725d 	mov.w	r2, #884	; 0x374
 801c5a8:	490f      	ldr	r1, [pc, #60]	; (801c5e8 <tcp_process+0x2b8>)
 801c5aa:	4806      	ldr	r0, [pc, #24]	; (801c5c4 <tcp_process+0x294>)
 801c5ac:	f007 fd0c 	bl	8023fc8 <iprintf>
          pcb->unsent = rseg->next;
 801c5b0:	697b      	ldr	r3, [r7, #20]
 801c5b2:	681a      	ldr	r2, [r3, #0]
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	66da      	str	r2, [r3, #108]	; 0x6c
 801c5b8:	e01c      	b.n	801c5f4 <tcp_process+0x2c4>
 801c5ba:	bf00      	nop
 801c5bc:	080278dc 	.word	0x080278dc
 801c5c0:	08027b14 	.word	0x08027b14
 801c5c4:	08027928 	.word	0x08027928
 801c5c8:	2007ee00 	.word	0x2007ee00
 801c5cc:	2007edf8 	.word	0x2007edf8
 801c5d0:	2007edf4 	.word	0x2007edf4
 801c5d4:	08027b30 	.word	0x08027b30
 801c5d8:	2007ee01 	.word	0x2007ee01
 801c5dc:	2007edb8 	.word	0x2007edb8
 801c5e0:	2007ede4 	.word	0x2007ede4
 801c5e4:	08027b50 	.word	0x08027b50
 801c5e8:	08027b68 	.word	0x08027b68
        } else {
          pcb->unacked = rseg->next;
 801c5ec:	697b      	ldr	r3, [r7, #20]
 801c5ee:	681a      	ldr	r2, [r3, #0]
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801c5f4:	6978      	ldr	r0, [r7, #20]
 801c5f6:	f7fe fbbe 	bl	801ad76 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d104      	bne.n	801c60c <tcp_process+0x2dc>
          pcb->rtime = -1;
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c608:	861a      	strh	r2, [r3, #48]	; 0x30
 801c60a:	e006      	b.n	801c61a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	2200      	movs	r2, #0
 801c610:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	2200      	movs	r2, #0
 801c616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c620:	2b00      	cmp	r3, #0
 801c622:	d00a      	beq.n	801c63a <tcp_process+0x30a>
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c62a:	687a      	ldr	r2, [r7, #4]
 801c62c:	6910      	ldr	r0, [r2, #16]
 801c62e:	2200      	movs	r2, #0
 801c630:	6879      	ldr	r1, [r7, #4]
 801c632:	4798      	blx	r3
 801c634:	4603      	mov	r3, r0
 801c636:	77bb      	strb	r3, [r7, #30]
 801c638:	e001      	b.n	801c63e <tcp_process+0x30e>
 801c63a:	2300      	movs	r3, #0
 801c63c:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 801c63e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801c642:	f113 0f0d 	cmn.w	r3, #13
 801c646:	d102      	bne.n	801c64e <tcp_process+0x31e>
          return ERR_ABRT;
 801c648:	f06f 030c 	mvn.w	r3, #12
 801c64c:	e250      	b.n	801caf0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	8b5b      	ldrh	r3, [r3, #26]
 801c652:	f043 0302 	orr.w	r3, r3, #2
 801c656:	b29a      	uxth	r2, r3
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801c65c:	e23a      	b.n	801cad4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801c65e:	4b98      	ldr	r3, [pc, #608]	; (801c8c0 <tcp_process+0x590>)
 801c660:	781b      	ldrb	r3, [r3, #0]
 801c662:	f003 0310 	and.w	r3, r3, #16
 801c666:	2b00      	cmp	r3, #0
 801c668:	f000 8234 	beq.w	801cad4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c66c:	4b95      	ldr	r3, [pc, #596]	; (801c8c4 <tcp_process+0x594>)
 801c66e:	6819      	ldr	r1, [r3, #0]
 801c670:	4b95      	ldr	r3, [pc, #596]	; (801c8c8 <tcp_process+0x598>)
 801c672:	881b      	ldrh	r3, [r3, #0]
 801c674:	461a      	mov	r2, r3
 801c676:	4b95      	ldr	r3, [pc, #596]	; (801c8cc <tcp_process+0x59c>)
 801c678:	681b      	ldr	r3, [r3, #0]
 801c67a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c67c:	4b94      	ldr	r3, [pc, #592]	; (801c8d0 <tcp_process+0x5a0>)
 801c67e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c680:	885b      	ldrh	r3, [r3, #2]
 801c682:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c684:	4a92      	ldr	r2, [pc, #584]	; (801c8d0 <tcp_process+0x5a0>)
 801c686:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c688:	8812      	ldrh	r2, [r2, #0]
 801c68a:	b292      	uxth	r2, r2
 801c68c:	9202      	str	r2, [sp, #8]
 801c68e:	9301      	str	r3, [sp, #4]
 801c690:	4b90      	ldr	r3, [pc, #576]	; (801c8d4 <tcp_process+0x5a4>)
 801c692:	9300      	str	r3, [sp, #0]
 801c694:	4b90      	ldr	r3, [pc, #576]	; (801c8d8 <tcp_process+0x5a8>)
 801c696:	4602      	mov	r2, r0
 801c698:	6878      	ldr	r0, [r7, #4]
 801c69a:	f003 f997 	bl	801f9cc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c6a4:	2b05      	cmp	r3, #5
 801c6a6:	f200 8215 	bhi.w	801cad4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	2200      	movs	r2, #0
 801c6ae:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801c6b0:	6878      	ldr	r0, [r7, #4]
 801c6b2:	f002 ff59 	bl	801f568 <tcp_rexmit_rto>
      break;
 801c6b6:	e20d      	b.n	801cad4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801c6b8:	4b81      	ldr	r3, [pc, #516]	; (801c8c0 <tcp_process+0x590>)
 801c6ba:	781b      	ldrb	r3, [r3, #0]
 801c6bc:	f003 0310 	and.w	r3, r3, #16
 801c6c0:	2b00      	cmp	r3, #0
 801c6c2:	f000 80a1 	beq.w	801c808 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c6c6:	4b7f      	ldr	r3, [pc, #508]	; (801c8c4 <tcp_process+0x594>)
 801c6c8:	681a      	ldr	r2, [r3, #0]
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c6ce:	1ad3      	subs	r3, r2, r3
 801c6d0:	3b01      	subs	r3, #1
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	db7e      	blt.n	801c7d4 <tcp_process+0x4a4>
 801c6d6:	4b7b      	ldr	r3, [pc, #492]	; (801c8c4 <tcp_process+0x594>)
 801c6d8:	681a      	ldr	r2, [r3, #0]
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c6de:	1ad3      	subs	r3, r2, r3
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	dc77      	bgt.n	801c7d4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	2204      	movs	r2, #4
 801c6e8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d102      	bne.n	801c6f8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801c6f2:	23fa      	movs	r3, #250	; 0xfa
 801c6f4:	77bb      	strb	r3, [r7, #30]
 801c6f6:	e01d      	b.n	801c734 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c6fc:	699b      	ldr	r3, [r3, #24]
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	d106      	bne.n	801c710 <tcp_process+0x3e0>
 801c702:	4b76      	ldr	r3, [pc, #472]	; (801c8dc <tcp_process+0x5ac>)
 801c704:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801c708:	4975      	ldr	r1, [pc, #468]	; (801c8e0 <tcp_process+0x5b0>)
 801c70a:	4876      	ldr	r0, [pc, #472]	; (801c8e4 <tcp_process+0x5b4>)
 801c70c:	f007 fc5c 	bl	8023fc8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c714:	699b      	ldr	r3, [r3, #24]
 801c716:	2b00      	cmp	r3, #0
 801c718:	d00a      	beq.n	801c730 <tcp_process+0x400>
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c71e:	699b      	ldr	r3, [r3, #24]
 801c720:	687a      	ldr	r2, [r7, #4]
 801c722:	6910      	ldr	r0, [r2, #16]
 801c724:	2200      	movs	r2, #0
 801c726:	6879      	ldr	r1, [r7, #4]
 801c728:	4798      	blx	r3
 801c72a:	4603      	mov	r3, r0
 801c72c:	77bb      	strb	r3, [r7, #30]
 801c72e:	e001      	b.n	801c734 <tcp_process+0x404>
 801c730:	23f0      	movs	r3, #240	; 0xf0
 801c732:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 801c734:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801c738:	2b00      	cmp	r3, #0
 801c73a:	d00a      	beq.n	801c752 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801c73c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801c740:	f113 0f0d 	cmn.w	r3, #13
 801c744:	d002      	beq.n	801c74c <tcp_process+0x41c>
              tcp_abort(pcb);
 801c746:	6878      	ldr	r0, [r7, #4]
 801c748:	f7fd fb6a 	bl	8019e20 <tcp_abort>
            }
            return ERR_ABRT;
 801c74c:	f06f 030c 	mvn.w	r3, #12
 801c750:	e1ce      	b.n	801caf0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801c752:	6878      	ldr	r0, [r7, #4]
 801c754:	f000 fae0 	bl	801cd18 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801c758:	4b63      	ldr	r3, [pc, #396]	; (801c8e8 <tcp_process+0x5b8>)
 801c75a:	881b      	ldrh	r3, [r3, #0]
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	d005      	beq.n	801c76c <tcp_process+0x43c>
            recv_acked--;
 801c760:	4b61      	ldr	r3, [pc, #388]	; (801c8e8 <tcp_process+0x5b8>)
 801c762:	881b      	ldrh	r3, [r3, #0]
 801c764:	3b01      	subs	r3, #1
 801c766:	b29a      	uxth	r2, r3
 801c768:	4b5f      	ldr	r3, [pc, #380]	; (801c8e8 <tcp_process+0x5b8>)
 801c76a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c770:	009a      	lsls	r2, r3, #2
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c776:	005b      	lsls	r3, r3, #1
 801c778:	f241 111c 	movw	r1, #4380	; 0x111c
 801c77c:	428b      	cmp	r3, r1
 801c77e:	bf38      	it	cc
 801c780:	460b      	movcc	r3, r1
 801c782:	429a      	cmp	r2, r3
 801c784:	d204      	bcs.n	801c790 <tcp_process+0x460>
 801c786:	687b      	ldr	r3, [r7, #4]
 801c788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c78a:	009b      	lsls	r3, r3, #2
 801c78c:	b29b      	uxth	r3, r3
 801c78e:	e00d      	b.n	801c7ac <tcp_process+0x47c>
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c794:	005b      	lsls	r3, r3, #1
 801c796:	f241 121c 	movw	r2, #4380	; 0x111c
 801c79a:	4293      	cmp	r3, r2
 801c79c:	d904      	bls.n	801c7a8 <tcp_process+0x478>
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c7a2:	005b      	lsls	r3, r3, #1
 801c7a4:	b29b      	uxth	r3, r3
 801c7a6:	e001      	b.n	801c7ac <tcp_process+0x47c>
 801c7a8:	f241 131c 	movw	r3, #4380	; 0x111c
 801c7ac:	687a      	ldr	r2, [r7, #4]
 801c7ae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801c7b2:	4b4e      	ldr	r3, [pc, #312]	; (801c8ec <tcp_process+0x5bc>)
 801c7b4:	781b      	ldrb	r3, [r3, #0]
 801c7b6:	f003 0320 	and.w	r3, r3, #32
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d037      	beq.n	801c82e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	8b5b      	ldrh	r3, [r3, #26]
 801c7c2:	f043 0302 	orr.w	r3, r3, #2
 801c7c6:	b29a      	uxth	r2, r3
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	2207      	movs	r2, #7
 801c7d0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801c7d2:	e02c      	b.n	801c82e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c7d4:	4b3b      	ldr	r3, [pc, #236]	; (801c8c4 <tcp_process+0x594>)
 801c7d6:	6819      	ldr	r1, [r3, #0]
 801c7d8:	4b3b      	ldr	r3, [pc, #236]	; (801c8c8 <tcp_process+0x598>)
 801c7da:	881b      	ldrh	r3, [r3, #0]
 801c7dc:	461a      	mov	r2, r3
 801c7de:	4b3b      	ldr	r3, [pc, #236]	; (801c8cc <tcp_process+0x59c>)
 801c7e0:	681b      	ldr	r3, [r3, #0]
 801c7e2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c7e4:	4b3a      	ldr	r3, [pc, #232]	; (801c8d0 <tcp_process+0x5a0>)
 801c7e6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c7e8:	885b      	ldrh	r3, [r3, #2]
 801c7ea:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c7ec:	4a38      	ldr	r2, [pc, #224]	; (801c8d0 <tcp_process+0x5a0>)
 801c7ee:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c7f0:	8812      	ldrh	r2, [r2, #0]
 801c7f2:	b292      	uxth	r2, r2
 801c7f4:	9202      	str	r2, [sp, #8]
 801c7f6:	9301      	str	r3, [sp, #4]
 801c7f8:	4b36      	ldr	r3, [pc, #216]	; (801c8d4 <tcp_process+0x5a4>)
 801c7fa:	9300      	str	r3, [sp, #0]
 801c7fc:	4b36      	ldr	r3, [pc, #216]	; (801c8d8 <tcp_process+0x5a8>)
 801c7fe:	4602      	mov	r2, r0
 801c800:	6878      	ldr	r0, [r7, #4]
 801c802:	f003 f8e3 	bl	801f9cc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801c806:	e167      	b.n	801cad8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801c808:	4b2d      	ldr	r3, [pc, #180]	; (801c8c0 <tcp_process+0x590>)
 801c80a:	781b      	ldrb	r3, [r3, #0]
 801c80c:	f003 0302 	and.w	r3, r3, #2
 801c810:	2b00      	cmp	r3, #0
 801c812:	f000 8161 	beq.w	801cad8 <tcp_process+0x7a8>
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c81a:	1e5a      	subs	r2, r3, #1
 801c81c:	4b2b      	ldr	r3, [pc, #172]	; (801c8cc <tcp_process+0x59c>)
 801c81e:	681b      	ldr	r3, [r3, #0]
 801c820:	429a      	cmp	r2, r3
 801c822:	f040 8159 	bne.w	801cad8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801c826:	6878      	ldr	r0, [r7, #4]
 801c828:	f002 fec0 	bl	801f5ac <tcp_rexmit>
      break;
 801c82c:	e154      	b.n	801cad8 <tcp_process+0x7a8>
 801c82e:	e153      	b.n	801cad8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801c830:	6878      	ldr	r0, [r7, #4]
 801c832:	f000 fa71 	bl	801cd18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801c836:	4b2d      	ldr	r3, [pc, #180]	; (801c8ec <tcp_process+0x5bc>)
 801c838:	781b      	ldrb	r3, [r3, #0]
 801c83a:	f003 0320 	and.w	r3, r3, #32
 801c83e:	2b00      	cmp	r3, #0
 801c840:	f000 814c 	beq.w	801cadc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	8b5b      	ldrh	r3, [r3, #26]
 801c848:	f043 0302 	orr.w	r3, r3, #2
 801c84c:	b29a      	uxth	r2, r3
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	2207      	movs	r2, #7
 801c856:	751a      	strb	r2, [r3, #20]
      }
      break;
 801c858:	e140      	b.n	801cadc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801c85a:	6878      	ldr	r0, [r7, #4]
 801c85c:	f000 fa5c 	bl	801cd18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801c860:	4b22      	ldr	r3, [pc, #136]	; (801c8ec <tcp_process+0x5bc>)
 801c862:	781b      	ldrb	r3, [r3, #0]
 801c864:	f003 0320 	and.w	r3, r3, #32
 801c868:	2b00      	cmp	r3, #0
 801c86a:	d071      	beq.n	801c950 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c86c:	4b14      	ldr	r3, [pc, #80]	; (801c8c0 <tcp_process+0x590>)
 801c86e:	781b      	ldrb	r3, [r3, #0]
 801c870:	f003 0310 	and.w	r3, r3, #16
 801c874:	2b00      	cmp	r3, #0
 801c876:	d060      	beq.n	801c93a <tcp_process+0x60a>
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c87c:	4b11      	ldr	r3, [pc, #68]	; (801c8c4 <tcp_process+0x594>)
 801c87e:	681b      	ldr	r3, [r3, #0]
 801c880:	429a      	cmp	r2, r3
 801c882:	d15a      	bne.n	801c93a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c888:	2b00      	cmp	r3, #0
 801c88a:	d156      	bne.n	801c93a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	8b5b      	ldrh	r3, [r3, #26]
 801c890:	f043 0302 	orr.w	r3, r3, #2
 801c894:	b29a      	uxth	r2, r3
 801c896:	687b      	ldr	r3, [r7, #4]
 801c898:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801c89a:	6878      	ldr	r0, [r7, #4]
 801c89c:	f7fe fd50 	bl	801b340 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801c8a0:	4b13      	ldr	r3, [pc, #76]	; (801c8f0 <tcp_process+0x5c0>)
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	687a      	ldr	r2, [r7, #4]
 801c8a6:	429a      	cmp	r2, r3
 801c8a8:	d105      	bne.n	801c8b6 <tcp_process+0x586>
 801c8aa:	4b11      	ldr	r3, [pc, #68]	; (801c8f0 <tcp_process+0x5c0>)
 801c8ac:	681b      	ldr	r3, [r3, #0]
 801c8ae:	68db      	ldr	r3, [r3, #12]
 801c8b0:	4a0f      	ldr	r2, [pc, #60]	; (801c8f0 <tcp_process+0x5c0>)
 801c8b2:	6013      	str	r3, [r2, #0]
 801c8b4:	e02e      	b.n	801c914 <tcp_process+0x5e4>
 801c8b6:	4b0e      	ldr	r3, [pc, #56]	; (801c8f0 <tcp_process+0x5c0>)
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	613b      	str	r3, [r7, #16]
 801c8bc:	e027      	b.n	801c90e <tcp_process+0x5de>
 801c8be:	bf00      	nop
 801c8c0:	2007ee00 	.word	0x2007ee00
 801c8c4:	2007edf8 	.word	0x2007edf8
 801c8c8:	2007edfe 	.word	0x2007edfe
 801c8cc:	2007edf4 	.word	0x2007edf4
 801c8d0:	2007ede4 	.word	0x2007ede4
 801c8d4:	2007ba98 	.word	0x2007ba98
 801c8d8:	2007ba9c 	.word	0x2007ba9c
 801c8dc:	080278dc 	.word	0x080278dc
 801c8e0:	08027b7c 	.word	0x08027b7c
 801c8e4:	08027928 	.word	0x08027928
 801c8e8:	2007edfc 	.word	0x2007edfc
 801c8ec:	2007ee01 	.word	0x2007ee01
 801c8f0:	2007edc4 	.word	0x2007edc4
 801c8f4:	693b      	ldr	r3, [r7, #16]
 801c8f6:	68db      	ldr	r3, [r3, #12]
 801c8f8:	687a      	ldr	r2, [r7, #4]
 801c8fa:	429a      	cmp	r2, r3
 801c8fc:	d104      	bne.n	801c908 <tcp_process+0x5d8>
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	68da      	ldr	r2, [r3, #12]
 801c902:	693b      	ldr	r3, [r7, #16]
 801c904:	60da      	str	r2, [r3, #12]
 801c906:	e005      	b.n	801c914 <tcp_process+0x5e4>
 801c908:	693b      	ldr	r3, [r7, #16]
 801c90a:	68db      	ldr	r3, [r3, #12]
 801c90c:	613b      	str	r3, [r7, #16]
 801c90e:	693b      	ldr	r3, [r7, #16]
 801c910:	2b00      	cmp	r3, #0
 801c912:	d1ef      	bne.n	801c8f4 <tcp_process+0x5c4>
 801c914:	687b      	ldr	r3, [r7, #4]
 801c916:	2200      	movs	r2, #0
 801c918:	60da      	str	r2, [r3, #12]
 801c91a:	4b77      	ldr	r3, [pc, #476]	; (801caf8 <tcp_process+0x7c8>)
 801c91c:	2201      	movs	r2, #1
 801c91e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	220a      	movs	r2, #10
 801c924:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801c926:	4b75      	ldr	r3, [pc, #468]	; (801cafc <tcp_process+0x7cc>)
 801c928:	681a      	ldr	r2, [r3, #0]
 801c92a:	687b      	ldr	r3, [r7, #4]
 801c92c:	60da      	str	r2, [r3, #12]
 801c92e:	4a73      	ldr	r2, [pc, #460]	; (801cafc <tcp_process+0x7cc>)
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	6013      	str	r3, [r2, #0]
 801c934:	f003 fa0c 	bl	801fd50 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801c938:	e0d2      	b.n	801cae0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	8b5b      	ldrh	r3, [r3, #26]
 801c93e:	f043 0302 	orr.w	r3, r3, #2
 801c942:	b29a      	uxth	r2, r3
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801c948:	687b      	ldr	r3, [r7, #4]
 801c94a:	2208      	movs	r2, #8
 801c94c:	751a      	strb	r2, [r3, #20]
      break;
 801c94e:	e0c7      	b.n	801cae0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c950:	4b6b      	ldr	r3, [pc, #428]	; (801cb00 <tcp_process+0x7d0>)
 801c952:	781b      	ldrb	r3, [r3, #0]
 801c954:	f003 0310 	and.w	r3, r3, #16
 801c958:	2b00      	cmp	r3, #0
 801c95a:	f000 80c1 	beq.w	801cae0 <tcp_process+0x7b0>
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c962:	4b68      	ldr	r3, [pc, #416]	; (801cb04 <tcp_process+0x7d4>)
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	429a      	cmp	r2, r3
 801c968:	f040 80ba 	bne.w	801cae0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c970:	2b00      	cmp	r3, #0
 801c972:	f040 80b5 	bne.w	801cae0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	2206      	movs	r2, #6
 801c97a:	751a      	strb	r2, [r3, #20]
      break;
 801c97c:	e0b0      	b.n	801cae0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801c97e:	6878      	ldr	r0, [r7, #4]
 801c980:	f000 f9ca 	bl	801cd18 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801c984:	4b60      	ldr	r3, [pc, #384]	; (801cb08 <tcp_process+0x7d8>)
 801c986:	781b      	ldrb	r3, [r3, #0]
 801c988:	f003 0320 	and.w	r3, r3, #32
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	f000 80a9 	beq.w	801cae4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	8b5b      	ldrh	r3, [r3, #26]
 801c996:	f043 0302 	orr.w	r3, r3, #2
 801c99a:	b29a      	uxth	r2, r3
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801c9a0:	6878      	ldr	r0, [r7, #4]
 801c9a2:	f7fe fccd 	bl	801b340 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801c9a6:	4b59      	ldr	r3, [pc, #356]	; (801cb0c <tcp_process+0x7dc>)
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	687a      	ldr	r2, [r7, #4]
 801c9ac:	429a      	cmp	r2, r3
 801c9ae:	d105      	bne.n	801c9bc <tcp_process+0x68c>
 801c9b0:	4b56      	ldr	r3, [pc, #344]	; (801cb0c <tcp_process+0x7dc>)
 801c9b2:	681b      	ldr	r3, [r3, #0]
 801c9b4:	68db      	ldr	r3, [r3, #12]
 801c9b6:	4a55      	ldr	r2, [pc, #340]	; (801cb0c <tcp_process+0x7dc>)
 801c9b8:	6013      	str	r3, [r2, #0]
 801c9ba:	e013      	b.n	801c9e4 <tcp_process+0x6b4>
 801c9bc:	4b53      	ldr	r3, [pc, #332]	; (801cb0c <tcp_process+0x7dc>)
 801c9be:	681b      	ldr	r3, [r3, #0]
 801c9c0:	60fb      	str	r3, [r7, #12]
 801c9c2:	e00c      	b.n	801c9de <tcp_process+0x6ae>
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	68db      	ldr	r3, [r3, #12]
 801c9c8:	687a      	ldr	r2, [r7, #4]
 801c9ca:	429a      	cmp	r2, r3
 801c9cc:	d104      	bne.n	801c9d8 <tcp_process+0x6a8>
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	68da      	ldr	r2, [r3, #12]
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	60da      	str	r2, [r3, #12]
 801c9d6:	e005      	b.n	801c9e4 <tcp_process+0x6b4>
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	68db      	ldr	r3, [r3, #12]
 801c9dc:	60fb      	str	r3, [r7, #12]
 801c9de:	68fb      	ldr	r3, [r7, #12]
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d1ef      	bne.n	801c9c4 <tcp_process+0x694>
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	2200      	movs	r2, #0
 801c9e8:	60da      	str	r2, [r3, #12]
 801c9ea:	4b43      	ldr	r3, [pc, #268]	; (801caf8 <tcp_process+0x7c8>)
 801c9ec:	2201      	movs	r2, #1
 801c9ee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	220a      	movs	r2, #10
 801c9f4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c9f6:	4b41      	ldr	r3, [pc, #260]	; (801cafc <tcp_process+0x7cc>)
 801c9f8:	681a      	ldr	r2, [r3, #0]
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	60da      	str	r2, [r3, #12]
 801c9fe:	4a3f      	ldr	r2, [pc, #252]	; (801cafc <tcp_process+0x7cc>)
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	6013      	str	r3, [r2, #0]
 801ca04:	f003 f9a4 	bl	801fd50 <tcp_timer_needed>
      }
      break;
 801ca08:	e06c      	b.n	801cae4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801ca0a:	6878      	ldr	r0, [r7, #4]
 801ca0c:	f000 f984 	bl	801cd18 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801ca10:	4b3b      	ldr	r3, [pc, #236]	; (801cb00 <tcp_process+0x7d0>)
 801ca12:	781b      	ldrb	r3, [r3, #0]
 801ca14:	f003 0310 	and.w	r3, r3, #16
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d065      	beq.n	801cae8 <tcp_process+0x7b8>
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ca20:	4b38      	ldr	r3, [pc, #224]	; (801cb04 <tcp_process+0x7d4>)
 801ca22:	681b      	ldr	r3, [r3, #0]
 801ca24:	429a      	cmp	r2, r3
 801ca26:	d15f      	bne.n	801cae8 <tcp_process+0x7b8>
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d15b      	bne.n	801cae8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801ca30:	6878      	ldr	r0, [r7, #4]
 801ca32:	f7fe fc85 	bl	801b340 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801ca36:	4b35      	ldr	r3, [pc, #212]	; (801cb0c <tcp_process+0x7dc>)
 801ca38:	681b      	ldr	r3, [r3, #0]
 801ca3a:	687a      	ldr	r2, [r7, #4]
 801ca3c:	429a      	cmp	r2, r3
 801ca3e:	d105      	bne.n	801ca4c <tcp_process+0x71c>
 801ca40:	4b32      	ldr	r3, [pc, #200]	; (801cb0c <tcp_process+0x7dc>)
 801ca42:	681b      	ldr	r3, [r3, #0]
 801ca44:	68db      	ldr	r3, [r3, #12]
 801ca46:	4a31      	ldr	r2, [pc, #196]	; (801cb0c <tcp_process+0x7dc>)
 801ca48:	6013      	str	r3, [r2, #0]
 801ca4a:	e013      	b.n	801ca74 <tcp_process+0x744>
 801ca4c:	4b2f      	ldr	r3, [pc, #188]	; (801cb0c <tcp_process+0x7dc>)
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	61bb      	str	r3, [r7, #24]
 801ca52:	e00c      	b.n	801ca6e <tcp_process+0x73e>
 801ca54:	69bb      	ldr	r3, [r7, #24]
 801ca56:	68db      	ldr	r3, [r3, #12]
 801ca58:	687a      	ldr	r2, [r7, #4]
 801ca5a:	429a      	cmp	r2, r3
 801ca5c:	d104      	bne.n	801ca68 <tcp_process+0x738>
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	68da      	ldr	r2, [r3, #12]
 801ca62:	69bb      	ldr	r3, [r7, #24]
 801ca64:	60da      	str	r2, [r3, #12]
 801ca66:	e005      	b.n	801ca74 <tcp_process+0x744>
 801ca68:	69bb      	ldr	r3, [r7, #24]
 801ca6a:	68db      	ldr	r3, [r3, #12]
 801ca6c:	61bb      	str	r3, [r7, #24]
 801ca6e:	69bb      	ldr	r3, [r7, #24]
 801ca70:	2b00      	cmp	r3, #0
 801ca72:	d1ef      	bne.n	801ca54 <tcp_process+0x724>
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	2200      	movs	r2, #0
 801ca78:	60da      	str	r2, [r3, #12]
 801ca7a:	4b1f      	ldr	r3, [pc, #124]	; (801caf8 <tcp_process+0x7c8>)
 801ca7c:	2201      	movs	r2, #1
 801ca7e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	220a      	movs	r2, #10
 801ca84:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801ca86:	4b1d      	ldr	r3, [pc, #116]	; (801cafc <tcp_process+0x7cc>)
 801ca88:	681a      	ldr	r2, [r3, #0]
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	60da      	str	r2, [r3, #12]
 801ca8e:	4a1b      	ldr	r2, [pc, #108]	; (801cafc <tcp_process+0x7cc>)
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	6013      	str	r3, [r2, #0]
 801ca94:	f003 f95c 	bl	801fd50 <tcp_timer_needed>
      }
      break;
 801ca98:	e026      	b.n	801cae8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801ca9a:	6878      	ldr	r0, [r7, #4]
 801ca9c:	f000 f93c 	bl	801cd18 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801caa0:	4b17      	ldr	r3, [pc, #92]	; (801cb00 <tcp_process+0x7d0>)
 801caa2:	781b      	ldrb	r3, [r3, #0]
 801caa4:	f003 0310 	and.w	r3, r3, #16
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	d01f      	beq.n	801caec <tcp_process+0x7bc>
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801cab0:	4b14      	ldr	r3, [pc, #80]	; (801cb04 <tcp_process+0x7d4>)
 801cab2:	681b      	ldr	r3, [r3, #0]
 801cab4:	429a      	cmp	r2, r3
 801cab6:	d119      	bne.n	801caec <tcp_process+0x7bc>
 801cab8:	687b      	ldr	r3, [r7, #4]
 801caba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d115      	bne.n	801caec <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801cac0:	4b11      	ldr	r3, [pc, #68]	; (801cb08 <tcp_process+0x7d8>)
 801cac2:	781b      	ldrb	r3, [r3, #0]
 801cac4:	f043 0310 	orr.w	r3, r3, #16
 801cac8:	b2da      	uxtb	r2, r3
 801caca:	4b0f      	ldr	r3, [pc, #60]	; (801cb08 <tcp_process+0x7d8>)
 801cacc:	701a      	strb	r2, [r3, #0]
      }
      break;
 801cace:	e00d      	b.n	801caec <tcp_process+0x7bc>
    default:
      break;
 801cad0:	bf00      	nop
 801cad2:	e00c      	b.n	801caee <tcp_process+0x7be>
      break;
 801cad4:	bf00      	nop
 801cad6:	e00a      	b.n	801caee <tcp_process+0x7be>
      break;
 801cad8:	bf00      	nop
 801cada:	e008      	b.n	801caee <tcp_process+0x7be>
      break;
 801cadc:	bf00      	nop
 801cade:	e006      	b.n	801caee <tcp_process+0x7be>
      break;
 801cae0:	bf00      	nop
 801cae2:	e004      	b.n	801caee <tcp_process+0x7be>
      break;
 801cae4:	bf00      	nop
 801cae6:	e002      	b.n	801caee <tcp_process+0x7be>
      break;
 801cae8:	bf00      	nop
 801caea:	e000      	b.n	801caee <tcp_process+0x7be>
      break;
 801caec:	bf00      	nop
  }
  return ERR_OK;
 801caee:	2300      	movs	r3, #0
}
 801caf0:	4618      	mov	r0, r3
 801caf2:	3724      	adds	r7, #36	; 0x24
 801caf4:	46bd      	mov	sp, r7
 801caf6:	bd90      	pop	{r4, r7, pc}
 801caf8:	2007edcc 	.word	0x2007edcc
 801cafc:	2007edc8 	.word	0x2007edc8
 801cb00:	2007ee00 	.word	0x2007ee00
 801cb04:	2007edf8 	.word	0x2007edf8
 801cb08:	2007ee01 	.word	0x2007ee01
 801cb0c:	2007edc4 	.word	0x2007edc4

0801cb10 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801cb10:	b590      	push	{r4, r7, lr}
 801cb12:	b085      	sub	sp, #20
 801cb14:	af00      	add	r7, sp, #0
 801cb16:	6078      	str	r0, [r7, #4]
 801cb18:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d106      	bne.n	801cb2e <tcp_oos_insert_segment+0x1e>
 801cb20:	4b3b      	ldr	r3, [pc, #236]	; (801cc10 <tcp_oos_insert_segment+0x100>)
 801cb22:	f240 421f 	movw	r2, #1055	; 0x41f
 801cb26:	493b      	ldr	r1, [pc, #236]	; (801cc14 <tcp_oos_insert_segment+0x104>)
 801cb28:	483b      	ldr	r0, [pc, #236]	; (801cc18 <tcp_oos_insert_segment+0x108>)
 801cb2a:	f007 fa4d 	bl	8023fc8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	691b      	ldr	r3, [r3, #16]
 801cb32:	899b      	ldrh	r3, [r3, #12]
 801cb34:	b29b      	uxth	r3, r3
 801cb36:	4618      	mov	r0, r3
 801cb38:	f7fa fcd4 	bl	80174e4 <lwip_htons>
 801cb3c:	4603      	mov	r3, r0
 801cb3e:	b2db      	uxtb	r3, r3
 801cb40:	f003 0301 	and.w	r3, r3, #1
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	d028      	beq.n	801cb9a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801cb48:	6838      	ldr	r0, [r7, #0]
 801cb4a:	f7fe f8ff 	bl	801ad4c <tcp_segs_free>
    next = NULL;
 801cb4e:	2300      	movs	r3, #0
 801cb50:	603b      	str	r3, [r7, #0]
 801cb52:	e056      	b.n	801cc02 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801cb54:	683b      	ldr	r3, [r7, #0]
 801cb56:	691b      	ldr	r3, [r3, #16]
 801cb58:	899b      	ldrh	r3, [r3, #12]
 801cb5a:	b29b      	uxth	r3, r3
 801cb5c:	4618      	mov	r0, r3
 801cb5e:	f7fa fcc1 	bl	80174e4 <lwip_htons>
 801cb62:	4603      	mov	r3, r0
 801cb64:	b2db      	uxtb	r3, r3
 801cb66:	f003 0301 	and.w	r3, r3, #1
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d00d      	beq.n	801cb8a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	691b      	ldr	r3, [r3, #16]
 801cb72:	899b      	ldrh	r3, [r3, #12]
 801cb74:	b29c      	uxth	r4, r3
 801cb76:	2001      	movs	r0, #1
 801cb78:	f7fa fcb4 	bl	80174e4 <lwip_htons>
 801cb7c:	4603      	mov	r3, r0
 801cb7e:	461a      	mov	r2, r3
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	691b      	ldr	r3, [r3, #16]
 801cb84:	4322      	orrs	r2, r4
 801cb86:	b292      	uxth	r2, r2
 801cb88:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801cb8a:	683b      	ldr	r3, [r7, #0]
 801cb8c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801cb8e:	683b      	ldr	r3, [r7, #0]
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801cb94:	68f8      	ldr	r0, [r7, #12]
 801cb96:	f7fe f8ee 	bl	801ad76 <tcp_seg_free>
    while (next &&
 801cb9a:	683b      	ldr	r3, [r7, #0]
 801cb9c:	2b00      	cmp	r3, #0
 801cb9e:	d00e      	beq.n	801cbbe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801cba0:	687b      	ldr	r3, [r7, #4]
 801cba2:	891b      	ldrh	r3, [r3, #8]
 801cba4:	461a      	mov	r2, r3
 801cba6:	4b1d      	ldr	r3, [pc, #116]	; (801cc1c <tcp_oos_insert_segment+0x10c>)
 801cba8:	681b      	ldr	r3, [r3, #0]
 801cbaa:	441a      	add	r2, r3
 801cbac:	683b      	ldr	r3, [r7, #0]
 801cbae:	691b      	ldr	r3, [r3, #16]
 801cbb0:	685b      	ldr	r3, [r3, #4]
 801cbb2:	6839      	ldr	r1, [r7, #0]
 801cbb4:	8909      	ldrh	r1, [r1, #8]
 801cbb6:	440b      	add	r3, r1
 801cbb8:	1ad3      	subs	r3, r2, r3
    while (next &&
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	daca      	bge.n	801cb54 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801cbbe:	683b      	ldr	r3, [r7, #0]
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d01e      	beq.n	801cc02 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	891b      	ldrh	r3, [r3, #8]
 801cbc8:	461a      	mov	r2, r3
 801cbca:	4b14      	ldr	r3, [pc, #80]	; (801cc1c <tcp_oos_insert_segment+0x10c>)
 801cbcc:	681b      	ldr	r3, [r3, #0]
 801cbce:	441a      	add	r2, r3
 801cbd0:	683b      	ldr	r3, [r7, #0]
 801cbd2:	691b      	ldr	r3, [r3, #16]
 801cbd4:	685b      	ldr	r3, [r3, #4]
 801cbd6:	1ad3      	subs	r3, r2, r3
    if (next &&
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	dd12      	ble.n	801cc02 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801cbdc:	683b      	ldr	r3, [r7, #0]
 801cbde:	691b      	ldr	r3, [r3, #16]
 801cbe0:	685b      	ldr	r3, [r3, #4]
 801cbe2:	b29a      	uxth	r2, r3
 801cbe4:	4b0d      	ldr	r3, [pc, #52]	; (801cc1c <tcp_oos_insert_segment+0x10c>)
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	b29b      	uxth	r3, r3
 801cbea:	1ad3      	subs	r3, r2, r3
 801cbec:	b29a      	uxth	r2, r3
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	685a      	ldr	r2, [r3, #4]
 801cbf6:	687b      	ldr	r3, [r7, #4]
 801cbf8:	891b      	ldrh	r3, [r3, #8]
 801cbfa:	4619      	mov	r1, r3
 801cbfc:	4610      	mov	r0, r2
 801cbfe:	f7fc f989 	bl	8018f14 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	683a      	ldr	r2, [r7, #0]
 801cc06:	601a      	str	r2, [r3, #0]
}
 801cc08:	bf00      	nop
 801cc0a:	3714      	adds	r7, #20
 801cc0c:	46bd      	mov	sp, r7
 801cc0e:	bd90      	pop	{r4, r7, pc}
 801cc10:	080278dc 	.word	0x080278dc
 801cc14:	08027b9c 	.word	0x08027b9c
 801cc18:	08027928 	.word	0x08027928
 801cc1c:	2007edf4 	.word	0x2007edf4

0801cc20 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801cc20:	b5b0      	push	{r4, r5, r7, lr}
 801cc22:	b086      	sub	sp, #24
 801cc24:	af00      	add	r7, sp, #0
 801cc26:	60f8      	str	r0, [r7, #12]
 801cc28:	60b9      	str	r1, [r7, #8]
 801cc2a:	607a      	str	r2, [r7, #4]
 801cc2c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801cc2e:	e03e      	b.n	801ccae <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801cc30:	68bb      	ldr	r3, [r7, #8]
 801cc32:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801cc34:	68bb      	ldr	r3, [r7, #8]
 801cc36:	681b      	ldr	r3, [r3, #0]
 801cc38:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801cc3a:	697b      	ldr	r3, [r7, #20]
 801cc3c:	685b      	ldr	r3, [r3, #4]
 801cc3e:	4618      	mov	r0, r3
 801cc40:	f7fc fb7c 	bl	801933c <pbuf_clen>
 801cc44:	4603      	mov	r3, r0
 801cc46:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cc4e:	8a7a      	ldrh	r2, [r7, #18]
 801cc50:	429a      	cmp	r2, r3
 801cc52:	d906      	bls.n	801cc62 <tcp_free_acked_segments+0x42>
 801cc54:	4b2a      	ldr	r3, [pc, #168]	; (801cd00 <tcp_free_acked_segments+0xe0>)
 801cc56:	f240 4257 	movw	r2, #1111	; 0x457
 801cc5a:	492a      	ldr	r1, [pc, #168]	; (801cd04 <tcp_free_acked_segments+0xe4>)
 801cc5c:	482a      	ldr	r0, [pc, #168]	; (801cd08 <tcp_free_acked_segments+0xe8>)
 801cc5e:	f007 f9b3 	bl	8023fc8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801cc62:	68fb      	ldr	r3, [r7, #12]
 801cc64:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801cc68:	8a7b      	ldrh	r3, [r7, #18]
 801cc6a:	1ad3      	subs	r3, r2, r3
 801cc6c:	b29a      	uxth	r2, r3
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801cc74:	697b      	ldr	r3, [r7, #20]
 801cc76:	891a      	ldrh	r2, [r3, #8]
 801cc78:	4b24      	ldr	r3, [pc, #144]	; (801cd0c <tcp_free_acked_segments+0xec>)
 801cc7a:	881b      	ldrh	r3, [r3, #0]
 801cc7c:	4413      	add	r3, r2
 801cc7e:	b29a      	uxth	r2, r3
 801cc80:	4b22      	ldr	r3, [pc, #136]	; (801cd0c <tcp_free_acked_segments+0xec>)
 801cc82:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801cc84:	6978      	ldr	r0, [r7, #20]
 801cc86:	f7fe f876 	bl	801ad76 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801cc8a:	68fb      	ldr	r3, [r7, #12]
 801cc8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d00c      	beq.n	801ccae <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801cc94:	68bb      	ldr	r3, [r7, #8]
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d109      	bne.n	801ccae <tcp_free_acked_segments+0x8e>
 801cc9a:	683b      	ldr	r3, [r7, #0]
 801cc9c:	2b00      	cmp	r3, #0
 801cc9e:	d106      	bne.n	801ccae <tcp_free_acked_segments+0x8e>
 801cca0:	4b17      	ldr	r3, [pc, #92]	; (801cd00 <tcp_free_acked_segments+0xe0>)
 801cca2:	f240 4261 	movw	r2, #1121	; 0x461
 801cca6:	491a      	ldr	r1, [pc, #104]	; (801cd10 <tcp_free_acked_segments+0xf0>)
 801cca8:	4817      	ldr	r0, [pc, #92]	; (801cd08 <tcp_free_acked_segments+0xe8>)
 801ccaa:	f007 f98d 	bl	8023fc8 <iprintf>
  while (seg_list != NULL &&
 801ccae:	68bb      	ldr	r3, [r7, #8]
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	d020      	beq.n	801ccf6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801ccb4:	68bb      	ldr	r3, [r7, #8]
 801ccb6:	691b      	ldr	r3, [r3, #16]
 801ccb8:	685b      	ldr	r3, [r3, #4]
 801ccba:	4618      	mov	r0, r3
 801ccbc:	f7fa fc27 	bl	801750e <lwip_htonl>
 801ccc0:	4604      	mov	r4, r0
 801ccc2:	68bb      	ldr	r3, [r7, #8]
 801ccc4:	891b      	ldrh	r3, [r3, #8]
 801ccc6:	461d      	mov	r5, r3
 801ccc8:	68bb      	ldr	r3, [r7, #8]
 801ccca:	691b      	ldr	r3, [r3, #16]
 801cccc:	899b      	ldrh	r3, [r3, #12]
 801ccce:	b29b      	uxth	r3, r3
 801ccd0:	4618      	mov	r0, r3
 801ccd2:	f7fa fc07 	bl	80174e4 <lwip_htons>
 801ccd6:	4603      	mov	r3, r0
 801ccd8:	b2db      	uxtb	r3, r3
 801ccda:	f003 0303 	and.w	r3, r3, #3
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	d001      	beq.n	801cce6 <tcp_free_acked_segments+0xc6>
 801cce2:	2301      	movs	r3, #1
 801cce4:	e000      	b.n	801cce8 <tcp_free_acked_segments+0xc8>
 801cce6:	2300      	movs	r3, #0
 801cce8:	442b      	add	r3, r5
 801ccea:	18e2      	adds	r2, r4, r3
 801ccec:	4b09      	ldr	r3, [pc, #36]	; (801cd14 <tcp_free_acked_segments+0xf4>)
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	dd9c      	ble.n	801cc30 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801ccf6:	68bb      	ldr	r3, [r7, #8]
}
 801ccf8:	4618      	mov	r0, r3
 801ccfa:	3718      	adds	r7, #24
 801ccfc:	46bd      	mov	sp, r7
 801ccfe:	bdb0      	pop	{r4, r5, r7, pc}
 801cd00:	080278dc 	.word	0x080278dc
 801cd04:	08027bc4 	.word	0x08027bc4
 801cd08:	08027928 	.word	0x08027928
 801cd0c:	2007edfc 	.word	0x2007edfc
 801cd10:	08027bec 	.word	0x08027bec
 801cd14:	2007edf8 	.word	0x2007edf8

0801cd18 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801cd18:	b5b0      	push	{r4, r5, r7, lr}
 801cd1a:	b094      	sub	sp, #80	; 0x50
 801cd1c:	af00      	add	r7, sp, #0
 801cd1e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801cd20:	2300      	movs	r3, #0
 801cd22:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	2b00      	cmp	r3, #0
 801cd28:	d106      	bne.n	801cd38 <tcp_receive+0x20>
 801cd2a:	4b91      	ldr	r3, [pc, #580]	; (801cf70 <tcp_receive+0x258>)
 801cd2c:	f240 427b 	movw	r2, #1147	; 0x47b
 801cd30:	4990      	ldr	r1, [pc, #576]	; (801cf74 <tcp_receive+0x25c>)
 801cd32:	4891      	ldr	r0, [pc, #580]	; (801cf78 <tcp_receive+0x260>)
 801cd34:	f007 f948 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	7d1b      	ldrb	r3, [r3, #20]
 801cd3c:	2b03      	cmp	r3, #3
 801cd3e:	d806      	bhi.n	801cd4e <tcp_receive+0x36>
 801cd40:	4b8b      	ldr	r3, [pc, #556]	; (801cf70 <tcp_receive+0x258>)
 801cd42:	f240 427c 	movw	r2, #1148	; 0x47c
 801cd46:	498d      	ldr	r1, [pc, #564]	; (801cf7c <tcp_receive+0x264>)
 801cd48:	488b      	ldr	r0, [pc, #556]	; (801cf78 <tcp_receive+0x260>)
 801cd4a:	f007 f93d 	bl	8023fc8 <iprintf>

  if (flags & TCP_ACK) {
 801cd4e:	4b8c      	ldr	r3, [pc, #560]	; (801cf80 <tcp_receive+0x268>)
 801cd50:	781b      	ldrb	r3, [r3, #0]
 801cd52:	f003 0310 	and.w	r3, r3, #16
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	f000 8264 	beq.w	801d224 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801cd62:	461a      	mov	r2, r3
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd68:	4413      	add	r3, r2
 801cd6a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801cd6c:	687b      	ldr	r3, [r7, #4]
 801cd6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801cd70:	4b84      	ldr	r3, [pc, #528]	; (801cf84 <tcp_receive+0x26c>)
 801cd72:	681b      	ldr	r3, [r3, #0]
 801cd74:	1ad3      	subs	r3, r2, r3
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	db1b      	blt.n	801cdb2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801cd7e:	4b81      	ldr	r3, [pc, #516]	; (801cf84 <tcp_receive+0x26c>)
 801cd80:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801cd82:	429a      	cmp	r2, r3
 801cd84:	d106      	bne.n	801cd94 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801cd8a:	4b7f      	ldr	r3, [pc, #508]	; (801cf88 <tcp_receive+0x270>)
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	1ad3      	subs	r3, r2, r3
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	db0e      	blt.n	801cdb2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801cd98:	4b7b      	ldr	r3, [pc, #492]	; (801cf88 <tcp_receive+0x270>)
 801cd9a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801cd9c:	429a      	cmp	r2, r3
 801cd9e:	d125      	bne.n	801cdec <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801cda0:	4b7a      	ldr	r3, [pc, #488]	; (801cf8c <tcp_receive+0x274>)
 801cda2:	681b      	ldr	r3, [r3, #0]
 801cda4:	89db      	ldrh	r3, [r3, #14]
 801cda6:	b29a      	uxth	r2, r3
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801cdae:	429a      	cmp	r2, r3
 801cdb0:	d91c      	bls.n	801cdec <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801cdb2:	4b76      	ldr	r3, [pc, #472]	; (801cf8c <tcp_receive+0x274>)
 801cdb4:	681b      	ldr	r3, [r3, #0]
 801cdb6:	89db      	ldrh	r3, [r3, #14]
 801cdb8:	b29a      	uxth	r2, r3
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801cdcc:	429a      	cmp	r2, r3
 801cdce:	d205      	bcs.n	801cddc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801cddc:	4b69      	ldr	r3, [pc, #420]	; (801cf84 <tcp_receive+0x26c>)
 801cdde:	681a      	ldr	r2, [r3, #0]
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801cde4:	4b68      	ldr	r3, [pc, #416]	; (801cf88 <tcp_receive+0x270>)
 801cde6:	681a      	ldr	r2, [r3, #0]
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801cdec:	4b66      	ldr	r3, [pc, #408]	; (801cf88 <tcp_receive+0x270>)
 801cdee:	681a      	ldr	r2, [r3, #0]
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cdf4:	1ad3      	subs	r3, r2, r3
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	dc58      	bgt.n	801ceac <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801cdfa:	4b65      	ldr	r3, [pc, #404]	; (801cf90 <tcp_receive+0x278>)
 801cdfc:	881b      	ldrh	r3, [r3, #0]
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d14b      	bne.n	801ce9a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801ce02:	687b      	ldr	r3, [r7, #4]
 801ce04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ce06:	687a      	ldr	r2, [r7, #4]
 801ce08:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801ce0c:	4413      	add	r3, r2
 801ce0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ce10:	429a      	cmp	r2, r3
 801ce12:	d142      	bne.n	801ce9a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	db3d      	blt.n	801ce9a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ce22:	4b59      	ldr	r3, [pc, #356]	; (801cf88 <tcp_receive+0x270>)
 801ce24:	681b      	ldr	r3, [r3, #0]
 801ce26:	429a      	cmp	r2, r3
 801ce28:	d137      	bne.n	801ce9a <tcp_receive+0x182>
              found_dupack = 1;
 801ce2a:	2301      	movs	r3, #1
 801ce2c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ce34:	2bff      	cmp	r3, #255	; 0xff
 801ce36:	d007      	beq.n	801ce48 <tcp_receive+0x130>
                ++pcb->dupacks;
 801ce38:	687b      	ldr	r3, [r7, #4]
 801ce3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ce3e:	3301      	adds	r3, #1
 801ce40:	b2da      	uxtb	r2, r3
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ce4e:	2b03      	cmp	r3, #3
 801ce50:	d91b      	bls.n	801ce8a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ce5c:	4413      	add	r3, r2
 801ce5e:	b29a      	uxth	r2, r3
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ce66:	429a      	cmp	r2, r3
 801ce68:	d30a      	bcc.n	801ce80 <tcp_receive+0x168>
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ce74:	4413      	add	r3, r2
 801ce76:	b29a      	uxth	r2, r3
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801ce7e:	e004      	b.n	801ce8a <tcp_receive+0x172>
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ce86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ce90:	2b02      	cmp	r3, #2
 801ce92:	d902      	bls.n	801ce9a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801ce94:	6878      	ldr	r0, [r7, #4]
 801ce96:	f002 fbf5 	bl	801f684 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801ce9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ce9c:	2b00      	cmp	r3, #0
 801ce9e:	f040 8161 	bne.w	801d164 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	2200      	movs	r2, #0
 801cea6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ceaa:	e15b      	b.n	801d164 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ceac:	4b36      	ldr	r3, [pc, #216]	; (801cf88 <tcp_receive+0x270>)
 801ceae:	681a      	ldr	r2, [r3, #0]
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ceb4:	1ad3      	subs	r3, r2, r3
 801ceb6:	3b01      	subs	r3, #1
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	f2c0 814e 	blt.w	801d15a <tcp_receive+0x442>
 801cebe:	4b32      	ldr	r3, [pc, #200]	; (801cf88 <tcp_receive+0x270>)
 801cec0:	681a      	ldr	r2, [r3, #0]
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cec6:	1ad3      	subs	r3, r2, r3
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	f300 8146 	bgt.w	801d15a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801cece:	687b      	ldr	r3, [r7, #4]
 801ced0:	8b5b      	ldrh	r3, [r3, #26]
 801ced2:	f003 0304 	and.w	r3, r3, #4
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	d010      	beq.n	801cefc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	8b5b      	ldrh	r3, [r3, #26]
 801cede:	f023 0304 	bic.w	r3, r3, #4
 801cee2:	b29a      	uxth	r2, r3
 801cee4:	687b      	ldr	r3, [r7, #4]
 801cee6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801ceee:	687b      	ldr	r3, [r7, #4]
 801cef0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	2200      	movs	r2, #0
 801cef8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	2200      	movs	r2, #0
 801cf00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801cf0a:	10db      	asrs	r3, r3, #3
 801cf0c:	b21b      	sxth	r3, r3
 801cf0e:	b29a      	uxth	r2, r3
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801cf16:	b29b      	uxth	r3, r3
 801cf18:	4413      	add	r3, r2
 801cf1a:	b29b      	uxth	r3, r3
 801cf1c:	b21a      	sxth	r2, r3
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801cf24:	4b18      	ldr	r3, [pc, #96]	; (801cf88 <tcp_receive+0x270>)
 801cf26:	681b      	ldr	r3, [r3, #0]
 801cf28:	b29a      	uxth	r2, r3
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cf2e:	b29b      	uxth	r3, r3
 801cf30:	1ad3      	subs	r3, r2, r3
 801cf32:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	2200      	movs	r2, #0
 801cf38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801cf3c:	4b12      	ldr	r3, [pc, #72]	; (801cf88 <tcp_receive+0x270>)
 801cf3e:	681a      	ldr	r2, [r3, #0]
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	7d1b      	ldrb	r3, [r3, #20]
 801cf48:	2b03      	cmp	r3, #3
 801cf4a:	f240 8097 	bls.w	801d07c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801cf5a:	429a      	cmp	r2, r3
 801cf5c:	d245      	bcs.n	801cfea <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	8b5b      	ldrh	r3, [r3, #26]
 801cf62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d014      	beq.n	801cf94 <tcp_receive+0x27c>
 801cf6a:	2301      	movs	r3, #1
 801cf6c:	e013      	b.n	801cf96 <tcp_receive+0x27e>
 801cf6e:	bf00      	nop
 801cf70:	080278dc 	.word	0x080278dc
 801cf74:	08027c0c 	.word	0x08027c0c
 801cf78:	08027928 	.word	0x08027928
 801cf7c:	08027c28 	.word	0x08027c28
 801cf80:	2007ee00 	.word	0x2007ee00
 801cf84:	2007edf4 	.word	0x2007edf4
 801cf88:	2007edf8 	.word	0x2007edf8
 801cf8c:	2007ede4 	.word	0x2007ede4
 801cf90:	2007edfe 	.word	0x2007edfe
 801cf94:	2302      	movs	r3, #2
 801cf96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801cf9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801cf9e:	b29a      	uxth	r2, r3
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cfa4:	fb12 f303 	smulbb	r3, r2, r3
 801cfa8:	b29b      	uxth	r3, r3
 801cfaa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801cfac:	4293      	cmp	r3, r2
 801cfae:	bf28      	it	cs
 801cfb0:	4613      	movcs	r3, r2
 801cfb2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801cfb4:	687b      	ldr	r3, [r7, #4]
 801cfb6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cfba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801cfbc:	4413      	add	r3, r2
 801cfbe:	b29a      	uxth	r2, r3
 801cfc0:	687b      	ldr	r3, [r7, #4]
 801cfc2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801cfc6:	429a      	cmp	r2, r3
 801cfc8:	d309      	bcc.n	801cfde <tcp_receive+0x2c6>
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cfd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801cfd2:	4413      	add	r3, r2
 801cfd4:	b29a      	uxth	r2, r3
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801cfdc:	e04e      	b.n	801d07c <tcp_receive+0x364>
 801cfde:	687b      	ldr	r3, [r7, #4]
 801cfe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cfe4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801cfe8:	e048      	b.n	801d07c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801cff0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801cff2:	4413      	add	r3, r2
 801cff4:	b29a      	uxth	r2, r3
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801cffc:	429a      	cmp	r2, r3
 801cffe:	d309      	bcc.n	801d014 <tcp_receive+0x2fc>
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801d006:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d008:	4413      	add	r3, r2
 801d00a:	b29a      	uxth	r2, r3
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801d012:	e004      	b.n	801d01e <tcp_receive+0x306>
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d01a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801d02a:	429a      	cmp	r2, r3
 801d02c:	d326      	bcc.n	801d07c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801d03a:	1ad3      	subs	r3, r2, r3
 801d03c:	b29a      	uxth	r2, r3
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d04e:	4413      	add	r3, r2
 801d050:	b29a      	uxth	r2, r3
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801d058:	429a      	cmp	r2, r3
 801d05a:	d30a      	bcc.n	801d072 <tcp_receive+0x35a>
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d066:	4413      	add	r3, r2
 801d068:	b29a      	uxth	r2, r3
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801d070:	e004      	b.n	801d07c <tcp_receive+0x364>
 801d072:	687b      	ldr	r3, [r7, #4]
 801d074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d078:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d084:	4a98      	ldr	r2, [pc, #608]	; (801d2e8 <tcp_receive+0x5d0>)
 801d086:	6878      	ldr	r0, [r7, #4]
 801d088:	f7ff fdca 	bl	801cc20 <tcp_free_acked_segments>
 801d08c:	4602      	mov	r2, r0
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d09a:	4a94      	ldr	r2, [pc, #592]	; (801d2ec <tcp_receive+0x5d4>)
 801d09c:	6878      	ldr	r0, [r7, #4]
 801d09e:	f7ff fdbf 	bl	801cc20 <tcp_free_acked_segments>
 801d0a2:	4602      	mov	r2, r0
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	d104      	bne.n	801d0ba <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d0b6:	861a      	strh	r2, [r3, #48]	; 0x30
 801d0b8:	e002      	b.n	801d0c0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801d0ba:	687b      	ldr	r3, [r7, #4]
 801d0bc:	2200      	movs	r2, #0
 801d0be:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	2200      	movs	r2, #0
 801d0c4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d103      	bne.n	801d0d6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801d0ce:	687b      	ldr	r3, [r7, #4]
 801d0d0:	2200      	movs	r2, #0
 801d0d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801d0dc:	4b84      	ldr	r3, [pc, #528]	; (801d2f0 <tcp_receive+0x5d8>)
 801d0de:	881b      	ldrh	r3, [r3, #0]
 801d0e0:	4413      	add	r3, r2
 801d0e2:	b29a      	uxth	r2, r3
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	8b5b      	ldrh	r3, [r3, #26]
 801d0ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d035      	beq.n	801d162 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801d0f6:	687b      	ldr	r3, [r7, #4]
 801d0f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	d118      	bne.n	801d130 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d102:	2b00      	cmp	r3, #0
 801d104:	d00c      	beq.n	801d120 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d10e:	691b      	ldr	r3, [r3, #16]
 801d110:	685b      	ldr	r3, [r3, #4]
 801d112:	4618      	mov	r0, r3
 801d114:	f7fa f9fb 	bl	801750e <lwip_htonl>
 801d118:	4603      	mov	r3, r0
 801d11a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	dc20      	bgt.n	801d162 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801d120:	687b      	ldr	r3, [r7, #4]
 801d122:	8b5b      	ldrh	r3, [r3, #26]
 801d124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d128:	b29a      	uxth	r2, r3
 801d12a:	687b      	ldr	r3, [r7, #4]
 801d12c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d12e:	e018      	b.n	801d162 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801d130:	687b      	ldr	r3, [r7, #4]
 801d132:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d138:	691b      	ldr	r3, [r3, #16]
 801d13a:	685b      	ldr	r3, [r3, #4]
 801d13c:	4618      	mov	r0, r3
 801d13e:	f7fa f9e6 	bl	801750e <lwip_htonl>
 801d142:	4603      	mov	r3, r0
 801d144:	1ae3      	subs	r3, r4, r3
 801d146:	2b00      	cmp	r3, #0
 801d148:	dc0b      	bgt.n	801d162 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	8b5b      	ldrh	r3, [r3, #26]
 801d14e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d152:	b29a      	uxth	r2, r3
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d158:	e003      	b.n	801d162 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801d15a:	6878      	ldr	r0, [r7, #4]
 801d15c:	f002 fc88 	bl	801fa70 <tcp_send_empty_ack>
 801d160:	e000      	b.n	801d164 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d162:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d168:	2b00      	cmp	r3, #0
 801d16a:	d05b      	beq.n	801d224 <tcp_receive+0x50c>
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d170:	4b60      	ldr	r3, [pc, #384]	; (801d2f4 <tcp_receive+0x5dc>)
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	1ad3      	subs	r3, r2, r3
 801d176:	2b00      	cmp	r3, #0
 801d178:	da54      	bge.n	801d224 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801d17a:	4b5f      	ldr	r3, [pc, #380]	; (801d2f8 <tcp_receive+0x5e0>)
 801d17c:	681b      	ldr	r3, [r3, #0]
 801d17e:	b29a      	uxth	r2, r3
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d184:	b29b      	uxth	r3, r3
 801d186:	1ad3      	subs	r3, r2, r3
 801d188:	b29b      	uxth	r3, r3
 801d18a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801d18e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801d192:	687b      	ldr	r3, [r7, #4]
 801d194:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801d198:	10db      	asrs	r3, r3, #3
 801d19a:	b21b      	sxth	r3, r3
 801d19c:	b29b      	uxth	r3, r3
 801d19e:	1ad3      	subs	r3, r2, r3
 801d1a0:	b29b      	uxth	r3, r3
 801d1a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801d1ac:	b29a      	uxth	r2, r3
 801d1ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801d1b2:	4413      	add	r3, r2
 801d1b4:	b29b      	uxth	r3, r3
 801d1b6:	b21a      	sxth	r2, r3
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801d1bc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	da05      	bge.n	801d1d0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801d1c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801d1c8:	425b      	negs	r3, r3
 801d1ca:	b29b      	uxth	r3, r3
 801d1cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801d1d0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801d1da:	109b      	asrs	r3, r3, #2
 801d1dc:	b21b      	sxth	r3, r3
 801d1de:	b29b      	uxth	r3, r3
 801d1e0:	1ad3      	subs	r3, r2, r3
 801d1e2:	b29b      	uxth	r3, r3
 801d1e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801d1ee:	b29a      	uxth	r2, r3
 801d1f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801d1f4:	4413      	add	r3, r2
 801d1f6:	b29b      	uxth	r3, r3
 801d1f8:	b21a      	sxth	r2, r3
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801d1fe:	687b      	ldr	r3, [r7, #4]
 801d200:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801d204:	10db      	asrs	r3, r3, #3
 801d206:	b21b      	sxth	r3, r3
 801d208:	b29a      	uxth	r2, r3
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801d210:	b29b      	uxth	r3, r3
 801d212:	4413      	add	r3, r2
 801d214:	b29b      	uxth	r3, r3
 801d216:	b21a      	sxth	r2, r3
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801d21e:	687b      	ldr	r3, [r7, #4]
 801d220:	2200      	movs	r2, #0
 801d222:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d224:	4b35      	ldr	r3, [pc, #212]	; (801d2fc <tcp_receive+0x5e4>)
 801d226:	881b      	ldrh	r3, [r3, #0]
 801d228:	2b00      	cmp	r3, #0
 801d22a:	f000 84e2 	beq.w	801dbf2 <tcp_receive+0xeda>
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	7d1b      	ldrb	r3, [r3, #20]
 801d232:	2b06      	cmp	r3, #6
 801d234:	f200 84dd 	bhi.w	801dbf2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d23c:	4b30      	ldr	r3, [pc, #192]	; (801d300 <tcp_receive+0x5e8>)
 801d23e:	681b      	ldr	r3, [r3, #0]
 801d240:	1ad3      	subs	r3, r2, r3
 801d242:	3b01      	subs	r3, #1
 801d244:	2b00      	cmp	r3, #0
 801d246:	f2c0 808f 	blt.w	801d368 <tcp_receive+0x650>
 801d24a:	687b      	ldr	r3, [r7, #4]
 801d24c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d24e:	4b2b      	ldr	r3, [pc, #172]	; (801d2fc <tcp_receive+0x5e4>)
 801d250:	881b      	ldrh	r3, [r3, #0]
 801d252:	4619      	mov	r1, r3
 801d254:	4b2a      	ldr	r3, [pc, #168]	; (801d300 <tcp_receive+0x5e8>)
 801d256:	681b      	ldr	r3, [r3, #0]
 801d258:	440b      	add	r3, r1
 801d25a:	1ad3      	subs	r3, r2, r3
 801d25c:	3301      	adds	r3, #1
 801d25e:	2b00      	cmp	r3, #0
 801d260:	f300 8082 	bgt.w	801d368 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801d264:	4b27      	ldr	r3, [pc, #156]	; (801d304 <tcp_receive+0x5ec>)
 801d266:	685b      	ldr	r3, [r3, #4]
 801d268:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d26e:	4b24      	ldr	r3, [pc, #144]	; (801d300 <tcp_receive+0x5e8>)
 801d270:	681b      	ldr	r3, [r3, #0]
 801d272:	1ad3      	subs	r3, r2, r3
 801d274:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801d276:	4b23      	ldr	r3, [pc, #140]	; (801d304 <tcp_receive+0x5ec>)
 801d278:	685b      	ldr	r3, [r3, #4]
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d106      	bne.n	801d28c <tcp_receive+0x574>
 801d27e:	4b22      	ldr	r3, [pc, #136]	; (801d308 <tcp_receive+0x5f0>)
 801d280:	f240 5294 	movw	r2, #1428	; 0x594
 801d284:	4921      	ldr	r1, [pc, #132]	; (801d30c <tcp_receive+0x5f4>)
 801d286:	4822      	ldr	r0, [pc, #136]	; (801d310 <tcp_receive+0x5f8>)
 801d288:	f006 fe9e 	bl	8023fc8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801d28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d28e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d292:	4293      	cmp	r3, r2
 801d294:	d906      	bls.n	801d2a4 <tcp_receive+0x58c>
 801d296:	4b1c      	ldr	r3, [pc, #112]	; (801d308 <tcp_receive+0x5f0>)
 801d298:	f240 5295 	movw	r2, #1429	; 0x595
 801d29c:	491d      	ldr	r1, [pc, #116]	; (801d314 <tcp_receive+0x5fc>)
 801d29e:	481c      	ldr	r0, [pc, #112]	; (801d310 <tcp_receive+0x5f8>)
 801d2a0:	f006 fe92 	bl	8023fc8 <iprintf>
      off = (u16_t)off32;
 801d2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d2a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801d2aa:	4b16      	ldr	r3, [pc, #88]	; (801d304 <tcp_receive+0x5ec>)
 801d2ac:	685b      	ldr	r3, [r3, #4]
 801d2ae:	891b      	ldrh	r3, [r3, #8]
 801d2b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d2b4:	429a      	cmp	r2, r3
 801d2b6:	d906      	bls.n	801d2c6 <tcp_receive+0x5ae>
 801d2b8:	4b13      	ldr	r3, [pc, #76]	; (801d308 <tcp_receive+0x5f0>)
 801d2ba:	f240 5297 	movw	r2, #1431	; 0x597
 801d2be:	4916      	ldr	r1, [pc, #88]	; (801d318 <tcp_receive+0x600>)
 801d2c0:	4813      	ldr	r0, [pc, #76]	; (801d310 <tcp_receive+0x5f8>)
 801d2c2:	f006 fe81 	bl	8023fc8 <iprintf>
      inseg.len -= off;
 801d2c6:	4b0f      	ldr	r3, [pc, #60]	; (801d304 <tcp_receive+0x5ec>)
 801d2c8:	891a      	ldrh	r2, [r3, #8]
 801d2ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d2ce:	1ad3      	subs	r3, r2, r3
 801d2d0:	b29a      	uxth	r2, r3
 801d2d2:	4b0c      	ldr	r3, [pc, #48]	; (801d304 <tcp_receive+0x5ec>)
 801d2d4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801d2d6:	4b0b      	ldr	r3, [pc, #44]	; (801d304 <tcp_receive+0x5ec>)
 801d2d8:	685b      	ldr	r3, [r3, #4]
 801d2da:	891a      	ldrh	r2, [r3, #8]
 801d2dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d2e0:	1ad3      	subs	r3, r2, r3
 801d2e2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801d2e4:	e02a      	b.n	801d33c <tcp_receive+0x624>
 801d2e6:	bf00      	nop
 801d2e8:	08027c44 	.word	0x08027c44
 801d2ec:	08027c4c 	.word	0x08027c4c
 801d2f0:	2007edfc 	.word	0x2007edfc
 801d2f4:	2007edf8 	.word	0x2007edf8
 801d2f8:	2007edb8 	.word	0x2007edb8
 801d2fc:	2007edfe 	.word	0x2007edfe
 801d300:	2007edf4 	.word	0x2007edf4
 801d304:	2007edd0 	.word	0x2007edd0
 801d308:	080278dc 	.word	0x080278dc
 801d30c:	08027c54 	.word	0x08027c54
 801d310:	08027928 	.word	0x08027928
 801d314:	08027c64 	.word	0x08027c64
 801d318:	08027c74 	.word	0x08027c74
        off -= p->len;
 801d31c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d31e:	895b      	ldrh	r3, [r3, #10]
 801d320:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d324:	1ad3      	subs	r3, r2, r3
 801d326:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801d32a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d32c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801d32e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801d330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d332:	2200      	movs	r2, #0
 801d334:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801d336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d338:	681b      	ldr	r3, [r3, #0]
 801d33a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801d33c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d33e:	895b      	ldrh	r3, [r3, #10]
 801d340:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d344:	429a      	cmp	r2, r3
 801d346:	d8e9      	bhi.n	801d31c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801d348:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d34c:	4619      	mov	r1, r3
 801d34e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801d350:	f7fb fee0 	bl	8019114 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d358:	4a91      	ldr	r2, [pc, #580]	; (801d5a0 <tcp_receive+0x888>)
 801d35a:	6013      	str	r3, [r2, #0]
 801d35c:	4b91      	ldr	r3, [pc, #580]	; (801d5a4 <tcp_receive+0x88c>)
 801d35e:	691b      	ldr	r3, [r3, #16]
 801d360:	4a8f      	ldr	r2, [pc, #572]	; (801d5a0 <tcp_receive+0x888>)
 801d362:	6812      	ldr	r2, [r2, #0]
 801d364:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d366:	e00d      	b.n	801d384 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801d368:	4b8d      	ldr	r3, [pc, #564]	; (801d5a0 <tcp_receive+0x888>)
 801d36a:	681a      	ldr	r2, [r3, #0]
 801d36c:	687b      	ldr	r3, [r7, #4]
 801d36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d370:	1ad3      	subs	r3, r2, r3
 801d372:	2b00      	cmp	r3, #0
 801d374:	da06      	bge.n	801d384 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801d376:	687b      	ldr	r3, [r7, #4]
 801d378:	8b5b      	ldrh	r3, [r3, #26]
 801d37a:	f043 0302 	orr.w	r3, r3, #2
 801d37e:	b29a      	uxth	r2, r3
 801d380:	687b      	ldr	r3, [r7, #4]
 801d382:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d384:	4b86      	ldr	r3, [pc, #536]	; (801d5a0 <tcp_receive+0x888>)
 801d386:	681a      	ldr	r2, [r3, #0]
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d38c:	1ad3      	subs	r3, r2, r3
 801d38e:	2b00      	cmp	r3, #0
 801d390:	f2c0 842a 	blt.w	801dbe8 <tcp_receive+0xed0>
 801d394:	4b82      	ldr	r3, [pc, #520]	; (801d5a0 <tcp_receive+0x888>)
 801d396:	681a      	ldr	r2, [r3, #0]
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d39c:	6879      	ldr	r1, [r7, #4]
 801d39e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d3a0:	440b      	add	r3, r1
 801d3a2:	1ad3      	subs	r3, r2, r3
 801d3a4:	3301      	adds	r3, #1
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	f300 841e 	bgt.w	801dbe8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d3b0:	4b7b      	ldr	r3, [pc, #492]	; (801d5a0 <tcp_receive+0x888>)
 801d3b2:	681b      	ldr	r3, [r3, #0]
 801d3b4:	429a      	cmp	r2, r3
 801d3b6:	f040 829a 	bne.w	801d8ee <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801d3ba:	4b7a      	ldr	r3, [pc, #488]	; (801d5a4 <tcp_receive+0x88c>)
 801d3bc:	891c      	ldrh	r4, [r3, #8]
 801d3be:	4b79      	ldr	r3, [pc, #484]	; (801d5a4 <tcp_receive+0x88c>)
 801d3c0:	691b      	ldr	r3, [r3, #16]
 801d3c2:	899b      	ldrh	r3, [r3, #12]
 801d3c4:	b29b      	uxth	r3, r3
 801d3c6:	4618      	mov	r0, r3
 801d3c8:	f7fa f88c 	bl	80174e4 <lwip_htons>
 801d3cc:	4603      	mov	r3, r0
 801d3ce:	b2db      	uxtb	r3, r3
 801d3d0:	f003 0303 	and.w	r3, r3, #3
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	d001      	beq.n	801d3dc <tcp_receive+0x6c4>
 801d3d8:	2301      	movs	r3, #1
 801d3da:	e000      	b.n	801d3de <tcp_receive+0x6c6>
 801d3dc:	2300      	movs	r3, #0
 801d3de:	4423      	add	r3, r4
 801d3e0:	b29a      	uxth	r2, r3
 801d3e2:	4b71      	ldr	r3, [pc, #452]	; (801d5a8 <tcp_receive+0x890>)
 801d3e4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d3ea:	4b6f      	ldr	r3, [pc, #444]	; (801d5a8 <tcp_receive+0x890>)
 801d3ec:	881b      	ldrh	r3, [r3, #0]
 801d3ee:	429a      	cmp	r2, r3
 801d3f0:	d275      	bcs.n	801d4de <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d3f2:	4b6c      	ldr	r3, [pc, #432]	; (801d5a4 <tcp_receive+0x88c>)
 801d3f4:	691b      	ldr	r3, [r3, #16]
 801d3f6:	899b      	ldrh	r3, [r3, #12]
 801d3f8:	b29b      	uxth	r3, r3
 801d3fa:	4618      	mov	r0, r3
 801d3fc:	f7fa f872 	bl	80174e4 <lwip_htons>
 801d400:	4603      	mov	r3, r0
 801d402:	b2db      	uxtb	r3, r3
 801d404:	f003 0301 	and.w	r3, r3, #1
 801d408:	2b00      	cmp	r3, #0
 801d40a:	d01f      	beq.n	801d44c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801d40c:	4b65      	ldr	r3, [pc, #404]	; (801d5a4 <tcp_receive+0x88c>)
 801d40e:	691b      	ldr	r3, [r3, #16]
 801d410:	899b      	ldrh	r3, [r3, #12]
 801d412:	b29b      	uxth	r3, r3
 801d414:	b21b      	sxth	r3, r3
 801d416:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d41a:	b21c      	sxth	r4, r3
 801d41c:	4b61      	ldr	r3, [pc, #388]	; (801d5a4 <tcp_receive+0x88c>)
 801d41e:	691b      	ldr	r3, [r3, #16]
 801d420:	899b      	ldrh	r3, [r3, #12]
 801d422:	b29b      	uxth	r3, r3
 801d424:	4618      	mov	r0, r3
 801d426:	f7fa f85d 	bl	80174e4 <lwip_htons>
 801d42a:	4603      	mov	r3, r0
 801d42c:	b2db      	uxtb	r3, r3
 801d42e:	b29b      	uxth	r3, r3
 801d430:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801d434:	b29b      	uxth	r3, r3
 801d436:	4618      	mov	r0, r3
 801d438:	f7fa f854 	bl	80174e4 <lwip_htons>
 801d43c:	4603      	mov	r3, r0
 801d43e:	b21b      	sxth	r3, r3
 801d440:	4323      	orrs	r3, r4
 801d442:	b21a      	sxth	r2, r3
 801d444:	4b57      	ldr	r3, [pc, #348]	; (801d5a4 <tcp_receive+0x88c>)
 801d446:	691b      	ldr	r3, [r3, #16]
 801d448:	b292      	uxth	r2, r2
 801d44a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d450:	4b54      	ldr	r3, [pc, #336]	; (801d5a4 <tcp_receive+0x88c>)
 801d452:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d454:	4b53      	ldr	r3, [pc, #332]	; (801d5a4 <tcp_receive+0x88c>)
 801d456:	691b      	ldr	r3, [r3, #16]
 801d458:	899b      	ldrh	r3, [r3, #12]
 801d45a:	b29b      	uxth	r3, r3
 801d45c:	4618      	mov	r0, r3
 801d45e:	f7fa f841 	bl	80174e4 <lwip_htons>
 801d462:	4603      	mov	r3, r0
 801d464:	b2db      	uxtb	r3, r3
 801d466:	f003 0302 	and.w	r3, r3, #2
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d005      	beq.n	801d47a <tcp_receive+0x762>
            inseg.len -= 1;
 801d46e:	4b4d      	ldr	r3, [pc, #308]	; (801d5a4 <tcp_receive+0x88c>)
 801d470:	891b      	ldrh	r3, [r3, #8]
 801d472:	3b01      	subs	r3, #1
 801d474:	b29a      	uxth	r2, r3
 801d476:	4b4b      	ldr	r3, [pc, #300]	; (801d5a4 <tcp_receive+0x88c>)
 801d478:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801d47a:	4b4a      	ldr	r3, [pc, #296]	; (801d5a4 <tcp_receive+0x88c>)
 801d47c:	685b      	ldr	r3, [r3, #4]
 801d47e:	4a49      	ldr	r2, [pc, #292]	; (801d5a4 <tcp_receive+0x88c>)
 801d480:	8912      	ldrh	r2, [r2, #8]
 801d482:	4611      	mov	r1, r2
 801d484:	4618      	mov	r0, r3
 801d486:	f7fb fd45 	bl	8018f14 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801d48a:	4b46      	ldr	r3, [pc, #280]	; (801d5a4 <tcp_receive+0x88c>)
 801d48c:	891c      	ldrh	r4, [r3, #8]
 801d48e:	4b45      	ldr	r3, [pc, #276]	; (801d5a4 <tcp_receive+0x88c>)
 801d490:	691b      	ldr	r3, [r3, #16]
 801d492:	899b      	ldrh	r3, [r3, #12]
 801d494:	b29b      	uxth	r3, r3
 801d496:	4618      	mov	r0, r3
 801d498:	f7fa f824 	bl	80174e4 <lwip_htons>
 801d49c:	4603      	mov	r3, r0
 801d49e:	b2db      	uxtb	r3, r3
 801d4a0:	f003 0303 	and.w	r3, r3, #3
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	d001      	beq.n	801d4ac <tcp_receive+0x794>
 801d4a8:	2301      	movs	r3, #1
 801d4aa:	e000      	b.n	801d4ae <tcp_receive+0x796>
 801d4ac:	2300      	movs	r3, #0
 801d4ae:	4423      	add	r3, r4
 801d4b0:	b29a      	uxth	r2, r3
 801d4b2:	4b3d      	ldr	r3, [pc, #244]	; (801d5a8 <tcp_receive+0x890>)
 801d4b4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d4b6:	4b3c      	ldr	r3, [pc, #240]	; (801d5a8 <tcp_receive+0x890>)
 801d4b8:	881b      	ldrh	r3, [r3, #0]
 801d4ba:	461a      	mov	r2, r3
 801d4bc:	4b38      	ldr	r3, [pc, #224]	; (801d5a0 <tcp_receive+0x888>)
 801d4be:	681b      	ldr	r3, [r3, #0]
 801d4c0:	441a      	add	r2, r3
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4c6:	6879      	ldr	r1, [r7, #4]
 801d4c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d4ca:	440b      	add	r3, r1
 801d4cc:	429a      	cmp	r2, r3
 801d4ce:	d006      	beq.n	801d4de <tcp_receive+0x7c6>
 801d4d0:	4b36      	ldr	r3, [pc, #216]	; (801d5ac <tcp_receive+0x894>)
 801d4d2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801d4d6:	4936      	ldr	r1, [pc, #216]	; (801d5b0 <tcp_receive+0x898>)
 801d4d8:	4836      	ldr	r0, [pc, #216]	; (801d5b4 <tcp_receive+0x89c>)
 801d4da:	f006 fd75 	bl	8023fc8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d4e2:	2b00      	cmp	r3, #0
 801d4e4:	f000 80e7 	beq.w	801d6b6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d4e8:	4b2e      	ldr	r3, [pc, #184]	; (801d5a4 <tcp_receive+0x88c>)
 801d4ea:	691b      	ldr	r3, [r3, #16]
 801d4ec:	899b      	ldrh	r3, [r3, #12]
 801d4ee:	b29b      	uxth	r3, r3
 801d4f0:	4618      	mov	r0, r3
 801d4f2:	f7f9 fff7 	bl	80174e4 <lwip_htons>
 801d4f6:	4603      	mov	r3, r0
 801d4f8:	b2db      	uxtb	r3, r3
 801d4fa:	f003 0301 	and.w	r3, r3, #1
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	d010      	beq.n	801d524 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801d502:	e00a      	b.n	801d51a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801d504:	687b      	ldr	r3, [r7, #4]
 801d506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d508:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d50e:	681a      	ldr	r2, [r3, #0]
 801d510:	687b      	ldr	r3, [r7, #4]
 801d512:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801d514:	68f8      	ldr	r0, [r7, #12]
 801d516:	f7fd fc2e 	bl	801ad76 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d1f0      	bne.n	801d504 <tcp_receive+0x7ec>
 801d522:	e0c8      	b.n	801d6b6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d528:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801d52a:	e052      	b.n	801d5d2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d52e:	691b      	ldr	r3, [r3, #16]
 801d530:	899b      	ldrh	r3, [r3, #12]
 801d532:	b29b      	uxth	r3, r3
 801d534:	4618      	mov	r0, r3
 801d536:	f7f9 ffd5 	bl	80174e4 <lwip_htons>
 801d53a:	4603      	mov	r3, r0
 801d53c:	b2db      	uxtb	r3, r3
 801d53e:	f003 0301 	and.w	r3, r3, #1
 801d542:	2b00      	cmp	r3, #0
 801d544:	d03d      	beq.n	801d5c2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801d546:	4b17      	ldr	r3, [pc, #92]	; (801d5a4 <tcp_receive+0x88c>)
 801d548:	691b      	ldr	r3, [r3, #16]
 801d54a:	899b      	ldrh	r3, [r3, #12]
 801d54c:	b29b      	uxth	r3, r3
 801d54e:	4618      	mov	r0, r3
 801d550:	f7f9 ffc8 	bl	80174e4 <lwip_htons>
 801d554:	4603      	mov	r3, r0
 801d556:	b2db      	uxtb	r3, r3
 801d558:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	d130      	bne.n	801d5c2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801d560:	4b10      	ldr	r3, [pc, #64]	; (801d5a4 <tcp_receive+0x88c>)
 801d562:	691b      	ldr	r3, [r3, #16]
 801d564:	899b      	ldrh	r3, [r3, #12]
 801d566:	b29c      	uxth	r4, r3
 801d568:	2001      	movs	r0, #1
 801d56a:	f7f9 ffbb 	bl	80174e4 <lwip_htons>
 801d56e:	4603      	mov	r3, r0
 801d570:	461a      	mov	r2, r3
 801d572:	4b0c      	ldr	r3, [pc, #48]	; (801d5a4 <tcp_receive+0x88c>)
 801d574:	691b      	ldr	r3, [r3, #16]
 801d576:	4322      	orrs	r2, r4
 801d578:	b292      	uxth	r2, r2
 801d57a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801d57c:	4b09      	ldr	r3, [pc, #36]	; (801d5a4 <tcp_receive+0x88c>)
 801d57e:	891c      	ldrh	r4, [r3, #8]
 801d580:	4b08      	ldr	r3, [pc, #32]	; (801d5a4 <tcp_receive+0x88c>)
 801d582:	691b      	ldr	r3, [r3, #16]
 801d584:	899b      	ldrh	r3, [r3, #12]
 801d586:	b29b      	uxth	r3, r3
 801d588:	4618      	mov	r0, r3
 801d58a:	f7f9 ffab 	bl	80174e4 <lwip_htons>
 801d58e:	4603      	mov	r3, r0
 801d590:	b2db      	uxtb	r3, r3
 801d592:	f003 0303 	and.w	r3, r3, #3
 801d596:	2b00      	cmp	r3, #0
 801d598:	d00e      	beq.n	801d5b8 <tcp_receive+0x8a0>
 801d59a:	2301      	movs	r3, #1
 801d59c:	e00d      	b.n	801d5ba <tcp_receive+0x8a2>
 801d59e:	bf00      	nop
 801d5a0:	2007edf4 	.word	0x2007edf4
 801d5a4:	2007edd0 	.word	0x2007edd0
 801d5a8:	2007edfe 	.word	0x2007edfe
 801d5ac:	080278dc 	.word	0x080278dc
 801d5b0:	08027c84 	.word	0x08027c84
 801d5b4:	08027928 	.word	0x08027928
 801d5b8:	2300      	movs	r3, #0
 801d5ba:	4423      	add	r3, r4
 801d5bc:	b29a      	uxth	r2, r3
 801d5be:	4b98      	ldr	r3, [pc, #608]	; (801d820 <tcp_receive+0xb08>)
 801d5c0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801d5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d5c4:	613b      	str	r3, [r7, #16]
              next = next->next;
 801d5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d5c8:	681b      	ldr	r3, [r3, #0]
 801d5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801d5cc:	6938      	ldr	r0, [r7, #16]
 801d5ce:	f7fd fbd2 	bl	801ad76 <tcp_seg_free>
            while (next &&
 801d5d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	d00e      	beq.n	801d5f6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801d5d8:	4b91      	ldr	r3, [pc, #580]	; (801d820 <tcp_receive+0xb08>)
 801d5da:	881b      	ldrh	r3, [r3, #0]
 801d5dc:	461a      	mov	r2, r3
 801d5de:	4b91      	ldr	r3, [pc, #580]	; (801d824 <tcp_receive+0xb0c>)
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	441a      	add	r2, r3
 801d5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d5e6:	691b      	ldr	r3, [r3, #16]
 801d5e8:	685b      	ldr	r3, [r3, #4]
 801d5ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d5ec:	8909      	ldrh	r1, [r1, #8]
 801d5ee:	440b      	add	r3, r1
 801d5f0:	1ad3      	subs	r3, r2, r3
            while (next &&
 801d5f2:	2b00      	cmp	r3, #0
 801d5f4:	da9a      	bge.n	801d52c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801d5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d5f8:	2b00      	cmp	r3, #0
 801d5fa:	d059      	beq.n	801d6b0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801d5fc:	4b88      	ldr	r3, [pc, #544]	; (801d820 <tcp_receive+0xb08>)
 801d5fe:	881b      	ldrh	r3, [r3, #0]
 801d600:	461a      	mov	r2, r3
 801d602:	4b88      	ldr	r3, [pc, #544]	; (801d824 <tcp_receive+0xb0c>)
 801d604:	681b      	ldr	r3, [r3, #0]
 801d606:	441a      	add	r2, r3
 801d608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d60a:	691b      	ldr	r3, [r3, #16]
 801d60c:	685b      	ldr	r3, [r3, #4]
 801d60e:	1ad3      	subs	r3, r2, r3
            if (next &&
 801d610:	2b00      	cmp	r3, #0
 801d612:	dd4d      	ble.n	801d6b0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801d614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d616:	691b      	ldr	r3, [r3, #16]
 801d618:	685b      	ldr	r3, [r3, #4]
 801d61a:	b29a      	uxth	r2, r3
 801d61c:	4b81      	ldr	r3, [pc, #516]	; (801d824 <tcp_receive+0xb0c>)
 801d61e:	681b      	ldr	r3, [r3, #0]
 801d620:	b29b      	uxth	r3, r3
 801d622:	1ad3      	subs	r3, r2, r3
 801d624:	b29a      	uxth	r2, r3
 801d626:	4b80      	ldr	r3, [pc, #512]	; (801d828 <tcp_receive+0xb10>)
 801d628:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d62a:	4b7f      	ldr	r3, [pc, #508]	; (801d828 <tcp_receive+0xb10>)
 801d62c:	691b      	ldr	r3, [r3, #16]
 801d62e:	899b      	ldrh	r3, [r3, #12]
 801d630:	b29b      	uxth	r3, r3
 801d632:	4618      	mov	r0, r3
 801d634:	f7f9 ff56 	bl	80174e4 <lwip_htons>
 801d638:	4603      	mov	r3, r0
 801d63a:	b2db      	uxtb	r3, r3
 801d63c:	f003 0302 	and.w	r3, r3, #2
 801d640:	2b00      	cmp	r3, #0
 801d642:	d005      	beq.n	801d650 <tcp_receive+0x938>
                inseg.len -= 1;
 801d644:	4b78      	ldr	r3, [pc, #480]	; (801d828 <tcp_receive+0xb10>)
 801d646:	891b      	ldrh	r3, [r3, #8]
 801d648:	3b01      	subs	r3, #1
 801d64a:	b29a      	uxth	r2, r3
 801d64c:	4b76      	ldr	r3, [pc, #472]	; (801d828 <tcp_receive+0xb10>)
 801d64e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801d650:	4b75      	ldr	r3, [pc, #468]	; (801d828 <tcp_receive+0xb10>)
 801d652:	685b      	ldr	r3, [r3, #4]
 801d654:	4a74      	ldr	r2, [pc, #464]	; (801d828 <tcp_receive+0xb10>)
 801d656:	8912      	ldrh	r2, [r2, #8]
 801d658:	4611      	mov	r1, r2
 801d65a:	4618      	mov	r0, r3
 801d65c:	f7fb fc5a 	bl	8018f14 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801d660:	4b71      	ldr	r3, [pc, #452]	; (801d828 <tcp_receive+0xb10>)
 801d662:	891c      	ldrh	r4, [r3, #8]
 801d664:	4b70      	ldr	r3, [pc, #448]	; (801d828 <tcp_receive+0xb10>)
 801d666:	691b      	ldr	r3, [r3, #16]
 801d668:	899b      	ldrh	r3, [r3, #12]
 801d66a:	b29b      	uxth	r3, r3
 801d66c:	4618      	mov	r0, r3
 801d66e:	f7f9 ff39 	bl	80174e4 <lwip_htons>
 801d672:	4603      	mov	r3, r0
 801d674:	b2db      	uxtb	r3, r3
 801d676:	f003 0303 	and.w	r3, r3, #3
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d001      	beq.n	801d682 <tcp_receive+0x96a>
 801d67e:	2301      	movs	r3, #1
 801d680:	e000      	b.n	801d684 <tcp_receive+0x96c>
 801d682:	2300      	movs	r3, #0
 801d684:	4423      	add	r3, r4
 801d686:	b29a      	uxth	r2, r3
 801d688:	4b65      	ldr	r3, [pc, #404]	; (801d820 <tcp_receive+0xb08>)
 801d68a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801d68c:	4b64      	ldr	r3, [pc, #400]	; (801d820 <tcp_receive+0xb08>)
 801d68e:	881b      	ldrh	r3, [r3, #0]
 801d690:	461a      	mov	r2, r3
 801d692:	4b64      	ldr	r3, [pc, #400]	; (801d824 <tcp_receive+0xb0c>)
 801d694:	681b      	ldr	r3, [r3, #0]
 801d696:	441a      	add	r2, r3
 801d698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d69a:	691b      	ldr	r3, [r3, #16]
 801d69c:	685b      	ldr	r3, [r3, #4]
 801d69e:	429a      	cmp	r2, r3
 801d6a0:	d006      	beq.n	801d6b0 <tcp_receive+0x998>
 801d6a2:	4b62      	ldr	r3, [pc, #392]	; (801d82c <tcp_receive+0xb14>)
 801d6a4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801d6a8:	4961      	ldr	r1, [pc, #388]	; (801d830 <tcp_receive+0xb18>)
 801d6aa:	4862      	ldr	r0, [pc, #392]	; (801d834 <tcp_receive+0xb1c>)
 801d6ac:	f006 fc8c 	bl	8023fc8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801d6b0:	687b      	ldr	r3, [r7, #4]
 801d6b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d6b4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801d6b6:	4b5a      	ldr	r3, [pc, #360]	; (801d820 <tcp_receive+0xb08>)
 801d6b8:	881b      	ldrh	r3, [r3, #0]
 801d6ba:	461a      	mov	r2, r3
 801d6bc:	4b59      	ldr	r3, [pc, #356]	; (801d824 <tcp_receive+0xb0c>)
 801d6be:	681b      	ldr	r3, [r3, #0]
 801d6c0:	441a      	add	r2, r3
 801d6c2:	687b      	ldr	r3, [r7, #4]
 801d6c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d6c6:	687b      	ldr	r3, [r7, #4]
 801d6c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d6ca:	4b55      	ldr	r3, [pc, #340]	; (801d820 <tcp_receive+0xb08>)
 801d6cc:	881b      	ldrh	r3, [r3, #0]
 801d6ce:	429a      	cmp	r2, r3
 801d6d0:	d206      	bcs.n	801d6e0 <tcp_receive+0x9c8>
 801d6d2:	4b56      	ldr	r3, [pc, #344]	; (801d82c <tcp_receive+0xb14>)
 801d6d4:	f240 6207 	movw	r2, #1543	; 0x607
 801d6d8:	4957      	ldr	r1, [pc, #348]	; (801d838 <tcp_receive+0xb20>)
 801d6da:	4856      	ldr	r0, [pc, #344]	; (801d834 <tcp_receive+0xb1c>)
 801d6dc:	f006 fc74 	bl	8023fc8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d6e4:	4b4e      	ldr	r3, [pc, #312]	; (801d820 <tcp_receive+0xb08>)
 801d6e6:	881b      	ldrh	r3, [r3, #0]
 801d6e8:	1ad3      	subs	r3, r2, r3
 801d6ea:	b29a      	uxth	r2, r3
 801d6ec:	687b      	ldr	r3, [r7, #4]
 801d6ee:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801d6f0:	6878      	ldr	r0, [r7, #4]
 801d6f2:	f7fc fd03 	bl	801a0fc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801d6f6:	4b4c      	ldr	r3, [pc, #304]	; (801d828 <tcp_receive+0xb10>)
 801d6f8:	685b      	ldr	r3, [r3, #4]
 801d6fa:	891b      	ldrh	r3, [r3, #8]
 801d6fc:	2b00      	cmp	r3, #0
 801d6fe:	d006      	beq.n	801d70e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801d700:	4b49      	ldr	r3, [pc, #292]	; (801d828 <tcp_receive+0xb10>)
 801d702:	685b      	ldr	r3, [r3, #4]
 801d704:	4a4d      	ldr	r2, [pc, #308]	; (801d83c <tcp_receive+0xb24>)
 801d706:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801d708:	4b47      	ldr	r3, [pc, #284]	; (801d828 <tcp_receive+0xb10>)
 801d70a:	2200      	movs	r2, #0
 801d70c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d70e:	4b46      	ldr	r3, [pc, #280]	; (801d828 <tcp_receive+0xb10>)
 801d710:	691b      	ldr	r3, [r3, #16]
 801d712:	899b      	ldrh	r3, [r3, #12]
 801d714:	b29b      	uxth	r3, r3
 801d716:	4618      	mov	r0, r3
 801d718:	f7f9 fee4 	bl	80174e4 <lwip_htons>
 801d71c:	4603      	mov	r3, r0
 801d71e:	b2db      	uxtb	r3, r3
 801d720:	f003 0301 	and.w	r3, r3, #1
 801d724:	2b00      	cmp	r3, #0
 801d726:	f000 80b8 	beq.w	801d89a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801d72a:	4b45      	ldr	r3, [pc, #276]	; (801d840 <tcp_receive+0xb28>)
 801d72c:	781b      	ldrb	r3, [r3, #0]
 801d72e:	f043 0320 	orr.w	r3, r3, #32
 801d732:	b2da      	uxtb	r2, r3
 801d734:	4b42      	ldr	r3, [pc, #264]	; (801d840 <tcp_receive+0xb28>)
 801d736:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801d738:	e0af      	b.n	801d89a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d73e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d744:	691b      	ldr	r3, [r3, #16]
 801d746:	685b      	ldr	r3, [r3, #4]
 801d748:	4a36      	ldr	r2, [pc, #216]	; (801d824 <tcp_receive+0xb0c>)
 801d74a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d74c:	68bb      	ldr	r3, [r7, #8]
 801d74e:	891b      	ldrh	r3, [r3, #8]
 801d750:	461c      	mov	r4, r3
 801d752:	68bb      	ldr	r3, [r7, #8]
 801d754:	691b      	ldr	r3, [r3, #16]
 801d756:	899b      	ldrh	r3, [r3, #12]
 801d758:	b29b      	uxth	r3, r3
 801d75a:	4618      	mov	r0, r3
 801d75c:	f7f9 fec2 	bl	80174e4 <lwip_htons>
 801d760:	4603      	mov	r3, r0
 801d762:	b2db      	uxtb	r3, r3
 801d764:	f003 0303 	and.w	r3, r3, #3
 801d768:	2b00      	cmp	r3, #0
 801d76a:	d001      	beq.n	801d770 <tcp_receive+0xa58>
 801d76c:	2301      	movs	r3, #1
 801d76e:	e000      	b.n	801d772 <tcp_receive+0xa5a>
 801d770:	2300      	movs	r3, #0
 801d772:	191a      	adds	r2, r3, r4
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d778:	441a      	add	r2, r3
 801d77a:	687b      	ldr	r3, [r7, #4]
 801d77c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d782:	461c      	mov	r4, r3
 801d784:	68bb      	ldr	r3, [r7, #8]
 801d786:	891b      	ldrh	r3, [r3, #8]
 801d788:	461d      	mov	r5, r3
 801d78a:	68bb      	ldr	r3, [r7, #8]
 801d78c:	691b      	ldr	r3, [r3, #16]
 801d78e:	899b      	ldrh	r3, [r3, #12]
 801d790:	b29b      	uxth	r3, r3
 801d792:	4618      	mov	r0, r3
 801d794:	f7f9 fea6 	bl	80174e4 <lwip_htons>
 801d798:	4603      	mov	r3, r0
 801d79a:	b2db      	uxtb	r3, r3
 801d79c:	f003 0303 	and.w	r3, r3, #3
 801d7a0:	2b00      	cmp	r3, #0
 801d7a2:	d001      	beq.n	801d7a8 <tcp_receive+0xa90>
 801d7a4:	2301      	movs	r3, #1
 801d7a6:	e000      	b.n	801d7aa <tcp_receive+0xa92>
 801d7a8:	2300      	movs	r3, #0
 801d7aa:	442b      	add	r3, r5
 801d7ac:	429c      	cmp	r4, r3
 801d7ae:	d206      	bcs.n	801d7be <tcp_receive+0xaa6>
 801d7b0:	4b1e      	ldr	r3, [pc, #120]	; (801d82c <tcp_receive+0xb14>)
 801d7b2:	f240 622b 	movw	r2, #1579	; 0x62b
 801d7b6:	4923      	ldr	r1, [pc, #140]	; (801d844 <tcp_receive+0xb2c>)
 801d7b8:	481e      	ldr	r0, [pc, #120]	; (801d834 <tcp_receive+0xb1c>)
 801d7ba:	f006 fc05 	bl	8023fc8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801d7be:	68bb      	ldr	r3, [r7, #8]
 801d7c0:	891b      	ldrh	r3, [r3, #8]
 801d7c2:	461c      	mov	r4, r3
 801d7c4:	68bb      	ldr	r3, [r7, #8]
 801d7c6:	691b      	ldr	r3, [r3, #16]
 801d7c8:	899b      	ldrh	r3, [r3, #12]
 801d7ca:	b29b      	uxth	r3, r3
 801d7cc:	4618      	mov	r0, r3
 801d7ce:	f7f9 fe89 	bl	80174e4 <lwip_htons>
 801d7d2:	4603      	mov	r3, r0
 801d7d4:	b2db      	uxtb	r3, r3
 801d7d6:	f003 0303 	and.w	r3, r3, #3
 801d7da:	2b00      	cmp	r3, #0
 801d7dc:	d001      	beq.n	801d7e2 <tcp_receive+0xaca>
 801d7de:	2301      	movs	r3, #1
 801d7e0:	e000      	b.n	801d7e4 <tcp_receive+0xacc>
 801d7e2:	2300      	movs	r3, #0
 801d7e4:	1919      	adds	r1, r3, r4
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d7ea:	b28b      	uxth	r3, r1
 801d7ec:	1ad3      	subs	r3, r2, r3
 801d7ee:	b29a      	uxth	r2, r3
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801d7f4:	6878      	ldr	r0, [r7, #4]
 801d7f6:	f7fc fc81 	bl	801a0fc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801d7fa:	68bb      	ldr	r3, [r7, #8]
 801d7fc:	685b      	ldr	r3, [r3, #4]
 801d7fe:	891b      	ldrh	r3, [r3, #8]
 801d800:	2b00      	cmp	r3, #0
 801d802:	d028      	beq.n	801d856 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801d804:	4b0d      	ldr	r3, [pc, #52]	; (801d83c <tcp_receive+0xb24>)
 801d806:	681b      	ldr	r3, [r3, #0]
 801d808:	2b00      	cmp	r3, #0
 801d80a:	d01d      	beq.n	801d848 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801d80c:	4b0b      	ldr	r3, [pc, #44]	; (801d83c <tcp_receive+0xb24>)
 801d80e:	681a      	ldr	r2, [r3, #0]
 801d810:	68bb      	ldr	r3, [r7, #8]
 801d812:	685b      	ldr	r3, [r3, #4]
 801d814:	4619      	mov	r1, r3
 801d816:	4610      	mov	r0, r2
 801d818:	f7fb fdd0 	bl	80193bc <pbuf_cat>
 801d81c:	e018      	b.n	801d850 <tcp_receive+0xb38>
 801d81e:	bf00      	nop
 801d820:	2007edfe 	.word	0x2007edfe
 801d824:	2007edf4 	.word	0x2007edf4
 801d828:	2007edd0 	.word	0x2007edd0
 801d82c:	080278dc 	.word	0x080278dc
 801d830:	08027cbc 	.word	0x08027cbc
 801d834:	08027928 	.word	0x08027928
 801d838:	08027cf8 	.word	0x08027cf8
 801d83c:	2007ee04 	.word	0x2007ee04
 801d840:	2007ee01 	.word	0x2007ee01
 801d844:	08027d18 	.word	0x08027d18
            } else {
              recv_data = cseg->p;
 801d848:	68bb      	ldr	r3, [r7, #8]
 801d84a:	685b      	ldr	r3, [r3, #4]
 801d84c:	4a70      	ldr	r2, [pc, #448]	; (801da10 <tcp_receive+0xcf8>)
 801d84e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801d850:	68bb      	ldr	r3, [r7, #8]
 801d852:	2200      	movs	r2, #0
 801d854:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d856:	68bb      	ldr	r3, [r7, #8]
 801d858:	691b      	ldr	r3, [r3, #16]
 801d85a:	899b      	ldrh	r3, [r3, #12]
 801d85c:	b29b      	uxth	r3, r3
 801d85e:	4618      	mov	r0, r3
 801d860:	f7f9 fe40 	bl	80174e4 <lwip_htons>
 801d864:	4603      	mov	r3, r0
 801d866:	b2db      	uxtb	r3, r3
 801d868:	f003 0301 	and.w	r3, r3, #1
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	d00d      	beq.n	801d88c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801d870:	4b68      	ldr	r3, [pc, #416]	; (801da14 <tcp_receive+0xcfc>)
 801d872:	781b      	ldrb	r3, [r3, #0]
 801d874:	f043 0320 	orr.w	r3, r3, #32
 801d878:	b2da      	uxtb	r2, r3
 801d87a:	4b66      	ldr	r3, [pc, #408]	; (801da14 <tcp_receive+0xcfc>)
 801d87c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	7d1b      	ldrb	r3, [r3, #20]
 801d882:	2b04      	cmp	r3, #4
 801d884:	d102      	bne.n	801d88c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801d886:	687b      	ldr	r3, [r7, #4]
 801d888:	2207      	movs	r2, #7
 801d88a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801d88c:	68bb      	ldr	r3, [r7, #8]
 801d88e:	681a      	ldr	r2, [r3, #0]
 801d890:	687b      	ldr	r3, [r7, #4]
 801d892:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801d894:	68b8      	ldr	r0, [r7, #8]
 801d896:	f7fd fa6e 	bl	801ad76 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d89e:	2b00      	cmp	r3, #0
 801d8a0:	d008      	beq.n	801d8b4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d8a6:	691b      	ldr	r3, [r3, #16]
 801d8a8:	685a      	ldr	r2, [r3, #4]
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801d8ae:	429a      	cmp	r2, r3
 801d8b0:	f43f af43 	beq.w	801d73a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	8b5b      	ldrh	r3, [r3, #26]
 801d8b8:	f003 0301 	and.w	r3, r3, #1
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	d00e      	beq.n	801d8de <tcp_receive+0xbc6>
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	8b5b      	ldrh	r3, [r3, #26]
 801d8c4:	f023 0301 	bic.w	r3, r3, #1
 801d8c8:	b29a      	uxth	r2, r3
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	835a      	strh	r2, [r3, #26]
 801d8ce:	687b      	ldr	r3, [r7, #4]
 801d8d0:	8b5b      	ldrh	r3, [r3, #26]
 801d8d2:	f043 0302 	orr.w	r3, r3, #2
 801d8d6:	b29a      	uxth	r2, r3
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801d8dc:	e188      	b.n	801dbf0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801d8de:	687b      	ldr	r3, [r7, #4]
 801d8e0:	8b5b      	ldrh	r3, [r3, #26]
 801d8e2:	f043 0301 	orr.w	r3, r3, #1
 801d8e6:	b29a      	uxth	r2, r3
 801d8e8:	687b      	ldr	r3, [r7, #4]
 801d8ea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801d8ec:	e180      	b.n	801dbf0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801d8ee:	687b      	ldr	r3, [r7, #4]
 801d8f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d8f2:	2b00      	cmp	r3, #0
 801d8f4:	d106      	bne.n	801d904 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801d8f6:	4848      	ldr	r0, [pc, #288]	; (801da18 <tcp_receive+0xd00>)
 801d8f8:	f7fd fa56 	bl	801ada8 <tcp_seg_copy>
 801d8fc:	4602      	mov	r2, r0
 801d8fe:	687b      	ldr	r3, [r7, #4]
 801d900:	675a      	str	r2, [r3, #116]	; 0x74
 801d902:	e16d      	b.n	801dbe0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801d904:	2300      	movs	r3, #0
 801d906:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d90c:	63bb      	str	r3, [r7, #56]	; 0x38
 801d90e:	e157      	b.n	801dbc0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801d910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d912:	691b      	ldr	r3, [r3, #16]
 801d914:	685a      	ldr	r2, [r3, #4]
 801d916:	4b41      	ldr	r3, [pc, #260]	; (801da1c <tcp_receive+0xd04>)
 801d918:	681b      	ldr	r3, [r3, #0]
 801d91a:	429a      	cmp	r2, r3
 801d91c:	d11d      	bne.n	801d95a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801d91e:	4b3e      	ldr	r3, [pc, #248]	; (801da18 <tcp_receive+0xd00>)
 801d920:	891a      	ldrh	r2, [r3, #8]
 801d922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d924:	891b      	ldrh	r3, [r3, #8]
 801d926:	429a      	cmp	r2, r3
 801d928:	f240 814f 	bls.w	801dbca <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d92c:	483a      	ldr	r0, [pc, #232]	; (801da18 <tcp_receive+0xd00>)
 801d92e:	f7fd fa3b 	bl	801ada8 <tcp_seg_copy>
 801d932:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801d934:	697b      	ldr	r3, [r7, #20]
 801d936:	2b00      	cmp	r3, #0
 801d938:	f000 8149 	beq.w	801dbce <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801d93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d93e:	2b00      	cmp	r3, #0
 801d940:	d003      	beq.n	801d94a <tcp_receive+0xc32>
                    prev->next = cseg;
 801d942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d944:	697a      	ldr	r2, [r7, #20]
 801d946:	601a      	str	r2, [r3, #0]
 801d948:	e002      	b.n	801d950 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801d94a:	687b      	ldr	r3, [r7, #4]
 801d94c:	697a      	ldr	r2, [r7, #20]
 801d94e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801d950:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d952:	6978      	ldr	r0, [r7, #20]
 801d954:	f7ff f8dc 	bl	801cb10 <tcp_oos_insert_segment>
                }
                break;
 801d958:	e139      	b.n	801dbce <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801d95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	d117      	bne.n	801d990 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801d960:	4b2e      	ldr	r3, [pc, #184]	; (801da1c <tcp_receive+0xd04>)
 801d962:	681a      	ldr	r2, [r3, #0]
 801d964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d966:	691b      	ldr	r3, [r3, #16]
 801d968:	685b      	ldr	r3, [r3, #4]
 801d96a:	1ad3      	subs	r3, r2, r3
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	da57      	bge.n	801da20 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d970:	4829      	ldr	r0, [pc, #164]	; (801da18 <tcp_receive+0xd00>)
 801d972:	f7fd fa19 	bl	801ada8 <tcp_seg_copy>
 801d976:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801d978:	69bb      	ldr	r3, [r7, #24]
 801d97a:	2b00      	cmp	r3, #0
 801d97c:	f000 8129 	beq.w	801dbd2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801d980:	687b      	ldr	r3, [r7, #4]
 801d982:	69ba      	ldr	r2, [r7, #24]
 801d984:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801d986:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d988:	69b8      	ldr	r0, [r7, #24]
 801d98a:	f7ff f8c1 	bl	801cb10 <tcp_oos_insert_segment>
                  }
                  break;
 801d98e:	e120      	b.n	801dbd2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801d990:	4b22      	ldr	r3, [pc, #136]	; (801da1c <tcp_receive+0xd04>)
 801d992:	681a      	ldr	r2, [r3, #0]
 801d994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d996:	691b      	ldr	r3, [r3, #16]
 801d998:	685b      	ldr	r3, [r3, #4]
 801d99a:	1ad3      	subs	r3, r2, r3
 801d99c:	3b01      	subs	r3, #1
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	db3e      	blt.n	801da20 <tcp_receive+0xd08>
 801d9a2:	4b1e      	ldr	r3, [pc, #120]	; (801da1c <tcp_receive+0xd04>)
 801d9a4:	681a      	ldr	r2, [r3, #0]
 801d9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9a8:	691b      	ldr	r3, [r3, #16]
 801d9aa:	685b      	ldr	r3, [r3, #4]
 801d9ac:	1ad3      	subs	r3, r2, r3
 801d9ae:	3301      	adds	r3, #1
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	dc35      	bgt.n	801da20 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d9b4:	4818      	ldr	r0, [pc, #96]	; (801da18 <tcp_receive+0xd00>)
 801d9b6:	f7fd f9f7 	bl	801ada8 <tcp_seg_copy>
 801d9ba:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801d9bc:	69fb      	ldr	r3, [r7, #28]
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	f000 8109 	beq.w	801dbd6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801d9c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9c6:	691b      	ldr	r3, [r3, #16]
 801d9c8:	685b      	ldr	r3, [r3, #4]
 801d9ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d9cc:	8912      	ldrh	r2, [r2, #8]
 801d9ce:	441a      	add	r2, r3
 801d9d0:	4b12      	ldr	r3, [pc, #72]	; (801da1c <tcp_receive+0xd04>)
 801d9d2:	681b      	ldr	r3, [r3, #0]
 801d9d4:	1ad3      	subs	r3, r2, r3
 801d9d6:	2b00      	cmp	r3, #0
 801d9d8:	dd12      	ble.n	801da00 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801d9da:	4b10      	ldr	r3, [pc, #64]	; (801da1c <tcp_receive+0xd04>)
 801d9dc:	681b      	ldr	r3, [r3, #0]
 801d9de:	b29a      	uxth	r2, r3
 801d9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9e2:	691b      	ldr	r3, [r3, #16]
 801d9e4:	685b      	ldr	r3, [r3, #4]
 801d9e6:	b29b      	uxth	r3, r3
 801d9e8:	1ad3      	subs	r3, r2, r3
 801d9ea:	b29a      	uxth	r2, r3
 801d9ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9ee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801d9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9f2:	685a      	ldr	r2, [r3, #4]
 801d9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9f6:	891b      	ldrh	r3, [r3, #8]
 801d9f8:	4619      	mov	r1, r3
 801d9fa:	4610      	mov	r0, r2
 801d9fc:	f7fb fa8a 	bl	8018f14 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801da00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da02:	69fa      	ldr	r2, [r7, #28]
 801da04:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801da06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801da08:	69f8      	ldr	r0, [r7, #28]
 801da0a:	f7ff f881 	bl	801cb10 <tcp_oos_insert_segment>
                  }
                  break;
 801da0e:	e0e2      	b.n	801dbd6 <tcp_receive+0xebe>
 801da10:	2007ee04 	.word	0x2007ee04
 801da14:	2007ee01 	.word	0x2007ee01
 801da18:	2007edd0 	.word	0x2007edd0
 801da1c:	2007edf4 	.word	0x2007edf4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801da20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da22:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801da24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da26:	681b      	ldr	r3, [r3, #0]
 801da28:	2b00      	cmp	r3, #0
 801da2a:	f040 80c6 	bne.w	801dbba <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801da2e:	4b80      	ldr	r3, [pc, #512]	; (801dc30 <tcp_receive+0xf18>)
 801da30:	681a      	ldr	r2, [r3, #0]
 801da32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da34:	691b      	ldr	r3, [r3, #16]
 801da36:	685b      	ldr	r3, [r3, #4]
 801da38:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801da3a:	2b00      	cmp	r3, #0
 801da3c:	f340 80bd 	ble.w	801dbba <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801da40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da42:	691b      	ldr	r3, [r3, #16]
 801da44:	899b      	ldrh	r3, [r3, #12]
 801da46:	b29b      	uxth	r3, r3
 801da48:	4618      	mov	r0, r3
 801da4a:	f7f9 fd4b 	bl	80174e4 <lwip_htons>
 801da4e:	4603      	mov	r3, r0
 801da50:	b2db      	uxtb	r3, r3
 801da52:	f003 0301 	and.w	r3, r3, #1
 801da56:	2b00      	cmp	r3, #0
 801da58:	f040 80bf 	bne.w	801dbda <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801da5c:	4875      	ldr	r0, [pc, #468]	; (801dc34 <tcp_receive+0xf1c>)
 801da5e:	f7fd f9a3 	bl	801ada8 <tcp_seg_copy>
 801da62:	4602      	mov	r2, r0
 801da64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da66:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801da68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da6a:	681b      	ldr	r3, [r3, #0]
 801da6c:	2b00      	cmp	r3, #0
 801da6e:	f000 80b6 	beq.w	801dbde <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801da72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da74:	691b      	ldr	r3, [r3, #16]
 801da76:	685b      	ldr	r3, [r3, #4]
 801da78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801da7a:	8912      	ldrh	r2, [r2, #8]
 801da7c:	441a      	add	r2, r3
 801da7e:	4b6c      	ldr	r3, [pc, #432]	; (801dc30 <tcp_receive+0xf18>)
 801da80:	681b      	ldr	r3, [r3, #0]
 801da82:	1ad3      	subs	r3, r2, r3
 801da84:	2b00      	cmp	r3, #0
 801da86:	dd12      	ble.n	801daae <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801da88:	4b69      	ldr	r3, [pc, #420]	; (801dc30 <tcp_receive+0xf18>)
 801da8a:	681b      	ldr	r3, [r3, #0]
 801da8c:	b29a      	uxth	r2, r3
 801da8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da90:	691b      	ldr	r3, [r3, #16]
 801da92:	685b      	ldr	r3, [r3, #4]
 801da94:	b29b      	uxth	r3, r3
 801da96:	1ad3      	subs	r3, r2, r3
 801da98:	b29a      	uxth	r2, r3
 801da9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da9c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801da9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801daa0:	685a      	ldr	r2, [r3, #4]
 801daa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801daa4:	891b      	ldrh	r3, [r3, #8]
 801daa6:	4619      	mov	r1, r3
 801daa8:	4610      	mov	r0, r2
 801daaa:	f7fb fa33 	bl	8018f14 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801daae:	4b62      	ldr	r3, [pc, #392]	; (801dc38 <tcp_receive+0xf20>)
 801dab0:	881b      	ldrh	r3, [r3, #0]
 801dab2:	461a      	mov	r2, r3
 801dab4:	4b5e      	ldr	r3, [pc, #376]	; (801dc30 <tcp_receive+0xf18>)
 801dab6:	681b      	ldr	r3, [r3, #0]
 801dab8:	441a      	add	r2, r3
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dabe:	6879      	ldr	r1, [r7, #4]
 801dac0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801dac2:	440b      	add	r3, r1
 801dac4:	1ad3      	subs	r3, r2, r3
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	f340 8089 	ble.w	801dbde <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801dacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dace:	681b      	ldr	r3, [r3, #0]
 801dad0:	691b      	ldr	r3, [r3, #16]
 801dad2:	899b      	ldrh	r3, [r3, #12]
 801dad4:	b29b      	uxth	r3, r3
 801dad6:	4618      	mov	r0, r3
 801dad8:	f7f9 fd04 	bl	80174e4 <lwip_htons>
 801dadc:	4603      	mov	r3, r0
 801dade:	b2db      	uxtb	r3, r3
 801dae0:	f003 0301 	and.w	r3, r3, #1
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d022      	beq.n	801db2e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801dae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801daea:	681b      	ldr	r3, [r3, #0]
 801daec:	691b      	ldr	r3, [r3, #16]
 801daee:	899b      	ldrh	r3, [r3, #12]
 801daf0:	b29b      	uxth	r3, r3
 801daf2:	b21b      	sxth	r3, r3
 801daf4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801daf8:	b21c      	sxth	r4, r3
 801dafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dafc:	681b      	ldr	r3, [r3, #0]
 801dafe:	691b      	ldr	r3, [r3, #16]
 801db00:	899b      	ldrh	r3, [r3, #12]
 801db02:	b29b      	uxth	r3, r3
 801db04:	4618      	mov	r0, r3
 801db06:	f7f9 fced 	bl	80174e4 <lwip_htons>
 801db0a:	4603      	mov	r3, r0
 801db0c:	b2db      	uxtb	r3, r3
 801db0e:	b29b      	uxth	r3, r3
 801db10:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801db14:	b29b      	uxth	r3, r3
 801db16:	4618      	mov	r0, r3
 801db18:	f7f9 fce4 	bl	80174e4 <lwip_htons>
 801db1c:	4603      	mov	r3, r0
 801db1e:	b21b      	sxth	r3, r3
 801db20:	4323      	orrs	r3, r4
 801db22:	b21a      	sxth	r2, r3
 801db24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db26:	681b      	ldr	r3, [r3, #0]
 801db28:	691b      	ldr	r3, [r3, #16]
 801db2a:	b292      	uxth	r2, r2
 801db2c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801db2e:	687b      	ldr	r3, [r7, #4]
 801db30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db32:	b29a      	uxth	r2, r3
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801db38:	4413      	add	r3, r2
 801db3a:	b299      	uxth	r1, r3
 801db3c:	4b3c      	ldr	r3, [pc, #240]	; (801dc30 <tcp_receive+0xf18>)
 801db3e:	681b      	ldr	r3, [r3, #0]
 801db40:	b29a      	uxth	r2, r3
 801db42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db44:	681b      	ldr	r3, [r3, #0]
 801db46:	1a8a      	subs	r2, r1, r2
 801db48:	b292      	uxth	r2, r2
 801db4a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801db4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db4e:	681b      	ldr	r3, [r3, #0]
 801db50:	685a      	ldr	r2, [r3, #4]
 801db52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db54:	681b      	ldr	r3, [r3, #0]
 801db56:	891b      	ldrh	r3, [r3, #8]
 801db58:	4619      	mov	r1, r3
 801db5a:	4610      	mov	r0, r2
 801db5c:	f7fb f9da 	bl	8018f14 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801db60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db62:	681b      	ldr	r3, [r3, #0]
 801db64:	891c      	ldrh	r4, [r3, #8]
 801db66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db68:	681b      	ldr	r3, [r3, #0]
 801db6a:	691b      	ldr	r3, [r3, #16]
 801db6c:	899b      	ldrh	r3, [r3, #12]
 801db6e:	b29b      	uxth	r3, r3
 801db70:	4618      	mov	r0, r3
 801db72:	f7f9 fcb7 	bl	80174e4 <lwip_htons>
 801db76:	4603      	mov	r3, r0
 801db78:	b2db      	uxtb	r3, r3
 801db7a:	f003 0303 	and.w	r3, r3, #3
 801db7e:	2b00      	cmp	r3, #0
 801db80:	d001      	beq.n	801db86 <tcp_receive+0xe6e>
 801db82:	2301      	movs	r3, #1
 801db84:	e000      	b.n	801db88 <tcp_receive+0xe70>
 801db86:	2300      	movs	r3, #0
 801db88:	4423      	add	r3, r4
 801db8a:	b29a      	uxth	r2, r3
 801db8c:	4b2a      	ldr	r3, [pc, #168]	; (801dc38 <tcp_receive+0xf20>)
 801db8e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801db90:	4b29      	ldr	r3, [pc, #164]	; (801dc38 <tcp_receive+0xf20>)
 801db92:	881b      	ldrh	r3, [r3, #0]
 801db94:	461a      	mov	r2, r3
 801db96:	4b26      	ldr	r3, [pc, #152]	; (801dc30 <tcp_receive+0xf18>)
 801db98:	681b      	ldr	r3, [r3, #0]
 801db9a:	441a      	add	r2, r3
 801db9c:	687b      	ldr	r3, [r7, #4]
 801db9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dba0:	6879      	ldr	r1, [r7, #4]
 801dba2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801dba4:	440b      	add	r3, r1
 801dba6:	429a      	cmp	r2, r3
 801dba8:	d019      	beq.n	801dbde <tcp_receive+0xec6>
 801dbaa:	4b24      	ldr	r3, [pc, #144]	; (801dc3c <tcp_receive+0xf24>)
 801dbac:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801dbb0:	4923      	ldr	r1, [pc, #140]	; (801dc40 <tcp_receive+0xf28>)
 801dbb2:	4824      	ldr	r0, [pc, #144]	; (801dc44 <tcp_receive+0xf2c>)
 801dbb4:	f006 fa08 	bl	8023fc8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801dbb8:	e011      	b.n	801dbde <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801dbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbbc:	681b      	ldr	r3, [r3, #0]
 801dbbe:	63bb      	str	r3, [r7, #56]	; 0x38
 801dbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbc2:	2b00      	cmp	r3, #0
 801dbc4:	f47f aea4 	bne.w	801d910 <tcp_receive+0xbf8>
 801dbc8:	e00a      	b.n	801dbe0 <tcp_receive+0xec8>
                break;
 801dbca:	bf00      	nop
 801dbcc:	e008      	b.n	801dbe0 <tcp_receive+0xec8>
                break;
 801dbce:	bf00      	nop
 801dbd0:	e006      	b.n	801dbe0 <tcp_receive+0xec8>
                  break;
 801dbd2:	bf00      	nop
 801dbd4:	e004      	b.n	801dbe0 <tcp_receive+0xec8>
                  break;
 801dbd6:	bf00      	nop
 801dbd8:	e002      	b.n	801dbe0 <tcp_receive+0xec8>
                  break;
 801dbda:	bf00      	nop
 801dbdc:	e000      	b.n	801dbe0 <tcp_receive+0xec8>
                break;
 801dbde:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801dbe0:	6878      	ldr	r0, [r7, #4]
 801dbe2:	f001 ff45 	bl	801fa70 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801dbe6:	e003      	b.n	801dbf0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801dbe8:	6878      	ldr	r0, [r7, #4]
 801dbea:	f001 ff41 	bl	801fa70 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801dbee:	e01a      	b.n	801dc26 <tcp_receive+0xf0e>
 801dbf0:	e019      	b.n	801dc26 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801dbf2:	4b0f      	ldr	r3, [pc, #60]	; (801dc30 <tcp_receive+0xf18>)
 801dbf4:	681a      	ldr	r2, [r3, #0]
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dbfa:	1ad3      	subs	r3, r2, r3
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	db0a      	blt.n	801dc16 <tcp_receive+0xefe>
 801dc00:	4b0b      	ldr	r3, [pc, #44]	; (801dc30 <tcp_receive+0xf18>)
 801dc02:	681a      	ldr	r2, [r3, #0]
 801dc04:	687b      	ldr	r3, [r7, #4]
 801dc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc08:	6879      	ldr	r1, [r7, #4]
 801dc0a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801dc0c:	440b      	add	r3, r1
 801dc0e:	1ad3      	subs	r3, r2, r3
 801dc10:	3301      	adds	r3, #1
 801dc12:	2b00      	cmp	r3, #0
 801dc14:	dd07      	ble.n	801dc26 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801dc16:	687b      	ldr	r3, [r7, #4]
 801dc18:	8b5b      	ldrh	r3, [r3, #26]
 801dc1a:	f043 0302 	orr.w	r3, r3, #2
 801dc1e:	b29a      	uxth	r2, r3
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801dc24:	e7ff      	b.n	801dc26 <tcp_receive+0xf0e>
 801dc26:	bf00      	nop
 801dc28:	3750      	adds	r7, #80	; 0x50
 801dc2a:	46bd      	mov	sp, r7
 801dc2c:	bdb0      	pop	{r4, r5, r7, pc}
 801dc2e:	bf00      	nop
 801dc30:	2007edf4 	.word	0x2007edf4
 801dc34:	2007edd0 	.word	0x2007edd0
 801dc38:	2007edfe 	.word	0x2007edfe
 801dc3c:	080278dc 	.word	0x080278dc
 801dc40:	08027c84 	.word	0x08027c84
 801dc44:	08027928 	.word	0x08027928

0801dc48 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801dc48:	b480      	push	{r7}
 801dc4a:	b083      	sub	sp, #12
 801dc4c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801dc4e:	4b15      	ldr	r3, [pc, #84]	; (801dca4 <tcp_get_next_optbyte+0x5c>)
 801dc50:	881b      	ldrh	r3, [r3, #0]
 801dc52:	1c5a      	adds	r2, r3, #1
 801dc54:	b291      	uxth	r1, r2
 801dc56:	4a13      	ldr	r2, [pc, #76]	; (801dca4 <tcp_get_next_optbyte+0x5c>)
 801dc58:	8011      	strh	r1, [r2, #0]
 801dc5a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801dc5c:	4b12      	ldr	r3, [pc, #72]	; (801dca8 <tcp_get_next_optbyte+0x60>)
 801dc5e:	681b      	ldr	r3, [r3, #0]
 801dc60:	2b00      	cmp	r3, #0
 801dc62:	d004      	beq.n	801dc6e <tcp_get_next_optbyte+0x26>
 801dc64:	4b11      	ldr	r3, [pc, #68]	; (801dcac <tcp_get_next_optbyte+0x64>)
 801dc66:	881b      	ldrh	r3, [r3, #0]
 801dc68:	88fa      	ldrh	r2, [r7, #6]
 801dc6a:	429a      	cmp	r2, r3
 801dc6c:	d208      	bcs.n	801dc80 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801dc6e:	4b10      	ldr	r3, [pc, #64]	; (801dcb0 <tcp_get_next_optbyte+0x68>)
 801dc70:	681b      	ldr	r3, [r3, #0]
 801dc72:	3314      	adds	r3, #20
 801dc74:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801dc76:	88fb      	ldrh	r3, [r7, #6]
 801dc78:	683a      	ldr	r2, [r7, #0]
 801dc7a:	4413      	add	r3, r2
 801dc7c:	781b      	ldrb	r3, [r3, #0]
 801dc7e:	e00b      	b.n	801dc98 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801dc80:	88fb      	ldrh	r3, [r7, #6]
 801dc82:	b2da      	uxtb	r2, r3
 801dc84:	4b09      	ldr	r3, [pc, #36]	; (801dcac <tcp_get_next_optbyte+0x64>)
 801dc86:	881b      	ldrh	r3, [r3, #0]
 801dc88:	b2db      	uxtb	r3, r3
 801dc8a:	1ad3      	subs	r3, r2, r3
 801dc8c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801dc8e:	4b06      	ldr	r3, [pc, #24]	; (801dca8 <tcp_get_next_optbyte+0x60>)
 801dc90:	681a      	ldr	r2, [r3, #0]
 801dc92:	797b      	ldrb	r3, [r7, #5]
 801dc94:	4413      	add	r3, r2
 801dc96:	781b      	ldrb	r3, [r3, #0]
  }
}
 801dc98:	4618      	mov	r0, r3
 801dc9a:	370c      	adds	r7, #12
 801dc9c:	46bd      	mov	sp, r7
 801dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dca2:	4770      	bx	lr
 801dca4:	2007edf0 	.word	0x2007edf0
 801dca8:	2007edec 	.word	0x2007edec
 801dcac:	2007edea 	.word	0x2007edea
 801dcb0:	2007ede4 	.word	0x2007ede4

0801dcb4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801dcb4:	b580      	push	{r7, lr}
 801dcb6:	b084      	sub	sp, #16
 801dcb8:	af00      	add	r7, sp, #0
 801dcba:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	2b00      	cmp	r3, #0
 801dcc0:	d106      	bne.n	801dcd0 <tcp_parseopt+0x1c>
 801dcc2:	4b32      	ldr	r3, [pc, #200]	; (801dd8c <tcp_parseopt+0xd8>)
 801dcc4:	f240 727d 	movw	r2, #1917	; 0x77d
 801dcc8:	4931      	ldr	r1, [pc, #196]	; (801dd90 <tcp_parseopt+0xdc>)
 801dcca:	4832      	ldr	r0, [pc, #200]	; (801dd94 <tcp_parseopt+0xe0>)
 801dccc:	f006 f97c 	bl	8023fc8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801dcd0:	4b31      	ldr	r3, [pc, #196]	; (801dd98 <tcp_parseopt+0xe4>)
 801dcd2:	881b      	ldrh	r3, [r3, #0]
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	d055      	beq.n	801dd84 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801dcd8:	4b30      	ldr	r3, [pc, #192]	; (801dd9c <tcp_parseopt+0xe8>)
 801dcda:	2200      	movs	r2, #0
 801dcdc:	801a      	strh	r2, [r3, #0]
 801dcde:	e045      	b.n	801dd6c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801dce0:	f7ff ffb2 	bl	801dc48 <tcp_get_next_optbyte>
 801dce4:	4603      	mov	r3, r0
 801dce6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801dce8:	7bfb      	ldrb	r3, [r7, #15]
 801dcea:	2b02      	cmp	r3, #2
 801dcec:	d006      	beq.n	801dcfc <tcp_parseopt+0x48>
 801dcee:	2b02      	cmp	r3, #2
 801dcf0:	dc2b      	bgt.n	801dd4a <tcp_parseopt+0x96>
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	d041      	beq.n	801dd7a <tcp_parseopt+0xc6>
 801dcf6:	2b01      	cmp	r3, #1
 801dcf8:	d127      	bne.n	801dd4a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801dcfa:	e037      	b.n	801dd6c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801dcfc:	f7ff ffa4 	bl	801dc48 <tcp_get_next_optbyte>
 801dd00:	4603      	mov	r3, r0
 801dd02:	2b04      	cmp	r3, #4
 801dd04:	d13b      	bne.n	801dd7e <tcp_parseopt+0xca>
 801dd06:	4b25      	ldr	r3, [pc, #148]	; (801dd9c <tcp_parseopt+0xe8>)
 801dd08:	881b      	ldrh	r3, [r3, #0]
 801dd0a:	3301      	adds	r3, #1
 801dd0c:	4a22      	ldr	r2, [pc, #136]	; (801dd98 <tcp_parseopt+0xe4>)
 801dd0e:	8812      	ldrh	r2, [r2, #0]
 801dd10:	4293      	cmp	r3, r2
 801dd12:	da34      	bge.n	801dd7e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801dd14:	f7ff ff98 	bl	801dc48 <tcp_get_next_optbyte>
 801dd18:	4603      	mov	r3, r0
 801dd1a:	b29b      	uxth	r3, r3
 801dd1c:	021b      	lsls	r3, r3, #8
 801dd1e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801dd20:	f7ff ff92 	bl	801dc48 <tcp_get_next_optbyte>
 801dd24:	4603      	mov	r3, r0
 801dd26:	b29a      	uxth	r2, r3
 801dd28:	89bb      	ldrh	r3, [r7, #12]
 801dd2a:	4313      	orrs	r3, r2
 801dd2c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801dd2e:	89bb      	ldrh	r3, [r7, #12]
 801dd30:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801dd34:	d804      	bhi.n	801dd40 <tcp_parseopt+0x8c>
 801dd36:	89bb      	ldrh	r3, [r7, #12]
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d001      	beq.n	801dd40 <tcp_parseopt+0x8c>
 801dd3c:	89ba      	ldrh	r2, [r7, #12]
 801dd3e:	e001      	b.n	801dd44 <tcp_parseopt+0x90>
 801dd40:	f44f 7206 	mov.w	r2, #536	; 0x218
 801dd44:	687b      	ldr	r3, [r7, #4]
 801dd46:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801dd48:	e010      	b.n	801dd6c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801dd4a:	f7ff ff7d 	bl	801dc48 <tcp_get_next_optbyte>
 801dd4e:	4603      	mov	r3, r0
 801dd50:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801dd52:	7afb      	ldrb	r3, [r7, #11]
 801dd54:	2b01      	cmp	r3, #1
 801dd56:	d914      	bls.n	801dd82 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801dd58:	7afb      	ldrb	r3, [r7, #11]
 801dd5a:	b29a      	uxth	r2, r3
 801dd5c:	4b0f      	ldr	r3, [pc, #60]	; (801dd9c <tcp_parseopt+0xe8>)
 801dd5e:	881b      	ldrh	r3, [r3, #0]
 801dd60:	4413      	add	r3, r2
 801dd62:	b29b      	uxth	r3, r3
 801dd64:	3b02      	subs	r3, #2
 801dd66:	b29a      	uxth	r2, r3
 801dd68:	4b0c      	ldr	r3, [pc, #48]	; (801dd9c <tcp_parseopt+0xe8>)
 801dd6a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801dd6c:	4b0b      	ldr	r3, [pc, #44]	; (801dd9c <tcp_parseopt+0xe8>)
 801dd6e:	881a      	ldrh	r2, [r3, #0]
 801dd70:	4b09      	ldr	r3, [pc, #36]	; (801dd98 <tcp_parseopt+0xe4>)
 801dd72:	881b      	ldrh	r3, [r3, #0]
 801dd74:	429a      	cmp	r2, r3
 801dd76:	d3b3      	bcc.n	801dce0 <tcp_parseopt+0x2c>
 801dd78:	e004      	b.n	801dd84 <tcp_parseopt+0xd0>
          return;
 801dd7a:	bf00      	nop
 801dd7c:	e002      	b.n	801dd84 <tcp_parseopt+0xd0>
            return;
 801dd7e:	bf00      	nop
 801dd80:	e000      	b.n	801dd84 <tcp_parseopt+0xd0>
            return;
 801dd82:	bf00      	nop
      }
    }
  }
}
 801dd84:	3710      	adds	r7, #16
 801dd86:	46bd      	mov	sp, r7
 801dd88:	bd80      	pop	{r7, pc}
 801dd8a:	bf00      	nop
 801dd8c:	080278dc 	.word	0x080278dc
 801dd90:	08027d40 	.word	0x08027d40
 801dd94:	08027928 	.word	0x08027928
 801dd98:	2007ede8 	.word	0x2007ede8
 801dd9c:	2007edf0 	.word	0x2007edf0

0801dda0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801dda0:	b480      	push	{r7}
 801dda2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801dda4:	4b05      	ldr	r3, [pc, #20]	; (801ddbc <tcp_trigger_input_pcb_close+0x1c>)
 801dda6:	781b      	ldrb	r3, [r3, #0]
 801dda8:	f043 0310 	orr.w	r3, r3, #16
 801ddac:	b2da      	uxtb	r2, r3
 801ddae:	4b03      	ldr	r3, [pc, #12]	; (801ddbc <tcp_trigger_input_pcb_close+0x1c>)
 801ddb0:	701a      	strb	r2, [r3, #0]
}
 801ddb2:	bf00      	nop
 801ddb4:	46bd      	mov	sp, r7
 801ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddba:	4770      	bx	lr
 801ddbc:	2007ee01 	.word	0x2007ee01

0801ddc0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801ddc0:	b580      	push	{r7, lr}
 801ddc2:	b084      	sub	sp, #16
 801ddc4:	af00      	add	r7, sp, #0
 801ddc6:	60f8      	str	r0, [r7, #12]
 801ddc8:	60b9      	str	r1, [r7, #8]
 801ddca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801ddcc:	68fb      	ldr	r3, [r7, #12]
 801ddce:	2b00      	cmp	r3, #0
 801ddd0:	d00a      	beq.n	801dde8 <tcp_route+0x28>
 801ddd2:	68fb      	ldr	r3, [r7, #12]
 801ddd4:	7a1b      	ldrb	r3, [r3, #8]
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	d006      	beq.n	801dde8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801ddda:	68fb      	ldr	r3, [r7, #12]
 801dddc:	7a1b      	ldrb	r3, [r3, #8]
 801ddde:	4618      	mov	r0, r3
 801dde0:	f7fa fe90 	bl	8018b04 <netif_get_by_index>
 801dde4:	4603      	mov	r3, r0
 801dde6:	e003      	b.n	801ddf0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801dde8:	6878      	ldr	r0, [r7, #4]
 801ddea:	f004 f8a1 	bl	8021f30 <ip4_route>
 801ddee:	4603      	mov	r3, r0
  }
}
 801ddf0:	4618      	mov	r0, r3
 801ddf2:	3710      	adds	r7, #16
 801ddf4:	46bd      	mov	sp, r7
 801ddf6:	bd80      	pop	{r7, pc}

0801ddf8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801ddf8:	b590      	push	{r4, r7, lr}
 801ddfa:	b087      	sub	sp, #28
 801ddfc:	af00      	add	r7, sp, #0
 801ddfe:	60f8      	str	r0, [r7, #12]
 801de00:	60b9      	str	r1, [r7, #8]
 801de02:	603b      	str	r3, [r7, #0]
 801de04:	4613      	mov	r3, r2
 801de06:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801de08:	68fb      	ldr	r3, [r7, #12]
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	d105      	bne.n	801de1a <tcp_create_segment+0x22>
 801de0e:	4b49      	ldr	r3, [pc, #292]	; (801df34 <tcp_create_segment+0x13c>)
 801de10:	22a3      	movs	r2, #163	; 0xa3
 801de12:	4949      	ldr	r1, [pc, #292]	; (801df38 <tcp_create_segment+0x140>)
 801de14:	4849      	ldr	r0, [pc, #292]	; (801df3c <tcp_create_segment+0x144>)
 801de16:	f006 f8d7 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801de1a:	68bb      	ldr	r3, [r7, #8]
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	d105      	bne.n	801de2c <tcp_create_segment+0x34>
 801de20:	4b44      	ldr	r3, [pc, #272]	; (801df34 <tcp_create_segment+0x13c>)
 801de22:	22a4      	movs	r2, #164	; 0xa4
 801de24:	4946      	ldr	r1, [pc, #280]	; (801df40 <tcp_create_segment+0x148>)
 801de26:	4845      	ldr	r0, [pc, #276]	; (801df3c <tcp_create_segment+0x144>)
 801de28:	f006 f8ce 	bl	8023fc8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801de2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801de30:	009b      	lsls	r3, r3, #2
 801de32:	b2db      	uxtb	r3, r3
 801de34:	f003 0304 	and.w	r3, r3, #4
 801de38:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801de3a:	2003      	movs	r0, #3
 801de3c:	f7fa f9da 	bl	80181f4 <memp_malloc>
 801de40:	6138      	str	r0, [r7, #16]
 801de42:	693b      	ldr	r3, [r7, #16]
 801de44:	2b00      	cmp	r3, #0
 801de46:	d104      	bne.n	801de52 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801de48:	68b8      	ldr	r0, [r7, #8]
 801de4a:	f7fb f9e9 	bl	8019220 <pbuf_free>
    return NULL;
 801de4e:	2300      	movs	r3, #0
 801de50:	e06c      	b.n	801df2c <tcp_create_segment+0x134>
  }
  seg->flags = optflags;
 801de52:	693b      	ldr	r3, [r7, #16]
 801de54:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801de58:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 801de5a:	693b      	ldr	r3, [r7, #16]
 801de5c:	2200      	movs	r2, #0
 801de5e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801de60:	693b      	ldr	r3, [r7, #16]
 801de62:	68ba      	ldr	r2, [r7, #8]
 801de64:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801de66:	68bb      	ldr	r3, [r7, #8]
 801de68:	891a      	ldrh	r2, [r3, #8]
 801de6a:	7dfb      	ldrb	r3, [r7, #23]
 801de6c:	b29b      	uxth	r3, r3
 801de6e:	429a      	cmp	r2, r3
 801de70:	d205      	bcs.n	801de7e <tcp_create_segment+0x86>
 801de72:	4b30      	ldr	r3, [pc, #192]	; (801df34 <tcp_create_segment+0x13c>)
 801de74:	22b0      	movs	r2, #176	; 0xb0
 801de76:	4933      	ldr	r1, [pc, #204]	; (801df44 <tcp_create_segment+0x14c>)
 801de78:	4830      	ldr	r0, [pc, #192]	; (801df3c <tcp_create_segment+0x144>)
 801de7a:	f006 f8a5 	bl	8023fc8 <iprintf>
  seg->len = p->tot_len - optlen;
 801de7e:	68bb      	ldr	r3, [r7, #8]
 801de80:	891a      	ldrh	r2, [r3, #8]
 801de82:	7dfb      	ldrb	r3, [r7, #23]
 801de84:	b29b      	uxth	r3, r3
 801de86:	1ad3      	subs	r3, r2, r3
 801de88:	b29a      	uxth	r2, r3
 801de8a:	693b      	ldr	r3, [r7, #16]
 801de8c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 801de8e:	693b      	ldr	r3, [r7, #16]
 801de90:	2200      	movs	r2, #0
 801de92:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801de94:	2114      	movs	r1, #20
 801de96:	68b8      	ldr	r0, [r7, #8]
 801de98:	f7fb f92c 	bl	80190f4 <pbuf_add_header>
 801de9c:	4603      	mov	r3, r0
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	d00c      	beq.n	801debc <tcp_create_segment+0xc4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 801dea2:	4b29      	ldr	r3, [pc, #164]	; (801df48 <tcp_create_segment+0x150>)
 801dea4:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 801dea8:	3301      	adds	r3, #1
 801deaa:	b29a      	uxth	r2, r3
 801deac:	4b26      	ldr	r3, [pc, #152]	; (801df48 <tcp_create_segment+0x150>)
 801deae:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 801deb2:	6938      	ldr	r0, [r7, #16]
 801deb4:	f7fc ff5f 	bl	801ad76 <tcp_seg_free>
    return NULL;
 801deb8:	2300      	movs	r3, #0
 801deba:	e037      	b.n	801df2c <tcp_create_segment+0x134>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801debc:	693b      	ldr	r3, [r7, #16]
 801debe:	685b      	ldr	r3, [r3, #4]
 801dec0:	685a      	ldr	r2, [r3, #4]
 801dec2:	693b      	ldr	r3, [r7, #16]
 801dec4:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801dec6:	68fb      	ldr	r3, [r7, #12]
 801dec8:	8ada      	ldrh	r2, [r3, #22]
 801deca:	693b      	ldr	r3, [r7, #16]
 801decc:	691c      	ldr	r4, [r3, #16]
 801dece:	4610      	mov	r0, r2
 801ded0:	f7f9 fb08 	bl	80174e4 <lwip_htons>
 801ded4:	4603      	mov	r3, r0
 801ded6:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801ded8:	68fb      	ldr	r3, [r7, #12]
 801deda:	8b1a      	ldrh	r2, [r3, #24]
 801dedc:	693b      	ldr	r3, [r7, #16]
 801dede:	691c      	ldr	r4, [r3, #16]
 801dee0:	4610      	mov	r0, r2
 801dee2:	f7f9 faff 	bl	80174e4 <lwip_htons>
 801dee6:	4603      	mov	r3, r0
 801dee8:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801deea:	693b      	ldr	r3, [r7, #16]
 801deec:	691c      	ldr	r4, [r3, #16]
 801deee:	6838      	ldr	r0, [r7, #0]
 801def0:	f7f9 fb0d 	bl	801750e <lwip_htonl>
 801def4:	4603      	mov	r3, r0
 801def6:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801def8:	7dfb      	ldrb	r3, [r7, #23]
 801defa:	089b      	lsrs	r3, r3, #2
 801defc:	b2db      	uxtb	r3, r3
 801defe:	b29b      	uxth	r3, r3
 801df00:	3305      	adds	r3, #5
 801df02:	b29b      	uxth	r3, r3
 801df04:	031b      	lsls	r3, r3, #12
 801df06:	b29a      	uxth	r2, r3
 801df08:	79fb      	ldrb	r3, [r7, #7]
 801df0a:	b29b      	uxth	r3, r3
 801df0c:	4313      	orrs	r3, r2
 801df0e:	b29a      	uxth	r2, r3
 801df10:	693b      	ldr	r3, [r7, #16]
 801df12:	691c      	ldr	r4, [r3, #16]
 801df14:	4610      	mov	r0, r2
 801df16:	f7f9 fae5 	bl	80174e4 <lwip_htons>
 801df1a:	4603      	mov	r3, r0
 801df1c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801df1e:	693b      	ldr	r3, [r7, #16]
 801df20:	691b      	ldr	r3, [r3, #16]
 801df22:	2200      	movs	r2, #0
 801df24:	749a      	strb	r2, [r3, #18]
 801df26:	2200      	movs	r2, #0
 801df28:	74da      	strb	r2, [r3, #19]
  return seg;
 801df2a:	693b      	ldr	r3, [r7, #16]
}
 801df2c:	4618      	mov	r0, r3
 801df2e:	371c      	adds	r7, #28
 801df30:	46bd      	mov	sp, r7
 801df32:	bd90      	pop	{r4, r7, pc}
 801df34:	08027d5c 	.word	0x08027d5c
 801df38:	08027d90 	.word	0x08027d90
 801df3c:	08027db0 	.word	0x08027db0
 801df40:	08027dd8 	.word	0x08027dd8
 801df44:	08027dfc 	.word	0x08027dfc
 801df48:	2007ecb8 	.word	0x2007ecb8

0801df4c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801df4c:	b580      	push	{r7, lr}
 801df4e:	b086      	sub	sp, #24
 801df50:	af00      	add	r7, sp, #0
 801df52:	607b      	str	r3, [r7, #4]
 801df54:	4603      	mov	r3, r0
 801df56:	73fb      	strb	r3, [r7, #15]
 801df58:	460b      	mov	r3, r1
 801df5a:	81bb      	strh	r3, [r7, #12]
 801df5c:	4613      	mov	r3, r2
 801df5e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801df60:	89bb      	ldrh	r3, [r7, #12]
 801df62:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801df64:	687b      	ldr	r3, [r7, #4]
 801df66:	2b00      	cmp	r3, #0
 801df68:	d105      	bne.n	801df76 <tcp_pbuf_prealloc+0x2a>
 801df6a:	4b30      	ldr	r3, [pc, #192]	; (801e02c <tcp_pbuf_prealloc+0xe0>)
 801df6c:	22e8      	movs	r2, #232	; 0xe8
 801df6e:	4930      	ldr	r1, [pc, #192]	; (801e030 <tcp_pbuf_prealloc+0xe4>)
 801df70:	4830      	ldr	r0, [pc, #192]	; (801e034 <tcp_pbuf_prealloc+0xe8>)
 801df72:	f006 f829 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801df76:	6a3b      	ldr	r3, [r7, #32]
 801df78:	2b00      	cmp	r3, #0
 801df7a:	d105      	bne.n	801df88 <tcp_pbuf_prealloc+0x3c>
 801df7c:	4b2b      	ldr	r3, [pc, #172]	; (801e02c <tcp_pbuf_prealloc+0xe0>)
 801df7e:	22e9      	movs	r2, #233	; 0xe9
 801df80:	492d      	ldr	r1, [pc, #180]	; (801e038 <tcp_pbuf_prealloc+0xec>)
 801df82:	482c      	ldr	r0, [pc, #176]	; (801e034 <tcp_pbuf_prealloc+0xe8>)
 801df84:	f006 f820 	bl	8023fc8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801df88:	89ba      	ldrh	r2, [r7, #12]
 801df8a:	897b      	ldrh	r3, [r7, #10]
 801df8c:	429a      	cmp	r2, r3
 801df8e:	d221      	bcs.n	801dfd4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801df90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801df94:	f003 0302 	and.w	r3, r3, #2
 801df98:	2b00      	cmp	r3, #0
 801df9a:	d111      	bne.n	801dfc0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801df9c:	6a3b      	ldr	r3, [r7, #32]
 801df9e:	8b5b      	ldrh	r3, [r3, #26]
 801dfa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	d115      	bne.n	801dfd4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801dfa8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801dfac:	2b00      	cmp	r3, #0
 801dfae:	d007      	beq.n	801dfc0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801dfb0:	6a3b      	ldr	r3, [r7, #32]
 801dfb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801dfb4:	2b00      	cmp	r3, #0
 801dfb6:	d103      	bne.n	801dfc0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801dfb8:	6a3b      	ldr	r3, [r7, #32]
 801dfba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801dfbc:	2b00      	cmp	r3, #0
 801dfbe:	d009      	beq.n	801dfd4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801dfc0:	89bb      	ldrh	r3, [r7, #12]
 801dfc2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801dfc6:	f023 0203 	bic.w	r2, r3, #3
 801dfca:	897b      	ldrh	r3, [r7, #10]
 801dfcc:	4293      	cmp	r3, r2
 801dfce:	bf28      	it	cs
 801dfd0:	4613      	movcs	r3, r2
 801dfd2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801dfd4:	8af9      	ldrh	r1, [r7, #22]
 801dfd6:	7bfb      	ldrb	r3, [r7, #15]
 801dfd8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dfdc:	4618      	mov	r0, r3
 801dfde:	f7fa fe3b 	bl	8018c58 <pbuf_alloc>
 801dfe2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801dfe4:	693b      	ldr	r3, [r7, #16]
 801dfe6:	2b00      	cmp	r3, #0
 801dfe8:	d101      	bne.n	801dfee <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801dfea:	2300      	movs	r3, #0
 801dfec:	e019      	b.n	801e022 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801dfee:	693b      	ldr	r3, [r7, #16]
 801dff0:	681b      	ldr	r3, [r3, #0]
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	d006      	beq.n	801e004 <tcp_pbuf_prealloc+0xb8>
 801dff6:	4b0d      	ldr	r3, [pc, #52]	; (801e02c <tcp_pbuf_prealloc+0xe0>)
 801dff8:	f240 120b 	movw	r2, #267	; 0x10b
 801dffc:	490f      	ldr	r1, [pc, #60]	; (801e03c <tcp_pbuf_prealloc+0xf0>)
 801dffe:	480d      	ldr	r0, [pc, #52]	; (801e034 <tcp_pbuf_prealloc+0xe8>)
 801e000:	f005 ffe2 	bl	8023fc8 <iprintf>
  *oversize = p->len - length;
 801e004:	693b      	ldr	r3, [r7, #16]
 801e006:	895a      	ldrh	r2, [r3, #10]
 801e008:	89bb      	ldrh	r3, [r7, #12]
 801e00a:	1ad3      	subs	r3, r2, r3
 801e00c:	b29a      	uxth	r2, r3
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801e012:	693b      	ldr	r3, [r7, #16]
 801e014:	89ba      	ldrh	r2, [r7, #12]
 801e016:	811a      	strh	r2, [r3, #8]
 801e018:	693b      	ldr	r3, [r7, #16]
 801e01a:	891a      	ldrh	r2, [r3, #8]
 801e01c:	693b      	ldr	r3, [r7, #16]
 801e01e:	815a      	strh	r2, [r3, #10]
  return p;
 801e020:	693b      	ldr	r3, [r7, #16]
}
 801e022:	4618      	mov	r0, r3
 801e024:	3718      	adds	r7, #24
 801e026:	46bd      	mov	sp, r7
 801e028:	bd80      	pop	{r7, pc}
 801e02a:	bf00      	nop
 801e02c:	08027d5c 	.word	0x08027d5c
 801e030:	08027e14 	.word	0x08027e14
 801e034:	08027db0 	.word	0x08027db0
 801e038:	08027e38 	.word	0x08027e38
 801e03c:	08027e58 	.word	0x08027e58

0801e040 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801e040:	b580      	push	{r7, lr}
 801e042:	b082      	sub	sp, #8
 801e044:	af00      	add	r7, sp, #0
 801e046:	6078      	str	r0, [r7, #4]
 801e048:	460b      	mov	r3, r1
 801e04a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	2b00      	cmp	r3, #0
 801e050:	d106      	bne.n	801e060 <tcp_write_checks+0x20>
 801e052:	4b37      	ldr	r3, [pc, #220]	; (801e130 <tcp_write_checks+0xf0>)
 801e054:	f240 1233 	movw	r2, #307	; 0x133
 801e058:	4936      	ldr	r1, [pc, #216]	; (801e134 <tcp_write_checks+0xf4>)
 801e05a:	4837      	ldr	r0, [pc, #220]	; (801e138 <tcp_write_checks+0xf8>)
 801e05c:	f005 ffb4 	bl	8023fc8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	7d1b      	ldrb	r3, [r3, #20]
 801e064:	2b04      	cmp	r3, #4
 801e066:	d00e      	beq.n	801e086 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801e068:	687b      	ldr	r3, [r7, #4]
 801e06a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801e06c:	2b07      	cmp	r3, #7
 801e06e:	d00a      	beq.n	801e086 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801e070:	687b      	ldr	r3, [r7, #4]
 801e072:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801e074:	2b02      	cmp	r3, #2
 801e076:	d006      	beq.n	801e086 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801e078:	687b      	ldr	r3, [r7, #4]
 801e07a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801e07c:	2b03      	cmp	r3, #3
 801e07e:	d002      	beq.n	801e086 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801e080:	f06f 030a 	mvn.w	r3, #10
 801e084:	e050      	b.n	801e128 <tcp_write_checks+0xe8>
  } else if (len == 0) {
 801e086:	887b      	ldrh	r3, [r7, #2]
 801e088:	2b00      	cmp	r3, #0
 801e08a:	d101      	bne.n	801e090 <tcp_write_checks+0x50>
    return ERR_OK;
 801e08c:	2300      	movs	r3, #0
 801e08e:	e04b      	b.n	801e128 <tcp_write_checks+0xe8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801e090:	687b      	ldr	r3, [r7, #4]
 801e092:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801e096:	887a      	ldrh	r2, [r7, #2]
 801e098:	429a      	cmp	r2, r3
 801e09a:	d909      	bls.n	801e0b0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	8b5b      	ldrh	r3, [r3, #26]
 801e0a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e0a4:	b29a      	uxth	r2, r3
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801e0aa:	f04f 33ff 	mov.w	r3, #4294967295
 801e0ae:	e03b      	b.n	801e128 <tcp_write_checks+0xe8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801e0b0:	687b      	ldr	r3, [r7, #4]
 801e0b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e0b6:	2b08      	cmp	r3, #8
 801e0b8:	d911      	bls.n	801e0de <tcp_write_checks+0x9e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 801e0ba:	4b20      	ldr	r3, [pc, #128]	; (801e13c <tcp_write_checks+0xfc>)
 801e0bc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801e0c0:	3301      	adds	r3, #1
 801e0c2:	b29a      	uxth	r2, r3
 801e0c4:	4b1d      	ldr	r3, [pc, #116]	; (801e13c <tcp_write_checks+0xfc>)
 801e0c6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e0ca:	687b      	ldr	r3, [r7, #4]
 801e0cc:	8b5b      	ldrh	r3, [r3, #26]
 801e0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e0d2:	b29a      	uxth	r2, r3
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801e0d8:	f04f 33ff 	mov.w	r3, #4294967295
 801e0dc:	e024      	b.n	801e128 <tcp_write_checks+0xe8>
  }
  if (pcb->snd_queuelen != 0) {
 801e0de:	687b      	ldr	r3, [r7, #4]
 801e0e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e0e4:	2b00      	cmp	r3, #0
 801e0e6:	d00f      	beq.n	801e108 <tcp_write_checks+0xc8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801e0e8:	687b      	ldr	r3, [r7, #4]
 801e0ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e0ec:	2b00      	cmp	r3, #0
 801e0ee:	d11a      	bne.n	801e126 <tcp_write_checks+0xe6>
 801e0f0:	687b      	ldr	r3, [r7, #4]
 801e0f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e0f4:	2b00      	cmp	r3, #0
 801e0f6:	d116      	bne.n	801e126 <tcp_write_checks+0xe6>
 801e0f8:	4b0d      	ldr	r3, [pc, #52]	; (801e130 <tcp_write_checks+0xf0>)
 801e0fa:	f240 1255 	movw	r2, #341	; 0x155
 801e0fe:	4910      	ldr	r1, [pc, #64]	; (801e140 <tcp_write_checks+0x100>)
 801e100:	480d      	ldr	r0, [pc, #52]	; (801e138 <tcp_write_checks+0xf8>)
 801e102:	f005 ff61 	bl	8023fc8 <iprintf>
 801e106:	e00e      	b.n	801e126 <tcp_write_checks+0xe6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e10c:	2b00      	cmp	r3, #0
 801e10e:	d103      	bne.n	801e118 <tcp_write_checks+0xd8>
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e114:	2b00      	cmp	r3, #0
 801e116:	d006      	beq.n	801e126 <tcp_write_checks+0xe6>
 801e118:	4b05      	ldr	r3, [pc, #20]	; (801e130 <tcp_write_checks+0xf0>)
 801e11a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801e11e:	4909      	ldr	r1, [pc, #36]	; (801e144 <tcp_write_checks+0x104>)
 801e120:	4805      	ldr	r0, [pc, #20]	; (801e138 <tcp_write_checks+0xf8>)
 801e122:	f005 ff51 	bl	8023fc8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801e126:	2300      	movs	r3, #0
}
 801e128:	4618      	mov	r0, r3
 801e12a:	3708      	adds	r7, #8
 801e12c:	46bd      	mov	sp, r7
 801e12e:	bd80      	pop	{r7, pc}
 801e130:	08027d5c 	.word	0x08027d5c
 801e134:	08027e6c 	.word	0x08027e6c
 801e138:	08027db0 	.word	0x08027db0
 801e13c:	2007ecb8 	.word	0x2007ecb8
 801e140:	08027e8c 	.word	0x08027e8c
 801e144:	08027ec8 	.word	0x08027ec8

0801e148 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801e148:	b590      	push	{r4, r7, lr}
 801e14a:	b09d      	sub	sp, #116	; 0x74
 801e14c:	af04      	add	r7, sp, #16
 801e14e:	60f8      	str	r0, [r7, #12]
 801e150:	60b9      	str	r1, [r7, #8]
 801e152:	4611      	mov	r1, r2
 801e154:	461a      	mov	r2, r3
 801e156:	460b      	mov	r3, r1
 801e158:	80fb      	strh	r3, [r7, #6]
 801e15a:	4613      	mov	r3, r2
 801e15c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801e15e:	2300      	movs	r3, #0
 801e160:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801e162:	2300      	movs	r3, #0
 801e164:	643b      	str	r3, [r7, #64]	; 0x40
 801e166:	2300      	movs	r3, #0
 801e168:	657b      	str	r3, [r7, #84]	; 0x54
 801e16a:	2300      	movs	r3, #0
 801e16c:	653b      	str	r3, [r7, #80]	; 0x50
 801e16e:	2300      	movs	r3, #0
 801e170:	64fb      	str	r3, [r7, #76]	; 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 801e172:	2300      	movs	r3, #0
 801e174:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801e178:	2300      	movs	r3, #0
 801e17a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801e17e:	2300      	movs	r3, #0
 801e180:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 801e182:	2300      	movs	r3, #0
 801e184:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 801e188:	2300      	movs	r3, #0
 801e18a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801e18e:	2300      	movs	r3, #0
 801e190:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801e194:	68fb      	ldr	r3, [r7, #12]
 801e196:	2b00      	cmp	r3, #0
 801e198:	d109      	bne.n	801e1ae <tcp_write+0x66>
 801e19a:	4b9c      	ldr	r3, [pc, #624]	; (801e40c <tcp_write+0x2c4>)
 801e19c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801e1a0:	499b      	ldr	r1, [pc, #620]	; (801e410 <tcp_write+0x2c8>)
 801e1a2:	489c      	ldr	r0, [pc, #624]	; (801e414 <tcp_write+0x2cc>)
 801e1a4:	f005 ff10 	bl	8023fc8 <iprintf>
 801e1a8:	f06f 030f 	mvn.w	r3, #15
 801e1ac:	e381      	b.n	801e8b2 <tcp_write+0x76a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801e1ae:	68fb      	ldr	r3, [r7, #12]
 801e1b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801e1b4:	085b      	lsrs	r3, r3, #1
 801e1b6:	b29a      	uxth	r2, r3
 801e1b8:	68fb      	ldr	r3, [r7, #12]
 801e1ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e1bc:	4293      	cmp	r3, r2
 801e1be:	bf28      	it	cs
 801e1c0:	4613      	movcs	r3, r2
 801e1c2:	853b      	strh	r3, [r7, #40]	; 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 801e1c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801e1c6:	2b00      	cmp	r3, #0
 801e1c8:	d102      	bne.n	801e1d0 <tcp_write+0x88>
 801e1ca:	68fb      	ldr	r3, [r7, #12]
 801e1cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e1ce:	e000      	b.n	801e1d2 <tcp_write+0x8a>
 801e1d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801e1d2:	853b      	strh	r3, [r7, #40]	; 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801e1d4:	68bb      	ldr	r3, [r7, #8]
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d109      	bne.n	801e1ee <tcp_write+0xa6>
 801e1da:	4b8c      	ldr	r3, [pc, #560]	; (801e40c <tcp_write+0x2c4>)
 801e1dc:	f240 12ad 	movw	r2, #429	; 0x1ad
 801e1e0:	498d      	ldr	r1, [pc, #564]	; (801e418 <tcp_write+0x2d0>)
 801e1e2:	488c      	ldr	r0, [pc, #560]	; (801e414 <tcp_write+0x2cc>)
 801e1e4:	f005 fef0 	bl	8023fc8 <iprintf>
 801e1e8:	f06f 030f 	mvn.w	r3, #15
 801e1ec:	e361      	b.n	801e8b2 <tcp_write+0x76a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801e1ee:	88fb      	ldrh	r3, [r7, #6]
 801e1f0:	4619      	mov	r1, r3
 801e1f2:	68f8      	ldr	r0, [r7, #12]
 801e1f4:	f7ff ff24 	bl	801e040 <tcp_write_checks>
 801e1f8:	4603      	mov	r3, r0
 801e1fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 801e1fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801e202:	2b00      	cmp	r3, #0
 801e204:	d002      	beq.n	801e20c <tcp_write+0xc4>
    return err;
 801e206:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801e20a:	e352      	b.n	801e8b2 <tcp_write+0x76a>
  }
  queuelen = pcb->snd_queuelen;
 801e20c:	68fb      	ldr	r3, [r7, #12]
 801e20e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e212:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801e216:	2300      	movs	r3, #0
 801e218:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801e21c:	68fb      	ldr	r3, [r7, #12]
 801e21e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e220:	2b00      	cmp	r3, #0
 801e222:	f000 8127 	beq.w	801e474 <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e226:	68fb      	ldr	r3, [r7, #12]
 801e228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e22a:	643b      	str	r3, [r7, #64]	; 0x40
 801e22c:	e002      	b.n	801e234 <tcp_write+0xec>
         last_unsent = last_unsent->next);
 801e22e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e230:	681b      	ldr	r3, [r3, #0]
 801e232:	643b      	str	r3, [r7, #64]	; 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e236:	681b      	ldr	r3, [r3, #0]
 801e238:	2b00      	cmp	r3, #0
 801e23a:	d1f8      	bne.n	801e22e <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801e23c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e23e:	7b1b      	ldrb	r3, [r3, #12]
 801e240:	009b      	lsls	r3, r3, #2
 801e242:	b29b      	uxth	r3, r3
 801e244:	f003 0304 	and.w	r3, r3, #4
 801e248:	84bb      	strh	r3, [r7, #36]	; 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801e24a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801e24c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e24e:	891b      	ldrh	r3, [r3, #8]
 801e250:	4619      	mov	r1, r3
 801e252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e254:	440b      	add	r3, r1
 801e256:	429a      	cmp	r2, r3
 801e258:	da06      	bge.n	801e268 <tcp_write+0x120>
 801e25a:	4b6c      	ldr	r3, [pc, #432]	; (801e40c <tcp_write+0x2c4>)
 801e25c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801e260:	496e      	ldr	r1, [pc, #440]	; (801e41c <tcp_write+0x2d4>)
 801e262:	486c      	ldr	r0, [pc, #432]	; (801e414 <tcp_write+0x2cc>)
 801e264:	f005 feb0 	bl	8023fc8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801e268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e26a:	891a      	ldrh	r2, [r3, #8]
 801e26c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e26e:	4413      	add	r3, r2
 801e270:	b29b      	uxth	r3, r3
 801e272:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801e274:	1ad3      	subs	r3, r2, r3
 801e276:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 801e27a:	68fb      	ldr	r3, [r7, #12]
 801e27c:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 801e280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e282:	895b      	ldrh	r3, [r3, #10]
 801e284:	429a      	cmp	r2, r3
 801e286:	d006      	beq.n	801e296 <tcp_write+0x14e>
 801e288:	4b60      	ldr	r3, [pc, #384]	; (801e40c <tcp_write+0x2c4>)
 801e28a:	f240 12f3 	movw	r2, #499	; 0x1f3
 801e28e:	4964      	ldr	r1, [pc, #400]	; (801e420 <tcp_write+0x2d8>)
 801e290:	4860      	ldr	r0, [pc, #384]	; (801e414 <tcp_write+0x2cc>)
 801e292:	f005 fe99 	bl	8023fc8 <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801e296:	68fb      	ldr	r3, [r7, #12]
 801e298:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801e29c:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 801e29e:	8afb      	ldrh	r3, [r7, #22]
 801e2a0:	2b00      	cmp	r3, #0
 801e2a2:	d02e      	beq.n	801e302 <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801e2a4:	8afb      	ldrh	r3, [r7, #22]
 801e2a6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801e2aa:	429a      	cmp	r2, r3
 801e2ac:	d206      	bcs.n	801e2bc <tcp_write+0x174>
 801e2ae:	4b57      	ldr	r3, [pc, #348]	; (801e40c <tcp_write+0x2c4>)
 801e2b0:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801e2b4:	495b      	ldr	r1, [pc, #364]	; (801e424 <tcp_write+0x2dc>)
 801e2b6:	4857      	ldr	r0, [pc, #348]	; (801e414 <tcp_write+0x2cc>)
 801e2b8:	f005 fe86 	bl	8023fc8 <iprintf>
      seg = last_unsent;
 801e2bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e2be:	657b      	str	r3, [r7, #84]	; 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801e2c0:	8afb      	ldrh	r3, [r7, #22]
 801e2c2:	88fa      	ldrh	r2, [r7, #6]
 801e2c4:	4293      	cmp	r3, r2
 801e2c6:	bf28      	it	cs
 801e2c8:	4613      	movcs	r3, r2
 801e2ca:	b29b      	uxth	r3, r3
 801e2cc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801e2d0:	4293      	cmp	r3, r2
 801e2d2:	bf28      	it	cs
 801e2d4:	4613      	movcs	r3, r2
 801e2d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      pos += oversize_used;
 801e2da:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 801e2de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e2e2:	4413      	add	r3, r2
 801e2e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      oversize -= oversize_used;
 801e2e8:	8afa      	ldrh	r2, [r7, #22]
 801e2ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e2ee:	1ad3      	subs	r3, r2, r3
 801e2f0:	b29b      	uxth	r3, r3
 801e2f2:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 801e2f4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801e2f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e2fc:	1ad3      	subs	r3, r2, r3
 801e2fe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801e302:	8afb      	ldrh	r3, [r7, #22]
 801e304:	2b00      	cmp	r3, #0
 801e306:	d00b      	beq.n	801e320 <tcp_write+0x1d8>
 801e308:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 801e30c:	88fb      	ldrh	r3, [r7, #6]
 801e30e:	429a      	cmp	r2, r3
 801e310:	d006      	beq.n	801e320 <tcp_write+0x1d8>
 801e312:	4b3e      	ldr	r3, [pc, #248]	; (801e40c <tcp_write+0x2c4>)
 801e314:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e318:	4943      	ldr	r1, [pc, #268]	; (801e428 <tcp_write+0x2e0>)
 801e31a:	483e      	ldr	r0, [pc, #248]	; (801e414 <tcp_write+0x2cc>)
 801e31c:	f005 fe54 	bl	8023fc8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801e320:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 801e324:	88fb      	ldrh	r3, [r7, #6]
 801e326:	429a      	cmp	r2, r3
 801e328:	f080 8172 	bcs.w	801e610 <tcp_write+0x4c8>
 801e32c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801e330:	2b00      	cmp	r3, #0
 801e332:	f000 816d 	beq.w	801e610 <tcp_write+0x4c8>
 801e336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e338:	891b      	ldrh	r3, [r3, #8]
 801e33a:	2b00      	cmp	r3, #0
 801e33c:	f000 8168 	beq.w	801e610 <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801e340:	88fa      	ldrh	r2, [r7, #6]
 801e342:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801e346:	1ad2      	subs	r2, r2, r3
 801e348:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 801e34c:	4293      	cmp	r3, r2
 801e34e:	bfa8      	it	ge
 801e350:	4613      	movge	r3, r2
 801e352:	847b      	strh	r3, [r7, #34]	; 0x22
      seg = last_unsent;
 801e354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e356:	657b      	str	r3, [r7, #84]	; 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e358:	797b      	ldrb	r3, [r7, #5]
 801e35a:	f003 0301 	and.w	r3, r3, #1
 801e35e:	2b00      	cmp	r3, #0
 801e360:	d02b      	beq.n	801e3ba <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801e362:	f107 0016 	add.w	r0, r7, #22
 801e366:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 801e36a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 801e36c:	2301      	movs	r3, #1
 801e36e:	9302      	str	r3, [sp, #8]
 801e370:	797b      	ldrb	r3, [r7, #5]
 801e372:	9301      	str	r3, [sp, #4]
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	9300      	str	r3, [sp, #0]
 801e378:	4603      	mov	r3, r0
 801e37a:	2000      	movs	r0, #0
 801e37c:	f7ff fde6 	bl	801df4c <tcp_pbuf_prealloc>
 801e380:	63f8      	str	r0, [r7, #60]	; 0x3c
 801e382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e384:	2b00      	cmp	r3, #0
 801e386:	f000 825a 	beq.w	801e83e <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 801e38a:	8afb      	ldrh	r3, [r7, #22]
 801e38c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801e390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e392:	6858      	ldr	r0, [r3, #4]
 801e394:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801e398:	68ba      	ldr	r2, [r7, #8]
 801e39a:	4413      	add	r3, r2
 801e39c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801e39e:	4619      	mov	r1, r3
 801e3a0:	f006 f87d 	bl	802449e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801e3a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e3a6:	f7fa ffc9 	bl	801933c <pbuf_clen>
 801e3aa:	4603      	mov	r3, r0
 801e3ac:	461a      	mov	r2, r3
 801e3ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801e3b2:	4413      	add	r3, r2
 801e3b4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801e3b8:	e055      	b.n	801e466 <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801e3ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e3bc:	685b      	ldr	r3, [r3, #4]
 801e3be:	63bb      	str	r3, [r7, #56]	; 0x38
 801e3c0:	e002      	b.n	801e3c8 <tcp_write+0x280>
 801e3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e3c4:	681b      	ldr	r3, [r3, #0]
 801e3c6:	63bb      	str	r3, [r7, #56]	; 0x38
 801e3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e3ca:	681b      	ldr	r3, [r3, #0]
 801e3cc:	2b00      	cmp	r3, #0
 801e3ce:	d1f8      	bne.n	801e3c2 <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801e3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e3d2:	7b1b      	ldrb	r3, [r3, #12]
 801e3d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e3d8:	2b00      	cmp	r3, #0
 801e3da:	d129      	bne.n	801e430 <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801e3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e3de:	685b      	ldr	r3, [r3, #4]
 801e3e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e3e2:	8952      	ldrh	r2, [r2, #10]
 801e3e4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801e3e6:	68ba      	ldr	r2, [r7, #8]
 801e3e8:	429a      	cmp	r2, r3
 801e3ea:	d121      	bne.n	801e430 <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801e3ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	d006      	beq.n	801e402 <tcp_write+0x2ba>
 801e3f4:	4b05      	ldr	r3, [pc, #20]	; (801e40c <tcp_write+0x2c4>)
 801e3f6:	f240 2231 	movw	r2, #561	; 0x231
 801e3fa:	490c      	ldr	r1, [pc, #48]	; (801e42c <tcp_write+0x2e4>)
 801e3fc:	4805      	ldr	r0, [pc, #20]	; (801e414 <tcp_write+0x2cc>)
 801e3fe:	f005 fde3 	bl	8023fc8 <iprintf>
          extendlen = seglen;
 801e402:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e404:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801e408:	e02d      	b.n	801e466 <tcp_write+0x31e>
 801e40a:	bf00      	nop
 801e40c:	08027d5c 	.word	0x08027d5c
 801e410:	08027efc 	.word	0x08027efc
 801e414:	08027db0 	.word	0x08027db0
 801e418:	08027f14 	.word	0x08027f14
 801e41c:	08027f48 	.word	0x08027f48
 801e420:	08027f60 	.word	0x08027f60
 801e424:	08027f90 	.word	0x08027f90
 801e428:	08027fb0 	.word	0x08027fb0
 801e42c:	08027fd0 	.word	0x08027fd0
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801e430:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e432:	2201      	movs	r2, #1
 801e434:	4619      	mov	r1, r3
 801e436:	2000      	movs	r0, #0
 801e438:	f7fa fc0e 	bl	8018c58 <pbuf_alloc>
 801e43c:	63f8      	str	r0, [r7, #60]	; 0x3c
 801e43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e440:	2b00      	cmp	r3, #0
 801e442:	f000 81fe 	beq.w	801e842 <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801e446:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801e44a:	68ba      	ldr	r2, [r7, #8]
 801e44c:	441a      	add	r2, r3
 801e44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e450:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801e452:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e454:	f7fa ff72 	bl	801933c <pbuf_clen>
 801e458:	4603      	mov	r3, r0
 801e45a:	461a      	mov	r2, r3
 801e45c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801e460:	4413      	add	r3, r2
 801e462:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801e466:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 801e46a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e46c:	4413      	add	r3, r2
 801e46e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801e472:	e0cd      	b.n	801e610 <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801e474:	68fb      	ldr	r3, [r7, #12]
 801e476:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801e47a:	2b00      	cmp	r3, #0
 801e47c:	f000 80c8 	beq.w	801e610 <tcp_write+0x4c8>
 801e480:	4b72      	ldr	r3, [pc, #456]	; (801e64c <tcp_write+0x504>)
 801e482:	f240 224a 	movw	r2, #586	; 0x24a
 801e486:	4972      	ldr	r1, [pc, #456]	; (801e650 <tcp_write+0x508>)
 801e488:	4872      	ldr	r0, [pc, #456]	; (801e654 <tcp_write+0x50c>)
 801e48a:	f005 fd9d 	bl	8023fc8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801e48e:	e0bf      	b.n	801e610 <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 801e490:	88fa      	ldrh	r2, [r7, #6]
 801e492:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801e496:	1ad3      	subs	r3, r2, r3
 801e498:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 801e49a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801e49e:	b29b      	uxth	r3, r3
 801e4a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801e4a2:	1ad3      	subs	r3, r2, r3
 801e4a4:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 801e4a6:	8bfa      	ldrh	r2, [r7, #30]
 801e4a8:	8c3b      	ldrh	r3, [r7, #32]
 801e4aa:	4293      	cmp	r3, r2
 801e4ac:	bf28      	it	cs
 801e4ae:	4613      	movcs	r3, r2
 801e4b0:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e4b2:	797b      	ldrb	r3, [r7, #5]
 801e4b4:	f003 0301 	and.w	r3, r3, #1
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	d036      	beq.n	801e52a <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801e4bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801e4c0:	b29a      	uxth	r2, r3
 801e4c2:	8bbb      	ldrh	r3, [r7, #28]
 801e4c4:	4413      	add	r3, r2
 801e4c6:	b299      	uxth	r1, r3
 801e4c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	bf0c      	ite	eq
 801e4ce:	2301      	moveq	r3, #1
 801e4d0:	2300      	movne	r3, #0
 801e4d2:	b2db      	uxtb	r3, r3
 801e4d4:	f107 0016 	add.w	r0, r7, #22
 801e4d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801e4da:	9302      	str	r3, [sp, #8]
 801e4dc:	797b      	ldrb	r3, [r7, #5]
 801e4de:	9301      	str	r3, [sp, #4]
 801e4e0:	68fb      	ldr	r3, [r7, #12]
 801e4e2:	9300      	str	r3, [sp, #0]
 801e4e4:	4603      	mov	r3, r0
 801e4e6:	2036      	movs	r0, #54	; 0x36
 801e4e8:	f7ff fd30 	bl	801df4c <tcp_pbuf_prealloc>
 801e4ec:	6378      	str	r0, [r7, #52]	; 0x34
 801e4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	f000 81a8 	beq.w	801e846 <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801e4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e4f8:	895b      	ldrh	r3, [r3, #10]
 801e4fa:	8bba      	ldrh	r2, [r7, #28]
 801e4fc:	429a      	cmp	r2, r3
 801e4fe:	d906      	bls.n	801e50e <tcp_write+0x3c6>
 801e500:	4b52      	ldr	r3, [pc, #328]	; (801e64c <tcp_write+0x504>)
 801e502:	f240 2266 	movw	r2, #614	; 0x266
 801e506:	4954      	ldr	r1, [pc, #336]	; (801e658 <tcp_write+0x510>)
 801e508:	4852      	ldr	r0, [pc, #328]	; (801e654 <tcp_write+0x50c>)
 801e50a:	f005 fd5d 	bl	8023fc8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801e50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e510:	685a      	ldr	r2, [r3, #4]
 801e512:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801e516:	18d0      	adds	r0, r2, r3
 801e518:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801e51c:	68ba      	ldr	r2, [r7, #8]
 801e51e:	4413      	add	r3, r2
 801e520:	8bba      	ldrh	r2, [r7, #28]
 801e522:	4619      	mov	r1, r3
 801e524:	f005 ffbb 	bl	802449e <memcpy>
 801e528:	e02f      	b.n	801e58a <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801e52a:	8afb      	ldrh	r3, [r7, #22]
 801e52c:	2b00      	cmp	r3, #0
 801e52e:	d006      	beq.n	801e53e <tcp_write+0x3f6>
 801e530:	4b46      	ldr	r3, [pc, #280]	; (801e64c <tcp_write+0x504>)
 801e532:	f240 2271 	movw	r2, #625	; 0x271
 801e536:	4949      	ldr	r1, [pc, #292]	; (801e65c <tcp_write+0x514>)
 801e538:	4846      	ldr	r0, [pc, #280]	; (801e654 <tcp_write+0x50c>)
 801e53a:	f005 fd45 	bl	8023fc8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801e53e:	8bbb      	ldrh	r3, [r7, #28]
 801e540:	2201      	movs	r2, #1
 801e542:	4619      	mov	r1, r3
 801e544:	2036      	movs	r0, #54	; 0x36
 801e546:	f7fa fb87 	bl	8018c58 <pbuf_alloc>
 801e54a:	61b8      	str	r0, [r7, #24]
 801e54c:	69bb      	ldr	r3, [r7, #24]
 801e54e:	2b00      	cmp	r3, #0
 801e550:	f000 817b 	beq.w	801e84a <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801e554:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801e558:	68ba      	ldr	r2, [r7, #8]
 801e55a:	441a      	add	r2, r3
 801e55c:	69bb      	ldr	r3, [r7, #24]
 801e55e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e560:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801e564:	b29b      	uxth	r3, r3
 801e566:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e56a:	4619      	mov	r1, r3
 801e56c:	2036      	movs	r0, #54	; 0x36
 801e56e:	f7fa fb73 	bl	8018c58 <pbuf_alloc>
 801e572:	6378      	str	r0, [r7, #52]	; 0x34
 801e574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e576:	2b00      	cmp	r3, #0
 801e578:	d103      	bne.n	801e582 <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801e57a:	69b8      	ldr	r0, [r7, #24]
 801e57c:	f7fa fe50 	bl	8019220 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801e580:	e166      	b.n	801e850 <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801e582:	69b9      	ldr	r1, [r7, #24]
 801e584:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801e586:	f7fa ff19 	bl	80193bc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801e58a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801e58c:	f7fa fed6 	bl	801933c <pbuf_clen>
 801e590:	4603      	mov	r3, r0
 801e592:	461a      	mov	r2, r3
 801e594:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801e598:	4413      	add	r3, r2
 801e59a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801e59e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801e5a2:	2b09      	cmp	r3, #9
 801e5a4:	d903      	bls.n	801e5ae <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801e5a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801e5a8:	f7fa fe3a 	bl	8019220 <pbuf_free>
      goto memerr;
 801e5ac:	e150      	b.n	801e850 <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801e5ae:	68fb      	ldr	r3, [r7, #12]
 801e5b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801e5b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801e5b6:	441a      	add	r2, r3
 801e5b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e5bc:	9300      	str	r3, [sp, #0]
 801e5be:	4613      	mov	r3, r2
 801e5c0:	2200      	movs	r2, #0
 801e5c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e5c4:	68f8      	ldr	r0, [r7, #12]
 801e5c6:	f7ff fc17 	bl	801ddf8 <tcp_create_segment>
 801e5ca:	6578      	str	r0, [r7, #84]	; 0x54
 801e5cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	f000 813d 	beq.w	801e84e <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 801e5d4:	8afa      	ldrh	r2, [r7, #22]
 801e5d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e5d8:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801e5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e5dc:	2b00      	cmp	r3, #0
 801e5de:	d102      	bne.n	801e5e6 <tcp_write+0x49e>
      queue = seg;
 801e5e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e5e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e5e4:	e00c      	b.n	801e600 <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801e5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	d106      	bne.n	801e5fa <tcp_write+0x4b2>
 801e5ec:	4b17      	ldr	r3, [pc, #92]	; (801e64c <tcp_write+0x504>)
 801e5ee:	f240 22ab 	movw	r2, #683	; 0x2ab
 801e5f2:	491b      	ldr	r1, [pc, #108]	; (801e660 <tcp_write+0x518>)
 801e5f4:	4817      	ldr	r0, [pc, #92]	; (801e654 <tcp_write+0x50c>)
 801e5f6:	f005 fce7 	bl	8023fc8 <iprintf>
      prev_seg->next = seg;
 801e5fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e5fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801e5fe:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801e600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e602:	653b      	str	r3, [r7, #80]	; 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801e604:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 801e608:	8bbb      	ldrh	r3, [r7, #28]
 801e60a:	4413      	add	r3, r2
 801e60c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  while (pos < len) {
 801e610:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 801e614:	88fb      	ldrh	r3, [r7, #6]
 801e616:	429a      	cmp	r2, r3
 801e618:	f4ff af3a 	bcc.w	801e490 <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 801e61c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e61e:	2b00      	cmp	r3, #0
 801e620:	d00b      	beq.n	801e63a <tcp_write+0x4f2>
 801e622:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801e626:	2b00      	cmp	r3, #0
 801e628:	d007      	beq.n	801e63a <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 801e62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e62c:	895a      	ldrh	r2, [r3, #10]
 801e62e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801e632:	4413      	add	r3, r2
 801e634:	b29a      	uxth	r2, r3
 801e636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e638:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801e63a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e63e:	2b00      	cmp	r3, #0
 801e640:	d052      	beq.n	801e6e8 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801e642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e644:	685b      	ldr	r3, [r3, #4]
 801e646:	633b      	str	r3, [r7, #48]	; 0x30
 801e648:	e02e      	b.n	801e6a8 <tcp_write+0x560>
 801e64a:	bf00      	nop
 801e64c:	08027d5c 	.word	0x08027d5c
 801e650:	08027ffc 	.word	0x08027ffc
 801e654:	08027db0 	.word	0x08027db0
 801e658:	0802802c 	.word	0x0802802c
 801e65c:	0802806c 	.word	0x0802806c
 801e660:	0802807c 	.word	0x0802807c
      p->tot_len += oversize_used;
 801e664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e666:	891a      	ldrh	r2, [r3, #8]
 801e668:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e66c:	4413      	add	r3, r2
 801e66e:	b29a      	uxth	r2, r3
 801e670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e672:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801e674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e676:	681b      	ldr	r3, [r3, #0]
 801e678:	2b00      	cmp	r3, #0
 801e67a:	d112      	bne.n	801e6a2 <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801e67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e67e:	685b      	ldr	r3, [r3, #4]
 801e680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e682:	8952      	ldrh	r2, [r2, #10]
 801e684:	4413      	add	r3, r2
 801e686:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801e68a:	68b9      	ldr	r1, [r7, #8]
 801e68c:	4618      	mov	r0, r3
 801e68e:	f005 ff06 	bl	802449e <memcpy>
        p->len += oversize_used;
 801e692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e694:	895a      	ldrh	r2, [r3, #10]
 801e696:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e69a:	4413      	add	r3, r2
 801e69c:	b29a      	uxth	r2, r3
 801e69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6a0:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801e6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6a4:	681b      	ldr	r3, [r3, #0]
 801e6a6:	633b      	str	r3, [r7, #48]	; 0x30
 801e6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e6aa:	2b00      	cmp	r3, #0
 801e6ac:	d1da      	bne.n	801e664 <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 801e6ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e6b0:	891a      	ldrh	r2, [r3, #8]
 801e6b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e6b6:	4413      	add	r3, r2
 801e6b8:	b29a      	uxth	r2, r3
 801e6ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e6bc:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 801e6be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e6c0:	895b      	ldrh	r3, [r3, #10]
 801e6c2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801e6c6:	429a      	cmp	r2, r3
 801e6c8:	d906      	bls.n	801e6d8 <tcp_write+0x590>
 801e6ca:	4b7c      	ldr	r3, [pc, #496]	; (801e8bc <tcp_write+0x774>)
 801e6cc:	f240 22d3 	movw	r2, #723	; 0x2d3
 801e6d0:	497b      	ldr	r1, [pc, #492]	; (801e8c0 <tcp_write+0x778>)
 801e6d2:	487c      	ldr	r0, [pc, #496]	; (801e8c4 <tcp_write+0x77c>)
 801e6d4:	f005 fc78 	bl	8023fc8 <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 801e6d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e6da:	895a      	ldrh	r2, [r3, #10]
 801e6dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801e6e0:	1ad3      	subs	r3, r2, r3
 801e6e2:	b29a      	uxth	r2, r3
 801e6e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e6e6:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801e6e8:	8afa      	ldrh	r2, [r7, #22]
 801e6ea:	68fb      	ldr	r3, [r7, #12]
 801e6ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801e6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e6f2:	2b00      	cmp	r3, #0
 801e6f4:	d018      	beq.n	801e728 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801e6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e6f8:	2b00      	cmp	r3, #0
 801e6fa:	d106      	bne.n	801e70a <tcp_write+0x5c2>
 801e6fc:	4b6f      	ldr	r3, [pc, #444]	; (801e8bc <tcp_write+0x774>)
 801e6fe:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801e702:	4971      	ldr	r1, [pc, #452]	; (801e8c8 <tcp_write+0x780>)
 801e704:	486f      	ldr	r0, [pc, #444]	; (801e8c4 <tcp_write+0x77c>)
 801e706:	f005 fc5f 	bl	8023fc8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801e70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e70c:	685b      	ldr	r3, [r3, #4]
 801e70e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e710:	4618      	mov	r0, r3
 801e712:	f7fa fe53 	bl	80193bc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801e716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e718:	891a      	ldrh	r2, [r3, #8]
 801e71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e71c:	891b      	ldrh	r3, [r3, #8]
 801e71e:	4413      	add	r3, r2
 801e720:	b29a      	uxth	r2, r3
 801e722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e724:	811a      	strh	r2, [r3, #8]
 801e726:	e03c      	b.n	801e7a2 <tcp_write+0x65a>
  } else if (extendlen > 0) {
 801e728:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	d038      	beq.n	801e7a2 <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801e730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e732:	2b00      	cmp	r3, #0
 801e734:	d003      	beq.n	801e73e <tcp_write+0x5f6>
 801e736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e738:	685b      	ldr	r3, [r3, #4]
 801e73a:	2b00      	cmp	r3, #0
 801e73c:	d106      	bne.n	801e74c <tcp_write+0x604>
 801e73e:	4b5f      	ldr	r3, [pc, #380]	; (801e8bc <tcp_write+0x774>)
 801e740:	f240 22e6 	movw	r2, #742	; 0x2e6
 801e744:	4961      	ldr	r1, [pc, #388]	; (801e8cc <tcp_write+0x784>)
 801e746:	485f      	ldr	r0, [pc, #380]	; (801e8c4 <tcp_write+0x77c>)
 801e748:	f005 fc3e 	bl	8023fc8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e74e:	685b      	ldr	r3, [r3, #4]
 801e750:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e752:	e00a      	b.n	801e76a <tcp_write+0x622>
      p->tot_len += extendlen;
 801e754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e756:	891a      	ldrh	r2, [r3, #8]
 801e758:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801e75c:	4413      	add	r3, r2
 801e75e:	b29a      	uxth	r2, r3
 801e760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e762:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e76c:	681b      	ldr	r3, [r3, #0]
 801e76e:	2b00      	cmp	r3, #0
 801e770:	d1f0      	bne.n	801e754 <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 801e772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e774:	891a      	ldrh	r2, [r3, #8]
 801e776:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801e77a:	4413      	add	r3, r2
 801e77c:	b29a      	uxth	r2, r3
 801e77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e780:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801e782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e784:	895a      	ldrh	r2, [r3, #10]
 801e786:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801e78a:	4413      	add	r3, r2
 801e78c:	b29a      	uxth	r2, r3
 801e78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e790:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801e792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e794:	891a      	ldrh	r2, [r3, #8]
 801e796:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801e79a:	4413      	add	r3, r2
 801e79c:	b29a      	uxth	r2, r3
 801e79e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e7a0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801e7a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	d103      	bne.n	801e7b0 <tcp_write+0x668>
    pcb->unsent = queue;
 801e7a8:	68fb      	ldr	r3, [r7, #12]
 801e7aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e7ac:	66da      	str	r2, [r3, #108]	; 0x6c
 801e7ae:	e002      	b.n	801e7b6 <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 801e7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e7b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e7b4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801e7b6:	68fb      	ldr	r3, [r7, #12]
 801e7b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801e7ba:	88fb      	ldrh	r3, [r7, #6]
 801e7bc:	441a      	add	r2, r3
 801e7be:	68fb      	ldr	r3, [r7, #12]
 801e7c0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801e7c2:	68fb      	ldr	r3, [r7, #12]
 801e7c4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801e7c8:	88fb      	ldrh	r3, [r7, #6]
 801e7ca:	1ad3      	subs	r3, r2, r3
 801e7cc:	b29a      	uxth	r2, r3
 801e7ce:	68fb      	ldr	r3, [r7, #12]
 801e7d0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801e7d4:	68fb      	ldr	r3, [r7, #12]
 801e7d6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 801e7da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801e7de:	68fb      	ldr	r3, [r7, #12]
 801e7e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e7e4:	2b00      	cmp	r3, #0
 801e7e6:	d00e      	beq.n	801e806 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 801e7e8:	68fb      	ldr	r3, [r7, #12]
 801e7ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e7ec:	2b00      	cmp	r3, #0
 801e7ee:	d10a      	bne.n	801e806 <tcp_write+0x6be>
 801e7f0:	68fb      	ldr	r3, [r7, #12]
 801e7f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e7f4:	2b00      	cmp	r3, #0
 801e7f6:	d106      	bne.n	801e806 <tcp_write+0x6be>
 801e7f8:	4b30      	ldr	r3, [pc, #192]	; (801e8bc <tcp_write+0x774>)
 801e7fa:	f240 3212 	movw	r2, #786	; 0x312
 801e7fe:	4934      	ldr	r1, [pc, #208]	; (801e8d0 <tcp_write+0x788>)
 801e800:	4830      	ldr	r0, [pc, #192]	; (801e8c4 <tcp_write+0x77c>)
 801e802:	f005 fbe1 	bl	8023fc8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801e806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e808:	2b00      	cmp	r3, #0
 801e80a:	d016      	beq.n	801e83a <tcp_write+0x6f2>
 801e80c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e80e:	691b      	ldr	r3, [r3, #16]
 801e810:	2b00      	cmp	r3, #0
 801e812:	d012      	beq.n	801e83a <tcp_write+0x6f2>
 801e814:	797b      	ldrb	r3, [r7, #5]
 801e816:	f003 0302 	and.w	r3, r3, #2
 801e81a:	2b00      	cmp	r3, #0
 801e81c:	d10d      	bne.n	801e83a <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801e81e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e820:	691b      	ldr	r3, [r3, #16]
 801e822:	899b      	ldrh	r3, [r3, #12]
 801e824:	b29c      	uxth	r4, r3
 801e826:	2008      	movs	r0, #8
 801e828:	f7f8 fe5c 	bl	80174e4 <lwip_htons>
 801e82c:	4603      	mov	r3, r0
 801e82e:	461a      	mov	r2, r3
 801e830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e832:	691b      	ldr	r3, [r3, #16]
 801e834:	4322      	orrs	r2, r4
 801e836:	b292      	uxth	r2, r2
 801e838:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801e83a:	2300      	movs	r3, #0
 801e83c:	e039      	b.n	801e8b2 <tcp_write+0x76a>
          goto memerr;
 801e83e:	bf00      	nop
 801e840:	e006      	b.n	801e850 <tcp_write+0x708>
            goto memerr;
 801e842:	bf00      	nop
 801e844:	e004      	b.n	801e850 <tcp_write+0x708>
        goto memerr;
 801e846:	bf00      	nop
 801e848:	e002      	b.n	801e850 <tcp_write+0x708>
        goto memerr;
 801e84a:	bf00      	nop
 801e84c:	e000      	b.n	801e850 <tcp_write+0x708>
      goto memerr;
 801e84e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e850:	68fb      	ldr	r3, [r7, #12]
 801e852:	8b5b      	ldrh	r3, [r3, #26]
 801e854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e858:	b29a      	uxth	r2, r3
 801e85a:	68fb      	ldr	r3, [r7, #12]
 801e85c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 801e85e:	4b1d      	ldr	r3, [pc, #116]	; (801e8d4 <tcp_write+0x78c>)
 801e860:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801e864:	3301      	adds	r3, #1
 801e866:	b29a      	uxth	r2, r3
 801e868:	4b1a      	ldr	r3, [pc, #104]	; (801e8d4 <tcp_write+0x78c>)
 801e86a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  if (concat_p != NULL) {
 801e86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e870:	2b00      	cmp	r3, #0
 801e872:	d002      	beq.n	801e87a <tcp_write+0x732>
    pbuf_free(concat_p);
 801e874:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801e876:	f7fa fcd3 	bl	8019220 <pbuf_free>
  }
  if (queue != NULL) {
 801e87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e87c:	2b00      	cmp	r3, #0
 801e87e:	d002      	beq.n	801e886 <tcp_write+0x73e>
    tcp_segs_free(queue);
 801e880:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801e882:	f7fc fa63 	bl	801ad4c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801e886:	68fb      	ldr	r3, [r7, #12]
 801e888:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e88c:	2b00      	cmp	r3, #0
 801e88e:	d00e      	beq.n	801e8ae <tcp_write+0x766>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801e890:	68fb      	ldr	r3, [r7, #12]
 801e892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e894:	2b00      	cmp	r3, #0
 801e896:	d10a      	bne.n	801e8ae <tcp_write+0x766>
 801e898:	68fb      	ldr	r3, [r7, #12]
 801e89a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e89c:	2b00      	cmp	r3, #0
 801e89e:	d106      	bne.n	801e8ae <tcp_write+0x766>
 801e8a0:	4b06      	ldr	r3, [pc, #24]	; (801e8bc <tcp_write+0x774>)
 801e8a2:	f240 3227 	movw	r2, #807	; 0x327
 801e8a6:	490a      	ldr	r1, [pc, #40]	; (801e8d0 <tcp_write+0x788>)
 801e8a8:	4806      	ldr	r0, [pc, #24]	; (801e8c4 <tcp_write+0x77c>)
 801e8aa:	f005 fb8d 	bl	8023fc8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801e8ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e8b2:	4618      	mov	r0, r3
 801e8b4:	3764      	adds	r7, #100	; 0x64
 801e8b6:	46bd      	mov	sp, r7
 801e8b8:	bd90      	pop	{r4, r7, pc}
 801e8ba:	bf00      	nop
 801e8bc:	08027d5c 	.word	0x08027d5c
 801e8c0:	08028090 	.word	0x08028090
 801e8c4:	08027db0 	.word	0x08027db0
 801e8c8:	080280bc 	.word	0x080280bc
 801e8cc:	080280f4 	.word	0x080280f4
 801e8d0:	0802812c 	.word	0x0802812c
 801e8d4:	2007ecb8 	.word	0x2007ecb8

0801e8d8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801e8d8:	b590      	push	{r4, r7, lr}
 801e8da:	b08b      	sub	sp, #44	; 0x2c
 801e8dc:	af02      	add	r7, sp, #8
 801e8de:	6078      	str	r0, [r7, #4]
 801e8e0:	460b      	mov	r3, r1
 801e8e2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801e8e4:	2300      	movs	r3, #0
 801e8e6:	61bb      	str	r3, [r7, #24]
 801e8e8:	2300      	movs	r3, #0
 801e8ea:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801e8ec:	2300      	movs	r3, #0
 801e8ee:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	2b00      	cmp	r3, #0
 801e8f4:	d106      	bne.n	801e904 <tcp_split_unsent_seg+0x2c>
 801e8f6:	4b9b      	ldr	r3, [pc, #620]	; (801eb64 <tcp_split_unsent_seg+0x28c>)
 801e8f8:	f240 324b 	movw	r2, #843	; 0x34b
 801e8fc:	499a      	ldr	r1, [pc, #616]	; (801eb68 <tcp_split_unsent_seg+0x290>)
 801e8fe:	489b      	ldr	r0, [pc, #620]	; (801eb6c <tcp_split_unsent_seg+0x294>)
 801e900:	f005 fb62 	bl	8023fc8 <iprintf>

  useg = pcb->unsent;
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e908:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801e90a:	697b      	ldr	r3, [r7, #20]
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	d102      	bne.n	801e916 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801e910:	f04f 33ff 	mov.w	r3, #4294967295
 801e914:	e121      	b.n	801eb5a <tcp_split_unsent_seg+0x282>
  }

  if (split == 0) {
 801e916:	887b      	ldrh	r3, [r7, #2]
 801e918:	2b00      	cmp	r3, #0
 801e91a:	d109      	bne.n	801e930 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801e91c:	4b91      	ldr	r3, [pc, #580]	; (801eb64 <tcp_split_unsent_seg+0x28c>)
 801e91e:	f240 3253 	movw	r2, #851	; 0x353
 801e922:	4993      	ldr	r1, [pc, #588]	; (801eb70 <tcp_split_unsent_seg+0x298>)
 801e924:	4891      	ldr	r0, [pc, #580]	; (801eb6c <tcp_split_unsent_seg+0x294>)
 801e926:	f005 fb4f 	bl	8023fc8 <iprintf>
    return ERR_VAL;
 801e92a:	f06f 0305 	mvn.w	r3, #5
 801e92e:	e114      	b.n	801eb5a <tcp_split_unsent_seg+0x282>
  }

  if (useg->len <= split) {
 801e930:	697b      	ldr	r3, [r7, #20]
 801e932:	891b      	ldrh	r3, [r3, #8]
 801e934:	887a      	ldrh	r2, [r7, #2]
 801e936:	429a      	cmp	r2, r3
 801e938:	d301      	bcc.n	801e93e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801e93a:	2300      	movs	r3, #0
 801e93c:	e10d      	b.n	801eb5a <tcp_split_unsent_seg+0x282>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801e93e:	687b      	ldr	r3, [r7, #4]
 801e940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e942:	887a      	ldrh	r2, [r7, #2]
 801e944:	429a      	cmp	r2, r3
 801e946:	d906      	bls.n	801e956 <tcp_split_unsent_seg+0x7e>
 801e948:	4b86      	ldr	r3, [pc, #536]	; (801eb64 <tcp_split_unsent_seg+0x28c>)
 801e94a:	f240 325b 	movw	r2, #859	; 0x35b
 801e94e:	4989      	ldr	r1, [pc, #548]	; (801eb74 <tcp_split_unsent_seg+0x29c>)
 801e950:	4886      	ldr	r0, [pc, #536]	; (801eb6c <tcp_split_unsent_seg+0x294>)
 801e952:	f005 fb39 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801e956:	697b      	ldr	r3, [r7, #20]
 801e958:	891b      	ldrh	r3, [r3, #8]
 801e95a:	2b00      	cmp	r3, #0
 801e95c:	d106      	bne.n	801e96c <tcp_split_unsent_seg+0x94>
 801e95e:	4b81      	ldr	r3, [pc, #516]	; (801eb64 <tcp_split_unsent_seg+0x28c>)
 801e960:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801e964:	4984      	ldr	r1, [pc, #528]	; (801eb78 <tcp_split_unsent_seg+0x2a0>)
 801e966:	4881      	ldr	r0, [pc, #516]	; (801eb6c <tcp_split_unsent_seg+0x294>)
 801e968:	f005 fb2e 	bl	8023fc8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801e96c:	697b      	ldr	r3, [r7, #20]
 801e96e:	7b1b      	ldrb	r3, [r3, #12]
 801e970:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801e972:	7bfb      	ldrb	r3, [r7, #15]
 801e974:	009b      	lsls	r3, r3, #2
 801e976:	b2db      	uxtb	r3, r3
 801e978:	f003 0304 	and.w	r3, r3, #4
 801e97c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801e97e:	697b      	ldr	r3, [r7, #20]
 801e980:	891a      	ldrh	r2, [r3, #8]
 801e982:	887b      	ldrh	r3, [r7, #2]
 801e984:	1ad3      	subs	r3, r2, r3
 801e986:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801e988:	7bbb      	ldrb	r3, [r7, #14]
 801e98a:	b29a      	uxth	r2, r3
 801e98c:	89bb      	ldrh	r3, [r7, #12]
 801e98e:	4413      	add	r3, r2
 801e990:	b29b      	uxth	r3, r3
 801e992:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e996:	4619      	mov	r1, r3
 801e998:	2036      	movs	r0, #54	; 0x36
 801e99a:	f7fa f95d 	bl	8018c58 <pbuf_alloc>
 801e99e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e9a0:	693b      	ldr	r3, [r7, #16]
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	f000 80ba 	beq.w	801eb1c <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801e9a8:	697b      	ldr	r3, [r7, #20]
 801e9aa:	685b      	ldr	r3, [r3, #4]
 801e9ac:	891a      	ldrh	r2, [r3, #8]
 801e9ae:	697b      	ldr	r3, [r7, #20]
 801e9b0:	891b      	ldrh	r3, [r3, #8]
 801e9b2:	1ad3      	subs	r3, r2, r3
 801e9b4:	b29a      	uxth	r2, r3
 801e9b6:	887b      	ldrh	r3, [r7, #2]
 801e9b8:	4413      	add	r3, r2
 801e9ba:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801e9bc:	697b      	ldr	r3, [r7, #20]
 801e9be:	6858      	ldr	r0, [r3, #4]
 801e9c0:	693b      	ldr	r3, [r7, #16]
 801e9c2:	685a      	ldr	r2, [r3, #4]
 801e9c4:	7bbb      	ldrb	r3, [r7, #14]
 801e9c6:	18d1      	adds	r1, r2, r3
 801e9c8:	897b      	ldrh	r3, [r7, #10]
 801e9ca:	89ba      	ldrh	r2, [r7, #12]
 801e9cc:	f7fa fe1e 	bl	801960c <pbuf_copy_partial>
 801e9d0:	4603      	mov	r3, r0
 801e9d2:	461a      	mov	r2, r3
 801e9d4:	89bb      	ldrh	r3, [r7, #12]
 801e9d6:	4293      	cmp	r3, r2
 801e9d8:	f040 80a2 	bne.w	801eb20 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801e9dc:	697b      	ldr	r3, [r7, #20]
 801e9de:	691b      	ldr	r3, [r3, #16]
 801e9e0:	899b      	ldrh	r3, [r3, #12]
 801e9e2:	b29b      	uxth	r3, r3
 801e9e4:	4618      	mov	r0, r3
 801e9e6:	f7f8 fd7d 	bl	80174e4 <lwip_htons>
 801e9ea:	4603      	mov	r3, r0
 801e9ec:	b2db      	uxtb	r3, r3
 801e9ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e9f2:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801e9f4:	2300      	movs	r3, #0
 801e9f6:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 801e9f8:	7ffb      	ldrb	r3, [r7, #31]
 801e9fa:	f003 0308 	and.w	r3, r3, #8
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	d007      	beq.n	801ea12 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801ea02:	7ffb      	ldrb	r3, [r7, #31]
 801ea04:	f023 0308 	bic.w	r3, r3, #8
 801ea08:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 801ea0a:	7fbb      	ldrb	r3, [r7, #30]
 801ea0c:	f043 0308 	orr.w	r3, r3, #8
 801ea10:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 801ea12:	7ffb      	ldrb	r3, [r7, #31]
 801ea14:	f003 0301 	and.w	r3, r3, #1
 801ea18:	2b00      	cmp	r3, #0
 801ea1a:	d007      	beq.n	801ea2c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801ea1c:	7ffb      	ldrb	r3, [r7, #31]
 801ea1e:	f023 0301 	bic.w	r3, r3, #1
 801ea22:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 801ea24:	7fbb      	ldrb	r3, [r7, #30]
 801ea26:	f043 0301 	orr.w	r3, r3, #1
 801ea2a:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801ea2c:	697b      	ldr	r3, [r7, #20]
 801ea2e:	691b      	ldr	r3, [r3, #16]
 801ea30:	685b      	ldr	r3, [r3, #4]
 801ea32:	4618      	mov	r0, r3
 801ea34:	f7f8 fd6b 	bl	801750e <lwip_htonl>
 801ea38:	4602      	mov	r2, r0
 801ea3a:	887b      	ldrh	r3, [r7, #2]
 801ea3c:	18d1      	adds	r1, r2, r3
 801ea3e:	7fba      	ldrb	r2, [r7, #30]
 801ea40:	7bfb      	ldrb	r3, [r7, #15]
 801ea42:	9300      	str	r3, [sp, #0]
 801ea44:	460b      	mov	r3, r1
 801ea46:	6939      	ldr	r1, [r7, #16]
 801ea48:	6878      	ldr	r0, [r7, #4]
 801ea4a:	f7ff f9d5 	bl	801ddf8 <tcp_create_segment>
 801ea4e:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 801ea50:	69bb      	ldr	r3, [r7, #24]
 801ea52:	2b00      	cmp	r3, #0
 801ea54:	d066      	beq.n	801eb24 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801ea56:	697b      	ldr	r3, [r7, #20]
 801ea58:	685b      	ldr	r3, [r3, #4]
 801ea5a:	4618      	mov	r0, r3
 801ea5c:	f7fa fc6e 	bl	801933c <pbuf_clen>
 801ea60:	4603      	mov	r3, r0
 801ea62:	461a      	mov	r2, r3
 801ea64:	687b      	ldr	r3, [r7, #4]
 801ea66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ea6a:	1a9b      	subs	r3, r3, r2
 801ea6c:	b29a      	uxth	r2, r3
 801ea6e:	687b      	ldr	r3, [r7, #4]
 801ea70:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801ea74:	697b      	ldr	r3, [r7, #20]
 801ea76:	6858      	ldr	r0, [r3, #4]
 801ea78:	697b      	ldr	r3, [r7, #20]
 801ea7a:	685b      	ldr	r3, [r3, #4]
 801ea7c:	891a      	ldrh	r2, [r3, #8]
 801ea7e:	89bb      	ldrh	r3, [r7, #12]
 801ea80:	1ad3      	subs	r3, r2, r3
 801ea82:	b29b      	uxth	r3, r3
 801ea84:	4619      	mov	r1, r3
 801ea86:	f7fa fa45 	bl	8018f14 <pbuf_realloc>
  useg->len -= remainder;
 801ea8a:	697b      	ldr	r3, [r7, #20]
 801ea8c:	891a      	ldrh	r2, [r3, #8]
 801ea8e:	89bb      	ldrh	r3, [r7, #12]
 801ea90:	1ad3      	subs	r3, r2, r3
 801ea92:	b29a      	uxth	r2, r3
 801ea94:	697b      	ldr	r3, [r7, #20]
 801ea96:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801ea98:	697b      	ldr	r3, [r7, #20]
 801ea9a:	691b      	ldr	r3, [r3, #16]
 801ea9c:	899b      	ldrh	r3, [r3, #12]
 801ea9e:	b29c      	uxth	r4, r3
 801eaa0:	7ffb      	ldrb	r3, [r7, #31]
 801eaa2:	b29b      	uxth	r3, r3
 801eaa4:	4618      	mov	r0, r3
 801eaa6:	f7f8 fd1d 	bl	80174e4 <lwip_htons>
 801eaaa:	4603      	mov	r3, r0
 801eaac:	461a      	mov	r2, r3
 801eaae:	697b      	ldr	r3, [r7, #20]
 801eab0:	691b      	ldr	r3, [r3, #16]
 801eab2:	4322      	orrs	r2, r4
 801eab4:	b292      	uxth	r2, r2
 801eab6:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 801eab8:	697b      	ldr	r3, [r7, #20]
 801eaba:	2200      	movs	r2, #0
 801eabc:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801eabe:	697b      	ldr	r3, [r7, #20]
 801eac0:	685b      	ldr	r3, [r3, #4]
 801eac2:	4618      	mov	r0, r3
 801eac4:	f7fa fc3a 	bl	801933c <pbuf_clen>
 801eac8:	4603      	mov	r3, r0
 801eaca:	461a      	mov	r2, r3
 801eacc:	687b      	ldr	r3, [r7, #4]
 801eace:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ead2:	4413      	add	r3, r2
 801ead4:	b29a      	uxth	r2, r3
 801ead6:	687b      	ldr	r3, [r7, #4]
 801ead8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801eadc:	69bb      	ldr	r3, [r7, #24]
 801eade:	685b      	ldr	r3, [r3, #4]
 801eae0:	4618      	mov	r0, r3
 801eae2:	f7fa fc2b 	bl	801933c <pbuf_clen>
 801eae6:	4603      	mov	r3, r0
 801eae8:	461a      	mov	r2, r3
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801eaf0:	4413      	add	r3, r2
 801eaf2:	b29a      	uxth	r2, r3
 801eaf4:	687b      	ldr	r3, [r7, #4]
 801eaf6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801eafa:	697b      	ldr	r3, [r7, #20]
 801eafc:	681a      	ldr	r2, [r3, #0]
 801eafe:	69bb      	ldr	r3, [r7, #24]
 801eb00:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801eb02:	697b      	ldr	r3, [r7, #20]
 801eb04:	69ba      	ldr	r2, [r7, #24]
 801eb06:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801eb08:	69bb      	ldr	r3, [r7, #24]
 801eb0a:	681b      	ldr	r3, [r3, #0]
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	d103      	bne.n	801eb18 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 801eb10:	687b      	ldr	r3, [r7, #4]
 801eb12:	2200      	movs	r2, #0
 801eb14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801eb18:	2300      	movs	r3, #0
 801eb1a:	e01e      	b.n	801eb5a <tcp_split_unsent_seg+0x282>
    goto memerr;
 801eb1c:	bf00      	nop
 801eb1e:	e002      	b.n	801eb26 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801eb20:	bf00      	nop
 801eb22:	e000      	b.n	801eb26 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801eb24:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 801eb26:	4b15      	ldr	r3, [pc, #84]	; (801eb7c <tcp_split_unsent_seg+0x2a4>)
 801eb28:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801eb2c:	3301      	adds	r3, #1
 801eb2e:	b29a      	uxth	r2, r3
 801eb30:	4b12      	ldr	r3, [pc, #72]	; (801eb7c <tcp_split_unsent_seg+0x2a4>)
 801eb32:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801eb36:	69bb      	ldr	r3, [r7, #24]
 801eb38:	2b00      	cmp	r3, #0
 801eb3a:	d006      	beq.n	801eb4a <tcp_split_unsent_seg+0x272>
 801eb3c:	4b09      	ldr	r3, [pc, #36]	; (801eb64 <tcp_split_unsent_seg+0x28c>)
 801eb3e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801eb42:	490f      	ldr	r1, [pc, #60]	; (801eb80 <tcp_split_unsent_seg+0x2a8>)
 801eb44:	4809      	ldr	r0, [pc, #36]	; (801eb6c <tcp_split_unsent_seg+0x294>)
 801eb46:	f005 fa3f 	bl	8023fc8 <iprintf>
  if (p != NULL) {
 801eb4a:	693b      	ldr	r3, [r7, #16]
 801eb4c:	2b00      	cmp	r3, #0
 801eb4e:	d002      	beq.n	801eb56 <tcp_split_unsent_seg+0x27e>
    pbuf_free(p);
 801eb50:	6938      	ldr	r0, [r7, #16]
 801eb52:	f7fa fb65 	bl	8019220 <pbuf_free>
  }

  return ERR_MEM;
 801eb56:	f04f 33ff 	mov.w	r3, #4294967295
}
 801eb5a:	4618      	mov	r0, r3
 801eb5c:	3724      	adds	r7, #36	; 0x24
 801eb5e:	46bd      	mov	sp, r7
 801eb60:	bd90      	pop	{r4, r7, pc}
 801eb62:	bf00      	nop
 801eb64:	08027d5c 	.word	0x08027d5c
 801eb68:	0802814c 	.word	0x0802814c
 801eb6c:	08027db0 	.word	0x08027db0
 801eb70:	08028170 	.word	0x08028170
 801eb74:	08028194 	.word	0x08028194
 801eb78:	080281a4 	.word	0x080281a4
 801eb7c:	2007ecb8 	.word	0x2007ecb8
 801eb80:	080281b4 	.word	0x080281b4

0801eb84 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801eb84:	b590      	push	{r4, r7, lr}
 801eb86:	b085      	sub	sp, #20
 801eb88:	af00      	add	r7, sp, #0
 801eb8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801eb8c:	687b      	ldr	r3, [r7, #4]
 801eb8e:	2b00      	cmp	r3, #0
 801eb90:	d106      	bne.n	801eba0 <tcp_send_fin+0x1c>
 801eb92:	4b21      	ldr	r3, [pc, #132]	; (801ec18 <tcp_send_fin+0x94>)
 801eb94:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801eb98:	4920      	ldr	r1, [pc, #128]	; (801ec1c <tcp_send_fin+0x98>)
 801eb9a:	4821      	ldr	r0, [pc, #132]	; (801ec20 <tcp_send_fin+0x9c>)
 801eb9c:	f005 fa14 	bl	8023fc8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801eba0:	687b      	ldr	r3, [r7, #4]
 801eba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801eba4:	2b00      	cmp	r3, #0
 801eba6:	d02e      	beq.n	801ec06 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801eba8:	687b      	ldr	r3, [r7, #4]
 801ebaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ebac:	60fb      	str	r3, [r7, #12]
 801ebae:	e002      	b.n	801ebb6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801ebb0:	68fb      	ldr	r3, [r7, #12]
 801ebb2:	681b      	ldr	r3, [r3, #0]
 801ebb4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ebb6:	68fb      	ldr	r3, [r7, #12]
 801ebb8:	681b      	ldr	r3, [r3, #0]
 801ebba:	2b00      	cmp	r3, #0
 801ebbc:	d1f8      	bne.n	801ebb0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801ebbe:	68fb      	ldr	r3, [r7, #12]
 801ebc0:	691b      	ldr	r3, [r3, #16]
 801ebc2:	899b      	ldrh	r3, [r3, #12]
 801ebc4:	b29b      	uxth	r3, r3
 801ebc6:	4618      	mov	r0, r3
 801ebc8:	f7f8 fc8c 	bl	80174e4 <lwip_htons>
 801ebcc:	4603      	mov	r3, r0
 801ebce:	b2db      	uxtb	r3, r3
 801ebd0:	f003 0307 	and.w	r3, r3, #7
 801ebd4:	2b00      	cmp	r3, #0
 801ebd6:	d116      	bne.n	801ec06 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ebd8:	68fb      	ldr	r3, [r7, #12]
 801ebda:	691b      	ldr	r3, [r3, #16]
 801ebdc:	899b      	ldrh	r3, [r3, #12]
 801ebde:	b29c      	uxth	r4, r3
 801ebe0:	2001      	movs	r0, #1
 801ebe2:	f7f8 fc7f 	bl	80174e4 <lwip_htons>
 801ebe6:	4603      	mov	r3, r0
 801ebe8:	461a      	mov	r2, r3
 801ebea:	68fb      	ldr	r3, [r7, #12]
 801ebec:	691b      	ldr	r3, [r3, #16]
 801ebee:	4322      	orrs	r2, r4
 801ebf0:	b292      	uxth	r2, r2
 801ebf2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801ebf4:	687b      	ldr	r3, [r7, #4]
 801ebf6:	8b5b      	ldrh	r3, [r3, #26]
 801ebf8:	f043 0320 	orr.w	r3, r3, #32
 801ebfc:	b29a      	uxth	r2, r3
 801ebfe:	687b      	ldr	r3, [r7, #4]
 801ec00:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801ec02:	2300      	movs	r3, #0
 801ec04:	e004      	b.n	801ec10 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801ec06:	2101      	movs	r1, #1
 801ec08:	6878      	ldr	r0, [r7, #4]
 801ec0a:	f000 f80b 	bl	801ec24 <tcp_enqueue_flags>
 801ec0e:	4603      	mov	r3, r0
}
 801ec10:	4618      	mov	r0, r3
 801ec12:	3714      	adds	r7, #20
 801ec14:	46bd      	mov	sp, r7
 801ec16:	bd90      	pop	{r4, r7, pc}
 801ec18:	08027d5c 	.word	0x08027d5c
 801ec1c:	080281c0 	.word	0x080281c0
 801ec20:	08027db0 	.word	0x08027db0

0801ec24 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801ec24:	b580      	push	{r7, lr}
 801ec26:	b088      	sub	sp, #32
 801ec28:	af02      	add	r7, sp, #8
 801ec2a:	6078      	str	r0, [r7, #4]
 801ec2c:	460b      	mov	r3, r1
 801ec2e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801ec30:	2300      	movs	r3, #0
 801ec32:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 801ec34:	2300      	movs	r3, #0
 801ec36:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ec38:	78fb      	ldrb	r3, [r7, #3]
 801ec3a:	f003 0303 	and.w	r3, r3, #3
 801ec3e:	2b00      	cmp	r3, #0
 801ec40:	d106      	bne.n	801ec50 <tcp_enqueue_flags+0x2c>
 801ec42:	4b6f      	ldr	r3, [pc, #444]	; (801ee00 <tcp_enqueue_flags+0x1dc>)
 801ec44:	f240 4211 	movw	r2, #1041	; 0x411
 801ec48:	496e      	ldr	r1, [pc, #440]	; (801ee04 <tcp_enqueue_flags+0x1e0>)
 801ec4a:	486f      	ldr	r0, [pc, #444]	; (801ee08 <tcp_enqueue_flags+0x1e4>)
 801ec4c:	f005 f9bc 	bl	8023fc8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801ec50:	687b      	ldr	r3, [r7, #4]
 801ec52:	2b00      	cmp	r3, #0
 801ec54:	d106      	bne.n	801ec64 <tcp_enqueue_flags+0x40>
 801ec56:	4b6a      	ldr	r3, [pc, #424]	; (801ee00 <tcp_enqueue_flags+0x1dc>)
 801ec58:	f240 4213 	movw	r2, #1043	; 0x413
 801ec5c:	496b      	ldr	r1, [pc, #428]	; (801ee0c <tcp_enqueue_flags+0x1e8>)
 801ec5e:	486a      	ldr	r0, [pc, #424]	; (801ee08 <tcp_enqueue_flags+0x1e4>)
 801ec60:	f005 f9b2 	bl	8023fc8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801ec64:	78fb      	ldrb	r3, [r7, #3]
 801ec66:	f003 0302 	and.w	r3, r3, #2
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	d001      	beq.n	801ec72 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801ec6e:	2301      	movs	r3, #1
 801ec70:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ec72:	7dfb      	ldrb	r3, [r7, #23]
 801ec74:	009b      	lsls	r3, r3, #2
 801ec76:	b2db      	uxtb	r3, r3
 801ec78:	f003 0304 	and.w	r3, r3, #4
 801ec7c:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ec7e:	7dbb      	ldrb	r3, [r7, #22]
 801ec80:	b29b      	uxth	r3, r3
 801ec82:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ec86:	4619      	mov	r1, r3
 801ec88:	2036      	movs	r0, #54	; 0x36
 801ec8a:	f7f9 ffe5 	bl	8018c58 <pbuf_alloc>
 801ec8e:	60f8      	str	r0, [r7, #12]
 801ec90:	68fb      	ldr	r3, [r7, #12]
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	d111      	bne.n	801ecba <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	8b5b      	ldrh	r3, [r3, #26]
 801ec9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ec9e:	b29a      	uxth	r2, r3
 801eca0:	687b      	ldr	r3, [r7, #4]
 801eca2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801eca4:	4b5a      	ldr	r3, [pc, #360]	; (801ee10 <tcp_enqueue_flags+0x1ec>)
 801eca6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801ecaa:	3301      	adds	r3, #1
 801ecac:	b29a      	uxth	r2, r3
 801ecae:	4b58      	ldr	r3, [pc, #352]	; (801ee10 <tcp_enqueue_flags+0x1ec>)
 801ecb0:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 801ecb4:	f04f 33ff 	mov.w	r3, #4294967295
 801ecb8:	e09d      	b.n	801edf6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801ecba:	68fb      	ldr	r3, [r7, #12]
 801ecbc:	895a      	ldrh	r2, [r3, #10]
 801ecbe:	7dbb      	ldrb	r3, [r7, #22]
 801ecc0:	b29b      	uxth	r3, r3
 801ecc2:	429a      	cmp	r2, r3
 801ecc4:	d206      	bcs.n	801ecd4 <tcp_enqueue_flags+0xb0>
 801ecc6:	4b4e      	ldr	r3, [pc, #312]	; (801ee00 <tcp_enqueue_flags+0x1dc>)
 801ecc8:	f240 4239 	movw	r2, #1081	; 0x439
 801eccc:	4951      	ldr	r1, [pc, #324]	; (801ee14 <tcp_enqueue_flags+0x1f0>)
 801ecce:	484e      	ldr	r0, [pc, #312]	; (801ee08 <tcp_enqueue_flags+0x1e4>)
 801ecd0:	f005 f97a 	bl	8023fc8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801ecd4:	687b      	ldr	r3, [r7, #4]
 801ecd6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801ecd8:	78fa      	ldrb	r2, [r7, #3]
 801ecda:	7dfb      	ldrb	r3, [r7, #23]
 801ecdc:	9300      	str	r3, [sp, #0]
 801ecde:	460b      	mov	r3, r1
 801ece0:	68f9      	ldr	r1, [r7, #12]
 801ece2:	6878      	ldr	r0, [r7, #4]
 801ece4:	f7ff f888 	bl	801ddf8 <tcp_create_segment>
 801ece8:	60b8      	str	r0, [r7, #8]
 801ecea:	68bb      	ldr	r3, [r7, #8]
 801ecec:	2b00      	cmp	r3, #0
 801ecee:	d111      	bne.n	801ed14 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	8b5b      	ldrh	r3, [r3, #26]
 801ecf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ecf8:	b29a      	uxth	r2, r3
 801ecfa:	687b      	ldr	r3, [r7, #4]
 801ecfc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801ecfe:	4b44      	ldr	r3, [pc, #272]	; (801ee10 <tcp_enqueue_flags+0x1ec>)
 801ed00:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801ed04:	3301      	adds	r3, #1
 801ed06:	b29a      	uxth	r2, r3
 801ed08:	4b41      	ldr	r3, [pc, #260]	; (801ee10 <tcp_enqueue_flags+0x1ec>)
 801ed0a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 801ed0e:	f04f 33ff 	mov.w	r3, #4294967295
 801ed12:	e070      	b.n	801edf6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801ed14:	68bb      	ldr	r3, [r7, #8]
 801ed16:	691b      	ldr	r3, [r3, #16]
 801ed18:	f003 0303 	and.w	r3, r3, #3
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	d006      	beq.n	801ed2e <tcp_enqueue_flags+0x10a>
 801ed20:	4b37      	ldr	r3, [pc, #220]	; (801ee00 <tcp_enqueue_flags+0x1dc>)
 801ed22:	f240 4242 	movw	r2, #1090	; 0x442
 801ed26:	493c      	ldr	r1, [pc, #240]	; (801ee18 <tcp_enqueue_flags+0x1f4>)
 801ed28:	4837      	ldr	r0, [pc, #220]	; (801ee08 <tcp_enqueue_flags+0x1e4>)
 801ed2a:	f005 f94d 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801ed2e:	68bb      	ldr	r3, [r7, #8]
 801ed30:	891b      	ldrh	r3, [r3, #8]
 801ed32:	2b00      	cmp	r3, #0
 801ed34:	d006      	beq.n	801ed44 <tcp_enqueue_flags+0x120>
 801ed36:	4b32      	ldr	r3, [pc, #200]	; (801ee00 <tcp_enqueue_flags+0x1dc>)
 801ed38:	f240 4243 	movw	r2, #1091	; 0x443
 801ed3c:	4937      	ldr	r1, [pc, #220]	; (801ee1c <tcp_enqueue_flags+0x1f8>)
 801ed3e:	4832      	ldr	r0, [pc, #200]	; (801ee08 <tcp_enqueue_flags+0x1e4>)
 801ed40:	f005 f942 	bl	8023fc8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801ed44:	687b      	ldr	r3, [r7, #4]
 801ed46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	d103      	bne.n	801ed54 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 801ed4c:	687b      	ldr	r3, [r7, #4]
 801ed4e:	68ba      	ldr	r2, [r7, #8]
 801ed50:	66da      	str	r2, [r3, #108]	; 0x6c
 801ed52:	e00d      	b.n	801ed70 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801ed54:	687b      	ldr	r3, [r7, #4]
 801ed56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ed58:	613b      	str	r3, [r7, #16]
 801ed5a:	e002      	b.n	801ed62 <tcp_enqueue_flags+0x13e>
 801ed5c:	693b      	ldr	r3, [r7, #16]
 801ed5e:	681b      	ldr	r3, [r3, #0]
 801ed60:	613b      	str	r3, [r7, #16]
 801ed62:	693b      	ldr	r3, [r7, #16]
 801ed64:	681b      	ldr	r3, [r3, #0]
 801ed66:	2b00      	cmp	r3, #0
 801ed68:	d1f8      	bne.n	801ed5c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801ed6a:	693b      	ldr	r3, [r7, #16]
 801ed6c:	68ba      	ldr	r2, [r7, #8]
 801ed6e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801ed70:	687b      	ldr	r3, [r7, #4]
 801ed72:	2200      	movs	r2, #0
 801ed74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801ed78:	78fb      	ldrb	r3, [r7, #3]
 801ed7a:	f003 0302 	and.w	r3, r3, #2
 801ed7e:	2b00      	cmp	r3, #0
 801ed80:	d104      	bne.n	801ed8c <tcp_enqueue_flags+0x168>
 801ed82:	78fb      	ldrb	r3, [r7, #3]
 801ed84:	f003 0301 	and.w	r3, r3, #1
 801ed88:	2b00      	cmp	r3, #0
 801ed8a:	d004      	beq.n	801ed96 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ed90:	1c5a      	adds	r2, r3, #1
 801ed92:	687b      	ldr	r3, [r7, #4]
 801ed94:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801ed96:	78fb      	ldrb	r3, [r7, #3]
 801ed98:	f003 0301 	and.w	r3, r3, #1
 801ed9c:	2b00      	cmp	r3, #0
 801ed9e:	d006      	beq.n	801edae <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	8b5b      	ldrh	r3, [r3, #26]
 801eda4:	f043 0320 	orr.w	r3, r3, #32
 801eda8:	b29a      	uxth	r2, r3
 801edaa:	687b      	ldr	r3, [r7, #4]
 801edac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801edae:	68bb      	ldr	r3, [r7, #8]
 801edb0:	685b      	ldr	r3, [r3, #4]
 801edb2:	4618      	mov	r0, r3
 801edb4:	f7fa fac2 	bl	801933c <pbuf_clen>
 801edb8:	4603      	mov	r3, r0
 801edba:	461a      	mov	r2, r3
 801edbc:	687b      	ldr	r3, [r7, #4]
 801edbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801edc2:	4413      	add	r3, r2
 801edc4:	b29a      	uxth	r2, r3
 801edc6:	687b      	ldr	r3, [r7, #4]
 801edc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801edcc:	687b      	ldr	r3, [r7, #4]
 801edce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801edd2:	2b00      	cmp	r3, #0
 801edd4:	d00e      	beq.n	801edf4 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801edd6:	687b      	ldr	r3, [r7, #4]
 801edd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801edda:	2b00      	cmp	r3, #0
 801eddc:	d10a      	bne.n	801edf4 <tcp_enqueue_flags+0x1d0>
 801edde:	687b      	ldr	r3, [r7, #4]
 801ede0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ede2:	2b00      	cmp	r3, #0
 801ede4:	d106      	bne.n	801edf4 <tcp_enqueue_flags+0x1d0>
 801ede6:	4b06      	ldr	r3, [pc, #24]	; (801ee00 <tcp_enqueue_flags+0x1dc>)
 801ede8:	f240 4265 	movw	r2, #1125	; 0x465
 801edec:	490c      	ldr	r1, [pc, #48]	; (801ee20 <tcp_enqueue_flags+0x1fc>)
 801edee:	4806      	ldr	r0, [pc, #24]	; (801ee08 <tcp_enqueue_flags+0x1e4>)
 801edf0:	f005 f8ea 	bl	8023fc8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801edf4:	2300      	movs	r3, #0
}
 801edf6:	4618      	mov	r0, r3
 801edf8:	3718      	adds	r7, #24
 801edfa:	46bd      	mov	sp, r7
 801edfc:	bd80      	pop	{r7, pc}
 801edfe:	bf00      	nop
 801ee00:	08027d5c 	.word	0x08027d5c
 801ee04:	080281dc 	.word	0x080281dc
 801ee08:	08027db0 	.word	0x08027db0
 801ee0c:	08028234 	.word	0x08028234
 801ee10:	2007ecb8 	.word	0x2007ecb8
 801ee14:	08028254 	.word	0x08028254
 801ee18:	08028290 	.word	0x08028290
 801ee1c:	080282a8 	.word	0x080282a8
 801ee20:	080282d4 	.word	0x080282d4

0801ee24 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801ee24:	b5b0      	push	{r4, r5, r7, lr}
 801ee26:	b08a      	sub	sp, #40	; 0x28
 801ee28:	af00      	add	r7, sp, #0
 801ee2a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801ee2c:	687b      	ldr	r3, [r7, #4]
 801ee2e:	2b00      	cmp	r3, #0
 801ee30:	d106      	bne.n	801ee40 <tcp_output+0x1c>
 801ee32:	4b8a      	ldr	r3, [pc, #552]	; (801f05c <tcp_output+0x238>)
 801ee34:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801ee38:	4989      	ldr	r1, [pc, #548]	; (801f060 <tcp_output+0x23c>)
 801ee3a:	488a      	ldr	r0, [pc, #552]	; (801f064 <tcp_output+0x240>)
 801ee3c:	f005 f8c4 	bl	8023fc8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	7d1b      	ldrb	r3, [r3, #20]
 801ee44:	2b01      	cmp	r3, #1
 801ee46:	d106      	bne.n	801ee56 <tcp_output+0x32>
 801ee48:	4b84      	ldr	r3, [pc, #528]	; (801f05c <tcp_output+0x238>)
 801ee4a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801ee4e:	4986      	ldr	r1, [pc, #536]	; (801f068 <tcp_output+0x244>)
 801ee50:	4884      	ldr	r0, [pc, #528]	; (801f064 <tcp_output+0x240>)
 801ee52:	f005 f8b9 	bl	8023fc8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801ee56:	4b85      	ldr	r3, [pc, #532]	; (801f06c <tcp_output+0x248>)
 801ee58:	681b      	ldr	r3, [r3, #0]
 801ee5a:	687a      	ldr	r2, [r7, #4]
 801ee5c:	429a      	cmp	r2, r3
 801ee5e:	d101      	bne.n	801ee64 <tcp_output+0x40>
    return ERR_OK;
 801ee60:	2300      	movs	r3, #0
 801ee62:	e1d1      	b.n	801f208 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801ee64:	687b      	ldr	r3, [r7, #4]
 801ee66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ee70:	4293      	cmp	r3, r2
 801ee72:	bf28      	it	cs
 801ee74:	4613      	movcs	r3, r2
 801ee76:	b29b      	uxth	r3, r3
 801ee78:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801ee7a:	687b      	ldr	r3, [r7, #4]
 801ee7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ee7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801ee80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	d10b      	bne.n	801ee9e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801ee86:	687b      	ldr	r3, [r7, #4]
 801ee88:	8b5b      	ldrh	r3, [r3, #26]
 801ee8a:	f003 0302 	and.w	r3, r3, #2
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	f000 81ad 	beq.w	801f1ee <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 801ee94:	6878      	ldr	r0, [r7, #4]
 801ee96:	f000 fdeb 	bl	801fa70 <tcp_send_empty_ack>
 801ee9a:	4603      	mov	r3, r0
 801ee9c:	e1b4      	b.n	801f208 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801ee9e:	6879      	ldr	r1, [r7, #4]
 801eea0:	687b      	ldr	r3, [r7, #4]
 801eea2:	3304      	adds	r3, #4
 801eea4:	461a      	mov	r2, r3
 801eea6:	6878      	ldr	r0, [r7, #4]
 801eea8:	f7fe ff8a 	bl	801ddc0 <tcp_route>
 801eeac:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801eeae:	697b      	ldr	r3, [r7, #20]
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	d102      	bne.n	801eeba <tcp_output+0x96>
    return ERR_RTE;
 801eeb4:	f06f 0303 	mvn.w	r3, #3
 801eeb8:	e1a6      	b.n	801f208 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801eeba:	687b      	ldr	r3, [r7, #4]
 801eebc:	2b00      	cmp	r3, #0
 801eebe:	d003      	beq.n	801eec8 <tcp_output+0xa4>
 801eec0:	687b      	ldr	r3, [r7, #4]
 801eec2:	681b      	ldr	r3, [r3, #0]
 801eec4:	2b00      	cmp	r3, #0
 801eec6:	d111      	bne.n	801eeec <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801eec8:	697b      	ldr	r3, [r7, #20]
 801eeca:	2b00      	cmp	r3, #0
 801eecc:	d002      	beq.n	801eed4 <tcp_output+0xb0>
 801eece:	697b      	ldr	r3, [r7, #20]
 801eed0:	3304      	adds	r3, #4
 801eed2:	e000      	b.n	801eed6 <tcp_output+0xb2>
 801eed4:	2300      	movs	r3, #0
 801eed6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801eed8:	693b      	ldr	r3, [r7, #16]
 801eeda:	2b00      	cmp	r3, #0
 801eedc:	d102      	bne.n	801eee4 <tcp_output+0xc0>
      return ERR_RTE;
 801eede:	f06f 0303 	mvn.w	r3, #3
 801eee2:	e191      	b.n	801f208 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801eee4:	693b      	ldr	r3, [r7, #16]
 801eee6:	681a      	ldr	r2, [r3, #0]
 801eee8:	687b      	ldr	r3, [r7, #4]
 801eeea:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801eeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eeee:	691b      	ldr	r3, [r3, #16]
 801eef0:	685b      	ldr	r3, [r3, #4]
 801eef2:	4618      	mov	r0, r3
 801eef4:	f7f8 fb0b 	bl	801750e <lwip_htonl>
 801eef8:	4602      	mov	r2, r0
 801eefa:	687b      	ldr	r3, [r7, #4]
 801eefc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801eefe:	1ad3      	subs	r3, r2, r3
 801ef00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ef02:	8912      	ldrh	r2, [r2, #8]
 801ef04:	4413      	add	r3, r2
 801ef06:	69ba      	ldr	r2, [r7, #24]
 801ef08:	429a      	cmp	r2, r3
 801ef0a:	d227      	bcs.n	801ef5c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801ef0c:	687b      	ldr	r3, [r7, #4]
 801ef0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ef12:	461a      	mov	r2, r3
 801ef14:	69bb      	ldr	r3, [r7, #24]
 801ef16:	4293      	cmp	r3, r2
 801ef18:	d114      	bne.n	801ef44 <tcp_output+0x120>
 801ef1a:	687b      	ldr	r3, [r7, #4]
 801ef1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ef1e:	2b00      	cmp	r3, #0
 801ef20:	d110      	bne.n	801ef44 <tcp_output+0x120>
 801ef22:	687b      	ldr	r3, [r7, #4]
 801ef24:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801ef28:	2b00      	cmp	r3, #0
 801ef2a:	d10b      	bne.n	801ef44 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801ef2c:	687b      	ldr	r3, [r7, #4]
 801ef2e:	2200      	movs	r2, #0
 801ef30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801ef34:	687b      	ldr	r3, [r7, #4]
 801ef36:	2201      	movs	r2, #1
 801ef38:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	2200      	movs	r2, #0
 801ef40:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	8b5b      	ldrh	r3, [r3, #26]
 801ef48:	f003 0302 	and.w	r3, r3, #2
 801ef4c:	2b00      	cmp	r3, #0
 801ef4e:	f000 8150 	beq.w	801f1f2 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 801ef52:	6878      	ldr	r0, [r7, #4]
 801ef54:	f000 fd8c 	bl	801fa70 <tcp_send_empty_ack>
 801ef58:	4603      	mov	r3, r0
 801ef5a:	e155      	b.n	801f208 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801ef5c:	687b      	ldr	r3, [r7, #4]
 801ef5e:	2200      	movs	r2, #0
 801ef60:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ef68:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801ef6a:	6a3b      	ldr	r3, [r7, #32]
 801ef6c:	2b00      	cmp	r3, #0
 801ef6e:	f000 811f 	beq.w	801f1b0 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 801ef72:	e002      	b.n	801ef7a <tcp_output+0x156>
 801ef74:	6a3b      	ldr	r3, [r7, #32]
 801ef76:	681b      	ldr	r3, [r3, #0]
 801ef78:	623b      	str	r3, [r7, #32]
 801ef7a:	6a3b      	ldr	r3, [r7, #32]
 801ef7c:	681b      	ldr	r3, [r3, #0]
 801ef7e:	2b00      	cmp	r3, #0
 801ef80:	d1f8      	bne.n	801ef74 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801ef82:	e115      	b.n	801f1b0 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801ef84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef86:	691b      	ldr	r3, [r3, #16]
 801ef88:	899b      	ldrh	r3, [r3, #12]
 801ef8a:	b29b      	uxth	r3, r3
 801ef8c:	4618      	mov	r0, r3
 801ef8e:	f7f8 faa9 	bl	80174e4 <lwip_htons>
 801ef92:	4603      	mov	r3, r0
 801ef94:	b2db      	uxtb	r3, r3
 801ef96:	f003 0304 	and.w	r3, r3, #4
 801ef9a:	2b00      	cmp	r3, #0
 801ef9c:	d006      	beq.n	801efac <tcp_output+0x188>
 801ef9e:	4b2f      	ldr	r3, [pc, #188]	; (801f05c <tcp_output+0x238>)
 801efa0:	f240 5236 	movw	r2, #1334	; 0x536
 801efa4:	4932      	ldr	r1, [pc, #200]	; (801f070 <tcp_output+0x24c>)
 801efa6:	482f      	ldr	r0, [pc, #188]	; (801f064 <tcp_output+0x240>)
 801efa8:	f005 f80e 	bl	8023fc8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801efac:	687b      	ldr	r3, [r7, #4]
 801efae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801efb0:	2b00      	cmp	r3, #0
 801efb2:	d01f      	beq.n	801eff4 <tcp_output+0x1d0>
 801efb4:	687b      	ldr	r3, [r7, #4]
 801efb6:	8b5b      	ldrh	r3, [r3, #26]
 801efb8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	d119      	bne.n	801eff4 <tcp_output+0x1d0>
 801efc0:	687b      	ldr	r3, [r7, #4]
 801efc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	d00b      	beq.n	801efe0 <tcp_output+0x1bc>
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801efcc:	681b      	ldr	r3, [r3, #0]
 801efce:	2b00      	cmp	r3, #0
 801efd0:	d110      	bne.n	801eff4 <tcp_output+0x1d0>
 801efd2:	687b      	ldr	r3, [r7, #4]
 801efd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801efd6:	891a      	ldrh	r2, [r3, #8]
 801efd8:	687b      	ldr	r3, [r7, #4]
 801efda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801efdc:	429a      	cmp	r2, r3
 801efde:	d209      	bcs.n	801eff4 <tcp_output+0x1d0>
 801efe0:	687b      	ldr	r3, [r7, #4]
 801efe2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801efe6:	2b00      	cmp	r3, #0
 801efe8:	d004      	beq.n	801eff4 <tcp_output+0x1d0>
 801efea:	687b      	ldr	r3, [r7, #4]
 801efec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801eff0:	2b08      	cmp	r3, #8
 801eff2:	d901      	bls.n	801eff8 <tcp_output+0x1d4>
 801eff4:	2301      	movs	r3, #1
 801eff6:	e000      	b.n	801effa <tcp_output+0x1d6>
 801eff8:	2300      	movs	r3, #0
 801effa:	2b00      	cmp	r3, #0
 801effc:	d106      	bne.n	801f00c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801effe:	687b      	ldr	r3, [r7, #4]
 801f000:	8b5b      	ldrh	r3, [r3, #26]
 801f002:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801f006:	2b00      	cmp	r3, #0
 801f008:	f000 80e7 	beq.w	801f1da <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	7d1b      	ldrb	r3, [r3, #20]
 801f010:	2b02      	cmp	r3, #2
 801f012:	d00d      	beq.n	801f030 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801f014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f016:	691b      	ldr	r3, [r3, #16]
 801f018:	899b      	ldrh	r3, [r3, #12]
 801f01a:	b29c      	uxth	r4, r3
 801f01c:	2010      	movs	r0, #16
 801f01e:	f7f8 fa61 	bl	80174e4 <lwip_htons>
 801f022:	4603      	mov	r3, r0
 801f024:	461a      	mov	r2, r3
 801f026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f028:	691b      	ldr	r3, [r3, #16]
 801f02a:	4322      	orrs	r2, r4
 801f02c:	b292      	uxth	r2, r2
 801f02e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801f030:	697a      	ldr	r2, [r7, #20]
 801f032:	6879      	ldr	r1, [r7, #4]
 801f034:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f036:	f000 f90b 	bl	801f250 <tcp_output_segment>
 801f03a:	4603      	mov	r3, r0
 801f03c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801f03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f042:	2b00      	cmp	r3, #0
 801f044:	d016      	beq.n	801f074 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f046:	687b      	ldr	r3, [r7, #4]
 801f048:	8b5b      	ldrh	r3, [r3, #26]
 801f04a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f04e:	b29a      	uxth	r2, r3
 801f050:	687b      	ldr	r3, [r7, #4]
 801f052:	835a      	strh	r2, [r3, #26]
      return err;
 801f054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f058:	e0d6      	b.n	801f208 <tcp_output+0x3e4>
 801f05a:	bf00      	nop
 801f05c:	08027d5c 	.word	0x08027d5c
 801f060:	080282fc 	.word	0x080282fc
 801f064:	08027db0 	.word	0x08027db0
 801f068:	08028314 	.word	0x08028314
 801f06c:	2007ee08 	.word	0x2007ee08
 801f070:	0802833c 	.word	0x0802833c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 801f074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f076:	2200      	movs	r2, #0
 801f078:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801f07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f07c:	681a      	ldr	r2, [r3, #0]
 801f07e:	687b      	ldr	r3, [r7, #4]
 801f080:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801f082:	687b      	ldr	r3, [r7, #4]
 801f084:	7d1b      	ldrb	r3, [r3, #20]
 801f086:	2b02      	cmp	r3, #2
 801f088:	d006      	beq.n	801f098 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	8b5b      	ldrh	r3, [r3, #26]
 801f08e:	f023 0303 	bic.w	r3, r3, #3
 801f092:	b29a      	uxth	r2, r3
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f09a:	691b      	ldr	r3, [r3, #16]
 801f09c:	685b      	ldr	r3, [r3, #4]
 801f09e:	4618      	mov	r0, r3
 801f0a0:	f7f8 fa35 	bl	801750e <lwip_htonl>
 801f0a4:	4604      	mov	r4, r0
 801f0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0a8:	891b      	ldrh	r3, [r3, #8]
 801f0aa:	461d      	mov	r5, r3
 801f0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0ae:	691b      	ldr	r3, [r3, #16]
 801f0b0:	899b      	ldrh	r3, [r3, #12]
 801f0b2:	b29b      	uxth	r3, r3
 801f0b4:	4618      	mov	r0, r3
 801f0b6:	f7f8 fa15 	bl	80174e4 <lwip_htons>
 801f0ba:	4603      	mov	r3, r0
 801f0bc:	b2db      	uxtb	r3, r3
 801f0be:	f003 0303 	and.w	r3, r3, #3
 801f0c2:	2b00      	cmp	r3, #0
 801f0c4:	d001      	beq.n	801f0ca <tcp_output+0x2a6>
 801f0c6:	2301      	movs	r3, #1
 801f0c8:	e000      	b.n	801f0cc <tcp_output+0x2a8>
 801f0ca:	2300      	movs	r3, #0
 801f0cc:	442b      	add	r3, r5
 801f0ce:	4423      	add	r3, r4
 801f0d0:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f0d6:	68bb      	ldr	r3, [r7, #8]
 801f0d8:	1ad3      	subs	r3, r2, r3
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	da02      	bge.n	801f0e4 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	68ba      	ldr	r2, [r7, #8]
 801f0e2:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801f0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0e6:	891b      	ldrh	r3, [r3, #8]
 801f0e8:	461c      	mov	r4, r3
 801f0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f0ec:	691b      	ldr	r3, [r3, #16]
 801f0ee:	899b      	ldrh	r3, [r3, #12]
 801f0f0:	b29b      	uxth	r3, r3
 801f0f2:	4618      	mov	r0, r3
 801f0f4:	f7f8 f9f6 	bl	80174e4 <lwip_htons>
 801f0f8:	4603      	mov	r3, r0
 801f0fa:	b2db      	uxtb	r3, r3
 801f0fc:	f003 0303 	and.w	r3, r3, #3
 801f100:	2b00      	cmp	r3, #0
 801f102:	d001      	beq.n	801f108 <tcp_output+0x2e4>
 801f104:	2301      	movs	r3, #1
 801f106:	e000      	b.n	801f10a <tcp_output+0x2e6>
 801f108:	2300      	movs	r3, #0
 801f10a:	4423      	add	r3, r4
 801f10c:	2b00      	cmp	r3, #0
 801f10e:	d049      	beq.n	801f1a4 <tcp_output+0x380>
      seg->next = NULL;
 801f110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f112:	2200      	movs	r2, #0
 801f114:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801f116:	687b      	ldr	r3, [r7, #4]
 801f118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f11a:	2b00      	cmp	r3, #0
 801f11c:	d105      	bne.n	801f12a <tcp_output+0x306>
        pcb->unacked = seg;
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f122:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801f124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f126:	623b      	str	r3, [r7, #32]
 801f128:	e03f      	b.n	801f1aa <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801f12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f12c:	691b      	ldr	r3, [r3, #16]
 801f12e:	685b      	ldr	r3, [r3, #4]
 801f130:	4618      	mov	r0, r3
 801f132:	f7f8 f9ec 	bl	801750e <lwip_htonl>
 801f136:	4604      	mov	r4, r0
 801f138:	6a3b      	ldr	r3, [r7, #32]
 801f13a:	691b      	ldr	r3, [r3, #16]
 801f13c:	685b      	ldr	r3, [r3, #4]
 801f13e:	4618      	mov	r0, r3
 801f140:	f7f8 f9e5 	bl	801750e <lwip_htonl>
 801f144:	4603      	mov	r3, r0
 801f146:	1ae3      	subs	r3, r4, r3
 801f148:	2b00      	cmp	r3, #0
 801f14a:	da24      	bge.n	801f196 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801f14c:	687b      	ldr	r3, [r7, #4]
 801f14e:	3370      	adds	r3, #112	; 0x70
 801f150:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801f152:	e002      	b.n	801f15a <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801f154:	69fb      	ldr	r3, [r7, #28]
 801f156:	681b      	ldr	r3, [r3, #0]
 801f158:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801f15a:	69fb      	ldr	r3, [r7, #28]
 801f15c:	681b      	ldr	r3, [r3, #0]
 801f15e:	2b00      	cmp	r3, #0
 801f160:	d011      	beq.n	801f186 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801f162:	69fb      	ldr	r3, [r7, #28]
 801f164:	681b      	ldr	r3, [r3, #0]
 801f166:	691b      	ldr	r3, [r3, #16]
 801f168:	685b      	ldr	r3, [r3, #4]
 801f16a:	4618      	mov	r0, r3
 801f16c:	f7f8 f9cf 	bl	801750e <lwip_htonl>
 801f170:	4604      	mov	r4, r0
 801f172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f174:	691b      	ldr	r3, [r3, #16]
 801f176:	685b      	ldr	r3, [r3, #4]
 801f178:	4618      	mov	r0, r3
 801f17a:	f7f8 f9c8 	bl	801750e <lwip_htonl>
 801f17e:	4603      	mov	r3, r0
 801f180:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801f182:	2b00      	cmp	r3, #0
 801f184:	dbe6      	blt.n	801f154 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 801f186:	69fb      	ldr	r3, [r7, #28]
 801f188:	681a      	ldr	r2, [r3, #0]
 801f18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f18c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801f18e:	69fb      	ldr	r3, [r7, #28]
 801f190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f192:	601a      	str	r2, [r3, #0]
 801f194:	e009      	b.n	801f1aa <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801f196:	6a3b      	ldr	r3, [r7, #32]
 801f198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f19a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801f19c:	6a3b      	ldr	r3, [r7, #32]
 801f19e:	681b      	ldr	r3, [r3, #0]
 801f1a0:	623b      	str	r3, [r7, #32]
 801f1a2:	e002      	b.n	801f1aa <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801f1a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f1a6:	f7fb fde6 	bl	801ad76 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801f1aa:	687b      	ldr	r3, [r7, #4]
 801f1ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f1ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801f1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	d012      	beq.n	801f1dc <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801f1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1b8:	691b      	ldr	r3, [r3, #16]
 801f1ba:	685b      	ldr	r3, [r3, #4]
 801f1bc:	4618      	mov	r0, r3
 801f1be:	f7f8 f9a6 	bl	801750e <lwip_htonl>
 801f1c2:	4602      	mov	r2, r0
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f1c8:	1ad3      	subs	r3, r2, r3
 801f1ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f1cc:	8912      	ldrh	r2, [r2, #8]
 801f1ce:	4413      	add	r3, r2
  while (seg != NULL &&
 801f1d0:	69ba      	ldr	r2, [r7, #24]
 801f1d2:	429a      	cmp	r2, r3
 801f1d4:	f4bf aed6 	bcs.w	801ef84 <tcp_output+0x160>
 801f1d8:	e000      	b.n	801f1dc <tcp_output+0x3b8>
      break;
 801f1da:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f1e0:	2b00      	cmp	r3, #0
 801f1e2:	d108      	bne.n	801f1f6 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801f1e4:	687b      	ldr	r3, [r7, #4]
 801f1e6:	2200      	movs	r2, #0
 801f1e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801f1ec:	e004      	b.n	801f1f8 <tcp_output+0x3d4>
    goto output_done;
 801f1ee:	bf00      	nop
 801f1f0:	e002      	b.n	801f1f8 <tcp_output+0x3d4>
    goto output_done;
 801f1f2:	bf00      	nop
 801f1f4:	e000      	b.n	801f1f8 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801f1f6:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f1f8:	687b      	ldr	r3, [r7, #4]
 801f1fa:	8b5b      	ldrh	r3, [r3, #26]
 801f1fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801f200:	b29a      	uxth	r2, r3
 801f202:	687b      	ldr	r3, [r7, #4]
 801f204:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801f206:	2300      	movs	r3, #0
}
 801f208:	4618      	mov	r0, r3
 801f20a:	3728      	adds	r7, #40	; 0x28
 801f20c:	46bd      	mov	sp, r7
 801f20e:	bdb0      	pop	{r4, r5, r7, pc}

0801f210 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801f210:	b580      	push	{r7, lr}
 801f212:	b082      	sub	sp, #8
 801f214:	af00      	add	r7, sp, #0
 801f216:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801f218:	687b      	ldr	r3, [r7, #4]
 801f21a:	2b00      	cmp	r3, #0
 801f21c:	d106      	bne.n	801f22c <tcp_output_segment_busy+0x1c>
 801f21e:	4b09      	ldr	r3, [pc, #36]	; (801f244 <tcp_output_segment_busy+0x34>)
 801f220:	f240 529a 	movw	r2, #1434	; 0x59a
 801f224:	4908      	ldr	r1, [pc, #32]	; (801f248 <tcp_output_segment_busy+0x38>)
 801f226:	4809      	ldr	r0, [pc, #36]	; (801f24c <tcp_output_segment_busy+0x3c>)
 801f228:	f004 fece 	bl	8023fc8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801f22c:	687b      	ldr	r3, [r7, #4]
 801f22e:	685b      	ldr	r3, [r3, #4]
 801f230:	7b9b      	ldrb	r3, [r3, #14]
 801f232:	2b01      	cmp	r3, #1
 801f234:	d001      	beq.n	801f23a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801f236:	2301      	movs	r3, #1
 801f238:	e000      	b.n	801f23c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801f23a:	2300      	movs	r3, #0
}
 801f23c:	4618      	mov	r0, r3
 801f23e:	3708      	adds	r7, #8
 801f240:	46bd      	mov	sp, r7
 801f242:	bd80      	pop	{r7, pc}
 801f244:	08027d5c 	.word	0x08027d5c
 801f248:	08028354 	.word	0x08028354
 801f24c:	08027db0 	.word	0x08027db0

0801f250 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801f250:	b5b0      	push	{r4, r5, r7, lr}
 801f252:	b08c      	sub	sp, #48	; 0x30
 801f254:	af04      	add	r7, sp, #16
 801f256:	60f8      	str	r0, [r7, #12]
 801f258:	60b9      	str	r1, [r7, #8]
 801f25a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801f25c:	68fb      	ldr	r3, [r7, #12]
 801f25e:	2b00      	cmp	r3, #0
 801f260:	d106      	bne.n	801f270 <tcp_output_segment+0x20>
 801f262:	4b68      	ldr	r3, [pc, #416]	; (801f404 <tcp_output_segment+0x1b4>)
 801f264:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801f268:	4967      	ldr	r1, [pc, #412]	; (801f408 <tcp_output_segment+0x1b8>)
 801f26a:	4868      	ldr	r0, [pc, #416]	; (801f40c <tcp_output_segment+0x1bc>)
 801f26c:	f004 feac 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801f270:	68bb      	ldr	r3, [r7, #8]
 801f272:	2b00      	cmp	r3, #0
 801f274:	d106      	bne.n	801f284 <tcp_output_segment+0x34>
 801f276:	4b63      	ldr	r3, [pc, #396]	; (801f404 <tcp_output_segment+0x1b4>)
 801f278:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801f27c:	4964      	ldr	r1, [pc, #400]	; (801f410 <tcp_output_segment+0x1c0>)
 801f27e:	4863      	ldr	r0, [pc, #396]	; (801f40c <tcp_output_segment+0x1bc>)
 801f280:	f004 fea2 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801f284:	687b      	ldr	r3, [r7, #4]
 801f286:	2b00      	cmp	r3, #0
 801f288:	d106      	bne.n	801f298 <tcp_output_segment+0x48>
 801f28a:	4b5e      	ldr	r3, [pc, #376]	; (801f404 <tcp_output_segment+0x1b4>)
 801f28c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801f290:	4960      	ldr	r1, [pc, #384]	; (801f414 <tcp_output_segment+0x1c4>)
 801f292:	485e      	ldr	r0, [pc, #376]	; (801f40c <tcp_output_segment+0x1bc>)
 801f294:	f004 fe98 	bl	8023fc8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801f298:	68f8      	ldr	r0, [r7, #12]
 801f29a:	f7ff ffb9 	bl	801f210 <tcp_output_segment_busy>
 801f29e:	4603      	mov	r3, r0
 801f2a0:	2b00      	cmp	r3, #0
 801f2a2:	d001      	beq.n	801f2a8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801f2a4:	2300      	movs	r3, #0
 801f2a6:	e0a9      	b.n	801f3fc <tcp_output_segment+0x1ac>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801f2a8:	68bb      	ldr	r3, [r7, #8]
 801f2aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f2ac:	68fb      	ldr	r3, [r7, #12]
 801f2ae:	691c      	ldr	r4, [r3, #16]
 801f2b0:	4610      	mov	r0, r2
 801f2b2:	f7f8 f92c 	bl	801750e <lwip_htonl>
 801f2b6:	4603      	mov	r3, r0
 801f2b8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801f2ba:	68bb      	ldr	r3, [r7, #8]
 801f2bc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801f2be:	68fb      	ldr	r3, [r7, #12]
 801f2c0:	691c      	ldr	r4, [r3, #16]
 801f2c2:	4610      	mov	r0, r2
 801f2c4:	f7f8 f90e 	bl	80174e4 <lwip_htons>
 801f2c8:	4603      	mov	r3, r0
 801f2ca:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f2cc:	68bb      	ldr	r3, [r7, #8]
 801f2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f2d0:	68ba      	ldr	r2, [r7, #8]
 801f2d2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801f2d4:	441a      	add	r2, r3
 801f2d6:	68bb      	ldr	r3, [r7, #8]
 801f2d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801f2da:	68fb      	ldr	r3, [r7, #12]
 801f2dc:	691b      	ldr	r3, [r3, #16]
 801f2de:	3314      	adds	r3, #20
 801f2e0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801f2e2:	68fb      	ldr	r3, [r7, #12]
 801f2e4:	7b1b      	ldrb	r3, [r3, #12]
 801f2e6:	f003 0301 	and.w	r3, r3, #1
 801f2ea:	2b00      	cmp	r3, #0
 801f2ec:	d015      	beq.n	801f31a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801f2ee:	68bb      	ldr	r3, [r7, #8]
 801f2f0:	3304      	adds	r3, #4
 801f2f2:	461a      	mov	r2, r3
 801f2f4:	6879      	ldr	r1, [r7, #4]
 801f2f6:	f44f 7006 	mov.w	r0, #536	; 0x218
 801f2fa:	f7fc f92b 	bl	801b554 <tcp_eff_send_mss_netif>
 801f2fe:	4603      	mov	r3, r0
 801f300:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801f302:	8b7b      	ldrh	r3, [r7, #26]
 801f304:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801f308:	4618      	mov	r0, r3
 801f30a:	f7f8 f900 	bl	801750e <lwip_htonl>
 801f30e:	4602      	mov	r2, r0
 801f310:	69fb      	ldr	r3, [r7, #28]
 801f312:	601a      	str	r2, [r3, #0]
    opts += 1;
 801f314:	69fb      	ldr	r3, [r7, #28]
 801f316:	3304      	adds	r3, #4
 801f318:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801f31a:	68bb      	ldr	r3, [r7, #8]
 801f31c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801f320:	2b00      	cmp	r3, #0
 801f322:	da02      	bge.n	801f32a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801f324:	68bb      	ldr	r3, [r7, #8]
 801f326:	2200      	movs	r2, #0
 801f328:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801f32a:	68bb      	ldr	r3, [r7, #8]
 801f32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f32e:	2b00      	cmp	r3, #0
 801f330:	d10c      	bne.n	801f34c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801f332:	4b39      	ldr	r3, [pc, #228]	; (801f418 <tcp_output_segment+0x1c8>)
 801f334:	681a      	ldr	r2, [r3, #0]
 801f336:	68bb      	ldr	r3, [r7, #8]
 801f338:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801f33a:	68fb      	ldr	r3, [r7, #12]
 801f33c:	691b      	ldr	r3, [r3, #16]
 801f33e:	685b      	ldr	r3, [r3, #4]
 801f340:	4618      	mov	r0, r3
 801f342:	f7f8 f8e4 	bl	801750e <lwip_htonl>
 801f346:	4602      	mov	r2, r0
 801f348:	68bb      	ldr	r3, [r7, #8]
 801f34a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f34c:	68fb      	ldr	r3, [r7, #12]
 801f34e:	691a      	ldr	r2, [r3, #16]
 801f350:	68fb      	ldr	r3, [r7, #12]
 801f352:	685b      	ldr	r3, [r3, #4]
 801f354:	685b      	ldr	r3, [r3, #4]
 801f356:	1ad3      	subs	r3, r2, r3
 801f358:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801f35a:	68fb      	ldr	r3, [r7, #12]
 801f35c:	685b      	ldr	r3, [r3, #4]
 801f35e:	8959      	ldrh	r1, [r3, #10]
 801f360:	68fb      	ldr	r3, [r7, #12]
 801f362:	685b      	ldr	r3, [r3, #4]
 801f364:	8b3a      	ldrh	r2, [r7, #24]
 801f366:	1a8a      	subs	r2, r1, r2
 801f368:	b292      	uxth	r2, r2
 801f36a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801f36c:	68fb      	ldr	r3, [r7, #12]
 801f36e:	685b      	ldr	r3, [r3, #4]
 801f370:	8919      	ldrh	r1, [r3, #8]
 801f372:	68fb      	ldr	r3, [r7, #12]
 801f374:	685b      	ldr	r3, [r3, #4]
 801f376:	8b3a      	ldrh	r2, [r7, #24]
 801f378:	1a8a      	subs	r2, r1, r2
 801f37a:	b292      	uxth	r2, r2
 801f37c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801f37e:	68fb      	ldr	r3, [r7, #12]
 801f380:	685b      	ldr	r3, [r3, #4]
 801f382:	68fa      	ldr	r2, [r7, #12]
 801f384:	6912      	ldr	r2, [r2, #16]
 801f386:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801f388:	68fb      	ldr	r3, [r7, #12]
 801f38a:	691b      	ldr	r3, [r3, #16]
 801f38c:	2200      	movs	r2, #0
 801f38e:	741a      	strb	r2, [r3, #16]
 801f390:	2200      	movs	r2, #0
 801f392:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801f394:	68fb      	ldr	r3, [r7, #12]
 801f396:	691a      	ldr	r2, [r3, #16]
 801f398:	68fb      	ldr	r3, [r7, #12]
 801f39a:	7b1b      	ldrb	r3, [r3, #12]
 801f39c:	f003 0301 	and.w	r3, r3, #1
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	d001      	beq.n	801f3a8 <tcp_output_segment+0x158>
 801f3a4:	2318      	movs	r3, #24
 801f3a6:	e000      	b.n	801f3aa <tcp_output_segment+0x15a>
 801f3a8:	2314      	movs	r3, #20
 801f3aa:	4413      	add	r3, r2
 801f3ac:	69fa      	ldr	r2, [r7, #28]
 801f3ae:	429a      	cmp	r2, r3
 801f3b0:	d006      	beq.n	801f3c0 <tcp_output_segment+0x170>
 801f3b2:	4b14      	ldr	r3, [pc, #80]	; (801f404 <tcp_output_segment+0x1b4>)
 801f3b4:	f240 621c 	movw	r2, #1564	; 0x61c
 801f3b8:	4918      	ldr	r1, [pc, #96]	; (801f41c <tcp_output_segment+0x1cc>)
 801f3ba:	4814      	ldr	r0, [pc, #80]	; (801f40c <tcp_output_segment+0x1bc>)
 801f3bc:	f004 fe04 	bl	8023fc8 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 801f3c0:	4b17      	ldr	r3, [pc, #92]	; (801f420 <tcp_output_segment+0x1d0>)
 801f3c2:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 801f3c6:	3301      	adds	r3, #1
 801f3c8:	b29a      	uxth	r2, r3
 801f3ca:	4b15      	ldr	r3, [pc, #84]	; (801f420 <tcp_output_segment+0x1d0>)
 801f3cc:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801f3d0:	68fb      	ldr	r3, [r7, #12]
 801f3d2:	6858      	ldr	r0, [r3, #4]
 801f3d4:	68b9      	ldr	r1, [r7, #8]
 801f3d6:	68bb      	ldr	r3, [r7, #8]
 801f3d8:	1d1c      	adds	r4, r3, #4
 801f3da:	68bb      	ldr	r3, [r7, #8]
 801f3dc:	7add      	ldrb	r5, [r3, #11]
 801f3de:	68bb      	ldr	r3, [r7, #8]
 801f3e0:	7a9b      	ldrb	r3, [r3, #10]
 801f3e2:	687a      	ldr	r2, [r7, #4]
 801f3e4:	9202      	str	r2, [sp, #8]
 801f3e6:	2206      	movs	r2, #6
 801f3e8:	9201      	str	r2, [sp, #4]
 801f3ea:	9300      	str	r3, [sp, #0]
 801f3ec:	462b      	mov	r3, r5
 801f3ee:	4622      	mov	r2, r4
 801f3f0:	f002 ffb4 	bl	802235c <ip4_output_if>
 801f3f4:	4603      	mov	r3, r0
 801f3f6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801f3f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801f3fc:	4618      	mov	r0, r3
 801f3fe:	3720      	adds	r7, #32
 801f400:	46bd      	mov	sp, r7
 801f402:	bdb0      	pop	{r4, r5, r7, pc}
 801f404:	08027d5c 	.word	0x08027d5c
 801f408:	0802837c 	.word	0x0802837c
 801f40c:	08027db0 	.word	0x08027db0
 801f410:	0802839c 	.word	0x0802839c
 801f414:	080283bc 	.word	0x080283bc
 801f418:	2007edb8 	.word	0x2007edb8
 801f41c:	080283e0 	.word	0x080283e0
 801f420:	2007ecb8 	.word	0x2007ecb8

0801f424 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801f424:	b5b0      	push	{r4, r5, r7, lr}
 801f426:	b084      	sub	sp, #16
 801f428:	af00      	add	r7, sp, #0
 801f42a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801f42c:	687b      	ldr	r3, [r7, #4]
 801f42e:	2b00      	cmp	r3, #0
 801f430:	d106      	bne.n	801f440 <tcp_rexmit_rto_prepare+0x1c>
 801f432:	4b36      	ldr	r3, [pc, #216]	; (801f50c <tcp_rexmit_rto_prepare+0xe8>)
 801f434:	f240 6263 	movw	r2, #1635	; 0x663
 801f438:	4935      	ldr	r1, [pc, #212]	; (801f510 <tcp_rexmit_rto_prepare+0xec>)
 801f43a:	4836      	ldr	r0, [pc, #216]	; (801f514 <tcp_rexmit_rto_prepare+0xf0>)
 801f43c:	f004 fdc4 	bl	8023fc8 <iprintf>

  if (pcb->unacked == NULL) {
 801f440:	687b      	ldr	r3, [r7, #4]
 801f442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f444:	2b00      	cmp	r3, #0
 801f446:	d102      	bne.n	801f44e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801f448:	f06f 0305 	mvn.w	r3, #5
 801f44c:	e059      	b.n	801f502 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801f44e:	687b      	ldr	r3, [r7, #4]
 801f450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f452:	60fb      	str	r3, [r7, #12]
 801f454:	e00b      	b.n	801f46e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801f456:	68f8      	ldr	r0, [r7, #12]
 801f458:	f7ff feda 	bl	801f210 <tcp_output_segment_busy>
 801f45c:	4603      	mov	r3, r0
 801f45e:	2b00      	cmp	r3, #0
 801f460:	d002      	beq.n	801f468 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801f462:	f06f 0305 	mvn.w	r3, #5
 801f466:	e04c      	b.n	801f502 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801f468:	68fb      	ldr	r3, [r7, #12]
 801f46a:	681b      	ldr	r3, [r3, #0]
 801f46c:	60fb      	str	r3, [r7, #12]
 801f46e:	68fb      	ldr	r3, [r7, #12]
 801f470:	681b      	ldr	r3, [r3, #0]
 801f472:	2b00      	cmp	r3, #0
 801f474:	d1ef      	bne.n	801f456 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801f476:	68f8      	ldr	r0, [r7, #12]
 801f478:	f7ff feca 	bl	801f210 <tcp_output_segment_busy>
 801f47c:	4603      	mov	r3, r0
 801f47e:	2b00      	cmp	r3, #0
 801f480:	d002      	beq.n	801f488 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801f482:	f06f 0305 	mvn.w	r3, #5
 801f486:	e03c      	b.n	801f502 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801f488:	687b      	ldr	r3, [r7, #4]
 801f48a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801f48c:	68fb      	ldr	r3, [r7, #12]
 801f48e:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f494:	2b00      	cmp	r3, #0
 801f496:	d104      	bne.n	801f4a2 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 801f498:	68fb      	ldr	r3, [r7, #12]
 801f49a:	895a      	ldrh	r2, [r3, #10]
 801f49c:	687b      	ldr	r3, [r7, #4]
 801f49e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801f4a2:	687b      	ldr	r3, [r7, #4]
 801f4a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801f4a6:	687b      	ldr	r3, [r7, #4]
 801f4a8:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801f4aa:	687b      	ldr	r3, [r7, #4]
 801f4ac:	2200      	movs	r2, #0
 801f4ae:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801f4b0:	687b      	ldr	r3, [r7, #4]
 801f4b2:	8b5b      	ldrh	r3, [r3, #26]
 801f4b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801f4b8:	b29a      	uxth	r2, r3
 801f4ba:	687b      	ldr	r3, [r7, #4]
 801f4bc:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f4be:	68fb      	ldr	r3, [r7, #12]
 801f4c0:	691b      	ldr	r3, [r3, #16]
 801f4c2:	685b      	ldr	r3, [r3, #4]
 801f4c4:	4618      	mov	r0, r3
 801f4c6:	f7f8 f822 	bl	801750e <lwip_htonl>
 801f4ca:	4604      	mov	r4, r0
 801f4cc:	68fb      	ldr	r3, [r7, #12]
 801f4ce:	891b      	ldrh	r3, [r3, #8]
 801f4d0:	461d      	mov	r5, r3
 801f4d2:	68fb      	ldr	r3, [r7, #12]
 801f4d4:	691b      	ldr	r3, [r3, #16]
 801f4d6:	899b      	ldrh	r3, [r3, #12]
 801f4d8:	b29b      	uxth	r3, r3
 801f4da:	4618      	mov	r0, r3
 801f4dc:	f7f8 f802 	bl	80174e4 <lwip_htons>
 801f4e0:	4603      	mov	r3, r0
 801f4e2:	b2db      	uxtb	r3, r3
 801f4e4:	f003 0303 	and.w	r3, r3, #3
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	d001      	beq.n	801f4f0 <tcp_rexmit_rto_prepare+0xcc>
 801f4ec:	2301      	movs	r3, #1
 801f4ee:	e000      	b.n	801f4f2 <tcp_rexmit_rto_prepare+0xce>
 801f4f0:	2300      	movs	r3, #0
 801f4f2:	442b      	add	r3, r5
 801f4f4:	18e2      	adds	r2, r4, r3
 801f4f6:	687b      	ldr	r3, [r7, #4]
 801f4f8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801f4fa:	687b      	ldr	r3, [r7, #4]
 801f4fc:	2200      	movs	r2, #0
 801f4fe:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801f500:	2300      	movs	r3, #0
}
 801f502:	4618      	mov	r0, r3
 801f504:	3710      	adds	r7, #16
 801f506:	46bd      	mov	sp, r7
 801f508:	bdb0      	pop	{r4, r5, r7, pc}
 801f50a:	bf00      	nop
 801f50c:	08027d5c 	.word	0x08027d5c
 801f510:	080283f4 	.word	0x080283f4
 801f514:	08027db0 	.word	0x08027db0

0801f518 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801f518:	b580      	push	{r7, lr}
 801f51a:	b082      	sub	sp, #8
 801f51c:	af00      	add	r7, sp, #0
 801f51e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	2b00      	cmp	r3, #0
 801f524:	d106      	bne.n	801f534 <tcp_rexmit_rto_commit+0x1c>
 801f526:	4b0d      	ldr	r3, [pc, #52]	; (801f55c <tcp_rexmit_rto_commit+0x44>)
 801f528:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801f52c:	490c      	ldr	r1, [pc, #48]	; (801f560 <tcp_rexmit_rto_commit+0x48>)
 801f52e:	480d      	ldr	r0, [pc, #52]	; (801f564 <tcp_rexmit_rto_commit+0x4c>)
 801f530:	f004 fd4a 	bl	8023fc8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801f534:	687b      	ldr	r3, [r7, #4]
 801f536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f53a:	2bff      	cmp	r3, #255	; 0xff
 801f53c:	d007      	beq.n	801f54e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801f53e:	687b      	ldr	r3, [r7, #4]
 801f540:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f544:	3301      	adds	r3, #1
 801f546:	b2da      	uxtb	r2, r3
 801f548:	687b      	ldr	r3, [r7, #4]
 801f54a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801f54e:	6878      	ldr	r0, [r7, #4]
 801f550:	f7ff fc68 	bl	801ee24 <tcp_output>
}
 801f554:	bf00      	nop
 801f556:	3708      	adds	r7, #8
 801f558:	46bd      	mov	sp, r7
 801f55a:	bd80      	pop	{r7, pc}
 801f55c:	08027d5c 	.word	0x08027d5c
 801f560:	08028418 	.word	0x08028418
 801f564:	08027db0 	.word	0x08027db0

0801f568 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801f568:	b580      	push	{r7, lr}
 801f56a:	b082      	sub	sp, #8
 801f56c:	af00      	add	r7, sp, #0
 801f56e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801f570:	687b      	ldr	r3, [r7, #4]
 801f572:	2b00      	cmp	r3, #0
 801f574:	d106      	bne.n	801f584 <tcp_rexmit_rto+0x1c>
 801f576:	4b0a      	ldr	r3, [pc, #40]	; (801f5a0 <tcp_rexmit_rto+0x38>)
 801f578:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801f57c:	4909      	ldr	r1, [pc, #36]	; (801f5a4 <tcp_rexmit_rto+0x3c>)
 801f57e:	480a      	ldr	r0, [pc, #40]	; (801f5a8 <tcp_rexmit_rto+0x40>)
 801f580:	f004 fd22 	bl	8023fc8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801f584:	6878      	ldr	r0, [r7, #4]
 801f586:	f7ff ff4d 	bl	801f424 <tcp_rexmit_rto_prepare>
 801f58a:	4603      	mov	r3, r0
 801f58c:	2b00      	cmp	r3, #0
 801f58e:	d102      	bne.n	801f596 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801f590:	6878      	ldr	r0, [r7, #4]
 801f592:	f7ff ffc1 	bl	801f518 <tcp_rexmit_rto_commit>
  }
}
 801f596:	bf00      	nop
 801f598:	3708      	adds	r7, #8
 801f59a:	46bd      	mov	sp, r7
 801f59c:	bd80      	pop	{r7, pc}
 801f59e:	bf00      	nop
 801f5a0:	08027d5c 	.word	0x08027d5c
 801f5a4:	0802843c 	.word	0x0802843c
 801f5a8:	08027db0 	.word	0x08027db0

0801f5ac <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801f5ac:	b590      	push	{r4, r7, lr}
 801f5ae:	b085      	sub	sp, #20
 801f5b0:	af00      	add	r7, sp, #0
 801f5b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801f5b4:	687b      	ldr	r3, [r7, #4]
 801f5b6:	2b00      	cmp	r3, #0
 801f5b8:	d106      	bne.n	801f5c8 <tcp_rexmit+0x1c>
 801f5ba:	4b2f      	ldr	r3, [pc, #188]	; (801f678 <tcp_rexmit+0xcc>)
 801f5bc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801f5c0:	492e      	ldr	r1, [pc, #184]	; (801f67c <tcp_rexmit+0xd0>)
 801f5c2:	482f      	ldr	r0, [pc, #188]	; (801f680 <tcp_rexmit+0xd4>)
 801f5c4:	f004 fd00 	bl	8023fc8 <iprintf>

  if (pcb->unacked == NULL) {
 801f5c8:	687b      	ldr	r3, [r7, #4]
 801f5ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f5cc:	2b00      	cmp	r3, #0
 801f5ce:	d102      	bne.n	801f5d6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801f5d0:	f06f 0305 	mvn.w	r3, #5
 801f5d4:	e04c      	b.n	801f670 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801f5d6:	687b      	ldr	r3, [r7, #4]
 801f5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f5da:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801f5dc:	68b8      	ldr	r0, [r7, #8]
 801f5de:	f7ff fe17 	bl	801f210 <tcp_output_segment_busy>
 801f5e2:	4603      	mov	r3, r0
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	d002      	beq.n	801f5ee <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801f5e8:	f06f 0305 	mvn.w	r3, #5
 801f5ec:	e040      	b.n	801f670 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801f5ee:	68bb      	ldr	r3, [r7, #8]
 801f5f0:	681a      	ldr	r2, [r3, #0]
 801f5f2:	687b      	ldr	r3, [r7, #4]
 801f5f4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801f5f6:	687b      	ldr	r3, [r7, #4]
 801f5f8:	336c      	adds	r3, #108	; 0x6c
 801f5fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801f5fc:	e002      	b.n	801f604 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801f5fe:	68fb      	ldr	r3, [r7, #12]
 801f600:	681b      	ldr	r3, [r3, #0]
 801f602:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801f604:	68fb      	ldr	r3, [r7, #12]
 801f606:	681b      	ldr	r3, [r3, #0]
 801f608:	2b00      	cmp	r3, #0
 801f60a:	d011      	beq.n	801f630 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801f60c:	68fb      	ldr	r3, [r7, #12]
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	691b      	ldr	r3, [r3, #16]
 801f612:	685b      	ldr	r3, [r3, #4]
 801f614:	4618      	mov	r0, r3
 801f616:	f7f7 ff7a 	bl	801750e <lwip_htonl>
 801f61a:	4604      	mov	r4, r0
 801f61c:	68bb      	ldr	r3, [r7, #8]
 801f61e:	691b      	ldr	r3, [r3, #16]
 801f620:	685b      	ldr	r3, [r3, #4]
 801f622:	4618      	mov	r0, r3
 801f624:	f7f7 ff73 	bl	801750e <lwip_htonl>
 801f628:	4603      	mov	r3, r0
 801f62a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801f62c:	2b00      	cmp	r3, #0
 801f62e:	dbe6      	blt.n	801f5fe <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801f630:	68fb      	ldr	r3, [r7, #12]
 801f632:	681a      	ldr	r2, [r3, #0]
 801f634:	68bb      	ldr	r3, [r7, #8]
 801f636:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801f638:	68fb      	ldr	r3, [r7, #12]
 801f63a:	68ba      	ldr	r2, [r7, #8]
 801f63c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801f63e:	68bb      	ldr	r3, [r7, #8]
 801f640:	681b      	ldr	r3, [r3, #0]
 801f642:	2b00      	cmp	r3, #0
 801f644:	d103      	bne.n	801f64e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801f646:	687b      	ldr	r3, [r7, #4]
 801f648:	2200      	movs	r2, #0
 801f64a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801f64e:	687b      	ldr	r3, [r7, #4]
 801f650:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f654:	2bff      	cmp	r3, #255	; 0xff
 801f656:	d007      	beq.n	801f668 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801f658:	687b      	ldr	r3, [r7, #4]
 801f65a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801f65e:	3301      	adds	r3, #1
 801f660:	b2da      	uxtb	r2, r3
 801f662:	687b      	ldr	r3, [r7, #4]
 801f664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801f668:	687b      	ldr	r3, [r7, #4]
 801f66a:	2200      	movs	r2, #0
 801f66c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801f66e:	2300      	movs	r3, #0
}
 801f670:	4618      	mov	r0, r3
 801f672:	3714      	adds	r7, #20
 801f674:	46bd      	mov	sp, r7
 801f676:	bd90      	pop	{r4, r7, pc}
 801f678:	08027d5c 	.word	0x08027d5c
 801f67c:	08028458 	.word	0x08028458
 801f680:	08027db0 	.word	0x08027db0

0801f684 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801f684:	b580      	push	{r7, lr}
 801f686:	b082      	sub	sp, #8
 801f688:	af00      	add	r7, sp, #0
 801f68a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	2b00      	cmp	r3, #0
 801f690:	d106      	bne.n	801f6a0 <tcp_rexmit_fast+0x1c>
 801f692:	4b2a      	ldr	r3, [pc, #168]	; (801f73c <tcp_rexmit_fast+0xb8>)
 801f694:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801f698:	4929      	ldr	r1, [pc, #164]	; (801f740 <tcp_rexmit_fast+0xbc>)
 801f69a:	482a      	ldr	r0, [pc, #168]	; (801f744 <tcp_rexmit_fast+0xc0>)
 801f69c:	f004 fc94 	bl	8023fc8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801f6a0:	687b      	ldr	r3, [r7, #4]
 801f6a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f6a4:	2b00      	cmp	r3, #0
 801f6a6:	d044      	beq.n	801f732 <tcp_rexmit_fast+0xae>
 801f6a8:	687b      	ldr	r3, [r7, #4]
 801f6aa:	8b5b      	ldrh	r3, [r3, #26]
 801f6ac:	f003 0304 	and.w	r3, r3, #4
 801f6b0:	2b00      	cmp	r3, #0
 801f6b2:	d13e      	bne.n	801f732 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801f6b4:	6878      	ldr	r0, [r7, #4]
 801f6b6:	f7ff ff79 	bl	801f5ac <tcp_rexmit>
 801f6ba:	4603      	mov	r3, r0
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	d138      	bne.n	801f732 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f6c0:	687b      	ldr	r3, [r7, #4]
 801f6c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801f6c6:	687b      	ldr	r3, [r7, #4]
 801f6c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801f6cc:	4293      	cmp	r3, r2
 801f6ce:	bf28      	it	cs
 801f6d0:	4613      	movcs	r3, r2
 801f6d2:	b29b      	uxth	r3, r3
 801f6d4:	0fda      	lsrs	r2, r3, #31
 801f6d6:	4413      	add	r3, r2
 801f6d8:	105b      	asrs	r3, r3, #1
 801f6da:	b29a      	uxth	r2, r3
 801f6dc:	687b      	ldr	r3, [r7, #4]
 801f6de:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801f6e8:	461a      	mov	r2, r3
 801f6ea:	687b      	ldr	r3, [r7, #4]
 801f6ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f6ee:	005b      	lsls	r3, r3, #1
 801f6f0:	429a      	cmp	r2, r3
 801f6f2:	d206      	bcs.n	801f702 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801f6f4:	687b      	ldr	r3, [r7, #4]
 801f6f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f6f8:	005b      	lsls	r3, r3, #1
 801f6fa:	b29a      	uxth	r2, r3
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801f702:	687b      	ldr	r3, [r7, #4]
 801f704:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801f708:	687b      	ldr	r3, [r7, #4]
 801f70a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f70c:	4619      	mov	r1, r3
 801f70e:	0049      	lsls	r1, r1, #1
 801f710:	440b      	add	r3, r1
 801f712:	b29b      	uxth	r3, r3
 801f714:	4413      	add	r3, r2
 801f716:	b29a      	uxth	r2, r3
 801f718:	687b      	ldr	r3, [r7, #4]
 801f71a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	8b5b      	ldrh	r3, [r3, #26]
 801f722:	f043 0304 	orr.w	r3, r3, #4
 801f726:	b29a      	uxth	r2, r3
 801f728:	687b      	ldr	r3, [r7, #4]
 801f72a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801f72c:	687b      	ldr	r3, [r7, #4]
 801f72e:	2200      	movs	r2, #0
 801f730:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801f732:	bf00      	nop
 801f734:	3708      	adds	r7, #8
 801f736:	46bd      	mov	sp, r7
 801f738:	bd80      	pop	{r7, pc}
 801f73a:	bf00      	nop
 801f73c:	08027d5c 	.word	0x08027d5c
 801f740:	08028470 	.word	0x08028470
 801f744:	08027db0 	.word	0x08027db0

0801f748 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801f748:	b580      	push	{r7, lr}
 801f74a:	b086      	sub	sp, #24
 801f74c:	af00      	add	r7, sp, #0
 801f74e:	60f8      	str	r0, [r7, #12]
 801f750:	607b      	str	r3, [r7, #4]
 801f752:	460b      	mov	r3, r1
 801f754:	817b      	strh	r3, [r7, #10]
 801f756:	4613      	mov	r3, r2
 801f758:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801f75a:	897a      	ldrh	r2, [r7, #10]
 801f75c:	893b      	ldrh	r3, [r7, #8]
 801f75e:	4413      	add	r3, r2
 801f760:	b29b      	uxth	r3, r3
 801f762:	3314      	adds	r3, #20
 801f764:	b29b      	uxth	r3, r3
 801f766:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f76a:	4619      	mov	r1, r3
 801f76c:	2022      	movs	r0, #34	; 0x22
 801f76e:	f7f9 fa73 	bl	8018c58 <pbuf_alloc>
 801f772:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801f774:	697b      	ldr	r3, [r7, #20]
 801f776:	2b00      	cmp	r3, #0
 801f778:	d04d      	beq.n	801f816 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801f77a:	897b      	ldrh	r3, [r7, #10]
 801f77c:	3313      	adds	r3, #19
 801f77e:	697a      	ldr	r2, [r7, #20]
 801f780:	8952      	ldrh	r2, [r2, #10]
 801f782:	4293      	cmp	r3, r2
 801f784:	db06      	blt.n	801f794 <tcp_output_alloc_header_common+0x4c>
 801f786:	4b26      	ldr	r3, [pc, #152]	; (801f820 <tcp_output_alloc_header_common+0xd8>)
 801f788:	f240 7223 	movw	r2, #1827	; 0x723
 801f78c:	4925      	ldr	r1, [pc, #148]	; (801f824 <tcp_output_alloc_header_common+0xdc>)
 801f78e:	4826      	ldr	r0, [pc, #152]	; (801f828 <tcp_output_alloc_header_common+0xe0>)
 801f790:	f004 fc1a 	bl	8023fc8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801f794:	697b      	ldr	r3, [r7, #20]
 801f796:	685b      	ldr	r3, [r3, #4]
 801f798:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801f79a:	8c3b      	ldrh	r3, [r7, #32]
 801f79c:	4618      	mov	r0, r3
 801f79e:	f7f7 fea1 	bl	80174e4 <lwip_htons>
 801f7a2:	4603      	mov	r3, r0
 801f7a4:	461a      	mov	r2, r3
 801f7a6:	693b      	ldr	r3, [r7, #16]
 801f7a8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801f7aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f7ac:	4618      	mov	r0, r3
 801f7ae:	f7f7 fe99 	bl	80174e4 <lwip_htons>
 801f7b2:	4603      	mov	r3, r0
 801f7b4:	461a      	mov	r2, r3
 801f7b6:	693b      	ldr	r3, [r7, #16]
 801f7b8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801f7ba:	693b      	ldr	r3, [r7, #16]
 801f7bc:	687a      	ldr	r2, [r7, #4]
 801f7be:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801f7c0:	68f8      	ldr	r0, [r7, #12]
 801f7c2:	f7f7 fea4 	bl	801750e <lwip_htonl>
 801f7c6:	4602      	mov	r2, r0
 801f7c8:	693b      	ldr	r3, [r7, #16]
 801f7ca:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801f7cc:	897b      	ldrh	r3, [r7, #10]
 801f7ce:	089b      	lsrs	r3, r3, #2
 801f7d0:	b29b      	uxth	r3, r3
 801f7d2:	3305      	adds	r3, #5
 801f7d4:	b29b      	uxth	r3, r3
 801f7d6:	031b      	lsls	r3, r3, #12
 801f7d8:	b29a      	uxth	r2, r3
 801f7da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801f7de:	b29b      	uxth	r3, r3
 801f7e0:	4313      	orrs	r3, r2
 801f7e2:	b29b      	uxth	r3, r3
 801f7e4:	4618      	mov	r0, r3
 801f7e6:	f7f7 fe7d 	bl	80174e4 <lwip_htons>
 801f7ea:	4603      	mov	r3, r0
 801f7ec:	461a      	mov	r2, r3
 801f7ee:	693b      	ldr	r3, [r7, #16]
 801f7f0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801f7f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801f7f4:	4618      	mov	r0, r3
 801f7f6:	f7f7 fe75 	bl	80174e4 <lwip_htons>
 801f7fa:	4603      	mov	r3, r0
 801f7fc:	461a      	mov	r2, r3
 801f7fe:	693b      	ldr	r3, [r7, #16]
 801f800:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801f802:	693b      	ldr	r3, [r7, #16]
 801f804:	2200      	movs	r2, #0
 801f806:	741a      	strb	r2, [r3, #16]
 801f808:	2200      	movs	r2, #0
 801f80a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801f80c:	693b      	ldr	r3, [r7, #16]
 801f80e:	2200      	movs	r2, #0
 801f810:	749a      	strb	r2, [r3, #18]
 801f812:	2200      	movs	r2, #0
 801f814:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801f816:	697b      	ldr	r3, [r7, #20]
}
 801f818:	4618      	mov	r0, r3
 801f81a:	3718      	adds	r7, #24
 801f81c:	46bd      	mov	sp, r7
 801f81e:	bd80      	pop	{r7, pc}
 801f820:	08027d5c 	.word	0x08027d5c
 801f824:	08028490 	.word	0x08028490
 801f828:	08027db0 	.word	0x08027db0

0801f82c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801f82c:	b5b0      	push	{r4, r5, r7, lr}
 801f82e:	b08a      	sub	sp, #40	; 0x28
 801f830:	af04      	add	r7, sp, #16
 801f832:	60f8      	str	r0, [r7, #12]
 801f834:	607b      	str	r3, [r7, #4]
 801f836:	460b      	mov	r3, r1
 801f838:	817b      	strh	r3, [r7, #10]
 801f83a:	4613      	mov	r3, r2
 801f83c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801f83e:	68fb      	ldr	r3, [r7, #12]
 801f840:	2b00      	cmp	r3, #0
 801f842:	d106      	bne.n	801f852 <tcp_output_alloc_header+0x26>
 801f844:	4b15      	ldr	r3, [pc, #84]	; (801f89c <tcp_output_alloc_header+0x70>)
 801f846:	f240 7242 	movw	r2, #1858	; 0x742
 801f84a:	4915      	ldr	r1, [pc, #84]	; (801f8a0 <tcp_output_alloc_header+0x74>)
 801f84c:	4815      	ldr	r0, [pc, #84]	; (801f8a4 <tcp_output_alloc_header+0x78>)
 801f84e:	f004 fbbb 	bl	8023fc8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801f852:	68fb      	ldr	r3, [r7, #12]
 801f854:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801f856:	68fb      	ldr	r3, [r7, #12]
 801f858:	8adb      	ldrh	r3, [r3, #22]
 801f85a:	68fa      	ldr	r2, [r7, #12]
 801f85c:	8b12      	ldrh	r2, [r2, #24]
 801f85e:	68f9      	ldr	r1, [r7, #12]
 801f860:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801f862:	893d      	ldrh	r5, [r7, #8]
 801f864:	897c      	ldrh	r4, [r7, #10]
 801f866:	9103      	str	r1, [sp, #12]
 801f868:	2110      	movs	r1, #16
 801f86a:	9102      	str	r1, [sp, #8]
 801f86c:	9201      	str	r2, [sp, #4]
 801f86e:	9300      	str	r3, [sp, #0]
 801f870:	687b      	ldr	r3, [r7, #4]
 801f872:	462a      	mov	r2, r5
 801f874:	4621      	mov	r1, r4
 801f876:	f7ff ff67 	bl	801f748 <tcp_output_alloc_header_common>
 801f87a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801f87c:	697b      	ldr	r3, [r7, #20]
 801f87e:	2b00      	cmp	r3, #0
 801f880:	d006      	beq.n	801f890 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f882:	68fb      	ldr	r3, [r7, #12]
 801f884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f886:	68fa      	ldr	r2, [r7, #12]
 801f888:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801f88a:	441a      	add	r2, r3
 801f88c:	68fb      	ldr	r3, [r7, #12]
 801f88e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801f890:	697b      	ldr	r3, [r7, #20]
}
 801f892:	4618      	mov	r0, r3
 801f894:	3718      	adds	r7, #24
 801f896:	46bd      	mov	sp, r7
 801f898:	bdb0      	pop	{r4, r5, r7, pc}
 801f89a:	bf00      	nop
 801f89c:	08027d5c 	.word	0x08027d5c
 801f8a0:	080284c0 	.word	0x080284c0
 801f8a4:	08027db0 	.word	0x08027db0

0801f8a8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801f8a8:	b580      	push	{r7, lr}
 801f8aa:	b088      	sub	sp, #32
 801f8ac:	af00      	add	r7, sp, #0
 801f8ae:	60f8      	str	r0, [r7, #12]
 801f8b0:	60b9      	str	r1, [r7, #8]
 801f8b2:	4611      	mov	r1, r2
 801f8b4:	461a      	mov	r2, r3
 801f8b6:	460b      	mov	r3, r1
 801f8b8:	71fb      	strb	r3, [r7, #7]
 801f8ba:	4613      	mov	r3, r2
 801f8bc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801f8be:	2300      	movs	r3, #0
 801f8c0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801f8c2:	68bb      	ldr	r3, [r7, #8]
 801f8c4:	2b00      	cmp	r3, #0
 801f8c6:	d106      	bne.n	801f8d6 <tcp_output_fill_options+0x2e>
 801f8c8:	4b12      	ldr	r3, [pc, #72]	; (801f914 <tcp_output_fill_options+0x6c>)
 801f8ca:	f240 7256 	movw	r2, #1878	; 0x756
 801f8ce:	4912      	ldr	r1, [pc, #72]	; (801f918 <tcp_output_fill_options+0x70>)
 801f8d0:	4812      	ldr	r0, [pc, #72]	; (801f91c <tcp_output_fill_options+0x74>)
 801f8d2:	f004 fb79 	bl	8023fc8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801f8d6:	68bb      	ldr	r3, [r7, #8]
 801f8d8:	685b      	ldr	r3, [r3, #4]
 801f8da:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801f8dc:	69bb      	ldr	r3, [r7, #24]
 801f8de:	3314      	adds	r3, #20
 801f8e0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801f8e2:	8bfb      	ldrh	r3, [r7, #30]
 801f8e4:	009b      	lsls	r3, r3, #2
 801f8e6:	461a      	mov	r2, r3
 801f8e8:	79fb      	ldrb	r3, [r7, #7]
 801f8ea:	009b      	lsls	r3, r3, #2
 801f8ec:	f003 0304 	and.w	r3, r3, #4
 801f8f0:	4413      	add	r3, r2
 801f8f2:	3314      	adds	r3, #20
 801f8f4:	69ba      	ldr	r2, [r7, #24]
 801f8f6:	4413      	add	r3, r2
 801f8f8:	697a      	ldr	r2, [r7, #20]
 801f8fa:	429a      	cmp	r2, r3
 801f8fc:	d006      	beq.n	801f90c <tcp_output_fill_options+0x64>
 801f8fe:	4b05      	ldr	r3, [pc, #20]	; (801f914 <tcp_output_fill_options+0x6c>)
 801f900:	f240 7275 	movw	r2, #1909	; 0x775
 801f904:	4906      	ldr	r1, [pc, #24]	; (801f920 <tcp_output_fill_options+0x78>)
 801f906:	4805      	ldr	r0, [pc, #20]	; (801f91c <tcp_output_fill_options+0x74>)
 801f908:	f004 fb5e 	bl	8023fc8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801f90c:	bf00      	nop
 801f90e:	3720      	adds	r7, #32
 801f910:	46bd      	mov	sp, r7
 801f912:	bd80      	pop	{r7, pc}
 801f914:	08027d5c 	.word	0x08027d5c
 801f918:	080284e8 	.word	0x080284e8
 801f91c:	08027db0 	.word	0x08027db0
 801f920:	080283e0 	.word	0x080283e0

0801f924 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801f924:	b580      	push	{r7, lr}
 801f926:	b08a      	sub	sp, #40	; 0x28
 801f928:	af04      	add	r7, sp, #16
 801f92a:	60f8      	str	r0, [r7, #12]
 801f92c:	60b9      	str	r1, [r7, #8]
 801f92e:	607a      	str	r2, [r7, #4]
 801f930:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801f932:	68bb      	ldr	r3, [r7, #8]
 801f934:	2b00      	cmp	r3, #0
 801f936:	d106      	bne.n	801f946 <tcp_output_control_segment+0x22>
 801f938:	4b20      	ldr	r3, [pc, #128]	; (801f9bc <tcp_output_control_segment+0x98>)
 801f93a:	f240 7287 	movw	r2, #1927	; 0x787
 801f93e:	4920      	ldr	r1, [pc, #128]	; (801f9c0 <tcp_output_control_segment+0x9c>)
 801f940:	4820      	ldr	r0, [pc, #128]	; (801f9c4 <tcp_output_control_segment+0xa0>)
 801f942:	f004 fb41 	bl	8023fc8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801f946:	683a      	ldr	r2, [r7, #0]
 801f948:	6879      	ldr	r1, [r7, #4]
 801f94a:	68f8      	ldr	r0, [r7, #12]
 801f94c:	f7fe fa38 	bl	801ddc0 <tcp_route>
 801f950:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801f952:	693b      	ldr	r3, [r7, #16]
 801f954:	2b00      	cmp	r3, #0
 801f956:	d102      	bne.n	801f95e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801f958:	23fc      	movs	r3, #252	; 0xfc
 801f95a:	75fb      	strb	r3, [r7, #23]
 801f95c:	e024      	b.n	801f9a8 <tcp_output_control_segment+0x84>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801f95e:	68fb      	ldr	r3, [r7, #12]
 801f960:	2b00      	cmp	r3, #0
 801f962:	d006      	beq.n	801f972 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801f964:	68fb      	ldr	r3, [r7, #12]
 801f966:	7adb      	ldrb	r3, [r3, #11]
 801f968:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801f96a:	68fb      	ldr	r3, [r7, #12]
 801f96c:	7a9b      	ldrb	r3, [r3, #10]
 801f96e:	757b      	strb	r3, [r7, #21]
 801f970:	e003      	b.n	801f97a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801f972:	23ff      	movs	r3, #255	; 0xff
 801f974:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801f976:	2300      	movs	r3, #0
 801f978:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 801f97a:	4b13      	ldr	r3, [pc, #76]	; (801f9c8 <tcp_output_control_segment+0xa4>)
 801f97c:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 801f980:	3301      	adds	r3, #1
 801f982:	b29a      	uxth	r2, r3
 801f984:	4b10      	ldr	r3, [pc, #64]	; (801f9c8 <tcp_output_control_segment+0xa4>)
 801f986:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801f98a:	7dba      	ldrb	r2, [r7, #22]
 801f98c:	693b      	ldr	r3, [r7, #16]
 801f98e:	9302      	str	r3, [sp, #8]
 801f990:	2306      	movs	r3, #6
 801f992:	9301      	str	r3, [sp, #4]
 801f994:	7d7b      	ldrb	r3, [r7, #21]
 801f996:	9300      	str	r3, [sp, #0]
 801f998:	4613      	mov	r3, r2
 801f99a:	683a      	ldr	r2, [r7, #0]
 801f99c:	6879      	ldr	r1, [r7, #4]
 801f99e:	68b8      	ldr	r0, [r7, #8]
 801f9a0:	f002 fcdc 	bl	802235c <ip4_output_if>
 801f9a4:	4603      	mov	r3, r0
 801f9a6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801f9a8:	68b8      	ldr	r0, [r7, #8]
 801f9aa:	f7f9 fc39 	bl	8019220 <pbuf_free>
  return err;
 801f9ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801f9b2:	4618      	mov	r0, r3
 801f9b4:	3718      	adds	r7, #24
 801f9b6:	46bd      	mov	sp, r7
 801f9b8:	bd80      	pop	{r7, pc}
 801f9ba:	bf00      	nop
 801f9bc:	08027d5c 	.word	0x08027d5c
 801f9c0:	08028510 	.word	0x08028510
 801f9c4:	08027db0 	.word	0x08027db0
 801f9c8:	2007ecb8 	.word	0x2007ecb8

0801f9cc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801f9cc:	b590      	push	{r4, r7, lr}
 801f9ce:	b08b      	sub	sp, #44	; 0x2c
 801f9d0:	af04      	add	r7, sp, #16
 801f9d2:	60f8      	str	r0, [r7, #12]
 801f9d4:	60b9      	str	r1, [r7, #8]
 801f9d6:	607a      	str	r2, [r7, #4]
 801f9d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801f9da:	683b      	ldr	r3, [r7, #0]
 801f9dc:	2b00      	cmp	r3, #0
 801f9de:	d106      	bne.n	801f9ee <tcp_rst+0x22>
 801f9e0:	4b1f      	ldr	r3, [pc, #124]	; (801fa60 <tcp_rst+0x94>)
 801f9e2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801f9e6:	491f      	ldr	r1, [pc, #124]	; (801fa64 <tcp_rst+0x98>)
 801f9e8:	481f      	ldr	r0, [pc, #124]	; (801fa68 <tcp_rst+0x9c>)
 801f9ea:	f004 faed 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801f9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f9f0:	2b00      	cmp	r3, #0
 801f9f2:	d106      	bne.n	801fa02 <tcp_rst+0x36>
 801f9f4:	4b1a      	ldr	r3, [pc, #104]	; (801fa60 <tcp_rst+0x94>)
 801f9f6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801f9fa:	491c      	ldr	r1, [pc, #112]	; (801fa6c <tcp_rst+0xa0>)
 801f9fc:	481a      	ldr	r0, [pc, #104]	; (801fa68 <tcp_rst+0x9c>)
 801f9fe:	f004 fae3 	bl	8023fc8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801fa02:	2300      	movs	r3, #0
 801fa04:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801fa06:	f246 0308 	movw	r3, #24584	; 0x6008
 801fa0a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801fa0c:	7dfb      	ldrb	r3, [r7, #23]
 801fa0e:	b29c      	uxth	r4, r3
 801fa10:	68b8      	ldr	r0, [r7, #8]
 801fa12:	f7f7 fd7c 	bl	801750e <lwip_htonl>
 801fa16:	4602      	mov	r2, r0
 801fa18:	8abb      	ldrh	r3, [r7, #20]
 801fa1a:	9303      	str	r3, [sp, #12]
 801fa1c:	2314      	movs	r3, #20
 801fa1e:	9302      	str	r3, [sp, #8]
 801fa20:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801fa22:	9301      	str	r3, [sp, #4]
 801fa24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801fa26:	9300      	str	r3, [sp, #0]
 801fa28:	4613      	mov	r3, r2
 801fa2a:	2200      	movs	r2, #0
 801fa2c:	4621      	mov	r1, r4
 801fa2e:	6878      	ldr	r0, [r7, #4]
 801fa30:	f7ff fe8a 	bl	801f748 <tcp_output_alloc_header_common>
 801fa34:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801fa36:	693b      	ldr	r3, [r7, #16]
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	d00c      	beq.n	801fa56 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801fa3c:	7dfb      	ldrb	r3, [r7, #23]
 801fa3e:	2200      	movs	r2, #0
 801fa40:	6939      	ldr	r1, [r7, #16]
 801fa42:	68f8      	ldr	r0, [r7, #12]
 801fa44:	f7ff ff30 	bl	801f8a8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801fa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fa4a:	683a      	ldr	r2, [r7, #0]
 801fa4c:	6939      	ldr	r1, [r7, #16]
 801fa4e:	68f8      	ldr	r0, [r7, #12]
 801fa50:	f7ff ff68 	bl	801f924 <tcp_output_control_segment>
 801fa54:	e000      	b.n	801fa58 <tcp_rst+0x8c>
    return;
 801fa56:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801fa58:	371c      	adds	r7, #28
 801fa5a:	46bd      	mov	sp, r7
 801fa5c:	bd90      	pop	{r4, r7, pc}
 801fa5e:	bf00      	nop
 801fa60:	08027d5c 	.word	0x08027d5c
 801fa64:	0802853c 	.word	0x0802853c
 801fa68:	08027db0 	.word	0x08027db0
 801fa6c:	08028558 	.word	0x08028558

0801fa70 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801fa70:	b590      	push	{r4, r7, lr}
 801fa72:	b087      	sub	sp, #28
 801fa74:	af00      	add	r7, sp, #0
 801fa76:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801fa78:	2300      	movs	r3, #0
 801fa7a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801fa7c:	2300      	movs	r3, #0
 801fa7e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801fa80:	687b      	ldr	r3, [r7, #4]
 801fa82:	2b00      	cmp	r3, #0
 801fa84:	d106      	bne.n	801fa94 <tcp_send_empty_ack+0x24>
 801fa86:	4b28      	ldr	r3, [pc, #160]	; (801fb28 <tcp_send_empty_ack+0xb8>)
 801fa88:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801fa8c:	4927      	ldr	r1, [pc, #156]	; (801fb2c <tcp_send_empty_ack+0xbc>)
 801fa8e:	4828      	ldr	r0, [pc, #160]	; (801fb30 <tcp_send_empty_ack+0xc0>)
 801fa90:	f004 fa9a 	bl	8023fc8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801fa94:	7dfb      	ldrb	r3, [r7, #23]
 801fa96:	009b      	lsls	r3, r3, #2
 801fa98:	b2db      	uxtb	r3, r3
 801fa9a:	f003 0304 	and.w	r3, r3, #4
 801fa9e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801faa0:	7d7b      	ldrb	r3, [r7, #21]
 801faa2:	b29c      	uxth	r4, r3
 801faa4:	687b      	ldr	r3, [r7, #4]
 801faa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801faa8:	4618      	mov	r0, r3
 801faaa:	f7f7 fd30 	bl	801750e <lwip_htonl>
 801faae:	4603      	mov	r3, r0
 801fab0:	2200      	movs	r2, #0
 801fab2:	4621      	mov	r1, r4
 801fab4:	6878      	ldr	r0, [r7, #4]
 801fab6:	f7ff feb9 	bl	801f82c <tcp_output_alloc_header>
 801faba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801fabc:	693b      	ldr	r3, [r7, #16]
 801fabe:	2b00      	cmp	r3, #0
 801fac0:	d109      	bne.n	801fad6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801fac2:	687b      	ldr	r3, [r7, #4]
 801fac4:	8b5b      	ldrh	r3, [r3, #26]
 801fac6:	f043 0303 	orr.w	r3, r3, #3
 801faca:	b29a      	uxth	r2, r3
 801facc:	687b      	ldr	r3, [r7, #4]
 801face:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801fad0:	f06f 0301 	mvn.w	r3, #1
 801fad4:	e023      	b.n	801fb1e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801fad6:	7dbb      	ldrb	r3, [r7, #22]
 801fad8:	7dfa      	ldrb	r2, [r7, #23]
 801fada:	6939      	ldr	r1, [r7, #16]
 801fadc:	6878      	ldr	r0, [r7, #4]
 801fade:	f7ff fee3 	bl	801f8a8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801fae2:	687a      	ldr	r2, [r7, #4]
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	3304      	adds	r3, #4
 801fae8:	6939      	ldr	r1, [r7, #16]
 801faea:	6878      	ldr	r0, [r7, #4]
 801faec:	f7ff ff1a 	bl	801f924 <tcp_output_control_segment>
 801faf0:	4603      	mov	r3, r0
 801faf2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801faf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801faf8:	2b00      	cmp	r3, #0
 801fafa:	d007      	beq.n	801fb0c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	8b5b      	ldrh	r3, [r3, #26]
 801fb00:	f043 0303 	orr.w	r3, r3, #3
 801fb04:	b29a      	uxth	r2, r3
 801fb06:	687b      	ldr	r3, [r7, #4]
 801fb08:	835a      	strh	r2, [r3, #26]
 801fb0a:	e006      	b.n	801fb1a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801fb0c:	687b      	ldr	r3, [r7, #4]
 801fb0e:	8b5b      	ldrh	r3, [r3, #26]
 801fb10:	f023 0303 	bic.w	r3, r3, #3
 801fb14:	b29a      	uxth	r2, r3
 801fb16:	687b      	ldr	r3, [r7, #4]
 801fb18:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801fb1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801fb1e:	4618      	mov	r0, r3
 801fb20:	371c      	adds	r7, #28
 801fb22:	46bd      	mov	sp, r7
 801fb24:	bd90      	pop	{r4, r7, pc}
 801fb26:	bf00      	nop
 801fb28:	08027d5c 	.word	0x08027d5c
 801fb2c:	08028574 	.word	0x08028574
 801fb30:	08027db0 	.word	0x08027db0

0801fb34 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801fb34:	b590      	push	{r4, r7, lr}
 801fb36:	b085      	sub	sp, #20
 801fb38:	af00      	add	r7, sp, #0
 801fb3a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801fb3c:	2300      	movs	r3, #0
 801fb3e:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	2b00      	cmp	r3, #0
 801fb44:	d106      	bne.n	801fb54 <tcp_keepalive+0x20>
 801fb46:	4b18      	ldr	r3, [pc, #96]	; (801fba8 <tcp_keepalive+0x74>)
 801fb48:	f640 0224 	movw	r2, #2084	; 0x824
 801fb4c:	4917      	ldr	r1, [pc, #92]	; (801fbac <tcp_keepalive+0x78>)
 801fb4e:	4818      	ldr	r0, [pc, #96]	; (801fbb0 <tcp_keepalive+0x7c>)
 801fb50:	f004 fa3a 	bl	8023fc8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801fb54:	7abb      	ldrb	r3, [r7, #10]
 801fb56:	b29c      	uxth	r4, r3
 801fb58:	687b      	ldr	r3, [r7, #4]
 801fb5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fb5c:	3b01      	subs	r3, #1
 801fb5e:	4618      	mov	r0, r3
 801fb60:	f7f7 fcd5 	bl	801750e <lwip_htonl>
 801fb64:	4603      	mov	r3, r0
 801fb66:	2200      	movs	r2, #0
 801fb68:	4621      	mov	r1, r4
 801fb6a:	6878      	ldr	r0, [r7, #4]
 801fb6c:	f7ff fe5e 	bl	801f82c <tcp_output_alloc_header>
 801fb70:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801fb72:	68fb      	ldr	r3, [r7, #12]
 801fb74:	2b00      	cmp	r3, #0
 801fb76:	d102      	bne.n	801fb7e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801fb78:	f04f 33ff 	mov.w	r3, #4294967295
 801fb7c:	e010      	b.n	801fba0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801fb7e:	7abb      	ldrb	r3, [r7, #10]
 801fb80:	2200      	movs	r2, #0
 801fb82:	68f9      	ldr	r1, [r7, #12]
 801fb84:	6878      	ldr	r0, [r7, #4]
 801fb86:	f7ff fe8f 	bl	801f8a8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801fb8a:	687a      	ldr	r2, [r7, #4]
 801fb8c:	687b      	ldr	r3, [r7, #4]
 801fb8e:	3304      	adds	r3, #4
 801fb90:	68f9      	ldr	r1, [r7, #12]
 801fb92:	6878      	ldr	r0, [r7, #4]
 801fb94:	f7ff fec6 	bl	801f924 <tcp_output_control_segment>
 801fb98:	4603      	mov	r3, r0
 801fb9a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801fb9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801fba0:	4618      	mov	r0, r3
 801fba2:	3714      	adds	r7, #20
 801fba4:	46bd      	mov	sp, r7
 801fba6:	bd90      	pop	{r4, r7, pc}
 801fba8:	08027d5c 	.word	0x08027d5c
 801fbac:	08028594 	.word	0x08028594
 801fbb0:	08027db0 	.word	0x08027db0

0801fbb4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801fbb4:	b590      	push	{r4, r7, lr}
 801fbb6:	b08b      	sub	sp, #44	; 0x2c
 801fbb8:	af00      	add	r7, sp, #0
 801fbba:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801fbbc:	2300      	movs	r3, #0
 801fbbe:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801fbc0:	687b      	ldr	r3, [r7, #4]
 801fbc2:	2b00      	cmp	r3, #0
 801fbc4:	d106      	bne.n	801fbd4 <tcp_zero_window_probe+0x20>
 801fbc6:	4b4d      	ldr	r3, [pc, #308]	; (801fcfc <tcp_zero_window_probe+0x148>)
 801fbc8:	f640 024f 	movw	r2, #2127	; 0x84f
 801fbcc:	494c      	ldr	r1, [pc, #304]	; (801fd00 <tcp_zero_window_probe+0x14c>)
 801fbce:	484d      	ldr	r0, [pc, #308]	; (801fd04 <tcp_zero_window_probe+0x150>)
 801fbd0:	f004 f9fa 	bl	8023fc8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801fbd4:	687b      	ldr	r3, [r7, #4]
 801fbd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fbd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 801fbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbdc:	2b00      	cmp	r3, #0
 801fbde:	d101      	bne.n	801fbe4 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801fbe0:	2300      	movs	r3, #0
 801fbe2:	e087      	b.n	801fcf4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801fbe4:	687b      	ldr	r3, [r7, #4]
 801fbe6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801fbea:	2bff      	cmp	r3, #255	; 0xff
 801fbec:	d007      	beq.n	801fbfe <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 801fbee:	687b      	ldr	r3, [r7, #4]
 801fbf0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801fbf4:	3301      	adds	r3, #1
 801fbf6:	b2da      	uxtb	r2, r3
 801fbf8:	687b      	ldr	r3, [r7, #4]
 801fbfa:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801fbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc00:	691b      	ldr	r3, [r3, #16]
 801fc02:	899b      	ldrh	r3, [r3, #12]
 801fc04:	b29b      	uxth	r3, r3
 801fc06:	4618      	mov	r0, r3
 801fc08:	f7f7 fc6c 	bl	80174e4 <lwip_htons>
 801fc0c:	4603      	mov	r3, r0
 801fc0e:	b2db      	uxtb	r3, r3
 801fc10:	f003 0301 	and.w	r3, r3, #1
 801fc14:	2b00      	cmp	r3, #0
 801fc16:	d005      	beq.n	801fc24 <tcp_zero_window_probe+0x70>
 801fc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc1a:	891b      	ldrh	r3, [r3, #8]
 801fc1c:	2b00      	cmp	r3, #0
 801fc1e:	d101      	bne.n	801fc24 <tcp_zero_window_probe+0x70>
 801fc20:	2301      	movs	r3, #1
 801fc22:	e000      	b.n	801fc26 <tcp_zero_window_probe+0x72>
 801fc24:	2300      	movs	r3, #0
 801fc26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801fc2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801fc2e:	2b00      	cmp	r3, #0
 801fc30:	bf0c      	ite	eq
 801fc32:	2301      	moveq	r3, #1
 801fc34:	2300      	movne	r3, #0
 801fc36:	b2db      	uxtb	r3, r3
 801fc38:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801fc3a:	7cfb      	ldrb	r3, [r7, #19]
 801fc3c:	b299      	uxth	r1, r3
 801fc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc40:	691b      	ldr	r3, [r3, #16]
 801fc42:	685b      	ldr	r3, [r3, #4]
 801fc44:	8c3a      	ldrh	r2, [r7, #32]
 801fc46:	6878      	ldr	r0, [r7, #4]
 801fc48:	f7ff fdf0 	bl	801f82c <tcp_output_alloc_header>
 801fc4c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801fc4e:	69fb      	ldr	r3, [r7, #28]
 801fc50:	2b00      	cmp	r3, #0
 801fc52:	d102      	bne.n	801fc5a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801fc54:	f04f 33ff 	mov.w	r3, #4294967295
 801fc58:	e04c      	b.n	801fcf4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801fc5a:	69fb      	ldr	r3, [r7, #28]
 801fc5c:	685b      	ldr	r3, [r3, #4]
 801fc5e:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 801fc60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801fc64:	2b00      	cmp	r3, #0
 801fc66:	d011      	beq.n	801fc8c <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801fc68:	69bb      	ldr	r3, [r7, #24]
 801fc6a:	899b      	ldrh	r3, [r3, #12]
 801fc6c:	b29b      	uxth	r3, r3
 801fc6e:	b21b      	sxth	r3, r3
 801fc70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801fc74:	b21c      	sxth	r4, r3
 801fc76:	2011      	movs	r0, #17
 801fc78:	f7f7 fc34 	bl	80174e4 <lwip_htons>
 801fc7c:	4603      	mov	r3, r0
 801fc7e:	b21b      	sxth	r3, r3
 801fc80:	4323      	orrs	r3, r4
 801fc82:	b21b      	sxth	r3, r3
 801fc84:	b29a      	uxth	r2, r3
 801fc86:	69bb      	ldr	r3, [r7, #24]
 801fc88:	819a      	strh	r2, [r3, #12]
 801fc8a:	e010      	b.n	801fcae <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801fc8c:	69fb      	ldr	r3, [r7, #28]
 801fc8e:	685b      	ldr	r3, [r3, #4]
 801fc90:	3314      	adds	r3, #20
 801fc92:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801fc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc96:	6858      	ldr	r0, [r3, #4]
 801fc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc9a:	685b      	ldr	r3, [r3, #4]
 801fc9c:	891a      	ldrh	r2, [r3, #8]
 801fc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fca0:	891b      	ldrh	r3, [r3, #8]
 801fca2:	1ad3      	subs	r3, r2, r3
 801fca4:	b29b      	uxth	r3, r3
 801fca6:	2201      	movs	r2, #1
 801fca8:	6979      	ldr	r1, [r7, #20]
 801fcaa:	f7f9 fcaf 	bl	801960c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801fcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fcb0:	691b      	ldr	r3, [r3, #16]
 801fcb2:	685b      	ldr	r3, [r3, #4]
 801fcb4:	4618      	mov	r0, r3
 801fcb6:	f7f7 fc2a 	bl	801750e <lwip_htonl>
 801fcba:	4603      	mov	r3, r0
 801fcbc:	3301      	adds	r3, #1
 801fcbe:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801fcc0:	687b      	ldr	r3, [r7, #4]
 801fcc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fcc4:	68fb      	ldr	r3, [r7, #12]
 801fcc6:	1ad3      	subs	r3, r2, r3
 801fcc8:	2b00      	cmp	r3, #0
 801fcca:	da02      	bge.n	801fcd2 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 801fccc:	687b      	ldr	r3, [r7, #4]
 801fcce:	68fa      	ldr	r2, [r7, #12]
 801fcd0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801fcd2:	7cfb      	ldrb	r3, [r7, #19]
 801fcd4:	2200      	movs	r2, #0
 801fcd6:	69f9      	ldr	r1, [r7, #28]
 801fcd8:	6878      	ldr	r0, [r7, #4]
 801fcda:	f7ff fde5 	bl	801f8a8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801fcde:	687a      	ldr	r2, [r7, #4]
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	3304      	adds	r3, #4
 801fce4:	69f9      	ldr	r1, [r7, #28]
 801fce6:	6878      	ldr	r0, [r7, #4]
 801fce8:	f7ff fe1c 	bl	801f924 <tcp_output_control_segment>
 801fcec:	4603      	mov	r3, r0
 801fcee:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801fcf0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801fcf4:	4618      	mov	r0, r3
 801fcf6:	372c      	adds	r7, #44	; 0x2c
 801fcf8:	46bd      	mov	sp, r7
 801fcfa:	bd90      	pop	{r4, r7, pc}
 801fcfc:	08027d5c 	.word	0x08027d5c
 801fd00:	080285b0 	.word	0x080285b0
 801fd04:	08027db0 	.word	0x08027db0

0801fd08 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801fd08:	b580      	push	{r7, lr}
 801fd0a:	b082      	sub	sp, #8
 801fd0c:	af00      	add	r7, sp, #0
 801fd0e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801fd10:	f7f9 fd7a 	bl	8019808 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801fd14:	4b0a      	ldr	r3, [pc, #40]	; (801fd40 <tcpip_tcp_timer+0x38>)
 801fd16:	681b      	ldr	r3, [r3, #0]
 801fd18:	2b00      	cmp	r3, #0
 801fd1a:	d103      	bne.n	801fd24 <tcpip_tcp_timer+0x1c>
 801fd1c:	4b09      	ldr	r3, [pc, #36]	; (801fd44 <tcpip_tcp_timer+0x3c>)
 801fd1e:	681b      	ldr	r3, [r3, #0]
 801fd20:	2b00      	cmp	r3, #0
 801fd22:	d005      	beq.n	801fd30 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801fd24:	2200      	movs	r2, #0
 801fd26:	4908      	ldr	r1, [pc, #32]	; (801fd48 <tcpip_tcp_timer+0x40>)
 801fd28:	20fa      	movs	r0, #250	; 0xfa
 801fd2a:	f000 f8f3 	bl	801ff14 <sys_timeout>
 801fd2e:	e003      	b.n	801fd38 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801fd30:	4b06      	ldr	r3, [pc, #24]	; (801fd4c <tcpip_tcp_timer+0x44>)
 801fd32:	2200      	movs	r2, #0
 801fd34:	601a      	str	r2, [r3, #0]
  }
}
 801fd36:	bf00      	nop
 801fd38:	bf00      	nop
 801fd3a:	3708      	adds	r7, #8
 801fd3c:	46bd      	mov	sp, r7
 801fd3e:	bd80      	pop	{r7, pc}
 801fd40:	2007edc4 	.word	0x2007edc4
 801fd44:	2007edc8 	.word	0x2007edc8
 801fd48:	0801fd09 	.word	0x0801fd09
 801fd4c:	2007ee14 	.word	0x2007ee14

0801fd50 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801fd50:	b580      	push	{r7, lr}
 801fd52:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801fd54:	4b0a      	ldr	r3, [pc, #40]	; (801fd80 <tcp_timer_needed+0x30>)
 801fd56:	681b      	ldr	r3, [r3, #0]
 801fd58:	2b00      	cmp	r3, #0
 801fd5a:	d10f      	bne.n	801fd7c <tcp_timer_needed+0x2c>
 801fd5c:	4b09      	ldr	r3, [pc, #36]	; (801fd84 <tcp_timer_needed+0x34>)
 801fd5e:	681b      	ldr	r3, [r3, #0]
 801fd60:	2b00      	cmp	r3, #0
 801fd62:	d103      	bne.n	801fd6c <tcp_timer_needed+0x1c>
 801fd64:	4b08      	ldr	r3, [pc, #32]	; (801fd88 <tcp_timer_needed+0x38>)
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	d007      	beq.n	801fd7c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801fd6c:	4b04      	ldr	r3, [pc, #16]	; (801fd80 <tcp_timer_needed+0x30>)
 801fd6e:	2201      	movs	r2, #1
 801fd70:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801fd72:	2200      	movs	r2, #0
 801fd74:	4905      	ldr	r1, [pc, #20]	; (801fd8c <tcp_timer_needed+0x3c>)
 801fd76:	20fa      	movs	r0, #250	; 0xfa
 801fd78:	f000 f8cc 	bl	801ff14 <sys_timeout>
  }
}
 801fd7c:	bf00      	nop
 801fd7e:	bd80      	pop	{r7, pc}
 801fd80:	2007ee14 	.word	0x2007ee14
 801fd84:	2007edc4 	.word	0x2007edc4
 801fd88:	2007edc8 	.word	0x2007edc8
 801fd8c:	0801fd09 	.word	0x0801fd09

0801fd90 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801fd90:	b580      	push	{r7, lr}
 801fd92:	b086      	sub	sp, #24
 801fd94:	af00      	add	r7, sp, #0
 801fd96:	60f8      	str	r0, [r7, #12]
 801fd98:	60b9      	str	r1, [r7, #8]
 801fd9a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801fd9c:	200a      	movs	r0, #10
 801fd9e:	f7f8 fa29 	bl	80181f4 <memp_malloc>
 801fda2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801fda4:	693b      	ldr	r3, [r7, #16]
 801fda6:	2b00      	cmp	r3, #0
 801fda8:	d109      	bne.n	801fdbe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801fdaa:	693b      	ldr	r3, [r7, #16]
 801fdac:	2b00      	cmp	r3, #0
 801fdae:	d151      	bne.n	801fe54 <sys_timeout_abs+0xc4>
 801fdb0:	4b2a      	ldr	r3, [pc, #168]	; (801fe5c <sys_timeout_abs+0xcc>)
 801fdb2:	22be      	movs	r2, #190	; 0xbe
 801fdb4:	492a      	ldr	r1, [pc, #168]	; (801fe60 <sys_timeout_abs+0xd0>)
 801fdb6:	482b      	ldr	r0, [pc, #172]	; (801fe64 <sys_timeout_abs+0xd4>)
 801fdb8:	f004 f906 	bl	8023fc8 <iprintf>
    return;
 801fdbc:	e04a      	b.n	801fe54 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801fdbe:	693b      	ldr	r3, [r7, #16]
 801fdc0:	2200      	movs	r2, #0
 801fdc2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801fdc4:	693b      	ldr	r3, [r7, #16]
 801fdc6:	68ba      	ldr	r2, [r7, #8]
 801fdc8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801fdca:	693b      	ldr	r3, [r7, #16]
 801fdcc:	687a      	ldr	r2, [r7, #4]
 801fdce:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801fdd0:	693b      	ldr	r3, [r7, #16]
 801fdd2:	68fa      	ldr	r2, [r7, #12]
 801fdd4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801fdd6:	4b24      	ldr	r3, [pc, #144]	; (801fe68 <sys_timeout_abs+0xd8>)
 801fdd8:	681b      	ldr	r3, [r3, #0]
 801fdda:	2b00      	cmp	r3, #0
 801fddc:	d103      	bne.n	801fde6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801fdde:	4a22      	ldr	r2, [pc, #136]	; (801fe68 <sys_timeout_abs+0xd8>)
 801fde0:	693b      	ldr	r3, [r7, #16]
 801fde2:	6013      	str	r3, [r2, #0]
    return;
 801fde4:	e037      	b.n	801fe56 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801fde6:	693b      	ldr	r3, [r7, #16]
 801fde8:	685a      	ldr	r2, [r3, #4]
 801fdea:	4b1f      	ldr	r3, [pc, #124]	; (801fe68 <sys_timeout_abs+0xd8>)
 801fdec:	681b      	ldr	r3, [r3, #0]
 801fdee:	685b      	ldr	r3, [r3, #4]
 801fdf0:	1ad3      	subs	r3, r2, r3
 801fdf2:	0fdb      	lsrs	r3, r3, #31
 801fdf4:	f003 0301 	and.w	r3, r3, #1
 801fdf8:	b2db      	uxtb	r3, r3
 801fdfa:	2b00      	cmp	r3, #0
 801fdfc:	d007      	beq.n	801fe0e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801fdfe:	4b1a      	ldr	r3, [pc, #104]	; (801fe68 <sys_timeout_abs+0xd8>)
 801fe00:	681a      	ldr	r2, [r3, #0]
 801fe02:	693b      	ldr	r3, [r7, #16]
 801fe04:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801fe06:	4a18      	ldr	r2, [pc, #96]	; (801fe68 <sys_timeout_abs+0xd8>)
 801fe08:	693b      	ldr	r3, [r7, #16]
 801fe0a:	6013      	str	r3, [r2, #0]
 801fe0c:	e023      	b.n	801fe56 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801fe0e:	4b16      	ldr	r3, [pc, #88]	; (801fe68 <sys_timeout_abs+0xd8>)
 801fe10:	681b      	ldr	r3, [r3, #0]
 801fe12:	617b      	str	r3, [r7, #20]
 801fe14:	e01a      	b.n	801fe4c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801fe16:	697b      	ldr	r3, [r7, #20]
 801fe18:	681b      	ldr	r3, [r3, #0]
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	d00b      	beq.n	801fe36 <sys_timeout_abs+0xa6>
 801fe1e:	693b      	ldr	r3, [r7, #16]
 801fe20:	685a      	ldr	r2, [r3, #4]
 801fe22:	697b      	ldr	r3, [r7, #20]
 801fe24:	681b      	ldr	r3, [r3, #0]
 801fe26:	685b      	ldr	r3, [r3, #4]
 801fe28:	1ad3      	subs	r3, r2, r3
 801fe2a:	0fdb      	lsrs	r3, r3, #31
 801fe2c:	f003 0301 	and.w	r3, r3, #1
 801fe30:	b2db      	uxtb	r3, r3
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	d007      	beq.n	801fe46 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801fe36:	697b      	ldr	r3, [r7, #20]
 801fe38:	681a      	ldr	r2, [r3, #0]
 801fe3a:	693b      	ldr	r3, [r7, #16]
 801fe3c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801fe3e:	697b      	ldr	r3, [r7, #20]
 801fe40:	693a      	ldr	r2, [r7, #16]
 801fe42:	601a      	str	r2, [r3, #0]
        break;
 801fe44:	e007      	b.n	801fe56 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801fe46:	697b      	ldr	r3, [r7, #20]
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	617b      	str	r3, [r7, #20]
 801fe4c:	697b      	ldr	r3, [r7, #20]
 801fe4e:	2b00      	cmp	r3, #0
 801fe50:	d1e1      	bne.n	801fe16 <sys_timeout_abs+0x86>
 801fe52:	e000      	b.n	801fe56 <sys_timeout_abs+0xc6>
    return;
 801fe54:	bf00      	nop
      }
    }
  }
}
 801fe56:	3718      	adds	r7, #24
 801fe58:	46bd      	mov	sp, r7
 801fe5a:	bd80      	pop	{r7, pc}
 801fe5c:	080285d4 	.word	0x080285d4
 801fe60:	08028608 	.word	0x08028608
 801fe64:	08028648 	.word	0x08028648
 801fe68:	2007ee0c 	.word	0x2007ee0c

0801fe6c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801fe6c:	b580      	push	{r7, lr}
 801fe6e:	b086      	sub	sp, #24
 801fe70:	af00      	add	r7, sp, #0
 801fe72:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801fe74:	687b      	ldr	r3, [r7, #4]
 801fe76:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801fe78:	697b      	ldr	r3, [r7, #20]
 801fe7a:	685b      	ldr	r3, [r3, #4]
 801fe7c:	4798      	blx	r3

  now = sys_now();
 801fe7e:	f7e1 ff79 	bl	8001d74 <sys_now>
 801fe82:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801fe84:	697b      	ldr	r3, [r7, #20]
 801fe86:	681a      	ldr	r2, [r3, #0]
 801fe88:	4b0f      	ldr	r3, [pc, #60]	; (801fec8 <lwip_cyclic_timer+0x5c>)
 801fe8a:	681b      	ldr	r3, [r3, #0]
 801fe8c:	4413      	add	r3, r2
 801fe8e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801fe90:	68fa      	ldr	r2, [r7, #12]
 801fe92:	693b      	ldr	r3, [r7, #16]
 801fe94:	1ad3      	subs	r3, r2, r3
 801fe96:	0fdb      	lsrs	r3, r3, #31
 801fe98:	f003 0301 	and.w	r3, r3, #1
 801fe9c:	b2db      	uxtb	r3, r3
 801fe9e:	2b00      	cmp	r3, #0
 801fea0:	d009      	beq.n	801feb6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801fea2:	697b      	ldr	r3, [r7, #20]
 801fea4:	681a      	ldr	r2, [r3, #0]
 801fea6:	693b      	ldr	r3, [r7, #16]
 801fea8:	4413      	add	r3, r2
 801feaa:	687a      	ldr	r2, [r7, #4]
 801feac:	4907      	ldr	r1, [pc, #28]	; (801fecc <lwip_cyclic_timer+0x60>)
 801feae:	4618      	mov	r0, r3
 801feb0:	f7ff ff6e 	bl	801fd90 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801feb4:	e004      	b.n	801fec0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801feb6:	687a      	ldr	r2, [r7, #4]
 801feb8:	4904      	ldr	r1, [pc, #16]	; (801fecc <lwip_cyclic_timer+0x60>)
 801feba:	68f8      	ldr	r0, [r7, #12]
 801febc:	f7ff ff68 	bl	801fd90 <sys_timeout_abs>
}
 801fec0:	bf00      	nop
 801fec2:	3718      	adds	r7, #24
 801fec4:	46bd      	mov	sp, r7
 801fec6:	bd80      	pop	{r7, pc}
 801fec8:	2007ee10 	.word	0x2007ee10
 801fecc:	0801fe6d 	.word	0x0801fe6d

0801fed0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801fed0:	b580      	push	{r7, lr}
 801fed2:	b082      	sub	sp, #8
 801fed4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801fed6:	2301      	movs	r3, #1
 801fed8:	607b      	str	r3, [r7, #4]
 801feda:	e00e      	b.n	801fefa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801fedc:	4a0b      	ldr	r2, [pc, #44]	; (801ff0c <sys_timeouts_init+0x3c>)
 801fede:	687b      	ldr	r3, [r7, #4]
 801fee0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801fee4:	687b      	ldr	r3, [r7, #4]
 801fee6:	00db      	lsls	r3, r3, #3
 801fee8:	4a08      	ldr	r2, [pc, #32]	; (801ff0c <sys_timeouts_init+0x3c>)
 801feea:	4413      	add	r3, r2
 801feec:	461a      	mov	r2, r3
 801feee:	4908      	ldr	r1, [pc, #32]	; (801ff10 <sys_timeouts_init+0x40>)
 801fef0:	f000 f810 	bl	801ff14 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801fef4:	687b      	ldr	r3, [r7, #4]
 801fef6:	3301      	adds	r3, #1
 801fef8:	607b      	str	r3, [r7, #4]
 801fefa:	687b      	ldr	r3, [r7, #4]
 801fefc:	2b02      	cmp	r3, #2
 801fefe:	d9ed      	bls.n	801fedc <sys_timeouts_init+0xc>
  }
}
 801ff00:	bf00      	nop
 801ff02:	bf00      	nop
 801ff04:	3708      	adds	r7, #8
 801ff06:	46bd      	mov	sp, r7
 801ff08:	bd80      	pop	{r7, pc}
 801ff0a:	bf00      	nop
 801ff0c:	08029b1c 	.word	0x08029b1c
 801ff10:	0801fe6d 	.word	0x0801fe6d

0801ff14 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801ff14:	b580      	push	{r7, lr}
 801ff16:	b086      	sub	sp, #24
 801ff18:	af00      	add	r7, sp, #0
 801ff1a:	60f8      	str	r0, [r7, #12]
 801ff1c:	60b9      	str	r1, [r7, #8]
 801ff1e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ff20:	68fb      	ldr	r3, [r7, #12]
 801ff22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ff26:	d306      	bcc.n	801ff36 <sys_timeout+0x22>
 801ff28:	4b0a      	ldr	r3, [pc, #40]	; (801ff54 <sys_timeout+0x40>)
 801ff2a:	f240 1229 	movw	r2, #297	; 0x129
 801ff2e:	490a      	ldr	r1, [pc, #40]	; (801ff58 <sys_timeout+0x44>)
 801ff30:	480a      	ldr	r0, [pc, #40]	; (801ff5c <sys_timeout+0x48>)
 801ff32:	f004 f849 	bl	8023fc8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801ff36:	f7e1 ff1d 	bl	8001d74 <sys_now>
 801ff3a:	4602      	mov	r2, r0
 801ff3c:	68fb      	ldr	r3, [r7, #12]
 801ff3e:	4413      	add	r3, r2
 801ff40:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ff42:	687a      	ldr	r2, [r7, #4]
 801ff44:	68b9      	ldr	r1, [r7, #8]
 801ff46:	6978      	ldr	r0, [r7, #20]
 801ff48:	f7ff ff22 	bl	801fd90 <sys_timeout_abs>
#endif
}
 801ff4c:	bf00      	nop
 801ff4e:	3718      	adds	r7, #24
 801ff50:	46bd      	mov	sp, r7
 801ff52:	bd80      	pop	{r7, pc}
 801ff54:	080285d4 	.word	0x080285d4
 801ff58:	08028670 	.word	0x08028670
 801ff5c:	08028648 	.word	0x08028648

0801ff60 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801ff60:	b580      	push	{r7, lr}
 801ff62:	b084      	sub	sp, #16
 801ff64:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801ff66:	f7e1 ff05 	bl	8001d74 <sys_now>
 801ff6a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801ff6c:	4b17      	ldr	r3, [pc, #92]	; (801ffcc <sys_check_timeouts+0x6c>)
 801ff6e:	681b      	ldr	r3, [r3, #0]
 801ff70:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801ff72:	68bb      	ldr	r3, [r7, #8]
 801ff74:	2b00      	cmp	r3, #0
 801ff76:	d022      	beq.n	801ffbe <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801ff78:	68bb      	ldr	r3, [r7, #8]
 801ff7a:	685b      	ldr	r3, [r3, #4]
 801ff7c:	68fa      	ldr	r2, [r7, #12]
 801ff7e:	1ad3      	subs	r3, r2, r3
 801ff80:	0fdb      	lsrs	r3, r3, #31
 801ff82:	f003 0301 	and.w	r3, r3, #1
 801ff86:	b2db      	uxtb	r3, r3
 801ff88:	2b00      	cmp	r3, #0
 801ff8a:	d11a      	bne.n	801ffc2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801ff8c:	68bb      	ldr	r3, [r7, #8]
 801ff8e:	681b      	ldr	r3, [r3, #0]
 801ff90:	4a0e      	ldr	r2, [pc, #56]	; (801ffcc <sys_check_timeouts+0x6c>)
 801ff92:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801ff94:	68bb      	ldr	r3, [r7, #8]
 801ff96:	689b      	ldr	r3, [r3, #8]
 801ff98:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801ff9a:	68bb      	ldr	r3, [r7, #8]
 801ff9c:	68db      	ldr	r3, [r3, #12]
 801ff9e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801ffa0:	68bb      	ldr	r3, [r7, #8]
 801ffa2:	685b      	ldr	r3, [r3, #4]
 801ffa4:	4a0a      	ldr	r2, [pc, #40]	; (801ffd0 <sys_check_timeouts+0x70>)
 801ffa6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801ffa8:	68b9      	ldr	r1, [r7, #8]
 801ffaa:	200a      	movs	r0, #10
 801ffac:	f7f8 f99e 	bl	80182ec <memp_free>
    if (handler != NULL) {
 801ffb0:	687b      	ldr	r3, [r7, #4]
 801ffb2:	2b00      	cmp	r3, #0
 801ffb4:	d0da      	beq.n	801ff6c <sys_check_timeouts+0xc>
      handler(arg);
 801ffb6:	687b      	ldr	r3, [r7, #4]
 801ffb8:	6838      	ldr	r0, [r7, #0]
 801ffba:	4798      	blx	r3
  do {
 801ffbc:	e7d6      	b.n	801ff6c <sys_check_timeouts+0xc>
      return;
 801ffbe:	bf00      	nop
 801ffc0:	e000      	b.n	801ffc4 <sys_check_timeouts+0x64>
      return;
 801ffc2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801ffc4:	3710      	adds	r7, #16
 801ffc6:	46bd      	mov	sp, r7
 801ffc8:	bd80      	pop	{r7, pc}
 801ffca:	bf00      	nop
 801ffcc:	2007ee0c 	.word	0x2007ee0c
 801ffd0:	2007ee10 	.word	0x2007ee10

0801ffd4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801ffd4:	b580      	push	{r7, lr}
 801ffd6:	b082      	sub	sp, #8
 801ffd8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801ffda:	4b16      	ldr	r3, [pc, #88]	; (8020034 <sys_timeouts_sleeptime+0x60>)
 801ffdc:	681b      	ldr	r3, [r3, #0]
 801ffde:	2b00      	cmp	r3, #0
 801ffe0:	d102      	bne.n	801ffe8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801ffe2:	f04f 33ff 	mov.w	r3, #4294967295
 801ffe6:	e020      	b.n	802002a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801ffe8:	f7e1 fec4 	bl	8001d74 <sys_now>
 801ffec:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801ffee:	4b11      	ldr	r3, [pc, #68]	; (8020034 <sys_timeouts_sleeptime+0x60>)
 801fff0:	681b      	ldr	r3, [r3, #0]
 801fff2:	685a      	ldr	r2, [r3, #4]
 801fff4:	687b      	ldr	r3, [r7, #4]
 801fff6:	1ad3      	subs	r3, r2, r3
 801fff8:	0fdb      	lsrs	r3, r3, #31
 801fffa:	f003 0301 	and.w	r3, r3, #1
 801fffe:	b2db      	uxtb	r3, r3
 8020000:	2b00      	cmp	r3, #0
 8020002:	d001      	beq.n	8020008 <sys_timeouts_sleeptime+0x34>
    return 0;
 8020004:	2300      	movs	r3, #0
 8020006:	e010      	b.n	802002a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8020008:	4b0a      	ldr	r3, [pc, #40]	; (8020034 <sys_timeouts_sleeptime+0x60>)
 802000a:	681b      	ldr	r3, [r3, #0]
 802000c:	685a      	ldr	r2, [r3, #4]
 802000e:	687b      	ldr	r3, [r7, #4]
 8020010:	1ad3      	subs	r3, r2, r3
 8020012:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8020014:	683b      	ldr	r3, [r7, #0]
 8020016:	2b00      	cmp	r3, #0
 8020018:	da06      	bge.n	8020028 <sys_timeouts_sleeptime+0x54>
 802001a:	4b07      	ldr	r3, [pc, #28]	; (8020038 <sys_timeouts_sleeptime+0x64>)
 802001c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8020020:	4906      	ldr	r1, [pc, #24]	; (802003c <sys_timeouts_sleeptime+0x68>)
 8020022:	4807      	ldr	r0, [pc, #28]	; (8020040 <sys_timeouts_sleeptime+0x6c>)
 8020024:	f003 ffd0 	bl	8023fc8 <iprintf>
    return ret;
 8020028:	683b      	ldr	r3, [r7, #0]
  }
}
 802002a:	4618      	mov	r0, r3
 802002c:	3708      	adds	r7, #8
 802002e:	46bd      	mov	sp, r7
 8020030:	bd80      	pop	{r7, pc}
 8020032:	bf00      	nop
 8020034:	2007ee0c 	.word	0x2007ee0c
 8020038:	080285d4 	.word	0x080285d4
 802003c:	080286a8 	.word	0x080286a8
 8020040:	08028648 	.word	0x08028648

08020044 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8020044:	b580      	push	{r7, lr}
 8020046:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8020048:	f003 febe 	bl	8023dc8 <rand>
 802004c:	4603      	mov	r3, r0
 802004e:	b29b      	uxth	r3, r3
 8020050:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8020054:	b29b      	uxth	r3, r3
 8020056:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 802005a:	b29a      	uxth	r2, r3
 802005c:	4b01      	ldr	r3, [pc, #4]	; (8020064 <udp_init+0x20>)
 802005e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8020060:	bf00      	nop
 8020062:	bd80      	pop	{r7, pc}
 8020064:	200500cc 	.word	0x200500cc

08020068 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8020068:	b480      	push	{r7}
 802006a:	b083      	sub	sp, #12
 802006c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 802006e:	2300      	movs	r3, #0
 8020070:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8020072:	4b17      	ldr	r3, [pc, #92]	; (80200d0 <udp_new_port+0x68>)
 8020074:	881b      	ldrh	r3, [r3, #0]
 8020076:	1c5a      	adds	r2, r3, #1
 8020078:	b291      	uxth	r1, r2
 802007a:	4a15      	ldr	r2, [pc, #84]	; (80200d0 <udp_new_port+0x68>)
 802007c:	8011      	strh	r1, [r2, #0]
 802007e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020082:	4293      	cmp	r3, r2
 8020084:	d103      	bne.n	802008e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8020086:	4b12      	ldr	r3, [pc, #72]	; (80200d0 <udp_new_port+0x68>)
 8020088:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 802008c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802008e:	4b11      	ldr	r3, [pc, #68]	; (80200d4 <udp_new_port+0x6c>)
 8020090:	681b      	ldr	r3, [r3, #0]
 8020092:	603b      	str	r3, [r7, #0]
 8020094:	e011      	b.n	80200ba <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8020096:	683b      	ldr	r3, [r7, #0]
 8020098:	8a5a      	ldrh	r2, [r3, #18]
 802009a:	4b0d      	ldr	r3, [pc, #52]	; (80200d0 <udp_new_port+0x68>)
 802009c:	881b      	ldrh	r3, [r3, #0]
 802009e:	429a      	cmp	r2, r3
 80200a0:	d108      	bne.n	80200b4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80200a2:	88fb      	ldrh	r3, [r7, #6]
 80200a4:	3301      	adds	r3, #1
 80200a6:	80fb      	strh	r3, [r7, #6]
 80200a8:	88fb      	ldrh	r3, [r7, #6]
 80200aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80200ae:	d3e0      	bcc.n	8020072 <udp_new_port+0xa>
        return 0;
 80200b0:	2300      	movs	r3, #0
 80200b2:	e007      	b.n	80200c4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80200b4:	683b      	ldr	r3, [r7, #0]
 80200b6:	68db      	ldr	r3, [r3, #12]
 80200b8:	603b      	str	r3, [r7, #0]
 80200ba:	683b      	ldr	r3, [r7, #0]
 80200bc:	2b00      	cmp	r3, #0
 80200be:	d1ea      	bne.n	8020096 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80200c0:	4b03      	ldr	r3, [pc, #12]	; (80200d0 <udp_new_port+0x68>)
 80200c2:	881b      	ldrh	r3, [r3, #0]
}
 80200c4:	4618      	mov	r0, r3
 80200c6:	370c      	adds	r7, #12
 80200c8:	46bd      	mov	sp, r7
 80200ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200ce:	4770      	bx	lr
 80200d0:	200500cc 	.word	0x200500cc
 80200d4:	2007ee18 	.word	0x2007ee18

080200d8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80200d8:	b580      	push	{r7, lr}
 80200da:	b084      	sub	sp, #16
 80200dc:	af00      	add	r7, sp, #0
 80200de:	60f8      	str	r0, [r7, #12]
 80200e0:	60b9      	str	r1, [r7, #8]
 80200e2:	4613      	mov	r3, r2
 80200e4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80200e6:	68fb      	ldr	r3, [r7, #12]
 80200e8:	2b00      	cmp	r3, #0
 80200ea:	d105      	bne.n	80200f8 <udp_input_local_match+0x20>
 80200ec:	4b27      	ldr	r3, [pc, #156]	; (802018c <udp_input_local_match+0xb4>)
 80200ee:	2287      	movs	r2, #135	; 0x87
 80200f0:	4927      	ldr	r1, [pc, #156]	; (8020190 <udp_input_local_match+0xb8>)
 80200f2:	4828      	ldr	r0, [pc, #160]	; (8020194 <udp_input_local_match+0xbc>)
 80200f4:	f003 ff68 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80200f8:	68bb      	ldr	r3, [r7, #8]
 80200fa:	2b00      	cmp	r3, #0
 80200fc:	d105      	bne.n	802010a <udp_input_local_match+0x32>
 80200fe:	4b23      	ldr	r3, [pc, #140]	; (802018c <udp_input_local_match+0xb4>)
 8020100:	2288      	movs	r2, #136	; 0x88
 8020102:	4925      	ldr	r1, [pc, #148]	; (8020198 <udp_input_local_match+0xc0>)
 8020104:	4823      	ldr	r0, [pc, #140]	; (8020194 <udp_input_local_match+0xbc>)
 8020106:	f003 ff5f 	bl	8023fc8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802010a:	68fb      	ldr	r3, [r7, #12]
 802010c:	7a1b      	ldrb	r3, [r3, #8]
 802010e:	2b00      	cmp	r3, #0
 8020110:	d00b      	beq.n	802012a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8020112:	68fb      	ldr	r3, [r7, #12]
 8020114:	7a1a      	ldrb	r2, [r3, #8]
 8020116:	4b21      	ldr	r3, [pc, #132]	; (802019c <udp_input_local_match+0xc4>)
 8020118:	685b      	ldr	r3, [r3, #4]
 802011a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802011e:	3301      	adds	r3, #1
 8020120:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8020122:	429a      	cmp	r2, r3
 8020124:	d001      	beq.n	802012a <udp_input_local_match+0x52>
    return 0;
 8020126:	2300      	movs	r3, #0
 8020128:	e02b      	b.n	8020182 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 802012a:	79fb      	ldrb	r3, [r7, #7]
 802012c:	2b00      	cmp	r3, #0
 802012e:	d018      	beq.n	8020162 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020130:	68fb      	ldr	r3, [r7, #12]
 8020132:	2b00      	cmp	r3, #0
 8020134:	d013      	beq.n	802015e <udp_input_local_match+0x86>
 8020136:	68fb      	ldr	r3, [r7, #12]
 8020138:	681b      	ldr	r3, [r3, #0]
 802013a:	2b00      	cmp	r3, #0
 802013c:	d00f      	beq.n	802015e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802013e:	4b17      	ldr	r3, [pc, #92]	; (802019c <udp_input_local_match+0xc4>)
 8020140:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8020142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020146:	d00a      	beq.n	802015e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8020148:	68fb      	ldr	r3, [r7, #12]
 802014a:	681a      	ldr	r2, [r3, #0]
 802014c:	4b13      	ldr	r3, [pc, #76]	; (802019c <udp_input_local_match+0xc4>)
 802014e:	695b      	ldr	r3, [r3, #20]
 8020150:	405a      	eors	r2, r3
 8020152:	68bb      	ldr	r3, [r7, #8]
 8020154:	3308      	adds	r3, #8
 8020156:	681b      	ldr	r3, [r3, #0]
 8020158:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802015a:	2b00      	cmp	r3, #0
 802015c:	d110      	bne.n	8020180 <udp_input_local_match+0xa8>
          return 1;
 802015e:	2301      	movs	r3, #1
 8020160:	e00f      	b.n	8020182 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8020162:	68fb      	ldr	r3, [r7, #12]
 8020164:	2b00      	cmp	r3, #0
 8020166:	d009      	beq.n	802017c <udp_input_local_match+0xa4>
 8020168:	68fb      	ldr	r3, [r7, #12]
 802016a:	681b      	ldr	r3, [r3, #0]
 802016c:	2b00      	cmp	r3, #0
 802016e:	d005      	beq.n	802017c <udp_input_local_match+0xa4>
 8020170:	68fb      	ldr	r3, [r7, #12]
 8020172:	681a      	ldr	r2, [r3, #0]
 8020174:	4b09      	ldr	r3, [pc, #36]	; (802019c <udp_input_local_match+0xc4>)
 8020176:	695b      	ldr	r3, [r3, #20]
 8020178:	429a      	cmp	r2, r3
 802017a:	d101      	bne.n	8020180 <udp_input_local_match+0xa8>
        return 1;
 802017c:	2301      	movs	r3, #1
 802017e:	e000      	b.n	8020182 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8020180:	2300      	movs	r3, #0
}
 8020182:	4618      	mov	r0, r3
 8020184:	3710      	adds	r7, #16
 8020186:	46bd      	mov	sp, r7
 8020188:	bd80      	pop	{r7, pc}
 802018a:	bf00      	nop
 802018c:	080286bc 	.word	0x080286bc
 8020190:	080286ec 	.word	0x080286ec
 8020194:	08028710 	.word	0x08028710
 8020198:	08028738 	.word	0x08028738
 802019c:	2007ba88 	.word	0x2007ba88

080201a0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80201a0:	b590      	push	{r4, r7, lr}
 80201a2:	b08d      	sub	sp, #52	; 0x34
 80201a4:	af02      	add	r7, sp, #8
 80201a6:	6078      	str	r0, [r7, #4]
 80201a8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80201aa:	2300      	movs	r3, #0
 80201ac:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80201ae:	687b      	ldr	r3, [r7, #4]
 80201b0:	2b00      	cmp	r3, #0
 80201b2:	d105      	bne.n	80201c0 <udp_input+0x20>
 80201b4:	4b9c      	ldr	r3, [pc, #624]	; (8020428 <udp_input+0x288>)
 80201b6:	22cf      	movs	r2, #207	; 0xcf
 80201b8:	499c      	ldr	r1, [pc, #624]	; (802042c <udp_input+0x28c>)
 80201ba:	489d      	ldr	r0, [pc, #628]	; (8020430 <udp_input+0x290>)
 80201bc:	f003 ff04 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80201c0:	683b      	ldr	r3, [r7, #0]
 80201c2:	2b00      	cmp	r3, #0
 80201c4:	d105      	bne.n	80201d2 <udp_input+0x32>
 80201c6:	4b98      	ldr	r3, [pc, #608]	; (8020428 <udp_input+0x288>)
 80201c8:	22d0      	movs	r2, #208	; 0xd0
 80201ca:	499a      	ldr	r1, [pc, #616]	; (8020434 <udp_input+0x294>)
 80201cc:	4898      	ldr	r0, [pc, #608]	; (8020430 <udp_input+0x290>)
 80201ce:	f003 fefb 	bl	8023fc8 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 80201d2:	4b99      	ldr	r3, [pc, #612]	; (8020438 <udp_input+0x298>)
 80201d4:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80201d8:	3301      	adds	r3, #1
 80201da:	b29a      	uxth	r2, r3
 80201dc:	4b96      	ldr	r3, [pc, #600]	; (8020438 <udp_input+0x298>)
 80201de:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80201e2:	687b      	ldr	r3, [r7, #4]
 80201e4:	895b      	ldrh	r3, [r3, #10]
 80201e6:	2b07      	cmp	r3, #7
 80201e8:	d819      	bhi.n	802021e <udp_input+0x7e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 80201ea:	687b      	ldr	r3, [r7, #4]
 80201ec:	891b      	ldrh	r3, [r3, #8]
 80201ee:	4619      	mov	r1, r3
 80201f0:	4892      	ldr	r0, [pc, #584]	; (802043c <udp_input+0x29c>)
 80201f2:	f003 fee9 	bl	8023fc8 <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 80201f6:	4b90      	ldr	r3, [pc, #576]	; (8020438 <udp_input+0x298>)
 80201f8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80201fc:	3301      	adds	r3, #1
 80201fe:	b29a      	uxth	r2, r3
 8020200:	4b8d      	ldr	r3, [pc, #564]	; (8020438 <udp_input+0x298>)
 8020202:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 8020206:	4b8c      	ldr	r3, [pc, #560]	; (8020438 <udp_input+0x298>)
 8020208:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 802020c:	3301      	adds	r3, #1
 802020e:	b29a      	uxth	r2, r3
 8020210:	4b89      	ldr	r3, [pc, #548]	; (8020438 <udp_input+0x298>)
 8020212:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8020216:	6878      	ldr	r0, [r7, #4]
 8020218:	f7f9 f802 	bl	8019220 <pbuf_free>
    goto end;
 802021c:	e1ae      	b.n	802057c <udp_input+0x3dc>
  }

  udphdr = (struct udp_hdr *)p->payload;
 802021e:	687b      	ldr	r3, [r7, #4]
 8020220:	685b      	ldr	r3, [r3, #4]
 8020222:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8020224:	4b86      	ldr	r3, [pc, #536]	; (8020440 <udp_input+0x2a0>)
 8020226:	695b      	ldr	r3, [r3, #20]
 8020228:	4a85      	ldr	r2, [pc, #532]	; (8020440 <udp_input+0x2a0>)
 802022a:	6812      	ldr	r2, [r2, #0]
 802022c:	4611      	mov	r1, r2
 802022e:	4618      	mov	r0, r3
 8020230:	f002 f986 	bl	8022540 <ip4_addr_isbroadcast_u32>
 8020234:	4603      	mov	r3, r0
 8020236:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 8020238:	687b      	ldr	r3, [r7, #4]
 802023a:	891b      	ldrh	r3, [r3, #8]
 802023c:	4619      	mov	r1, r3
 802023e:	4881      	ldr	r0, [pc, #516]	; (8020444 <udp_input+0x2a4>)
 8020240:	f003 fec2 	bl	8023fc8 <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8020244:	697b      	ldr	r3, [r7, #20]
 8020246:	881b      	ldrh	r3, [r3, #0]
 8020248:	b29b      	uxth	r3, r3
 802024a:	4618      	mov	r0, r3
 802024c:	f7f7 f94a 	bl	80174e4 <lwip_htons>
 8020250:	4603      	mov	r3, r0
 8020252:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8020254:	697b      	ldr	r3, [r7, #20]
 8020256:	885b      	ldrh	r3, [r3, #2]
 8020258:	b29b      	uxth	r3, r3
 802025a:	4618      	mov	r0, r3
 802025c:	f7f7 f942 	bl	80174e4 <lwip_htons>
 8020260:	4603      	mov	r3, r0
 8020262:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 8020264:	6978      	ldr	r0, [r7, #20]
 8020266:	f000 fbd5 	bl	8020a14 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 802026a:	4877      	ldr	r0, [pc, #476]	; (8020448 <udp_input+0x2a8>)
 802026c:	f003 feac 	bl	8023fc8 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 8020270:	4b73      	ldr	r3, [pc, #460]	; (8020440 <udp_input+0x2a0>)
 8020272:	695b      	ldr	r3, [r3, #20]
 8020274:	b2db      	uxtb	r3, r3
 8020276:	4619      	mov	r1, r3
 8020278:	4b71      	ldr	r3, [pc, #452]	; (8020440 <udp_input+0x2a0>)
 802027a:	695b      	ldr	r3, [r3, #20]
 802027c:	0a1b      	lsrs	r3, r3, #8
 802027e:	b2db      	uxtb	r3, r3
 8020280:	461a      	mov	r2, r3
 8020282:	4b6f      	ldr	r3, [pc, #444]	; (8020440 <udp_input+0x2a0>)
 8020284:	695b      	ldr	r3, [r3, #20]
 8020286:	0c1b      	lsrs	r3, r3, #16
 8020288:	b2db      	uxtb	r3, r3
 802028a:	4618      	mov	r0, r3
 802028c:	4b6c      	ldr	r3, [pc, #432]	; (8020440 <udp_input+0x2a0>)
 802028e:	695b      	ldr	r3, [r3, #20]
 8020290:	0e1b      	lsrs	r3, r3, #24
 8020292:	b2db      	uxtb	r3, r3
 8020294:	9300      	str	r3, [sp, #0]
 8020296:	4603      	mov	r3, r0
 8020298:	486c      	ldr	r0, [pc, #432]	; (802044c <udp_input+0x2ac>)
 802029a:	f003 fe95 	bl	8023fc8 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 802029e:	697b      	ldr	r3, [r7, #20]
 80202a0:	885b      	ldrh	r3, [r3, #2]
 80202a2:	b29b      	uxth	r3, r3
 80202a4:	4618      	mov	r0, r3
 80202a6:	f7f7 f91d 	bl	80174e4 <lwip_htons>
 80202aa:	4603      	mov	r3, r0
 80202ac:	4619      	mov	r1, r3
 80202ae:	4868      	ldr	r0, [pc, #416]	; (8020450 <udp_input+0x2b0>)
 80202b0:	f003 fe8a 	bl	8023fc8 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 80202b4:	4b62      	ldr	r3, [pc, #392]	; (8020440 <udp_input+0x2a0>)
 80202b6:	691b      	ldr	r3, [r3, #16]
 80202b8:	b2db      	uxtb	r3, r3
 80202ba:	4619      	mov	r1, r3
 80202bc:	4b60      	ldr	r3, [pc, #384]	; (8020440 <udp_input+0x2a0>)
 80202be:	691b      	ldr	r3, [r3, #16]
 80202c0:	0a1b      	lsrs	r3, r3, #8
 80202c2:	b2db      	uxtb	r3, r3
 80202c4:	461a      	mov	r2, r3
 80202c6:	4b5e      	ldr	r3, [pc, #376]	; (8020440 <udp_input+0x2a0>)
 80202c8:	691b      	ldr	r3, [r3, #16]
 80202ca:	0c1b      	lsrs	r3, r3, #16
 80202cc:	b2db      	uxtb	r3, r3
 80202ce:	4618      	mov	r0, r3
 80202d0:	4b5b      	ldr	r3, [pc, #364]	; (8020440 <udp_input+0x2a0>)
 80202d2:	691b      	ldr	r3, [r3, #16]
 80202d4:	0e1b      	lsrs	r3, r3, #24
 80202d6:	b2db      	uxtb	r3, r3
 80202d8:	9300      	str	r3, [sp, #0]
 80202da:	4603      	mov	r3, r0
 80202dc:	485b      	ldr	r0, [pc, #364]	; (802044c <udp_input+0x2ac>)
 80202de:	f003 fe73 	bl	8023fc8 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 80202e2:	697b      	ldr	r3, [r7, #20]
 80202e4:	881b      	ldrh	r3, [r3, #0]
 80202e6:	b29b      	uxth	r3, r3
 80202e8:	4618      	mov	r0, r3
 80202ea:	f7f7 f8fb 	bl	80174e4 <lwip_htons>
 80202ee:	4603      	mov	r3, r0
 80202f0:	4619      	mov	r1, r3
 80202f2:	4858      	ldr	r0, [pc, #352]	; (8020454 <udp_input+0x2b4>)
 80202f4:	f003 fe68 	bl	8023fc8 <iprintf>

  pcb = NULL;
 80202f8:	2300      	movs	r3, #0
 80202fa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80202fc:	2300      	movs	r3, #0
 80202fe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8020300:	2300      	movs	r3, #0
 8020302:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020304:	4b54      	ldr	r3, [pc, #336]	; (8020458 <udp_input+0x2b8>)
 8020306:	681b      	ldr	r3, [r3, #0]
 8020308:	627b      	str	r3, [r7, #36]	; 0x24
 802030a:	e0b7      	b.n	802047c <udp_input+0x2dc>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 802030c:	4853      	ldr	r0, [pc, #332]	; (802045c <udp_input+0x2bc>)
 802030e:	f003 fe5b 	bl	8023fc8 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 8020312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020314:	681b      	ldr	r3, [r3, #0]
 8020316:	b2db      	uxtb	r3, r3
 8020318:	4619      	mov	r1, r3
 802031a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802031c:	681b      	ldr	r3, [r3, #0]
 802031e:	0a1b      	lsrs	r3, r3, #8
 8020320:	b2db      	uxtb	r3, r3
 8020322:	461a      	mov	r2, r3
 8020324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020326:	681b      	ldr	r3, [r3, #0]
 8020328:	0c1b      	lsrs	r3, r3, #16
 802032a:	b2db      	uxtb	r3, r3
 802032c:	4618      	mov	r0, r3
 802032e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020330:	681b      	ldr	r3, [r3, #0]
 8020332:	0e1b      	lsrs	r3, r3, #24
 8020334:	b2db      	uxtb	r3, r3
 8020336:	9300      	str	r3, [sp, #0]
 8020338:	4603      	mov	r3, r0
 802033a:	4844      	ldr	r0, [pc, #272]	; (802044c <udp_input+0x2ac>)
 802033c:	f003 fe44 	bl	8023fc8 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 8020340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020342:	8a5b      	ldrh	r3, [r3, #18]
 8020344:	4619      	mov	r1, r3
 8020346:	4842      	ldr	r0, [pc, #264]	; (8020450 <udp_input+0x2b0>)
 8020348:	f003 fe3e 	bl	8023fc8 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 802034c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802034e:	685b      	ldr	r3, [r3, #4]
 8020350:	b2db      	uxtb	r3, r3
 8020352:	4619      	mov	r1, r3
 8020354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020356:	685b      	ldr	r3, [r3, #4]
 8020358:	0a1b      	lsrs	r3, r3, #8
 802035a:	b2db      	uxtb	r3, r3
 802035c:	461a      	mov	r2, r3
 802035e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020360:	685b      	ldr	r3, [r3, #4]
 8020362:	0c1b      	lsrs	r3, r3, #16
 8020364:	b2db      	uxtb	r3, r3
 8020366:	4618      	mov	r0, r3
 8020368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802036a:	685b      	ldr	r3, [r3, #4]
 802036c:	0e1b      	lsrs	r3, r3, #24
 802036e:	b2db      	uxtb	r3, r3
 8020370:	9300      	str	r3, [sp, #0]
 8020372:	4603      	mov	r3, r0
 8020374:	4835      	ldr	r0, [pc, #212]	; (802044c <udp_input+0x2ac>)
 8020376:	f003 fe27 	bl	8023fc8 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 802037a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802037c:	8a9b      	ldrh	r3, [r3, #20]
 802037e:	4619      	mov	r1, r3
 8020380:	4834      	ldr	r0, [pc, #208]	; (8020454 <udp_input+0x2b4>)
 8020382:	f003 fe21 	bl	8023fc8 <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8020386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020388:	8a5b      	ldrh	r3, [r3, #18]
 802038a:	89fa      	ldrh	r2, [r7, #14]
 802038c:	429a      	cmp	r2, r3
 802038e:	d170      	bne.n	8020472 <udp_input+0x2d2>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8020390:	7cfb      	ldrb	r3, [r7, #19]
 8020392:	461a      	mov	r2, r3
 8020394:	6839      	ldr	r1, [r7, #0]
 8020396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020398:	f7ff fe9e 	bl	80200d8 <udp_input_local_match>
 802039c:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 802039e:	2b00      	cmp	r3, #0
 80203a0:	d067      	beq.n	8020472 <udp_input+0x2d2>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80203a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203a4:	7c1b      	ldrb	r3, [r3, #16]
 80203a6:	f003 0304 	and.w	r3, r3, #4
 80203aa:	2b00      	cmp	r3, #0
 80203ac:	d11d      	bne.n	80203ea <udp_input+0x24a>
        if (uncon_pcb == NULL) {
 80203ae:	69fb      	ldr	r3, [r7, #28]
 80203b0:	2b00      	cmp	r3, #0
 80203b2:	d102      	bne.n	80203ba <udp_input+0x21a>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80203b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203b6:	61fb      	str	r3, [r7, #28]
 80203b8:	e017      	b.n	80203ea <udp_input+0x24a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80203ba:	7cfb      	ldrb	r3, [r7, #19]
 80203bc:	2b00      	cmp	r3, #0
 80203be:	d014      	beq.n	80203ea <udp_input+0x24a>
 80203c0:	4b1f      	ldr	r3, [pc, #124]	; (8020440 <udp_input+0x2a0>)
 80203c2:	695b      	ldr	r3, [r3, #20]
 80203c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80203c8:	d10f      	bne.n	80203ea <udp_input+0x24a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80203ca:	69fb      	ldr	r3, [r7, #28]
 80203cc:	681a      	ldr	r2, [r3, #0]
 80203ce:	683b      	ldr	r3, [r7, #0]
 80203d0:	3304      	adds	r3, #4
 80203d2:	681b      	ldr	r3, [r3, #0]
 80203d4:	429a      	cmp	r2, r3
 80203d6:	d008      	beq.n	80203ea <udp_input+0x24a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80203d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203da:	681a      	ldr	r2, [r3, #0]
 80203dc:	683b      	ldr	r3, [r7, #0]
 80203de:	3304      	adds	r3, #4
 80203e0:	681b      	ldr	r3, [r3, #0]
 80203e2:	429a      	cmp	r2, r3
 80203e4:	d101      	bne.n	80203ea <udp_input+0x24a>
              /* better match */
              uncon_pcb = pcb;
 80203e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203e8:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80203ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203ec:	8a9b      	ldrh	r3, [r3, #20]
 80203ee:	8a3a      	ldrh	r2, [r7, #16]
 80203f0:	429a      	cmp	r2, r3
 80203f2:	d13e      	bne.n	8020472 <udp_input+0x2d2>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80203f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203f6:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80203f8:	2b00      	cmp	r3, #0
 80203fa:	d005      	beq.n	8020408 <udp_input+0x268>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80203fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203fe:	685a      	ldr	r2, [r3, #4]
 8020400:	4b0f      	ldr	r3, [pc, #60]	; (8020440 <udp_input+0x2a0>)
 8020402:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8020404:	429a      	cmp	r2, r3
 8020406:	d134      	bne.n	8020472 <udp_input+0x2d2>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8020408:	6a3b      	ldr	r3, [r7, #32]
 802040a:	2b00      	cmp	r3, #0
 802040c:	d028      	beq.n	8020460 <udp_input+0x2c0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 802040e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020410:	68da      	ldr	r2, [r3, #12]
 8020412:	6a3b      	ldr	r3, [r7, #32]
 8020414:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8020416:	4b10      	ldr	r3, [pc, #64]	; (8020458 <udp_input+0x2b8>)
 8020418:	681a      	ldr	r2, [r3, #0]
 802041a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802041c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 802041e:	4a0e      	ldr	r2, [pc, #56]	; (8020458 <udp_input+0x2b8>)
 8020420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020422:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8020424:	e02e      	b.n	8020484 <udp_input+0x2e4>
 8020426:	bf00      	nop
 8020428:	080286bc 	.word	0x080286bc
 802042c:	08028760 	.word	0x08028760
 8020430:	08028710 	.word	0x08028710
 8020434:	08028778 	.word	0x08028778
 8020438:	2007ecb8 	.word	0x2007ecb8
 802043c:	08028794 	.word	0x08028794
 8020440:	2007ba88 	.word	0x2007ba88
 8020444:	080287cc 	.word	0x080287cc
 8020448:	080287f8 	.word	0x080287f8
 802044c:	08028800 	.word	0x08028800
 8020450:	08028810 	.word	0x08028810
 8020454:	08028820 	.word	0x08028820
 8020458:	2007ee18 	.word	0x2007ee18
 802045c:	08028828 	.word	0x08028828
          UDP_STATS_INC(udp.cachehit);
 8020460:	4b48      	ldr	r3, [pc, #288]	; (8020584 <udp_input+0x3e4>)
 8020462:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8020466:	3301      	adds	r3, #1
 8020468:	b29a      	uxth	r2, r3
 802046a:	4b46      	ldr	r3, [pc, #280]	; (8020584 <udp_input+0x3e4>)
 802046c:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        break;
 8020470:	e008      	b.n	8020484 <udp_input+0x2e4>
      }
    }

    prev = pcb;
 8020472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020474:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8020476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020478:	68db      	ldr	r3, [r3, #12]
 802047a:	627b      	str	r3, [r7, #36]	; 0x24
 802047c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802047e:	2b00      	cmp	r3, #0
 8020480:	f47f af44 	bne.w	802030c <udp_input+0x16c>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8020484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020486:	2b00      	cmp	r3, #0
 8020488:	d101      	bne.n	802048e <udp_input+0x2ee>
    pcb = uncon_pcb;
 802048a:	69fb      	ldr	r3, [r7, #28]
 802048c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 802048e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020490:	2b00      	cmp	r3, #0
 8020492:	d002      	beq.n	802049a <udp_input+0x2fa>
    for_us = 1;
 8020494:	2301      	movs	r3, #1
 8020496:	76fb      	strb	r3, [r7, #27]
 8020498:	e00a      	b.n	80204b0 <udp_input+0x310>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 802049a:	683b      	ldr	r3, [r7, #0]
 802049c:	3304      	adds	r3, #4
 802049e:	681a      	ldr	r2, [r3, #0]
 80204a0:	4b39      	ldr	r3, [pc, #228]	; (8020588 <udp_input+0x3e8>)
 80204a2:	695b      	ldr	r3, [r3, #20]
 80204a4:	429a      	cmp	r2, r3
 80204a6:	bf0c      	ite	eq
 80204a8:	2301      	moveq	r3, #1
 80204aa:	2300      	movne	r3, #0
 80204ac:	b2db      	uxtb	r3, r3
 80204ae:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80204b0:	7efb      	ldrb	r3, [r7, #27]
 80204b2:	2b00      	cmp	r3, #0
 80204b4:	d05f      	beq.n	8020576 <udp_input+0x3d6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 80204b6:	4835      	ldr	r0, [pc, #212]	; (802058c <udp_input+0x3ec>)
 80204b8:	f003 fdf4 	bl	80240a4 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80204bc:	2108      	movs	r1, #8
 80204be:	6878      	ldr	r0, [r7, #4]
 80204c0:	f7f8 fe28 	bl	8019114 <pbuf_remove_header>
 80204c4:	4603      	mov	r3, r0
 80204c6:	2b00      	cmp	r3, #0
 80204c8:	d012      	beq.n	80204f0 <udp_input+0x350>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80204ca:	4b31      	ldr	r3, [pc, #196]	; (8020590 <udp_input+0x3f0>)
 80204cc:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80204d0:	4930      	ldr	r1, [pc, #192]	; (8020594 <udp_input+0x3f4>)
 80204d2:	4831      	ldr	r0, [pc, #196]	; (8020598 <udp_input+0x3f8>)
 80204d4:	f003 fd78 	bl	8023fc8 <iprintf>
      UDP_STATS_INC(udp.drop);
 80204d8:	4b2a      	ldr	r3, [pc, #168]	; (8020584 <udp_input+0x3e4>)
 80204da:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80204de:	3301      	adds	r3, #1
 80204e0:	b29a      	uxth	r2, r3
 80204e2:	4b28      	ldr	r3, [pc, #160]	; (8020584 <udp_input+0x3e4>)
 80204e4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80204e8:	6878      	ldr	r0, [r7, #4]
 80204ea:	f7f8 fe99 	bl	8019220 <pbuf_free>
      goto end;
 80204ee:	e045      	b.n	802057c <udp_input+0x3dc>
    }

    if (pcb != NULL) {
 80204f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204f2:	2b00      	cmp	r3, #0
 80204f4:	d012      	beq.n	802051c <udp_input+0x37c>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80204f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204f8:	699b      	ldr	r3, [r3, #24]
 80204fa:	2b00      	cmp	r3, #0
 80204fc:	d00a      	beq.n	8020514 <udp_input+0x374>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80204fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020500:	699c      	ldr	r4, [r3, #24]
 8020502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020504:	69d8      	ldr	r0, [r3, #28]
 8020506:	8a3b      	ldrh	r3, [r7, #16]
 8020508:	9300      	str	r3, [sp, #0]
 802050a:	4b24      	ldr	r3, [pc, #144]	; (802059c <udp_input+0x3fc>)
 802050c:	687a      	ldr	r2, [r7, #4]
 802050e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020510:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8020512:	e034      	b.n	802057e <udp_input+0x3de>
        pbuf_free(p);
 8020514:	6878      	ldr	r0, [r7, #4]
 8020516:	f7f8 fe83 	bl	8019220 <pbuf_free>
        goto end;
 802051a:	e02f      	b.n	802057c <udp_input+0x3dc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 802051c:	4820      	ldr	r0, [pc, #128]	; (80205a0 <udp_input+0x400>)
 802051e:	f003 fdc1 	bl	80240a4 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8020522:	7cfb      	ldrb	r3, [r7, #19]
 8020524:	2b00      	cmp	r3, #0
 8020526:	d112      	bne.n	802054e <udp_input+0x3ae>
 8020528:	4b17      	ldr	r3, [pc, #92]	; (8020588 <udp_input+0x3e8>)
 802052a:	695b      	ldr	r3, [r3, #20]
 802052c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020530:	2be0      	cmp	r3, #224	; 0xe0
 8020532:	d00c      	beq.n	802054e <udp_input+0x3ae>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8020534:	4b14      	ldr	r3, [pc, #80]	; (8020588 <udp_input+0x3e8>)
 8020536:	899b      	ldrh	r3, [r3, #12]
 8020538:	3308      	adds	r3, #8
 802053a:	b29b      	uxth	r3, r3
 802053c:	b21b      	sxth	r3, r3
 802053e:	4619      	mov	r1, r3
 8020540:	6878      	ldr	r0, [r7, #4]
 8020542:	f7f8 fe5a 	bl	80191fa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8020546:	2103      	movs	r1, #3
 8020548:	6878      	ldr	r0, [r7, #4]
 802054a:	f001 fc13 	bl	8021d74 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 802054e:	4b0d      	ldr	r3, [pc, #52]	; (8020584 <udp_input+0x3e4>)
 8020550:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8020554:	3301      	adds	r3, #1
 8020556:	b29a      	uxth	r2, r3
 8020558:	4b0a      	ldr	r3, [pc, #40]	; (8020584 <udp_input+0x3e4>)
 802055a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 802055e:	4b09      	ldr	r3, [pc, #36]	; (8020584 <udp_input+0x3e4>)
 8020560:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8020564:	3301      	adds	r3, #1
 8020566:	b29a      	uxth	r2, r3
 8020568:	4b06      	ldr	r3, [pc, #24]	; (8020584 <udp_input+0x3e4>)
 802056a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      pbuf_free(p);
 802056e:	6878      	ldr	r0, [r7, #4]
 8020570:	f7f8 fe56 	bl	8019220 <pbuf_free>
  return;
 8020574:	e003      	b.n	802057e <udp_input+0x3de>
    pbuf_free(p);
 8020576:	6878      	ldr	r0, [r7, #4]
 8020578:	f7f8 fe52 	bl	8019220 <pbuf_free>
  return;
 802057c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 802057e:	372c      	adds	r7, #44	; 0x2c
 8020580:	46bd      	mov	sp, r7
 8020582:	bd90      	pop	{r4, r7, pc}
 8020584:	2007ecb8 	.word	0x2007ecb8
 8020588:	2007ba88 	.word	0x2007ba88
 802058c:	08028830 	.word	0x08028830
 8020590:	080286bc 	.word	0x080286bc
 8020594:	08028850 	.word	0x08028850
 8020598:	08028710 	.word	0x08028710
 802059c:	2007ba98 	.word	0x2007ba98
 80205a0:	0802886c 	.word	0x0802886c

080205a4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80205a4:	b580      	push	{r7, lr}
 80205a6:	b088      	sub	sp, #32
 80205a8:	af02      	add	r7, sp, #8
 80205aa:	60f8      	str	r0, [r7, #12]
 80205ac:	60b9      	str	r1, [r7, #8]
 80205ae:	4613      	mov	r3, r2
 80205b0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80205b2:	68bb      	ldr	r3, [r7, #8]
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	d101      	bne.n	80205bc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80205b8:	4b65      	ldr	r3, [pc, #404]	; (8020750 <udp_bind+0x1ac>)
 80205ba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80205bc:	68fb      	ldr	r3, [r7, #12]
 80205be:	2b00      	cmp	r3, #0
 80205c0:	d109      	bne.n	80205d6 <udp_bind+0x32>
 80205c2:	4b64      	ldr	r3, [pc, #400]	; (8020754 <udp_bind+0x1b0>)
 80205c4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80205c8:	4963      	ldr	r1, [pc, #396]	; (8020758 <udp_bind+0x1b4>)
 80205ca:	4864      	ldr	r0, [pc, #400]	; (802075c <udp_bind+0x1b8>)
 80205cc:	f003 fcfc 	bl	8023fc8 <iprintf>
 80205d0:	f06f 030f 	mvn.w	r3, #15
 80205d4:	e0b7      	b.n	8020746 <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 80205d6:	4862      	ldr	r0, [pc, #392]	; (8020760 <udp_bind+0x1bc>)
 80205d8:	f003 fcf6 	bl	8023fc8 <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 80205dc:	68bb      	ldr	r3, [r7, #8]
 80205de:	2b00      	cmp	r3, #0
 80205e0:	d003      	beq.n	80205ea <udp_bind+0x46>
 80205e2:	68bb      	ldr	r3, [r7, #8]
 80205e4:	781b      	ldrb	r3, [r3, #0]
 80205e6:	4619      	mov	r1, r3
 80205e8:	e000      	b.n	80205ec <udp_bind+0x48>
 80205ea:	2100      	movs	r1, #0
 80205ec:	68bb      	ldr	r3, [r7, #8]
 80205ee:	2b00      	cmp	r3, #0
 80205f0:	d004      	beq.n	80205fc <udp_bind+0x58>
 80205f2:	68bb      	ldr	r3, [r7, #8]
 80205f4:	3301      	adds	r3, #1
 80205f6:	781b      	ldrb	r3, [r3, #0]
 80205f8:	461a      	mov	r2, r3
 80205fa:	e000      	b.n	80205fe <udp_bind+0x5a>
 80205fc:	2200      	movs	r2, #0
 80205fe:	68bb      	ldr	r3, [r7, #8]
 8020600:	2b00      	cmp	r3, #0
 8020602:	d004      	beq.n	802060e <udp_bind+0x6a>
 8020604:	68bb      	ldr	r3, [r7, #8]
 8020606:	3302      	adds	r3, #2
 8020608:	781b      	ldrb	r3, [r3, #0]
 802060a:	4618      	mov	r0, r3
 802060c:	e000      	b.n	8020610 <udp_bind+0x6c>
 802060e:	2000      	movs	r0, #0
 8020610:	68bb      	ldr	r3, [r7, #8]
 8020612:	2b00      	cmp	r3, #0
 8020614:	d003      	beq.n	802061e <udp_bind+0x7a>
 8020616:	68bb      	ldr	r3, [r7, #8]
 8020618:	3303      	adds	r3, #3
 802061a:	781b      	ldrb	r3, [r3, #0]
 802061c:	e000      	b.n	8020620 <udp_bind+0x7c>
 802061e:	2300      	movs	r3, #0
 8020620:	9300      	str	r3, [sp, #0]
 8020622:	4603      	mov	r3, r0
 8020624:	484f      	ldr	r0, [pc, #316]	; (8020764 <udp_bind+0x1c0>)
 8020626:	f003 fccf 	bl	8023fc8 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 802062a:	88fb      	ldrh	r3, [r7, #6]
 802062c:	4619      	mov	r1, r3
 802062e:	484e      	ldr	r0, [pc, #312]	; (8020768 <udp_bind+0x1c4>)
 8020630:	f003 fcca 	bl	8023fc8 <iprintf>

  rebind = 0;
 8020634:	2300      	movs	r3, #0
 8020636:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020638:	4b4c      	ldr	r3, [pc, #304]	; (802076c <udp_bind+0x1c8>)
 802063a:	681b      	ldr	r3, [r3, #0]
 802063c:	617b      	str	r3, [r7, #20]
 802063e:	e009      	b.n	8020654 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8020640:	68fa      	ldr	r2, [r7, #12]
 8020642:	697b      	ldr	r3, [r7, #20]
 8020644:	429a      	cmp	r2, r3
 8020646:	d102      	bne.n	802064e <udp_bind+0xaa>
      rebind = 1;
 8020648:	2301      	movs	r3, #1
 802064a:	74fb      	strb	r3, [r7, #19]
      break;
 802064c:	e005      	b.n	802065a <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802064e:	697b      	ldr	r3, [r7, #20]
 8020650:	68db      	ldr	r3, [r3, #12]
 8020652:	617b      	str	r3, [r7, #20]
 8020654:	697b      	ldr	r3, [r7, #20]
 8020656:	2b00      	cmp	r3, #0
 8020658:	d1f2      	bne.n	8020640 <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 802065a:	88fb      	ldrh	r3, [r7, #6]
 802065c:	2b00      	cmp	r3, #0
 802065e:	d10c      	bne.n	802067a <udp_bind+0xd6>
    port = udp_new_port();
 8020660:	f7ff fd02 	bl	8020068 <udp_new_port>
 8020664:	4603      	mov	r3, r0
 8020666:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8020668:	88fb      	ldrh	r3, [r7, #6]
 802066a:	2b00      	cmp	r3, #0
 802066c:	d134      	bne.n	80206d8 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 802066e:	4840      	ldr	r0, [pc, #256]	; (8020770 <udp_bind+0x1cc>)
 8020670:	f003 fd18 	bl	80240a4 <puts>
      return ERR_USE;
 8020674:	f06f 0307 	mvn.w	r3, #7
 8020678:	e065      	b.n	8020746 <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802067a:	4b3c      	ldr	r3, [pc, #240]	; (802076c <udp_bind+0x1c8>)
 802067c:	681b      	ldr	r3, [r3, #0]
 802067e:	617b      	str	r3, [r7, #20]
 8020680:	e027      	b.n	80206d2 <udp_bind+0x12e>
      if (pcb != ipcb) {
 8020682:	68fa      	ldr	r2, [r7, #12]
 8020684:	697b      	ldr	r3, [r7, #20]
 8020686:	429a      	cmp	r2, r3
 8020688:	d020      	beq.n	80206cc <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 802068a:	697b      	ldr	r3, [r7, #20]
 802068c:	8a5b      	ldrh	r3, [r3, #18]
 802068e:	88fa      	ldrh	r2, [r7, #6]
 8020690:	429a      	cmp	r2, r3
 8020692:	d11b      	bne.n	80206cc <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8020694:	697b      	ldr	r3, [r7, #20]
 8020696:	681a      	ldr	r2, [r3, #0]
 8020698:	68bb      	ldr	r3, [r7, #8]
 802069a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 802069c:	429a      	cmp	r2, r3
 802069e:	d00d      	beq.n	80206bc <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80206a0:	68bb      	ldr	r3, [r7, #8]
 80206a2:	2b00      	cmp	r3, #0
 80206a4:	d00a      	beq.n	80206bc <udp_bind+0x118>
 80206a6:	68bb      	ldr	r3, [r7, #8]
 80206a8:	681b      	ldr	r3, [r3, #0]
 80206aa:	2b00      	cmp	r3, #0
 80206ac:	d006      	beq.n	80206bc <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 80206ae:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80206b0:	2b00      	cmp	r3, #0
 80206b2:	d003      	beq.n	80206bc <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 80206b4:	697b      	ldr	r3, [r7, #20]
 80206b6:	681b      	ldr	r3, [r3, #0]
 80206b8:	2b00      	cmp	r3, #0
 80206ba:	d107      	bne.n	80206cc <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 80206bc:	88fb      	ldrh	r3, [r7, #6]
 80206be:	4619      	mov	r1, r3
 80206c0:	482c      	ldr	r0, [pc, #176]	; (8020774 <udp_bind+0x1d0>)
 80206c2:	f003 fc81 	bl	8023fc8 <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80206c6:	f06f 0307 	mvn.w	r3, #7
 80206ca:	e03c      	b.n	8020746 <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80206cc:	697b      	ldr	r3, [r7, #20]
 80206ce:	68db      	ldr	r3, [r3, #12]
 80206d0:	617b      	str	r3, [r7, #20]
 80206d2:	697b      	ldr	r3, [r7, #20]
 80206d4:	2b00      	cmp	r3, #0
 80206d6:	d1d4      	bne.n	8020682 <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80206d8:	68bb      	ldr	r3, [r7, #8]
 80206da:	2b00      	cmp	r3, #0
 80206dc:	d002      	beq.n	80206e4 <udp_bind+0x140>
 80206de:	68bb      	ldr	r3, [r7, #8]
 80206e0:	681b      	ldr	r3, [r3, #0]
 80206e2:	e000      	b.n	80206e6 <udp_bind+0x142>
 80206e4:	2300      	movs	r3, #0
 80206e6:	68fa      	ldr	r2, [r7, #12]
 80206e8:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80206ea:	68fb      	ldr	r3, [r7, #12]
 80206ec:	88fa      	ldrh	r2, [r7, #6]
 80206ee:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80206f0:	7cfb      	ldrb	r3, [r7, #19]
 80206f2:	2b00      	cmp	r3, #0
 80206f4:	d106      	bne.n	8020704 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80206f6:	4b1d      	ldr	r3, [pc, #116]	; (802076c <udp_bind+0x1c8>)
 80206f8:	681a      	ldr	r2, [r3, #0]
 80206fa:	68fb      	ldr	r3, [r7, #12]
 80206fc:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80206fe:	4a1b      	ldr	r2, [pc, #108]	; (802076c <udp_bind+0x1c8>)
 8020700:	68fb      	ldr	r3, [r7, #12]
 8020702:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 8020704:	481c      	ldr	r0, [pc, #112]	; (8020778 <udp_bind+0x1d4>)
 8020706:	f003 fc5f 	bl	8023fc8 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 802070a:	68fb      	ldr	r3, [r7, #12]
 802070c:	681b      	ldr	r3, [r3, #0]
 802070e:	b2db      	uxtb	r3, r3
 8020710:	4619      	mov	r1, r3
 8020712:	68fb      	ldr	r3, [r7, #12]
 8020714:	681b      	ldr	r3, [r3, #0]
 8020716:	0a1b      	lsrs	r3, r3, #8
 8020718:	b2db      	uxtb	r3, r3
 802071a:	461a      	mov	r2, r3
 802071c:	68fb      	ldr	r3, [r7, #12]
 802071e:	681b      	ldr	r3, [r3, #0]
 8020720:	0c1b      	lsrs	r3, r3, #16
 8020722:	b2db      	uxtb	r3, r3
 8020724:	4618      	mov	r0, r3
 8020726:	68fb      	ldr	r3, [r7, #12]
 8020728:	681b      	ldr	r3, [r3, #0]
 802072a:	0e1b      	lsrs	r3, r3, #24
 802072c:	b2db      	uxtb	r3, r3
 802072e:	9300      	str	r3, [sp, #0]
 8020730:	4603      	mov	r3, r0
 8020732:	480c      	ldr	r0, [pc, #48]	; (8020764 <udp_bind+0x1c0>)
 8020734:	f003 fc48 	bl	8023fc8 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 8020738:	68fb      	ldr	r3, [r7, #12]
 802073a:	8a5b      	ldrh	r3, [r3, #18]
 802073c:	4619      	mov	r1, r3
 802073e:	480f      	ldr	r0, [pc, #60]	; (802077c <udp_bind+0x1d8>)
 8020740:	f003 fc42 	bl	8023fc8 <iprintf>
  return ERR_OK;
 8020744:	2300      	movs	r3, #0
}
 8020746:	4618      	mov	r0, r3
 8020748:	3718      	adds	r7, #24
 802074a:	46bd      	mov	sp, r7
 802074c:	bd80      	pop	{r7, pc}
 802074e:	bf00      	nop
 8020750:	08029b34 	.word	0x08029b34
 8020754:	080286bc 	.word	0x080286bc
 8020758:	08028bf0 	.word	0x08028bf0
 802075c:	08028710 	.word	0x08028710
 8020760:	08028c08 	.word	0x08028c08
 8020764:	08028800 	.word	0x08028800
 8020768:	08028c1c 	.word	0x08028c1c
 802076c:	2007ee18 	.word	0x2007ee18
 8020770:	08028c2c 	.word	0x08028c2c
 8020774:	08028c4c 	.word	0x08028c4c
 8020778:	08028c84 	.word	0x08028c84
 802077c:	08028c98 	.word	0x08028c98

08020780 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8020780:	b580      	push	{r7, lr}
 8020782:	b088      	sub	sp, #32
 8020784:	af02      	add	r7, sp, #8
 8020786:	60f8      	str	r0, [r7, #12]
 8020788:	60b9      	str	r1, [r7, #8]
 802078a:	4613      	mov	r3, r2
 802078c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 802078e:	68fb      	ldr	r3, [r7, #12]
 8020790:	2b00      	cmp	r3, #0
 8020792:	d109      	bne.n	80207a8 <udp_connect+0x28>
 8020794:	4b3c      	ldr	r3, [pc, #240]	; (8020888 <udp_connect+0x108>)
 8020796:	f240 4235 	movw	r2, #1077	; 0x435
 802079a:	493c      	ldr	r1, [pc, #240]	; (802088c <udp_connect+0x10c>)
 802079c:	483c      	ldr	r0, [pc, #240]	; (8020890 <udp_connect+0x110>)
 802079e:	f003 fc13 	bl	8023fc8 <iprintf>
 80207a2:	f06f 030f 	mvn.w	r3, #15
 80207a6:	e06b      	b.n	8020880 <udp_connect+0x100>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80207a8:	68bb      	ldr	r3, [r7, #8]
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	d109      	bne.n	80207c2 <udp_connect+0x42>
 80207ae:	4b36      	ldr	r3, [pc, #216]	; (8020888 <udp_connect+0x108>)
 80207b0:	f240 4236 	movw	r2, #1078	; 0x436
 80207b4:	4937      	ldr	r1, [pc, #220]	; (8020894 <udp_connect+0x114>)
 80207b6:	4836      	ldr	r0, [pc, #216]	; (8020890 <udp_connect+0x110>)
 80207b8:	f003 fc06 	bl	8023fc8 <iprintf>
 80207bc:	f06f 030f 	mvn.w	r3, #15
 80207c0:	e05e      	b.n	8020880 <udp_connect+0x100>

  if (pcb->local_port == 0) {
 80207c2:	68fb      	ldr	r3, [r7, #12]
 80207c4:	8a5b      	ldrh	r3, [r3, #18]
 80207c6:	2b00      	cmp	r3, #0
 80207c8:	d10f      	bne.n	80207ea <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80207ca:	68f9      	ldr	r1, [r7, #12]
 80207cc:	68fb      	ldr	r3, [r7, #12]
 80207ce:	8a5b      	ldrh	r3, [r3, #18]
 80207d0:	461a      	mov	r2, r3
 80207d2:	68f8      	ldr	r0, [r7, #12]
 80207d4:	f7ff fee6 	bl	80205a4 <udp_bind>
 80207d8:	4603      	mov	r3, r0
 80207da:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80207dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	d002      	beq.n	80207ea <udp_connect+0x6a>
      return err;
 80207e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80207e8:	e04a      	b.n	8020880 <udp_connect+0x100>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80207ea:	68bb      	ldr	r3, [r7, #8]
 80207ec:	2b00      	cmp	r3, #0
 80207ee:	d002      	beq.n	80207f6 <udp_connect+0x76>
 80207f0:	68bb      	ldr	r3, [r7, #8]
 80207f2:	681b      	ldr	r3, [r3, #0]
 80207f4:	e000      	b.n	80207f8 <udp_connect+0x78>
 80207f6:	2300      	movs	r3, #0
 80207f8:	68fa      	ldr	r2, [r7, #12]
 80207fa:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80207fc:	68fb      	ldr	r3, [r7, #12]
 80207fe:	88fa      	ldrh	r2, [r7, #6]
 8020800:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8020802:	68fb      	ldr	r3, [r7, #12]
 8020804:	7c1b      	ldrb	r3, [r3, #16]
 8020806:	f043 0304 	orr.w	r3, r3, #4
 802080a:	b2da      	uxtb	r2, r3
 802080c:	68fb      	ldr	r3, [r7, #12]
 802080e:	741a      	strb	r2, [r3, #16]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_connect: connected to "));
 8020810:	4821      	ldr	r0, [pc, #132]	; (8020898 <udp_connect+0x118>)
 8020812:	f003 fbd9 	bl	8023fc8 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 8020816:	68fb      	ldr	r3, [r7, #12]
 8020818:	685b      	ldr	r3, [r3, #4]
 802081a:	b2db      	uxtb	r3, r3
 802081c:	4619      	mov	r1, r3
 802081e:	68fb      	ldr	r3, [r7, #12]
 8020820:	685b      	ldr	r3, [r3, #4]
 8020822:	0a1b      	lsrs	r3, r3, #8
 8020824:	b2db      	uxtb	r3, r3
 8020826:	461a      	mov	r2, r3
 8020828:	68fb      	ldr	r3, [r7, #12]
 802082a:	685b      	ldr	r3, [r3, #4]
 802082c:	0c1b      	lsrs	r3, r3, #16
 802082e:	b2db      	uxtb	r3, r3
 8020830:	4618      	mov	r0, r3
 8020832:	68fb      	ldr	r3, [r7, #12]
 8020834:	685b      	ldr	r3, [r3, #4]
 8020836:	0e1b      	lsrs	r3, r3, #24
 8020838:	b2db      	uxtb	r3, r3
 802083a:	9300      	str	r3, [sp, #0]
 802083c:	4603      	mov	r3, r0
 802083e:	4817      	ldr	r0, [pc, #92]	; (802089c <udp_connect+0x11c>)
 8020840:	f003 fbc2 	bl	8023fc8 <iprintf>
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	8a9b      	ldrh	r3, [r3, #20]
 8020848:	4619      	mov	r1, r3
 802084a:	4815      	ldr	r0, [pc, #84]	; (80208a0 <udp_connect+0x120>)
 802084c:	f003 fbbc 	bl	8023fc8 <iprintf>

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020850:	4b14      	ldr	r3, [pc, #80]	; (80208a4 <udp_connect+0x124>)
 8020852:	681b      	ldr	r3, [r3, #0]
 8020854:	617b      	str	r3, [r7, #20]
 8020856:	e008      	b.n	802086a <udp_connect+0xea>
    if (pcb == ipcb) {
 8020858:	68fa      	ldr	r2, [r7, #12]
 802085a:	697b      	ldr	r3, [r7, #20]
 802085c:	429a      	cmp	r2, r3
 802085e:	d101      	bne.n	8020864 <udp_connect+0xe4>
      /* already on the list, just return */
      return ERR_OK;
 8020860:	2300      	movs	r3, #0
 8020862:	e00d      	b.n	8020880 <udp_connect+0x100>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020864:	697b      	ldr	r3, [r7, #20]
 8020866:	68db      	ldr	r3, [r3, #12]
 8020868:	617b      	str	r3, [r7, #20]
 802086a:	697b      	ldr	r3, [r7, #20]
 802086c:	2b00      	cmp	r3, #0
 802086e:	d1f3      	bne.n	8020858 <udp_connect+0xd8>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8020870:	4b0c      	ldr	r3, [pc, #48]	; (80208a4 <udp_connect+0x124>)
 8020872:	681a      	ldr	r2, [r3, #0]
 8020874:	68fb      	ldr	r3, [r7, #12]
 8020876:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8020878:	4a0a      	ldr	r2, [pc, #40]	; (80208a4 <udp_connect+0x124>)
 802087a:	68fb      	ldr	r3, [r7, #12]
 802087c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 802087e:	2300      	movs	r3, #0
}
 8020880:	4618      	mov	r0, r3
 8020882:	3718      	adds	r7, #24
 8020884:	46bd      	mov	sp, r7
 8020886:	bd80      	pop	{r7, pc}
 8020888:	080286bc 	.word	0x080286bc
 802088c:	08028ca8 	.word	0x08028ca8
 8020890:	08028710 	.word	0x08028710
 8020894:	08028cc4 	.word	0x08028cc4
 8020898:	08028ce0 	.word	0x08028ce0
 802089c:	08028800 	.word	0x08028800
 80208a0:	08028c98 	.word	0x08028c98
 80208a4:	2007ee18 	.word	0x2007ee18

080208a8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80208a8:	b580      	push	{r7, lr}
 80208aa:	b084      	sub	sp, #16
 80208ac:	af00      	add	r7, sp, #0
 80208ae:	60f8      	str	r0, [r7, #12]
 80208b0:	60b9      	str	r1, [r7, #8]
 80208b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80208b4:	68fb      	ldr	r3, [r7, #12]
 80208b6:	2b00      	cmp	r3, #0
 80208b8:	d107      	bne.n	80208ca <udp_recv+0x22>
 80208ba:	4b08      	ldr	r3, [pc, #32]	; (80208dc <udp_recv+0x34>)
 80208bc:	f240 428a 	movw	r2, #1162	; 0x48a
 80208c0:	4907      	ldr	r1, [pc, #28]	; (80208e0 <udp_recv+0x38>)
 80208c2:	4808      	ldr	r0, [pc, #32]	; (80208e4 <udp_recv+0x3c>)
 80208c4:	f003 fb80 	bl	8023fc8 <iprintf>
 80208c8:	e005      	b.n	80208d6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80208ca:	68fb      	ldr	r3, [r7, #12]
 80208cc:	68ba      	ldr	r2, [r7, #8]
 80208ce:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80208d0:	68fb      	ldr	r3, [r7, #12]
 80208d2:	687a      	ldr	r2, [r7, #4]
 80208d4:	61da      	str	r2, [r3, #28]
}
 80208d6:	3710      	adds	r7, #16
 80208d8:	46bd      	mov	sp, r7
 80208da:	bd80      	pop	{r7, pc}
 80208dc:	080286bc 	.word	0x080286bc
 80208e0:	08028d18 	.word	0x08028d18
 80208e4:	08028710 	.word	0x08028710

080208e8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80208e8:	b580      	push	{r7, lr}
 80208ea:	b084      	sub	sp, #16
 80208ec:	af00      	add	r7, sp, #0
 80208ee:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80208f0:	687b      	ldr	r3, [r7, #4]
 80208f2:	2b00      	cmp	r3, #0
 80208f4:	d107      	bne.n	8020906 <udp_remove+0x1e>
 80208f6:	4b19      	ldr	r3, [pc, #100]	; (802095c <udp_remove+0x74>)
 80208f8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80208fc:	4918      	ldr	r1, [pc, #96]	; (8020960 <udp_remove+0x78>)
 80208fe:	4819      	ldr	r0, [pc, #100]	; (8020964 <udp_remove+0x7c>)
 8020900:	f003 fb62 	bl	8023fc8 <iprintf>
 8020904:	e026      	b.n	8020954 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8020906:	4b18      	ldr	r3, [pc, #96]	; (8020968 <udp_remove+0x80>)
 8020908:	681b      	ldr	r3, [r3, #0]
 802090a:	687a      	ldr	r2, [r7, #4]
 802090c:	429a      	cmp	r2, r3
 802090e:	d105      	bne.n	802091c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8020910:	4b15      	ldr	r3, [pc, #84]	; (8020968 <udp_remove+0x80>)
 8020912:	681b      	ldr	r3, [r3, #0]
 8020914:	68db      	ldr	r3, [r3, #12]
 8020916:	4a14      	ldr	r2, [pc, #80]	; (8020968 <udp_remove+0x80>)
 8020918:	6013      	str	r3, [r2, #0]
 802091a:	e017      	b.n	802094c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 802091c:	4b12      	ldr	r3, [pc, #72]	; (8020968 <udp_remove+0x80>)
 802091e:	681b      	ldr	r3, [r3, #0]
 8020920:	60fb      	str	r3, [r7, #12]
 8020922:	e010      	b.n	8020946 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8020924:	68fb      	ldr	r3, [r7, #12]
 8020926:	68db      	ldr	r3, [r3, #12]
 8020928:	2b00      	cmp	r3, #0
 802092a:	d009      	beq.n	8020940 <udp_remove+0x58>
 802092c:	68fb      	ldr	r3, [r7, #12]
 802092e:	68db      	ldr	r3, [r3, #12]
 8020930:	687a      	ldr	r2, [r7, #4]
 8020932:	429a      	cmp	r2, r3
 8020934:	d104      	bne.n	8020940 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	68da      	ldr	r2, [r3, #12]
 802093a:	68fb      	ldr	r3, [r7, #12]
 802093c:	60da      	str	r2, [r3, #12]
        break;
 802093e:	e005      	b.n	802094c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8020940:	68fb      	ldr	r3, [r7, #12]
 8020942:	68db      	ldr	r3, [r3, #12]
 8020944:	60fb      	str	r3, [r7, #12]
 8020946:	68fb      	ldr	r3, [r7, #12]
 8020948:	2b00      	cmp	r3, #0
 802094a:	d1eb      	bne.n	8020924 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 802094c:	6879      	ldr	r1, [r7, #4]
 802094e:	2000      	movs	r0, #0
 8020950:	f7f7 fccc 	bl	80182ec <memp_free>
}
 8020954:	3710      	adds	r7, #16
 8020956:	46bd      	mov	sp, r7
 8020958:	bd80      	pop	{r7, pc}
 802095a:	bf00      	nop
 802095c:	080286bc 	.word	0x080286bc
 8020960:	08028d30 	.word	0x08028d30
 8020964:	08028710 	.word	0x08028710
 8020968:	2007ee18 	.word	0x2007ee18

0802096c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 802096c:	b580      	push	{r7, lr}
 802096e:	b082      	sub	sp, #8
 8020970:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8020972:	2000      	movs	r0, #0
 8020974:	f7f7 fc3e 	bl	80181f4 <memp_malloc>
 8020978:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 802097a:	687b      	ldr	r3, [r7, #4]
 802097c:	2b00      	cmp	r3, #0
 802097e:	d007      	beq.n	8020990 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8020980:	2220      	movs	r2, #32
 8020982:	2100      	movs	r1, #0
 8020984:	6878      	ldr	r0, [r7, #4]
 8020986:	f003 fcf1 	bl	802436c <memset>
    pcb->ttl = UDP_TTL;
 802098a:	687b      	ldr	r3, [r7, #4]
 802098c:	22ff      	movs	r2, #255	; 0xff
 802098e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8020990:	687b      	ldr	r3, [r7, #4]
}
 8020992:	4618      	mov	r0, r3
 8020994:	3708      	adds	r7, #8
 8020996:	46bd      	mov	sp, r7
 8020998:	bd80      	pop	{r7, pc}

0802099a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 802099a:	b580      	push	{r7, lr}
 802099c:	b084      	sub	sp, #16
 802099e:	af00      	add	r7, sp, #0
 80209a0:	4603      	mov	r3, r0
 80209a2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80209a4:	f7ff ffe2 	bl	802096c <udp_new>
 80209a8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80209aa:	68fb      	ldr	r3, [r7, #12]
}
 80209ac:	4618      	mov	r0, r3
 80209ae:	3710      	adds	r7, #16
 80209b0:	46bd      	mov	sp, r7
 80209b2:	bd80      	pop	{r7, pc}

080209b4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80209b4:	b480      	push	{r7}
 80209b6:	b085      	sub	sp, #20
 80209b8:	af00      	add	r7, sp, #0
 80209ba:	6078      	str	r0, [r7, #4]
 80209bc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80209be:	687b      	ldr	r3, [r7, #4]
 80209c0:	2b00      	cmp	r3, #0
 80209c2:	d01e      	beq.n	8020a02 <udp_netif_ip_addr_changed+0x4e>
 80209c4:	687b      	ldr	r3, [r7, #4]
 80209c6:	681b      	ldr	r3, [r3, #0]
 80209c8:	2b00      	cmp	r3, #0
 80209ca:	d01a      	beq.n	8020a02 <udp_netif_ip_addr_changed+0x4e>
 80209cc:	683b      	ldr	r3, [r7, #0]
 80209ce:	2b00      	cmp	r3, #0
 80209d0:	d017      	beq.n	8020a02 <udp_netif_ip_addr_changed+0x4e>
 80209d2:	683b      	ldr	r3, [r7, #0]
 80209d4:	681b      	ldr	r3, [r3, #0]
 80209d6:	2b00      	cmp	r3, #0
 80209d8:	d013      	beq.n	8020a02 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80209da:	4b0d      	ldr	r3, [pc, #52]	; (8020a10 <udp_netif_ip_addr_changed+0x5c>)
 80209dc:	681b      	ldr	r3, [r3, #0]
 80209de:	60fb      	str	r3, [r7, #12]
 80209e0:	e00c      	b.n	80209fc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80209e2:	68fb      	ldr	r3, [r7, #12]
 80209e4:	681a      	ldr	r2, [r3, #0]
 80209e6:	687b      	ldr	r3, [r7, #4]
 80209e8:	681b      	ldr	r3, [r3, #0]
 80209ea:	429a      	cmp	r2, r3
 80209ec:	d103      	bne.n	80209f6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80209ee:	683b      	ldr	r3, [r7, #0]
 80209f0:	681a      	ldr	r2, [r3, #0]
 80209f2:	68fb      	ldr	r3, [r7, #12]
 80209f4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80209f6:	68fb      	ldr	r3, [r7, #12]
 80209f8:	68db      	ldr	r3, [r3, #12]
 80209fa:	60fb      	str	r3, [r7, #12]
 80209fc:	68fb      	ldr	r3, [r7, #12]
 80209fe:	2b00      	cmp	r3, #0
 8020a00:	d1ef      	bne.n	80209e2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8020a02:	bf00      	nop
 8020a04:	3714      	adds	r7, #20
 8020a06:	46bd      	mov	sp, r7
 8020a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a0c:	4770      	bx	lr
 8020a0e:	bf00      	nop
 8020a10:	2007ee18 	.word	0x2007ee18

08020a14 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 8020a14:	b590      	push	{r4, r7, lr}
 8020a16:	b083      	sub	sp, #12
 8020a18:	af00      	add	r7, sp, #0
 8020a1a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 8020a1c:	481b      	ldr	r0, [pc, #108]	; (8020a8c <udp_debug_print+0x78>)
 8020a1e:	f003 fb41 	bl	80240a4 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8020a22:	481b      	ldr	r0, [pc, #108]	; (8020a90 <udp_debug_print+0x7c>)
 8020a24:	f003 fb3e 	bl	80240a4 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 8020a28:	687b      	ldr	r3, [r7, #4]
 8020a2a:	881b      	ldrh	r3, [r3, #0]
 8020a2c:	b29b      	uxth	r3, r3
 8020a2e:	4618      	mov	r0, r3
 8020a30:	f7f6 fd58 	bl	80174e4 <lwip_htons>
 8020a34:	4603      	mov	r3, r0
 8020a36:	461c      	mov	r4, r3
 8020a38:	687b      	ldr	r3, [r7, #4]
 8020a3a:	885b      	ldrh	r3, [r3, #2]
 8020a3c:	b29b      	uxth	r3, r3
 8020a3e:	4618      	mov	r0, r3
 8020a40:	f7f6 fd50 	bl	80174e4 <lwip_htons>
 8020a44:	4603      	mov	r3, r0
 8020a46:	461a      	mov	r2, r3
 8020a48:	4621      	mov	r1, r4
 8020a4a:	4812      	ldr	r0, [pc, #72]	; (8020a94 <udp_debug_print+0x80>)
 8020a4c:	f003 fabc 	bl	8023fc8 <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8020a50:	480f      	ldr	r0, [pc, #60]	; (8020a90 <udp_debug_print+0x7c>)
 8020a52:	f003 fb27 	bl	80240a4 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 8020a56:	687b      	ldr	r3, [r7, #4]
 8020a58:	889b      	ldrh	r3, [r3, #4]
 8020a5a:	b29b      	uxth	r3, r3
 8020a5c:	4618      	mov	r0, r3
 8020a5e:	f7f6 fd41 	bl	80174e4 <lwip_htons>
 8020a62:	4603      	mov	r3, r0
 8020a64:	461c      	mov	r4, r3
 8020a66:	687b      	ldr	r3, [r7, #4]
 8020a68:	88db      	ldrh	r3, [r3, #6]
 8020a6a:	b29b      	uxth	r3, r3
 8020a6c:	4618      	mov	r0, r3
 8020a6e:	f7f6 fd39 	bl	80174e4 <lwip_htons>
 8020a72:	4603      	mov	r3, r0
 8020a74:	461a      	mov	r2, r3
 8020a76:	4621      	mov	r1, r4
 8020a78:	4807      	ldr	r0, [pc, #28]	; (8020a98 <udp_debug_print+0x84>)
 8020a7a:	f003 faa5 	bl	8023fc8 <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8020a7e:	4804      	ldr	r0, [pc, #16]	; (8020a90 <udp_debug_print+0x7c>)
 8020a80:	f003 fb10 	bl	80240a4 <puts>
}
 8020a84:	bf00      	nop
 8020a86:	370c      	adds	r7, #12
 8020a88:	46bd      	mov	sp, r7
 8020a8a:	bd90      	pop	{r4, r7, pc}
 8020a8c:	08028d48 	.word	0x08028d48
 8020a90:	08028d54 	.word	0x08028d54
 8020a94:	08028d78 	.word	0x08028d78
 8020a98:	08028db0 	.word	0x08028db0

08020a9c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8020a9c:	b580      	push	{r7, lr}
 8020a9e:	b082      	sub	sp, #8
 8020aa0:	af00      	add	r7, sp, #0
 8020aa2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8020aa4:	492b      	ldr	r1, [pc, #172]	; (8020b54 <etharp_free_entry+0xb8>)
 8020aa6:	687a      	ldr	r2, [r7, #4]
 8020aa8:	4613      	mov	r3, r2
 8020aaa:	005b      	lsls	r3, r3, #1
 8020aac:	4413      	add	r3, r2
 8020aae:	00db      	lsls	r3, r3, #3
 8020ab0:	440b      	add	r3, r1
 8020ab2:	681b      	ldr	r3, [r3, #0]
 8020ab4:	2b00      	cmp	r3, #0
 8020ab6:	d013      	beq.n	8020ae0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8020ab8:	4926      	ldr	r1, [pc, #152]	; (8020b54 <etharp_free_entry+0xb8>)
 8020aba:	687a      	ldr	r2, [r7, #4]
 8020abc:	4613      	mov	r3, r2
 8020abe:	005b      	lsls	r3, r3, #1
 8020ac0:	4413      	add	r3, r2
 8020ac2:	00db      	lsls	r3, r3, #3
 8020ac4:	440b      	add	r3, r1
 8020ac6:	681b      	ldr	r3, [r3, #0]
 8020ac8:	4618      	mov	r0, r3
 8020aca:	f7f8 fba9 	bl	8019220 <pbuf_free>
    arp_table[i].q = NULL;
 8020ace:	4921      	ldr	r1, [pc, #132]	; (8020b54 <etharp_free_entry+0xb8>)
 8020ad0:	687a      	ldr	r2, [r7, #4]
 8020ad2:	4613      	mov	r3, r2
 8020ad4:	005b      	lsls	r3, r3, #1
 8020ad6:	4413      	add	r3, r2
 8020ad8:	00db      	lsls	r3, r3, #3
 8020ada:	440b      	add	r3, r1
 8020adc:	2200      	movs	r2, #0
 8020ade:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8020ae0:	491c      	ldr	r1, [pc, #112]	; (8020b54 <etharp_free_entry+0xb8>)
 8020ae2:	687a      	ldr	r2, [r7, #4]
 8020ae4:	4613      	mov	r3, r2
 8020ae6:	005b      	lsls	r3, r3, #1
 8020ae8:	4413      	add	r3, r2
 8020aea:	00db      	lsls	r3, r3, #3
 8020aec:	440b      	add	r3, r1
 8020aee:	3314      	adds	r3, #20
 8020af0:	2200      	movs	r2, #0
 8020af2:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8020af4:	4917      	ldr	r1, [pc, #92]	; (8020b54 <etharp_free_entry+0xb8>)
 8020af6:	687a      	ldr	r2, [r7, #4]
 8020af8:	4613      	mov	r3, r2
 8020afa:	005b      	lsls	r3, r3, #1
 8020afc:	4413      	add	r3, r2
 8020afe:	00db      	lsls	r3, r3, #3
 8020b00:	440b      	add	r3, r1
 8020b02:	3312      	adds	r3, #18
 8020b04:	2200      	movs	r2, #0
 8020b06:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8020b08:	4912      	ldr	r1, [pc, #72]	; (8020b54 <etharp_free_entry+0xb8>)
 8020b0a:	687a      	ldr	r2, [r7, #4]
 8020b0c:	4613      	mov	r3, r2
 8020b0e:	005b      	lsls	r3, r3, #1
 8020b10:	4413      	add	r3, r2
 8020b12:	00db      	lsls	r3, r3, #3
 8020b14:	440b      	add	r3, r1
 8020b16:	3308      	adds	r3, #8
 8020b18:	2200      	movs	r2, #0
 8020b1a:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8020b1c:	490d      	ldr	r1, [pc, #52]	; (8020b54 <etharp_free_entry+0xb8>)
 8020b1e:	687a      	ldr	r2, [r7, #4]
 8020b20:	4613      	mov	r3, r2
 8020b22:	005b      	lsls	r3, r3, #1
 8020b24:	4413      	add	r3, r2
 8020b26:	00db      	lsls	r3, r3, #3
 8020b28:	440b      	add	r3, r1
 8020b2a:	3304      	adds	r3, #4
 8020b2c:	2200      	movs	r2, #0
 8020b2e:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 8020b30:	4908      	ldr	r1, [pc, #32]	; (8020b54 <etharp_free_entry+0xb8>)
 8020b32:	687a      	ldr	r2, [r7, #4]
 8020b34:	4613      	mov	r3, r2
 8020b36:	005b      	lsls	r3, r3, #1
 8020b38:	4413      	add	r3, r2
 8020b3a:	00db      	lsls	r3, r3, #3
 8020b3c:	440b      	add	r3, r1
 8020b3e:	3308      	adds	r3, #8
 8020b40:	4a05      	ldr	r2, [pc, #20]	; (8020b58 <etharp_free_entry+0xbc>)
 8020b42:	3304      	adds	r3, #4
 8020b44:	6810      	ldr	r0, [r2, #0]
 8020b46:	6018      	str	r0, [r3, #0]
 8020b48:	8892      	ldrh	r2, [r2, #4]
 8020b4a:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8020b4c:	bf00      	nop
 8020b4e:	3708      	adds	r7, #8
 8020b50:	46bd      	mov	sp, r7
 8020b52:	bd80      	pop	{r7, pc}
 8020b54:	2007ee1c 	.word	0x2007ee1c
 8020b58:	08029b40 	.word	0x08029b40

08020b5c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8020b5c:	b580      	push	{r7, lr}
 8020b5e:	b082      	sub	sp, #8
 8020b60:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020b62:	2300      	movs	r3, #0
 8020b64:	607b      	str	r3, [r7, #4]
 8020b66:	e096      	b.n	8020c96 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8020b68:	494f      	ldr	r1, [pc, #316]	; (8020ca8 <etharp_tmr+0x14c>)
 8020b6a:	687a      	ldr	r2, [r7, #4]
 8020b6c:	4613      	mov	r3, r2
 8020b6e:	005b      	lsls	r3, r3, #1
 8020b70:	4413      	add	r3, r2
 8020b72:	00db      	lsls	r3, r3, #3
 8020b74:	440b      	add	r3, r1
 8020b76:	3314      	adds	r3, #20
 8020b78:	781b      	ldrb	r3, [r3, #0]
 8020b7a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8020b7c:	78fb      	ldrb	r3, [r7, #3]
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	f000 8086 	beq.w	8020c90 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8020b84:	4948      	ldr	r1, [pc, #288]	; (8020ca8 <etharp_tmr+0x14c>)
 8020b86:	687a      	ldr	r2, [r7, #4]
 8020b88:	4613      	mov	r3, r2
 8020b8a:	005b      	lsls	r3, r3, #1
 8020b8c:	4413      	add	r3, r2
 8020b8e:	00db      	lsls	r3, r3, #3
 8020b90:	440b      	add	r3, r1
 8020b92:	3312      	adds	r3, #18
 8020b94:	881b      	ldrh	r3, [r3, #0]
 8020b96:	3301      	adds	r3, #1
 8020b98:	b298      	uxth	r0, r3
 8020b9a:	4943      	ldr	r1, [pc, #268]	; (8020ca8 <etharp_tmr+0x14c>)
 8020b9c:	687a      	ldr	r2, [r7, #4]
 8020b9e:	4613      	mov	r3, r2
 8020ba0:	005b      	lsls	r3, r3, #1
 8020ba2:	4413      	add	r3, r2
 8020ba4:	00db      	lsls	r3, r3, #3
 8020ba6:	440b      	add	r3, r1
 8020ba8:	3312      	adds	r3, #18
 8020baa:	4602      	mov	r2, r0
 8020bac:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8020bae:	493e      	ldr	r1, [pc, #248]	; (8020ca8 <etharp_tmr+0x14c>)
 8020bb0:	687a      	ldr	r2, [r7, #4]
 8020bb2:	4613      	mov	r3, r2
 8020bb4:	005b      	lsls	r3, r3, #1
 8020bb6:	4413      	add	r3, r2
 8020bb8:	00db      	lsls	r3, r3, #3
 8020bba:	440b      	add	r3, r1
 8020bbc:	3312      	adds	r3, #18
 8020bbe:	881b      	ldrh	r3, [r3, #0]
 8020bc0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8020bc4:	d215      	bcs.n	8020bf2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8020bc6:	4938      	ldr	r1, [pc, #224]	; (8020ca8 <etharp_tmr+0x14c>)
 8020bc8:	687a      	ldr	r2, [r7, #4]
 8020bca:	4613      	mov	r3, r2
 8020bcc:	005b      	lsls	r3, r3, #1
 8020bce:	4413      	add	r3, r2
 8020bd0:	00db      	lsls	r3, r3, #3
 8020bd2:	440b      	add	r3, r1
 8020bd4:	3314      	adds	r3, #20
 8020bd6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8020bd8:	2b01      	cmp	r3, #1
 8020bda:	d10e      	bne.n	8020bfa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8020bdc:	4932      	ldr	r1, [pc, #200]	; (8020ca8 <etharp_tmr+0x14c>)
 8020bde:	687a      	ldr	r2, [r7, #4]
 8020be0:	4613      	mov	r3, r2
 8020be2:	005b      	lsls	r3, r3, #1
 8020be4:	4413      	add	r3, r2
 8020be6:	00db      	lsls	r3, r3, #3
 8020be8:	440b      	add	r3, r1
 8020bea:	3312      	adds	r3, #18
 8020bec:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8020bee:	2b04      	cmp	r3, #4
 8020bf0:	d903      	bls.n	8020bfa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8020bf2:	6878      	ldr	r0, [r7, #4]
 8020bf4:	f7ff ff52 	bl	8020a9c <etharp_free_entry>
 8020bf8:	e04a      	b.n	8020c90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8020bfa:	492b      	ldr	r1, [pc, #172]	; (8020ca8 <etharp_tmr+0x14c>)
 8020bfc:	687a      	ldr	r2, [r7, #4]
 8020bfe:	4613      	mov	r3, r2
 8020c00:	005b      	lsls	r3, r3, #1
 8020c02:	4413      	add	r3, r2
 8020c04:	00db      	lsls	r3, r3, #3
 8020c06:	440b      	add	r3, r1
 8020c08:	3314      	adds	r3, #20
 8020c0a:	781b      	ldrb	r3, [r3, #0]
 8020c0c:	2b03      	cmp	r3, #3
 8020c0e:	d10a      	bne.n	8020c26 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8020c10:	4925      	ldr	r1, [pc, #148]	; (8020ca8 <etharp_tmr+0x14c>)
 8020c12:	687a      	ldr	r2, [r7, #4]
 8020c14:	4613      	mov	r3, r2
 8020c16:	005b      	lsls	r3, r3, #1
 8020c18:	4413      	add	r3, r2
 8020c1a:	00db      	lsls	r3, r3, #3
 8020c1c:	440b      	add	r3, r1
 8020c1e:	3314      	adds	r3, #20
 8020c20:	2204      	movs	r2, #4
 8020c22:	701a      	strb	r2, [r3, #0]
 8020c24:	e034      	b.n	8020c90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8020c26:	4920      	ldr	r1, [pc, #128]	; (8020ca8 <etharp_tmr+0x14c>)
 8020c28:	687a      	ldr	r2, [r7, #4]
 8020c2a:	4613      	mov	r3, r2
 8020c2c:	005b      	lsls	r3, r3, #1
 8020c2e:	4413      	add	r3, r2
 8020c30:	00db      	lsls	r3, r3, #3
 8020c32:	440b      	add	r3, r1
 8020c34:	3314      	adds	r3, #20
 8020c36:	781b      	ldrb	r3, [r3, #0]
 8020c38:	2b04      	cmp	r3, #4
 8020c3a:	d10a      	bne.n	8020c52 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8020c3c:	491a      	ldr	r1, [pc, #104]	; (8020ca8 <etharp_tmr+0x14c>)
 8020c3e:	687a      	ldr	r2, [r7, #4]
 8020c40:	4613      	mov	r3, r2
 8020c42:	005b      	lsls	r3, r3, #1
 8020c44:	4413      	add	r3, r2
 8020c46:	00db      	lsls	r3, r3, #3
 8020c48:	440b      	add	r3, r1
 8020c4a:	3314      	adds	r3, #20
 8020c4c:	2202      	movs	r2, #2
 8020c4e:	701a      	strb	r2, [r3, #0]
 8020c50:	e01e      	b.n	8020c90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8020c52:	4915      	ldr	r1, [pc, #84]	; (8020ca8 <etharp_tmr+0x14c>)
 8020c54:	687a      	ldr	r2, [r7, #4]
 8020c56:	4613      	mov	r3, r2
 8020c58:	005b      	lsls	r3, r3, #1
 8020c5a:	4413      	add	r3, r2
 8020c5c:	00db      	lsls	r3, r3, #3
 8020c5e:	440b      	add	r3, r1
 8020c60:	3314      	adds	r3, #20
 8020c62:	781b      	ldrb	r3, [r3, #0]
 8020c64:	2b01      	cmp	r3, #1
 8020c66:	d113      	bne.n	8020c90 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8020c68:	490f      	ldr	r1, [pc, #60]	; (8020ca8 <etharp_tmr+0x14c>)
 8020c6a:	687a      	ldr	r2, [r7, #4]
 8020c6c:	4613      	mov	r3, r2
 8020c6e:	005b      	lsls	r3, r3, #1
 8020c70:	4413      	add	r3, r2
 8020c72:	00db      	lsls	r3, r3, #3
 8020c74:	440b      	add	r3, r1
 8020c76:	3308      	adds	r3, #8
 8020c78:	6818      	ldr	r0, [r3, #0]
 8020c7a:	687a      	ldr	r2, [r7, #4]
 8020c7c:	4613      	mov	r3, r2
 8020c7e:	005b      	lsls	r3, r3, #1
 8020c80:	4413      	add	r3, r2
 8020c82:	00db      	lsls	r3, r3, #3
 8020c84:	4a08      	ldr	r2, [pc, #32]	; (8020ca8 <etharp_tmr+0x14c>)
 8020c86:	4413      	add	r3, r2
 8020c88:	3304      	adds	r3, #4
 8020c8a:	4619      	mov	r1, r3
 8020c8c:	f000 feae 	bl	80219ec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020c90:	687b      	ldr	r3, [r7, #4]
 8020c92:	3301      	adds	r3, #1
 8020c94:	607b      	str	r3, [r7, #4]
 8020c96:	687b      	ldr	r3, [r7, #4]
 8020c98:	2b09      	cmp	r3, #9
 8020c9a:	f77f af65 	ble.w	8020b68 <etharp_tmr+0xc>
      }
    }
  }
}
 8020c9e:	bf00      	nop
 8020ca0:	bf00      	nop
 8020ca2:	3708      	adds	r7, #8
 8020ca4:	46bd      	mov	sp, r7
 8020ca6:	bd80      	pop	{r7, pc}
 8020ca8:	2007ee1c 	.word	0x2007ee1c

08020cac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8020cac:	b580      	push	{r7, lr}
 8020cae:	b08a      	sub	sp, #40	; 0x28
 8020cb0:	af00      	add	r7, sp, #0
 8020cb2:	60f8      	str	r0, [r7, #12]
 8020cb4:	460b      	mov	r3, r1
 8020cb6:	607a      	str	r2, [r7, #4]
 8020cb8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8020cba:	230a      	movs	r3, #10
 8020cbc:	843b      	strh	r3, [r7, #32]
 8020cbe:	230a      	movs	r3, #10
 8020cc0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 8020cc2:	230a      	movs	r3, #10
 8020cc4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 8020cc6:	2300      	movs	r3, #0
 8020cc8:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8020cca:	230a      	movs	r3, #10
 8020ccc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8020cce:	2300      	movs	r3, #0
 8020cd0:	83bb      	strh	r3, [r7, #28]
 8020cd2:	2300      	movs	r3, #0
 8020cd4:	837b      	strh	r3, [r7, #26]
 8020cd6:	2300      	movs	r3, #0
 8020cd8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020cda:	2300      	movs	r3, #0
 8020cdc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8020cde:	e0ae      	b.n	8020e3e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8020ce0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8020ce4:	49a6      	ldr	r1, [pc, #664]	; (8020f80 <etharp_find_entry+0x2d4>)
 8020ce6:	4613      	mov	r3, r2
 8020ce8:	005b      	lsls	r3, r3, #1
 8020cea:	4413      	add	r3, r2
 8020cec:	00db      	lsls	r3, r3, #3
 8020cee:	440b      	add	r3, r1
 8020cf0:	3314      	adds	r3, #20
 8020cf2:	781b      	ldrb	r3, [r3, #0]
 8020cf4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8020cf6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8020cfa:	2b0a      	cmp	r3, #10
 8020cfc:	d105      	bne.n	8020d0a <etharp_find_entry+0x5e>
 8020cfe:	7dfb      	ldrb	r3, [r7, #23]
 8020d00:	2b00      	cmp	r3, #0
 8020d02:	d102      	bne.n	8020d0a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8020d04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8020d06:	84bb      	strh	r3, [r7, #36]	; 0x24
 8020d08:	e095      	b.n	8020e36 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8020d0a:	7dfb      	ldrb	r3, [r7, #23]
 8020d0c:	2b00      	cmp	r3, #0
 8020d0e:	f000 8092 	beq.w	8020e36 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8020d12:	7dfb      	ldrb	r3, [r7, #23]
 8020d14:	2b01      	cmp	r3, #1
 8020d16:	d009      	beq.n	8020d2c <etharp_find_entry+0x80>
 8020d18:	7dfb      	ldrb	r3, [r7, #23]
 8020d1a:	2b01      	cmp	r3, #1
 8020d1c:	d806      	bhi.n	8020d2c <etharp_find_entry+0x80>
 8020d1e:	4b99      	ldr	r3, [pc, #612]	; (8020f84 <etharp_find_entry+0x2d8>)
 8020d20:	f240 1223 	movw	r2, #291	; 0x123
 8020d24:	4998      	ldr	r1, [pc, #608]	; (8020f88 <etharp_find_entry+0x2dc>)
 8020d26:	4899      	ldr	r0, [pc, #612]	; (8020f8c <etharp_find_entry+0x2e0>)
 8020d28:	f003 f94e 	bl	8023fc8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8020d2c:	68fb      	ldr	r3, [r7, #12]
 8020d2e:	2b00      	cmp	r3, #0
 8020d30:	d020      	beq.n	8020d74 <etharp_find_entry+0xc8>
 8020d32:	68fb      	ldr	r3, [r7, #12]
 8020d34:	6819      	ldr	r1, [r3, #0]
 8020d36:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8020d3a:	4891      	ldr	r0, [pc, #580]	; (8020f80 <etharp_find_entry+0x2d4>)
 8020d3c:	4613      	mov	r3, r2
 8020d3e:	005b      	lsls	r3, r3, #1
 8020d40:	4413      	add	r3, r2
 8020d42:	00db      	lsls	r3, r3, #3
 8020d44:	4403      	add	r3, r0
 8020d46:	3304      	adds	r3, #4
 8020d48:	681b      	ldr	r3, [r3, #0]
 8020d4a:	4299      	cmp	r1, r3
 8020d4c:	d112      	bne.n	8020d74 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8020d4e:	687b      	ldr	r3, [r7, #4]
 8020d50:	2b00      	cmp	r3, #0
 8020d52:	d00c      	beq.n	8020d6e <etharp_find_entry+0xc2>
 8020d54:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8020d58:	4989      	ldr	r1, [pc, #548]	; (8020f80 <etharp_find_entry+0x2d4>)
 8020d5a:	4613      	mov	r3, r2
 8020d5c:	005b      	lsls	r3, r3, #1
 8020d5e:	4413      	add	r3, r2
 8020d60:	00db      	lsls	r3, r3, #3
 8020d62:	440b      	add	r3, r1
 8020d64:	3308      	adds	r3, #8
 8020d66:	681b      	ldr	r3, [r3, #0]
 8020d68:	687a      	ldr	r2, [r7, #4]
 8020d6a:	429a      	cmp	r2, r3
 8020d6c:	d102      	bne.n	8020d74 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8020d6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8020d72:	e100      	b.n	8020f76 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8020d74:	7dfb      	ldrb	r3, [r7, #23]
 8020d76:	2b01      	cmp	r3, #1
 8020d78:	d140      	bne.n	8020dfc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8020d7a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8020d7e:	4980      	ldr	r1, [pc, #512]	; (8020f80 <etharp_find_entry+0x2d4>)
 8020d80:	4613      	mov	r3, r2
 8020d82:	005b      	lsls	r3, r3, #1
 8020d84:	4413      	add	r3, r2
 8020d86:	00db      	lsls	r3, r3, #3
 8020d88:	440b      	add	r3, r1
 8020d8a:	681b      	ldr	r3, [r3, #0]
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	d01a      	beq.n	8020dc6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8020d90:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8020d94:	497a      	ldr	r1, [pc, #488]	; (8020f80 <etharp_find_entry+0x2d4>)
 8020d96:	4613      	mov	r3, r2
 8020d98:	005b      	lsls	r3, r3, #1
 8020d9a:	4413      	add	r3, r2
 8020d9c:	00db      	lsls	r3, r3, #3
 8020d9e:	440b      	add	r3, r1
 8020da0:	3312      	adds	r3, #18
 8020da2:	881b      	ldrh	r3, [r3, #0]
 8020da4:	8bba      	ldrh	r2, [r7, #28]
 8020da6:	429a      	cmp	r2, r3
 8020da8:	d845      	bhi.n	8020e36 <etharp_find_entry+0x18a>
            old_queue = i;
 8020daa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8020dac:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8020dae:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8020db2:	4973      	ldr	r1, [pc, #460]	; (8020f80 <etharp_find_entry+0x2d4>)
 8020db4:	4613      	mov	r3, r2
 8020db6:	005b      	lsls	r3, r3, #1
 8020db8:	4413      	add	r3, r2
 8020dba:	00db      	lsls	r3, r3, #3
 8020dbc:	440b      	add	r3, r1
 8020dbe:	3312      	adds	r3, #18
 8020dc0:	881b      	ldrh	r3, [r3, #0]
 8020dc2:	83bb      	strh	r3, [r7, #28]
 8020dc4:	e037      	b.n	8020e36 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8020dc6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8020dca:	496d      	ldr	r1, [pc, #436]	; (8020f80 <etharp_find_entry+0x2d4>)
 8020dcc:	4613      	mov	r3, r2
 8020dce:	005b      	lsls	r3, r3, #1
 8020dd0:	4413      	add	r3, r2
 8020dd2:	00db      	lsls	r3, r3, #3
 8020dd4:	440b      	add	r3, r1
 8020dd6:	3312      	adds	r3, #18
 8020dd8:	881b      	ldrh	r3, [r3, #0]
 8020dda:	8b7a      	ldrh	r2, [r7, #26]
 8020ddc:	429a      	cmp	r2, r3
 8020dde:	d82a      	bhi.n	8020e36 <etharp_find_entry+0x18a>
            old_pending = i;
 8020de0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8020de2:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8020de4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8020de8:	4965      	ldr	r1, [pc, #404]	; (8020f80 <etharp_find_entry+0x2d4>)
 8020dea:	4613      	mov	r3, r2
 8020dec:	005b      	lsls	r3, r3, #1
 8020dee:	4413      	add	r3, r2
 8020df0:	00db      	lsls	r3, r3, #3
 8020df2:	440b      	add	r3, r1
 8020df4:	3312      	adds	r3, #18
 8020df6:	881b      	ldrh	r3, [r3, #0]
 8020df8:	837b      	strh	r3, [r7, #26]
 8020dfa:	e01c      	b.n	8020e36 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8020dfc:	7dfb      	ldrb	r3, [r7, #23]
 8020dfe:	2b01      	cmp	r3, #1
 8020e00:	d919      	bls.n	8020e36 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8020e02:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8020e06:	495e      	ldr	r1, [pc, #376]	; (8020f80 <etharp_find_entry+0x2d4>)
 8020e08:	4613      	mov	r3, r2
 8020e0a:	005b      	lsls	r3, r3, #1
 8020e0c:	4413      	add	r3, r2
 8020e0e:	00db      	lsls	r3, r3, #3
 8020e10:	440b      	add	r3, r1
 8020e12:	3312      	adds	r3, #18
 8020e14:	881b      	ldrh	r3, [r3, #0]
 8020e16:	8b3a      	ldrh	r2, [r7, #24]
 8020e18:	429a      	cmp	r2, r3
 8020e1a:	d80c      	bhi.n	8020e36 <etharp_find_entry+0x18a>
            old_stable = i;
 8020e1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8020e1e:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 8020e20:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8020e24:	4956      	ldr	r1, [pc, #344]	; (8020f80 <etharp_find_entry+0x2d4>)
 8020e26:	4613      	mov	r3, r2
 8020e28:	005b      	lsls	r3, r3, #1
 8020e2a:	4413      	add	r3, r2
 8020e2c:	00db      	lsls	r3, r3, #3
 8020e2e:	440b      	add	r3, r1
 8020e30:	3312      	adds	r3, #18
 8020e32:	881b      	ldrh	r3, [r3, #0]
 8020e34:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020e36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8020e38:	3301      	adds	r3, #1
 8020e3a:	b29b      	uxth	r3, r3
 8020e3c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8020e3e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8020e42:	2b09      	cmp	r3, #9
 8020e44:	f77f af4c 	ble.w	8020ce0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8020e48:	7afb      	ldrb	r3, [r7, #11]
 8020e4a:	f003 0302 	and.w	r3, r3, #2
 8020e4e:	2b00      	cmp	r3, #0
 8020e50:	d108      	bne.n	8020e64 <etharp_find_entry+0x1b8>
 8020e52:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8020e56:	2b0a      	cmp	r3, #10
 8020e58:	d107      	bne.n	8020e6a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8020e5a:	7afb      	ldrb	r3, [r7, #11]
 8020e5c:	f003 0301 	and.w	r3, r3, #1
 8020e60:	2b00      	cmp	r3, #0
 8020e62:	d102      	bne.n	8020e6a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8020e64:	f04f 33ff 	mov.w	r3, #4294967295
 8020e68:	e085      	b.n	8020f76 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8020e6a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8020e6e:	2b09      	cmp	r3, #9
 8020e70:	dc02      	bgt.n	8020e78 <etharp_find_entry+0x1cc>
    i = empty;
 8020e72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8020e74:	84fb      	strh	r3, [r7, #38]	; 0x26
 8020e76:	e039      	b.n	8020eec <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8020e78:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8020e7c:	2b09      	cmp	r3, #9
 8020e7e:	dc14      	bgt.n	8020eaa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8020e80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020e82:	84fb      	strh	r3, [r7, #38]	; 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8020e84:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8020e88:	493d      	ldr	r1, [pc, #244]	; (8020f80 <etharp_find_entry+0x2d4>)
 8020e8a:	4613      	mov	r3, r2
 8020e8c:	005b      	lsls	r3, r3, #1
 8020e8e:	4413      	add	r3, r2
 8020e90:	00db      	lsls	r3, r3, #3
 8020e92:	440b      	add	r3, r1
 8020e94:	681b      	ldr	r3, [r3, #0]
 8020e96:	2b00      	cmp	r3, #0
 8020e98:	d018      	beq.n	8020ecc <etharp_find_entry+0x220>
 8020e9a:	4b3a      	ldr	r3, [pc, #232]	; (8020f84 <etharp_find_entry+0x2d8>)
 8020e9c:	f240 126d 	movw	r2, #365	; 0x16d
 8020ea0:	493b      	ldr	r1, [pc, #236]	; (8020f90 <etharp_find_entry+0x2e4>)
 8020ea2:	483a      	ldr	r0, [pc, #232]	; (8020f8c <etharp_find_entry+0x2e0>)
 8020ea4:	f003 f890 	bl	8023fc8 <iprintf>
 8020ea8:	e010      	b.n	8020ecc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8020eaa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020eae:	2b09      	cmp	r3, #9
 8020eb0:	dc02      	bgt.n	8020eb8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8020eb2:	8c3b      	ldrh	r3, [r7, #32]
 8020eb4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8020eb6:	e009      	b.n	8020ecc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8020eb8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8020ebc:	2b09      	cmp	r3, #9
 8020ebe:	dc02      	bgt.n	8020ec6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8020ec0:	8bfb      	ldrh	r3, [r7, #30]
 8020ec2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8020ec4:	e002      	b.n	8020ecc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8020ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8020eca:	e054      	b.n	8020f76 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8020ecc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8020ed0:	2b09      	cmp	r3, #9
 8020ed2:	dd06      	ble.n	8020ee2 <etharp_find_entry+0x236>
 8020ed4:	4b2b      	ldr	r3, [pc, #172]	; (8020f84 <etharp_find_entry+0x2d8>)
 8020ed6:	f240 127f 	movw	r2, #383	; 0x17f
 8020eda:	492e      	ldr	r1, [pc, #184]	; (8020f94 <etharp_find_entry+0x2e8>)
 8020edc:	482b      	ldr	r0, [pc, #172]	; (8020f8c <etharp_find_entry+0x2e0>)
 8020ede:	f003 f873 	bl	8023fc8 <iprintf>
    etharp_free_entry(i);
 8020ee2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8020ee6:	4618      	mov	r0, r3
 8020ee8:	f7ff fdd8 	bl	8020a9c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8020eec:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8020ef0:	2b09      	cmp	r3, #9
 8020ef2:	dd06      	ble.n	8020f02 <etharp_find_entry+0x256>
 8020ef4:	4b23      	ldr	r3, [pc, #140]	; (8020f84 <etharp_find_entry+0x2d8>)
 8020ef6:	f240 1283 	movw	r2, #387	; 0x183
 8020efa:	4926      	ldr	r1, [pc, #152]	; (8020f94 <etharp_find_entry+0x2e8>)
 8020efc:	4823      	ldr	r0, [pc, #140]	; (8020f8c <etharp_find_entry+0x2e0>)
 8020efe:	f003 f863 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8020f02:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8020f06:	491e      	ldr	r1, [pc, #120]	; (8020f80 <etharp_find_entry+0x2d4>)
 8020f08:	4613      	mov	r3, r2
 8020f0a:	005b      	lsls	r3, r3, #1
 8020f0c:	4413      	add	r3, r2
 8020f0e:	00db      	lsls	r3, r3, #3
 8020f10:	440b      	add	r3, r1
 8020f12:	3314      	adds	r3, #20
 8020f14:	781b      	ldrb	r3, [r3, #0]
 8020f16:	2b00      	cmp	r3, #0
 8020f18:	d006      	beq.n	8020f28 <etharp_find_entry+0x27c>
 8020f1a:	4b1a      	ldr	r3, [pc, #104]	; (8020f84 <etharp_find_entry+0x2d8>)
 8020f1c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8020f20:	491d      	ldr	r1, [pc, #116]	; (8020f98 <etharp_find_entry+0x2ec>)
 8020f22:	481a      	ldr	r0, [pc, #104]	; (8020f8c <etharp_find_entry+0x2e0>)
 8020f24:	f003 f850 	bl	8023fc8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8020f28:	68fb      	ldr	r3, [r7, #12]
 8020f2a:	2b00      	cmp	r3, #0
 8020f2c:	d00b      	beq.n	8020f46 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8020f2e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8020f32:	68fb      	ldr	r3, [r7, #12]
 8020f34:	6819      	ldr	r1, [r3, #0]
 8020f36:	4812      	ldr	r0, [pc, #72]	; (8020f80 <etharp_find_entry+0x2d4>)
 8020f38:	4613      	mov	r3, r2
 8020f3a:	005b      	lsls	r3, r3, #1
 8020f3c:	4413      	add	r3, r2
 8020f3e:	00db      	lsls	r3, r3, #3
 8020f40:	4403      	add	r3, r0
 8020f42:	3304      	adds	r3, #4
 8020f44:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8020f46:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8020f4a:	490d      	ldr	r1, [pc, #52]	; (8020f80 <etharp_find_entry+0x2d4>)
 8020f4c:	4613      	mov	r3, r2
 8020f4e:	005b      	lsls	r3, r3, #1
 8020f50:	4413      	add	r3, r2
 8020f52:	00db      	lsls	r3, r3, #3
 8020f54:	440b      	add	r3, r1
 8020f56:	3312      	adds	r3, #18
 8020f58:	2200      	movs	r2, #0
 8020f5a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8020f5c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8020f60:	4907      	ldr	r1, [pc, #28]	; (8020f80 <etharp_find_entry+0x2d4>)
 8020f62:	4613      	mov	r3, r2
 8020f64:	005b      	lsls	r3, r3, #1
 8020f66:	4413      	add	r3, r2
 8020f68:	00db      	lsls	r3, r3, #3
 8020f6a:	440b      	add	r3, r1
 8020f6c:	3308      	adds	r3, #8
 8020f6e:	687a      	ldr	r2, [r7, #4]
 8020f70:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8020f72:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8020f76:	4618      	mov	r0, r3
 8020f78:	3728      	adds	r7, #40	; 0x28
 8020f7a:	46bd      	mov	sp, r7
 8020f7c:	bd80      	pop	{r7, pc}
 8020f7e:	bf00      	nop
 8020f80:	2007ee1c 	.word	0x2007ee1c
 8020f84:	08028de4 	.word	0x08028de4
 8020f88:	08028e1c 	.word	0x08028e1c
 8020f8c:	08028e5c 	.word	0x08028e5c
 8020f90:	08028e84 	.word	0x08028e84
 8020f94:	08028e9c 	.word	0x08028e9c
 8020f98:	08028eb0 	.word	0x08028eb0

08020f9c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8020f9c:	b580      	push	{r7, lr}
 8020f9e:	b088      	sub	sp, #32
 8020fa0:	af02      	add	r7, sp, #8
 8020fa2:	60f8      	str	r0, [r7, #12]
 8020fa4:	60b9      	str	r1, [r7, #8]
 8020fa6:	607a      	str	r2, [r7, #4]
 8020fa8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8020faa:	68fb      	ldr	r3, [r7, #12]
 8020fac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8020fb0:	2b06      	cmp	r3, #6
 8020fb2:	d006      	beq.n	8020fc2 <etharp_update_arp_entry+0x26>
 8020fb4:	4b48      	ldr	r3, [pc, #288]	; (80210d8 <etharp_update_arp_entry+0x13c>)
 8020fb6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8020fba:	4948      	ldr	r1, [pc, #288]	; (80210dc <etharp_update_arp_entry+0x140>)
 8020fbc:	4848      	ldr	r0, [pc, #288]	; (80210e0 <etharp_update_arp_entry+0x144>)
 8020fbe:	f003 f803 	bl	8023fc8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8020fc2:	68bb      	ldr	r3, [r7, #8]
 8020fc4:	2b00      	cmp	r3, #0
 8020fc6:	d012      	beq.n	8020fee <etharp_update_arp_entry+0x52>
 8020fc8:	68bb      	ldr	r3, [r7, #8]
 8020fca:	681b      	ldr	r3, [r3, #0]
 8020fcc:	2b00      	cmp	r3, #0
 8020fce:	d00e      	beq.n	8020fee <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8020fd0:	68bb      	ldr	r3, [r7, #8]
 8020fd2:	681b      	ldr	r3, [r3, #0]
 8020fd4:	68f9      	ldr	r1, [r7, #12]
 8020fd6:	4618      	mov	r0, r3
 8020fd8:	f001 fab2 	bl	8022540 <ip4_addr_isbroadcast_u32>
 8020fdc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8020fde:	2b00      	cmp	r3, #0
 8020fe0:	d105      	bne.n	8020fee <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8020fe2:	68bb      	ldr	r3, [r7, #8]
 8020fe4:	681b      	ldr	r3, [r3, #0]
 8020fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8020fea:	2be0      	cmp	r3, #224	; 0xe0
 8020fec:	d102      	bne.n	8020ff4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8020fee:	f06f 030f 	mvn.w	r3, #15
 8020ff2:	e06c      	b.n	80210ce <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8020ff4:	78fb      	ldrb	r3, [r7, #3]
 8020ff6:	68fa      	ldr	r2, [r7, #12]
 8020ff8:	4619      	mov	r1, r3
 8020ffa:	68b8      	ldr	r0, [r7, #8]
 8020ffc:	f7ff fe56 	bl	8020cac <etharp_find_entry>
 8021000:	4603      	mov	r3, r0
 8021002:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8021004:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8021008:	2b00      	cmp	r3, #0
 802100a:	da02      	bge.n	8021012 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 802100c:	8afb      	ldrh	r3, [r7, #22]
 802100e:	b25b      	sxtb	r3, r3
 8021010:	e05d      	b.n	80210ce <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8021012:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021016:	4933      	ldr	r1, [pc, #204]	; (80210e4 <etharp_update_arp_entry+0x148>)
 8021018:	4613      	mov	r3, r2
 802101a:	005b      	lsls	r3, r3, #1
 802101c:	4413      	add	r3, r2
 802101e:	00db      	lsls	r3, r3, #3
 8021020:	440b      	add	r3, r1
 8021022:	3314      	adds	r3, #20
 8021024:	2202      	movs	r2, #2
 8021026:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8021028:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802102c:	492d      	ldr	r1, [pc, #180]	; (80210e4 <etharp_update_arp_entry+0x148>)
 802102e:	4613      	mov	r3, r2
 8021030:	005b      	lsls	r3, r3, #1
 8021032:	4413      	add	r3, r2
 8021034:	00db      	lsls	r3, r3, #3
 8021036:	440b      	add	r3, r1
 8021038:	3308      	adds	r3, #8
 802103a:	68fa      	ldr	r2, [r7, #12]
 802103c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 802103e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021042:	4613      	mov	r3, r2
 8021044:	005b      	lsls	r3, r3, #1
 8021046:	4413      	add	r3, r2
 8021048:	00db      	lsls	r3, r3, #3
 802104a:	3308      	adds	r3, #8
 802104c:	4a25      	ldr	r2, [pc, #148]	; (80210e4 <etharp_update_arp_entry+0x148>)
 802104e:	4413      	add	r3, r2
 8021050:	3304      	adds	r3, #4
 8021052:	2206      	movs	r2, #6
 8021054:	6879      	ldr	r1, [r7, #4]
 8021056:	4618      	mov	r0, r3
 8021058:	f003 fa21 	bl	802449e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 802105c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021060:	4920      	ldr	r1, [pc, #128]	; (80210e4 <etharp_update_arp_entry+0x148>)
 8021062:	4613      	mov	r3, r2
 8021064:	005b      	lsls	r3, r3, #1
 8021066:	4413      	add	r3, r2
 8021068:	00db      	lsls	r3, r3, #3
 802106a:	440b      	add	r3, r1
 802106c:	3312      	adds	r3, #18
 802106e:	2200      	movs	r2, #0
 8021070:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8021072:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021076:	491b      	ldr	r1, [pc, #108]	; (80210e4 <etharp_update_arp_entry+0x148>)
 8021078:	4613      	mov	r3, r2
 802107a:	005b      	lsls	r3, r3, #1
 802107c:	4413      	add	r3, r2
 802107e:	00db      	lsls	r3, r3, #3
 8021080:	440b      	add	r3, r1
 8021082:	681b      	ldr	r3, [r3, #0]
 8021084:	2b00      	cmp	r3, #0
 8021086:	d021      	beq.n	80210cc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8021088:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802108c:	4915      	ldr	r1, [pc, #84]	; (80210e4 <etharp_update_arp_entry+0x148>)
 802108e:	4613      	mov	r3, r2
 8021090:	005b      	lsls	r3, r3, #1
 8021092:	4413      	add	r3, r2
 8021094:	00db      	lsls	r3, r3, #3
 8021096:	440b      	add	r3, r1
 8021098:	681b      	ldr	r3, [r3, #0]
 802109a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 802109c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80210a0:	4910      	ldr	r1, [pc, #64]	; (80210e4 <etharp_update_arp_entry+0x148>)
 80210a2:	4613      	mov	r3, r2
 80210a4:	005b      	lsls	r3, r3, #1
 80210a6:	4413      	add	r3, r2
 80210a8:	00db      	lsls	r3, r3, #3
 80210aa:	440b      	add	r3, r1
 80210ac:	2200      	movs	r2, #0
 80210ae:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80210b0:	68fb      	ldr	r3, [r7, #12]
 80210b2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80210b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80210ba:	9300      	str	r3, [sp, #0]
 80210bc:	687b      	ldr	r3, [r7, #4]
 80210be:	6939      	ldr	r1, [r7, #16]
 80210c0:	68f8      	ldr	r0, [r7, #12]
 80210c2:	f002 f99d 	bl	8023400 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80210c6:	6938      	ldr	r0, [r7, #16]
 80210c8:	f7f8 f8aa 	bl	8019220 <pbuf_free>
  }
  return ERR_OK;
 80210cc:	2300      	movs	r3, #0
}
 80210ce:	4618      	mov	r0, r3
 80210d0:	3718      	adds	r7, #24
 80210d2:	46bd      	mov	sp, r7
 80210d4:	bd80      	pop	{r7, pc}
 80210d6:	bf00      	nop
 80210d8:	08028de4 	.word	0x08028de4
 80210dc:	08028edc 	.word	0x08028edc
 80210e0:	08028e5c 	.word	0x08028e5c
 80210e4:	2007ee1c 	.word	0x2007ee1c

080210e8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80210e8:	b580      	push	{r7, lr}
 80210ea:	b084      	sub	sp, #16
 80210ec:	af00      	add	r7, sp, #0
 80210ee:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80210f0:	2300      	movs	r3, #0
 80210f2:	60fb      	str	r3, [r7, #12]
 80210f4:	e01e      	b.n	8021134 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80210f6:	4913      	ldr	r1, [pc, #76]	; (8021144 <etharp_cleanup_netif+0x5c>)
 80210f8:	68fa      	ldr	r2, [r7, #12]
 80210fa:	4613      	mov	r3, r2
 80210fc:	005b      	lsls	r3, r3, #1
 80210fe:	4413      	add	r3, r2
 8021100:	00db      	lsls	r3, r3, #3
 8021102:	440b      	add	r3, r1
 8021104:	3314      	adds	r3, #20
 8021106:	781b      	ldrb	r3, [r3, #0]
 8021108:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 802110a:	7afb      	ldrb	r3, [r7, #11]
 802110c:	2b00      	cmp	r3, #0
 802110e:	d00e      	beq.n	802112e <etharp_cleanup_netif+0x46>
 8021110:	490c      	ldr	r1, [pc, #48]	; (8021144 <etharp_cleanup_netif+0x5c>)
 8021112:	68fa      	ldr	r2, [r7, #12]
 8021114:	4613      	mov	r3, r2
 8021116:	005b      	lsls	r3, r3, #1
 8021118:	4413      	add	r3, r2
 802111a:	00db      	lsls	r3, r3, #3
 802111c:	440b      	add	r3, r1
 802111e:	3308      	adds	r3, #8
 8021120:	681b      	ldr	r3, [r3, #0]
 8021122:	687a      	ldr	r2, [r7, #4]
 8021124:	429a      	cmp	r2, r3
 8021126:	d102      	bne.n	802112e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8021128:	68f8      	ldr	r0, [r7, #12]
 802112a:	f7ff fcb7 	bl	8020a9c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802112e:	68fb      	ldr	r3, [r7, #12]
 8021130:	3301      	adds	r3, #1
 8021132:	60fb      	str	r3, [r7, #12]
 8021134:	68fb      	ldr	r3, [r7, #12]
 8021136:	2b09      	cmp	r3, #9
 8021138:	dddd      	ble.n	80210f6 <etharp_cleanup_netif+0xe>
    }
  }
}
 802113a:	bf00      	nop
 802113c:	bf00      	nop
 802113e:	3710      	adds	r7, #16
 8021140:	46bd      	mov	sp, r7
 8021142:	bd80      	pop	{r7, pc}
 8021144:	2007ee1c 	.word	0x2007ee1c

08021148 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8021148:	b5b0      	push	{r4, r5, r7, lr}
 802114a:	b08a      	sub	sp, #40	; 0x28
 802114c:	af04      	add	r7, sp, #16
 802114e:	6078      	str	r0, [r7, #4]
 8021150:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8021152:	683b      	ldr	r3, [r7, #0]
 8021154:	2b00      	cmp	r3, #0
 8021156:	d107      	bne.n	8021168 <etharp_input+0x20>
 8021158:	4b49      	ldr	r3, [pc, #292]	; (8021280 <etharp_input+0x138>)
 802115a:	f240 228a 	movw	r2, #650	; 0x28a
 802115e:	4949      	ldr	r1, [pc, #292]	; (8021284 <etharp_input+0x13c>)
 8021160:	4849      	ldr	r0, [pc, #292]	; (8021288 <etharp_input+0x140>)
 8021162:	f002 ff31 	bl	8023fc8 <iprintf>
 8021166:	e088      	b.n	802127a <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 8021168:	687b      	ldr	r3, [r7, #4]
 802116a:	685b      	ldr	r3, [r3, #4]
 802116c:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 802116e:	697b      	ldr	r3, [r7, #20]
 8021170:	881b      	ldrh	r3, [r3, #0]
 8021172:	b29b      	uxth	r3, r3
 8021174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021178:	d10c      	bne.n	8021194 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802117a:	697b      	ldr	r3, [r7, #20]
 802117c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 802117e:	2b06      	cmp	r3, #6
 8021180:	d108      	bne.n	8021194 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8021182:	697b      	ldr	r3, [r7, #20]
 8021184:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8021186:	2b04      	cmp	r3, #4
 8021188:	d104      	bne.n	8021194 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 802118a:	697b      	ldr	r3, [r7, #20]
 802118c:	885b      	ldrh	r3, [r3, #2]
 802118e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8021190:	2b08      	cmp	r3, #8
 8021192:	d00f      	beq.n	80211b4 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 8021194:	4b3d      	ldr	r3, [pc, #244]	; (802128c <etharp_input+0x144>)
 8021196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021198:	3301      	adds	r3, #1
 802119a:	b29a      	uxth	r2, r3
 802119c:	4b3b      	ldr	r3, [pc, #236]	; (802128c <etharp_input+0x144>)
 802119e:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 80211a0:	4b3a      	ldr	r3, [pc, #232]	; (802128c <etharp_input+0x144>)
 80211a2:	8bdb      	ldrh	r3, [r3, #30]
 80211a4:	3301      	adds	r3, #1
 80211a6:	b29a      	uxth	r2, r3
 80211a8:	4b38      	ldr	r3, [pc, #224]	; (802128c <etharp_input+0x144>)
 80211aa:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 80211ac:	6878      	ldr	r0, [r7, #4]
 80211ae:	f7f8 f837 	bl	8019220 <pbuf_free>
    return;
 80211b2:	e062      	b.n	802127a <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 80211b4:	4b35      	ldr	r3, [pc, #212]	; (802128c <etharp_input+0x144>)
 80211b6:	8b5b      	ldrh	r3, [r3, #26]
 80211b8:	3301      	adds	r3, #1
 80211ba:	b29a      	uxth	r2, r3
 80211bc:	4b33      	ldr	r3, [pc, #204]	; (802128c <etharp_input+0x144>)
 80211be:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80211c0:	697b      	ldr	r3, [r7, #20]
 80211c2:	330e      	adds	r3, #14
 80211c4:	681b      	ldr	r3, [r3, #0]
 80211c6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80211c8:	697b      	ldr	r3, [r7, #20]
 80211ca:	3318      	adds	r3, #24
 80211cc:	681b      	ldr	r3, [r3, #0]
 80211ce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80211d0:	683b      	ldr	r3, [r7, #0]
 80211d2:	3304      	adds	r3, #4
 80211d4:	681b      	ldr	r3, [r3, #0]
 80211d6:	2b00      	cmp	r3, #0
 80211d8:	d102      	bne.n	80211e0 <etharp_input+0x98>
    for_us = 0;
 80211da:	2300      	movs	r3, #0
 80211dc:	74fb      	strb	r3, [r7, #19]
 80211de:	e009      	b.n	80211f4 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80211e0:	68ba      	ldr	r2, [r7, #8]
 80211e2:	683b      	ldr	r3, [r7, #0]
 80211e4:	3304      	adds	r3, #4
 80211e6:	681b      	ldr	r3, [r3, #0]
 80211e8:	429a      	cmp	r2, r3
 80211ea:	bf0c      	ite	eq
 80211ec:	2301      	moveq	r3, #1
 80211ee:	2300      	movne	r3, #0
 80211f0:	b2db      	uxtb	r3, r3
 80211f2:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80211f4:	697b      	ldr	r3, [r7, #20]
 80211f6:	f103 0208 	add.w	r2, r3, #8
 80211fa:	7cfb      	ldrb	r3, [r7, #19]
 80211fc:	2b00      	cmp	r3, #0
 80211fe:	d001      	beq.n	8021204 <etharp_input+0xbc>
 8021200:	2301      	movs	r3, #1
 8021202:	e000      	b.n	8021206 <etharp_input+0xbe>
 8021204:	2302      	movs	r3, #2
 8021206:	f107 010c 	add.w	r1, r7, #12
 802120a:	6838      	ldr	r0, [r7, #0]
 802120c:	f7ff fec6 	bl	8020f9c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8021210:	697b      	ldr	r3, [r7, #20]
 8021212:	88db      	ldrh	r3, [r3, #6]
 8021214:	b29b      	uxth	r3, r3
 8021216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802121a:	d003      	beq.n	8021224 <etharp_input+0xdc>
 802121c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021220:	d025      	beq.n	802126e <etharp_input+0x126>
 8021222:	e01d      	b.n	8021260 <etharp_input+0x118>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 8021224:	7cfb      	ldrb	r3, [r7, #19]
 8021226:	2b00      	cmp	r3, #0
 8021228:	d023      	beq.n	8021272 <etharp_input+0x12a>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802122a:	683b      	ldr	r3, [r7, #0]
 802122c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8021230:	697b      	ldr	r3, [r7, #20]
 8021232:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8021236:	683b      	ldr	r3, [r7, #0]
 8021238:	f103 0526 	add.w	r5, r3, #38	; 0x26
 802123c:	683b      	ldr	r3, [r7, #0]
 802123e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8021240:	697a      	ldr	r2, [r7, #20]
 8021242:	3208      	adds	r2, #8
        etharp_raw(netif,
 8021244:	2102      	movs	r1, #2
 8021246:	9103      	str	r1, [sp, #12]
 8021248:	f107 010c 	add.w	r1, r7, #12
 802124c:	9102      	str	r1, [sp, #8]
 802124e:	9201      	str	r2, [sp, #4]
 8021250:	9300      	str	r3, [sp, #0]
 8021252:	462b      	mov	r3, r5
 8021254:	4622      	mov	r2, r4
 8021256:	4601      	mov	r1, r0
 8021258:	6838      	ldr	r0, [r7, #0]
 802125a:	f000 fb0b 	bl	8021874 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 802125e:	e008      	b.n	8021272 <etharp_input+0x12a>
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 8021260:	4b0a      	ldr	r3, [pc, #40]	; (802128c <etharp_input+0x144>)
 8021262:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8021264:	3301      	adds	r3, #1
 8021266:	b29a      	uxth	r2, r3
 8021268:	4b08      	ldr	r3, [pc, #32]	; (802128c <etharp_input+0x144>)
 802126a:	859a      	strh	r2, [r3, #44]	; 0x2c
      break;
 802126c:	e002      	b.n	8021274 <etharp_input+0x12c>
      break;
 802126e:	bf00      	nop
 8021270:	e000      	b.n	8021274 <etharp_input+0x12c>
      break;
 8021272:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8021274:	6878      	ldr	r0, [r7, #4]
 8021276:	f7f7 ffd3 	bl	8019220 <pbuf_free>
}
 802127a:	3718      	adds	r7, #24
 802127c:	46bd      	mov	sp, r7
 802127e:	bdb0      	pop	{r4, r5, r7, pc}
 8021280:	08028de4 	.word	0x08028de4
 8021284:	08028f34 	.word	0x08028f34
 8021288:	08028e5c 	.word	0x08028e5c
 802128c:	2007ecb8 	.word	0x2007ecb8

08021290 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8021290:	b580      	push	{r7, lr}
 8021292:	b086      	sub	sp, #24
 8021294:	af02      	add	r7, sp, #8
 8021296:	60f8      	str	r0, [r7, #12]
 8021298:	60b9      	str	r1, [r7, #8]
 802129a:	4613      	mov	r3, r2
 802129c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802129e:	79fa      	ldrb	r2, [r7, #7]
 80212a0:	4944      	ldr	r1, [pc, #272]	; (80213b4 <etharp_output_to_arp_index+0x124>)
 80212a2:	4613      	mov	r3, r2
 80212a4:	005b      	lsls	r3, r3, #1
 80212a6:	4413      	add	r3, r2
 80212a8:	00db      	lsls	r3, r3, #3
 80212aa:	440b      	add	r3, r1
 80212ac:	3314      	adds	r3, #20
 80212ae:	781b      	ldrb	r3, [r3, #0]
 80212b0:	2b01      	cmp	r3, #1
 80212b2:	d806      	bhi.n	80212c2 <etharp_output_to_arp_index+0x32>
 80212b4:	4b40      	ldr	r3, [pc, #256]	; (80213b8 <etharp_output_to_arp_index+0x128>)
 80212b6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80212ba:	4940      	ldr	r1, [pc, #256]	; (80213bc <etharp_output_to_arp_index+0x12c>)
 80212bc:	4840      	ldr	r0, [pc, #256]	; (80213c0 <etharp_output_to_arp_index+0x130>)
 80212be:	f002 fe83 	bl	8023fc8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80212c2:	79fa      	ldrb	r2, [r7, #7]
 80212c4:	493b      	ldr	r1, [pc, #236]	; (80213b4 <etharp_output_to_arp_index+0x124>)
 80212c6:	4613      	mov	r3, r2
 80212c8:	005b      	lsls	r3, r3, #1
 80212ca:	4413      	add	r3, r2
 80212cc:	00db      	lsls	r3, r3, #3
 80212ce:	440b      	add	r3, r1
 80212d0:	3314      	adds	r3, #20
 80212d2:	781b      	ldrb	r3, [r3, #0]
 80212d4:	2b02      	cmp	r3, #2
 80212d6:	d153      	bne.n	8021380 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80212d8:	79fa      	ldrb	r2, [r7, #7]
 80212da:	4936      	ldr	r1, [pc, #216]	; (80213b4 <etharp_output_to_arp_index+0x124>)
 80212dc:	4613      	mov	r3, r2
 80212de:	005b      	lsls	r3, r3, #1
 80212e0:	4413      	add	r3, r2
 80212e2:	00db      	lsls	r3, r3, #3
 80212e4:	440b      	add	r3, r1
 80212e6:	3312      	adds	r3, #18
 80212e8:	881b      	ldrh	r3, [r3, #0]
 80212ea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80212ee:	d919      	bls.n	8021324 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80212f0:	79fa      	ldrb	r2, [r7, #7]
 80212f2:	4613      	mov	r3, r2
 80212f4:	005b      	lsls	r3, r3, #1
 80212f6:	4413      	add	r3, r2
 80212f8:	00db      	lsls	r3, r3, #3
 80212fa:	4a2e      	ldr	r2, [pc, #184]	; (80213b4 <etharp_output_to_arp_index+0x124>)
 80212fc:	4413      	add	r3, r2
 80212fe:	3304      	adds	r3, #4
 8021300:	4619      	mov	r1, r3
 8021302:	68f8      	ldr	r0, [r7, #12]
 8021304:	f000 fb72 	bl	80219ec <etharp_request>
 8021308:	4603      	mov	r3, r0
 802130a:	2b00      	cmp	r3, #0
 802130c:	d138      	bne.n	8021380 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 802130e:	79fa      	ldrb	r2, [r7, #7]
 8021310:	4928      	ldr	r1, [pc, #160]	; (80213b4 <etharp_output_to_arp_index+0x124>)
 8021312:	4613      	mov	r3, r2
 8021314:	005b      	lsls	r3, r3, #1
 8021316:	4413      	add	r3, r2
 8021318:	00db      	lsls	r3, r3, #3
 802131a:	440b      	add	r3, r1
 802131c:	3314      	adds	r3, #20
 802131e:	2203      	movs	r2, #3
 8021320:	701a      	strb	r2, [r3, #0]
 8021322:	e02d      	b.n	8021380 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8021324:	79fa      	ldrb	r2, [r7, #7]
 8021326:	4923      	ldr	r1, [pc, #140]	; (80213b4 <etharp_output_to_arp_index+0x124>)
 8021328:	4613      	mov	r3, r2
 802132a:	005b      	lsls	r3, r3, #1
 802132c:	4413      	add	r3, r2
 802132e:	00db      	lsls	r3, r3, #3
 8021330:	440b      	add	r3, r1
 8021332:	3312      	adds	r3, #18
 8021334:	881b      	ldrh	r3, [r3, #0]
 8021336:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 802133a:	d321      	bcc.n	8021380 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 802133c:	79fa      	ldrb	r2, [r7, #7]
 802133e:	4613      	mov	r3, r2
 8021340:	005b      	lsls	r3, r3, #1
 8021342:	4413      	add	r3, r2
 8021344:	00db      	lsls	r3, r3, #3
 8021346:	4a1b      	ldr	r2, [pc, #108]	; (80213b4 <etharp_output_to_arp_index+0x124>)
 8021348:	4413      	add	r3, r2
 802134a:	1d19      	adds	r1, r3, #4
 802134c:	79fa      	ldrb	r2, [r7, #7]
 802134e:	4613      	mov	r3, r2
 8021350:	005b      	lsls	r3, r3, #1
 8021352:	4413      	add	r3, r2
 8021354:	00db      	lsls	r3, r3, #3
 8021356:	3308      	adds	r3, #8
 8021358:	4a16      	ldr	r2, [pc, #88]	; (80213b4 <etharp_output_to_arp_index+0x124>)
 802135a:	4413      	add	r3, r2
 802135c:	3304      	adds	r3, #4
 802135e:	461a      	mov	r2, r3
 8021360:	68f8      	ldr	r0, [r7, #12]
 8021362:	f000 fb21 	bl	80219a8 <etharp_request_dst>
 8021366:	4603      	mov	r3, r0
 8021368:	2b00      	cmp	r3, #0
 802136a:	d109      	bne.n	8021380 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 802136c:	79fa      	ldrb	r2, [r7, #7]
 802136e:	4911      	ldr	r1, [pc, #68]	; (80213b4 <etharp_output_to_arp_index+0x124>)
 8021370:	4613      	mov	r3, r2
 8021372:	005b      	lsls	r3, r3, #1
 8021374:	4413      	add	r3, r2
 8021376:	00db      	lsls	r3, r3, #3
 8021378:	440b      	add	r3, r1
 802137a:	3314      	adds	r3, #20
 802137c:	2203      	movs	r2, #3
 802137e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8021380:	68fb      	ldr	r3, [r7, #12]
 8021382:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8021386:	79fa      	ldrb	r2, [r7, #7]
 8021388:	4613      	mov	r3, r2
 802138a:	005b      	lsls	r3, r3, #1
 802138c:	4413      	add	r3, r2
 802138e:	00db      	lsls	r3, r3, #3
 8021390:	3308      	adds	r3, #8
 8021392:	4a08      	ldr	r2, [pc, #32]	; (80213b4 <etharp_output_to_arp_index+0x124>)
 8021394:	4413      	add	r3, r2
 8021396:	3304      	adds	r3, #4
 8021398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802139c:	9200      	str	r2, [sp, #0]
 802139e:	460a      	mov	r2, r1
 80213a0:	68b9      	ldr	r1, [r7, #8]
 80213a2:	68f8      	ldr	r0, [r7, #12]
 80213a4:	f002 f82c 	bl	8023400 <ethernet_output>
 80213a8:	4603      	mov	r3, r0
}
 80213aa:	4618      	mov	r0, r3
 80213ac:	3710      	adds	r7, #16
 80213ae:	46bd      	mov	sp, r7
 80213b0:	bd80      	pop	{r7, pc}
 80213b2:	bf00      	nop
 80213b4:	2007ee1c 	.word	0x2007ee1c
 80213b8:	08028de4 	.word	0x08028de4
 80213bc:	08028f54 	.word	0x08028f54
 80213c0:	08028e5c 	.word	0x08028e5c

080213c4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80213c4:	b580      	push	{r7, lr}
 80213c6:	b08a      	sub	sp, #40	; 0x28
 80213c8:	af02      	add	r7, sp, #8
 80213ca:	60f8      	str	r0, [r7, #12]
 80213cc:	60b9      	str	r1, [r7, #8]
 80213ce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80213d0:	687b      	ldr	r3, [r7, #4]
 80213d2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80213d4:	68fb      	ldr	r3, [r7, #12]
 80213d6:	2b00      	cmp	r3, #0
 80213d8:	d106      	bne.n	80213e8 <etharp_output+0x24>
 80213da:	4b76      	ldr	r3, [pc, #472]	; (80215b4 <etharp_output+0x1f0>)
 80213dc:	f240 321e 	movw	r2, #798	; 0x31e
 80213e0:	4975      	ldr	r1, [pc, #468]	; (80215b8 <etharp_output+0x1f4>)
 80213e2:	4876      	ldr	r0, [pc, #472]	; (80215bc <etharp_output+0x1f8>)
 80213e4:	f002 fdf0 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80213e8:	68bb      	ldr	r3, [r7, #8]
 80213ea:	2b00      	cmp	r3, #0
 80213ec:	d106      	bne.n	80213fc <etharp_output+0x38>
 80213ee:	4b71      	ldr	r3, [pc, #452]	; (80215b4 <etharp_output+0x1f0>)
 80213f0:	f240 321f 	movw	r2, #799	; 0x31f
 80213f4:	4972      	ldr	r1, [pc, #456]	; (80215c0 <etharp_output+0x1fc>)
 80213f6:	4871      	ldr	r0, [pc, #452]	; (80215bc <etharp_output+0x1f8>)
 80213f8:	f002 fde6 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80213fc:	687b      	ldr	r3, [r7, #4]
 80213fe:	2b00      	cmp	r3, #0
 8021400:	d106      	bne.n	8021410 <etharp_output+0x4c>
 8021402:	4b6c      	ldr	r3, [pc, #432]	; (80215b4 <etharp_output+0x1f0>)
 8021404:	f44f 7248 	mov.w	r2, #800	; 0x320
 8021408:	496e      	ldr	r1, [pc, #440]	; (80215c4 <etharp_output+0x200>)
 802140a:	486c      	ldr	r0, [pc, #432]	; (80215bc <etharp_output+0x1f8>)
 802140c:	f002 fddc 	bl	8023fc8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8021410:	687b      	ldr	r3, [r7, #4]
 8021412:	681b      	ldr	r3, [r3, #0]
 8021414:	68f9      	ldr	r1, [r7, #12]
 8021416:	4618      	mov	r0, r3
 8021418:	f001 f892 	bl	8022540 <ip4_addr_isbroadcast_u32>
 802141c:	4603      	mov	r3, r0
 802141e:	2b00      	cmp	r3, #0
 8021420:	d002      	beq.n	8021428 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8021422:	4b69      	ldr	r3, [pc, #420]	; (80215c8 <etharp_output+0x204>)
 8021424:	61fb      	str	r3, [r7, #28]
 8021426:	e0b5      	b.n	8021594 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8021428:	687b      	ldr	r3, [r7, #4]
 802142a:	681b      	ldr	r3, [r3, #0]
 802142c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021430:	2be0      	cmp	r3, #224	; 0xe0
 8021432:	d118      	bne.n	8021466 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8021434:	2301      	movs	r3, #1
 8021436:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8021438:	2300      	movs	r3, #0
 802143a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 802143c:	235e      	movs	r3, #94	; 0x5e
 802143e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8021440:	687b      	ldr	r3, [r7, #4]
 8021442:	3301      	adds	r3, #1
 8021444:	781b      	ldrb	r3, [r3, #0]
 8021446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802144a:	b2db      	uxtb	r3, r3
 802144c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 802144e:	687b      	ldr	r3, [r7, #4]
 8021450:	3302      	adds	r3, #2
 8021452:	781b      	ldrb	r3, [r3, #0]
 8021454:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8021456:	687b      	ldr	r3, [r7, #4]
 8021458:	3303      	adds	r3, #3
 802145a:	781b      	ldrb	r3, [r3, #0]
 802145c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 802145e:	f107 0310 	add.w	r3, r7, #16
 8021462:	61fb      	str	r3, [r7, #28]
 8021464:	e096      	b.n	8021594 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8021466:	687b      	ldr	r3, [r7, #4]
 8021468:	681a      	ldr	r2, [r3, #0]
 802146a:	68fb      	ldr	r3, [r7, #12]
 802146c:	3304      	adds	r3, #4
 802146e:	681b      	ldr	r3, [r3, #0]
 8021470:	405a      	eors	r2, r3
 8021472:	68fb      	ldr	r3, [r7, #12]
 8021474:	3308      	adds	r3, #8
 8021476:	681b      	ldr	r3, [r3, #0]
 8021478:	4013      	ands	r3, r2
 802147a:	2b00      	cmp	r3, #0
 802147c:	d012      	beq.n	80214a4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 802147e:	687b      	ldr	r3, [r7, #4]
 8021480:	681b      	ldr	r3, [r3, #0]
 8021482:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8021484:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8021488:	4293      	cmp	r3, r2
 802148a:	d00b      	beq.n	80214a4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 802148c:	68fb      	ldr	r3, [r7, #12]
 802148e:	330c      	adds	r3, #12
 8021490:	681b      	ldr	r3, [r3, #0]
 8021492:	2b00      	cmp	r3, #0
 8021494:	d003      	beq.n	802149e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8021496:	68fb      	ldr	r3, [r7, #12]
 8021498:	330c      	adds	r3, #12
 802149a:	61bb      	str	r3, [r7, #24]
 802149c:	e002      	b.n	80214a4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 802149e:	f06f 0303 	mvn.w	r3, #3
 80214a2:	e083      	b.n	80215ac <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80214a4:	4b49      	ldr	r3, [pc, #292]	; (80215cc <etharp_output+0x208>)
 80214a6:	781b      	ldrb	r3, [r3, #0]
 80214a8:	4619      	mov	r1, r3
 80214aa:	4a49      	ldr	r2, [pc, #292]	; (80215d0 <etharp_output+0x20c>)
 80214ac:	460b      	mov	r3, r1
 80214ae:	005b      	lsls	r3, r3, #1
 80214b0:	440b      	add	r3, r1
 80214b2:	00db      	lsls	r3, r3, #3
 80214b4:	4413      	add	r3, r2
 80214b6:	3314      	adds	r3, #20
 80214b8:	781b      	ldrb	r3, [r3, #0]
 80214ba:	2b01      	cmp	r3, #1
 80214bc:	d92b      	bls.n	8021516 <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80214be:	4b43      	ldr	r3, [pc, #268]	; (80215cc <etharp_output+0x208>)
 80214c0:	781b      	ldrb	r3, [r3, #0]
 80214c2:	4619      	mov	r1, r3
 80214c4:	4a42      	ldr	r2, [pc, #264]	; (80215d0 <etharp_output+0x20c>)
 80214c6:	460b      	mov	r3, r1
 80214c8:	005b      	lsls	r3, r3, #1
 80214ca:	440b      	add	r3, r1
 80214cc:	00db      	lsls	r3, r3, #3
 80214ce:	4413      	add	r3, r2
 80214d0:	3308      	adds	r3, #8
 80214d2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80214d4:	68fa      	ldr	r2, [r7, #12]
 80214d6:	429a      	cmp	r2, r3
 80214d8:	d11d      	bne.n	8021516 <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80214da:	69bb      	ldr	r3, [r7, #24]
 80214dc:	681a      	ldr	r2, [r3, #0]
 80214de:	4b3b      	ldr	r3, [pc, #236]	; (80215cc <etharp_output+0x208>)
 80214e0:	781b      	ldrb	r3, [r3, #0]
 80214e2:	4618      	mov	r0, r3
 80214e4:	493a      	ldr	r1, [pc, #232]	; (80215d0 <etharp_output+0x20c>)
 80214e6:	4603      	mov	r3, r0
 80214e8:	005b      	lsls	r3, r3, #1
 80214ea:	4403      	add	r3, r0
 80214ec:	00db      	lsls	r3, r3, #3
 80214ee:	440b      	add	r3, r1
 80214f0:	3304      	adds	r3, #4
 80214f2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80214f4:	429a      	cmp	r2, r3
 80214f6:	d10e      	bne.n	8021516 <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 80214f8:	4b36      	ldr	r3, [pc, #216]	; (80215d4 <etharp_output+0x210>)
 80214fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80214fc:	3301      	adds	r3, #1
 80214fe:	b29a      	uxth	r2, r3
 8021500:	4b34      	ldr	r3, [pc, #208]	; (80215d4 <etharp_output+0x210>)
 8021502:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8021504:	4b31      	ldr	r3, [pc, #196]	; (80215cc <etharp_output+0x208>)
 8021506:	781b      	ldrb	r3, [r3, #0]
 8021508:	461a      	mov	r2, r3
 802150a:	68b9      	ldr	r1, [r7, #8]
 802150c:	68f8      	ldr	r0, [r7, #12]
 802150e:	f7ff febf 	bl	8021290 <etharp_output_to_arp_index>
 8021512:	4603      	mov	r3, r0
 8021514:	e04a      	b.n	80215ac <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8021516:	2300      	movs	r3, #0
 8021518:	75fb      	strb	r3, [r7, #23]
 802151a:	e031      	b.n	8021580 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 802151c:	7dfa      	ldrb	r2, [r7, #23]
 802151e:	492c      	ldr	r1, [pc, #176]	; (80215d0 <etharp_output+0x20c>)
 8021520:	4613      	mov	r3, r2
 8021522:	005b      	lsls	r3, r3, #1
 8021524:	4413      	add	r3, r2
 8021526:	00db      	lsls	r3, r3, #3
 8021528:	440b      	add	r3, r1
 802152a:	3314      	adds	r3, #20
 802152c:	781b      	ldrb	r3, [r3, #0]
 802152e:	2b01      	cmp	r3, #1
 8021530:	d923      	bls.n	802157a <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8021532:	7dfa      	ldrb	r2, [r7, #23]
 8021534:	4926      	ldr	r1, [pc, #152]	; (80215d0 <etharp_output+0x20c>)
 8021536:	4613      	mov	r3, r2
 8021538:	005b      	lsls	r3, r3, #1
 802153a:	4413      	add	r3, r2
 802153c:	00db      	lsls	r3, r3, #3
 802153e:	440b      	add	r3, r1
 8021540:	3308      	adds	r3, #8
 8021542:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8021544:	68fa      	ldr	r2, [r7, #12]
 8021546:	429a      	cmp	r2, r3
 8021548:	d117      	bne.n	802157a <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 802154a:	69bb      	ldr	r3, [r7, #24]
 802154c:	6819      	ldr	r1, [r3, #0]
 802154e:	7dfa      	ldrb	r2, [r7, #23]
 8021550:	481f      	ldr	r0, [pc, #124]	; (80215d0 <etharp_output+0x20c>)
 8021552:	4613      	mov	r3, r2
 8021554:	005b      	lsls	r3, r3, #1
 8021556:	4413      	add	r3, r2
 8021558:	00db      	lsls	r3, r3, #3
 802155a:	4403      	add	r3, r0
 802155c:	3304      	adds	r3, #4
 802155e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8021560:	4299      	cmp	r1, r3
 8021562:	d10a      	bne.n	802157a <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8021564:	4a19      	ldr	r2, [pc, #100]	; (80215cc <etharp_output+0x208>)
 8021566:	7dfb      	ldrb	r3, [r7, #23]
 8021568:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 802156a:	7dfb      	ldrb	r3, [r7, #23]
 802156c:	461a      	mov	r2, r3
 802156e:	68b9      	ldr	r1, [r7, #8]
 8021570:	68f8      	ldr	r0, [r7, #12]
 8021572:	f7ff fe8d 	bl	8021290 <etharp_output_to_arp_index>
 8021576:	4603      	mov	r3, r0
 8021578:	e018      	b.n	80215ac <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 802157a:	7dfb      	ldrb	r3, [r7, #23]
 802157c:	3301      	adds	r3, #1
 802157e:	75fb      	strb	r3, [r7, #23]
 8021580:	7dfb      	ldrb	r3, [r7, #23]
 8021582:	2b09      	cmp	r3, #9
 8021584:	d9ca      	bls.n	802151c <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8021586:	68ba      	ldr	r2, [r7, #8]
 8021588:	69b9      	ldr	r1, [r7, #24]
 802158a:	68f8      	ldr	r0, [r7, #12]
 802158c:	f000 f824 	bl	80215d8 <etharp_query>
 8021590:	4603      	mov	r3, r0
 8021592:	e00b      	b.n	80215ac <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8021594:	68fb      	ldr	r3, [r7, #12]
 8021596:	f103 0226 	add.w	r2, r3, #38	; 0x26
 802159a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802159e:	9300      	str	r3, [sp, #0]
 80215a0:	69fb      	ldr	r3, [r7, #28]
 80215a2:	68b9      	ldr	r1, [r7, #8]
 80215a4:	68f8      	ldr	r0, [r7, #12]
 80215a6:	f001 ff2b 	bl	8023400 <ethernet_output>
 80215aa:	4603      	mov	r3, r0
}
 80215ac:	4618      	mov	r0, r3
 80215ae:	3720      	adds	r7, #32
 80215b0:	46bd      	mov	sp, r7
 80215b2:	bd80      	pop	{r7, pc}
 80215b4:	08028de4 	.word	0x08028de4
 80215b8:	08028f34 	.word	0x08028f34
 80215bc:	08028e5c 	.word	0x08028e5c
 80215c0:	08028f84 	.word	0x08028f84
 80215c4:	08028f24 	.word	0x08028f24
 80215c8:	08029b38 	.word	0x08029b38
 80215cc:	2007ef0c 	.word	0x2007ef0c
 80215d0:	2007ee1c 	.word	0x2007ee1c
 80215d4:	2007ecb8 	.word	0x2007ecb8

080215d8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80215d8:	b580      	push	{r7, lr}
 80215da:	b08c      	sub	sp, #48	; 0x30
 80215dc:	af02      	add	r7, sp, #8
 80215de:	60f8      	str	r0, [r7, #12]
 80215e0:	60b9      	str	r1, [r7, #8]
 80215e2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80215e4:	68fb      	ldr	r3, [r7, #12]
 80215e6:	3326      	adds	r3, #38	; 0x26
 80215e8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80215ea:	23ff      	movs	r3, #255	; 0xff
 80215ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80215f0:	2300      	movs	r3, #0
 80215f2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80215f4:	68bb      	ldr	r3, [r7, #8]
 80215f6:	681b      	ldr	r3, [r3, #0]
 80215f8:	68f9      	ldr	r1, [r7, #12]
 80215fa:	4618      	mov	r0, r3
 80215fc:	f000 ffa0 	bl	8022540 <ip4_addr_isbroadcast_u32>
 8021600:	4603      	mov	r3, r0
 8021602:	2b00      	cmp	r3, #0
 8021604:	d10c      	bne.n	8021620 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8021606:	68bb      	ldr	r3, [r7, #8]
 8021608:	681b      	ldr	r3, [r3, #0]
 802160a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802160e:	2be0      	cmp	r3, #224	; 0xe0
 8021610:	d006      	beq.n	8021620 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8021612:	68bb      	ldr	r3, [r7, #8]
 8021614:	2b00      	cmp	r3, #0
 8021616:	d003      	beq.n	8021620 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8021618:	68bb      	ldr	r3, [r7, #8]
 802161a:	681b      	ldr	r3, [r3, #0]
 802161c:	2b00      	cmp	r3, #0
 802161e:	d102      	bne.n	8021626 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8021620:	f06f 030f 	mvn.w	r3, #15
 8021624:	e110      	b.n	8021848 <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8021626:	68fa      	ldr	r2, [r7, #12]
 8021628:	2101      	movs	r1, #1
 802162a:	68b8      	ldr	r0, [r7, #8]
 802162c:	f7ff fb3e 	bl	8020cac <etharp_find_entry>
 8021630:	4603      	mov	r3, r0
 8021632:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8021634:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8021638:	2b00      	cmp	r3, #0
 802163a:	da0b      	bge.n	8021654 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 802163c:	687b      	ldr	r3, [r7, #4]
 802163e:	2b00      	cmp	r3, #0
 8021640:	d005      	beq.n	802164e <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 8021642:	4b83      	ldr	r3, [pc, #524]	; (8021850 <etharp_query+0x278>)
 8021644:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8021646:	3301      	adds	r3, #1
 8021648:	b29a      	uxth	r2, r3
 802164a:	4b81      	ldr	r3, [pc, #516]	; (8021850 <etharp_query+0x278>)
 802164c:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i_err;
 802164e:	8a7b      	ldrh	r3, [r7, #18]
 8021650:	b25b      	sxtb	r3, r3
 8021652:	e0f9      	b.n	8021848 <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8021654:	8a7b      	ldrh	r3, [r7, #18]
 8021656:	2b7e      	cmp	r3, #126	; 0x7e
 8021658:	d906      	bls.n	8021668 <etharp_query+0x90>
 802165a:	4b7e      	ldr	r3, [pc, #504]	; (8021854 <etharp_query+0x27c>)
 802165c:	f240 32c1 	movw	r2, #961	; 0x3c1
 8021660:	497d      	ldr	r1, [pc, #500]	; (8021858 <etharp_query+0x280>)
 8021662:	487e      	ldr	r0, [pc, #504]	; (802185c <etharp_query+0x284>)
 8021664:	f002 fcb0 	bl	8023fc8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8021668:	8a7b      	ldrh	r3, [r7, #18]
 802166a:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 802166c:	7c7a      	ldrb	r2, [r7, #17]
 802166e:	497c      	ldr	r1, [pc, #496]	; (8021860 <etharp_query+0x288>)
 8021670:	4613      	mov	r3, r2
 8021672:	005b      	lsls	r3, r3, #1
 8021674:	4413      	add	r3, r2
 8021676:	00db      	lsls	r3, r3, #3
 8021678:	440b      	add	r3, r1
 802167a:	3314      	adds	r3, #20
 802167c:	781b      	ldrb	r3, [r3, #0]
 802167e:	2b00      	cmp	r3, #0
 8021680:	d115      	bne.n	80216ae <etharp_query+0xd6>
    is_new_entry = 1;
 8021682:	2301      	movs	r3, #1
 8021684:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8021686:	7c7a      	ldrb	r2, [r7, #17]
 8021688:	4975      	ldr	r1, [pc, #468]	; (8021860 <etharp_query+0x288>)
 802168a:	4613      	mov	r3, r2
 802168c:	005b      	lsls	r3, r3, #1
 802168e:	4413      	add	r3, r2
 8021690:	00db      	lsls	r3, r3, #3
 8021692:	440b      	add	r3, r1
 8021694:	3314      	adds	r3, #20
 8021696:	2201      	movs	r2, #1
 8021698:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 802169a:	7c7a      	ldrb	r2, [r7, #17]
 802169c:	4970      	ldr	r1, [pc, #448]	; (8021860 <etharp_query+0x288>)
 802169e:	4613      	mov	r3, r2
 80216a0:	005b      	lsls	r3, r3, #1
 80216a2:	4413      	add	r3, r2
 80216a4:	00db      	lsls	r3, r3, #3
 80216a6:	440b      	add	r3, r1
 80216a8:	3308      	adds	r3, #8
 80216aa:	68fa      	ldr	r2, [r7, #12]
 80216ac:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80216ae:	7c7a      	ldrb	r2, [r7, #17]
 80216b0:	496b      	ldr	r1, [pc, #428]	; (8021860 <etharp_query+0x288>)
 80216b2:	4613      	mov	r3, r2
 80216b4:	005b      	lsls	r3, r3, #1
 80216b6:	4413      	add	r3, r2
 80216b8:	00db      	lsls	r3, r3, #3
 80216ba:	440b      	add	r3, r1
 80216bc:	3314      	adds	r3, #20
 80216be:	781b      	ldrb	r3, [r3, #0]
 80216c0:	2b01      	cmp	r3, #1
 80216c2:	d011      	beq.n	80216e8 <etharp_query+0x110>
 80216c4:	7c7a      	ldrb	r2, [r7, #17]
 80216c6:	4966      	ldr	r1, [pc, #408]	; (8021860 <etharp_query+0x288>)
 80216c8:	4613      	mov	r3, r2
 80216ca:	005b      	lsls	r3, r3, #1
 80216cc:	4413      	add	r3, r2
 80216ce:	00db      	lsls	r3, r3, #3
 80216d0:	440b      	add	r3, r1
 80216d2:	3314      	adds	r3, #20
 80216d4:	781b      	ldrb	r3, [r3, #0]
 80216d6:	2b01      	cmp	r3, #1
 80216d8:	d806      	bhi.n	80216e8 <etharp_query+0x110>
 80216da:	4b5e      	ldr	r3, [pc, #376]	; (8021854 <etharp_query+0x27c>)
 80216dc:	f240 32cd 	movw	r2, #973	; 0x3cd
 80216e0:	4960      	ldr	r1, [pc, #384]	; (8021864 <etharp_query+0x28c>)
 80216e2:	485e      	ldr	r0, [pc, #376]	; (802185c <etharp_query+0x284>)
 80216e4:	f002 fc70 	bl	8023fc8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80216e8:	6a3b      	ldr	r3, [r7, #32]
 80216ea:	2b00      	cmp	r3, #0
 80216ec:	d102      	bne.n	80216f4 <etharp_query+0x11c>
 80216ee:	687b      	ldr	r3, [r7, #4]
 80216f0:	2b00      	cmp	r3, #0
 80216f2:	d10c      	bne.n	802170e <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80216f4:	68b9      	ldr	r1, [r7, #8]
 80216f6:	68f8      	ldr	r0, [r7, #12]
 80216f8:	f000 f978 	bl	80219ec <etharp_request>
 80216fc:	4603      	mov	r3, r0
 80216fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8021702:	687b      	ldr	r3, [r7, #4]
 8021704:	2b00      	cmp	r3, #0
 8021706:	d102      	bne.n	802170e <etharp_query+0x136>
      return result;
 8021708:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802170c:	e09c      	b.n	8021848 <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 802170e:	687b      	ldr	r3, [r7, #4]
 8021710:	2b00      	cmp	r3, #0
 8021712:	d106      	bne.n	8021722 <etharp_query+0x14a>
 8021714:	4b4f      	ldr	r3, [pc, #316]	; (8021854 <etharp_query+0x27c>)
 8021716:	f240 32e1 	movw	r2, #993	; 0x3e1
 802171a:	4953      	ldr	r1, [pc, #332]	; (8021868 <etharp_query+0x290>)
 802171c:	484f      	ldr	r0, [pc, #316]	; (802185c <etharp_query+0x284>)
 802171e:	f002 fc53 	bl	8023fc8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8021722:	7c7a      	ldrb	r2, [r7, #17]
 8021724:	494e      	ldr	r1, [pc, #312]	; (8021860 <etharp_query+0x288>)
 8021726:	4613      	mov	r3, r2
 8021728:	005b      	lsls	r3, r3, #1
 802172a:	4413      	add	r3, r2
 802172c:	00db      	lsls	r3, r3, #3
 802172e:	440b      	add	r3, r1
 8021730:	3314      	adds	r3, #20
 8021732:	781b      	ldrb	r3, [r3, #0]
 8021734:	2b01      	cmp	r3, #1
 8021736:	d917      	bls.n	8021768 <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8021738:	4a4c      	ldr	r2, [pc, #304]	; (802186c <etharp_query+0x294>)
 802173a:	7c7b      	ldrb	r3, [r7, #17]
 802173c:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 802173e:	7c7a      	ldrb	r2, [r7, #17]
 8021740:	4613      	mov	r3, r2
 8021742:	005b      	lsls	r3, r3, #1
 8021744:	4413      	add	r3, r2
 8021746:	00db      	lsls	r3, r3, #3
 8021748:	3308      	adds	r3, #8
 802174a:	4a45      	ldr	r2, [pc, #276]	; (8021860 <etharp_query+0x288>)
 802174c:	4413      	add	r3, r2
 802174e:	3304      	adds	r3, #4
 8021750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8021754:	9200      	str	r2, [sp, #0]
 8021756:	697a      	ldr	r2, [r7, #20]
 8021758:	6879      	ldr	r1, [r7, #4]
 802175a:	68f8      	ldr	r0, [r7, #12]
 802175c:	f001 fe50 	bl	8023400 <ethernet_output>
 8021760:	4603      	mov	r3, r0
 8021762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021766:	e06d      	b.n	8021844 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8021768:	7c7a      	ldrb	r2, [r7, #17]
 802176a:	493d      	ldr	r1, [pc, #244]	; (8021860 <etharp_query+0x288>)
 802176c:	4613      	mov	r3, r2
 802176e:	005b      	lsls	r3, r3, #1
 8021770:	4413      	add	r3, r2
 8021772:	00db      	lsls	r3, r3, #3
 8021774:	440b      	add	r3, r1
 8021776:	3314      	adds	r3, #20
 8021778:	781b      	ldrb	r3, [r3, #0]
 802177a:	2b01      	cmp	r3, #1
 802177c:	d162      	bne.n	8021844 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 802177e:	2300      	movs	r3, #0
 8021780:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8021782:	687b      	ldr	r3, [r7, #4]
 8021784:	61fb      	str	r3, [r7, #28]
    while (p) {
 8021786:	e01c      	b.n	80217c2 <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8021788:	69fb      	ldr	r3, [r7, #28]
 802178a:	895a      	ldrh	r2, [r3, #10]
 802178c:	69fb      	ldr	r3, [r7, #28]
 802178e:	891b      	ldrh	r3, [r3, #8]
 8021790:	429a      	cmp	r2, r3
 8021792:	d10a      	bne.n	80217aa <etharp_query+0x1d2>
 8021794:	69fb      	ldr	r3, [r7, #28]
 8021796:	681b      	ldr	r3, [r3, #0]
 8021798:	2b00      	cmp	r3, #0
 802179a:	d006      	beq.n	80217aa <etharp_query+0x1d2>
 802179c:	4b2d      	ldr	r3, [pc, #180]	; (8021854 <etharp_query+0x27c>)
 802179e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80217a2:	4933      	ldr	r1, [pc, #204]	; (8021870 <etharp_query+0x298>)
 80217a4:	482d      	ldr	r0, [pc, #180]	; (802185c <etharp_query+0x284>)
 80217a6:	f002 fc0f 	bl	8023fc8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80217aa:	69fb      	ldr	r3, [r7, #28]
 80217ac:	7b1b      	ldrb	r3, [r3, #12]
 80217ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80217b2:	2b00      	cmp	r3, #0
 80217b4:	d002      	beq.n	80217bc <etharp_query+0x1e4>
        copy_needed = 1;
 80217b6:	2301      	movs	r3, #1
 80217b8:	61bb      	str	r3, [r7, #24]
        break;
 80217ba:	e005      	b.n	80217c8 <etharp_query+0x1f0>
      }
      p = p->next;
 80217bc:	69fb      	ldr	r3, [r7, #28]
 80217be:	681b      	ldr	r3, [r3, #0]
 80217c0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80217c2:	69fb      	ldr	r3, [r7, #28]
 80217c4:	2b00      	cmp	r3, #0
 80217c6:	d1df      	bne.n	8021788 <etharp_query+0x1b0>
    }
    if (copy_needed) {
 80217c8:	69bb      	ldr	r3, [r7, #24]
 80217ca:	2b00      	cmp	r3, #0
 80217cc:	d007      	beq.n	80217de <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80217ce:	687a      	ldr	r2, [r7, #4]
 80217d0:	f44f 7120 	mov.w	r1, #640	; 0x280
 80217d4:	200e      	movs	r0, #14
 80217d6:	f7f7 ff8b 	bl	80196f0 <pbuf_clone>
 80217da:	61f8      	str	r0, [r7, #28]
 80217dc:	e004      	b.n	80217e8 <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80217de:	687b      	ldr	r3, [r7, #4]
 80217e0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80217e2:	69f8      	ldr	r0, [r7, #28]
 80217e4:	f7f7 fdc2 	bl	801936c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80217e8:	69fb      	ldr	r3, [r7, #28]
 80217ea:	2b00      	cmp	r3, #0
 80217ec:	d021      	beq.n	8021832 <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80217ee:	7c7a      	ldrb	r2, [r7, #17]
 80217f0:	491b      	ldr	r1, [pc, #108]	; (8021860 <etharp_query+0x288>)
 80217f2:	4613      	mov	r3, r2
 80217f4:	005b      	lsls	r3, r3, #1
 80217f6:	4413      	add	r3, r2
 80217f8:	00db      	lsls	r3, r3, #3
 80217fa:	440b      	add	r3, r1
 80217fc:	681b      	ldr	r3, [r3, #0]
 80217fe:	2b00      	cmp	r3, #0
 8021800:	d00a      	beq.n	8021818 <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8021802:	7c7a      	ldrb	r2, [r7, #17]
 8021804:	4916      	ldr	r1, [pc, #88]	; (8021860 <etharp_query+0x288>)
 8021806:	4613      	mov	r3, r2
 8021808:	005b      	lsls	r3, r3, #1
 802180a:	4413      	add	r3, r2
 802180c:	00db      	lsls	r3, r3, #3
 802180e:	440b      	add	r3, r1
 8021810:	681b      	ldr	r3, [r3, #0]
 8021812:	4618      	mov	r0, r3
 8021814:	f7f7 fd04 	bl	8019220 <pbuf_free>
      }
      arp_table[i].q = p;
 8021818:	7c7a      	ldrb	r2, [r7, #17]
 802181a:	4911      	ldr	r1, [pc, #68]	; (8021860 <etharp_query+0x288>)
 802181c:	4613      	mov	r3, r2
 802181e:	005b      	lsls	r3, r3, #1
 8021820:	4413      	add	r3, r2
 8021822:	00db      	lsls	r3, r3, #3
 8021824:	440b      	add	r3, r1
 8021826:	69fa      	ldr	r2, [r7, #28]
 8021828:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 802182a:	2300      	movs	r3, #0
 802182c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021830:	e008      	b.n	8021844 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 8021832:	4b07      	ldr	r3, [pc, #28]	; (8021850 <etharp_query+0x278>)
 8021834:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8021836:	3301      	adds	r3, #1
 8021838:	b29a      	uxth	r2, r3
 802183a:	4b05      	ldr	r3, [pc, #20]	; (8021850 <etharp_query+0x278>)
 802183c:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 802183e:	23ff      	movs	r3, #255	; 0xff
 8021840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8021844:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8021848:	4618      	mov	r0, r3
 802184a:	3728      	adds	r7, #40	; 0x28
 802184c:	46bd      	mov	sp, r7
 802184e:	bd80      	pop	{r7, pc}
 8021850:	2007ecb8 	.word	0x2007ecb8
 8021854:	08028de4 	.word	0x08028de4
 8021858:	08028f90 	.word	0x08028f90
 802185c:	08028e5c 	.word	0x08028e5c
 8021860:	2007ee1c 	.word	0x2007ee1c
 8021864:	08028fa0 	.word	0x08028fa0
 8021868:	08028f84 	.word	0x08028f84
 802186c:	2007ef0c 	.word	0x2007ef0c
 8021870:	08028fc8 	.word	0x08028fc8

08021874 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8021874:	b580      	push	{r7, lr}
 8021876:	b08a      	sub	sp, #40	; 0x28
 8021878:	af02      	add	r7, sp, #8
 802187a:	60f8      	str	r0, [r7, #12]
 802187c:	60b9      	str	r1, [r7, #8]
 802187e:	607a      	str	r2, [r7, #4]
 8021880:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8021882:	2300      	movs	r3, #0
 8021884:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021886:	68fb      	ldr	r3, [r7, #12]
 8021888:	2b00      	cmp	r3, #0
 802188a:	d106      	bne.n	802189a <etharp_raw+0x26>
 802188c:	4b40      	ldr	r3, [pc, #256]	; (8021990 <etharp_raw+0x11c>)
 802188e:	f240 4257 	movw	r2, #1111	; 0x457
 8021892:	4940      	ldr	r1, [pc, #256]	; (8021994 <etharp_raw+0x120>)
 8021894:	4840      	ldr	r0, [pc, #256]	; (8021998 <etharp_raw+0x124>)
 8021896:	f002 fb97 	bl	8023fc8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 802189a:	f44f 7220 	mov.w	r2, #640	; 0x280
 802189e:	211c      	movs	r1, #28
 80218a0:	200e      	movs	r0, #14
 80218a2:	f7f7 f9d9 	bl	8018c58 <pbuf_alloc>
 80218a6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80218a8:	69bb      	ldr	r3, [r7, #24]
 80218aa:	2b00      	cmp	r3, #0
 80218ac:	d108      	bne.n	80218c0 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 80218ae:	4b3b      	ldr	r3, [pc, #236]	; (802199c <etharp_raw+0x128>)
 80218b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80218b2:	3301      	adds	r3, #1
 80218b4:	b29a      	uxth	r2, r3
 80218b6:	4b39      	ldr	r3, [pc, #228]	; (802199c <etharp_raw+0x128>)
 80218b8:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 80218ba:	f04f 33ff 	mov.w	r3, #4294967295
 80218be:	e063      	b.n	8021988 <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80218c0:	69bb      	ldr	r3, [r7, #24]
 80218c2:	895b      	ldrh	r3, [r3, #10]
 80218c4:	2b1b      	cmp	r3, #27
 80218c6:	d806      	bhi.n	80218d6 <etharp_raw+0x62>
 80218c8:	4b31      	ldr	r3, [pc, #196]	; (8021990 <etharp_raw+0x11c>)
 80218ca:	f240 4262 	movw	r2, #1122	; 0x462
 80218ce:	4934      	ldr	r1, [pc, #208]	; (80219a0 <etharp_raw+0x12c>)
 80218d0:	4831      	ldr	r0, [pc, #196]	; (8021998 <etharp_raw+0x124>)
 80218d2:	f002 fb79 	bl	8023fc8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80218d6:	69bb      	ldr	r3, [r7, #24]
 80218d8:	685b      	ldr	r3, [r3, #4]
 80218da:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80218dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80218de:	4618      	mov	r0, r3
 80218e0:	f7f5 fe00 	bl	80174e4 <lwip_htons>
 80218e4:	4603      	mov	r3, r0
 80218e6:	461a      	mov	r2, r3
 80218e8:	697b      	ldr	r3, [r7, #20]
 80218ea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80218ec:	68fb      	ldr	r3, [r7, #12]
 80218ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80218f2:	2b06      	cmp	r3, #6
 80218f4:	d006      	beq.n	8021904 <etharp_raw+0x90>
 80218f6:	4b26      	ldr	r3, [pc, #152]	; (8021990 <etharp_raw+0x11c>)
 80218f8:	f240 4269 	movw	r2, #1129	; 0x469
 80218fc:	4929      	ldr	r1, [pc, #164]	; (80219a4 <etharp_raw+0x130>)
 80218fe:	4826      	ldr	r0, [pc, #152]	; (8021998 <etharp_raw+0x124>)
 8021900:	f002 fb62 	bl	8023fc8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8021904:	697b      	ldr	r3, [r7, #20]
 8021906:	3308      	adds	r3, #8
 8021908:	2206      	movs	r2, #6
 802190a:	6839      	ldr	r1, [r7, #0]
 802190c:	4618      	mov	r0, r3
 802190e:	f002 fdc6 	bl	802449e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8021912:	697b      	ldr	r3, [r7, #20]
 8021914:	3312      	adds	r3, #18
 8021916:	2206      	movs	r2, #6
 8021918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802191a:	4618      	mov	r0, r3
 802191c:	f002 fdbf 	bl	802449e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8021920:	697b      	ldr	r3, [r7, #20]
 8021922:	330e      	adds	r3, #14
 8021924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021926:	6812      	ldr	r2, [r2, #0]
 8021928:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 802192a:	697b      	ldr	r3, [r7, #20]
 802192c:	3318      	adds	r3, #24
 802192e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021930:	6812      	ldr	r2, [r2, #0]
 8021932:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021934:	697b      	ldr	r3, [r7, #20]
 8021936:	2200      	movs	r2, #0
 8021938:	701a      	strb	r2, [r3, #0]
 802193a:	2200      	movs	r2, #0
 802193c:	f042 0201 	orr.w	r2, r2, #1
 8021940:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8021942:	697b      	ldr	r3, [r7, #20]
 8021944:	2200      	movs	r2, #0
 8021946:	f042 0208 	orr.w	r2, r2, #8
 802194a:	709a      	strb	r2, [r3, #2]
 802194c:	2200      	movs	r2, #0
 802194e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8021950:	697b      	ldr	r3, [r7, #20]
 8021952:	2206      	movs	r2, #6
 8021954:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8021956:	697b      	ldr	r3, [r7, #20]
 8021958:	2204      	movs	r2, #4
 802195a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 802195c:	f640 0306 	movw	r3, #2054	; 0x806
 8021960:	9300      	str	r3, [sp, #0]
 8021962:	687b      	ldr	r3, [r7, #4]
 8021964:	68ba      	ldr	r2, [r7, #8]
 8021966:	69b9      	ldr	r1, [r7, #24]
 8021968:	68f8      	ldr	r0, [r7, #12]
 802196a:	f001 fd49 	bl	8023400 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 802196e:	4b0b      	ldr	r3, [pc, #44]	; (802199c <etharp_raw+0x128>)
 8021970:	8b1b      	ldrh	r3, [r3, #24]
 8021972:	3301      	adds	r3, #1
 8021974:	b29a      	uxth	r2, r3
 8021976:	4b09      	ldr	r3, [pc, #36]	; (802199c <etharp_raw+0x128>)
 8021978:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 802197a:	69b8      	ldr	r0, [r7, #24]
 802197c:	f7f7 fc50 	bl	8019220 <pbuf_free>
  p = NULL;
 8021980:	2300      	movs	r3, #0
 8021982:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8021984:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8021988:	4618      	mov	r0, r3
 802198a:	3720      	adds	r7, #32
 802198c:	46bd      	mov	sp, r7
 802198e:	bd80      	pop	{r7, pc}
 8021990:	08028de4 	.word	0x08028de4
 8021994:	08028f34 	.word	0x08028f34
 8021998:	08028e5c 	.word	0x08028e5c
 802199c:	2007ecb8 	.word	0x2007ecb8
 80219a0:	08028fe4 	.word	0x08028fe4
 80219a4:	08029018 	.word	0x08029018

080219a8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80219a8:	b580      	push	{r7, lr}
 80219aa:	b088      	sub	sp, #32
 80219ac:	af04      	add	r7, sp, #16
 80219ae:	60f8      	str	r0, [r7, #12]
 80219b0:	60b9      	str	r1, [r7, #8]
 80219b2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80219b4:	68fb      	ldr	r3, [r7, #12]
 80219b6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80219ba:	68fb      	ldr	r3, [r7, #12]
 80219bc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80219c0:	68fb      	ldr	r3, [r7, #12]
 80219c2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80219c4:	2201      	movs	r2, #1
 80219c6:	9203      	str	r2, [sp, #12]
 80219c8:	68ba      	ldr	r2, [r7, #8]
 80219ca:	9202      	str	r2, [sp, #8]
 80219cc:	4a06      	ldr	r2, [pc, #24]	; (80219e8 <etharp_request_dst+0x40>)
 80219ce:	9201      	str	r2, [sp, #4]
 80219d0:	9300      	str	r3, [sp, #0]
 80219d2:	4603      	mov	r3, r0
 80219d4:	687a      	ldr	r2, [r7, #4]
 80219d6:	68f8      	ldr	r0, [r7, #12]
 80219d8:	f7ff ff4c 	bl	8021874 <etharp_raw>
 80219dc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80219de:	4618      	mov	r0, r3
 80219e0:	3710      	adds	r7, #16
 80219e2:	46bd      	mov	sp, r7
 80219e4:	bd80      	pop	{r7, pc}
 80219e6:	bf00      	nop
 80219e8:	08029b40 	.word	0x08029b40

080219ec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80219ec:	b580      	push	{r7, lr}
 80219ee:	b082      	sub	sp, #8
 80219f0:	af00      	add	r7, sp, #0
 80219f2:	6078      	str	r0, [r7, #4]
 80219f4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80219f6:	4a05      	ldr	r2, [pc, #20]	; (8021a0c <etharp_request+0x20>)
 80219f8:	6839      	ldr	r1, [r7, #0]
 80219fa:	6878      	ldr	r0, [r7, #4]
 80219fc:	f7ff ffd4 	bl	80219a8 <etharp_request_dst>
 8021a00:	4603      	mov	r3, r0
}
 8021a02:	4618      	mov	r0, r3
 8021a04:	3708      	adds	r7, #8
 8021a06:	46bd      	mov	sp, r7
 8021a08:	bd80      	pop	{r7, pc}
 8021a0a:	bf00      	nop
 8021a0c:	08029b38 	.word	0x08029b38

08021a10 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8021a10:	b580      	push	{r7, lr}
 8021a12:	b08e      	sub	sp, #56	; 0x38
 8021a14:	af04      	add	r7, sp, #16
 8021a16:	6078      	str	r0, [r7, #4]
 8021a18:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 8021a1a:	4ba2      	ldr	r3, [pc, #648]	; (8021ca4 <icmp_input+0x294>)
 8021a1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8021a20:	3301      	adds	r3, #1
 8021a22:	b29a      	uxth	r2, r3
 8021a24:	4b9f      	ldr	r3, [pc, #636]	; (8021ca4 <icmp_input+0x294>)
 8021a26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8021a2a:	4b9f      	ldr	r3, [pc, #636]	; (8021ca8 <icmp_input+0x298>)
 8021a2c:	689b      	ldr	r3, [r3, #8]
 8021a2e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8021a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a32:	781b      	ldrb	r3, [r3, #0]
 8021a34:	f003 030f 	and.w	r3, r3, #15
 8021a38:	b2db      	uxtb	r3, r3
 8021a3a:	009b      	lsls	r3, r3, #2
 8021a3c:	b2db      	uxtb	r3, r3
 8021a3e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8021a40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021a42:	2b13      	cmp	r3, #19
 8021a44:	d805      	bhi.n	8021a52 <icmp_input+0x42>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 8021a46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021a48:	4619      	mov	r1, r3
 8021a4a:	4898      	ldr	r0, [pc, #608]	; (8021cac <icmp_input+0x29c>)
 8021a4c:	f002 fabc 	bl	8023fc8 <iprintf>
    goto lenerr;
 8021a50:	e170      	b.n	8021d34 <icmp_input+0x324>
  }
  if (p->len < sizeof(u16_t) * 2) {
 8021a52:	687b      	ldr	r3, [r7, #4]
 8021a54:	895b      	ldrh	r3, [r3, #10]
 8021a56:	2b03      	cmp	r3, #3
 8021a58:	d806      	bhi.n	8021a68 <icmp_input+0x58>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 8021a5a:	687b      	ldr	r3, [r7, #4]
 8021a5c:	891b      	ldrh	r3, [r3, #8]
 8021a5e:	4619      	mov	r1, r3
 8021a60:	4893      	ldr	r0, [pc, #588]	; (8021cb0 <icmp_input+0x2a0>)
 8021a62:	f002 fab1 	bl	8023fc8 <iprintf>
    goto lenerr;
 8021a66:	e165      	b.n	8021d34 <icmp_input+0x324>
  }

  type = *((u8_t *)p->payload);
 8021a68:	687b      	ldr	r3, [r7, #4]
 8021a6a:	685b      	ldr	r3, [r3, #4]
 8021a6c:	781b      	ldrb	r3, [r3, #0]
 8021a6e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8021a72:	687b      	ldr	r3, [r7, #4]
 8021a74:	685b      	ldr	r3, [r3, #4]
 8021a76:	785b      	ldrb	r3, [r3, #1]
 8021a78:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8021a7c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8021a80:	2b00      	cmp	r3, #0
 8021a82:	f000 8150 	beq.w	8021d26 <icmp_input+0x316>
 8021a86:	2b08      	cmp	r3, #8
 8021a88:	f040 8134 	bne.w	8021cf4 <icmp_input+0x2e4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8021a8c:	4b89      	ldr	r3, [pc, #548]	; (8021cb4 <icmp_input+0x2a4>)
 8021a8e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021a90:	4b85      	ldr	r3, [pc, #532]	; (8021ca8 <icmp_input+0x298>)
 8021a92:	695b      	ldr	r3, [r3, #20]
 8021a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021a98:	2be0      	cmp	r3, #224	; 0xe0
 8021a9a:	d103      	bne.n	8021aa4 <icmp_input+0x94>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 8021a9c:	4886      	ldr	r0, [pc, #536]	; (8021cb8 <icmp_input+0x2a8>)
 8021a9e:	f002 fb01 	bl	80240a4 <puts>
        goto icmperr;
 8021aa2:	e153      	b.n	8021d4c <icmp_input+0x33c>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8021aa4:	4b80      	ldr	r3, [pc, #512]	; (8021ca8 <icmp_input+0x298>)
 8021aa6:	695b      	ldr	r3, [r3, #20]
 8021aa8:	4a7f      	ldr	r2, [pc, #508]	; (8021ca8 <icmp_input+0x298>)
 8021aaa:	6812      	ldr	r2, [r2, #0]
 8021aac:	4611      	mov	r1, r2
 8021aae:	4618      	mov	r0, r3
 8021ab0:	f000 fd46 	bl	8022540 <ip4_addr_isbroadcast_u32>
 8021ab4:	4603      	mov	r3, r0
 8021ab6:	2b00      	cmp	r3, #0
 8021ab8:	d003      	beq.n	8021ac2 <icmp_input+0xb2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 8021aba:	4880      	ldr	r0, [pc, #512]	; (8021cbc <icmp_input+0x2ac>)
 8021abc:	f002 faf2 	bl	80240a4 <puts>
        goto icmperr;
 8021ac0:	e144      	b.n	8021d4c <icmp_input+0x33c>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 8021ac2:	487f      	ldr	r0, [pc, #508]	; (8021cc0 <icmp_input+0x2b0>)
 8021ac4:	f002 faee 	bl	80240a4 <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8021ac8:	687b      	ldr	r3, [r7, #4]
 8021aca:	891b      	ldrh	r3, [r3, #8]
 8021acc:	2b07      	cmp	r3, #7
 8021ace:	d803      	bhi.n	8021ad8 <icmp_input+0xc8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 8021ad0:	487c      	ldr	r0, [pc, #496]	; (8021cc4 <icmp_input+0x2b4>)
 8021ad2:	f002 fae7 	bl	80240a4 <puts>
        goto lenerr;
 8021ad6:	e12d      	b.n	8021d34 <icmp_input+0x324>
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8021ad8:	6878      	ldr	r0, [r7, #4]
 8021ada:	f7f5 fda0 	bl	801761e <inet_chksum_pbuf>
 8021ade:	4603      	mov	r3, r0
 8021ae0:	2b00      	cmp	r3, #0
 8021ae2:	d00e      	beq.n	8021b02 <icmp_input+0xf2>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
 8021ae4:	4878      	ldr	r0, [pc, #480]	; (8021cc8 <icmp_input+0x2b8>)
 8021ae6:	f002 fadd 	bl	80240a4 <puts>
          pbuf_free(p);
 8021aea:	6878      	ldr	r0, [r7, #4]
 8021aec:	f7f7 fb98 	bl	8019220 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 8021af0:	4b6c      	ldr	r3, [pc, #432]	; (8021ca4 <icmp_input+0x294>)
 8021af2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8021af6:	3301      	adds	r3, #1
 8021af8:	b29a      	uxth	r2, r3
 8021afa:	4b6a      	ldr	r3, [pc, #424]	; (8021ca4 <icmp_input+0x294>)
 8021afc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8021b00:	e130      	b.n	8021d64 <icmp_input+0x354>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8021b02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021b04:	330e      	adds	r3, #14
 8021b06:	4619      	mov	r1, r3
 8021b08:	6878      	ldr	r0, [r7, #4]
 8021b0a:	f7f7 faf3 	bl	80190f4 <pbuf_add_header>
 8021b0e:	4603      	mov	r3, r0
 8021b10:	2b00      	cmp	r3, #0
 8021b12:	d057      	beq.n	8021bc4 <icmp_input+0x1b4>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	891a      	ldrh	r2, [r3, #8]
 8021b18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021b1a:	4413      	add	r3, r2
 8021b1c:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8021b1e:	687b      	ldr	r3, [r7, #4]
 8021b20:	891b      	ldrh	r3, [r3, #8]
 8021b22:	8b7a      	ldrh	r2, [r7, #26]
 8021b24:	429a      	cmp	r2, r3
 8021b26:	d203      	bcs.n	8021b30 <icmp_input+0x120>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 8021b28:	4868      	ldr	r0, [pc, #416]	; (8021ccc <icmp_input+0x2bc>)
 8021b2a:	f002 fabb 	bl	80240a4 <puts>
          goto icmperr;
 8021b2e:	e10d      	b.n	8021d4c <icmp_input+0x33c>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8021b30:	8b7b      	ldrh	r3, [r7, #26]
 8021b32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021b36:	4619      	mov	r1, r3
 8021b38:	200e      	movs	r0, #14
 8021b3a:	f7f7 f88d 	bl	8018c58 <pbuf_alloc>
 8021b3e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8021b40:	697b      	ldr	r3, [r7, #20]
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	d103      	bne.n	8021b4e <icmp_input+0x13e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 8021b46:	4862      	ldr	r0, [pc, #392]	; (8021cd0 <icmp_input+0x2c0>)
 8021b48:	f002 faac 	bl	80240a4 <puts>
          goto icmperr;
 8021b4c:	e0fe      	b.n	8021d4c <icmp_input+0x33c>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8021b4e:	697b      	ldr	r3, [r7, #20]
 8021b50:	895b      	ldrh	r3, [r3, #10]
 8021b52:	461a      	mov	r2, r3
 8021b54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021b56:	3308      	adds	r3, #8
 8021b58:	429a      	cmp	r2, r3
 8021b5a:	d206      	bcs.n	8021b6a <icmp_input+0x15a>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 8021b5c:	485d      	ldr	r0, [pc, #372]	; (8021cd4 <icmp_input+0x2c4>)
 8021b5e:	f002 fa33 	bl	8023fc8 <iprintf>
          pbuf_free(r);
 8021b62:	6978      	ldr	r0, [r7, #20]
 8021b64:	f7f7 fb5c 	bl	8019220 <pbuf_free>
          goto icmperr;
 8021b68:	e0f0      	b.n	8021d4c <icmp_input+0x33c>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8021b6a:	697b      	ldr	r3, [r7, #20]
 8021b6c:	685b      	ldr	r3, [r3, #4]
 8021b6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8021b72:	4618      	mov	r0, r3
 8021b74:	f002 fc93 	bl	802449e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8021b78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021b7a:	4619      	mov	r1, r3
 8021b7c:	6978      	ldr	r0, [r7, #20]
 8021b7e:	f7f7 fac9 	bl	8019114 <pbuf_remove_header>
 8021b82:	4603      	mov	r3, r0
 8021b84:	2b00      	cmp	r3, #0
 8021b86:	d009      	beq.n	8021b9c <icmp_input+0x18c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8021b88:	4b53      	ldr	r3, [pc, #332]	; (8021cd8 <icmp_input+0x2c8>)
 8021b8a:	22b6      	movs	r2, #182	; 0xb6
 8021b8c:	4953      	ldr	r1, [pc, #332]	; (8021cdc <icmp_input+0x2cc>)
 8021b8e:	4854      	ldr	r0, [pc, #336]	; (8021ce0 <icmp_input+0x2d0>)
 8021b90:	f002 fa1a 	bl	8023fc8 <iprintf>
          pbuf_free(r);
 8021b94:	6978      	ldr	r0, [r7, #20]
 8021b96:	f7f7 fb43 	bl	8019220 <pbuf_free>
          goto icmperr;
 8021b9a:	e0d7      	b.n	8021d4c <icmp_input+0x33c>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8021b9c:	6879      	ldr	r1, [r7, #4]
 8021b9e:	6978      	ldr	r0, [r7, #20]
 8021ba0:	f7f7 fc62 	bl	8019468 <pbuf_copy>
 8021ba4:	4603      	mov	r3, r0
 8021ba6:	2b00      	cmp	r3, #0
 8021ba8:	d006      	beq.n	8021bb8 <icmp_input+0x1a8>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 8021baa:	484e      	ldr	r0, [pc, #312]	; (8021ce4 <icmp_input+0x2d4>)
 8021bac:	f002 fa0c 	bl	8023fc8 <iprintf>
          pbuf_free(r);
 8021bb0:	6978      	ldr	r0, [r7, #20]
 8021bb2:	f7f7 fb35 	bl	8019220 <pbuf_free>
          goto icmperr;
 8021bb6:	e0c9      	b.n	8021d4c <icmp_input+0x33c>
        }
        /* free the original p */
        pbuf_free(p);
 8021bb8:	6878      	ldr	r0, [r7, #4]
 8021bba:	f7f7 fb31 	bl	8019220 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8021bbe:	697b      	ldr	r3, [r7, #20]
 8021bc0:	607b      	str	r3, [r7, #4]
 8021bc2:	e00f      	b.n	8021be4 <icmp_input+0x1d4>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8021bc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021bc6:	330e      	adds	r3, #14
 8021bc8:	4619      	mov	r1, r3
 8021bca:	6878      	ldr	r0, [r7, #4]
 8021bcc:	f7f7 faa2 	bl	8019114 <pbuf_remove_header>
 8021bd0:	4603      	mov	r3, r0
 8021bd2:	2b00      	cmp	r3, #0
 8021bd4:	d006      	beq.n	8021be4 <icmp_input+0x1d4>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8021bd6:	4b40      	ldr	r3, [pc, #256]	; (8021cd8 <icmp_input+0x2c8>)
 8021bd8:	22c7      	movs	r2, #199	; 0xc7
 8021bda:	4943      	ldr	r1, [pc, #268]	; (8021ce8 <icmp_input+0x2d8>)
 8021bdc:	4840      	ldr	r0, [pc, #256]	; (8021ce0 <icmp_input+0x2d0>)
 8021bde:	f002 f9f3 	bl	8023fc8 <iprintf>
          goto icmperr;
 8021be2:	e0b3      	b.n	8021d4c <icmp_input+0x33c>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	685b      	ldr	r3, [r3, #4]
 8021be8:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8021bea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021bec:	4619      	mov	r1, r3
 8021bee:	6878      	ldr	r0, [r7, #4]
 8021bf0:	f7f7 fa80 	bl	80190f4 <pbuf_add_header>
 8021bf4:	4603      	mov	r3, r0
 8021bf6:	2b00      	cmp	r3, #0
 8021bf8:	d003      	beq.n	8021c02 <icmp_input+0x1f2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 8021bfa:	483c      	ldr	r0, [pc, #240]	; (8021cec <icmp_input+0x2dc>)
 8021bfc:	f002 f9e4 	bl	8023fc8 <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8021c00:	e093      	b.n	8021d2a <icmp_input+0x31a>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8021c02:	687b      	ldr	r3, [r7, #4]
 8021c04:	685b      	ldr	r3, [r3, #4]
 8021c06:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8021c08:	69fb      	ldr	r3, [r7, #28]
 8021c0a:	681a      	ldr	r2, [r3, #0]
 8021c0c:	68fb      	ldr	r3, [r7, #12]
 8021c0e:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8021c10:	4b25      	ldr	r3, [pc, #148]	; (8021ca8 <icmp_input+0x298>)
 8021c12:	691a      	ldr	r2, [r3, #16]
 8021c14:	68fb      	ldr	r3, [r7, #12]
 8021c16:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8021c18:	693b      	ldr	r3, [r7, #16]
 8021c1a:	2200      	movs	r2, #0
 8021c1c:	701a      	strb	r2, [r3, #0]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8021c1e:	693b      	ldr	r3, [r7, #16]
 8021c20:	885b      	ldrh	r3, [r3, #2]
 8021c22:	b29b      	uxth	r3, r3
 8021c24:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8021c28:	4293      	cmp	r3, r2
 8021c2a:	d907      	bls.n	8021c3c <icmp_input+0x22c>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8021c2c:	693b      	ldr	r3, [r7, #16]
 8021c2e:	885b      	ldrh	r3, [r3, #2]
 8021c30:	b29b      	uxth	r3, r3
 8021c32:	3309      	adds	r3, #9
 8021c34:	b29a      	uxth	r2, r3
 8021c36:	693b      	ldr	r3, [r7, #16]
 8021c38:	805a      	strh	r2, [r3, #2]
 8021c3a:	e006      	b.n	8021c4a <icmp_input+0x23a>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8021c3c:	693b      	ldr	r3, [r7, #16]
 8021c3e:	885b      	ldrh	r3, [r3, #2]
 8021c40:	b29b      	uxth	r3, r3
 8021c42:	3308      	adds	r3, #8
 8021c44:	b29a      	uxth	r2, r3
 8021c46:	693b      	ldr	r3, [r7, #16]
 8021c48:	805a      	strh	r2, [r3, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8021c4a:	68fb      	ldr	r3, [r7, #12]
 8021c4c:	22ff      	movs	r2, #255	; 0xff
 8021c4e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8021c50:	68fb      	ldr	r3, [r7, #12]
 8021c52:	2200      	movs	r2, #0
 8021c54:	729a      	strb	r2, [r3, #10]
 8021c56:	2200      	movs	r2, #0
 8021c58:	72da      	strb	r2, [r3, #11]
        ICMP_STATS_INC(icmp.xmit);
 8021c5a:	4b12      	ldr	r3, [pc, #72]	; (8021ca4 <icmp_input+0x294>)
 8021c5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8021c60:	3301      	adds	r3, #1
 8021c62:	b29a      	uxth	r2, r3
 8021c64:	4b0f      	ldr	r3, [pc, #60]	; (8021ca4 <icmp_input+0x294>)
 8021c66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8021c6a:	683b      	ldr	r3, [r7, #0]
 8021c6c:	9302      	str	r3, [sp, #8]
 8021c6e:	2301      	movs	r3, #1
 8021c70:	9301      	str	r3, [sp, #4]
 8021c72:	2300      	movs	r3, #0
 8021c74:	9300      	str	r3, [sp, #0]
 8021c76:	23ff      	movs	r3, #255	; 0xff
 8021c78:	2200      	movs	r2, #0
 8021c7a:	69f9      	ldr	r1, [r7, #28]
 8021c7c:	6878      	ldr	r0, [r7, #4]
 8021c7e:	f000 fb6d 	bl	802235c <ip4_output_if>
 8021c82:	4603      	mov	r3, r0
 8021c84:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 8021c86:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8021c8a:	2b00      	cmp	r3, #0
 8021c8c:	d04d      	beq.n	8021d2a <icmp_input+0x31a>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 8021c8e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8021c92:	4618      	mov	r0, r3
 8021c94:	f7f5 f9b4 	bl	8017000 <lwip_strerr>
 8021c98:	4603      	mov	r3, r0
 8021c9a:	4619      	mov	r1, r3
 8021c9c:	4814      	ldr	r0, [pc, #80]	; (8021cf0 <icmp_input+0x2e0>)
 8021c9e:	f002 f993 	bl	8023fc8 <iprintf>
      break;
 8021ca2:	e042      	b.n	8021d2a <icmp_input+0x31a>
 8021ca4:	2007ecb8 	.word	0x2007ecb8
 8021ca8:	2007ba88 	.word	0x2007ba88
 8021cac:	0802905c 	.word	0x0802905c
 8021cb0:	08029090 	.word	0x08029090
 8021cb4:	2007ba9c 	.word	0x2007ba9c
 8021cb8:	080290c0 	.word	0x080290c0
 8021cbc:	080290ec 	.word	0x080290ec
 8021cc0:	08029118 	.word	0x08029118
 8021cc4:	0802912c 	.word	0x0802912c
 8021cc8:	08029150 	.word	0x08029150
 8021ccc:	08029184 	.word	0x08029184
 8021cd0:	080291c0 	.word	0x080291c0
 8021cd4:	080291e8 	.word	0x080291e8
 8021cd8:	08029210 	.word	0x08029210
 8021cdc:	08029248 	.word	0x08029248
 8021ce0:	08029280 	.word	0x08029280
 8021ce4:	080292a8 	.word	0x080292a8
 8021ce8:	080292d0 	.word	0x080292d0
 8021cec:	08029304 	.word	0x08029304
 8021cf0:	08029328 	.word	0x08029328
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 8021cf4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8021cf8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8021cfc:	4619      	mov	r1, r3
 8021cfe:	481b      	ldr	r0, [pc, #108]	; (8021d6c <icmp_input+0x35c>)
 8021d00:	f002 f962 	bl	8023fc8 <iprintf>
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 8021d04:	4b1a      	ldr	r3, [pc, #104]	; (8021d70 <icmp_input+0x360>)
 8021d06:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8021d0a:	3301      	adds	r3, #1
 8021d0c:	b29a      	uxth	r2, r3
 8021d0e:	4b18      	ldr	r3, [pc, #96]	; (8021d70 <icmp_input+0x360>)
 8021d10:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 8021d14:	4b16      	ldr	r3, [pc, #88]	; (8021d70 <icmp_input+0x360>)
 8021d16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8021d1a:	3301      	adds	r3, #1
 8021d1c:	b29a      	uxth	r2, r3
 8021d1e:	4b14      	ldr	r3, [pc, #80]	; (8021d70 <icmp_input+0x360>)
 8021d20:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8021d24:	e002      	b.n	8021d2c <icmp_input+0x31c>
      break;
 8021d26:	bf00      	nop
 8021d28:	e000      	b.n	8021d2c <icmp_input+0x31c>
      break;
 8021d2a:	bf00      	nop
  }
  pbuf_free(p);
 8021d2c:	6878      	ldr	r0, [r7, #4]
 8021d2e:	f7f7 fa77 	bl	8019220 <pbuf_free>
  return;
 8021d32:	e017      	b.n	8021d64 <icmp_input+0x354>
lenerr:
  pbuf_free(p);
 8021d34:	6878      	ldr	r0, [r7, #4]
 8021d36:	f7f7 fa73 	bl	8019220 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 8021d3a:	4b0d      	ldr	r3, [pc, #52]	; (8021d70 <icmp_input+0x360>)
 8021d3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8021d40:	3301      	adds	r3, #1
 8021d42:	b29a      	uxth	r2, r3
 8021d44:	4b0a      	ldr	r3, [pc, #40]	; (8021d70 <icmp_input+0x360>)
 8021d46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8021d4a:	e00b      	b.n	8021d64 <icmp_input+0x354>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8021d4c:	6878      	ldr	r0, [r7, #4]
 8021d4e:	f7f7 fa67 	bl	8019220 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 8021d52:	4b07      	ldr	r3, [pc, #28]	; (8021d70 <icmp_input+0x360>)
 8021d54:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8021d58:	3301      	adds	r3, #1
 8021d5a:	b29a      	uxth	r2, r3
 8021d5c:	4b04      	ldr	r3, [pc, #16]	; (8021d70 <icmp_input+0x360>)
 8021d5e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8021d62:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8021d64:	3728      	adds	r7, #40	; 0x28
 8021d66:	46bd      	mov	sp, r7
 8021d68:	bd80      	pop	{r7, pc}
 8021d6a:	bf00      	nop
 8021d6c:	08029358 	.word	0x08029358
 8021d70:	2007ecb8 	.word	0x2007ecb8

08021d74 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8021d74:	b580      	push	{r7, lr}
 8021d76:	b082      	sub	sp, #8
 8021d78:	af00      	add	r7, sp, #0
 8021d7a:	6078      	str	r0, [r7, #4]
 8021d7c:	460b      	mov	r3, r1
 8021d7e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8021d80:	78fb      	ldrb	r3, [r7, #3]
 8021d82:	461a      	mov	r2, r3
 8021d84:	2103      	movs	r1, #3
 8021d86:	6878      	ldr	r0, [r7, #4]
 8021d88:	f000 f814 	bl	8021db4 <icmp_send_response>
}
 8021d8c:	bf00      	nop
 8021d8e:	3708      	adds	r7, #8
 8021d90:	46bd      	mov	sp, r7
 8021d92:	bd80      	pop	{r7, pc}

08021d94 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8021d94:	b580      	push	{r7, lr}
 8021d96:	b082      	sub	sp, #8
 8021d98:	af00      	add	r7, sp, #0
 8021d9a:	6078      	str	r0, [r7, #4]
 8021d9c:	460b      	mov	r3, r1
 8021d9e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8021da0:	78fb      	ldrb	r3, [r7, #3]
 8021da2:	461a      	mov	r2, r3
 8021da4:	210b      	movs	r1, #11
 8021da6:	6878      	ldr	r0, [r7, #4]
 8021da8:	f000 f804 	bl	8021db4 <icmp_send_response>
}
 8021dac:	bf00      	nop
 8021dae:	3708      	adds	r7, #8
 8021db0:	46bd      	mov	sp, r7
 8021db2:	bd80      	pop	{r7, pc}

08021db4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8021db4:	b580      	push	{r7, lr}
 8021db6:	b08c      	sub	sp, #48	; 0x30
 8021db8:	af04      	add	r7, sp, #16
 8021dba:	6078      	str	r0, [r7, #4]
 8021dbc:	460b      	mov	r3, r1
 8021dbe:	70fb      	strb	r3, [r7, #3]
 8021dc0:	4613      	mov	r3, r2
 8021dc2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8021dc4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021dc8:	2124      	movs	r1, #36	; 0x24
 8021dca:	2022      	movs	r0, #34	; 0x22
 8021dcc:	f7f6 ff44 	bl	8018c58 <pbuf_alloc>
 8021dd0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8021dd2:	69fb      	ldr	r3, [r7, #28]
 8021dd4:	2b00      	cmp	r3, #0
 8021dd6:	d103      	bne.n	8021de0 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 8021dd8:	484d      	ldr	r0, [pc, #308]	; (8021f10 <icmp_send_response+0x15c>)
 8021dda:	f002 f963 	bl	80240a4 <puts>
 8021dde:	e094      	b.n	8021f0a <icmp_send_response+0x156>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8021de0:	69fb      	ldr	r3, [r7, #28]
 8021de2:	895b      	ldrh	r3, [r3, #10]
 8021de4:	2b23      	cmp	r3, #35	; 0x23
 8021de6:	d806      	bhi.n	8021df6 <icmp_send_response+0x42>
 8021de8:	4b4a      	ldr	r3, [pc, #296]	; (8021f14 <icmp_send_response+0x160>)
 8021dea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8021dee:	494a      	ldr	r1, [pc, #296]	; (8021f18 <icmp_send_response+0x164>)
 8021df0:	484a      	ldr	r0, [pc, #296]	; (8021f1c <icmp_send_response+0x168>)
 8021df2:	f002 f8e9 	bl	8023fc8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8021df6:	687b      	ldr	r3, [r7, #4]
 8021df8:	685b      	ldr	r3, [r3, #4]
 8021dfa:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 8021dfc:	4848      	ldr	r0, [pc, #288]	; (8021f20 <icmp_send_response+0x16c>)
 8021dfe:	f002 f8e3 	bl	8023fc8 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 8021e02:	69bb      	ldr	r3, [r7, #24]
 8021e04:	68db      	ldr	r3, [r3, #12]
 8021e06:	b2db      	uxtb	r3, r3
 8021e08:	4619      	mov	r1, r3
 8021e0a:	69bb      	ldr	r3, [r7, #24]
 8021e0c:	68db      	ldr	r3, [r3, #12]
 8021e0e:	0a1b      	lsrs	r3, r3, #8
 8021e10:	b2db      	uxtb	r3, r3
 8021e12:	461a      	mov	r2, r3
 8021e14:	69bb      	ldr	r3, [r7, #24]
 8021e16:	68db      	ldr	r3, [r3, #12]
 8021e18:	0c1b      	lsrs	r3, r3, #16
 8021e1a:	b2db      	uxtb	r3, r3
 8021e1c:	4618      	mov	r0, r3
 8021e1e:	69bb      	ldr	r3, [r7, #24]
 8021e20:	68db      	ldr	r3, [r3, #12]
 8021e22:	0e1b      	lsrs	r3, r3, #24
 8021e24:	b2db      	uxtb	r3, r3
 8021e26:	9300      	str	r3, [sp, #0]
 8021e28:	4603      	mov	r3, r0
 8021e2a:	483e      	ldr	r0, [pc, #248]	; (8021f24 <icmp_send_response+0x170>)
 8021e2c:	f002 f8cc 	bl	8023fc8 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 8021e30:	483d      	ldr	r0, [pc, #244]	; (8021f28 <icmp_send_response+0x174>)
 8021e32:	f002 f8c9 	bl	8023fc8 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 8021e36:	69bb      	ldr	r3, [r7, #24]
 8021e38:	691b      	ldr	r3, [r3, #16]
 8021e3a:	b2db      	uxtb	r3, r3
 8021e3c:	4619      	mov	r1, r3
 8021e3e:	69bb      	ldr	r3, [r7, #24]
 8021e40:	691b      	ldr	r3, [r3, #16]
 8021e42:	0a1b      	lsrs	r3, r3, #8
 8021e44:	b2db      	uxtb	r3, r3
 8021e46:	461a      	mov	r2, r3
 8021e48:	69bb      	ldr	r3, [r7, #24]
 8021e4a:	691b      	ldr	r3, [r3, #16]
 8021e4c:	0c1b      	lsrs	r3, r3, #16
 8021e4e:	b2db      	uxtb	r3, r3
 8021e50:	4618      	mov	r0, r3
 8021e52:	69bb      	ldr	r3, [r7, #24]
 8021e54:	691b      	ldr	r3, [r3, #16]
 8021e56:	0e1b      	lsrs	r3, r3, #24
 8021e58:	b2db      	uxtb	r3, r3
 8021e5a:	9300      	str	r3, [sp, #0]
 8021e5c:	4603      	mov	r3, r0
 8021e5e:	4831      	ldr	r0, [pc, #196]	; (8021f24 <icmp_send_response+0x170>)
 8021e60:	f002 f8b2 	bl	8023fc8 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 8021e64:	200a      	movs	r0, #10
 8021e66:	f002 f8c1 	bl	8023fec <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8021e6a:	69fb      	ldr	r3, [r7, #28]
 8021e6c:	685b      	ldr	r3, [r3, #4]
 8021e6e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8021e70:	697b      	ldr	r3, [r7, #20]
 8021e72:	78fa      	ldrb	r2, [r7, #3]
 8021e74:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8021e76:	697b      	ldr	r3, [r7, #20]
 8021e78:	78ba      	ldrb	r2, [r7, #2]
 8021e7a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8021e7c:	697b      	ldr	r3, [r7, #20]
 8021e7e:	2200      	movs	r2, #0
 8021e80:	711a      	strb	r2, [r3, #4]
 8021e82:	2200      	movs	r2, #0
 8021e84:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8021e86:	697b      	ldr	r3, [r7, #20]
 8021e88:	2200      	movs	r2, #0
 8021e8a:	719a      	strb	r2, [r3, #6]
 8021e8c:	2200      	movs	r2, #0
 8021e8e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8021e90:	69fb      	ldr	r3, [r7, #28]
 8021e92:	685b      	ldr	r3, [r3, #4]
 8021e94:	f103 0008 	add.w	r0, r3, #8
 8021e98:	687b      	ldr	r3, [r7, #4]
 8021e9a:	685b      	ldr	r3, [r3, #4]
 8021e9c:	221c      	movs	r2, #28
 8021e9e:	4619      	mov	r1, r3
 8021ea0:	f002 fafd 	bl	802449e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8021ea4:	69bb      	ldr	r3, [r7, #24]
 8021ea6:	68db      	ldr	r3, [r3, #12]
 8021ea8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8021eaa:	f107 030c 	add.w	r3, r7, #12
 8021eae:	4618      	mov	r0, r3
 8021eb0:	f000 f83e 	bl	8021f30 <ip4_route>
 8021eb4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8021eb6:	693b      	ldr	r3, [r7, #16]
 8021eb8:	2b00      	cmp	r3, #0
 8021eba:	d023      	beq.n	8021f04 <icmp_send_response+0x150>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8021ebc:	697b      	ldr	r3, [r7, #20]
 8021ebe:	2200      	movs	r2, #0
 8021ec0:	709a      	strb	r2, [r3, #2]
 8021ec2:	2200      	movs	r2, #0
 8021ec4:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8021ec6:	69fb      	ldr	r3, [r7, #28]
 8021ec8:	895b      	ldrh	r3, [r3, #10]
 8021eca:	4619      	mov	r1, r3
 8021ecc:	6978      	ldr	r0, [r7, #20]
 8021ece:	f7f5 fb94 	bl	80175fa <inet_chksum>
 8021ed2:	4603      	mov	r3, r0
 8021ed4:	461a      	mov	r2, r3
 8021ed6:	697b      	ldr	r3, [r7, #20]
 8021ed8:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 8021eda:	4b14      	ldr	r3, [pc, #80]	; (8021f2c <icmp_send_response+0x178>)
 8021edc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8021ee0:	3301      	adds	r3, #1
 8021ee2:	b29a      	uxth	r2, r3
 8021ee4:	4b11      	ldr	r3, [pc, #68]	; (8021f2c <icmp_send_response+0x178>)
 8021ee6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8021eea:	f107 020c 	add.w	r2, r7, #12
 8021eee:	693b      	ldr	r3, [r7, #16]
 8021ef0:	9302      	str	r3, [sp, #8]
 8021ef2:	2301      	movs	r3, #1
 8021ef4:	9301      	str	r3, [sp, #4]
 8021ef6:	2300      	movs	r3, #0
 8021ef8:	9300      	str	r3, [sp, #0]
 8021efa:	23ff      	movs	r3, #255	; 0xff
 8021efc:	2100      	movs	r1, #0
 8021efe:	69f8      	ldr	r0, [r7, #28]
 8021f00:	f000 fa2c 	bl	802235c <ip4_output_if>
  }
  pbuf_free(q);
 8021f04:	69f8      	ldr	r0, [r7, #28]
 8021f06:	f7f7 f98b 	bl	8019220 <pbuf_free>
}
 8021f0a:	3720      	adds	r7, #32
 8021f0c:	46bd      	mov	sp, r7
 8021f0e:	bd80      	pop	{r7, pc}
 8021f10:	0802938c 	.word	0x0802938c
 8021f14:	08029210 	.word	0x08029210
 8021f18:	080293cc 	.word	0x080293cc
 8021f1c:	08029280 	.word	0x08029280
 8021f20:	080293f8 	.word	0x080293f8
 8021f24:	08029414 	.word	0x08029414
 8021f28:	08029424 	.word	0x08029424
 8021f2c:	2007ecb8 	.word	0x2007ecb8

08021f30 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8021f30:	b480      	push	{r7}
 8021f32:	b085      	sub	sp, #20
 8021f34:	af00      	add	r7, sp, #0
 8021f36:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8021f38:	4b37      	ldr	r3, [pc, #220]	; (8022018 <ip4_route+0xe8>)
 8021f3a:	681b      	ldr	r3, [r3, #0]
 8021f3c:	60fb      	str	r3, [r7, #12]
 8021f3e:	e036      	b.n	8021fae <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021f40:	68fb      	ldr	r3, [r7, #12]
 8021f42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021f46:	f003 0301 	and.w	r3, r3, #1
 8021f4a:	b2db      	uxtb	r3, r3
 8021f4c:	2b00      	cmp	r3, #0
 8021f4e:	d02b      	beq.n	8021fa8 <ip4_route+0x78>
 8021f50:	68fb      	ldr	r3, [r7, #12]
 8021f52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021f56:	089b      	lsrs	r3, r3, #2
 8021f58:	f003 0301 	and.w	r3, r3, #1
 8021f5c:	b2db      	uxtb	r3, r3
 8021f5e:	2b00      	cmp	r3, #0
 8021f60:	d022      	beq.n	8021fa8 <ip4_route+0x78>
 8021f62:	68fb      	ldr	r3, [r7, #12]
 8021f64:	3304      	adds	r3, #4
 8021f66:	681b      	ldr	r3, [r3, #0]
 8021f68:	2b00      	cmp	r3, #0
 8021f6a:	d01d      	beq.n	8021fa8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8021f6c:	687b      	ldr	r3, [r7, #4]
 8021f6e:	681a      	ldr	r2, [r3, #0]
 8021f70:	68fb      	ldr	r3, [r7, #12]
 8021f72:	3304      	adds	r3, #4
 8021f74:	681b      	ldr	r3, [r3, #0]
 8021f76:	405a      	eors	r2, r3
 8021f78:	68fb      	ldr	r3, [r7, #12]
 8021f7a:	3308      	adds	r3, #8
 8021f7c:	681b      	ldr	r3, [r3, #0]
 8021f7e:	4013      	ands	r3, r2
 8021f80:	2b00      	cmp	r3, #0
 8021f82:	d101      	bne.n	8021f88 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8021f84:	68fb      	ldr	r3, [r7, #12]
 8021f86:	e040      	b.n	802200a <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8021f88:	68fb      	ldr	r3, [r7, #12]
 8021f8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021f8e:	f003 0302 	and.w	r3, r3, #2
 8021f92:	2b00      	cmp	r3, #0
 8021f94:	d108      	bne.n	8021fa8 <ip4_route+0x78>
 8021f96:	687b      	ldr	r3, [r7, #4]
 8021f98:	681a      	ldr	r2, [r3, #0]
 8021f9a:	68fb      	ldr	r3, [r7, #12]
 8021f9c:	330c      	adds	r3, #12
 8021f9e:	681b      	ldr	r3, [r3, #0]
 8021fa0:	429a      	cmp	r2, r3
 8021fa2:	d101      	bne.n	8021fa8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8021fa4:	68fb      	ldr	r3, [r7, #12]
 8021fa6:	e030      	b.n	802200a <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 8021fa8:	68fb      	ldr	r3, [r7, #12]
 8021faa:	681b      	ldr	r3, [r3, #0]
 8021fac:	60fb      	str	r3, [r7, #12]
 8021fae:	68fb      	ldr	r3, [r7, #12]
 8021fb0:	2b00      	cmp	r3, #0
 8021fb2:	d1c5      	bne.n	8021f40 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8021fb4:	4b19      	ldr	r3, [pc, #100]	; (802201c <ip4_route+0xec>)
 8021fb6:	681b      	ldr	r3, [r3, #0]
 8021fb8:	2b00      	cmp	r3, #0
 8021fba:	d01a      	beq.n	8021ff2 <ip4_route+0xc2>
 8021fbc:	4b17      	ldr	r3, [pc, #92]	; (802201c <ip4_route+0xec>)
 8021fbe:	681b      	ldr	r3, [r3, #0]
 8021fc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021fc4:	f003 0301 	and.w	r3, r3, #1
 8021fc8:	2b00      	cmp	r3, #0
 8021fca:	d012      	beq.n	8021ff2 <ip4_route+0xc2>
 8021fcc:	4b13      	ldr	r3, [pc, #76]	; (802201c <ip4_route+0xec>)
 8021fce:	681b      	ldr	r3, [r3, #0]
 8021fd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021fd4:	f003 0304 	and.w	r3, r3, #4
 8021fd8:	2b00      	cmp	r3, #0
 8021fda:	d00a      	beq.n	8021ff2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8021fdc:	4b0f      	ldr	r3, [pc, #60]	; (802201c <ip4_route+0xec>)
 8021fde:	681b      	ldr	r3, [r3, #0]
 8021fe0:	3304      	adds	r3, #4
 8021fe2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8021fe4:	2b00      	cmp	r3, #0
 8021fe6:	d004      	beq.n	8021ff2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8021fe8:	687b      	ldr	r3, [r7, #4]
 8021fea:	681b      	ldr	r3, [r3, #0]
 8021fec:	b2db      	uxtb	r3, r3
 8021fee:	2b7f      	cmp	r3, #127	; 0x7f
 8021ff0:	d109      	bne.n	8022006 <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8021ff2:	4b0b      	ldr	r3, [pc, #44]	; (8022020 <ip4_route+0xf0>)
 8021ff4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8021ff8:	3301      	adds	r3, #1
 8021ffa:	b29a      	uxth	r2, r3
 8021ffc:	4b08      	ldr	r3, [pc, #32]	; (8022020 <ip4_route+0xf0>)
 8021ffe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8022002:	2300      	movs	r3, #0
 8022004:	e001      	b.n	802200a <ip4_route+0xda>
  }

  return netif_default;
 8022006:	4b05      	ldr	r3, [pc, #20]	; (802201c <ip4_route+0xec>)
 8022008:	681b      	ldr	r3, [r3, #0]
}
 802200a:	4618      	mov	r0, r3
 802200c:	3714      	adds	r7, #20
 802200e:	46bd      	mov	sp, r7
 8022010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022014:	4770      	bx	lr
 8022016:	bf00      	nop
 8022018:	2007ecac 	.word	0x2007ecac
 802201c:	2007ecb0 	.word	0x2007ecb0
 8022020:	2007ecb8 	.word	0x2007ecb8

08022024 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8022024:	b580      	push	{r7, lr}
 8022026:	b082      	sub	sp, #8
 8022028:	af00      	add	r7, sp, #0
 802202a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 802202c:	687b      	ldr	r3, [r7, #4]
 802202e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8022032:	f003 0301 	and.w	r3, r3, #1
 8022036:	b2db      	uxtb	r3, r3
 8022038:	2b00      	cmp	r3, #0
 802203a:	d016      	beq.n	802206a <ip4_input_accept+0x46>
 802203c:	687b      	ldr	r3, [r7, #4]
 802203e:	3304      	adds	r3, #4
 8022040:	681b      	ldr	r3, [r3, #0]
 8022042:	2b00      	cmp	r3, #0
 8022044:	d011      	beq.n	802206a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022046:	4b0b      	ldr	r3, [pc, #44]	; (8022074 <ip4_input_accept+0x50>)
 8022048:	695a      	ldr	r2, [r3, #20]
 802204a:	687b      	ldr	r3, [r7, #4]
 802204c:	3304      	adds	r3, #4
 802204e:	681b      	ldr	r3, [r3, #0]
 8022050:	429a      	cmp	r2, r3
 8022052:	d008      	beq.n	8022066 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8022054:	4b07      	ldr	r3, [pc, #28]	; (8022074 <ip4_input_accept+0x50>)
 8022056:	695b      	ldr	r3, [r3, #20]
 8022058:	6879      	ldr	r1, [r7, #4]
 802205a:	4618      	mov	r0, r3
 802205c:	f000 fa70 	bl	8022540 <ip4_addr_isbroadcast_u32>
 8022060:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022062:	2b00      	cmp	r3, #0
 8022064:	d001      	beq.n	802206a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8022066:	2301      	movs	r3, #1
 8022068:	e000      	b.n	802206c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802206a:	2300      	movs	r3, #0
}
 802206c:	4618      	mov	r0, r3
 802206e:	3708      	adds	r7, #8
 8022070:	46bd      	mov	sp, r7
 8022072:	bd80      	pop	{r7, pc}
 8022074:	2007ba88 	.word	0x2007ba88

08022078 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8022078:	b580      	push	{r7, lr}
 802207a:	b086      	sub	sp, #24
 802207c:	af00      	add	r7, sp, #0
 802207e:	6078      	str	r0, [r7, #4]
 8022080:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 8022082:	4b8f      	ldr	r3, [pc, #572]	; (80222c0 <ip4_input+0x248>)
 8022084:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8022088:	3301      	adds	r3, #1
 802208a:	b29a      	uxth	r2, r3
 802208c:	4b8c      	ldr	r3, [pc, #560]	; (80222c0 <ip4_input+0x248>)
 802208e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8022092:	687b      	ldr	r3, [r7, #4]
 8022094:	685b      	ldr	r3, [r3, #4]
 8022096:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8022098:	693b      	ldr	r3, [r7, #16]
 802209a:	781b      	ldrb	r3, [r3, #0]
 802209c:	091b      	lsrs	r3, r3, #4
 802209e:	b2db      	uxtb	r3, r3
 80220a0:	2b04      	cmp	r3, #4
 80220a2:	d014      	beq.n	80220ce <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80220a4:	6878      	ldr	r0, [r7, #4]
 80220a6:	f7f7 f8bb 	bl	8019220 <pbuf_free>
    IP_STATS_INC(ip.err);
 80220aa:	4b85      	ldr	r3, [pc, #532]	; (80222c0 <ip4_input+0x248>)
 80220ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80220b0:	3301      	adds	r3, #1
 80220b2:	b29a      	uxth	r2, r3
 80220b4:	4b82      	ldr	r3, [pc, #520]	; (80222c0 <ip4_input+0x248>)
 80220b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 80220ba:	4b81      	ldr	r3, [pc, #516]	; (80222c0 <ip4_input+0x248>)
 80220bc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80220c0:	3301      	adds	r3, #1
 80220c2:	b29a      	uxth	r2, r3
 80220c4:	4b7e      	ldr	r3, [pc, #504]	; (80222c0 <ip4_input+0x248>)
 80220c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80220ca:	2300      	movs	r3, #0
 80220cc:	e13e      	b.n	802234c <ip4_input+0x2d4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80220ce:	693b      	ldr	r3, [r7, #16]
 80220d0:	781b      	ldrb	r3, [r3, #0]
 80220d2:	f003 030f 	and.w	r3, r3, #15
 80220d6:	b2db      	uxtb	r3, r3
 80220d8:	009b      	lsls	r3, r3, #2
 80220da:	b2db      	uxtb	r3, r3
 80220dc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80220de:	693b      	ldr	r3, [r7, #16]
 80220e0:	885b      	ldrh	r3, [r3, #2]
 80220e2:	b29b      	uxth	r3, r3
 80220e4:	4618      	mov	r0, r3
 80220e6:	f7f5 f9fd 	bl	80174e4 <lwip_htons>
 80220ea:	4603      	mov	r3, r0
 80220ec:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80220ee:	687b      	ldr	r3, [r7, #4]
 80220f0:	891b      	ldrh	r3, [r3, #8]
 80220f2:	89ba      	ldrh	r2, [r7, #12]
 80220f4:	429a      	cmp	r2, r3
 80220f6:	d204      	bcs.n	8022102 <ip4_input+0x8a>
    pbuf_realloc(p, iphdr_len);
 80220f8:	89bb      	ldrh	r3, [r7, #12]
 80220fa:	4619      	mov	r1, r3
 80220fc:	6878      	ldr	r0, [r7, #4]
 80220fe:	f7f6 ff09 	bl	8018f14 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8022102:	687b      	ldr	r3, [r7, #4]
 8022104:	895b      	ldrh	r3, [r3, #10]
 8022106:	89fa      	ldrh	r2, [r7, #14]
 8022108:	429a      	cmp	r2, r3
 802210a:	d807      	bhi.n	802211c <ip4_input+0xa4>
 802210c:	687b      	ldr	r3, [r7, #4]
 802210e:	891b      	ldrh	r3, [r3, #8]
 8022110:	89ba      	ldrh	r2, [r7, #12]
 8022112:	429a      	cmp	r2, r3
 8022114:	d802      	bhi.n	802211c <ip4_input+0xa4>
 8022116:	89fb      	ldrh	r3, [r7, #14]
 8022118:	2b13      	cmp	r3, #19
 802211a:	d814      	bhi.n	8022146 <ip4_input+0xce>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 802211c:	6878      	ldr	r0, [r7, #4]
 802211e:	f7f7 f87f 	bl	8019220 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 8022122:	4b67      	ldr	r3, [pc, #412]	; (80222c0 <ip4_input+0x248>)
 8022124:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8022128:	3301      	adds	r3, #1
 802212a:	b29a      	uxth	r2, r3
 802212c:	4b64      	ldr	r3, [pc, #400]	; (80222c0 <ip4_input+0x248>)
 802212e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 8022132:	4b63      	ldr	r3, [pc, #396]	; (80222c0 <ip4_input+0x248>)
 8022134:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8022138:	3301      	adds	r3, #1
 802213a:	b29a      	uxth	r2, r3
 802213c:	4b60      	ldr	r3, [pc, #384]	; (80222c0 <ip4_input+0x248>)
 802213e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8022142:	2300      	movs	r3, #0
 8022144:	e102      	b.n	802234c <ip4_input+0x2d4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8022146:	693b      	ldr	r3, [r7, #16]
 8022148:	691b      	ldr	r3, [r3, #16]
 802214a:	4a5e      	ldr	r2, [pc, #376]	; (80222c4 <ip4_input+0x24c>)
 802214c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 802214e:	693b      	ldr	r3, [r7, #16]
 8022150:	68db      	ldr	r3, [r3, #12]
 8022152:	4a5c      	ldr	r2, [pc, #368]	; (80222c4 <ip4_input+0x24c>)
 8022154:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022156:	4b5b      	ldr	r3, [pc, #364]	; (80222c4 <ip4_input+0x24c>)
 8022158:	695b      	ldr	r3, [r3, #20]
 802215a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802215e:	2be0      	cmp	r3, #224	; 0xe0
 8022160:	d112      	bne.n	8022188 <ip4_input+0x110>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8022162:	683b      	ldr	r3, [r7, #0]
 8022164:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8022168:	f003 0301 	and.w	r3, r3, #1
 802216c:	b2db      	uxtb	r3, r3
 802216e:	2b00      	cmp	r3, #0
 8022170:	d007      	beq.n	8022182 <ip4_input+0x10a>
 8022172:	683b      	ldr	r3, [r7, #0]
 8022174:	3304      	adds	r3, #4
 8022176:	681b      	ldr	r3, [r3, #0]
 8022178:	2b00      	cmp	r3, #0
 802217a:	d002      	beq.n	8022182 <ip4_input+0x10a>
      netif = inp;
 802217c:	683b      	ldr	r3, [r7, #0]
 802217e:	617b      	str	r3, [r7, #20]
 8022180:	e02a      	b.n	80221d8 <ip4_input+0x160>
    } else {
      netif = NULL;
 8022182:	2300      	movs	r3, #0
 8022184:	617b      	str	r3, [r7, #20]
 8022186:	e027      	b.n	80221d8 <ip4_input+0x160>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8022188:	6838      	ldr	r0, [r7, #0]
 802218a:	f7ff ff4b 	bl	8022024 <ip4_input_accept>
 802218e:	4603      	mov	r3, r0
 8022190:	2b00      	cmp	r3, #0
 8022192:	d002      	beq.n	802219a <ip4_input+0x122>
      netif = inp;
 8022194:	683b      	ldr	r3, [r7, #0]
 8022196:	617b      	str	r3, [r7, #20]
 8022198:	e01e      	b.n	80221d8 <ip4_input+0x160>
    } else {
      netif = NULL;
 802219a:	2300      	movs	r3, #0
 802219c:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 802219e:	4b49      	ldr	r3, [pc, #292]	; (80222c4 <ip4_input+0x24c>)
 80221a0:	695b      	ldr	r3, [r3, #20]
 80221a2:	b2db      	uxtb	r3, r3
 80221a4:	2b7f      	cmp	r3, #127	; 0x7f
 80221a6:	d017      	beq.n	80221d8 <ip4_input+0x160>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80221a8:	4b47      	ldr	r3, [pc, #284]	; (80222c8 <ip4_input+0x250>)
 80221aa:	681b      	ldr	r3, [r3, #0]
 80221ac:	617b      	str	r3, [r7, #20]
 80221ae:	e00e      	b.n	80221ce <ip4_input+0x156>
          if (netif == inp) {
 80221b0:	697a      	ldr	r2, [r7, #20]
 80221b2:	683b      	ldr	r3, [r7, #0]
 80221b4:	429a      	cmp	r2, r3
 80221b6:	d006      	beq.n	80221c6 <ip4_input+0x14e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80221b8:	6978      	ldr	r0, [r7, #20]
 80221ba:	f7ff ff33 	bl	8022024 <ip4_input_accept>
 80221be:	4603      	mov	r3, r0
 80221c0:	2b00      	cmp	r3, #0
 80221c2:	d108      	bne.n	80221d6 <ip4_input+0x15e>
 80221c4:	e000      	b.n	80221c8 <ip4_input+0x150>
            continue;
 80221c6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80221c8:	697b      	ldr	r3, [r7, #20]
 80221ca:	681b      	ldr	r3, [r3, #0]
 80221cc:	617b      	str	r3, [r7, #20]
 80221ce:	697b      	ldr	r3, [r7, #20]
 80221d0:	2b00      	cmp	r3, #0
 80221d2:	d1ed      	bne.n	80221b0 <ip4_input+0x138>
 80221d4:	e000      	b.n	80221d8 <ip4_input+0x160>
            break;
 80221d6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80221d8:	4b3a      	ldr	r3, [pc, #232]	; (80222c4 <ip4_input+0x24c>)
 80221da:	691b      	ldr	r3, [r3, #16]
 80221dc:	6839      	ldr	r1, [r7, #0]
 80221de:	4618      	mov	r0, r3
 80221e0:	f000 f9ae 	bl	8022540 <ip4_addr_isbroadcast_u32>
 80221e4:	4603      	mov	r3, r0
 80221e6:	2b00      	cmp	r3, #0
 80221e8:	d105      	bne.n	80221f6 <ip4_input+0x17e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80221ea:	4b36      	ldr	r3, [pc, #216]	; (80222c4 <ip4_input+0x24c>)
 80221ec:	691b      	ldr	r3, [r3, #16]
 80221ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80221f2:	2be0      	cmp	r3, #224	; 0xe0
 80221f4:	d10c      	bne.n	8022210 <ip4_input+0x198>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80221f6:	6878      	ldr	r0, [r7, #4]
 80221f8:	f7f7 f812 	bl	8019220 <pbuf_free>
      IP_STATS_INC(ip.drop);
 80221fc:	4b30      	ldr	r3, [pc, #192]	; (80222c0 <ip4_input+0x248>)
 80221fe:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8022202:	3301      	adds	r3, #1
 8022204:	b29a      	uxth	r2, r3
 8022206:	4b2e      	ldr	r3, [pc, #184]	; (80222c0 <ip4_input+0x248>)
 8022208:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 802220c:	2300      	movs	r3, #0
 802220e:	e09d      	b.n	802234c <ip4_input+0x2d4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8022210:	697b      	ldr	r3, [r7, #20]
 8022212:	2b00      	cmp	r3, #0
 8022214:	d10c      	bne.n	8022230 <ip4_input+0x1b8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 8022216:	4b2a      	ldr	r3, [pc, #168]	; (80222c0 <ip4_input+0x248>)
 8022218:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 802221c:	3301      	adds	r3, #1
 802221e:	b29a      	uxth	r2, r3
 8022220:	4b27      	ldr	r3, [pc, #156]	; (80222c0 <ip4_input+0x248>)
 8022222:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8022226:	6878      	ldr	r0, [r7, #4]
 8022228:	f7f6 fffa 	bl	8019220 <pbuf_free>
    return ERR_OK;
 802222c:	2300      	movs	r3, #0
 802222e:	e08d      	b.n	802234c <ip4_input+0x2d4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8022230:	693b      	ldr	r3, [r7, #16]
 8022232:	88db      	ldrh	r3, [r3, #6]
 8022234:	b29b      	uxth	r3, r3
 8022236:	461a      	mov	r2, r3
 8022238:	f64f 733f 	movw	r3, #65343	; 0xff3f
 802223c:	4013      	ands	r3, r2
 802223e:	2b00      	cmp	r3, #0
 8022240:	d00b      	beq.n	802225a <ip4_input+0x1e2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8022242:	6878      	ldr	r0, [r7, #4]
 8022244:	f000 fcca 	bl	8022bdc <ip4_reass>
 8022248:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 802224a:	687b      	ldr	r3, [r7, #4]
 802224c:	2b00      	cmp	r3, #0
 802224e:	d101      	bne.n	8022254 <ip4_input+0x1dc>
      return ERR_OK;
 8022250:	2300      	movs	r3, #0
 8022252:	e07b      	b.n	802234c <ip4_input+0x2d4>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8022254:	687b      	ldr	r3, [r7, #4]
 8022256:	685b      	ldr	r3, [r3, #4]
 8022258:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 802225a:	4a1a      	ldr	r2, [pc, #104]	; (80222c4 <ip4_input+0x24c>)
 802225c:	697b      	ldr	r3, [r7, #20]
 802225e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8022260:	4a18      	ldr	r2, [pc, #96]	; (80222c4 <ip4_input+0x24c>)
 8022262:	683b      	ldr	r3, [r7, #0]
 8022264:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8022266:	4a17      	ldr	r2, [pc, #92]	; (80222c4 <ip4_input+0x24c>)
 8022268:	693b      	ldr	r3, [r7, #16]
 802226a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 802226c:	693b      	ldr	r3, [r7, #16]
 802226e:	781b      	ldrb	r3, [r3, #0]
 8022270:	f003 030f 	and.w	r3, r3, #15
 8022274:	b2db      	uxtb	r3, r3
 8022276:	009b      	lsls	r3, r3, #2
 8022278:	b2db      	uxtb	r3, r3
 802227a:	b29a      	uxth	r2, r3
 802227c:	4b11      	ldr	r3, [pc, #68]	; (80222c4 <ip4_input+0x24c>)
 802227e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8022280:	89fb      	ldrh	r3, [r7, #14]
 8022282:	4619      	mov	r1, r3
 8022284:	6878      	ldr	r0, [r7, #4]
 8022286:	f7f6 ff45 	bl	8019114 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 802228a:	693b      	ldr	r3, [r7, #16]
 802228c:	7a5b      	ldrb	r3, [r3, #9]
 802228e:	2b11      	cmp	r3, #17
 8022290:	d006      	beq.n	80222a0 <ip4_input+0x228>
 8022292:	2b11      	cmp	r3, #17
 8022294:	dc1a      	bgt.n	80222cc <ip4_input+0x254>
 8022296:	2b01      	cmp	r3, #1
 8022298:	d00c      	beq.n	80222b4 <ip4_input+0x23c>
 802229a:	2b06      	cmp	r3, #6
 802229c:	d005      	beq.n	80222aa <ip4_input+0x232>
 802229e:	e015      	b.n	80222cc <ip4_input+0x254>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80222a0:	6839      	ldr	r1, [r7, #0]
 80222a2:	6878      	ldr	r0, [r7, #4]
 80222a4:	f7fd ff7c 	bl	80201a0 <udp_input>
        break;
 80222a8:	e03d      	b.n	8022326 <ip4_input+0x2ae>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80222aa:	6839      	ldr	r1, [r7, #0]
 80222ac:	6878      	ldr	r0, [r7, #4]
 80222ae:	f7f9 fa15 	bl	801b6dc <tcp_input>
        break;
 80222b2:	e038      	b.n	8022326 <ip4_input+0x2ae>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80222b4:	6839      	ldr	r1, [r7, #0]
 80222b6:	6878      	ldr	r0, [r7, #4]
 80222b8:	f7ff fbaa 	bl	8021a10 <icmp_input>
        break;
 80222bc:	e033      	b.n	8022326 <ip4_input+0x2ae>
 80222be:	bf00      	nop
 80222c0:	2007ecb8 	.word	0x2007ecb8
 80222c4:	2007ba88 	.word	0x2007ba88
 80222c8:	2007ecac 	.word	0x2007ecac
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80222cc:	4b21      	ldr	r3, [pc, #132]	; (8022354 <ip4_input+0x2dc>)
 80222ce:	695b      	ldr	r3, [r3, #20]
 80222d0:	6979      	ldr	r1, [r7, #20]
 80222d2:	4618      	mov	r0, r3
 80222d4:	f000 f934 	bl	8022540 <ip4_addr_isbroadcast_u32>
 80222d8:	4603      	mov	r3, r0
 80222da:	2b00      	cmp	r3, #0
 80222dc:	d10f      	bne.n	80222fe <ip4_input+0x286>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80222de:	4b1d      	ldr	r3, [pc, #116]	; (8022354 <ip4_input+0x2dc>)
 80222e0:	695b      	ldr	r3, [r3, #20]
 80222e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80222e6:	2be0      	cmp	r3, #224	; 0xe0
 80222e8:	d009      	beq.n	80222fe <ip4_input+0x286>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80222ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80222ee:	4619      	mov	r1, r3
 80222f0:	6878      	ldr	r0, [r7, #4]
 80222f2:	f7f6 ff82 	bl	80191fa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80222f6:	2102      	movs	r1, #2
 80222f8:	6878      	ldr	r0, [r7, #4]
 80222fa:	f7ff fd3b 	bl	8021d74 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 80222fe:	4b16      	ldr	r3, [pc, #88]	; (8022358 <ip4_input+0x2e0>)
 8022300:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8022304:	3301      	adds	r3, #1
 8022306:	b29a      	uxth	r2, r3
 8022308:	4b13      	ldr	r3, [pc, #76]	; (8022358 <ip4_input+0x2e0>)
 802230a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 802230e:	4b12      	ldr	r3, [pc, #72]	; (8022358 <ip4_input+0x2e0>)
 8022310:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8022314:	3301      	adds	r3, #1
 8022316:	b29a      	uxth	r2, r3
 8022318:	4b0f      	ldr	r3, [pc, #60]	; (8022358 <ip4_input+0x2e0>)
 802231a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 802231e:	6878      	ldr	r0, [r7, #4]
 8022320:	f7f6 ff7e 	bl	8019220 <pbuf_free>
        break;
 8022324:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8022326:	4b0b      	ldr	r3, [pc, #44]	; (8022354 <ip4_input+0x2dc>)
 8022328:	2200      	movs	r2, #0
 802232a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 802232c:	4b09      	ldr	r3, [pc, #36]	; (8022354 <ip4_input+0x2dc>)
 802232e:	2200      	movs	r2, #0
 8022330:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8022332:	4b08      	ldr	r3, [pc, #32]	; (8022354 <ip4_input+0x2dc>)
 8022334:	2200      	movs	r2, #0
 8022336:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8022338:	4b06      	ldr	r3, [pc, #24]	; (8022354 <ip4_input+0x2dc>)
 802233a:	2200      	movs	r2, #0
 802233c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 802233e:	4b05      	ldr	r3, [pc, #20]	; (8022354 <ip4_input+0x2dc>)
 8022340:	2200      	movs	r2, #0
 8022342:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8022344:	4b03      	ldr	r3, [pc, #12]	; (8022354 <ip4_input+0x2dc>)
 8022346:	2200      	movs	r2, #0
 8022348:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 802234a:	2300      	movs	r3, #0
}
 802234c:	4618      	mov	r0, r3
 802234e:	3718      	adds	r7, #24
 8022350:	46bd      	mov	sp, r7
 8022352:	bd80      	pop	{r7, pc}
 8022354:	2007ba88 	.word	0x2007ba88
 8022358:	2007ecb8 	.word	0x2007ecb8

0802235c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 802235c:	b580      	push	{r7, lr}
 802235e:	b08a      	sub	sp, #40	; 0x28
 8022360:	af04      	add	r7, sp, #16
 8022362:	60f8      	str	r0, [r7, #12]
 8022364:	60b9      	str	r1, [r7, #8]
 8022366:	607a      	str	r2, [r7, #4]
 8022368:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 802236a:	68bb      	ldr	r3, [r7, #8]
 802236c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 802236e:	687b      	ldr	r3, [r7, #4]
 8022370:	2b00      	cmp	r3, #0
 8022372:	d009      	beq.n	8022388 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8022374:	68bb      	ldr	r3, [r7, #8]
 8022376:	2b00      	cmp	r3, #0
 8022378:	d003      	beq.n	8022382 <ip4_output_if+0x26>
 802237a:	68bb      	ldr	r3, [r7, #8]
 802237c:	681b      	ldr	r3, [r3, #0]
 802237e:	2b00      	cmp	r3, #0
 8022380:	d102      	bne.n	8022388 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8022382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022384:	3304      	adds	r3, #4
 8022386:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8022388:	78fa      	ldrb	r2, [r7, #3]
 802238a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802238c:	9302      	str	r3, [sp, #8]
 802238e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8022392:	9301      	str	r3, [sp, #4]
 8022394:	f897 3020 	ldrb.w	r3, [r7, #32]
 8022398:	9300      	str	r3, [sp, #0]
 802239a:	4613      	mov	r3, r2
 802239c:	687a      	ldr	r2, [r7, #4]
 802239e:	6979      	ldr	r1, [r7, #20]
 80223a0:	68f8      	ldr	r0, [r7, #12]
 80223a2:	f000 f805 	bl	80223b0 <ip4_output_if_src>
 80223a6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80223a8:	4618      	mov	r0, r3
 80223aa:	3718      	adds	r7, #24
 80223ac:	46bd      	mov	sp, r7
 80223ae:	bd80      	pop	{r7, pc}

080223b0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80223b0:	b580      	push	{r7, lr}
 80223b2:	b088      	sub	sp, #32
 80223b4:	af00      	add	r7, sp, #0
 80223b6:	60f8      	str	r0, [r7, #12]
 80223b8:	60b9      	str	r1, [r7, #8]
 80223ba:	607a      	str	r2, [r7, #4]
 80223bc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80223be:	68fb      	ldr	r3, [r7, #12]
 80223c0:	7b9b      	ldrb	r3, [r3, #14]
 80223c2:	2b01      	cmp	r3, #1
 80223c4:	d006      	beq.n	80223d4 <ip4_output_if_src+0x24>
 80223c6:	4b57      	ldr	r3, [pc, #348]	; (8022524 <ip4_output_if_src+0x174>)
 80223c8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80223cc:	4956      	ldr	r1, [pc, #344]	; (8022528 <ip4_output_if_src+0x178>)
 80223ce:	4857      	ldr	r0, [pc, #348]	; (802252c <ip4_output_if_src+0x17c>)
 80223d0:	f001 fdfa 	bl	8023fc8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80223d4:	687b      	ldr	r3, [r7, #4]
 80223d6:	2b00      	cmp	r3, #0
 80223d8:	d068      	beq.n	80224ac <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 80223da:	2314      	movs	r3, #20
 80223dc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80223de:	2114      	movs	r1, #20
 80223e0:	68f8      	ldr	r0, [r7, #12]
 80223e2:	f7f6 fe87 	bl	80190f4 <pbuf_add_header>
 80223e6:	4603      	mov	r3, r0
 80223e8:	2b00      	cmp	r3, #0
 80223ea:	d00a      	beq.n	8022402 <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 80223ec:	4b50      	ldr	r3, [pc, #320]	; (8022530 <ip4_output_if_src+0x180>)
 80223ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80223f2:	3301      	adds	r3, #1
 80223f4:	b29a      	uxth	r2, r3
 80223f6:	4b4e      	ldr	r3, [pc, #312]	; (8022530 <ip4_output_if_src+0x180>)
 80223f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80223fc:	f06f 0301 	mvn.w	r3, #1
 8022400:	e08c      	b.n	802251c <ip4_output_if_src+0x16c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8022402:	68fb      	ldr	r3, [r7, #12]
 8022404:	685b      	ldr	r3, [r3, #4]
 8022406:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8022408:	68fb      	ldr	r3, [r7, #12]
 802240a:	895b      	ldrh	r3, [r3, #10]
 802240c:	2b13      	cmp	r3, #19
 802240e:	d806      	bhi.n	802241e <ip4_output_if_src+0x6e>
 8022410:	4b44      	ldr	r3, [pc, #272]	; (8022524 <ip4_output_if_src+0x174>)
 8022412:	f44f 7262 	mov.w	r2, #904	; 0x388
 8022416:	4947      	ldr	r1, [pc, #284]	; (8022534 <ip4_output_if_src+0x184>)
 8022418:	4844      	ldr	r0, [pc, #272]	; (802252c <ip4_output_if_src+0x17c>)
 802241a:	f001 fdd5 	bl	8023fc8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 802241e:	69fb      	ldr	r3, [r7, #28]
 8022420:	78fa      	ldrb	r2, [r7, #3]
 8022422:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8022424:	69fb      	ldr	r3, [r7, #28]
 8022426:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 802242a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 802242c:	687b      	ldr	r3, [r7, #4]
 802242e:	681a      	ldr	r2, [r3, #0]
 8022430:	69fb      	ldr	r3, [r7, #28]
 8022432:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8022434:	8b7b      	ldrh	r3, [r7, #26]
 8022436:	089b      	lsrs	r3, r3, #2
 8022438:	b29b      	uxth	r3, r3
 802243a:	b2db      	uxtb	r3, r3
 802243c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022440:	b2da      	uxtb	r2, r3
 8022442:	69fb      	ldr	r3, [r7, #28]
 8022444:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8022446:	69fb      	ldr	r3, [r7, #28]
 8022448:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 802244c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 802244e:	68fb      	ldr	r3, [r7, #12]
 8022450:	891b      	ldrh	r3, [r3, #8]
 8022452:	4618      	mov	r0, r3
 8022454:	f7f5 f846 	bl	80174e4 <lwip_htons>
 8022458:	4603      	mov	r3, r0
 802245a:	461a      	mov	r2, r3
 802245c:	69fb      	ldr	r3, [r7, #28]
 802245e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8022460:	69fb      	ldr	r3, [r7, #28]
 8022462:	2200      	movs	r2, #0
 8022464:	719a      	strb	r2, [r3, #6]
 8022466:	2200      	movs	r2, #0
 8022468:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802246a:	4b33      	ldr	r3, [pc, #204]	; (8022538 <ip4_output_if_src+0x188>)
 802246c:	881b      	ldrh	r3, [r3, #0]
 802246e:	4618      	mov	r0, r3
 8022470:	f7f5 f838 	bl	80174e4 <lwip_htons>
 8022474:	4603      	mov	r3, r0
 8022476:	461a      	mov	r2, r3
 8022478:	69fb      	ldr	r3, [r7, #28]
 802247a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 802247c:	4b2e      	ldr	r3, [pc, #184]	; (8022538 <ip4_output_if_src+0x188>)
 802247e:	881b      	ldrh	r3, [r3, #0]
 8022480:	3301      	adds	r3, #1
 8022482:	b29a      	uxth	r2, r3
 8022484:	4b2c      	ldr	r3, [pc, #176]	; (8022538 <ip4_output_if_src+0x188>)
 8022486:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8022488:	68bb      	ldr	r3, [r7, #8]
 802248a:	2b00      	cmp	r3, #0
 802248c:	d104      	bne.n	8022498 <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 802248e:	4b2b      	ldr	r3, [pc, #172]	; (802253c <ip4_output_if_src+0x18c>)
 8022490:	681a      	ldr	r2, [r3, #0]
 8022492:	69fb      	ldr	r3, [r7, #28]
 8022494:	60da      	str	r2, [r3, #12]
 8022496:	e003      	b.n	80224a0 <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8022498:	68bb      	ldr	r3, [r7, #8]
 802249a:	681a      	ldr	r2, [r3, #0]
 802249c:	69fb      	ldr	r3, [r7, #28]
 802249e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80224a0:	69fb      	ldr	r3, [r7, #28]
 80224a2:	2200      	movs	r2, #0
 80224a4:	729a      	strb	r2, [r3, #10]
 80224a6:	2200      	movs	r2, #0
 80224a8:	72da      	strb	r2, [r3, #11]
 80224aa:	e017      	b.n	80224dc <ip4_output_if_src+0x12c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80224ac:	68fb      	ldr	r3, [r7, #12]
 80224ae:	895b      	ldrh	r3, [r3, #10]
 80224b0:	2b13      	cmp	r3, #19
 80224b2:	d80a      	bhi.n	80224ca <ip4_output_if_src+0x11a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 80224b4:	4b1e      	ldr	r3, [pc, #120]	; (8022530 <ip4_output_if_src+0x180>)
 80224b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80224ba:	3301      	adds	r3, #1
 80224bc:	b29a      	uxth	r2, r3
 80224be:	4b1c      	ldr	r3, [pc, #112]	; (8022530 <ip4_output_if_src+0x180>)
 80224c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80224c4:	f06f 0301 	mvn.w	r3, #1
 80224c8:	e028      	b.n	802251c <ip4_output_if_src+0x16c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80224ca:	68fb      	ldr	r3, [r7, #12]
 80224cc:	685b      	ldr	r3, [r3, #4]
 80224ce:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80224d0:	69fb      	ldr	r3, [r7, #28]
 80224d2:	691b      	ldr	r3, [r3, #16]
 80224d4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80224d6:	f107 0314 	add.w	r3, r7, #20
 80224da:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 80224dc:	4b14      	ldr	r3, [pc, #80]	; (8022530 <ip4_output_if_src+0x180>)
 80224de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80224e2:	3301      	adds	r3, #1
 80224e4:	b29a      	uxth	r2, r3
 80224e6:	4b12      	ldr	r3, [pc, #72]	; (8022530 <ip4_output_if_src+0x180>)
 80224e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80224ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80224f0:	2b00      	cmp	r3, #0
 80224f2:	d00c      	beq.n	802250e <ip4_output_if_src+0x15e>
 80224f4:	68fb      	ldr	r3, [r7, #12]
 80224f6:	891a      	ldrh	r2, [r3, #8]
 80224f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80224fc:	429a      	cmp	r2, r3
 80224fe:	d906      	bls.n	802250e <ip4_output_if_src+0x15e>
    return ip4_frag(p, netif, dest);
 8022500:	687a      	ldr	r2, [r7, #4]
 8022502:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8022504:	68f8      	ldr	r0, [r7, #12]
 8022506:	f000 fd7b 	bl	8023000 <ip4_frag>
 802250a:	4603      	mov	r3, r0
 802250c:	e006      	b.n	802251c <ip4_output_if_src+0x16c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 802250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022510:	695b      	ldr	r3, [r3, #20]
 8022512:	687a      	ldr	r2, [r7, #4]
 8022514:	68f9      	ldr	r1, [r7, #12]
 8022516:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022518:	4798      	blx	r3
 802251a:	4603      	mov	r3, r0
}
 802251c:	4618      	mov	r0, r3
 802251e:	3720      	adds	r7, #32
 8022520:	46bd      	mov	sp, r7
 8022522:	bd80      	pop	{r7, pc}
 8022524:	0802942c 	.word	0x0802942c
 8022528:	08029460 	.word	0x08029460
 802252c:	0802946c 	.word	0x0802946c
 8022530:	2007ecb8 	.word	0x2007ecb8
 8022534:	08029494 	.word	0x08029494
 8022538:	2007ef0e 	.word	0x2007ef0e
 802253c:	08029b34 	.word	0x08029b34

08022540 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8022540:	b480      	push	{r7}
 8022542:	b085      	sub	sp, #20
 8022544:	af00      	add	r7, sp, #0
 8022546:	6078      	str	r0, [r7, #4]
 8022548:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 802254a:	687b      	ldr	r3, [r7, #4]
 802254c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 802254e:	687b      	ldr	r3, [r7, #4]
 8022550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022554:	d002      	beq.n	802255c <ip4_addr_isbroadcast_u32+0x1c>
 8022556:	687b      	ldr	r3, [r7, #4]
 8022558:	2b00      	cmp	r3, #0
 802255a:	d101      	bne.n	8022560 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 802255c:	2301      	movs	r3, #1
 802255e:	e02a      	b.n	80225b6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8022560:	683b      	ldr	r3, [r7, #0]
 8022562:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8022566:	f003 0302 	and.w	r3, r3, #2
 802256a:	2b00      	cmp	r3, #0
 802256c:	d101      	bne.n	8022572 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 802256e:	2300      	movs	r3, #0
 8022570:	e021      	b.n	80225b6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8022572:	683b      	ldr	r3, [r7, #0]
 8022574:	3304      	adds	r3, #4
 8022576:	681b      	ldr	r3, [r3, #0]
 8022578:	687a      	ldr	r2, [r7, #4]
 802257a:	429a      	cmp	r2, r3
 802257c:	d101      	bne.n	8022582 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 802257e:	2300      	movs	r3, #0
 8022580:	e019      	b.n	80225b6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8022582:	68fa      	ldr	r2, [r7, #12]
 8022584:	683b      	ldr	r3, [r7, #0]
 8022586:	3304      	adds	r3, #4
 8022588:	681b      	ldr	r3, [r3, #0]
 802258a:	405a      	eors	r2, r3
 802258c:	683b      	ldr	r3, [r7, #0]
 802258e:	3308      	adds	r3, #8
 8022590:	681b      	ldr	r3, [r3, #0]
 8022592:	4013      	ands	r3, r2
 8022594:	2b00      	cmp	r3, #0
 8022596:	d10d      	bne.n	80225b4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8022598:	683b      	ldr	r3, [r7, #0]
 802259a:	3308      	adds	r3, #8
 802259c:	681b      	ldr	r3, [r3, #0]
 802259e:	43da      	mvns	r2, r3
 80225a0:	687b      	ldr	r3, [r7, #4]
 80225a2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80225a4:	683b      	ldr	r3, [r7, #0]
 80225a6:	3308      	adds	r3, #8
 80225a8:	681b      	ldr	r3, [r3, #0]
 80225aa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80225ac:	429a      	cmp	r2, r3
 80225ae:	d101      	bne.n	80225b4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80225b0:	2301      	movs	r3, #1
 80225b2:	e000      	b.n	80225b6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80225b4:	2300      	movs	r3, #0
  }
}
 80225b6:	4618      	mov	r0, r3
 80225b8:	3714      	adds	r7, #20
 80225ba:	46bd      	mov	sp, r7
 80225bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225c0:	4770      	bx	lr
	...

080225c4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80225c4:	b580      	push	{r7, lr}
 80225c6:	b084      	sub	sp, #16
 80225c8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80225ca:	2300      	movs	r3, #0
 80225cc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80225ce:	4b12      	ldr	r3, [pc, #72]	; (8022618 <ip_reass_tmr+0x54>)
 80225d0:	681b      	ldr	r3, [r3, #0]
 80225d2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80225d4:	e018      	b.n	8022608 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80225d6:	68fb      	ldr	r3, [r7, #12]
 80225d8:	7fdb      	ldrb	r3, [r3, #31]
 80225da:	2b00      	cmp	r3, #0
 80225dc:	d00b      	beq.n	80225f6 <ip_reass_tmr+0x32>
      r->timer--;
 80225de:	68fb      	ldr	r3, [r7, #12]
 80225e0:	7fdb      	ldrb	r3, [r3, #31]
 80225e2:	3b01      	subs	r3, #1
 80225e4:	b2da      	uxtb	r2, r3
 80225e6:	68fb      	ldr	r3, [r7, #12]
 80225e8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80225ea:	68fb      	ldr	r3, [r7, #12]
 80225ec:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80225ee:	68fb      	ldr	r3, [r7, #12]
 80225f0:	681b      	ldr	r3, [r3, #0]
 80225f2:	60fb      	str	r3, [r7, #12]
 80225f4:	e008      	b.n	8022608 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80225f6:	68fb      	ldr	r3, [r7, #12]
 80225f8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80225fa:	68fb      	ldr	r3, [r7, #12]
 80225fc:	681b      	ldr	r3, [r3, #0]
 80225fe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8022600:	68b9      	ldr	r1, [r7, #8]
 8022602:	6878      	ldr	r0, [r7, #4]
 8022604:	f000 f80a 	bl	802261c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8022608:	68fb      	ldr	r3, [r7, #12]
 802260a:	2b00      	cmp	r3, #0
 802260c:	d1e3      	bne.n	80225d6 <ip_reass_tmr+0x12>
    }
  }
}
 802260e:	bf00      	nop
 8022610:	bf00      	nop
 8022612:	3710      	adds	r7, #16
 8022614:	46bd      	mov	sp, r7
 8022616:	bd80      	pop	{r7, pc}
 8022618:	2007ef10 	.word	0x2007ef10

0802261c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 802261c:	b580      	push	{r7, lr}
 802261e:	b088      	sub	sp, #32
 8022620:	af00      	add	r7, sp, #0
 8022622:	6078      	str	r0, [r7, #4]
 8022624:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8022626:	2300      	movs	r3, #0
 8022628:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 802262a:	683a      	ldr	r2, [r7, #0]
 802262c:	687b      	ldr	r3, [r7, #4]
 802262e:	429a      	cmp	r2, r3
 8022630:	d105      	bne.n	802263e <ip_reass_free_complete_datagram+0x22>
 8022632:	4b45      	ldr	r3, [pc, #276]	; (8022748 <ip_reass_free_complete_datagram+0x12c>)
 8022634:	22ab      	movs	r2, #171	; 0xab
 8022636:	4945      	ldr	r1, [pc, #276]	; (802274c <ip_reass_free_complete_datagram+0x130>)
 8022638:	4845      	ldr	r0, [pc, #276]	; (8022750 <ip_reass_free_complete_datagram+0x134>)
 802263a:	f001 fcc5 	bl	8023fc8 <iprintf>
  if (prev != NULL) {
 802263e:	683b      	ldr	r3, [r7, #0]
 8022640:	2b00      	cmp	r3, #0
 8022642:	d00a      	beq.n	802265a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8022644:	683b      	ldr	r3, [r7, #0]
 8022646:	681b      	ldr	r3, [r3, #0]
 8022648:	687a      	ldr	r2, [r7, #4]
 802264a:	429a      	cmp	r2, r3
 802264c:	d005      	beq.n	802265a <ip_reass_free_complete_datagram+0x3e>
 802264e:	4b3e      	ldr	r3, [pc, #248]	; (8022748 <ip_reass_free_complete_datagram+0x12c>)
 8022650:	22ad      	movs	r2, #173	; 0xad
 8022652:	4940      	ldr	r1, [pc, #256]	; (8022754 <ip_reass_free_complete_datagram+0x138>)
 8022654:	483e      	ldr	r0, [pc, #248]	; (8022750 <ip_reass_free_complete_datagram+0x134>)
 8022656:	f001 fcb7 	bl	8023fc8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 802265a:	687b      	ldr	r3, [r7, #4]
 802265c:	685b      	ldr	r3, [r3, #4]
 802265e:	685b      	ldr	r3, [r3, #4]
 8022660:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8022662:	697b      	ldr	r3, [r7, #20]
 8022664:	889b      	ldrh	r3, [r3, #4]
 8022666:	b29b      	uxth	r3, r3
 8022668:	2b00      	cmp	r3, #0
 802266a:	d12a      	bne.n	80226c2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 802266c:	687b      	ldr	r3, [r7, #4]
 802266e:	685b      	ldr	r3, [r3, #4]
 8022670:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8022672:	697b      	ldr	r3, [r7, #20]
 8022674:	681a      	ldr	r2, [r3, #0]
 8022676:	687b      	ldr	r3, [r7, #4]
 8022678:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 802267a:	69bb      	ldr	r3, [r7, #24]
 802267c:	6858      	ldr	r0, [r3, #4]
 802267e:	687b      	ldr	r3, [r7, #4]
 8022680:	3308      	adds	r3, #8
 8022682:	2214      	movs	r2, #20
 8022684:	4619      	mov	r1, r3
 8022686:	f001 ff0a 	bl	802449e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802268a:	2101      	movs	r1, #1
 802268c:	69b8      	ldr	r0, [r7, #24]
 802268e:	f7ff fb81 	bl	8021d94 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8022692:	69b8      	ldr	r0, [r7, #24]
 8022694:	f7f6 fe52 	bl	801933c <pbuf_clen>
 8022698:	4603      	mov	r3, r0
 802269a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 802269c:	8bfa      	ldrh	r2, [r7, #30]
 802269e:	8a7b      	ldrh	r3, [r7, #18]
 80226a0:	4413      	add	r3, r2
 80226a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80226a6:	db05      	blt.n	80226b4 <ip_reass_free_complete_datagram+0x98>
 80226a8:	4b27      	ldr	r3, [pc, #156]	; (8022748 <ip_reass_free_complete_datagram+0x12c>)
 80226aa:	22bc      	movs	r2, #188	; 0xbc
 80226ac:	492a      	ldr	r1, [pc, #168]	; (8022758 <ip_reass_free_complete_datagram+0x13c>)
 80226ae:	4828      	ldr	r0, [pc, #160]	; (8022750 <ip_reass_free_complete_datagram+0x134>)
 80226b0:	f001 fc8a 	bl	8023fc8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80226b4:	8bfa      	ldrh	r2, [r7, #30]
 80226b6:	8a7b      	ldrh	r3, [r7, #18]
 80226b8:	4413      	add	r3, r2
 80226ba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80226bc:	69b8      	ldr	r0, [r7, #24]
 80226be:	f7f6 fdaf 	bl	8019220 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80226c2:	687b      	ldr	r3, [r7, #4]
 80226c4:	685b      	ldr	r3, [r3, #4]
 80226c6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80226c8:	e01f      	b.n	802270a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80226ca:	69bb      	ldr	r3, [r7, #24]
 80226cc:	685b      	ldr	r3, [r3, #4]
 80226ce:	617b      	str	r3, [r7, #20]
    pcur = p;
 80226d0:	69bb      	ldr	r3, [r7, #24]
 80226d2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80226d4:	697b      	ldr	r3, [r7, #20]
 80226d6:	681b      	ldr	r3, [r3, #0]
 80226d8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80226da:	68f8      	ldr	r0, [r7, #12]
 80226dc:	f7f6 fe2e 	bl	801933c <pbuf_clen>
 80226e0:	4603      	mov	r3, r0
 80226e2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80226e4:	8bfa      	ldrh	r2, [r7, #30]
 80226e6:	8a7b      	ldrh	r3, [r7, #18]
 80226e8:	4413      	add	r3, r2
 80226ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80226ee:	db05      	blt.n	80226fc <ip_reass_free_complete_datagram+0xe0>
 80226f0:	4b15      	ldr	r3, [pc, #84]	; (8022748 <ip_reass_free_complete_datagram+0x12c>)
 80226f2:	22cc      	movs	r2, #204	; 0xcc
 80226f4:	4918      	ldr	r1, [pc, #96]	; (8022758 <ip_reass_free_complete_datagram+0x13c>)
 80226f6:	4816      	ldr	r0, [pc, #88]	; (8022750 <ip_reass_free_complete_datagram+0x134>)
 80226f8:	f001 fc66 	bl	8023fc8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80226fc:	8bfa      	ldrh	r2, [r7, #30]
 80226fe:	8a7b      	ldrh	r3, [r7, #18]
 8022700:	4413      	add	r3, r2
 8022702:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8022704:	68f8      	ldr	r0, [r7, #12]
 8022706:	f7f6 fd8b 	bl	8019220 <pbuf_free>
  while (p != NULL) {
 802270a:	69bb      	ldr	r3, [r7, #24]
 802270c:	2b00      	cmp	r3, #0
 802270e:	d1dc      	bne.n	80226ca <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8022710:	6839      	ldr	r1, [r7, #0]
 8022712:	6878      	ldr	r0, [r7, #4]
 8022714:	f000 f8ca 	bl	80228ac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8022718:	4b10      	ldr	r3, [pc, #64]	; (802275c <ip_reass_free_complete_datagram+0x140>)
 802271a:	881b      	ldrh	r3, [r3, #0]
 802271c:	8bfa      	ldrh	r2, [r7, #30]
 802271e:	429a      	cmp	r2, r3
 8022720:	d905      	bls.n	802272e <ip_reass_free_complete_datagram+0x112>
 8022722:	4b09      	ldr	r3, [pc, #36]	; (8022748 <ip_reass_free_complete_datagram+0x12c>)
 8022724:	22d2      	movs	r2, #210	; 0xd2
 8022726:	490e      	ldr	r1, [pc, #56]	; (8022760 <ip_reass_free_complete_datagram+0x144>)
 8022728:	4809      	ldr	r0, [pc, #36]	; (8022750 <ip_reass_free_complete_datagram+0x134>)
 802272a:	f001 fc4d 	bl	8023fc8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 802272e:	4b0b      	ldr	r3, [pc, #44]	; (802275c <ip_reass_free_complete_datagram+0x140>)
 8022730:	881a      	ldrh	r2, [r3, #0]
 8022732:	8bfb      	ldrh	r3, [r7, #30]
 8022734:	1ad3      	subs	r3, r2, r3
 8022736:	b29a      	uxth	r2, r3
 8022738:	4b08      	ldr	r3, [pc, #32]	; (802275c <ip_reass_free_complete_datagram+0x140>)
 802273a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 802273c:	8bfb      	ldrh	r3, [r7, #30]
}
 802273e:	4618      	mov	r0, r3
 8022740:	3720      	adds	r7, #32
 8022742:	46bd      	mov	sp, r7
 8022744:	bd80      	pop	{r7, pc}
 8022746:	bf00      	nop
 8022748:	080294c4 	.word	0x080294c4
 802274c:	08029500 	.word	0x08029500
 8022750:	0802950c 	.word	0x0802950c
 8022754:	08029534 	.word	0x08029534
 8022758:	08029548 	.word	0x08029548
 802275c:	2007ef14 	.word	0x2007ef14
 8022760:	08029568 	.word	0x08029568

08022764 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8022764:	b580      	push	{r7, lr}
 8022766:	b08a      	sub	sp, #40	; 0x28
 8022768:	af00      	add	r7, sp, #0
 802276a:	6078      	str	r0, [r7, #4]
 802276c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 802276e:	2300      	movs	r3, #0
 8022770:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8022772:	2300      	movs	r3, #0
 8022774:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8022776:	2300      	movs	r3, #0
 8022778:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 802277a:	2300      	movs	r3, #0
 802277c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 802277e:	2300      	movs	r3, #0
 8022780:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8022782:	4b28      	ldr	r3, [pc, #160]	; (8022824 <ip_reass_remove_oldest_datagram+0xc0>)
 8022784:	681b      	ldr	r3, [r3, #0]
 8022786:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8022788:	e030      	b.n	80227ec <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802278c:	695a      	ldr	r2, [r3, #20]
 802278e:	687b      	ldr	r3, [r7, #4]
 8022790:	68db      	ldr	r3, [r3, #12]
 8022792:	429a      	cmp	r2, r3
 8022794:	d10c      	bne.n	80227b0 <ip_reass_remove_oldest_datagram+0x4c>
 8022796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022798:	699a      	ldr	r2, [r3, #24]
 802279a:	687b      	ldr	r3, [r7, #4]
 802279c:	691b      	ldr	r3, [r3, #16]
 802279e:	429a      	cmp	r2, r3
 80227a0:	d106      	bne.n	80227b0 <ip_reass_remove_oldest_datagram+0x4c>
 80227a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227a4:	899a      	ldrh	r2, [r3, #12]
 80227a6:	687b      	ldr	r3, [r7, #4]
 80227a8:	889b      	ldrh	r3, [r3, #4]
 80227aa:	b29b      	uxth	r3, r3
 80227ac:	429a      	cmp	r2, r3
 80227ae:	d014      	beq.n	80227da <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80227b0:	693b      	ldr	r3, [r7, #16]
 80227b2:	3301      	adds	r3, #1
 80227b4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80227b6:	6a3b      	ldr	r3, [r7, #32]
 80227b8:	2b00      	cmp	r3, #0
 80227ba:	d104      	bne.n	80227c6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80227bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227be:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80227c0:	69fb      	ldr	r3, [r7, #28]
 80227c2:	61bb      	str	r3, [r7, #24]
 80227c4:	e009      	b.n	80227da <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80227c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227c8:	7fda      	ldrb	r2, [r3, #31]
 80227ca:	6a3b      	ldr	r3, [r7, #32]
 80227cc:	7fdb      	ldrb	r3, [r3, #31]
 80227ce:	429a      	cmp	r2, r3
 80227d0:	d803      	bhi.n	80227da <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80227d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227d4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80227d6:	69fb      	ldr	r3, [r7, #28]
 80227d8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80227da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227dc:	681b      	ldr	r3, [r3, #0]
 80227de:	2b00      	cmp	r3, #0
 80227e0:	d001      	beq.n	80227e6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80227e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227e4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80227e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227e8:	681b      	ldr	r3, [r3, #0]
 80227ea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80227ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80227ee:	2b00      	cmp	r3, #0
 80227f0:	d1cb      	bne.n	802278a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80227f2:	6a3b      	ldr	r3, [r7, #32]
 80227f4:	2b00      	cmp	r3, #0
 80227f6:	d008      	beq.n	802280a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80227f8:	69b9      	ldr	r1, [r7, #24]
 80227fa:	6a38      	ldr	r0, [r7, #32]
 80227fc:	f7ff ff0e 	bl	802261c <ip_reass_free_complete_datagram>
 8022800:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8022802:	697a      	ldr	r2, [r7, #20]
 8022804:	68fb      	ldr	r3, [r7, #12]
 8022806:	4413      	add	r3, r2
 8022808:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 802280a:	697a      	ldr	r2, [r7, #20]
 802280c:	683b      	ldr	r3, [r7, #0]
 802280e:	429a      	cmp	r2, r3
 8022810:	da02      	bge.n	8022818 <ip_reass_remove_oldest_datagram+0xb4>
 8022812:	693b      	ldr	r3, [r7, #16]
 8022814:	2b01      	cmp	r3, #1
 8022816:	dcac      	bgt.n	8022772 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8022818:	697b      	ldr	r3, [r7, #20]
}
 802281a:	4618      	mov	r0, r3
 802281c:	3728      	adds	r7, #40	; 0x28
 802281e:	46bd      	mov	sp, r7
 8022820:	bd80      	pop	{r7, pc}
 8022822:	bf00      	nop
 8022824:	2007ef10 	.word	0x2007ef10

08022828 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8022828:	b580      	push	{r7, lr}
 802282a:	b084      	sub	sp, #16
 802282c:	af00      	add	r7, sp, #0
 802282e:	6078      	str	r0, [r7, #4]
 8022830:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8022832:	2004      	movs	r0, #4
 8022834:	f7f5 fcde 	bl	80181f4 <memp_malloc>
 8022838:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 802283a:	68fb      	ldr	r3, [r7, #12]
 802283c:	2b00      	cmp	r3, #0
 802283e:	d116      	bne.n	802286e <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8022840:	6839      	ldr	r1, [r7, #0]
 8022842:	6878      	ldr	r0, [r7, #4]
 8022844:	f7ff ff8e 	bl	8022764 <ip_reass_remove_oldest_datagram>
 8022848:	4602      	mov	r2, r0
 802284a:	683b      	ldr	r3, [r7, #0]
 802284c:	4293      	cmp	r3, r2
 802284e:	dc03      	bgt.n	8022858 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8022850:	2004      	movs	r0, #4
 8022852:	f7f5 fccf 	bl	80181f4 <memp_malloc>
 8022856:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8022858:	68fb      	ldr	r3, [r7, #12]
 802285a:	2b00      	cmp	r3, #0
 802285c:	d107      	bne.n	802286e <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 802285e:	4b11      	ldr	r3, [pc, #68]	; (80228a4 <ip_reass_enqueue_new_datagram+0x7c>)
 8022860:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8022862:	3301      	adds	r3, #1
 8022864:	b29a      	uxth	r2, r3
 8022866:	4b0f      	ldr	r3, [pc, #60]	; (80228a4 <ip_reass_enqueue_new_datagram+0x7c>)
 8022868:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 802286a:	2300      	movs	r3, #0
 802286c:	e016      	b.n	802289c <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 802286e:	2220      	movs	r2, #32
 8022870:	2100      	movs	r1, #0
 8022872:	68f8      	ldr	r0, [r7, #12]
 8022874:	f001 fd7a 	bl	802436c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8022878:	68fb      	ldr	r3, [r7, #12]
 802287a:	220f      	movs	r2, #15
 802287c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 802287e:	4b0a      	ldr	r3, [pc, #40]	; (80228a8 <ip_reass_enqueue_new_datagram+0x80>)
 8022880:	681a      	ldr	r2, [r3, #0]
 8022882:	68fb      	ldr	r3, [r7, #12]
 8022884:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8022886:	4a08      	ldr	r2, [pc, #32]	; (80228a8 <ip_reass_enqueue_new_datagram+0x80>)
 8022888:	68fb      	ldr	r3, [r7, #12]
 802288a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 802288c:	68fb      	ldr	r3, [r7, #12]
 802288e:	3308      	adds	r3, #8
 8022890:	2214      	movs	r2, #20
 8022892:	6879      	ldr	r1, [r7, #4]
 8022894:	4618      	mov	r0, r3
 8022896:	f001 fe02 	bl	802449e <memcpy>
  return ipr;
 802289a:	68fb      	ldr	r3, [r7, #12]
}
 802289c:	4618      	mov	r0, r3
 802289e:	3710      	adds	r7, #16
 80228a0:	46bd      	mov	sp, r7
 80228a2:	bd80      	pop	{r7, pc}
 80228a4:	2007ecb8 	.word	0x2007ecb8
 80228a8:	2007ef10 	.word	0x2007ef10

080228ac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80228ac:	b580      	push	{r7, lr}
 80228ae:	b082      	sub	sp, #8
 80228b0:	af00      	add	r7, sp, #0
 80228b2:	6078      	str	r0, [r7, #4]
 80228b4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80228b6:	4b10      	ldr	r3, [pc, #64]	; (80228f8 <ip_reass_dequeue_datagram+0x4c>)
 80228b8:	681b      	ldr	r3, [r3, #0]
 80228ba:	687a      	ldr	r2, [r7, #4]
 80228bc:	429a      	cmp	r2, r3
 80228be:	d104      	bne.n	80228ca <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80228c0:	687b      	ldr	r3, [r7, #4]
 80228c2:	681b      	ldr	r3, [r3, #0]
 80228c4:	4a0c      	ldr	r2, [pc, #48]	; (80228f8 <ip_reass_dequeue_datagram+0x4c>)
 80228c6:	6013      	str	r3, [r2, #0]
 80228c8:	e00d      	b.n	80228e6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80228ca:	683b      	ldr	r3, [r7, #0]
 80228cc:	2b00      	cmp	r3, #0
 80228ce:	d106      	bne.n	80228de <ip_reass_dequeue_datagram+0x32>
 80228d0:	4b0a      	ldr	r3, [pc, #40]	; (80228fc <ip_reass_dequeue_datagram+0x50>)
 80228d2:	f240 1245 	movw	r2, #325	; 0x145
 80228d6:	490a      	ldr	r1, [pc, #40]	; (8022900 <ip_reass_dequeue_datagram+0x54>)
 80228d8:	480a      	ldr	r0, [pc, #40]	; (8022904 <ip_reass_dequeue_datagram+0x58>)
 80228da:	f001 fb75 	bl	8023fc8 <iprintf>
    prev->next = ipr->next;
 80228de:	687b      	ldr	r3, [r7, #4]
 80228e0:	681a      	ldr	r2, [r3, #0]
 80228e2:	683b      	ldr	r3, [r7, #0]
 80228e4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80228e6:	6879      	ldr	r1, [r7, #4]
 80228e8:	2004      	movs	r0, #4
 80228ea:	f7f5 fcff 	bl	80182ec <memp_free>
}
 80228ee:	bf00      	nop
 80228f0:	3708      	adds	r7, #8
 80228f2:	46bd      	mov	sp, r7
 80228f4:	bd80      	pop	{r7, pc}
 80228f6:	bf00      	nop
 80228f8:	2007ef10 	.word	0x2007ef10
 80228fc:	080294c4 	.word	0x080294c4
 8022900:	0802958c 	.word	0x0802958c
 8022904:	0802950c 	.word	0x0802950c

08022908 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8022908:	b580      	push	{r7, lr}
 802290a:	b08c      	sub	sp, #48	; 0x30
 802290c:	af00      	add	r7, sp, #0
 802290e:	60f8      	str	r0, [r7, #12]
 8022910:	60b9      	str	r1, [r7, #8]
 8022912:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8022914:	2300      	movs	r3, #0
 8022916:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8022918:	2301      	movs	r3, #1
 802291a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 802291c:	68bb      	ldr	r3, [r7, #8]
 802291e:	685b      	ldr	r3, [r3, #4]
 8022920:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8022922:	69fb      	ldr	r3, [r7, #28]
 8022924:	885b      	ldrh	r3, [r3, #2]
 8022926:	b29b      	uxth	r3, r3
 8022928:	4618      	mov	r0, r3
 802292a:	f7f4 fddb 	bl	80174e4 <lwip_htons>
 802292e:	4603      	mov	r3, r0
 8022930:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8022932:	69fb      	ldr	r3, [r7, #28]
 8022934:	781b      	ldrb	r3, [r3, #0]
 8022936:	f003 030f 	and.w	r3, r3, #15
 802293a:	b2db      	uxtb	r3, r3
 802293c:	009b      	lsls	r3, r3, #2
 802293e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8022940:	7e7b      	ldrb	r3, [r7, #25]
 8022942:	b29b      	uxth	r3, r3
 8022944:	8b7a      	ldrh	r2, [r7, #26]
 8022946:	429a      	cmp	r2, r3
 8022948:	d202      	bcs.n	8022950 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 802294a:	f04f 33ff 	mov.w	r3, #4294967295
 802294e:	e135      	b.n	8022bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8022950:	7e7b      	ldrb	r3, [r7, #25]
 8022952:	b29b      	uxth	r3, r3
 8022954:	8b7a      	ldrh	r2, [r7, #26]
 8022956:	1ad3      	subs	r3, r2, r3
 8022958:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802295a:	69fb      	ldr	r3, [r7, #28]
 802295c:	88db      	ldrh	r3, [r3, #6]
 802295e:	b29b      	uxth	r3, r3
 8022960:	4618      	mov	r0, r3
 8022962:	f7f4 fdbf 	bl	80174e4 <lwip_htons>
 8022966:	4603      	mov	r3, r0
 8022968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802296c:	b29b      	uxth	r3, r3
 802296e:	00db      	lsls	r3, r3, #3
 8022970:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8022972:	68bb      	ldr	r3, [r7, #8]
 8022974:	685b      	ldr	r3, [r3, #4]
 8022976:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8022978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802297a:	2200      	movs	r2, #0
 802297c:	701a      	strb	r2, [r3, #0]
 802297e:	2200      	movs	r2, #0
 8022980:	705a      	strb	r2, [r3, #1]
 8022982:	2200      	movs	r2, #0
 8022984:	709a      	strb	r2, [r3, #2]
 8022986:	2200      	movs	r2, #0
 8022988:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 802298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802298c:	8afa      	ldrh	r2, [r7, #22]
 802298e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8022990:	8afa      	ldrh	r2, [r7, #22]
 8022992:	8b7b      	ldrh	r3, [r7, #26]
 8022994:	4413      	add	r3, r2
 8022996:	b29a      	uxth	r2, r3
 8022998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802299a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 802299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802299e:	88db      	ldrh	r3, [r3, #6]
 80229a0:	b29b      	uxth	r3, r3
 80229a2:	8afa      	ldrh	r2, [r7, #22]
 80229a4:	429a      	cmp	r2, r3
 80229a6:	d902      	bls.n	80229ae <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80229a8:	f04f 33ff 	mov.w	r3, #4294967295
 80229ac:	e106      	b.n	8022bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80229ae:	68fb      	ldr	r3, [r7, #12]
 80229b0:	685b      	ldr	r3, [r3, #4]
 80229b2:	627b      	str	r3, [r7, #36]	; 0x24
 80229b4:	e068      	b.n	8022a88 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80229b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80229b8:	685b      	ldr	r3, [r3, #4]
 80229ba:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80229bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80229be:	889b      	ldrh	r3, [r3, #4]
 80229c0:	b29a      	uxth	r2, r3
 80229c2:	693b      	ldr	r3, [r7, #16]
 80229c4:	889b      	ldrh	r3, [r3, #4]
 80229c6:	b29b      	uxth	r3, r3
 80229c8:	429a      	cmp	r2, r3
 80229ca:	d235      	bcs.n	8022a38 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80229cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80229ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80229d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80229d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229d4:	2b00      	cmp	r3, #0
 80229d6:	d020      	beq.n	8022a1a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80229d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80229da:	889b      	ldrh	r3, [r3, #4]
 80229dc:	b29a      	uxth	r2, r3
 80229de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229e0:	88db      	ldrh	r3, [r3, #6]
 80229e2:	b29b      	uxth	r3, r3
 80229e4:	429a      	cmp	r2, r3
 80229e6:	d307      	bcc.n	80229f8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80229e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80229ea:	88db      	ldrh	r3, [r3, #6]
 80229ec:	b29a      	uxth	r2, r3
 80229ee:	693b      	ldr	r3, [r7, #16]
 80229f0:	889b      	ldrh	r3, [r3, #4]
 80229f2:	b29b      	uxth	r3, r3
 80229f4:	429a      	cmp	r2, r3
 80229f6:	d902      	bls.n	80229fe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80229f8:	f04f 33ff 	mov.w	r3, #4294967295
 80229fc:	e0de      	b.n	8022bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80229fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a00:	68ba      	ldr	r2, [r7, #8]
 8022a02:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8022a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a06:	88db      	ldrh	r3, [r3, #6]
 8022a08:	b29a      	uxth	r2, r3
 8022a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022a0c:	889b      	ldrh	r3, [r3, #4]
 8022a0e:	b29b      	uxth	r3, r3
 8022a10:	429a      	cmp	r2, r3
 8022a12:	d03d      	beq.n	8022a90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8022a14:	2300      	movs	r3, #0
 8022a16:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8022a18:	e03a      	b.n	8022a90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8022a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022a1c:	88db      	ldrh	r3, [r3, #6]
 8022a1e:	b29a      	uxth	r2, r3
 8022a20:	693b      	ldr	r3, [r7, #16]
 8022a22:	889b      	ldrh	r3, [r3, #4]
 8022a24:	b29b      	uxth	r3, r3
 8022a26:	429a      	cmp	r2, r3
 8022a28:	d902      	bls.n	8022a30 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8022a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8022a2e:	e0c5      	b.n	8022bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8022a30:	68fb      	ldr	r3, [r7, #12]
 8022a32:	68ba      	ldr	r2, [r7, #8]
 8022a34:	605a      	str	r2, [r3, #4]
      break;
 8022a36:	e02b      	b.n	8022a90 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8022a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022a3a:	889b      	ldrh	r3, [r3, #4]
 8022a3c:	b29a      	uxth	r2, r3
 8022a3e:	693b      	ldr	r3, [r7, #16]
 8022a40:	889b      	ldrh	r3, [r3, #4]
 8022a42:	b29b      	uxth	r3, r3
 8022a44:	429a      	cmp	r2, r3
 8022a46:	d102      	bne.n	8022a4e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8022a48:	f04f 33ff 	mov.w	r3, #4294967295
 8022a4c:	e0b6      	b.n	8022bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8022a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022a50:	889b      	ldrh	r3, [r3, #4]
 8022a52:	b29a      	uxth	r2, r3
 8022a54:	693b      	ldr	r3, [r7, #16]
 8022a56:	88db      	ldrh	r3, [r3, #6]
 8022a58:	b29b      	uxth	r3, r3
 8022a5a:	429a      	cmp	r2, r3
 8022a5c:	d202      	bcs.n	8022a64 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8022a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8022a62:	e0ab      	b.n	8022bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8022a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a66:	2b00      	cmp	r3, #0
 8022a68:	d009      	beq.n	8022a7e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8022a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a6c:	88db      	ldrh	r3, [r3, #6]
 8022a6e:	b29a      	uxth	r2, r3
 8022a70:	693b      	ldr	r3, [r7, #16]
 8022a72:	889b      	ldrh	r3, [r3, #4]
 8022a74:	b29b      	uxth	r3, r3
 8022a76:	429a      	cmp	r2, r3
 8022a78:	d001      	beq.n	8022a7e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8022a7a:	2300      	movs	r3, #0
 8022a7c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8022a7e:	693b      	ldr	r3, [r7, #16]
 8022a80:	681b      	ldr	r3, [r3, #0]
 8022a82:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8022a84:	693b      	ldr	r3, [r7, #16]
 8022a86:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8022a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a8a:	2b00      	cmp	r3, #0
 8022a8c:	d193      	bne.n	80229b6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8022a8e:	e000      	b.n	8022a92 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8022a90:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8022a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a94:	2b00      	cmp	r3, #0
 8022a96:	d12d      	bne.n	8022af4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8022a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a9a:	2b00      	cmp	r3, #0
 8022a9c:	d01c      	beq.n	8022ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8022a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022aa0:	88db      	ldrh	r3, [r3, #6]
 8022aa2:	b29a      	uxth	r2, r3
 8022aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022aa6:	889b      	ldrh	r3, [r3, #4]
 8022aa8:	b29b      	uxth	r3, r3
 8022aaa:	429a      	cmp	r2, r3
 8022aac:	d906      	bls.n	8022abc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8022aae:	4b45      	ldr	r3, [pc, #276]	; (8022bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8022ab0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8022ab4:	4944      	ldr	r1, [pc, #272]	; (8022bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8022ab6:	4845      	ldr	r0, [pc, #276]	; (8022bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8022ab8:	f001 fa86 	bl	8023fc8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8022abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022abe:	68ba      	ldr	r2, [r7, #8]
 8022ac0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8022ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022ac4:	88db      	ldrh	r3, [r3, #6]
 8022ac6:	b29a      	uxth	r2, r3
 8022ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022aca:	889b      	ldrh	r3, [r3, #4]
 8022acc:	b29b      	uxth	r3, r3
 8022ace:	429a      	cmp	r2, r3
 8022ad0:	d010      	beq.n	8022af4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8022ad2:	2300      	movs	r3, #0
 8022ad4:	623b      	str	r3, [r7, #32]
 8022ad6:	e00d      	b.n	8022af4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8022ad8:	68fb      	ldr	r3, [r7, #12]
 8022ada:	685b      	ldr	r3, [r3, #4]
 8022adc:	2b00      	cmp	r3, #0
 8022ade:	d006      	beq.n	8022aee <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8022ae0:	4b38      	ldr	r3, [pc, #224]	; (8022bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8022ae2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8022ae6:	493a      	ldr	r1, [pc, #232]	; (8022bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8022ae8:	4838      	ldr	r0, [pc, #224]	; (8022bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8022aea:	f001 fa6d 	bl	8023fc8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8022aee:	68fb      	ldr	r3, [r7, #12]
 8022af0:	68ba      	ldr	r2, [r7, #8]
 8022af2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8022af4:	687b      	ldr	r3, [r7, #4]
 8022af6:	2b00      	cmp	r3, #0
 8022af8:	d105      	bne.n	8022b06 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8022afa:	68fb      	ldr	r3, [r7, #12]
 8022afc:	7f9b      	ldrb	r3, [r3, #30]
 8022afe:	f003 0301 	and.w	r3, r3, #1
 8022b02:	2b00      	cmp	r3, #0
 8022b04:	d059      	beq.n	8022bba <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8022b06:	6a3b      	ldr	r3, [r7, #32]
 8022b08:	2b00      	cmp	r3, #0
 8022b0a:	d04f      	beq.n	8022bac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8022b0c:	68fb      	ldr	r3, [r7, #12]
 8022b0e:	685b      	ldr	r3, [r3, #4]
 8022b10:	2b00      	cmp	r3, #0
 8022b12:	d006      	beq.n	8022b22 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8022b14:	68fb      	ldr	r3, [r7, #12]
 8022b16:	685b      	ldr	r3, [r3, #4]
 8022b18:	685b      	ldr	r3, [r3, #4]
 8022b1a:	889b      	ldrh	r3, [r3, #4]
 8022b1c:	b29b      	uxth	r3, r3
 8022b1e:	2b00      	cmp	r3, #0
 8022b20:	d002      	beq.n	8022b28 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8022b22:	2300      	movs	r3, #0
 8022b24:	623b      	str	r3, [r7, #32]
 8022b26:	e041      	b.n	8022bac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8022b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b2a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8022b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b2e:	681b      	ldr	r3, [r3, #0]
 8022b30:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8022b32:	e012      	b.n	8022b5a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8022b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b36:	685b      	ldr	r3, [r3, #4]
 8022b38:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8022b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022b3c:	88db      	ldrh	r3, [r3, #6]
 8022b3e:	b29a      	uxth	r2, r3
 8022b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b42:	889b      	ldrh	r3, [r3, #4]
 8022b44:	b29b      	uxth	r3, r3
 8022b46:	429a      	cmp	r2, r3
 8022b48:	d002      	beq.n	8022b50 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8022b4a:	2300      	movs	r3, #0
 8022b4c:	623b      	str	r3, [r7, #32]
            break;
 8022b4e:	e007      	b.n	8022b60 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8022b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b52:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8022b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b56:	681b      	ldr	r3, [r3, #0]
 8022b58:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8022b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022b5c:	2b00      	cmp	r3, #0
 8022b5e:	d1e9      	bne.n	8022b34 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8022b60:	6a3b      	ldr	r3, [r7, #32]
 8022b62:	2b00      	cmp	r3, #0
 8022b64:	d022      	beq.n	8022bac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8022b66:	68fb      	ldr	r3, [r7, #12]
 8022b68:	685b      	ldr	r3, [r3, #4]
 8022b6a:	2b00      	cmp	r3, #0
 8022b6c:	d106      	bne.n	8022b7c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8022b6e:	4b15      	ldr	r3, [pc, #84]	; (8022bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8022b70:	f240 12df 	movw	r2, #479	; 0x1df
 8022b74:	4917      	ldr	r1, [pc, #92]	; (8022bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8022b76:	4815      	ldr	r0, [pc, #84]	; (8022bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8022b78:	f001 fa26 	bl	8023fc8 <iprintf>
          LWIP_ASSERT("sanity check",
 8022b7c:	68fb      	ldr	r3, [r7, #12]
 8022b7e:	685b      	ldr	r3, [r3, #4]
 8022b80:	685b      	ldr	r3, [r3, #4]
 8022b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022b84:	429a      	cmp	r2, r3
 8022b86:	d106      	bne.n	8022b96 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8022b88:	4b0e      	ldr	r3, [pc, #56]	; (8022bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8022b8a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8022b8e:	4911      	ldr	r1, [pc, #68]	; (8022bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8022b90:	480e      	ldr	r0, [pc, #56]	; (8022bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8022b92:	f001 fa19 	bl	8023fc8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8022b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022b98:	681b      	ldr	r3, [r3, #0]
 8022b9a:	2b00      	cmp	r3, #0
 8022b9c:	d006      	beq.n	8022bac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8022b9e:	4b09      	ldr	r3, [pc, #36]	; (8022bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8022ba0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8022ba4:	490c      	ldr	r1, [pc, #48]	; (8022bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8022ba6:	4809      	ldr	r0, [pc, #36]	; (8022bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8022ba8:	f001 fa0e 	bl	8023fc8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8022bac:	6a3b      	ldr	r3, [r7, #32]
 8022bae:	2b00      	cmp	r3, #0
 8022bb0:	bf14      	ite	ne
 8022bb2:	2301      	movne	r3, #1
 8022bb4:	2300      	moveq	r3, #0
 8022bb6:	b2db      	uxtb	r3, r3
 8022bb8:	e000      	b.n	8022bbc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8022bba:	2300      	movs	r3, #0
}
 8022bbc:	4618      	mov	r0, r3
 8022bbe:	3730      	adds	r7, #48	; 0x30
 8022bc0:	46bd      	mov	sp, r7
 8022bc2:	bd80      	pop	{r7, pc}
 8022bc4:	080294c4 	.word	0x080294c4
 8022bc8:	080295a8 	.word	0x080295a8
 8022bcc:	0802950c 	.word	0x0802950c
 8022bd0:	080295c8 	.word	0x080295c8
 8022bd4:	08029600 	.word	0x08029600
 8022bd8:	08029610 	.word	0x08029610

08022bdc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8022bdc:	b580      	push	{r7, lr}
 8022bde:	b08e      	sub	sp, #56	; 0x38
 8022be0:	af00      	add	r7, sp, #0
 8022be2:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 8022be4:	4b9d      	ldr	r3, [pc, #628]	; (8022e5c <ip4_reass+0x280>)
 8022be6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8022be8:	3301      	adds	r3, #1
 8022bea:	b29a      	uxth	r2, r3
 8022bec:	4b9b      	ldr	r3, [pc, #620]	; (8022e5c <ip4_reass+0x280>)
 8022bee:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8022bf0:	687b      	ldr	r3, [r7, #4]
 8022bf2:	685b      	ldr	r3, [r3, #4]
 8022bf4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8022bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022bf8:	781b      	ldrb	r3, [r3, #0]
 8022bfa:	f003 030f 	and.w	r3, r3, #15
 8022bfe:	b2db      	uxtb	r3, r3
 8022c00:	009b      	lsls	r3, r3, #2
 8022c02:	b2db      	uxtb	r3, r3
 8022c04:	2b14      	cmp	r3, #20
 8022c06:	d008      	beq.n	8022c1a <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 8022c08:	4b94      	ldr	r3, [pc, #592]	; (8022e5c <ip4_reass+0x280>)
 8022c0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8022c0e:	3301      	adds	r3, #1
 8022c10:	b29a      	uxth	r2, r3
 8022c12:	4b92      	ldr	r3, [pc, #584]	; (8022e5c <ip4_reass+0x280>)
 8022c14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 8022c18:	e17c      	b.n	8022f14 <ip4_reass+0x338>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8022c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022c1c:	88db      	ldrh	r3, [r3, #6]
 8022c1e:	b29b      	uxth	r3, r3
 8022c20:	4618      	mov	r0, r3
 8022c22:	f7f4 fc5f 	bl	80174e4 <lwip_htons>
 8022c26:	4603      	mov	r3, r0
 8022c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022c2c:	b29b      	uxth	r3, r3
 8022c2e:	00db      	lsls	r3, r3, #3
 8022c30:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8022c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022c34:	885b      	ldrh	r3, [r3, #2]
 8022c36:	b29b      	uxth	r3, r3
 8022c38:	4618      	mov	r0, r3
 8022c3a:	f7f4 fc53 	bl	80174e4 <lwip_htons>
 8022c3e:	4603      	mov	r3, r0
 8022c40:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8022c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022c44:	781b      	ldrb	r3, [r3, #0]
 8022c46:	f003 030f 	and.w	r3, r3, #15
 8022c4a:	b2db      	uxtb	r3, r3
 8022c4c:	009b      	lsls	r3, r3, #2
 8022c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8022c52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8022c56:	b29b      	uxth	r3, r3
 8022c58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8022c5a:	429a      	cmp	r2, r3
 8022c5c:	f0c0 8157 	bcc.w	8022f0e <ip4_reass+0x332>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8022c60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8022c64:	b29b      	uxth	r3, r3
 8022c66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8022c68:	1ad3      	subs	r3, r2, r3
 8022c6a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8022c6c:	6878      	ldr	r0, [r7, #4]
 8022c6e:	f7f6 fb65 	bl	801933c <pbuf_clen>
 8022c72:	4603      	mov	r3, r0
 8022c74:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8022c76:	4b7a      	ldr	r3, [pc, #488]	; (8022e60 <ip4_reass+0x284>)
 8022c78:	881b      	ldrh	r3, [r3, #0]
 8022c7a:	461a      	mov	r2, r3
 8022c7c:	8c3b      	ldrh	r3, [r7, #32]
 8022c7e:	4413      	add	r3, r2
 8022c80:	2b0a      	cmp	r3, #10
 8022c82:	dd15      	ble.n	8022cb0 <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8022c84:	8c3b      	ldrh	r3, [r7, #32]
 8022c86:	4619      	mov	r1, r3
 8022c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022c8a:	f7ff fd6b 	bl	8022764 <ip_reass_remove_oldest_datagram>
 8022c8e:	4603      	mov	r3, r0
 8022c90:	2b00      	cmp	r3, #0
 8022c92:	d006      	beq.n	8022ca2 <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8022c94:	4b72      	ldr	r3, [pc, #456]	; (8022e60 <ip4_reass+0x284>)
 8022c96:	881b      	ldrh	r3, [r3, #0]
 8022c98:	461a      	mov	r2, r3
 8022c9a:	8c3b      	ldrh	r3, [r7, #32]
 8022c9c:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8022c9e:	2b0a      	cmp	r3, #10
 8022ca0:	dd06      	ble.n	8022cb0 <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 8022ca2:	4b6e      	ldr	r3, [pc, #440]	; (8022e5c <ip4_reass+0x280>)
 8022ca4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8022ca6:	3301      	adds	r3, #1
 8022ca8:	b29a      	uxth	r2, r3
 8022caa:	4b6c      	ldr	r3, [pc, #432]	; (8022e5c <ip4_reass+0x280>)
 8022cac:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 8022cae:	e131      	b.n	8022f14 <ip4_reass+0x338>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8022cb0:	4b6c      	ldr	r3, [pc, #432]	; (8022e64 <ip4_reass+0x288>)
 8022cb2:	681b      	ldr	r3, [r3, #0]
 8022cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8022cb6:	e01e      	b.n	8022cf6 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8022cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022cba:	695a      	ldr	r2, [r3, #20]
 8022cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022cbe:	68db      	ldr	r3, [r3, #12]
 8022cc0:	429a      	cmp	r2, r3
 8022cc2:	d115      	bne.n	8022cf0 <ip4_reass+0x114>
 8022cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022cc6:	699a      	ldr	r2, [r3, #24]
 8022cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022cca:	691b      	ldr	r3, [r3, #16]
 8022ccc:	429a      	cmp	r2, r3
 8022cce:	d10f      	bne.n	8022cf0 <ip4_reass+0x114>
 8022cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022cd2:	899a      	ldrh	r2, [r3, #12]
 8022cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022cd6:	889b      	ldrh	r3, [r3, #4]
 8022cd8:	b29b      	uxth	r3, r3
 8022cda:	429a      	cmp	r2, r3
 8022cdc:	d108      	bne.n	8022cf0 <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 8022cde:	4b5f      	ldr	r3, [pc, #380]	; (8022e5c <ip4_reass+0x280>)
 8022ce0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8022ce4:	3301      	adds	r3, #1
 8022ce6:	b29a      	uxth	r2, r3
 8022ce8:	4b5c      	ldr	r3, [pc, #368]	; (8022e5c <ip4_reass+0x280>)
 8022cea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 8022cee:	e005      	b.n	8022cfc <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8022cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022cf2:	681b      	ldr	r3, [r3, #0]
 8022cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8022cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022cf8:	2b00      	cmp	r3, #0
 8022cfa:	d1dd      	bne.n	8022cb8 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 8022cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022cfe:	2b00      	cmp	r3, #0
 8022d00:	d109      	bne.n	8022d16 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8022d02:	8c3b      	ldrh	r3, [r7, #32]
 8022d04:	4619      	mov	r1, r3
 8022d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022d08:	f7ff fd8e 	bl	8022828 <ip_reass_enqueue_new_datagram>
 8022d0c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8022d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022d10:	2b00      	cmp	r3, #0
 8022d12:	d11c      	bne.n	8022d4e <ip4_reass+0x172>
      goto nullreturn;
 8022d14:	e0fe      	b.n	8022f14 <ip4_reass+0x338>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8022d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d18:	88db      	ldrh	r3, [r3, #6]
 8022d1a:	b29b      	uxth	r3, r3
 8022d1c:	4618      	mov	r0, r3
 8022d1e:	f7f4 fbe1 	bl	80174e4 <lwip_htons>
 8022d22:	4603      	mov	r3, r0
 8022d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022d28:	2b00      	cmp	r3, #0
 8022d2a:	d110      	bne.n	8022d4e <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8022d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022d2e:	89db      	ldrh	r3, [r3, #14]
 8022d30:	4618      	mov	r0, r3
 8022d32:	f7f4 fbd7 	bl	80174e4 <lwip_htons>
 8022d36:	4603      	mov	r3, r0
 8022d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8022d3c:	2b00      	cmp	r3, #0
 8022d3e:	d006      	beq.n	8022d4e <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8022d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022d42:	3308      	adds	r3, #8
 8022d44:	2214      	movs	r2, #20
 8022d46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8022d48:	4618      	mov	r0, r3
 8022d4a:	f001 fba8 	bl	802449e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8022d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d50:	88db      	ldrh	r3, [r3, #6]
 8022d52:	b29b      	uxth	r3, r3
 8022d54:	f003 0320 	and.w	r3, r3, #32
 8022d58:	2b00      	cmp	r3, #0
 8022d5a:	bf0c      	ite	eq
 8022d5c:	2301      	moveq	r3, #1
 8022d5e:	2300      	movne	r3, #0
 8022d60:	b2db      	uxtb	r3, r3
 8022d62:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8022d64:	69fb      	ldr	r3, [r7, #28]
 8022d66:	2b00      	cmp	r3, #0
 8022d68:	d00e      	beq.n	8022d88 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 8022d6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8022d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022d6e:	4413      	add	r3, r2
 8022d70:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8022d72:	8b7a      	ldrh	r2, [r7, #26]
 8022d74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8022d76:	429a      	cmp	r2, r3
 8022d78:	f0c0 80a7 	bcc.w	8022eca <ip4_reass+0x2ee>
 8022d7c:	8b7b      	ldrh	r3, [r7, #26]
 8022d7e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8022d82:	4293      	cmp	r3, r2
 8022d84:	f200 80a1 	bhi.w	8022eca <ip4_reass+0x2ee>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8022d88:	69fa      	ldr	r2, [r7, #28]
 8022d8a:	6879      	ldr	r1, [r7, #4]
 8022d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022d8e:	f7ff fdbb 	bl	8022908 <ip_reass_chain_frag_into_datagram_and_validate>
 8022d92:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8022d94:	697b      	ldr	r3, [r7, #20]
 8022d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022d9a:	f000 8098 	beq.w	8022ece <ip4_reass+0x2f2>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022d9e:	4b30      	ldr	r3, [pc, #192]	; (8022e60 <ip4_reass+0x284>)
 8022da0:	881a      	ldrh	r2, [r3, #0]
 8022da2:	8c3b      	ldrh	r3, [r7, #32]
 8022da4:	4413      	add	r3, r2
 8022da6:	b29a      	uxth	r2, r3
 8022da8:	4b2d      	ldr	r3, [pc, #180]	; (8022e60 <ip4_reass+0x284>)
 8022daa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8022dac:	69fb      	ldr	r3, [r7, #28]
 8022dae:	2b00      	cmp	r3, #0
 8022db0:	d00d      	beq.n	8022dce <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 8022db2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8022db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022db6:	4413      	add	r3, r2
 8022db8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8022dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022dbc:	8a7a      	ldrh	r2, [r7, #18]
 8022dbe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022dc2:	7f9b      	ldrb	r3, [r3, #30]
 8022dc4:	f043 0301 	orr.w	r3, r3, #1
 8022dc8:	b2da      	uxtb	r2, r3
 8022dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022dcc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8022dce:	697b      	ldr	r3, [r7, #20]
 8022dd0:	2b01      	cmp	r3, #1
 8022dd2:	d178      	bne.n	8022ec6 <ip4_reass+0x2ea>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8022dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022dd6:	8b9b      	ldrh	r3, [r3, #28]
 8022dd8:	3314      	adds	r3, #20
 8022dda:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8022ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022dde:	685b      	ldr	r3, [r3, #4]
 8022de0:	685b      	ldr	r3, [r3, #4]
 8022de2:	681b      	ldr	r3, [r3, #0]
 8022de4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8022de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022de8:	685b      	ldr	r3, [r3, #4]
 8022dea:	685b      	ldr	r3, [r3, #4]
 8022dec:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8022dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022df0:	3308      	adds	r3, #8
 8022df2:	2214      	movs	r2, #20
 8022df4:	4619      	mov	r1, r3
 8022df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022df8:	f001 fb51 	bl	802449e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8022dfc:	8a3b      	ldrh	r3, [r7, #16]
 8022dfe:	4618      	mov	r0, r3
 8022e00:	f7f4 fb70 	bl	80174e4 <lwip_htons>
 8022e04:	4603      	mov	r3, r0
 8022e06:	461a      	mov	r2, r3
 8022e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e0a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8022e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e0e:	2200      	movs	r2, #0
 8022e10:	719a      	strb	r2, [r3, #6]
 8022e12:	2200      	movs	r2, #0
 8022e14:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8022e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022e18:	2200      	movs	r2, #0
 8022e1a:	729a      	strb	r2, [r3, #10]
 8022e1c:	2200      	movs	r2, #0
 8022e1e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8022e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022e22:	685b      	ldr	r3, [r3, #4]
 8022e24:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8022e26:	e00d      	b.n	8022e44 <ip4_reass+0x268>
      iprh = (struct ip_reass_helper *)r->payload;
 8022e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022e2a:	685b      	ldr	r3, [r3, #4]
 8022e2c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8022e2e:	2114      	movs	r1, #20
 8022e30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8022e32:	f7f6 f96f 	bl	8019114 <pbuf_remove_header>
      pbuf_cat(p, r);
 8022e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022e38:	6878      	ldr	r0, [r7, #4]
 8022e3a:	f7f6 fabf 	bl	80193bc <pbuf_cat>
      r = iprh->next_pbuf;
 8022e3e:	68fb      	ldr	r3, [r7, #12]
 8022e40:	681b      	ldr	r3, [r3, #0]
 8022e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 8022e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022e46:	2b00      	cmp	r3, #0
 8022e48:	d1ee      	bne.n	8022e28 <ip4_reass+0x24c>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8022e4a:	4b06      	ldr	r3, [pc, #24]	; (8022e64 <ip4_reass+0x288>)
 8022e4c:	681b      	ldr	r3, [r3, #0]
 8022e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022e50:	429a      	cmp	r2, r3
 8022e52:	d109      	bne.n	8022e68 <ip4_reass+0x28c>
      ipr_prev = NULL;
 8022e54:	2300      	movs	r3, #0
 8022e56:	637b      	str	r3, [r7, #52]	; 0x34
 8022e58:	e017      	b.n	8022e8a <ip4_reass+0x2ae>
 8022e5a:	bf00      	nop
 8022e5c:	2007ecb8 	.word	0x2007ecb8
 8022e60:	2007ef14 	.word	0x2007ef14
 8022e64:	2007ef10 	.word	0x2007ef10
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8022e68:	4b31      	ldr	r3, [pc, #196]	; (8022f30 <ip4_reass+0x354>)
 8022e6a:	681b      	ldr	r3, [r3, #0]
 8022e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8022e6e:	e007      	b.n	8022e80 <ip4_reass+0x2a4>
        if (ipr_prev->next == ipr) {
 8022e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022e72:	681b      	ldr	r3, [r3, #0]
 8022e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022e76:	429a      	cmp	r2, r3
 8022e78:	d006      	beq.n	8022e88 <ip4_reass+0x2ac>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8022e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022e7c:	681b      	ldr	r3, [r3, #0]
 8022e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8022e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022e82:	2b00      	cmp	r3, #0
 8022e84:	d1f4      	bne.n	8022e70 <ip4_reass+0x294>
 8022e86:	e000      	b.n	8022e8a <ip4_reass+0x2ae>
          break;
 8022e88:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8022e8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8022e8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022e8e:	f7ff fd0d 	bl	80228ac <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8022e92:	6878      	ldr	r0, [r7, #4]
 8022e94:	f7f6 fa52 	bl	801933c <pbuf_clen>
 8022e98:	4603      	mov	r3, r0
 8022e9a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8022e9c:	4b25      	ldr	r3, [pc, #148]	; (8022f34 <ip4_reass+0x358>)
 8022e9e:	881b      	ldrh	r3, [r3, #0]
 8022ea0:	8c3a      	ldrh	r2, [r7, #32]
 8022ea2:	429a      	cmp	r2, r3
 8022ea4:	d906      	bls.n	8022eb4 <ip4_reass+0x2d8>
 8022ea6:	4b24      	ldr	r3, [pc, #144]	; (8022f38 <ip4_reass+0x35c>)
 8022ea8:	f240 229b 	movw	r2, #667	; 0x29b
 8022eac:	4923      	ldr	r1, [pc, #140]	; (8022f3c <ip4_reass+0x360>)
 8022eae:	4824      	ldr	r0, [pc, #144]	; (8022f40 <ip4_reass+0x364>)
 8022eb0:	f001 f88a 	bl	8023fc8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8022eb4:	4b1f      	ldr	r3, [pc, #124]	; (8022f34 <ip4_reass+0x358>)
 8022eb6:	881a      	ldrh	r2, [r3, #0]
 8022eb8:	8c3b      	ldrh	r3, [r7, #32]
 8022eba:	1ad3      	subs	r3, r2, r3
 8022ebc:	b29a      	uxth	r2, r3
 8022ebe:	4b1d      	ldr	r3, [pc, #116]	; (8022f34 <ip4_reass+0x358>)
 8022ec0:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8022ec2:	687b      	ldr	r3, [r7, #4]
 8022ec4:	e030      	b.n	8022f28 <ip4_reass+0x34c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8022ec6:	2300      	movs	r3, #0
 8022ec8:	e02e      	b.n	8022f28 <ip4_reass+0x34c>
      goto nullreturn_ipr;
 8022eca:	bf00      	nop
 8022ecc:	e000      	b.n	8022ed0 <ip4_reass+0x2f4>
    goto nullreturn_ipr;
 8022ece:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8022ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022ed2:	2b00      	cmp	r3, #0
 8022ed4:	d106      	bne.n	8022ee4 <ip4_reass+0x308>
 8022ed6:	4b18      	ldr	r3, [pc, #96]	; (8022f38 <ip4_reass+0x35c>)
 8022ed8:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8022edc:	4919      	ldr	r1, [pc, #100]	; (8022f44 <ip4_reass+0x368>)
 8022ede:	4818      	ldr	r0, [pc, #96]	; (8022f40 <ip4_reass+0x364>)
 8022ee0:	f001 f872 	bl	8023fc8 <iprintf>
  if (ipr->p == NULL) {
 8022ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022ee6:	685b      	ldr	r3, [r3, #4]
 8022ee8:	2b00      	cmp	r3, #0
 8022eea:	d112      	bne.n	8022f12 <ip4_reass+0x336>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8022eec:	4b10      	ldr	r3, [pc, #64]	; (8022f30 <ip4_reass+0x354>)
 8022eee:	681b      	ldr	r3, [r3, #0]
 8022ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022ef2:	429a      	cmp	r2, r3
 8022ef4:	d006      	beq.n	8022f04 <ip4_reass+0x328>
 8022ef6:	4b10      	ldr	r3, [pc, #64]	; (8022f38 <ip4_reass+0x35c>)
 8022ef8:	f240 22ab 	movw	r2, #683	; 0x2ab
 8022efc:	4912      	ldr	r1, [pc, #72]	; (8022f48 <ip4_reass+0x36c>)
 8022efe:	4810      	ldr	r0, [pc, #64]	; (8022f40 <ip4_reass+0x364>)
 8022f00:	f001 f862 	bl	8023fc8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8022f04:	2100      	movs	r1, #0
 8022f06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022f08:	f7ff fcd0 	bl	80228ac <ip_reass_dequeue_datagram>
 8022f0c:	e002      	b.n	8022f14 <ip4_reass+0x338>
    goto nullreturn;
 8022f0e:	bf00      	nop
 8022f10:	e000      	b.n	8022f14 <ip4_reass+0x338>
  }

nullreturn:
 8022f12:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 8022f14:	4b0d      	ldr	r3, [pc, #52]	; (8022f4c <ip4_reass+0x370>)
 8022f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8022f18:	3301      	adds	r3, #1
 8022f1a:	b29a      	uxth	r2, r3
 8022f1c:	4b0b      	ldr	r3, [pc, #44]	; (8022f4c <ip4_reass+0x370>)
 8022f1e:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 8022f20:	6878      	ldr	r0, [r7, #4]
 8022f22:	f7f6 f97d 	bl	8019220 <pbuf_free>
  return NULL;
 8022f26:	2300      	movs	r3, #0
}
 8022f28:	4618      	mov	r0, r3
 8022f2a:	3738      	adds	r7, #56	; 0x38
 8022f2c:	46bd      	mov	sp, r7
 8022f2e:	bd80      	pop	{r7, pc}
 8022f30:	2007ef10 	.word	0x2007ef10
 8022f34:	2007ef14 	.word	0x2007ef14
 8022f38:	080294c4 	.word	0x080294c4
 8022f3c:	08029634 	.word	0x08029634
 8022f40:	0802950c 	.word	0x0802950c
 8022f44:	08029650 	.word	0x08029650
 8022f48:	0802965c 	.word	0x0802965c
 8022f4c:	2007ecb8 	.word	0x2007ecb8

08022f50 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8022f50:	b580      	push	{r7, lr}
 8022f52:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8022f54:	2005      	movs	r0, #5
 8022f56:	f7f5 f94d 	bl	80181f4 <memp_malloc>
 8022f5a:	4603      	mov	r3, r0
}
 8022f5c:	4618      	mov	r0, r3
 8022f5e:	bd80      	pop	{r7, pc}

08022f60 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8022f60:	b580      	push	{r7, lr}
 8022f62:	b082      	sub	sp, #8
 8022f64:	af00      	add	r7, sp, #0
 8022f66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8022f68:	687b      	ldr	r3, [r7, #4]
 8022f6a:	2b00      	cmp	r3, #0
 8022f6c:	d106      	bne.n	8022f7c <ip_frag_free_pbuf_custom_ref+0x1c>
 8022f6e:	4b07      	ldr	r3, [pc, #28]	; (8022f8c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8022f70:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8022f74:	4906      	ldr	r1, [pc, #24]	; (8022f90 <ip_frag_free_pbuf_custom_ref+0x30>)
 8022f76:	4807      	ldr	r0, [pc, #28]	; (8022f94 <ip_frag_free_pbuf_custom_ref+0x34>)
 8022f78:	f001 f826 	bl	8023fc8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8022f7c:	6879      	ldr	r1, [r7, #4]
 8022f7e:	2005      	movs	r0, #5
 8022f80:	f7f5 f9b4 	bl	80182ec <memp_free>
}
 8022f84:	bf00      	nop
 8022f86:	3708      	adds	r7, #8
 8022f88:	46bd      	mov	sp, r7
 8022f8a:	bd80      	pop	{r7, pc}
 8022f8c:	080294c4 	.word	0x080294c4
 8022f90:	0802967c 	.word	0x0802967c
 8022f94:	0802950c 	.word	0x0802950c

08022f98 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8022f98:	b580      	push	{r7, lr}
 8022f9a:	b084      	sub	sp, #16
 8022f9c:	af00      	add	r7, sp, #0
 8022f9e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8022fa0:	687b      	ldr	r3, [r7, #4]
 8022fa2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8022fa4:	68fb      	ldr	r3, [r7, #12]
 8022fa6:	2b00      	cmp	r3, #0
 8022fa8:	d106      	bne.n	8022fb8 <ipfrag_free_pbuf_custom+0x20>
 8022faa:	4b11      	ldr	r3, [pc, #68]	; (8022ff0 <ipfrag_free_pbuf_custom+0x58>)
 8022fac:	f240 22ce 	movw	r2, #718	; 0x2ce
 8022fb0:	4910      	ldr	r1, [pc, #64]	; (8022ff4 <ipfrag_free_pbuf_custom+0x5c>)
 8022fb2:	4811      	ldr	r0, [pc, #68]	; (8022ff8 <ipfrag_free_pbuf_custom+0x60>)
 8022fb4:	f001 f808 	bl	8023fc8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8022fb8:	68fa      	ldr	r2, [r7, #12]
 8022fba:	687b      	ldr	r3, [r7, #4]
 8022fbc:	429a      	cmp	r2, r3
 8022fbe:	d006      	beq.n	8022fce <ipfrag_free_pbuf_custom+0x36>
 8022fc0:	4b0b      	ldr	r3, [pc, #44]	; (8022ff0 <ipfrag_free_pbuf_custom+0x58>)
 8022fc2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8022fc6:	490d      	ldr	r1, [pc, #52]	; (8022ffc <ipfrag_free_pbuf_custom+0x64>)
 8022fc8:	480b      	ldr	r0, [pc, #44]	; (8022ff8 <ipfrag_free_pbuf_custom+0x60>)
 8022fca:	f000 fffd 	bl	8023fc8 <iprintf>
  if (pcr->original != NULL) {
 8022fce:	68fb      	ldr	r3, [r7, #12]
 8022fd0:	695b      	ldr	r3, [r3, #20]
 8022fd2:	2b00      	cmp	r3, #0
 8022fd4:	d004      	beq.n	8022fe0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8022fd6:	68fb      	ldr	r3, [r7, #12]
 8022fd8:	695b      	ldr	r3, [r3, #20]
 8022fda:	4618      	mov	r0, r3
 8022fdc:	f7f6 f920 	bl	8019220 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8022fe0:	68f8      	ldr	r0, [r7, #12]
 8022fe2:	f7ff ffbd 	bl	8022f60 <ip_frag_free_pbuf_custom_ref>
}
 8022fe6:	bf00      	nop
 8022fe8:	3710      	adds	r7, #16
 8022fea:	46bd      	mov	sp, r7
 8022fec:	bd80      	pop	{r7, pc}
 8022fee:	bf00      	nop
 8022ff0:	080294c4 	.word	0x080294c4
 8022ff4:	08029688 	.word	0x08029688
 8022ff8:	0802950c 	.word	0x0802950c
 8022ffc:	08029694 	.word	0x08029694

08023000 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8023000:	b580      	push	{r7, lr}
 8023002:	b094      	sub	sp, #80	; 0x50
 8023004:	af02      	add	r7, sp, #8
 8023006:	60f8      	str	r0, [r7, #12]
 8023008:	60b9      	str	r1, [r7, #8]
 802300a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 802300c:	2300      	movs	r3, #0
 802300e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8023012:	68bb      	ldr	r3, [r7, #8]
 8023014:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8023016:	3b14      	subs	r3, #20
 8023018:	2b00      	cmp	r3, #0
 802301a:	da00      	bge.n	802301e <ip4_frag+0x1e>
 802301c:	3307      	adds	r3, #7
 802301e:	10db      	asrs	r3, r3, #3
 8023020:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8023022:	2314      	movs	r3, #20
 8023024:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8023026:	68fb      	ldr	r3, [r7, #12]
 8023028:	685b      	ldr	r3, [r3, #4]
 802302a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 802302c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802302e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8023030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023032:	781b      	ldrb	r3, [r3, #0]
 8023034:	f003 030f 	and.w	r3, r3, #15
 8023038:	b2db      	uxtb	r3, r3
 802303a:	009b      	lsls	r3, r3, #2
 802303c:	b2db      	uxtb	r3, r3
 802303e:	2b14      	cmp	r3, #20
 8023040:	d002      	beq.n	8023048 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8023042:	f06f 0305 	mvn.w	r3, #5
 8023046:	e116      	b.n	8023276 <ip4_frag+0x276>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8023048:	68fb      	ldr	r3, [r7, #12]
 802304a:	895b      	ldrh	r3, [r3, #10]
 802304c:	2b13      	cmp	r3, #19
 802304e:	d809      	bhi.n	8023064 <ip4_frag+0x64>
 8023050:	4b8b      	ldr	r3, [pc, #556]	; (8023280 <ip4_frag+0x280>)
 8023052:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8023056:	498b      	ldr	r1, [pc, #556]	; (8023284 <ip4_frag+0x284>)
 8023058:	488b      	ldr	r0, [pc, #556]	; (8023288 <ip4_frag+0x288>)
 802305a:	f000 ffb5 	bl	8023fc8 <iprintf>
 802305e:	f06f 0305 	mvn.w	r3, #5
 8023062:	e108      	b.n	8023276 <ip4_frag+0x276>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8023064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023066:	88db      	ldrh	r3, [r3, #6]
 8023068:	b29b      	uxth	r3, r3
 802306a:	4618      	mov	r0, r3
 802306c:	f7f4 fa3a 	bl	80174e4 <lwip_htons>
 8023070:	4603      	mov	r3, r0
 8023072:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8023074:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8023076:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802307a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 802307e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8023080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8023084:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8023086:	68fb      	ldr	r3, [r7, #12]
 8023088:	891b      	ldrh	r3, [r3, #8]
 802308a:	3b14      	subs	r3, #20
 802308c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8023090:	e0e7      	b.n	8023262 <ip4_frag+0x262>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023092:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8023094:	00db      	lsls	r3, r3, #3
 8023096:	b29b      	uxth	r3, r3
 8023098:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802309c:	4293      	cmp	r3, r2
 802309e:	bf28      	it	cs
 80230a0:	4613      	movcs	r3, r2
 80230a2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80230a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80230a8:	2114      	movs	r1, #20
 80230aa:	200e      	movs	r0, #14
 80230ac:	f7f5 fdd4 	bl	8018c58 <pbuf_alloc>
 80230b0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80230b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80230b4:	2b00      	cmp	r3, #0
 80230b6:	f000 80db 	beq.w	8023270 <ip4_frag+0x270>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80230ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80230bc:	895b      	ldrh	r3, [r3, #10]
 80230be:	2b13      	cmp	r3, #19
 80230c0:	d806      	bhi.n	80230d0 <ip4_frag+0xd0>
 80230c2:	4b6f      	ldr	r3, [pc, #444]	; (8023280 <ip4_frag+0x280>)
 80230c4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80230c8:	4970      	ldr	r1, [pc, #448]	; (802328c <ip4_frag+0x28c>)
 80230ca:	486f      	ldr	r0, [pc, #444]	; (8023288 <ip4_frag+0x288>)
 80230cc:	f000 ff7c 	bl	8023fc8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80230d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80230d2:	685b      	ldr	r3, [r3, #4]
 80230d4:	2214      	movs	r2, #20
 80230d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80230d8:	4618      	mov	r0, r3
 80230da:	f001 f9e0 	bl	802449e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80230de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80230e0:	685b      	ldr	r3, [r3, #4]
 80230e2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80230e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80230e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80230ea:	e064      	b.n	80231b6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80230ec:	68fb      	ldr	r3, [r7, #12]
 80230ee:	895a      	ldrh	r2, [r3, #10]
 80230f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80230f2:	1ad3      	subs	r3, r2, r3
 80230f4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80230f6:	68fb      	ldr	r3, [r7, #12]
 80230f8:	895b      	ldrh	r3, [r3, #10]
 80230fa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80230fc:	429a      	cmp	r2, r3
 80230fe:	d906      	bls.n	802310e <ip4_frag+0x10e>
 8023100:	4b5f      	ldr	r3, [pc, #380]	; (8023280 <ip4_frag+0x280>)
 8023102:	f240 322d 	movw	r2, #813	; 0x32d
 8023106:	4962      	ldr	r1, [pc, #392]	; (8023290 <ip4_frag+0x290>)
 8023108:	485f      	ldr	r0, [pc, #380]	; (8023288 <ip4_frag+0x288>)
 802310a:	f000 ff5d 	bl	8023fc8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 802310e:	8bfa      	ldrh	r2, [r7, #30]
 8023110:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8023114:	4293      	cmp	r3, r2
 8023116:	bf28      	it	cs
 8023118:	4613      	movcs	r3, r2
 802311a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 802311e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8023122:	2b00      	cmp	r3, #0
 8023124:	d105      	bne.n	8023132 <ip4_frag+0x132>
        poff = 0;
 8023126:	2300      	movs	r3, #0
 8023128:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 802312a:	68fb      	ldr	r3, [r7, #12]
 802312c:	681b      	ldr	r3, [r3, #0]
 802312e:	60fb      	str	r3, [r7, #12]
        continue;
 8023130:	e041      	b.n	80231b6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8023132:	f7ff ff0d 	bl	8022f50 <ip_frag_alloc_pbuf_custom_ref>
 8023136:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8023138:	69bb      	ldr	r3, [r7, #24]
 802313a:	2b00      	cmp	r3, #0
 802313c:	d103      	bne.n	8023146 <ip4_frag+0x146>
        pbuf_free(rambuf);
 802313e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023140:	f7f6 f86e 	bl	8019220 <pbuf_free>
        goto memerr;
 8023144:	e095      	b.n	8023272 <ip4_frag+0x272>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8023146:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8023148:	68fb      	ldr	r3, [r7, #12]
 802314a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802314c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802314e:	4413      	add	r3, r2
 8023150:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8023154:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8023158:	9201      	str	r2, [sp, #4]
 802315a:	9300      	str	r3, [sp, #0]
 802315c:	4603      	mov	r3, r0
 802315e:	2241      	movs	r2, #65	; 0x41
 8023160:	2000      	movs	r0, #0
 8023162:	f7f5 fea3 	bl	8018eac <pbuf_alloced_custom>
 8023166:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8023168:	697b      	ldr	r3, [r7, #20]
 802316a:	2b00      	cmp	r3, #0
 802316c:	d106      	bne.n	802317c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 802316e:	69b8      	ldr	r0, [r7, #24]
 8023170:	f7ff fef6 	bl	8022f60 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8023174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023176:	f7f6 f853 	bl	8019220 <pbuf_free>
        goto memerr;
 802317a:	e07a      	b.n	8023272 <ip4_frag+0x272>
      }
      pbuf_ref(p);
 802317c:	68f8      	ldr	r0, [r7, #12]
 802317e:	f7f6 f8f5 	bl	801936c <pbuf_ref>
      pcr->original = p;
 8023182:	69bb      	ldr	r3, [r7, #24]
 8023184:	68fa      	ldr	r2, [r7, #12]
 8023186:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8023188:	69bb      	ldr	r3, [r7, #24]
 802318a:	4a42      	ldr	r2, [pc, #264]	; (8023294 <ip4_frag+0x294>)
 802318c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 802318e:	6979      	ldr	r1, [r7, #20]
 8023190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023192:	f7f6 f913 	bl	80193bc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8023196:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 802319a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802319e:	1ad3      	subs	r3, r2, r3
 80231a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80231a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80231a8:	2b00      	cmp	r3, #0
 80231aa:	d004      	beq.n	80231b6 <ip4_frag+0x1b6>
        poff = 0;
 80231ac:	2300      	movs	r3, #0
 80231ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80231b0:	68fb      	ldr	r3, [r7, #12]
 80231b2:	681b      	ldr	r3, [r3, #0]
 80231b4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80231b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80231ba:	2b00      	cmp	r3, #0
 80231bc:	d196      	bne.n	80230ec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80231be:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80231c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80231c4:	4413      	add	r3, r2
 80231c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80231c8:	68bb      	ldr	r3, [r7, #8]
 80231ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80231cc:	f1a3 0213 	sub.w	r2, r3, #19
 80231d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80231d4:	429a      	cmp	r2, r3
 80231d6:	bfcc      	ite	gt
 80231d8:	2301      	movgt	r3, #1
 80231da:	2300      	movle	r3, #0
 80231dc:	b2db      	uxtb	r3, r3
 80231de:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80231e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80231e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80231e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80231ea:	6a3b      	ldr	r3, [r7, #32]
 80231ec:	2b00      	cmp	r3, #0
 80231ee:	d002      	beq.n	80231f6 <ip4_frag+0x1f6>
 80231f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80231f2:	2b00      	cmp	r3, #0
 80231f4:	d003      	beq.n	80231fe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80231f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80231f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80231fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80231fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8023200:	4618      	mov	r0, r3
 8023202:	f7f4 f96f 	bl	80174e4 <lwip_htons>
 8023206:	4603      	mov	r3, r0
 8023208:	461a      	mov	r2, r3
 802320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802320c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802320e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8023210:	3314      	adds	r3, #20
 8023212:	b29b      	uxth	r3, r3
 8023214:	4618      	mov	r0, r3
 8023216:	f7f4 f965 	bl	80174e4 <lwip_htons>
 802321a:	4603      	mov	r3, r0
 802321c:	461a      	mov	r2, r3
 802321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023220:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8023222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023224:	2200      	movs	r2, #0
 8023226:	729a      	strb	r2, [r3, #10]
 8023228:	2200      	movs	r2, #0
 802322a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 802322c:	68bb      	ldr	r3, [r7, #8]
 802322e:	695b      	ldr	r3, [r3, #20]
 8023230:	687a      	ldr	r2, [r7, #4]
 8023232:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8023234:	68b8      	ldr	r0, [r7, #8]
 8023236:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 8023238:	4b17      	ldr	r3, [pc, #92]	; (8023298 <ip4_frag+0x298>)
 802323a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 802323c:	3301      	adds	r3, #1
 802323e:	b29a      	uxth	r2, r3
 8023240:	4b15      	ldr	r3, [pc, #84]	; (8023298 <ip4_frag+0x298>)
 8023242:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8023244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023246:	f7f5 ffeb 	bl	8019220 <pbuf_free>
    left = (u16_t)(left - fragsize);
 802324a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802324e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8023250:	1ad3      	subs	r3, r2, r3
 8023252:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8023256:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 802325a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802325c:	4413      	add	r3, r2
 802325e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8023262:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8023266:	2b00      	cmp	r3, #0
 8023268:	f47f af13 	bne.w	8023092 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 802326c:	2300      	movs	r3, #0
 802326e:	e002      	b.n	8023276 <ip4_frag+0x276>
      goto memerr;
 8023270:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8023272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8023276:	4618      	mov	r0, r3
 8023278:	3748      	adds	r7, #72	; 0x48
 802327a:	46bd      	mov	sp, r7
 802327c:	bd80      	pop	{r7, pc}
 802327e:	bf00      	nop
 8023280:	080294c4 	.word	0x080294c4
 8023284:	080296a0 	.word	0x080296a0
 8023288:	0802950c 	.word	0x0802950c
 802328c:	080296bc 	.word	0x080296bc
 8023290:	080296dc 	.word	0x080296dc
 8023294:	08022f99 	.word	0x08022f99
 8023298:	2007ecb8 	.word	0x2007ecb8

0802329c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 802329c:	b580      	push	{r7, lr}
 802329e:	b086      	sub	sp, #24
 80232a0:	af00      	add	r7, sp, #0
 80232a2:	6078      	str	r0, [r7, #4]
 80232a4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80232a6:	230e      	movs	r3, #14
 80232a8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80232aa:	687b      	ldr	r3, [r7, #4]
 80232ac:	895b      	ldrh	r3, [r3, #10]
 80232ae:	2b0e      	cmp	r3, #14
 80232b0:	d80c      	bhi.n	80232cc <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 80232b2:	4b51      	ldr	r3, [pc, #324]	; (80233f8 <ethernet_input+0x15c>)
 80232b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80232b6:	3301      	adds	r3, #1
 80232b8:	b29a      	uxth	r2, r3
 80232ba:	4b4f      	ldr	r3, [pc, #316]	; (80233f8 <ethernet_input+0x15c>)
 80232bc:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 80232be:	4b4e      	ldr	r3, [pc, #312]	; (80233f8 <ethernet_input+0x15c>)
 80232c0:	8bdb      	ldrh	r3, [r3, #30]
 80232c2:	3301      	adds	r3, #1
 80232c4:	b29a      	uxth	r2, r3
 80232c6:	4b4c      	ldr	r3, [pc, #304]	; (80233f8 <ethernet_input+0x15c>)
 80232c8:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 80232ca:	e08d      	b.n	80233e8 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80232cc:	687b      	ldr	r3, [r7, #4]
 80232ce:	7bdb      	ldrb	r3, [r3, #15]
 80232d0:	2b00      	cmp	r3, #0
 80232d2:	d106      	bne.n	80232e2 <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 80232d4:	683b      	ldr	r3, [r7, #0]
 80232d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80232da:	3301      	adds	r3, #1
 80232dc:	b2da      	uxtb	r2, r3
 80232de:	687b      	ldr	r3, [r7, #4]
 80232e0:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80232e2:	687b      	ldr	r3, [r7, #4]
 80232e4:	685b      	ldr	r3, [r3, #4]
 80232e6:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80232e8:	693b      	ldr	r3, [r7, #16]
 80232ea:	7b1a      	ldrb	r2, [r3, #12]
 80232ec:	7b5b      	ldrb	r3, [r3, #13]
 80232ee:	021b      	lsls	r3, r3, #8
 80232f0:	4313      	orrs	r3, r2
 80232f2:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80232f4:	693b      	ldr	r3, [r7, #16]
 80232f6:	781b      	ldrb	r3, [r3, #0]
 80232f8:	f003 0301 	and.w	r3, r3, #1
 80232fc:	2b00      	cmp	r3, #0
 80232fe:	d023      	beq.n	8023348 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8023300:	693b      	ldr	r3, [r7, #16]
 8023302:	781b      	ldrb	r3, [r3, #0]
 8023304:	2b01      	cmp	r3, #1
 8023306:	d10f      	bne.n	8023328 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8023308:	693b      	ldr	r3, [r7, #16]
 802330a:	785b      	ldrb	r3, [r3, #1]
 802330c:	2b00      	cmp	r3, #0
 802330e:	d11b      	bne.n	8023348 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8023310:	693b      	ldr	r3, [r7, #16]
 8023312:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8023314:	2b5e      	cmp	r3, #94	; 0x5e
 8023316:	d117      	bne.n	8023348 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8023318:	687b      	ldr	r3, [r7, #4]
 802331a:	7b5b      	ldrb	r3, [r3, #13]
 802331c:	f043 0310 	orr.w	r3, r3, #16
 8023320:	b2da      	uxtb	r2, r3
 8023322:	687b      	ldr	r3, [r7, #4]
 8023324:	735a      	strb	r2, [r3, #13]
 8023326:	e00f      	b.n	8023348 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8023328:	693b      	ldr	r3, [r7, #16]
 802332a:	2206      	movs	r2, #6
 802332c:	4933      	ldr	r1, [pc, #204]	; (80233fc <ethernet_input+0x160>)
 802332e:	4618      	mov	r0, r3
 8023330:	f000 fff2 	bl	8024318 <memcmp>
 8023334:	4603      	mov	r3, r0
 8023336:	2b00      	cmp	r3, #0
 8023338:	d106      	bne.n	8023348 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 802333a:	687b      	ldr	r3, [r7, #4]
 802333c:	7b5b      	ldrb	r3, [r3, #13]
 802333e:	f043 0308 	orr.w	r3, r3, #8
 8023342:	b2da      	uxtb	r2, r3
 8023344:	687b      	ldr	r3, [r7, #4]
 8023346:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8023348:	89fb      	ldrh	r3, [r7, #14]
 802334a:	2b08      	cmp	r3, #8
 802334c:	d003      	beq.n	8023356 <ethernet_input+0xba>
 802334e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8023352:	d014      	beq.n	802337e <ethernet_input+0xe2>
 8023354:	e034      	b.n	80233c0 <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8023356:	683b      	ldr	r3, [r7, #0]
 8023358:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802335c:	f003 0308 	and.w	r3, r3, #8
 8023360:	2b00      	cmp	r3, #0
 8023362:	d03c      	beq.n	80233de <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8023364:	8afb      	ldrh	r3, [r7, #22]
 8023366:	4619      	mov	r1, r3
 8023368:	6878      	ldr	r0, [r7, #4]
 802336a:	f7f5 fed3 	bl	8019114 <pbuf_remove_header>
 802336e:	4603      	mov	r3, r0
 8023370:	2b00      	cmp	r3, #0
 8023372:	d136      	bne.n	80233e2 <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 8023374:	6839      	ldr	r1, [r7, #0]
 8023376:	6878      	ldr	r0, [r7, #4]
 8023378:	f7fe fe7e 	bl	8022078 <ip4_input>
      }
      break;
 802337c:	e02d      	b.n	80233da <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 802337e:	683b      	ldr	r3, [r7, #0]
 8023380:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8023384:	f003 0308 	and.w	r3, r3, #8
 8023388:	2b00      	cmp	r3, #0
 802338a:	d02c      	beq.n	80233e6 <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802338c:	8afb      	ldrh	r3, [r7, #22]
 802338e:	4619      	mov	r1, r3
 8023390:	6878      	ldr	r0, [r7, #4]
 8023392:	f7f5 febf 	bl	8019114 <pbuf_remove_header>
 8023396:	4603      	mov	r3, r0
 8023398:	2b00      	cmp	r3, #0
 802339a:	d00c      	beq.n	80233b6 <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 802339c:	4b16      	ldr	r3, [pc, #88]	; (80233f8 <ethernet_input+0x15c>)
 802339e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80233a0:	3301      	adds	r3, #1
 80233a2:	b29a      	uxth	r2, r3
 80233a4:	4b14      	ldr	r3, [pc, #80]	; (80233f8 <ethernet_input+0x15c>)
 80233a6:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 80233a8:	4b13      	ldr	r3, [pc, #76]	; (80233f8 <ethernet_input+0x15c>)
 80233aa:	8bdb      	ldrh	r3, [r3, #30]
 80233ac:	3301      	adds	r3, #1
 80233ae:	b29a      	uxth	r2, r3
 80233b0:	4b11      	ldr	r3, [pc, #68]	; (80233f8 <ethernet_input+0x15c>)
 80233b2:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 80233b4:	e018      	b.n	80233e8 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 80233b6:	6839      	ldr	r1, [r7, #0]
 80233b8:	6878      	ldr	r0, [r7, #4]
 80233ba:	f7fd fec5 	bl	8021148 <etharp_input>
      }
      break;
 80233be:	e00c      	b.n	80233da <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 80233c0:	4b0d      	ldr	r3, [pc, #52]	; (80233f8 <ethernet_input+0x15c>)
 80233c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80233c4:	3301      	adds	r3, #1
 80233c6:	b29a      	uxth	r2, r3
 80233c8:	4b0b      	ldr	r3, [pc, #44]	; (80233f8 <ethernet_input+0x15c>)
 80233ca:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 80233cc:	4b0a      	ldr	r3, [pc, #40]	; (80233f8 <ethernet_input+0x15c>)
 80233ce:	8bdb      	ldrh	r3, [r3, #30]
 80233d0:	3301      	adds	r3, #1
 80233d2:	b29a      	uxth	r2, r3
 80233d4:	4b08      	ldr	r3, [pc, #32]	; (80233f8 <ethernet_input+0x15c>)
 80233d6:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80233d8:	e006      	b.n	80233e8 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80233da:	2300      	movs	r3, #0
 80233dc:	e008      	b.n	80233f0 <ethernet_input+0x154>
        goto free_and_return;
 80233de:	bf00      	nop
 80233e0:	e002      	b.n	80233e8 <ethernet_input+0x14c>
        goto free_and_return;
 80233e2:	bf00      	nop
 80233e4:	e000      	b.n	80233e8 <ethernet_input+0x14c>
        goto free_and_return;
 80233e6:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80233e8:	6878      	ldr	r0, [r7, #4]
 80233ea:	f7f5 ff19 	bl	8019220 <pbuf_free>
  return ERR_OK;
 80233ee:	2300      	movs	r3, #0
}
 80233f0:	4618      	mov	r0, r3
 80233f2:	3718      	adds	r7, #24
 80233f4:	46bd      	mov	sp, r7
 80233f6:	bd80      	pop	{r7, pc}
 80233f8:	2007ecb8 	.word	0x2007ecb8
 80233fc:	08029b38 	.word	0x08029b38

08023400 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8023400:	b580      	push	{r7, lr}
 8023402:	b086      	sub	sp, #24
 8023404:	af00      	add	r7, sp, #0
 8023406:	60f8      	str	r0, [r7, #12]
 8023408:	60b9      	str	r1, [r7, #8]
 802340a:	607a      	str	r2, [r7, #4]
 802340c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802340e:	8c3b      	ldrh	r3, [r7, #32]
 8023410:	4618      	mov	r0, r3
 8023412:	f7f4 f867 	bl	80174e4 <lwip_htons>
 8023416:	4603      	mov	r3, r0
 8023418:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 802341a:	210e      	movs	r1, #14
 802341c:	68b8      	ldr	r0, [r7, #8]
 802341e:	f7f5 fe69 	bl	80190f4 <pbuf_add_header>
 8023422:	4603      	mov	r3, r0
 8023424:	2b00      	cmp	r3, #0
 8023426:	d125      	bne.n	8023474 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8023428:	68bb      	ldr	r3, [r7, #8]
 802342a:	685b      	ldr	r3, [r3, #4]
 802342c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 802342e:	693b      	ldr	r3, [r7, #16]
 8023430:	8afa      	ldrh	r2, [r7, #22]
 8023432:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8023434:	693b      	ldr	r3, [r7, #16]
 8023436:	2206      	movs	r2, #6
 8023438:	6839      	ldr	r1, [r7, #0]
 802343a:	4618      	mov	r0, r3
 802343c:	f001 f82f 	bl	802449e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8023440:	693b      	ldr	r3, [r7, #16]
 8023442:	3306      	adds	r3, #6
 8023444:	2206      	movs	r2, #6
 8023446:	6879      	ldr	r1, [r7, #4]
 8023448:	4618      	mov	r0, r3
 802344a:	f001 f828 	bl	802449e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 802344e:	68fb      	ldr	r3, [r7, #12]
 8023450:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8023454:	2b06      	cmp	r3, #6
 8023456:	d006      	beq.n	8023466 <ethernet_output+0x66>
 8023458:	4b0d      	ldr	r3, [pc, #52]	; (8023490 <ethernet_output+0x90>)
 802345a:	f44f 7299 	mov.w	r2, #306	; 0x132
 802345e:	490d      	ldr	r1, [pc, #52]	; (8023494 <ethernet_output+0x94>)
 8023460:	480d      	ldr	r0, [pc, #52]	; (8023498 <ethernet_output+0x98>)
 8023462:	f000 fdb1 	bl	8023fc8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8023466:	68fb      	ldr	r3, [r7, #12]
 8023468:	699b      	ldr	r3, [r3, #24]
 802346a:	68b9      	ldr	r1, [r7, #8]
 802346c:	68f8      	ldr	r0, [r7, #12]
 802346e:	4798      	blx	r3
 8023470:	4603      	mov	r3, r0
 8023472:	e008      	b.n	8023486 <ethernet_output+0x86>
      goto pbuf_header_failed;
 8023474:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 8023476:	4b09      	ldr	r3, [pc, #36]	; (802349c <ethernet_output+0x9c>)
 8023478:	895b      	ldrh	r3, [r3, #10]
 802347a:	3301      	adds	r3, #1
 802347c:	b29a      	uxth	r2, r3
 802347e:	4b07      	ldr	r3, [pc, #28]	; (802349c <ethernet_output+0x9c>)
 8023480:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 8023482:	f06f 0301 	mvn.w	r3, #1
}
 8023486:	4618      	mov	r0, r3
 8023488:	3718      	adds	r7, #24
 802348a:	46bd      	mov	sp, r7
 802348c:	bd80      	pop	{r7, pc}
 802348e:	bf00      	nop
 8023490:	080296ec 	.word	0x080296ec
 8023494:	08029724 	.word	0x08029724
 8023498:	08029758 	.word	0x08029758
 802349c:	2007ecb8 	.word	0x2007ecb8

080234a0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80234a0:	b580      	push	{r7, lr}
 80234a2:	b082      	sub	sp, #8
 80234a4:	af00      	add	r7, sp, #0
 80234a6:	6078      	str	r0, [r7, #4]
 80234a8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80234aa:	683b      	ldr	r3, [r7, #0]
 80234ac:	2200      	movs	r2, #0
 80234ae:	2104      	movs	r1, #4
 80234b0:	4618      	mov	r0, r3
 80234b2:	f7ee f8e0 	bl	8011676 <osMessageQueueNew>
 80234b6:	4602      	mov	r2, r0
 80234b8:	687b      	ldr	r3, [r7, #4]
 80234ba:	601a      	str	r2, [r3, #0]
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 80234bc:	4b10      	ldr	r3, [pc, #64]	; (8023500 <sys_mbox_new+0x60>)
 80234be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80234c2:	3301      	adds	r3, #1
 80234c4:	b29a      	uxth	r2, r3
 80234c6:	4b0e      	ldr	r3, [pc, #56]	; (8023500 <sys_mbox_new+0x60>)
 80234c8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 80234cc:	4b0c      	ldr	r3, [pc, #48]	; (8023500 <sys_mbox_new+0x60>)
 80234ce:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
 80234d2:	4b0b      	ldr	r3, [pc, #44]	; (8023500 <sys_mbox_new+0x60>)
 80234d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80234d8:	429a      	cmp	r2, r3
 80234da:	d205      	bcs.n	80234e8 <sys_mbox_new+0x48>
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 80234dc:	4b08      	ldr	r3, [pc, #32]	; (8023500 <sys_mbox_new+0x60>)
 80234de:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80234e2:	4b07      	ldr	r3, [pc, #28]	; (8023500 <sys_mbox_new+0x60>)
 80234e4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80234e8:	687b      	ldr	r3, [r7, #4]
 80234ea:	681b      	ldr	r3, [r3, #0]
 80234ec:	2b00      	cmp	r3, #0
 80234ee:	d102      	bne.n	80234f6 <sys_mbox_new+0x56>
    return ERR_MEM;
 80234f0:	f04f 33ff 	mov.w	r3, #4294967295
 80234f4:	e000      	b.n	80234f8 <sys_mbox_new+0x58>

  return ERR_OK;
 80234f6:	2300      	movs	r3, #0
}
 80234f8:	4618      	mov	r0, r3
 80234fa:	3708      	adds	r7, #8
 80234fc:	46bd      	mov	sp, r7
 80234fe:	bd80      	pop	{r7, pc}
 8023500:	2007ecb8 	.word	0x2007ecb8

08023504 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8023504:	b580      	push	{r7, lr}
 8023506:	b082      	sub	sp, #8
 8023508:	af00      	add	r7, sp, #0
 802350a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 802350c:	687b      	ldr	r3, [r7, #4]
 802350e:	681b      	ldr	r3, [r3, #0]
 8023510:	4618      	mov	r0, r3
 8023512:	f7ee f9d5 	bl	80118c0 <osMessageQueueGetCount>
 8023516:	4603      	mov	r3, r0
 8023518:	2b00      	cmp	r3, #0
 802351a:	d007      	beq.n	802352c <sys_mbox_free+0x28>
#endif
  {
    /* Line for breakpoint.  Should never break here! */
    portNOP();
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 802351c:	4b0c      	ldr	r3, [pc, #48]	; (8023550 <sys_mbox_free+0x4c>)
 802351e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8023522:	3301      	adds	r3, #1
 8023524:	b29a      	uxth	r2, r3
 8023526:	4b0a      	ldr	r3, [pc, #40]	; (8023550 <sys_mbox_free+0x4c>)
 8023528:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 802352c:	687b      	ldr	r3, [r7, #4]
 802352e:	681b      	ldr	r3, [r3, #0]
 8023530:	4618      	mov	r0, r3
 8023532:	f7ee f9e4 	bl	80118fe <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
 8023536:	4b06      	ldr	r3, [pc, #24]	; (8023550 <sys_mbox_free+0x4c>)
 8023538:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 802353c:	3b01      	subs	r3, #1
 802353e:	b29a      	uxth	r2, r3
 8023540:	4b03      	ldr	r3, [pc, #12]	; (8023550 <sys_mbox_free+0x4c>)
 8023542:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
#endif /* SYS_STATS */
}
 8023546:	bf00      	nop
 8023548:	3708      	adds	r7, #8
 802354a:	46bd      	mov	sp, r7
 802354c:	bd80      	pop	{r7, pc}
 802354e:	bf00      	nop
 8023550:	2007ecb8 	.word	0x2007ecb8

08023554 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8023554:	b580      	push	{r7, lr}
 8023556:	b084      	sub	sp, #16
 8023558:	af00      	add	r7, sp, #0
 802355a:	6078      	str	r0, [r7, #4]
 802355c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 802355e:	687b      	ldr	r3, [r7, #4]
 8023560:	6818      	ldr	r0, [r3, #0]
 8023562:	4639      	mov	r1, r7
 8023564:	2300      	movs	r3, #0
 8023566:	2200      	movs	r2, #0
 8023568:	f7ee f8f8 	bl	801175c <osMessageQueuePut>
 802356c:	4603      	mov	r3, r0
 802356e:	2b00      	cmp	r3, #0
 8023570:	d102      	bne.n	8023578 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8023572:	2300      	movs	r3, #0
 8023574:	73fb      	strb	r3, [r7, #15]
 8023576:	e009      	b.n	802358c <sys_mbox_trypost+0x38>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8023578:	23ff      	movs	r3, #255	; 0xff
 802357a:	73fb      	strb	r3, [r7, #15]

#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 802357c:	4b06      	ldr	r3, [pc, #24]	; (8023598 <sys_mbox_trypost+0x44>)
 802357e:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 8023582:	3301      	adds	r3, #1
 8023584:	b29a      	uxth	r2, r3
 8023586:	4b04      	ldr	r3, [pc, #16]	; (8023598 <sys_mbox_trypost+0x44>)
 8023588:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
#endif /* SYS_STATS */
  }

  return result;
 802358c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8023590:	4618      	mov	r0, r3
 8023592:	3710      	adds	r7, #16
 8023594:	46bd      	mov	sp, r7
 8023596:	bd80      	pop	{r7, pc}
 8023598:	2007ecb8 	.word	0x2007ecb8

0802359c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 802359c:	b580      	push	{r7, lr}
 802359e:	b086      	sub	sp, #24
 80235a0:	af00      	add	r7, sp, #0
 80235a2:	60f8      	str	r0, [r7, #12]
 80235a4:	60b9      	str	r1, [r7, #8]
 80235a6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80235a8:	f7ed fd64 	bl	8011074 <osKernelGetTickCount>
 80235ac:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80235ae:	687b      	ldr	r3, [r7, #4]
 80235b0:	2b00      	cmp	r3, #0
 80235b2:	d013      	beq.n	80235dc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80235b4:	68fb      	ldr	r3, [r7, #12]
 80235b6:	6818      	ldr	r0, [r3, #0]
 80235b8:	687b      	ldr	r3, [r7, #4]
 80235ba:	2200      	movs	r2, #0
 80235bc:	68b9      	ldr	r1, [r7, #8]
 80235be:	f7ee f927 	bl	8011810 <osMessageQueueGet>
 80235c2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80235c4:	693b      	ldr	r3, [r7, #16]
 80235c6:	2b00      	cmp	r3, #0
 80235c8:	d105      	bne.n	80235d6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80235ca:	f7ed fd53 	bl	8011074 <osKernelGetTickCount>
 80235ce:	4602      	mov	r2, r0
 80235d0:	697b      	ldr	r3, [r7, #20]
 80235d2:	1ad3      	subs	r3, r2, r3
 80235d4:	e00f      	b.n	80235f6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80235d6:	f04f 33ff 	mov.w	r3, #4294967295
 80235da:	e00c      	b.n	80235f6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80235dc:	68fb      	ldr	r3, [r7, #12]
 80235de:	6818      	ldr	r0, [r3, #0]
 80235e0:	f04f 33ff 	mov.w	r3, #4294967295
 80235e4:	2200      	movs	r2, #0
 80235e6:	68b9      	ldr	r1, [r7, #8]
 80235e8:	f7ee f912 	bl	8011810 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80235ec:	f7ed fd42 	bl	8011074 <osKernelGetTickCount>
 80235f0:	4602      	mov	r2, r0
 80235f2:	697b      	ldr	r3, [r7, #20]
 80235f4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80235f6:	4618      	mov	r0, r3
 80235f8:	3718      	adds	r7, #24
 80235fa:	46bd      	mov	sp, r7
 80235fc:	bd80      	pop	{r7, pc}

080235fe <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80235fe:	b580      	push	{r7, lr}
 8023600:	b082      	sub	sp, #8
 8023602:	af00      	add	r7, sp, #0
 8023604:	6078      	str	r0, [r7, #4]
 8023606:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8023608:	687b      	ldr	r3, [r7, #4]
 802360a:	6818      	ldr	r0, [r3, #0]
 802360c:	2300      	movs	r3, #0
 802360e:	2200      	movs	r2, #0
 8023610:	6839      	ldr	r1, [r7, #0]
 8023612:	f7ee f8fd 	bl	8011810 <osMessageQueueGet>
 8023616:	4603      	mov	r3, r0
 8023618:	2b00      	cmp	r3, #0
 802361a:	d101      	bne.n	8023620 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 802361c:	2300      	movs	r3, #0
 802361e:	e001      	b.n	8023624 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8023620:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8023624:	4618      	mov	r0, r3
 8023626:	3708      	adds	r7, #8
 8023628:	46bd      	mov	sp, r7
 802362a:	bd80      	pop	{r7, pc}

0802362c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 802362c:	b480      	push	{r7}
 802362e:	b083      	sub	sp, #12
 8023630:	af00      	add	r7, sp, #0
 8023632:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8023634:	687b      	ldr	r3, [r7, #4]
 8023636:	681b      	ldr	r3, [r3, #0]
 8023638:	2b00      	cmp	r3, #0
 802363a:	d101      	bne.n	8023640 <sys_mbox_valid+0x14>
    return 0;
 802363c:	2300      	movs	r3, #0
 802363e:	e000      	b.n	8023642 <sys_mbox_valid+0x16>
  else
    return 1;
 8023640:	2301      	movs	r3, #1
}
 8023642:	4618      	mov	r0, r3
 8023644:	370c      	adds	r7, #12
 8023646:	46bd      	mov	sp, r7
 8023648:	f85d 7b04 	ldr.w	r7, [sp], #4
 802364c:	4770      	bx	lr

0802364e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 802364e:	b480      	push	{r7}
 8023650:	b083      	sub	sp, #12
 8023652:	af00      	add	r7, sp, #0
 8023654:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8023656:	687b      	ldr	r3, [r7, #4]
 8023658:	2200      	movs	r2, #0
 802365a:	601a      	str	r2, [r3, #0]
}
 802365c:	bf00      	nop
 802365e:	370c      	adds	r7, #12
 8023660:	46bd      	mov	sp, r7
 8023662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023666:	4770      	bx	lr

08023668 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8023668:	b580      	push	{r7, lr}
 802366a:	b082      	sub	sp, #8
 802366c:	af00      	add	r7, sp, #0
 802366e:	6078      	str	r0, [r7, #4]
 8023670:	460b      	mov	r3, r1
 8023672:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8023674:	78fb      	ldrb	r3, [r7, #3]
 8023676:	2200      	movs	r2, #0
 8023678:	4619      	mov	r1, r3
 802367a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 802367e:	f7ed fec4 	bl	801140a <osSemaphoreNew>
 8023682:	4602      	mov	r2, r0
 8023684:	687b      	ldr	r3, [r7, #4]
 8023686:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8023688:	687b      	ldr	r3, [r7, #4]
 802368a:	681b      	ldr	r3, [r3, #0]
 802368c:	2b00      	cmp	r3, #0
 802368e:	d10a      	bne.n	80236a6 <sys_sem_new+0x3e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
 8023690:	4b17      	ldr	r3, [pc, #92]	; (80236f0 <sys_sem_new+0x88>)
 8023692:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8023696:	3301      	adds	r3, #1
 8023698:	b29a      	uxth	r2, r3
 802369a:	4b15      	ldr	r3, [pc, #84]	; (80236f0 <sys_sem_new+0x88>)
 802369c:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
#endif /* SYS_STATS */
    return ERR_MEM;
 80236a0:	f04f 33ff 	mov.w	r3, #4294967295
 80236a4:	e01f      	b.n	80236e6 <sys_sem_new+0x7e>
  }

  if(count == 0)	// Means it can't be taken
 80236a6:	78fb      	ldrb	r3, [r7, #3]
 80236a8:	2b00      	cmp	r3, #0
 80236aa:	d105      	bne.n	80236b8 <sys_sem_new+0x50>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80236ac:	687b      	ldr	r3, [r7, #4]
 80236ae:	681b      	ldr	r3, [r3, #0]
 80236b0:	2100      	movs	r1, #0
 80236b2:	4618      	mov	r0, r3
 80236b4:	f7ed ff32 	bl	801151c <osSemaphoreAcquire>
#endif
  }

#if SYS_STATS
  ++lwip_stats.sys.sem.used;
 80236b8:	4b0d      	ldr	r3, [pc, #52]	; (80236f0 <sys_sem_new+0x88>)
 80236ba:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80236be:	3301      	adds	r3, #1
 80236c0:	b29a      	uxth	r2, r3
 80236c2:	4b0b      	ldr	r3, [pc, #44]	; (80236f0 <sys_sem_new+0x88>)
 80236c4:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
 80236c8:	4b09      	ldr	r3, [pc, #36]	; (80236f0 <sys_sem_new+0x88>)
 80236ca:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	; 0xee
 80236ce:	4b08      	ldr	r3, [pc, #32]	; (80236f0 <sys_sem_new+0x88>)
 80236d0:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80236d4:	429a      	cmp	r2, r3
 80236d6:	d205      	bcs.n	80236e4 <sys_sem_new+0x7c>
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
 80236d8:	4b05      	ldr	r3, [pc, #20]	; (80236f0 <sys_sem_new+0x88>)
 80236da:	f8b3 20ec 	ldrh.w	r2, [r3, #236]	; 0xec
 80236de:	4b04      	ldr	r3, [pc, #16]	; (80236f0 <sys_sem_new+0x88>)
 80236e0:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80236e4:	2300      	movs	r3, #0
}
 80236e6:	4618      	mov	r0, r3
 80236e8:	3708      	adds	r7, #8
 80236ea:	46bd      	mov	sp, r7
 80236ec:	bd80      	pop	{r7, pc}
 80236ee:	bf00      	nop
 80236f0:	2007ecb8 	.word	0x2007ecb8

080236f4 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80236f4:	b580      	push	{r7, lr}
 80236f6:	b084      	sub	sp, #16
 80236f8:	af00      	add	r7, sp, #0
 80236fa:	6078      	str	r0, [r7, #4]
 80236fc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80236fe:	f7ed fcb9 	bl	8011074 <osKernelGetTickCount>
 8023702:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8023704:	683b      	ldr	r3, [r7, #0]
 8023706:	2b00      	cmp	r3, #0
 8023708:	d011      	beq.n	802372e <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 802370a:	687b      	ldr	r3, [r7, #4]
 802370c:	681b      	ldr	r3, [r3, #0]
 802370e:	6839      	ldr	r1, [r7, #0]
 8023710:	4618      	mov	r0, r3
 8023712:	f7ed ff03 	bl	801151c <osSemaphoreAcquire>
 8023716:	4603      	mov	r3, r0
 8023718:	2b00      	cmp	r3, #0
 802371a:	d105      	bne.n	8023728 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 802371c:	f7ed fcaa 	bl	8011074 <osKernelGetTickCount>
 8023720:	4602      	mov	r2, r0
 8023722:	68fb      	ldr	r3, [r7, #12]
 8023724:	1ad3      	subs	r3, r2, r3
 8023726:	e012      	b.n	802374e <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8023728:	f04f 33ff 	mov.w	r3, #4294967295
 802372c:	e00f      	b.n	802374e <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 802372e:	bf00      	nop
 8023730:	687b      	ldr	r3, [r7, #4]
 8023732:	681b      	ldr	r3, [r3, #0]
 8023734:	f04f 31ff 	mov.w	r1, #4294967295
 8023738:	4618      	mov	r0, r3
 802373a:	f7ed feef 	bl	801151c <osSemaphoreAcquire>
 802373e:	4603      	mov	r3, r0
 8023740:	2b00      	cmp	r3, #0
 8023742:	d1f5      	bne.n	8023730 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8023744:	f7ed fc96 	bl	8011074 <osKernelGetTickCount>
 8023748:	4602      	mov	r2, r0
 802374a:	68fb      	ldr	r3, [r7, #12]
 802374c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 802374e:	4618      	mov	r0, r3
 8023750:	3710      	adds	r7, #16
 8023752:	46bd      	mov	sp, r7
 8023754:	bd80      	pop	{r7, pc}

08023756 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8023756:	b580      	push	{r7, lr}
 8023758:	b082      	sub	sp, #8
 802375a:	af00      	add	r7, sp, #0
 802375c:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 802375e:	687b      	ldr	r3, [r7, #4]
 8023760:	681b      	ldr	r3, [r3, #0]
 8023762:	4618      	mov	r0, r3
 8023764:	f7ed ff26 	bl	80115b4 <osSemaphoreRelease>
}
 8023768:	bf00      	nop
 802376a:	3708      	adds	r7, #8
 802376c:	46bd      	mov	sp, r7
 802376e:	bd80      	pop	{r7, pc}

08023770 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8023770:	b580      	push	{r7, lr}
 8023772:	b082      	sub	sp, #8
 8023774:	af00      	add	r7, sp, #0
 8023776:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
 8023778:	4b08      	ldr	r3, [pc, #32]	; (802379c <sys_sem_free+0x2c>)
 802377a:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 802377e:	3b01      	subs	r3, #1
 8023780:	b29a      	uxth	r2, r3
 8023782:	4b06      	ldr	r3, [pc, #24]	; (802379c <sys_sem_free+0x2c>)
 8023784:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8023788:	687b      	ldr	r3, [r7, #4]
 802378a:	681b      	ldr	r3, [r3, #0]
 802378c:	4618      	mov	r0, r3
 802378e:	f7ed ff4f 	bl	8011630 <osSemaphoreDelete>
}
 8023792:	bf00      	nop
 8023794:	3708      	adds	r7, #8
 8023796:	46bd      	mov	sp, r7
 8023798:	bd80      	pop	{r7, pc}
 802379a:	bf00      	nop
 802379c:	2007ecb8 	.word	0x2007ecb8

080237a0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80237a0:	b480      	push	{r7}
 80237a2:	b083      	sub	sp, #12
 80237a4:	af00      	add	r7, sp, #0
 80237a6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80237a8:	687b      	ldr	r3, [r7, #4]
 80237aa:	681b      	ldr	r3, [r3, #0]
 80237ac:	2b00      	cmp	r3, #0
 80237ae:	d101      	bne.n	80237b4 <sys_sem_valid+0x14>
    return 0;
 80237b0:	2300      	movs	r3, #0
 80237b2:	e000      	b.n	80237b6 <sys_sem_valid+0x16>
  else
    return 1;
 80237b4:	2301      	movs	r3, #1
}
 80237b6:	4618      	mov	r0, r3
 80237b8:	370c      	adds	r7, #12
 80237ba:	46bd      	mov	sp, r7
 80237bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237c0:	4770      	bx	lr

080237c2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80237c2:	b480      	push	{r7}
 80237c4:	b083      	sub	sp, #12
 80237c6:	af00      	add	r7, sp, #0
 80237c8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80237ca:	687b      	ldr	r3, [r7, #4]
 80237cc:	2200      	movs	r2, #0
 80237ce:	601a      	str	r2, [r3, #0]
}
 80237d0:	bf00      	nop
 80237d2:	370c      	adds	r7, #12
 80237d4:	46bd      	mov	sp, r7
 80237d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237da:	4770      	bx	lr

080237dc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80237dc:	b580      	push	{r7, lr}
 80237de:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80237e0:	2000      	movs	r0, #0
 80237e2:	f7ed fd07 	bl	80111f4 <osMutexNew>
 80237e6:	4603      	mov	r3, r0
 80237e8:	4a01      	ldr	r2, [pc, #4]	; (80237f0 <sys_init+0x14>)
 80237ea:	6013      	str	r3, [r2, #0]
#endif
}
 80237ec:	bf00      	nop
 80237ee:	bd80      	pop	{r7, pc}
 80237f0:	2007ef18 	.word	0x2007ef18

080237f4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80237f4:	b580      	push	{r7, lr}
 80237f6:	b082      	sub	sp, #8
 80237f8:	af00      	add	r7, sp, #0
 80237fa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80237fc:	2000      	movs	r0, #0
 80237fe:	f7ed fcf9 	bl	80111f4 <osMutexNew>
 8023802:	4602      	mov	r2, r0
 8023804:	687b      	ldr	r3, [r7, #4]
 8023806:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8023808:	687b      	ldr	r3, [r7, #4]
 802380a:	681b      	ldr	r3, [r3, #0]
 802380c:	2b00      	cmp	r3, #0
 802380e:	d10a      	bne.n	8023826 <sys_mutex_new+0x32>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 8023810:	4b12      	ldr	r3, [pc, #72]	; (802385c <sys_mutex_new+0x68>)
 8023812:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8023816:	3301      	adds	r3, #1
 8023818:	b29a      	uxth	r2, r3
 802381a:	4b10      	ldr	r3, [pc, #64]	; (802385c <sys_mutex_new+0x68>)
 802381c:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
#endif /* SYS_STATS */
    return ERR_MEM;
 8023820:	f04f 33ff 	mov.w	r3, #4294967295
 8023824:	e016      	b.n	8023854 <sys_mutex_new+0x60>
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 8023826:	4b0d      	ldr	r3, [pc, #52]	; (802385c <sys_mutex_new+0x68>)
 8023828:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 802382c:	3301      	adds	r3, #1
 802382e:	b29a      	uxth	r2, r3
 8023830:	4b0a      	ldr	r3, [pc, #40]	; (802385c <sys_mutex_new+0x68>)
 8023832:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 8023836:	4b09      	ldr	r3, [pc, #36]	; (802385c <sys_mutex_new+0x68>)
 8023838:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
 802383c:	4b07      	ldr	r3, [pc, #28]	; (802385c <sys_mutex_new+0x68>)
 802383e:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8023842:	429a      	cmp	r2, r3
 8023844:	d205      	bcs.n	8023852 <sys_mutex_new+0x5e>
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 8023846:	4b05      	ldr	r3, [pc, #20]	; (802385c <sys_mutex_new+0x68>)
 8023848:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
 802384c:	4b03      	ldr	r3, [pc, #12]	; (802385c <sys_mutex_new+0x68>)
 802384e:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8023852:	2300      	movs	r3, #0
}
 8023854:	4618      	mov	r0, r3
 8023856:	3708      	adds	r7, #8
 8023858:	46bd      	mov	sp, r7
 802385a:	bd80      	pop	{r7, pc}
 802385c:	2007ecb8 	.word	0x2007ecb8

08023860 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8023860:	b580      	push	{r7, lr}
 8023862:	b082      	sub	sp, #8
 8023864:	af00      	add	r7, sp, #0
 8023866:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8023868:	687b      	ldr	r3, [r7, #4]
 802386a:	681b      	ldr	r3, [r3, #0]
 802386c:	f04f 31ff 	mov.w	r1, #4294967295
 8023870:	4618      	mov	r0, r3
 8023872:	f7ed fd44 	bl	80112fe <osMutexAcquire>
#endif
}
 8023876:	bf00      	nop
 8023878:	3708      	adds	r7, #8
 802387a:	46bd      	mov	sp, r7
 802387c:	bd80      	pop	{r7, pc}

0802387e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 802387e:	b580      	push	{r7, lr}
 8023880:	b082      	sub	sp, #8
 8023882:	af00      	add	r7, sp, #0
 8023884:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8023886:	687b      	ldr	r3, [r7, #4]
 8023888:	681b      	ldr	r3, [r3, #0]
 802388a:	4618      	mov	r0, r3
 802388c:	f7ed fd81 	bl	8011392 <osMutexRelease>
}
 8023890:	bf00      	nop
 8023892:	3708      	adds	r7, #8
 8023894:	46bd      	mov	sp, r7
 8023896:	bd80      	pop	{r7, pc}

08023898 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8023898:	b580      	push	{r7, lr}
 802389a:	b08e      	sub	sp, #56	; 0x38
 802389c:	af00      	add	r7, sp, #0
 802389e:	60f8      	str	r0, [r7, #12]
 80238a0:	60b9      	str	r1, [r7, #8]
 80238a2:	607a      	str	r2, [r7, #4]
 80238a4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80238a6:	f107 0314 	add.w	r3, r7, #20
 80238aa:	2224      	movs	r2, #36	; 0x24
 80238ac:	2100      	movs	r1, #0
 80238ae:	4618      	mov	r0, r3
 80238b0:	f000 fd5c 	bl	802436c <memset>
 80238b4:	68fb      	ldr	r3, [r7, #12]
 80238b6:	617b      	str	r3, [r7, #20]
 80238b8:	683b      	ldr	r3, [r7, #0]
 80238ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80238bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80238be:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80238c0:	f107 0314 	add.w	r3, r7, #20
 80238c4:	461a      	mov	r2, r3
 80238c6:	6879      	ldr	r1, [r7, #4]
 80238c8:	68b8      	ldr	r0, [r7, #8]
 80238ca:	f7ed fbe7 	bl	801109c <osThreadNew>
 80238ce:	4603      	mov	r3, r0
#endif
}
 80238d0:	4618      	mov	r0, r3
 80238d2:	3738      	adds	r7, #56	; 0x38
 80238d4:	46bd      	mov	sp, r7
 80238d6:	bd80      	pop	{r7, pc}

080238d8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80238d8:	b580      	push	{r7, lr}
 80238da:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80238dc:	4b04      	ldr	r3, [pc, #16]	; (80238f0 <sys_arch_protect+0x18>)
 80238de:	681b      	ldr	r3, [r3, #0]
 80238e0:	f04f 31ff 	mov.w	r1, #4294967295
 80238e4:	4618      	mov	r0, r3
 80238e6:	f7ed fd0a 	bl	80112fe <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80238ea:	2301      	movs	r3, #1
}
 80238ec:	4618      	mov	r0, r3
 80238ee:	bd80      	pop	{r7, pc}
 80238f0:	2007ef18 	.word	0x2007ef18

080238f4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80238f4:	b580      	push	{r7, lr}
 80238f6:	b082      	sub	sp, #8
 80238f8:	af00      	add	r7, sp, #0
 80238fa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80238fc:	4b04      	ldr	r3, [pc, #16]	; (8023910 <sys_arch_unprotect+0x1c>)
 80238fe:	681b      	ldr	r3, [r3, #0]
 8023900:	4618      	mov	r0, r3
 8023902:	f7ed fd46 	bl	8011392 <osMutexRelease>
}
 8023906:	bf00      	nop
 8023908:	3708      	adds	r7, #8
 802390a:	46bd      	mov	sp, r7
 802390c:	bd80      	pop	{r7, pc}
 802390e:	bf00      	nop
 8023910:	2007ef18 	.word	0x2007ef18

08023914 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
 8023914:	b580      	push	{r7, lr}
 8023916:	b084      	sub	sp, #16
 8023918:	af00      	add	r7, sp, #0
 802391a:	60f8      	str	r0, [r7, #12]
 802391c:	60b9      	str	r1, [r7, #8]
 802391e:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8023920:	68fb      	ldr	r3, [r7, #12]
 8023922:	2b00      	cmp	r3, #0
 8023924:	d005      	beq.n	8023932 <lwrb_init+0x1e>
 8023926:	68bb      	ldr	r3, [r7, #8]
 8023928:	2b00      	cmp	r3, #0
 802392a:	d002      	beq.n	8023932 <lwrb_init+0x1e>
 802392c:	687b      	ldr	r3, [r7, #4]
 802392e:	2b00      	cmp	r3, #0
 8023930:	d101      	bne.n	8023936 <lwrb_init+0x22>
        return 0;
 8023932:	2300      	movs	r3, #0
 8023934:	e00b      	b.n	802394e <lwrb_init+0x3a>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 8023936:	2214      	movs	r2, #20
 8023938:	2100      	movs	r1, #0
 802393a:	68f8      	ldr	r0, [r7, #12]
 802393c:	f000 fd16 	bl	802436c <memset>

    buff->size = size;
 8023940:	68fb      	ldr	r3, [r7, #12]
 8023942:	687a      	ldr	r2, [r7, #4]
 8023944:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8023946:	68fb      	ldr	r3, [r7, #12]
 8023948:	68ba      	ldr	r2, [r7, #8]
 802394a:	601a      	str	r2, [r3, #0]
#if LWRB_USE_MAGIC
    buff->magic1 = BUF_MAGIC1;
    buff->magic2 = BUF_MAGIC2;
#endif /* LWRB_USE_MAGIC */

    return 1;
 802394c:	2301      	movs	r3, #1
}
 802394e:	4618      	mov	r0, r3
 8023950:	3710      	adds	r7, #16
 8023952:	46bd      	mov	sp, r7
 8023954:	bd80      	pop	{r7, pc}

08023956 <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Buffer handle
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(LWRB_VOLATILE lwrb_t* buff, lwrb_evt_fn evt_fn) {
 8023956:	b480      	push	{r7}
 8023958:	b083      	sub	sp, #12
 802395a:	af00      	add	r7, sp, #0
 802395c:	6078      	str	r0, [r7, #4]
 802395e:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 8023960:	687b      	ldr	r3, [r7, #4]
 8023962:	2b00      	cmp	r3, #0
 8023964:	d00a      	beq.n	802397c <lwrb_set_evt_fn+0x26>
 8023966:	687b      	ldr	r3, [r7, #4]
 8023968:	681b      	ldr	r3, [r3, #0]
 802396a:	2b00      	cmp	r3, #0
 802396c:	d006      	beq.n	802397c <lwrb_set_evt_fn+0x26>
 802396e:	687b      	ldr	r3, [r7, #4]
 8023970:	685b      	ldr	r3, [r3, #4]
 8023972:	2b00      	cmp	r3, #0
 8023974:	d002      	beq.n	802397c <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 8023976:	687b      	ldr	r3, [r7, #4]
 8023978:	683a      	ldr	r2, [r7, #0]
 802397a:	611a      	str	r2, [r3, #16]
    }
}
 802397c:	bf00      	nop
 802397e:	370c      	adds	r7, #12
 8023980:	46bd      	mov	sp, r7
 8023982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023986:	4770      	bx	lr

08023988 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 8023988:	b580      	push	{r7, lr}
 802398a:	b088      	sub	sp, #32
 802398c:	af00      	add	r7, sp, #0
 802398e:	60f8      	str	r0, [r7, #12]
 8023990:	60b9      	str	r1, [r7, #8]
 8023992:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 8023994:	68bb      	ldr	r3, [r7, #8]
 8023996:	61bb      	str	r3, [r7, #24]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8023998:	68fb      	ldr	r3, [r7, #12]
 802399a:	2b00      	cmp	r3, #0
 802399c:	d00d      	beq.n	80239ba <lwrb_write+0x32>
 802399e:	68fb      	ldr	r3, [r7, #12]
 80239a0:	681b      	ldr	r3, [r3, #0]
 80239a2:	2b00      	cmp	r3, #0
 80239a4:	d009      	beq.n	80239ba <lwrb_write+0x32>
 80239a6:	68fb      	ldr	r3, [r7, #12]
 80239a8:	685b      	ldr	r3, [r3, #4]
 80239aa:	2b00      	cmp	r3, #0
 80239ac:	d005      	beq.n	80239ba <lwrb_write+0x32>
 80239ae:	68bb      	ldr	r3, [r7, #8]
 80239b0:	2b00      	cmp	r3, #0
 80239b2:	d002      	beq.n	80239ba <lwrb_write+0x32>
 80239b4:	687b      	ldr	r3, [r7, #4]
 80239b6:	2b00      	cmp	r3, #0
 80239b8:	d101      	bne.n	80239be <lwrb_write+0x36>
        return 0;
 80239ba:	2300      	movs	r3, #0
 80239bc:	e059      	b.n	8023a72 <lwrb_write+0xea>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 80239be:	68f8      	ldr	r0, [r7, #12]
 80239c0:	f000 f85b 	bl	8023a7a <lwrb_get_free>
 80239c4:	61f8      	str	r0, [r7, #28]

		if (free < btw) {
 80239c6:	69fa      	ldr	r2, [r7, #28]
 80239c8:	687b      	ldr	r3, [r7, #4]
 80239ca:	429a      	cmp	r2, r3
 80239cc:	d20d      	bcs.n	80239ea <lwrb_write+0x62>
			BUF_SEND_EVT(buff, LWRB_EVT_FULL, free);
 80239ce:	68fb      	ldr	r3, [r7, #12]
 80239d0:	691b      	ldr	r3, [r3, #16]
 80239d2:	2b00      	cmp	r3, #0
 80239d4:	d005      	beq.n	80239e2 <lwrb_write+0x5a>
 80239d6:	68fb      	ldr	r3, [r7, #12]
 80239d8:	691b      	ldr	r3, [r3, #16]
 80239da:	69fa      	ldr	r2, [r7, #28]
 80239dc:	2102      	movs	r1, #2
 80239de:	68f8      	ldr	r0, [r7, #12]
 80239e0:	4798      	blx	r3
			free = lwrb_get_free(buff);
 80239e2:	68f8      	ldr	r0, [r7, #12]
 80239e4:	f000 f849 	bl	8023a7a <lwrb_get_free>
 80239e8:	61f8      	str	r0, [r7, #28]
		}
		
    btw = BUF_MIN(free, btw);
 80239ea:	687a      	ldr	r2, [r7, #4]
 80239ec:	69fb      	ldr	r3, [r7, #28]
 80239ee:	4293      	cmp	r3, r2
 80239f0:	bf28      	it	cs
 80239f2:	4613      	movcs	r3, r2
 80239f4:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 80239f6:	687b      	ldr	r3, [r7, #4]
 80239f8:	2b00      	cmp	r3, #0
 80239fa:	d101      	bne.n	8023a00 <lwrb_write+0x78>
        return 0;
 80239fc:	2300      	movs	r3, #0
 80239fe:	e038      	b.n	8023a72 <lwrb_write+0xea>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8023a00:	68fb      	ldr	r3, [r7, #12]
 8023a02:	685a      	ldr	r2, [r3, #4]
 8023a04:	68fb      	ldr	r3, [r7, #12]
 8023a06:	68db      	ldr	r3, [r3, #12]
 8023a08:	1ad3      	subs	r3, r2, r3
 8023a0a:	687a      	ldr	r2, [r7, #4]
 8023a0c:	4293      	cmp	r3, r2
 8023a0e:	bf28      	it	cs
 8023a10:	4613      	movcs	r3, r2
 8023a12:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8023a14:	68fb      	ldr	r3, [r7, #12]
 8023a16:	681a      	ldr	r2, [r3, #0]
 8023a18:	68fb      	ldr	r3, [r7, #12]
 8023a1a:	68db      	ldr	r3, [r3, #12]
 8023a1c:	4413      	add	r3, r2
 8023a1e:	697a      	ldr	r2, [r7, #20]
 8023a20:	69b9      	ldr	r1, [r7, #24]
 8023a22:	4618      	mov	r0, r3
 8023a24:	f000 fd3b 	bl	802449e <memcpy>
    buff->w += tocopy;
 8023a28:	68fb      	ldr	r3, [r7, #12]
 8023a2a:	68da      	ldr	r2, [r3, #12]
 8023a2c:	697b      	ldr	r3, [r7, #20]
 8023a2e:	441a      	add	r2, r3
 8023a30:	68fb      	ldr	r3, [r7, #12]
 8023a32:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 8023a34:	687a      	ldr	r2, [r7, #4]
 8023a36:	697b      	ldr	r3, [r7, #20]
 8023a38:	1ad3      	subs	r3, r2, r3
 8023a3a:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8023a3c:	687b      	ldr	r3, [r7, #4]
 8023a3e:	2b00      	cmp	r3, #0
 8023a40:	d00b      	beq.n	8023a5a <lwrb_write+0xd2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8023a42:	68fb      	ldr	r3, [r7, #12]
 8023a44:	6818      	ldr	r0, [r3, #0]
 8023a46:	69ba      	ldr	r2, [r7, #24]
 8023a48:	697b      	ldr	r3, [r7, #20]
 8023a4a:	4413      	add	r3, r2
 8023a4c:	687a      	ldr	r2, [r7, #4]
 8023a4e:	4619      	mov	r1, r3
 8023a50:	f000 fd25 	bl	802449e <memcpy>
        buff->w = btw;
 8023a54:	68fb      	ldr	r3, [r7, #12]
 8023a56:	687a      	ldr	r2, [r7, #4]
 8023a58:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 8023a5a:	68fb      	ldr	r3, [r7, #12]
 8023a5c:	68da      	ldr	r2, [r3, #12]
 8023a5e:	68fb      	ldr	r3, [r7, #12]
 8023a60:	685b      	ldr	r3, [r3, #4]
 8023a62:	429a      	cmp	r2, r3
 8023a64:	d302      	bcc.n	8023a6c <lwrb_write+0xe4>
        buff->w = 0;
 8023a66:	68fb      	ldr	r3, [r7, #12]
 8023a68:	2200      	movs	r2, #0
 8023a6a:	60da      	str	r2, [r3, #12]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
    return tocopy + btw;
 8023a6c:	697a      	ldr	r2, [r7, #20]
 8023a6e:	687b      	ldr	r3, [r7, #4]
 8023a70:	4413      	add	r3, r2
}
 8023a72:	4618      	mov	r0, r3
 8023a74:	3720      	adds	r7, #32
 8023a76:	46bd      	mov	sp, r7
 8023a78:	bd80      	pop	{r7, pc}

08023a7a <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 8023a7a:	b480      	push	{r7}
 8023a7c:	b087      	sub	sp, #28
 8023a7e:	af00      	add	r7, sp, #0
 8023a80:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8023a82:	687b      	ldr	r3, [r7, #4]
 8023a84:	2b00      	cmp	r3, #0
 8023a86:	d007      	beq.n	8023a98 <lwrb_get_free+0x1e>
 8023a88:	687b      	ldr	r3, [r7, #4]
 8023a8a:	681b      	ldr	r3, [r3, #0]
 8023a8c:	2b00      	cmp	r3, #0
 8023a8e:	d003      	beq.n	8023a98 <lwrb_get_free+0x1e>
 8023a90:	687b      	ldr	r3, [r7, #4]
 8023a92:	685b      	ldr	r3, [r3, #4]
 8023a94:	2b00      	cmp	r3, #0
 8023a96:	d101      	bne.n	8023a9c <lwrb_get_free+0x22>
        return 0;
 8023a98:	2300      	movs	r3, #0
 8023a9a:	e01f      	b.n	8023adc <lwrb_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8023a9c:	687b      	ldr	r3, [r7, #4]
 8023a9e:	68db      	ldr	r3, [r3, #12]
 8023aa0:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8023aa2:	687b      	ldr	r3, [r7, #4]
 8023aa4:	689b      	ldr	r3, [r3, #8]
 8023aa6:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8023aa8:	693a      	ldr	r2, [r7, #16]
 8023aaa:	68fb      	ldr	r3, [r7, #12]
 8023aac:	429a      	cmp	r2, r3
 8023aae:	d103      	bne.n	8023ab8 <lwrb_get_free+0x3e>
        size = buff->size;
 8023ab0:	687b      	ldr	r3, [r7, #4]
 8023ab2:	685b      	ldr	r3, [r3, #4]
 8023ab4:	617b      	str	r3, [r7, #20]
 8023ab6:	e00f      	b.n	8023ad8 <lwrb_get_free+0x5e>
    } else if (r > w) {
 8023ab8:	68fa      	ldr	r2, [r7, #12]
 8023aba:	693b      	ldr	r3, [r7, #16]
 8023abc:	429a      	cmp	r2, r3
 8023abe:	d904      	bls.n	8023aca <lwrb_get_free+0x50>
        size = r - w;
 8023ac0:	68fa      	ldr	r2, [r7, #12]
 8023ac2:	693b      	ldr	r3, [r7, #16]
 8023ac4:	1ad3      	subs	r3, r2, r3
 8023ac6:	617b      	str	r3, [r7, #20]
 8023ac8:	e006      	b.n	8023ad8 <lwrb_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 8023aca:	687b      	ldr	r3, [r7, #4]
 8023acc:	685a      	ldr	r2, [r3, #4]
 8023ace:	68f9      	ldr	r1, [r7, #12]
 8023ad0:	693b      	ldr	r3, [r7, #16]
 8023ad2:	1acb      	subs	r3, r1, r3
 8023ad4:	4413      	add	r3, r2
 8023ad6:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8023ad8:	697b      	ldr	r3, [r7, #20]
 8023ada:	3b01      	subs	r3, #1
}
 8023adc:	4618      	mov	r0, r3
 8023ade:	371c      	adds	r7, #28
 8023ae0:	46bd      	mov	sp, r7
 8023ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ae6:	4770      	bx	lr

08023ae8 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 8023ae8:	b480      	push	{r7}
 8023aea:	b087      	sub	sp, #28
 8023aec:	af00      	add	r7, sp, #0
 8023aee:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8023af0:	687b      	ldr	r3, [r7, #4]
 8023af2:	2b00      	cmp	r3, #0
 8023af4:	d007      	beq.n	8023b06 <lwrb_get_full+0x1e>
 8023af6:	687b      	ldr	r3, [r7, #4]
 8023af8:	681b      	ldr	r3, [r3, #0]
 8023afa:	2b00      	cmp	r3, #0
 8023afc:	d003      	beq.n	8023b06 <lwrb_get_full+0x1e>
 8023afe:	687b      	ldr	r3, [r7, #4]
 8023b00:	685b      	ldr	r3, [r3, #4]
 8023b02:	2b00      	cmp	r3, #0
 8023b04:	d101      	bne.n	8023b0a <lwrb_get_full+0x22>
        return 0;
 8023b06:	2300      	movs	r3, #0
 8023b08:	e01d      	b.n	8023b46 <lwrb_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8023b0a:	687b      	ldr	r3, [r7, #4]
 8023b0c:	68db      	ldr	r3, [r3, #12]
 8023b0e:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8023b10:	687b      	ldr	r3, [r7, #4]
 8023b12:	689b      	ldr	r3, [r3, #8]
 8023b14:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8023b16:	693a      	ldr	r2, [r7, #16]
 8023b18:	68fb      	ldr	r3, [r7, #12]
 8023b1a:	429a      	cmp	r2, r3
 8023b1c:	d102      	bne.n	8023b24 <lwrb_get_full+0x3c>
        size = 0;
 8023b1e:	2300      	movs	r3, #0
 8023b20:	617b      	str	r3, [r7, #20]
 8023b22:	e00f      	b.n	8023b44 <lwrb_get_full+0x5c>
    } else if (w > r) {
 8023b24:	693a      	ldr	r2, [r7, #16]
 8023b26:	68fb      	ldr	r3, [r7, #12]
 8023b28:	429a      	cmp	r2, r3
 8023b2a:	d904      	bls.n	8023b36 <lwrb_get_full+0x4e>
        size = w - r;
 8023b2c:	693a      	ldr	r2, [r7, #16]
 8023b2e:	68fb      	ldr	r3, [r7, #12]
 8023b30:	1ad3      	subs	r3, r2, r3
 8023b32:	617b      	str	r3, [r7, #20]
 8023b34:	e006      	b.n	8023b44 <lwrb_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 8023b36:	687b      	ldr	r3, [r7, #4]
 8023b38:	685a      	ldr	r2, [r3, #4]
 8023b3a:	6939      	ldr	r1, [r7, #16]
 8023b3c:	68fb      	ldr	r3, [r7, #12]
 8023b3e:	1acb      	subs	r3, r1, r3
 8023b40:	4413      	add	r3, r2
 8023b42:	617b      	str	r3, [r7, #20]
    }
    return size;
 8023b44:	697b      	ldr	r3, [r7, #20]
}
 8023b46:	4618      	mov	r0, r3
 8023b48:	371c      	adds	r7, #28
 8023b4a:	46bd      	mov	sp, r7
 8023b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b50:	4770      	bx	lr

08023b52 <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 8023b52:	b480      	push	{r7}
 8023b54:	b083      	sub	sp, #12
 8023b56:	af00      	add	r7, sp, #0
 8023b58:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8023b5a:	687b      	ldr	r3, [r7, #4]
 8023b5c:	2b00      	cmp	r3, #0
 8023b5e:	d007      	beq.n	8023b70 <lwrb_get_linear_block_read_address+0x1e>
 8023b60:	687b      	ldr	r3, [r7, #4]
 8023b62:	681b      	ldr	r3, [r3, #0]
 8023b64:	2b00      	cmp	r3, #0
 8023b66:	d003      	beq.n	8023b70 <lwrb_get_linear_block_read_address+0x1e>
 8023b68:	687b      	ldr	r3, [r7, #4]
 8023b6a:	685b      	ldr	r3, [r3, #4]
 8023b6c:	2b00      	cmp	r3, #0
 8023b6e:	d101      	bne.n	8023b74 <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 8023b70:	2300      	movs	r3, #0
 8023b72:	e004      	b.n	8023b7e <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 8023b74:	687b      	ldr	r3, [r7, #4]
 8023b76:	681a      	ldr	r2, [r3, #0]
 8023b78:	687b      	ldr	r3, [r7, #4]
 8023b7a:	689b      	ldr	r3, [r3, #8]
 8023b7c:	4413      	add	r3, r2
}
 8023b7e:	4618      	mov	r0, r3
 8023b80:	370c      	adds	r7, #12
 8023b82:	46bd      	mov	sp, r7
 8023b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b88:	4770      	bx	lr

08023b8a <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 8023b8a:	b480      	push	{r7}
 8023b8c:	b087      	sub	sp, #28
 8023b8e:	af00      	add	r7, sp, #0
 8023b90:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8023b92:	687b      	ldr	r3, [r7, #4]
 8023b94:	2b00      	cmp	r3, #0
 8023b96:	d007      	beq.n	8023ba8 <lwrb_get_linear_block_read_length+0x1e>
 8023b98:	687b      	ldr	r3, [r7, #4]
 8023b9a:	681b      	ldr	r3, [r3, #0]
 8023b9c:	2b00      	cmp	r3, #0
 8023b9e:	d003      	beq.n	8023ba8 <lwrb_get_linear_block_read_length+0x1e>
 8023ba0:	687b      	ldr	r3, [r7, #4]
 8023ba2:	685b      	ldr	r3, [r3, #4]
 8023ba4:	2b00      	cmp	r3, #0
 8023ba6:	d101      	bne.n	8023bac <lwrb_get_linear_block_read_length+0x22>
        return 0;
 8023ba8:	2300      	movs	r3, #0
 8023baa:	e01b      	b.n	8023be4 <lwrb_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8023bac:	687b      	ldr	r3, [r7, #4]
 8023bae:	68db      	ldr	r3, [r3, #12]
 8023bb0:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8023bb2:	687b      	ldr	r3, [r7, #4]
 8023bb4:	689b      	ldr	r3, [r3, #8]
 8023bb6:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8023bb8:	693a      	ldr	r2, [r7, #16]
 8023bba:	68fb      	ldr	r3, [r7, #12]
 8023bbc:	429a      	cmp	r2, r3
 8023bbe:	d904      	bls.n	8023bca <lwrb_get_linear_block_read_length+0x40>
        len = w - r;
 8023bc0:	693a      	ldr	r2, [r7, #16]
 8023bc2:	68fb      	ldr	r3, [r7, #12]
 8023bc4:	1ad3      	subs	r3, r2, r3
 8023bc6:	617b      	str	r3, [r7, #20]
 8023bc8:	e00b      	b.n	8023be2 <lwrb_get_linear_block_read_length+0x58>
    } else if (r > w) {
 8023bca:	68fa      	ldr	r2, [r7, #12]
 8023bcc:	693b      	ldr	r3, [r7, #16]
 8023bce:	429a      	cmp	r2, r3
 8023bd0:	d905      	bls.n	8023bde <lwrb_get_linear_block_read_length+0x54>
        len = buff->size - r;
 8023bd2:	687b      	ldr	r3, [r7, #4]
 8023bd4:	685a      	ldr	r2, [r3, #4]
 8023bd6:	68fb      	ldr	r3, [r7, #12]
 8023bd8:	1ad3      	subs	r3, r2, r3
 8023bda:	617b      	str	r3, [r7, #20]
 8023bdc:	e001      	b.n	8023be2 <lwrb_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 8023bde:	2300      	movs	r3, #0
 8023be0:	617b      	str	r3, [r7, #20]
    }
    return len;
 8023be2:	697b      	ldr	r3, [r7, #20]
}
 8023be4:	4618      	mov	r0, r3
 8023be6:	371c      	adds	r7, #28
 8023be8:	46bd      	mov	sp, r7
 8023bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bee:	4770      	bx	lr

08023bf0 <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 8023bf0:	b580      	push	{r7, lr}
 8023bf2:	b084      	sub	sp, #16
 8023bf4:	af00      	add	r7, sp, #0
 8023bf6:	6078      	str	r0, [r7, #4]
 8023bf8:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8023bfa:	687b      	ldr	r3, [r7, #4]
 8023bfc:	2b00      	cmp	r3, #0
 8023bfe:	d00a      	beq.n	8023c16 <lwrb_skip+0x26>
 8023c00:	687b      	ldr	r3, [r7, #4]
 8023c02:	681b      	ldr	r3, [r3, #0]
 8023c04:	2b00      	cmp	r3, #0
 8023c06:	d006      	beq.n	8023c16 <lwrb_skip+0x26>
 8023c08:	687b      	ldr	r3, [r7, #4]
 8023c0a:	685b      	ldr	r3, [r3, #4]
 8023c0c:	2b00      	cmp	r3, #0
 8023c0e:	d002      	beq.n	8023c16 <lwrb_skip+0x26>
 8023c10:	683b      	ldr	r3, [r7, #0]
 8023c12:	2b00      	cmp	r3, #0
 8023c14:	d101      	bne.n	8023c1a <lwrb_skip+0x2a>
        return 0;
 8023c16:	2300      	movs	r3, #0
 8023c18:	e01d      	b.n	8023c56 <lwrb_skip+0x66>
    }

    full = lwrb_get_full(buff);
 8023c1a:	6878      	ldr	r0, [r7, #4]
 8023c1c:	f7ff ff64 	bl	8023ae8 <lwrb_get_full>
 8023c20:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);
 8023c22:	683a      	ldr	r2, [r7, #0]
 8023c24:	68fb      	ldr	r3, [r7, #12]
 8023c26:	4293      	cmp	r3, r2
 8023c28:	bf28      	it	cs
 8023c2a:	4613      	movcs	r3, r2
 8023c2c:	603b      	str	r3, [r7, #0]
    buff->r += len;
 8023c2e:	687b      	ldr	r3, [r7, #4]
 8023c30:	689a      	ldr	r2, [r3, #8]
 8023c32:	683b      	ldr	r3, [r7, #0]
 8023c34:	441a      	add	r2, r3
 8023c36:	687b      	ldr	r3, [r7, #4]
 8023c38:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {
 8023c3a:	687b      	ldr	r3, [r7, #4]
 8023c3c:	689a      	ldr	r2, [r3, #8]
 8023c3e:	687b      	ldr	r3, [r7, #4]
 8023c40:	685b      	ldr	r3, [r3, #4]
 8023c42:	429a      	cmp	r2, r3
 8023c44:	d306      	bcc.n	8023c54 <lwrb_skip+0x64>
        buff->r -= buff->size;
 8023c46:	687b      	ldr	r3, [r7, #4]
 8023c48:	689a      	ldr	r2, [r3, #8]
 8023c4a:	687b      	ldr	r3, [r7, #4]
 8023c4c:	685b      	ldr	r3, [r3, #4]
 8023c4e:	1ad2      	subs	r2, r2, r3
 8023c50:	687b      	ldr	r3, [r7, #4]
 8023c52:	609a      	str	r2, [r3, #8]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
    return len;
 8023c54:	683b      	ldr	r3, [r7, #0]
}
 8023c56:	4618      	mov	r0, r3
 8023c58:	3710      	adds	r7, #16
 8023c5a:	46bd      	mov	sp, r7
 8023c5c:	bd80      	pop	{r7, pc}
	...

08023c60 <malloc>:
 8023c60:	4b02      	ldr	r3, [pc, #8]	; (8023c6c <malloc+0xc>)
 8023c62:	4601      	mov	r1, r0
 8023c64:	6818      	ldr	r0, [r3, #0]
 8023c66:	f000 b823 	b.w	8023cb0 <_malloc_r>
 8023c6a:	bf00      	nop
 8023c6c:	20050128 	.word	0x20050128

08023c70 <sbrk_aligned>:
 8023c70:	b570      	push	{r4, r5, r6, lr}
 8023c72:	4e0e      	ldr	r6, [pc, #56]	; (8023cac <sbrk_aligned+0x3c>)
 8023c74:	460c      	mov	r4, r1
 8023c76:	4605      	mov	r5, r0
 8023c78:	6831      	ldr	r1, [r6, #0]
 8023c7a:	b911      	cbnz	r1, 8023c82 <sbrk_aligned+0x12>
 8023c7c:	f000 fbc6 	bl	802440c <_sbrk_r>
 8023c80:	6030      	str	r0, [r6, #0]
 8023c82:	4621      	mov	r1, r4
 8023c84:	4628      	mov	r0, r5
 8023c86:	f000 fbc1 	bl	802440c <_sbrk_r>
 8023c8a:	1c43      	adds	r3, r0, #1
 8023c8c:	d00a      	beq.n	8023ca4 <sbrk_aligned+0x34>
 8023c8e:	1cc4      	adds	r4, r0, #3
 8023c90:	f024 0403 	bic.w	r4, r4, #3
 8023c94:	42a0      	cmp	r0, r4
 8023c96:	d007      	beq.n	8023ca8 <sbrk_aligned+0x38>
 8023c98:	1a21      	subs	r1, r4, r0
 8023c9a:	4628      	mov	r0, r5
 8023c9c:	f000 fbb6 	bl	802440c <_sbrk_r>
 8023ca0:	3001      	adds	r0, #1
 8023ca2:	d101      	bne.n	8023ca8 <sbrk_aligned+0x38>
 8023ca4:	f04f 34ff 	mov.w	r4, #4294967295
 8023ca8:	4620      	mov	r0, r4
 8023caa:	bd70      	pop	{r4, r5, r6, pc}
 8023cac:	2007ef24 	.word	0x2007ef24

08023cb0 <_malloc_r>:
 8023cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023cb4:	1ccd      	adds	r5, r1, #3
 8023cb6:	4607      	mov	r7, r0
 8023cb8:	f025 0503 	bic.w	r5, r5, #3
 8023cbc:	3508      	adds	r5, #8
 8023cbe:	2d0c      	cmp	r5, #12
 8023cc0:	bf38      	it	cc
 8023cc2:	250c      	movcc	r5, #12
 8023cc4:	2d00      	cmp	r5, #0
 8023cc6:	db01      	blt.n	8023ccc <_malloc_r+0x1c>
 8023cc8:	42a9      	cmp	r1, r5
 8023cca:	d905      	bls.n	8023cd8 <_malloc_r+0x28>
 8023ccc:	230c      	movs	r3, #12
 8023cce:	2600      	movs	r6, #0
 8023cd0:	603b      	str	r3, [r7, #0]
 8023cd2:	4630      	mov	r0, r6
 8023cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023cd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8023dac <_malloc_r+0xfc>
 8023cdc:	f000 f868 	bl	8023db0 <__malloc_lock>
 8023ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8023ce4:	461c      	mov	r4, r3
 8023ce6:	bb5c      	cbnz	r4, 8023d40 <_malloc_r+0x90>
 8023ce8:	4629      	mov	r1, r5
 8023cea:	4638      	mov	r0, r7
 8023cec:	f7ff ffc0 	bl	8023c70 <sbrk_aligned>
 8023cf0:	1c43      	adds	r3, r0, #1
 8023cf2:	4604      	mov	r4, r0
 8023cf4:	d155      	bne.n	8023da2 <_malloc_r+0xf2>
 8023cf6:	f8d8 4000 	ldr.w	r4, [r8]
 8023cfa:	4626      	mov	r6, r4
 8023cfc:	2e00      	cmp	r6, #0
 8023cfe:	d145      	bne.n	8023d8c <_malloc_r+0xdc>
 8023d00:	2c00      	cmp	r4, #0
 8023d02:	d048      	beq.n	8023d96 <_malloc_r+0xe6>
 8023d04:	6823      	ldr	r3, [r4, #0]
 8023d06:	4631      	mov	r1, r6
 8023d08:	4638      	mov	r0, r7
 8023d0a:	eb04 0903 	add.w	r9, r4, r3
 8023d0e:	f000 fb7d 	bl	802440c <_sbrk_r>
 8023d12:	4581      	cmp	r9, r0
 8023d14:	d13f      	bne.n	8023d96 <_malloc_r+0xe6>
 8023d16:	6821      	ldr	r1, [r4, #0]
 8023d18:	4638      	mov	r0, r7
 8023d1a:	1a6d      	subs	r5, r5, r1
 8023d1c:	4629      	mov	r1, r5
 8023d1e:	f7ff ffa7 	bl	8023c70 <sbrk_aligned>
 8023d22:	3001      	adds	r0, #1
 8023d24:	d037      	beq.n	8023d96 <_malloc_r+0xe6>
 8023d26:	6823      	ldr	r3, [r4, #0]
 8023d28:	442b      	add	r3, r5
 8023d2a:	6023      	str	r3, [r4, #0]
 8023d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8023d30:	2b00      	cmp	r3, #0
 8023d32:	d038      	beq.n	8023da6 <_malloc_r+0xf6>
 8023d34:	685a      	ldr	r2, [r3, #4]
 8023d36:	42a2      	cmp	r2, r4
 8023d38:	d12b      	bne.n	8023d92 <_malloc_r+0xe2>
 8023d3a:	2200      	movs	r2, #0
 8023d3c:	605a      	str	r2, [r3, #4]
 8023d3e:	e00f      	b.n	8023d60 <_malloc_r+0xb0>
 8023d40:	6822      	ldr	r2, [r4, #0]
 8023d42:	1b52      	subs	r2, r2, r5
 8023d44:	d41f      	bmi.n	8023d86 <_malloc_r+0xd6>
 8023d46:	2a0b      	cmp	r2, #11
 8023d48:	d917      	bls.n	8023d7a <_malloc_r+0xca>
 8023d4a:	1961      	adds	r1, r4, r5
 8023d4c:	42a3      	cmp	r3, r4
 8023d4e:	6025      	str	r5, [r4, #0]
 8023d50:	bf18      	it	ne
 8023d52:	6059      	strne	r1, [r3, #4]
 8023d54:	6863      	ldr	r3, [r4, #4]
 8023d56:	bf08      	it	eq
 8023d58:	f8c8 1000 	streq.w	r1, [r8]
 8023d5c:	5162      	str	r2, [r4, r5]
 8023d5e:	604b      	str	r3, [r1, #4]
 8023d60:	f104 060b 	add.w	r6, r4, #11
 8023d64:	4638      	mov	r0, r7
 8023d66:	f000 f829 	bl	8023dbc <__malloc_unlock>
 8023d6a:	1d23      	adds	r3, r4, #4
 8023d6c:	f026 0607 	bic.w	r6, r6, #7
 8023d70:	1af2      	subs	r2, r6, r3
 8023d72:	d0ae      	beq.n	8023cd2 <_malloc_r+0x22>
 8023d74:	1b9b      	subs	r3, r3, r6
 8023d76:	50a3      	str	r3, [r4, r2]
 8023d78:	e7ab      	b.n	8023cd2 <_malloc_r+0x22>
 8023d7a:	42a3      	cmp	r3, r4
 8023d7c:	6862      	ldr	r2, [r4, #4]
 8023d7e:	d1dd      	bne.n	8023d3c <_malloc_r+0x8c>
 8023d80:	f8c8 2000 	str.w	r2, [r8]
 8023d84:	e7ec      	b.n	8023d60 <_malloc_r+0xb0>
 8023d86:	4623      	mov	r3, r4
 8023d88:	6864      	ldr	r4, [r4, #4]
 8023d8a:	e7ac      	b.n	8023ce6 <_malloc_r+0x36>
 8023d8c:	4634      	mov	r4, r6
 8023d8e:	6876      	ldr	r6, [r6, #4]
 8023d90:	e7b4      	b.n	8023cfc <_malloc_r+0x4c>
 8023d92:	4613      	mov	r3, r2
 8023d94:	e7cc      	b.n	8023d30 <_malloc_r+0x80>
 8023d96:	230c      	movs	r3, #12
 8023d98:	4638      	mov	r0, r7
 8023d9a:	603b      	str	r3, [r7, #0]
 8023d9c:	f000 f80e 	bl	8023dbc <__malloc_unlock>
 8023da0:	e797      	b.n	8023cd2 <_malloc_r+0x22>
 8023da2:	6025      	str	r5, [r4, #0]
 8023da4:	e7dc      	b.n	8023d60 <_malloc_r+0xb0>
 8023da6:	605b      	str	r3, [r3, #4]
 8023da8:	deff      	udf	#255	; 0xff
 8023daa:	bf00      	nop
 8023dac:	2007ef20 	.word	0x2007ef20

08023db0 <__malloc_lock>:
 8023db0:	4801      	ldr	r0, [pc, #4]	; (8023db8 <__malloc_lock+0x8>)
 8023db2:	f000 bb72 	b.w	802449a <__retarget_lock_acquire_recursive>
 8023db6:	bf00      	nop
 8023db8:	2007f068 	.word	0x2007f068

08023dbc <__malloc_unlock>:
 8023dbc:	4801      	ldr	r0, [pc, #4]	; (8023dc4 <__malloc_unlock+0x8>)
 8023dbe:	f000 bb6d 	b.w	802449c <__retarget_lock_release_recursive>
 8023dc2:	bf00      	nop
 8023dc4:	2007f068 	.word	0x2007f068

08023dc8 <rand>:
 8023dc8:	4b16      	ldr	r3, [pc, #88]	; (8023e24 <rand+0x5c>)
 8023dca:	b510      	push	{r4, lr}
 8023dcc:	681c      	ldr	r4, [r3, #0]
 8023dce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023dd0:	b9b3      	cbnz	r3, 8023e00 <rand+0x38>
 8023dd2:	2018      	movs	r0, #24
 8023dd4:	f7ff ff44 	bl	8023c60 <malloc>
 8023dd8:	4602      	mov	r2, r0
 8023dda:	6320      	str	r0, [r4, #48]	; 0x30
 8023ddc:	b920      	cbnz	r0, 8023de8 <rand+0x20>
 8023dde:	4b12      	ldr	r3, [pc, #72]	; (8023e28 <rand+0x60>)
 8023de0:	2152      	movs	r1, #82	; 0x52
 8023de2:	4812      	ldr	r0, [pc, #72]	; (8023e2c <rand+0x64>)
 8023de4:	f000 fb68 	bl	80244b8 <__assert_func>
 8023de8:	4911      	ldr	r1, [pc, #68]	; (8023e30 <rand+0x68>)
 8023dea:	4b12      	ldr	r3, [pc, #72]	; (8023e34 <rand+0x6c>)
 8023dec:	e9c0 1300 	strd	r1, r3, [r0]
 8023df0:	4b11      	ldr	r3, [pc, #68]	; (8023e38 <rand+0x70>)
 8023df2:	2100      	movs	r1, #0
 8023df4:	6083      	str	r3, [r0, #8]
 8023df6:	230b      	movs	r3, #11
 8023df8:	8183      	strh	r3, [r0, #12]
 8023dfa:	2001      	movs	r0, #1
 8023dfc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8023e00:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8023e02:	480e      	ldr	r0, [pc, #56]	; (8023e3c <rand+0x74>)
 8023e04:	690b      	ldr	r3, [r1, #16]
 8023e06:	694c      	ldr	r4, [r1, #20]
 8023e08:	4a0d      	ldr	r2, [pc, #52]	; (8023e40 <rand+0x78>)
 8023e0a:	4358      	muls	r0, r3
 8023e0c:	fb02 0004 	mla	r0, r2, r4, r0
 8023e10:	fba3 3202 	umull	r3, r2, r3, r2
 8023e14:	3301      	adds	r3, #1
 8023e16:	eb40 0002 	adc.w	r0, r0, r2
 8023e1a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8023e1e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8023e22:	bd10      	pop	{r4, pc}
 8023e24:	20050128 	.word	0x20050128
 8023e28:	08029b46 	.word	0x08029b46
 8023e2c:	08029b5d 	.word	0x08029b5d
 8023e30:	abcd330e 	.word	0xabcd330e
 8023e34:	e66d1234 	.word	0xe66d1234
 8023e38:	0005deec 	.word	0x0005deec
 8023e3c:	5851f42d 	.word	0x5851f42d
 8023e40:	4c957f2d 	.word	0x4c957f2d

08023e44 <std>:
 8023e44:	2300      	movs	r3, #0
 8023e46:	b510      	push	{r4, lr}
 8023e48:	4604      	mov	r4, r0
 8023e4a:	6083      	str	r3, [r0, #8]
 8023e4c:	8181      	strh	r1, [r0, #12]
 8023e4e:	4619      	mov	r1, r3
 8023e50:	6643      	str	r3, [r0, #100]	; 0x64
 8023e52:	81c2      	strh	r2, [r0, #14]
 8023e54:	2208      	movs	r2, #8
 8023e56:	6183      	str	r3, [r0, #24]
 8023e58:	e9c0 3300 	strd	r3, r3, [r0]
 8023e5c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023e60:	305c      	adds	r0, #92	; 0x5c
 8023e62:	f000 fa83 	bl	802436c <memset>
 8023e66:	4b0d      	ldr	r3, [pc, #52]	; (8023e9c <std+0x58>)
 8023e68:	6224      	str	r4, [r4, #32]
 8023e6a:	6263      	str	r3, [r4, #36]	; 0x24
 8023e6c:	4b0c      	ldr	r3, [pc, #48]	; (8023ea0 <std+0x5c>)
 8023e6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8023e70:	4b0c      	ldr	r3, [pc, #48]	; (8023ea4 <std+0x60>)
 8023e72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023e74:	4b0c      	ldr	r3, [pc, #48]	; (8023ea8 <std+0x64>)
 8023e76:	6323      	str	r3, [r4, #48]	; 0x30
 8023e78:	4b0c      	ldr	r3, [pc, #48]	; (8023eac <std+0x68>)
 8023e7a:	429c      	cmp	r4, r3
 8023e7c:	d006      	beq.n	8023e8c <std+0x48>
 8023e7e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8023e82:	4294      	cmp	r4, r2
 8023e84:	d002      	beq.n	8023e8c <std+0x48>
 8023e86:	33d0      	adds	r3, #208	; 0xd0
 8023e88:	429c      	cmp	r4, r3
 8023e8a:	d105      	bne.n	8023e98 <std+0x54>
 8023e8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023e94:	f000 bb00 	b.w	8024498 <__retarget_lock_init_recursive>
 8023e98:	bd10      	pop	{r4, pc}
 8023e9a:	bf00      	nop
 8023e9c:	080240b5 	.word	0x080240b5
 8023ea0:	080240d7 	.word	0x080240d7
 8023ea4:	0802410f 	.word	0x0802410f
 8023ea8:	08024133 	.word	0x08024133
 8023eac:	2007ef28 	.word	0x2007ef28

08023eb0 <stdio_exit_handler>:
 8023eb0:	4a02      	ldr	r2, [pc, #8]	; (8023ebc <stdio_exit_handler+0xc>)
 8023eb2:	4903      	ldr	r1, [pc, #12]	; (8023ec0 <stdio_exit_handler+0x10>)
 8023eb4:	4803      	ldr	r0, [pc, #12]	; (8023ec4 <stdio_exit_handler+0x14>)
 8023eb6:	f000 b869 	b.w	8023f8c <_fwalk_sglue>
 8023eba:	bf00      	nop
 8023ebc:	200500d0 	.word	0x200500d0
 8023ec0:	08024ef1 	.word	0x08024ef1
 8023ec4:	200500dc 	.word	0x200500dc

08023ec8 <cleanup_stdio>:
 8023ec8:	6841      	ldr	r1, [r0, #4]
 8023eca:	4b0c      	ldr	r3, [pc, #48]	; (8023efc <cleanup_stdio+0x34>)
 8023ecc:	4299      	cmp	r1, r3
 8023ece:	b510      	push	{r4, lr}
 8023ed0:	4604      	mov	r4, r0
 8023ed2:	d001      	beq.n	8023ed8 <cleanup_stdio+0x10>
 8023ed4:	f001 f80c 	bl	8024ef0 <_fflush_r>
 8023ed8:	68a1      	ldr	r1, [r4, #8]
 8023eda:	4b09      	ldr	r3, [pc, #36]	; (8023f00 <cleanup_stdio+0x38>)
 8023edc:	4299      	cmp	r1, r3
 8023ede:	d002      	beq.n	8023ee6 <cleanup_stdio+0x1e>
 8023ee0:	4620      	mov	r0, r4
 8023ee2:	f001 f805 	bl	8024ef0 <_fflush_r>
 8023ee6:	68e1      	ldr	r1, [r4, #12]
 8023ee8:	4b06      	ldr	r3, [pc, #24]	; (8023f04 <cleanup_stdio+0x3c>)
 8023eea:	4299      	cmp	r1, r3
 8023eec:	d004      	beq.n	8023ef8 <cleanup_stdio+0x30>
 8023eee:	4620      	mov	r0, r4
 8023ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023ef4:	f000 bffc 	b.w	8024ef0 <_fflush_r>
 8023ef8:	bd10      	pop	{r4, pc}
 8023efa:	bf00      	nop
 8023efc:	2007ef28 	.word	0x2007ef28
 8023f00:	2007ef90 	.word	0x2007ef90
 8023f04:	2007eff8 	.word	0x2007eff8

08023f08 <global_stdio_init.part.0>:
 8023f08:	b510      	push	{r4, lr}
 8023f0a:	4b0b      	ldr	r3, [pc, #44]	; (8023f38 <global_stdio_init.part.0+0x30>)
 8023f0c:	2104      	movs	r1, #4
 8023f0e:	4c0b      	ldr	r4, [pc, #44]	; (8023f3c <global_stdio_init.part.0+0x34>)
 8023f10:	4a0b      	ldr	r2, [pc, #44]	; (8023f40 <global_stdio_init.part.0+0x38>)
 8023f12:	4620      	mov	r0, r4
 8023f14:	601a      	str	r2, [r3, #0]
 8023f16:	2200      	movs	r2, #0
 8023f18:	f7ff ff94 	bl	8023e44 <std>
 8023f1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8023f20:	2201      	movs	r2, #1
 8023f22:	2109      	movs	r1, #9
 8023f24:	f7ff ff8e 	bl	8023e44 <std>
 8023f28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8023f2c:	2202      	movs	r2, #2
 8023f2e:	2112      	movs	r1, #18
 8023f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023f34:	f7ff bf86 	b.w	8023e44 <std>
 8023f38:	2007f060 	.word	0x2007f060
 8023f3c:	2007ef28 	.word	0x2007ef28
 8023f40:	08023eb1 	.word	0x08023eb1

08023f44 <__sfp_lock_acquire>:
 8023f44:	4801      	ldr	r0, [pc, #4]	; (8023f4c <__sfp_lock_acquire+0x8>)
 8023f46:	f000 baa8 	b.w	802449a <__retarget_lock_acquire_recursive>
 8023f4a:	bf00      	nop
 8023f4c:	2007f069 	.word	0x2007f069

08023f50 <__sfp_lock_release>:
 8023f50:	4801      	ldr	r0, [pc, #4]	; (8023f58 <__sfp_lock_release+0x8>)
 8023f52:	f000 baa3 	b.w	802449c <__retarget_lock_release_recursive>
 8023f56:	bf00      	nop
 8023f58:	2007f069 	.word	0x2007f069

08023f5c <__sinit>:
 8023f5c:	b510      	push	{r4, lr}
 8023f5e:	4604      	mov	r4, r0
 8023f60:	f7ff fff0 	bl	8023f44 <__sfp_lock_acquire>
 8023f64:	6a23      	ldr	r3, [r4, #32]
 8023f66:	b11b      	cbz	r3, 8023f70 <__sinit+0x14>
 8023f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023f6c:	f7ff bff0 	b.w	8023f50 <__sfp_lock_release>
 8023f70:	4b04      	ldr	r3, [pc, #16]	; (8023f84 <__sinit+0x28>)
 8023f72:	6223      	str	r3, [r4, #32]
 8023f74:	4b04      	ldr	r3, [pc, #16]	; (8023f88 <__sinit+0x2c>)
 8023f76:	681b      	ldr	r3, [r3, #0]
 8023f78:	2b00      	cmp	r3, #0
 8023f7a:	d1f5      	bne.n	8023f68 <__sinit+0xc>
 8023f7c:	f7ff ffc4 	bl	8023f08 <global_stdio_init.part.0>
 8023f80:	e7f2      	b.n	8023f68 <__sinit+0xc>
 8023f82:	bf00      	nop
 8023f84:	08023ec9 	.word	0x08023ec9
 8023f88:	2007f060 	.word	0x2007f060

08023f8c <_fwalk_sglue>:
 8023f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023f90:	4607      	mov	r7, r0
 8023f92:	4688      	mov	r8, r1
 8023f94:	4614      	mov	r4, r2
 8023f96:	2600      	movs	r6, #0
 8023f98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023f9c:	f1b9 0901 	subs.w	r9, r9, #1
 8023fa0:	d505      	bpl.n	8023fae <_fwalk_sglue+0x22>
 8023fa2:	6824      	ldr	r4, [r4, #0]
 8023fa4:	2c00      	cmp	r4, #0
 8023fa6:	d1f7      	bne.n	8023f98 <_fwalk_sglue+0xc>
 8023fa8:	4630      	mov	r0, r6
 8023faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023fae:	89ab      	ldrh	r3, [r5, #12]
 8023fb0:	2b01      	cmp	r3, #1
 8023fb2:	d907      	bls.n	8023fc4 <_fwalk_sglue+0x38>
 8023fb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023fb8:	3301      	adds	r3, #1
 8023fba:	d003      	beq.n	8023fc4 <_fwalk_sglue+0x38>
 8023fbc:	4629      	mov	r1, r5
 8023fbe:	4638      	mov	r0, r7
 8023fc0:	47c0      	blx	r8
 8023fc2:	4306      	orrs	r6, r0
 8023fc4:	3568      	adds	r5, #104	; 0x68
 8023fc6:	e7e9      	b.n	8023f9c <_fwalk_sglue+0x10>

08023fc8 <iprintf>:
 8023fc8:	b40f      	push	{r0, r1, r2, r3}
 8023fca:	b507      	push	{r0, r1, r2, lr}
 8023fcc:	4906      	ldr	r1, [pc, #24]	; (8023fe8 <iprintf+0x20>)
 8023fce:	ab04      	add	r3, sp, #16
 8023fd0:	6808      	ldr	r0, [r1, #0]
 8023fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8023fd6:	6881      	ldr	r1, [r0, #8]
 8023fd8:	9301      	str	r3, [sp, #4]
 8023fda:	f000 fc59 	bl	8024890 <_vfiprintf_r>
 8023fde:	b003      	add	sp, #12
 8023fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8023fe4:	b004      	add	sp, #16
 8023fe6:	4770      	bx	lr
 8023fe8:	20050128 	.word	0x20050128

08023fec <putchar>:
 8023fec:	4b02      	ldr	r3, [pc, #8]	; (8023ff8 <putchar+0xc>)
 8023fee:	4601      	mov	r1, r0
 8023ff0:	6818      	ldr	r0, [r3, #0]
 8023ff2:	6882      	ldr	r2, [r0, #8]
 8023ff4:	f001 b817 	b.w	8025026 <_putc_r>
 8023ff8:	20050128 	.word	0x20050128

08023ffc <_puts_r>:
 8023ffc:	6a03      	ldr	r3, [r0, #32]
 8023ffe:	b570      	push	{r4, r5, r6, lr}
 8024000:	4605      	mov	r5, r0
 8024002:	460e      	mov	r6, r1
 8024004:	6884      	ldr	r4, [r0, #8]
 8024006:	b90b      	cbnz	r3, 802400c <_puts_r+0x10>
 8024008:	f7ff ffa8 	bl	8023f5c <__sinit>
 802400c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802400e:	07db      	lsls	r3, r3, #31
 8024010:	d405      	bmi.n	802401e <_puts_r+0x22>
 8024012:	89a3      	ldrh	r3, [r4, #12]
 8024014:	0598      	lsls	r0, r3, #22
 8024016:	d402      	bmi.n	802401e <_puts_r+0x22>
 8024018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802401a:	f000 fa3e 	bl	802449a <__retarget_lock_acquire_recursive>
 802401e:	89a3      	ldrh	r3, [r4, #12]
 8024020:	0719      	lsls	r1, r3, #28
 8024022:	d513      	bpl.n	802404c <_puts_r+0x50>
 8024024:	6923      	ldr	r3, [r4, #16]
 8024026:	b18b      	cbz	r3, 802404c <_puts_r+0x50>
 8024028:	3e01      	subs	r6, #1
 802402a:	68a3      	ldr	r3, [r4, #8]
 802402c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8024030:	3b01      	subs	r3, #1
 8024032:	60a3      	str	r3, [r4, #8]
 8024034:	b9e9      	cbnz	r1, 8024072 <_puts_r+0x76>
 8024036:	2b00      	cmp	r3, #0
 8024038:	da2e      	bge.n	8024098 <_puts_r+0x9c>
 802403a:	4622      	mov	r2, r4
 802403c:	210a      	movs	r1, #10
 802403e:	4628      	mov	r0, r5
 8024040:	f000 f8d4 	bl	80241ec <__swbuf_r>
 8024044:	3001      	adds	r0, #1
 8024046:	d007      	beq.n	8024058 <_puts_r+0x5c>
 8024048:	250a      	movs	r5, #10
 802404a:	e007      	b.n	802405c <_puts_r+0x60>
 802404c:	4621      	mov	r1, r4
 802404e:	4628      	mov	r0, r5
 8024050:	f000 f90a 	bl	8024268 <__swsetup_r>
 8024054:	2800      	cmp	r0, #0
 8024056:	d0e7      	beq.n	8024028 <_puts_r+0x2c>
 8024058:	f04f 35ff 	mov.w	r5, #4294967295
 802405c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802405e:	07da      	lsls	r2, r3, #31
 8024060:	d405      	bmi.n	802406e <_puts_r+0x72>
 8024062:	89a3      	ldrh	r3, [r4, #12]
 8024064:	059b      	lsls	r3, r3, #22
 8024066:	d402      	bmi.n	802406e <_puts_r+0x72>
 8024068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802406a:	f000 fa17 	bl	802449c <__retarget_lock_release_recursive>
 802406e:	4628      	mov	r0, r5
 8024070:	bd70      	pop	{r4, r5, r6, pc}
 8024072:	2b00      	cmp	r3, #0
 8024074:	da04      	bge.n	8024080 <_puts_r+0x84>
 8024076:	69a2      	ldr	r2, [r4, #24]
 8024078:	429a      	cmp	r2, r3
 802407a:	dc06      	bgt.n	802408a <_puts_r+0x8e>
 802407c:	290a      	cmp	r1, #10
 802407e:	d004      	beq.n	802408a <_puts_r+0x8e>
 8024080:	6823      	ldr	r3, [r4, #0]
 8024082:	1c5a      	adds	r2, r3, #1
 8024084:	6022      	str	r2, [r4, #0]
 8024086:	7019      	strb	r1, [r3, #0]
 8024088:	e7cf      	b.n	802402a <_puts_r+0x2e>
 802408a:	4622      	mov	r2, r4
 802408c:	4628      	mov	r0, r5
 802408e:	f000 f8ad 	bl	80241ec <__swbuf_r>
 8024092:	3001      	adds	r0, #1
 8024094:	d1c9      	bne.n	802402a <_puts_r+0x2e>
 8024096:	e7df      	b.n	8024058 <_puts_r+0x5c>
 8024098:	6823      	ldr	r3, [r4, #0]
 802409a:	250a      	movs	r5, #10
 802409c:	1c5a      	adds	r2, r3, #1
 802409e:	6022      	str	r2, [r4, #0]
 80240a0:	701d      	strb	r5, [r3, #0]
 80240a2:	e7db      	b.n	802405c <_puts_r+0x60>

080240a4 <puts>:
 80240a4:	4b02      	ldr	r3, [pc, #8]	; (80240b0 <puts+0xc>)
 80240a6:	4601      	mov	r1, r0
 80240a8:	6818      	ldr	r0, [r3, #0]
 80240aa:	f7ff bfa7 	b.w	8023ffc <_puts_r>
 80240ae:	bf00      	nop
 80240b0:	20050128 	.word	0x20050128

080240b4 <__sread>:
 80240b4:	b510      	push	{r4, lr}
 80240b6:	460c      	mov	r4, r1
 80240b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80240bc:	f000 f994 	bl	80243e8 <_read_r>
 80240c0:	2800      	cmp	r0, #0
 80240c2:	bfab      	itete	ge
 80240c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80240c6:	89a3      	ldrhlt	r3, [r4, #12]
 80240c8:	181b      	addge	r3, r3, r0
 80240ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80240ce:	bfac      	ite	ge
 80240d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80240d2:	81a3      	strhlt	r3, [r4, #12]
 80240d4:	bd10      	pop	{r4, pc}

080240d6 <__swrite>:
 80240d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80240da:	461f      	mov	r7, r3
 80240dc:	898b      	ldrh	r3, [r1, #12]
 80240de:	4605      	mov	r5, r0
 80240e0:	460c      	mov	r4, r1
 80240e2:	05db      	lsls	r3, r3, #23
 80240e4:	4616      	mov	r6, r2
 80240e6:	d505      	bpl.n	80240f4 <__swrite+0x1e>
 80240e8:	2302      	movs	r3, #2
 80240ea:	2200      	movs	r2, #0
 80240ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80240f0:	f000 f968 	bl	80243c4 <_lseek_r>
 80240f4:	89a3      	ldrh	r3, [r4, #12]
 80240f6:	4632      	mov	r2, r6
 80240f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80240fc:	4628      	mov	r0, r5
 80240fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024102:	81a3      	strh	r3, [r4, #12]
 8024104:	463b      	mov	r3, r7
 8024106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802410a:	f000 b98f 	b.w	802442c <_write_r>

0802410e <__sseek>:
 802410e:	b510      	push	{r4, lr}
 8024110:	460c      	mov	r4, r1
 8024112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024116:	f000 f955 	bl	80243c4 <_lseek_r>
 802411a:	1c43      	adds	r3, r0, #1
 802411c:	89a3      	ldrh	r3, [r4, #12]
 802411e:	bf15      	itete	ne
 8024120:	6560      	strne	r0, [r4, #84]	; 0x54
 8024122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802412a:	81a3      	strheq	r3, [r4, #12]
 802412c:	bf18      	it	ne
 802412e:	81a3      	strhne	r3, [r4, #12]
 8024130:	bd10      	pop	{r4, pc}

08024132 <__sclose>:
 8024132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024136:	f000 b935 	b.w	80243a4 <_close_r>

0802413a <_vsniprintf_r>:
 802413a:	b530      	push	{r4, r5, lr}
 802413c:	4614      	mov	r4, r2
 802413e:	b09b      	sub	sp, #108	; 0x6c
 8024140:	4605      	mov	r5, r0
 8024142:	461a      	mov	r2, r3
 8024144:	2c00      	cmp	r4, #0
 8024146:	da05      	bge.n	8024154 <_vsniprintf_r+0x1a>
 8024148:	238b      	movs	r3, #139	; 0x8b
 802414a:	6003      	str	r3, [r0, #0]
 802414c:	f04f 30ff 	mov.w	r0, #4294967295
 8024150:	b01b      	add	sp, #108	; 0x6c
 8024152:	bd30      	pop	{r4, r5, pc}
 8024154:	f44f 7302 	mov.w	r3, #520	; 0x208
 8024158:	9100      	str	r1, [sp, #0]
 802415a:	9104      	str	r1, [sp, #16]
 802415c:	4669      	mov	r1, sp
 802415e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8024162:	bf14      	ite	ne
 8024164:	f104 33ff 	addne.w	r3, r4, #4294967295
 8024168:	4623      	moveq	r3, r4
 802416a:	9302      	str	r3, [sp, #8]
 802416c:	9305      	str	r3, [sp, #20]
 802416e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024172:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024176:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024178:	f000 fa62 	bl	8024640 <_svfiprintf_r>
 802417c:	1c43      	adds	r3, r0, #1
 802417e:	bfbc      	itt	lt
 8024180:	238b      	movlt	r3, #139	; 0x8b
 8024182:	602b      	strlt	r3, [r5, #0]
 8024184:	2c00      	cmp	r4, #0
 8024186:	d0e3      	beq.n	8024150 <_vsniprintf_r+0x16>
 8024188:	9b00      	ldr	r3, [sp, #0]
 802418a:	2200      	movs	r2, #0
 802418c:	701a      	strb	r2, [r3, #0]
 802418e:	e7df      	b.n	8024150 <_vsniprintf_r+0x16>

08024190 <vsniprintf>:
 8024190:	b507      	push	{r0, r1, r2, lr}
 8024192:	9300      	str	r3, [sp, #0]
 8024194:	4613      	mov	r3, r2
 8024196:	460a      	mov	r2, r1
 8024198:	4601      	mov	r1, r0
 802419a:	4803      	ldr	r0, [pc, #12]	; (80241a8 <vsniprintf+0x18>)
 802419c:	6800      	ldr	r0, [r0, #0]
 802419e:	f7ff ffcc 	bl	802413a <_vsniprintf_r>
 80241a2:	b003      	add	sp, #12
 80241a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80241a8:	20050128 	.word	0x20050128

080241ac <_vsiprintf_r>:
 80241ac:	b500      	push	{lr}
 80241ae:	b09b      	sub	sp, #108	; 0x6c
 80241b0:	9100      	str	r1, [sp, #0]
 80241b2:	9104      	str	r1, [sp, #16]
 80241b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80241b8:	9105      	str	r1, [sp, #20]
 80241ba:	9102      	str	r1, [sp, #8]
 80241bc:	4905      	ldr	r1, [pc, #20]	; (80241d4 <_vsiprintf_r+0x28>)
 80241be:	9103      	str	r1, [sp, #12]
 80241c0:	4669      	mov	r1, sp
 80241c2:	f000 fa3d 	bl	8024640 <_svfiprintf_r>
 80241c6:	9b00      	ldr	r3, [sp, #0]
 80241c8:	2200      	movs	r2, #0
 80241ca:	701a      	strb	r2, [r3, #0]
 80241cc:	b01b      	add	sp, #108	; 0x6c
 80241ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80241d2:	bf00      	nop
 80241d4:	ffff0208 	.word	0xffff0208

080241d8 <vsiprintf>:
 80241d8:	4613      	mov	r3, r2
 80241da:	460a      	mov	r2, r1
 80241dc:	4601      	mov	r1, r0
 80241de:	4802      	ldr	r0, [pc, #8]	; (80241e8 <vsiprintf+0x10>)
 80241e0:	6800      	ldr	r0, [r0, #0]
 80241e2:	f7ff bfe3 	b.w	80241ac <_vsiprintf_r>
 80241e6:	bf00      	nop
 80241e8:	20050128 	.word	0x20050128

080241ec <__swbuf_r>:
 80241ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80241ee:	460e      	mov	r6, r1
 80241f0:	4614      	mov	r4, r2
 80241f2:	4605      	mov	r5, r0
 80241f4:	b118      	cbz	r0, 80241fe <__swbuf_r+0x12>
 80241f6:	6a03      	ldr	r3, [r0, #32]
 80241f8:	b90b      	cbnz	r3, 80241fe <__swbuf_r+0x12>
 80241fa:	f7ff feaf 	bl	8023f5c <__sinit>
 80241fe:	69a3      	ldr	r3, [r4, #24]
 8024200:	60a3      	str	r3, [r4, #8]
 8024202:	89a3      	ldrh	r3, [r4, #12]
 8024204:	071a      	lsls	r2, r3, #28
 8024206:	d525      	bpl.n	8024254 <__swbuf_r+0x68>
 8024208:	6923      	ldr	r3, [r4, #16]
 802420a:	b31b      	cbz	r3, 8024254 <__swbuf_r+0x68>
 802420c:	6823      	ldr	r3, [r4, #0]
 802420e:	b2f6      	uxtb	r6, r6
 8024210:	6922      	ldr	r2, [r4, #16]
 8024212:	4637      	mov	r7, r6
 8024214:	1a98      	subs	r0, r3, r2
 8024216:	6963      	ldr	r3, [r4, #20]
 8024218:	4283      	cmp	r3, r0
 802421a:	dc04      	bgt.n	8024226 <__swbuf_r+0x3a>
 802421c:	4621      	mov	r1, r4
 802421e:	4628      	mov	r0, r5
 8024220:	f000 fe66 	bl	8024ef0 <_fflush_r>
 8024224:	b9e0      	cbnz	r0, 8024260 <__swbuf_r+0x74>
 8024226:	68a3      	ldr	r3, [r4, #8]
 8024228:	3b01      	subs	r3, #1
 802422a:	60a3      	str	r3, [r4, #8]
 802422c:	6823      	ldr	r3, [r4, #0]
 802422e:	1c5a      	adds	r2, r3, #1
 8024230:	6022      	str	r2, [r4, #0]
 8024232:	701e      	strb	r6, [r3, #0]
 8024234:	1c43      	adds	r3, r0, #1
 8024236:	6962      	ldr	r2, [r4, #20]
 8024238:	429a      	cmp	r2, r3
 802423a:	d004      	beq.n	8024246 <__swbuf_r+0x5a>
 802423c:	89a3      	ldrh	r3, [r4, #12]
 802423e:	07db      	lsls	r3, r3, #31
 8024240:	d506      	bpl.n	8024250 <__swbuf_r+0x64>
 8024242:	2e0a      	cmp	r6, #10
 8024244:	d104      	bne.n	8024250 <__swbuf_r+0x64>
 8024246:	4621      	mov	r1, r4
 8024248:	4628      	mov	r0, r5
 802424a:	f000 fe51 	bl	8024ef0 <_fflush_r>
 802424e:	b938      	cbnz	r0, 8024260 <__swbuf_r+0x74>
 8024250:	4638      	mov	r0, r7
 8024252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024254:	4621      	mov	r1, r4
 8024256:	4628      	mov	r0, r5
 8024258:	f000 f806 	bl	8024268 <__swsetup_r>
 802425c:	2800      	cmp	r0, #0
 802425e:	d0d5      	beq.n	802420c <__swbuf_r+0x20>
 8024260:	f04f 37ff 	mov.w	r7, #4294967295
 8024264:	e7f4      	b.n	8024250 <__swbuf_r+0x64>
	...

08024268 <__swsetup_r>:
 8024268:	b538      	push	{r3, r4, r5, lr}
 802426a:	4b2a      	ldr	r3, [pc, #168]	; (8024314 <__swsetup_r+0xac>)
 802426c:	4605      	mov	r5, r0
 802426e:	460c      	mov	r4, r1
 8024270:	6818      	ldr	r0, [r3, #0]
 8024272:	b118      	cbz	r0, 802427c <__swsetup_r+0x14>
 8024274:	6a03      	ldr	r3, [r0, #32]
 8024276:	b90b      	cbnz	r3, 802427c <__swsetup_r+0x14>
 8024278:	f7ff fe70 	bl	8023f5c <__sinit>
 802427c:	89a3      	ldrh	r3, [r4, #12]
 802427e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024282:	0718      	lsls	r0, r3, #28
 8024284:	d422      	bmi.n	80242cc <__swsetup_r+0x64>
 8024286:	06d9      	lsls	r1, r3, #27
 8024288:	d407      	bmi.n	802429a <__swsetup_r+0x32>
 802428a:	2309      	movs	r3, #9
 802428c:	602b      	str	r3, [r5, #0]
 802428e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8024292:	f04f 30ff 	mov.w	r0, #4294967295
 8024296:	81a3      	strh	r3, [r4, #12]
 8024298:	e034      	b.n	8024304 <__swsetup_r+0x9c>
 802429a:	0758      	lsls	r0, r3, #29
 802429c:	d512      	bpl.n	80242c4 <__swsetup_r+0x5c>
 802429e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80242a0:	b141      	cbz	r1, 80242b4 <__swsetup_r+0x4c>
 80242a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80242a6:	4299      	cmp	r1, r3
 80242a8:	d002      	beq.n	80242b0 <__swsetup_r+0x48>
 80242aa:	4628      	mov	r0, r5
 80242ac:	f000 f922 	bl	80244f4 <_free_r>
 80242b0:	2300      	movs	r3, #0
 80242b2:	6363      	str	r3, [r4, #52]	; 0x34
 80242b4:	89a3      	ldrh	r3, [r4, #12]
 80242b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80242ba:	81a3      	strh	r3, [r4, #12]
 80242bc:	2300      	movs	r3, #0
 80242be:	6063      	str	r3, [r4, #4]
 80242c0:	6923      	ldr	r3, [r4, #16]
 80242c2:	6023      	str	r3, [r4, #0]
 80242c4:	89a3      	ldrh	r3, [r4, #12]
 80242c6:	f043 0308 	orr.w	r3, r3, #8
 80242ca:	81a3      	strh	r3, [r4, #12]
 80242cc:	6923      	ldr	r3, [r4, #16]
 80242ce:	b94b      	cbnz	r3, 80242e4 <__swsetup_r+0x7c>
 80242d0:	89a3      	ldrh	r3, [r4, #12]
 80242d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80242d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80242da:	d003      	beq.n	80242e4 <__swsetup_r+0x7c>
 80242dc:	4621      	mov	r1, r4
 80242de:	4628      	mov	r0, r5
 80242e0:	f000 fe65 	bl	8024fae <__smakebuf_r>
 80242e4:	89a0      	ldrh	r0, [r4, #12]
 80242e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80242ea:	f010 0301 	ands.w	r3, r0, #1
 80242ee:	d00a      	beq.n	8024306 <__swsetup_r+0x9e>
 80242f0:	2300      	movs	r3, #0
 80242f2:	60a3      	str	r3, [r4, #8]
 80242f4:	6963      	ldr	r3, [r4, #20]
 80242f6:	425b      	negs	r3, r3
 80242f8:	61a3      	str	r3, [r4, #24]
 80242fa:	6923      	ldr	r3, [r4, #16]
 80242fc:	b943      	cbnz	r3, 8024310 <__swsetup_r+0xa8>
 80242fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024302:	d1c4      	bne.n	802428e <__swsetup_r+0x26>
 8024304:	bd38      	pop	{r3, r4, r5, pc}
 8024306:	0781      	lsls	r1, r0, #30
 8024308:	bf58      	it	pl
 802430a:	6963      	ldrpl	r3, [r4, #20]
 802430c:	60a3      	str	r3, [r4, #8]
 802430e:	e7f4      	b.n	80242fa <__swsetup_r+0x92>
 8024310:	2000      	movs	r0, #0
 8024312:	e7f7      	b.n	8024304 <__swsetup_r+0x9c>
 8024314:	20050128 	.word	0x20050128

08024318 <memcmp>:
 8024318:	3901      	subs	r1, #1
 802431a:	4402      	add	r2, r0
 802431c:	b510      	push	{r4, lr}
 802431e:	4290      	cmp	r0, r2
 8024320:	d101      	bne.n	8024326 <memcmp+0xe>
 8024322:	2000      	movs	r0, #0
 8024324:	e005      	b.n	8024332 <memcmp+0x1a>
 8024326:	7803      	ldrb	r3, [r0, #0]
 8024328:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802432c:	42a3      	cmp	r3, r4
 802432e:	d001      	beq.n	8024334 <memcmp+0x1c>
 8024330:	1b18      	subs	r0, r3, r4
 8024332:	bd10      	pop	{r4, pc}
 8024334:	3001      	adds	r0, #1
 8024336:	e7f2      	b.n	802431e <memcmp+0x6>

08024338 <memmove>:
 8024338:	4288      	cmp	r0, r1
 802433a:	b510      	push	{r4, lr}
 802433c:	eb01 0402 	add.w	r4, r1, r2
 8024340:	d902      	bls.n	8024348 <memmove+0x10>
 8024342:	4284      	cmp	r4, r0
 8024344:	4623      	mov	r3, r4
 8024346:	d807      	bhi.n	8024358 <memmove+0x20>
 8024348:	1e43      	subs	r3, r0, #1
 802434a:	42a1      	cmp	r1, r4
 802434c:	d008      	beq.n	8024360 <memmove+0x28>
 802434e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024356:	e7f8      	b.n	802434a <memmove+0x12>
 8024358:	4402      	add	r2, r0
 802435a:	4601      	mov	r1, r0
 802435c:	428a      	cmp	r2, r1
 802435e:	d100      	bne.n	8024362 <memmove+0x2a>
 8024360:	bd10      	pop	{r4, pc}
 8024362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802436a:	e7f7      	b.n	802435c <memmove+0x24>

0802436c <memset>:
 802436c:	4402      	add	r2, r0
 802436e:	4603      	mov	r3, r0
 8024370:	4293      	cmp	r3, r2
 8024372:	d100      	bne.n	8024376 <memset+0xa>
 8024374:	4770      	bx	lr
 8024376:	f803 1b01 	strb.w	r1, [r3], #1
 802437a:	e7f9      	b.n	8024370 <memset+0x4>

0802437c <strncpy>:
 802437c:	3901      	subs	r1, #1
 802437e:	4603      	mov	r3, r0
 8024380:	b510      	push	{r4, lr}
 8024382:	b132      	cbz	r2, 8024392 <strncpy+0x16>
 8024384:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024388:	3a01      	subs	r2, #1
 802438a:	f803 4b01 	strb.w	r4, [r3], #1
 802438e:	2c00      	cmp	r4, #0
 8024390:	d1f7      	bne.n	8024382 <strncpy+0x6>
 8024392:	441a      	add	r2, r3
 8024394:	2100      	movs	r1, #0
 8024396:	4293      	cmp	r3, r2
 8024398:	d100      	bne.n	802439c <strncpy+0x20>
 802439a:	bd10      	pop	{r4, pc}
 802439c:	f803 1b01 	strb.w	r1, [r3], #1
 80243a0:	e7f9      	b.n	8024396 <strncpy+0x1a>
	...

080243a4 <_close_r>:
 80243a4:	b538      	push	{r3, r4, r5, lr}
 80243a6:	2300      	movs	r3, #0
 80243a8:	4d05      	ldr	r5, [pc, #20]	; (80243c0 <_close_r+0x1c>)
 80243aa:	4604      	mov	r4, r0
 80243ac:	4608      	mov	r0, r1
 80243ae:	602b      	str	r3, [r5, #0]
 80243b0:	f7dc ffdf 	bl	8001372 <_close>
 80243b4:	1c43      	adds	r3, r0, #1
 80243b6:	d102      	bne.n	80243be <_close_r+0x1a>
 80243b8:	682b      	ldr	r3, [r5, #0]
 80243ba:	b103      	cbz	r3, 80243be <_close_r+0x1a>
 80243bc:	6023      	str	r3, [r4, #0]
 80243be:	bd38      	pop	{r3, r4, r5, pc}
 80243c0:	2007f064 	.word	0x2007f064

080243c4 <_lseek_r>:
 80243c4:	b538      	push	{r3, r4, r5, lr}
 80243c6:	4604      	mov	r4, r0
 80243c8:	4d06      	ldr	r5, [pc, #24]	; (80243e4 <_lseek_r+0x20>)
 80243ca:	4608      	mov	r0, r1
 80243cc:	4611      	mov	r1, r2
 80243ce:	2200      	movs	r2, #0
 80243d0:	602a      	str	r2, [r5, #0]
 80243d2:	461a      	mov	r2, r3
 80243d4:	f7dc fff4 	bl	80013c0 <_lseek>
 80243d8:	1c43      	adds	r3, r0, #1
 80243da:	d102      	bne.n	80243e2 <_lseek_r+0x1e>
 80243dc:	682b      	ldr	r3, [r5, #0]
 80243de:	b103      	cbz	r3, 80243e2 <_lseek_r+0x1e>
 80243e0:	6023      	str	r3, [r4, #0]
 80243e2:	bd38      	pop	{r3, r4, r5, pc}
 80243e4:	2007f064 	.word	0x2007f064

080243e8 <_read_r>:
 80243e8:	b538      	push	{r3, r4, r5, lr}
 80243ea:	4604      	mov	r4, r0
 80243ec:	4d06      	ldr	r5, [pc, #24]	; (8024408 <_read_r+0x20>)
 80243ee:	4608      	mov	r0, r1
 80243f0:	4611      	mov	r1, r2
 80243f2:	2200      	movs	r2, #0
 80243f4:	602a      	str	r2, [r5, #0]
 80243f6:	461a      	mov	r2, r3
 80243f8:	f7dc ff9e 	bl	8001338 <_read>
 80243fc:	1c43      	adds	r3, r0, #1
 80243fe:	d102      	bne.n	8024406 <_read_r+0x1e>
 8024400:	682b      	ldr	r3, [r5, #0]
 8024402:	b103      	cbz	r3, 8024406 <_read_r+0x1e>
 8024404:	6023      	str	r3, [r4, #0]
 8024406:	bd38      	pop	{r3, r4, r5, pc}
 8024408:	2007f064 	.word	0x2007f064

0802440c <_sbrk_r>:
 802440c:	b538      	push	{r3, r4, r5, lr}
 802440e:	2300      	movs	r3, #0
 8024410:	4d05      	ldr	r5, [pc, #20]	; (8024428 <_sbrk_r+0x1c>)
 8024412:	4604      	mov	r4, r0
 8024414:	4608      	mov	r0, r1
 8024416:	602b      	str	r3, [r5, #0]
 8024418:	f7dc ffe0 	bl	80013dc <_sbrk>
 802441c:	1c43      	adds	r3, r0, #1
 802441e:	d102      	bne.n	8024426 <_sbrk_r+0x1a>
 8024420:	682b      	ldr	r3, [r5, #0]
 8024422:	b103      	cbz	r3, 8024426 <_sbrk_r+0x1a>
 8024424:	6023      	str	r3, [r4, #0]
 8024426:	bd38      	pop	{r3, r4, r5, pc}
 8024428:	2007f064 	.word	0x2007f064

0802442c <_write_r>:
 802442c:	b538      	push	{r3, r4, r5, lr}
 802442e:	4604      	mov	r4, r0
 8024430:	4d06      	ldr	r5, [pc, #24]	; (802444c <_write_r+0x20>)
 8024432:	4608      	mov	r0, r1
 8024434:	4611      	mov	r1, r2
 8024436:	2200      	movs	r2, #0
 8024438:	602a      	str	r2, [r5, #0]
 802443a:	461a      	mov	r2, r3
 802443c:	f7dc faaf 	bl	800099e <_write>
 8024440:	1c43      	adds	r3, r0, #1
 8024442:	d102      	bne.n	802444a <_write_r+0x1e>
 8024444:	682b      	ldr	r3, [r5, #0]
 8024446:	b103      	cbz	r3, 802444a <_write_r+0x1e>
 8024448:	6023      	str	r3, [r4, #0]
 802444a:	bd38      	pop	{r3, r4, r5, pc}
 802444c:	2007f064 	.word	0x2007f064

08024450 <__libc_init_array>:
 8024450:	b570      	push	{r4, r5, r6, lr}
 8024452:	4d0d      	ldr	r5, [pc, #52]	; (8024488 <__libc_init_array+0x38>)
 8024454:	2600      	movs	r6, #0
 8024456:	4c0d      	ldr	r4, [pc, #52]	; (802448c <__libc_init_array+0x3c>)
 8024458:	1b64      	subs	r4, r4, r5
 802445a:	10a4      	asrs	r4, r4, #2
 802445c:	42a6      	cmp	r6, r4
 802445e:	d109      	bne.n	8024474 <__libc_init_array+0x24>
 8024460:	4d0b      	ldr	r5, [pc, #44]	; (8024490 <__libc_init_array+0x40>)
 8024462:	2600      	movs	r6, #0
 8024464:	4c0b      	ldr	r4, [pc, #44]	; (8024494 <__libc_init_array+0x44>)
 8024466:	f000 fec5 	bl	80251f4 <_init>
 802446a:	1b64      	subs	r4, r4, r5
 802446c:	10a4      	asrs	r4, r4, #2
 802446e:	42a6      	cmp	r6, r4
 8024470:	d105      	bne.n	802447e <__libc_init_array+0x2e>
 8024472:	bd70      	pop	{r4, r5, r6, pc}
 8024474:	f855 3b04 	ldr.w	r3, [r5], #4
 8024478:	3601      	adds	r6, #1
 802447a:	4798      	blx	r3
 802447c:	e7ee      	b.n	802445c <__libc_init_array+0xc>
 802447e:	f855 3b04 	ldr.w	r3, [r5], #4
 8024482:	3601      	adds	r6, #1
 8024484:	4798      	blx	r3
 8024486:	e7f2      	b.n	802446e <__libc_init_array+0x1e>
 8024488:	08029c2c 	.word	0x08029c2c
 802448c:	08029c2c 	.word	0x08029c2c
 8024490:	08029c2c 	.word	0x08029c2c
 8024494:	08029c30 	.word	0x08029c30

08024498 <__retarget_lock_init_recursive>:
 8024498:	4770      	bx	lr

0802449a <__retarget_lock_acquire_recursive>:
 802449a:	4770      	bx	lr

0802449c <__retarget_lock_release_recursive>:
 802449c:	4770      	bx	lr

0802449e <memcpy>:
 802449e:	440a      	add	r2, r1
 80244a0:	1e43      	subs	r3, r0, #1
 80244a2:	4291      	cmp	r1, r2
 80244a4:	d100      	bne.n	80244a8 <memcpy+0xa>
 80244a6:	4770      	bx	lr
 80244a8:	b510      	push	{r4, lr}
 80244aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80244ae:	4291      	cmp	r1, r2
 80244b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80244b4:	d1f9      	bne.n	80244aa <memcpy+0xc>
 80244b6:	bd10      	pop	{r4, pc}

080244b8 <__assert_func>:
 80244b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80244ba:	4614      	mov	r4, r2
 80244bc:	461a      	mov	r2, r3
 80244be:	4b09      	ldr	r3, [pc, #36]	; (80244e4 <__assert_func+0x2c>)
 80244c0:	4605      	mov	r5, r0
 80244c2:	681b      	ldr	r3, [r3, #0]
 80244c4:	68d8      	ldr	r0, [r3, #12]
 80244c6:	b14c      	cbz	r4, 80244dc <__assert_func+0x24>
 80244c8:	4b07      	ldr	r3, [pc, #28]	; (80244e8 <__assert_func+0x30>)
 80244ca:	9100      	str	r1, [sp, #0]
 80244cc:	4907      	ldr	r1, [pc, #28]	; (80244ec <__assert_func+0x34>)
 80244ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80244d2:	462b      	mov	r3, r5
 80244d4:	f000 fd34 	bl	8024f40 <fiprintf>
 80244d8:	f000 fe0a 	bl	80250f0 <abort>
 80244dc:	4b04      	ldr	r3, [pc, #16]	; (80244f0 <__assert_func+0x38>)
 80244de:	461c      	mov	r4, r3
 80244e0:	e7f3      	b.n	80244ca <__assert_func+0x12>
 80244e2:	bf00      	nop
 80244e4:	20050128 	.word	0x20050128
 80244e8:	08029bb5 	.word	0x08029bb5
 80244ec:	08029bc2 	.word	0x08029bc2
 80244f0:	08029bf0 	.word	0x08029bf0

080244f4 <_free_r>:
 80244f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80244f6:	2900      	cmp	r1, #0
 80244f8:	d043      	beq.n	8024582 <_free_r+0x8e>
 80244fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80244fe:	1f0c      	subs	r4, r1, #4
 8024500:	9001      	str	r0, [sp, #4]
 8024502:	2b00      	cmp	r3, #0
 8024504:	bfb8      	it	lt
 8024506:	18e4      	addlt	r4, r4, r3
 8024508:	f7ff fc52 	bl	8023db0 <__malloc_lock>
 802450c:	4a1e      	ldr	r2, [pc, #120]	; (8024588 <_free_r+0x94>)
 802450e:	9801      	ldr	r0, [sp, #4]
 8024510:	6813      	ldr	r3, [r2, #0]
 8024512:	b933      	cbnz	r3, 8024522 <_free_r+0x2e>
 8024514:	6063      	str	r3, [r4, #4]
 8024516:	6014      	str	r4, [r2, #0]
 8024518:	b003      	add	sp, #12
 802451a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802451e:	f7ff bc4d 	b.w	8023dbc <__malloc_unlock>
 8024522:	42a3      	cmp	r3, r4
 8024524:	d908      	bls.n	8024538 <_free_r+0x44>
 8024526:	6825      	ldr	r5, [r4, #0]
 8024528:	1961      	adds	r1, r4, r5
 802452a:	428b      	cmp	r3, r1
 802452c:	bf01      	itttt	eq
 802452e:	6819      	ldreq	r1, [r3, #0]
 8024530:	685b      	ldreq	r3, [r3, #4]
 8024532:	1949      	addeq	r1, r1, r5
 8024534:	6021      	streq	r1, [r4, #0]
 8024536:	e7ed      	b.n	8024514 <_free_r+0x20>
 8024538:	461a      	mov	r2, r3
 802453a:	685b      	ldr	r3, [r3, #4]
 802453c:	b10b      	cbz	r3, 8024542 <_free_r+0x4e>
 802453e:	42a3      	cmp	r3, r4
 8024540:	d9fa      	bls.n	8024538 <_free_r+0x44>
 8024542:	6811      	ldr	r1, [r2, #0]
 8024544:	1855      	adds	r5, r2, r1
 8024546:	42a5      	cmp	r5, r4
 8024548:	d10b      	bne.n	8024562 <_free_r+0x6e>
 802454a:	6824      	ldr	r4, [r4, #0]
 802454c:	4421      	add	r1, r4
 802454e:	1854      	adds	r4, r2, r1
 8024550:	6011      	str	r1, [r2, #0]
 8024552:	42a3      	cmp	r3, r4
 8024554:	d1e0      	bne.n	8024518 <_free_r+0x24>
 8024556:	681c      	ldr	r4, [r3, #0]
 8024558:	685b      	ldr	r3, [r3, #4]
 802455a:	440c      	add	r4, r1
 802455c:	6053      	str	r3, [r2, #4]
 802455e:	6014      	str	r4, [r2, #0]
 8024560:	e7da      	b.n	8024518 <_free_r+0x24>
 8024562:	d902      	bls.n	802456a <_free_r+0x76>
 8024564:	230c      	movs	r3, #12
 8024566:	6003      	str	r3, [r0, #0]
 8024568:	e7d6      	b.n	8024518 <_free_r+0x24>
 802456a:	6825      	ldr	r5, [r4, #0]
 802456c:	1961      	adds	r1, r4, r5
 802456e:	428b      	cmp	r3, r1
 8024570:	bf02      	ittt	eq
 8024572:	6819      	ldreq	r1, [r3, #0]
 8024574:	685b      	ldreq	r3, [r3, #4]
 8024576:	1949      	addeq	r1, r1, r5
 8024578:	6063      	str	r3, [r4, #4]
 802457a:	bf08      	it	eq
 802457c:	6021      	streq	r1, [r4, #0]
 802457e:	6054      	str	r4, [r2, #4]
 8024580:	e7ca      	b.n	8024518 <_free_r+0x24>
 8024582:	b003      	add	sp, #12
 8024584:	bd30      	pop	{r4, r5, pc}
 8024586:	bf00      	nop
 8024588:	2007ef20 	.word	0x2007ef20

0802458c <__ssputs_r>:
 802458c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024590:	461f      	mov	r7, r3
 8024592:	688e      	ldr	r6, [r1, #8]
 8024594:	4682      	mov	sl, r0
 8024596:	460c      	mov	r4, r1
 8024598:	42be      	cmp	r6, r7
 802459a:	4690      	mov	r8, r2
 802459c:	680b      	ldr	r3, [r1, #0]
 802459e:	d82c      	bhi.n	80245fa <__ssputs_r+0x6e>
 80245a0:	898a      	ldrh	r2, [r1, #12]
 80245a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80245a6:	d026      	beq.n	80245f6 <__ssputs_r+0x6a>
 80245a8:	6965      	ldr	r5, [r4, #20]
 80245aa:	6909      	ldr	r1, [r1, #16]
 80245ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80245b0:	eba3 0901 	sub.w	r9, r3, r1
 80245b4:	1c7b      	adds	r3, r7, #1
 80245b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80245ba:	444b      	add	r3, r9
 80245bc:	106d      	asrs	r5, r5, #1
 80245be:	429d      	cmp	r5, r3
 80245c0:	bf38      	it	cc
 80245c2:	461d      	movcc	r5, r3
 80245c4:	0553      	lsls	r3, r2, #21
 80245c6:	d527      	bpl.n	8024618 <__ssputs_r+0x8c>
 80245c8:	4629      	mov	r1, r5
 80245ca:	f7ff fb71 	bl	8023cb0 <_malloc_r>
 80245ce:	4606      	mov	r6, r0
 80245d0:	b360      	cbz	r0, 802462c <__ssputs_r+0xa0>
 80245d2:	464a      	mov	r2, r9
 80245d4:	6921      	ldr	r1, [r4, #16]
 80245d6:	f7ff ff62 	bl	802449e <memcpy>
 80245da:	89a3      	ldrh	r3, [r4, #12]
 80245dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80245e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80245e4:	81a3      	strh	r3, [r4, #12]
 80245e6:	6126      	str	r6, [r4, #16]
 80245e8:	444e      	add	r6, r9
 80245ea:	6165      	str	r5, [r4, #20]
 80245ec:	eba5 0509 	sub.w	r5, r5, r9
 80245f0:	6026      	str	r6, [r4, #0]
 80245f2:	463e      	mov	r6, r7
 80245f4:	60a5      	str	r5, [r4, #8]
 80245f6:	42be      	cmp	r6, r7
 80245f8:	d900      	bls.n	80245fc <__ssputs_r+0x70>
 80245fa:	463e      	mov	r6, r7
 80245fc:	4632      	mov	r2, r6
 80245fe:	4641      	mov	r1, r8
 8024600:	6820      	ldr	r0, [r4, #0]
 8024602:	f7ff fe99 	bl	8024338 <memmove>
 8024606:	68a3      	ldr	r3, [r4, #8]
 8024608:	2000      	movs	r0, #0
 802460a:	1b9b      	subs	r3, r3, r6
 802460c:	60a3      	str	r3, [r4, #8]
 802460e:	6823      	ldr	r3, [r4, #0]
 8024610:	4433      	add	r3, r6
 8024612:	6023      	str	r3, [r4, #0]
 8024614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024618:	462a      	mov	r2, r5
 802461a:	f000 fd70 	bl	80250fe <_realloc_r>
 802461e:	4606      	mov	r6, r0
 8024620:	2800      	cmp	r0, #0
 8024622:	d1e0      	bne.n	80245e6 <__ssputs_r+0x5a>
 8024624:	6921      	ldr	r1, [r4, #16]
 8024626:	4650      	mov	r0, sl
 8024628:	f7ff ff64 	bl	80244f4 <_free_r>
 802462c:	230c      	movs	r3, #12
 802462e:	f04f 30ff 	mov.w	r0, #4294967295
 8024632:	f8ca 3000 	str.w	r3, [sl]
 8024636:	89a3      	ldrh	r3, [r4, #12]
 8024638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802463c:	81a3      	strh	r3, [r4, #12]
 802463e:	e7e9      	b.n	8024614 <__ssputs_r+0x88>

08024640 <_svfiprintf_r>:
 8024640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024644:	4698      	mov	r8, r3
 8024646:	898b      	ldrh	r3, [r1, #12]
 8024648:	b09d      	sub	sp, #116	; 0x74
 802464a:	4607      	mov	r7, r0
 802464c:	061b      	lsls	r3, r3, #24
 802464e:	460d      	mov	r5, r1
 8024650:	4614      	mov	r4, r2
 8024652:	d50e      	bpl.n	8024672 <_svfiprintf_r+0x32>
 8024654:	690b      	ldr	r3, [r1, #16]
 8024656:	b963      	cbnz	r3, 8024672 <_svfiprintf_r+0x32>
 8024658:	2140      	movs	r1, #64	; 0x40
 802465a:	f7ff fb29 	bl	8023cb0 <_malloc_r>
 802465e:	6028      	str	r0, [r5, #0]
 8024660:	6128      	str	r0, [r5, #16]
 8024662:	b920      	cbnz	r0, 802466e <_svfiprintf_r+0x2e>
 8024664:	230c      	movs	r3, #12
 8024666:	603b      	str	r3, [r7, #0]
 8024668:	f04f 30ff 	mov.w	r0, #4294967295
 802466c:	e0d0      	b.n	8024810 <_svfiprintf_r+0x1d0>
 802466e:	2340      	movs	r3, #64	; 0x40
 8024670:	616b      	str	r3, [r5, #20]
 8024672:	2300      	movs	r3, #0
 8024674:	f8cd 800c 	str.w	r8, [sp, #12]
 8024678:	f04f 0901 	mov.w	r9, #1
 802467c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8024828 <_svfiprintf_r+0x1e8>
 8024680:	9309      	str	r3, [sp, #36]	; 0x24
 8024682:	2320      	movs	r3, #32
 8024684:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024688:	2330      	movs	r3, #48	; 0x30
 802468a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802468e:	4623      	mov	r3, r4
 8024690:	469a      	mov	sl, r3
 8024692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024696:	b10a      	cbz	r2, 802469c <_svfiprintf_r+0x5c>
 8024698:	2a25      	cmp	r2, #37	; 0x25
 802469a:	d1f9      	bne.n	8024690 <_svfiprintf_r+0x50>
 802469c:	ebba 0b04 	subs.w	fp, sl, r4
 80246a0:	d00b      	beq.n	80246ba <_svfiprintf_r+0x7a>
 80246a2:	465b      	mov	r3, fp
 80246a4:	4622      	mov	r2, r4
 80246a6:	4629      	mov	r1, r5
 80246a8:	4638      	mov	r0, r7
 80246aa:	f7ff ff6f 	bl	802458c <__ssputs_r>
 80246ae:	3001      	adds	r0, #1
 80246b0:	f000 80a9 	beq.w	8024806 <_svfiprintf_r+0x1c6>
 80246b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80246b6:	445a      	add	r2, fp
 80246b8:	9209      	str	r2, [sp, #36]	; 0x24
 80246ba:	f89a 3000 	ldrb.w	r3, [sl]
 80246be:	2b00      	cmp	r3, #0
 80246c0:	f000 80a1 	beq.w	8024806 <_svfiprintf_r+0x1c6>
 80246c4:	2300      	movs	r3, #0
 80246c6:	f04f 32ff 	mov.w	r2, #4294967295
 80246ca:	f10a 0a01 	add.w	sl, sl, #1
 80246ce:	9304      	str	r3, [sp, #16]
 80246d0:	9307      	str	r3, [sp, #28]
 80246d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80246d6:	931a      	str	r3, [sp, #104]	; 0x68
 80246d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80246dc:	4654      	mov	r4, sl
 80246de:	2205      	movs	r2, #5
 80246e0:	4851      	ldr	r0, [pc, #324]	; (8024828 <_svfiprintf_r+0x1e8>)
 80246e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80246e6:	f000 fcf5 	bl	80250d4 <memchr>
 80246ea:	9a04      	ldr	r2, [sp, #16]
 80246ec:	b9d8      	cbnz	r0, 8024726 <_svfiprintf_r+0xe6>
 80246ee:	06d0      	lsls	r0, r2, #27
 80246f0:	bf44      	itt	mi
 80246f2:	2320      	movmi	r3, #32
 80246f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80246f8:	0711      	lsls	r1, r2, #28
 80246fa:	bf44      	itt	mi
 80246fc:	232b      	movmi	r3, #43	; 0x2b
 80246fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024702:	f89a 3000 	ldrb.w	r3, [sl]
 8024706:	2b2a      	cmp	r3, #42	; 0x2a
 8024708:	d015      	beq.n	8024736 <_svfiprintf_r+0xf6>
 802470a:	9a07      	ldr	r2, [sp, #28]
 802470c:	4654      	mov	r4, sl
 802470e:	2000      	movs	r0, #0
 8024710:	f04f 0c0a 	mov.w	ip, #10
 8024714:	4621      	mov	r1, r4
 8024716:	f811 3b01 	ldrb.w	r3, [r1], #1
 802471a:	3b30      	subs	r3, #48	; 0x30
 802471c:	2b09      	cmp	r3, #9
 802471e:	d94d      	bls.n	80247bc <_svfiprintf_r+0x17c>
 8024720:	b1b0      	cbz	r0, 8024750 <_svfiprintf_r+0x110>
 8024722:	9207      	str	r2, [sp, #28]
 8024724:	e014      	b.n	8024750 <_svfiprintf_r+0x110>
 8024726:	eba0 0308 	sub.w	r3, r0, r8
 802472a:	46a2      	mov	sl, r4
 802472c:	fa09 f303 	lsl.w	r3, r9, r3
 8024730:	4313      	orrs	r3, r2
 8024732:	9304      	str	r3, [sp, #16]
 8024734:	e7d2      	b.n	80246dc <_svfiprintf_r+0x9c>
 8024736:	9b03      	ldr	r3, [sp, #12]
 8024738:	1d19      	adds	r1, r3, #4
 802473a:	681b      	ldr	r3, [r3, #0]
 802473c:	2b00      	cmp	r3, #0
 802473e:	9103      	str	r1, [sp, #12]
 8024740:	bfbb      	ittet	lt
 8024742:	425b      	neglt	r3, r3
 8024744:	f042 0202 	orrlt.w	r2, r2, #2
 8024748:	9307      	strge	r3, [sp, #28]
 802474a:	9307      	strlt	r3, [sp, #28]
 802474c:	bfb8      	it	lt
 802474e:	9204      	strlt	r2, [sp, #16]
 8024750:	7823      	ldrb	r3, [r4, #0]
 8024752:	2b2e      	cmp	r3, #46	; 0x2e
 8024754:	d10c      	bne.n	8024770 <_svfiprintf_r+0x130>
 8024756:	7863      	ldrb	r3, [r4, #1]
 8024758:	2b2a      	cmp	r3, #42	; 0x2a
 802475a:	d134      	bne.n	80247c6 <_svfiprintf_r+0x186>
 802475c:	9b03      	ldr	r3, [sp, #12]
 802475e:	3402      	adds	r4, #2
 8024760:	1d1a      	adds	r2, r3, #4
 8024762:	681b      	ldr	r3, [r3, #0]
 8024764:	2b00      	cmp	r3, #0
 8024766:	9203      	str	r2, [sp, #12]
 8024768:	bfb8      	it	lt
 802476a:	f04f 33ff 	movlt.w	r3, #4294967295
 802476e:	9305      	str	r3, [sp, #20]
 8024770:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8024838 <_svfiprintf_r+0x1f8>
 8024774:	2203      	movs	r2, #3
 8024776:	7821      	ldrb	r1, [r4, #0]
 8024778:	4650      	mov	r0, sl
 802477a:	f000 fcab 	bl	80250d4 <memchr>
 802477e:	b138      	cbz	r0, 8024790 <_svfiprintf_r+0x150>
 8024780:	eba0 000a 	sub.w	r0, r0, sl
 8024784:	2240      	movs	r2, #64	; 0x40
 8024786:	9b04      	ldr	r3, [sp, #16]
 8024788:	3401      	adds	r4, #1
 802478a:	4082      	lsls	r2, r0
 802478c:	4313      	orrs	r3, r2
 802478e:	9304      	str	r3, [sp, #16]
 8024790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024794:	2206      	movs	r2, #6
 8024796:	4825      	ldr	r0, [pc, #148]	; (802482c <_svfiprintf_r+0x1ec>)
 8024798:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802479c:	f000 fc9a 	bl	80250d4 <memchr>
 80247a0:	2800      	cmp	r0, #0
 80247a2:	d038      	beq.n	8024816 <_svfiprintf_r+0x1d6>
 80247a4:	4b22      	ldr	r3, [pc, #136]	; (8024830 <_svfiprintf_r+0x1f0>)
 80247a6:	bb1b      	cbnz	r3, 80247f0 <_svfiprintf_r+0x1b0>
 80247a8:	9b03      	ldr	r3, [sp, #12]
 80247aa:	3307      	adds	r3, #7
 80247ac:	f023 0307 	bic.w	r3, r3, #7
 80247b0:	3308      	adds	r3, #8
 80247b2:	9303      	str	r3, [sp, #12]
 80247b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80247b6:	4433      	add	r3, r6
 80247b8:	9309      	str	r3, [sp, #36]	; 0x24
 80247ba:	e768      	b.n	802468e <_svfiprintf_r+0x4e>
 80247bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80247c0:	460c      	mov	r4, r1
 80247c2:	2001      	movs	r0, #1
 80247c4:	e7a6      	b.n	8024714 <_svfiprintf_r+0xd4>
 80247c6:	2300      	movs	r3, #0
 80247c8:	3401      	adds	r4, #1
 80247ca:	f04f 0c0a 	mov.w	ip, #10
 80247ce:	4619      	mov	r1, r3
 80247d0:	9305      	str	r3, [sp, #20]
 80247d2:	4620      	mov	r0, r4
 80247d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80247d8:	3a30      	subs	r2, #48	; 0x30
 80247da:	2a09      	cmp	r2, #9
 80247dc:	d903      	bls.n	80247e6 <_svfiprintf_r+0x1a6>
 80247de:	2b00      	cmp	r3, #0
 80247e0:	d0c6      	beq.n	8024770 <_svfiprintf_r+0x130>
 80247e2:	9105      	str	r1, [sp, #20]
 80247e4:	e7c4      	b.n	8024770 <_svfiprintf_r+0x130>
 80247e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80247ea:	4604      	mov	r4, r0
 80247ec:	2301      	movs	r3, #1
 80247ee:	e7f0      	b.n	80247d2 <_svfiprintf_r+0x192>
 80247f0:	ab03      	add	r3, sp, #12
 80247f2:	462a      	mov	r2, r5
 80247f4:	a904      	add	r1, sp, #16
 80247f6:	4638      	mov	r0, r7
 80247f8:	9300      	str	r3, [sp, #0]
 80247fa:	4b0e      	ldr	r3, [pc, #56]	; (8024834 <_svfiprintf_r+0x1f4>)
 80247fc:	f3af 8000 	nop.w
 8024800:	1c42      	adds	r2, r0, #1
 8024802:	4606      	mov	r6, r0
 8024804:	d1d6      	bne.n	80247b4 <_svfiprintf_r+0x174>
 8024806:	89ab      	ldrh	r3, [r5, #12]
 8024808:	065b      	lsls	r3, r3, #25
 802480a:	f53f af2d 	bmi.w	8024668 <_svfiprintf_r+0x28>
 802480e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024810:	b01d      	add	sp, #116	; 0x74
 8024812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024816:	ab03      	add	r3, sp, #12
 8024818:	462a      	mov	r2, r5
 802481a:	a904      	add	r1, sp, #16
 802481c:	4638      	mov	r0, r7
 802481e:	9300      	str	r3, [sp, #0]
 8024820:	4b04      	ldr	r3, [pc, #16]	; (8024834 <_svfiprintf_r+0x1f4>)
 8024822:	f000 f9c1 	bl	8024ba8 <_printf_i>
 8024826:	e7eb      	b.n	8024800 <_svfiprintf_r+0x1c0>
 8024828:	08029bf1 	.word	0x08029bf1
 802482c:	08029bfb 	.word	0x08029bfb
 8024830:	00000000 	.word	0x00000000
 8024834:	0802458d 	.word	0x0802458d
 8024838:	08029bf7 	.word	0x08029bf7

0802483c <__sfputc_r>:
 802483c:	6893      	ldr	r3, [r2, #8]
 802483e:	3b01      	subs	r3, #1
 8024840:	2b00      	cmp	r3, #0
 8024842:	6093      	str	r3, [r2, #8]
 8024844:	b410      	push	{r4}
 8024846:	da08      	bge.n	802485a <__sfputc_r+0x1e>
 8024848:	6994      	ldr	r4, [r2, #24]
 802484a:	42a3      	cmp	r3, r4
 802484c:	db01      	blt.n	8024852 <__sfputc_r+0x16>
 802484e:	290a      	cmp	r1, #10
 8024850:	d103      	bne.n	802485a <__sfputc_r+0x1e>
 8024852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024856:	f7ff bcc9 	b.w	80241ec <__swbuf_r>
 802485a:	6813      	ldr	r3, [r2, #0]
 802485c:	1c58      	adds	r0, r3, #1
 802485e:	6010      	str	r0, [r2, #0]
 8024860:	4608      	mov	r0, r1
 8024862:	7019      	strb	r1, [r3, #0]
 8024864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024868:	4770      	bx	lr

0802486a <__sfputs_r>:
 802486a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802486c:	4606      	mov	r6, r0
 802486e:	460f      	mov	r7, r1
 8024870:	4614      	mov	r4, r2
 8024872:	18d5      	adds	r5, r2, r3
 8024874:	42ac      	cmp	r4, r5
 8024876:	d101      	bne.n	802487c <__sfputs_r+0x12>
 8024878:	2000      	movs	r0, #0
 802487a:	e007      	b.n	802488c <__sfputs_r+0x22>
 802487c:	463a      	mov	r2, r7
 802487e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024882:	4630      	mov	r0, r6
 8024884:	f7ff ffda 	bl	802483c <__sfputc_r>
 8024888:	1c43      	adds	r3, r0, #1
 802488a:	d1f3      	bne.n	8024874 <__sfputs_r+0xa>
 802488c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024890 <_vfiprintf_r>:
 8024890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024894:	460d      	mov	r5, r1
 8024896:	b09d      	sub	sp, #116	; 0x74
 8024898:	4614      	mov	r4, r2
 802489a:	4698      	mov	r8, r3
 802489c:	4606      	mov	r6, r0
 802489e:	b118      	cbz	r0, 80248a8 <_vfiprintf_r+0x18>
 80248a0:	6a03      	ldr	r3, [r0, #32]
 80248a2:	b90b      	cbnz	r3, 80248a8 <_vfiprintf_r+0x18>
 80248a4:	f7ff fb5a 	bl	8023f5c <__sinit>
 80248a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80248aa:	07d9      	lsls	r1, r3, #31
 80248ac:	d405      	bmi.n	80248ba <_vfiprintf_r+0x2a>
 80248ae:	89ab      	ldrh	r3, [r5, #12]
 80248b0:	059a      	lsls	r2, r3, #22
 80248b2:	d402      	bmi.n	80248ba <_vfiprintf_r+0x2a>
 80248b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80248b6:	f7ff fdf0 	bl	802449a <__retarget_lock_acquire_recursive>
 80248ba:	89ab      	ldrh	r3, [r5, #12]
 80248bc:	071b      	lsls	r3, r3, #28
 80248be:	d501      	bpl.n	80248c4 <_vfiprintf_r+0x34>
 80248c0:	692b      	ldr	r3, [r5, #16]
 80248c2:	b99b      	cbnz	r3, 80248ec <_vfiprintf_r+0x5c>
 80248c4:	4629      	mov	r1, r5
 80248c6:	4630      	mov	r0, r6
 80248c8:	f7ff fcce 	bl	8024268 <__swsetup_r>
 80248cc:	b170      	cbz	r0, 80248ec <_vfiprintf_r+0x5c>
 80248ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80248d0:	07dc      	lsls	r4, r3, #31
 80248d2:	d504      	bpl.n	80248de <_vfiprintf_r+0x4e>
 80248d4:	f04f 30ff 	mov.w	r0, #4294967295
 80248d8:	b01d      	add	sp, #116	; 0x74
 80248da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248de:	89ab      	ldrh	r3, [r5, #12]
 80248e0:	0598      	lsls	r0, r3, #22
 80248e2:	d4f7      	bmi.n	80248d4 <_vfiprintf_r+0x44>
 80248e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80248e6:	f7ff fdd9 	bl	802449c <__retarget_lock_release_recursive>
 80248ea:	e7f3      	b.n	80248d4 <_vfiprintf_r+0x44>
 80248ec:	2300      	movs	r3, #0
 80248ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80248f2:	f04f 0901 	mov.w	r9, #1
 80248f6:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8024ab0 <_vfiprintf_r+0x220>
 80248fa:	9309      	str	r3, [sp, #36]	; 0x24
 80248fc:	2320      	movs	r3, #32
 80248fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024902:	2330      	movs	r3, #48	; 0x30
 8024904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024908:	4623      	mov	r3, r4
 802490a:	469a      	mov	sl, r3
 802490c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024910:	b10a      	cbz	r2, 8024916 <_vfiprintf_r+0x86>
 8024912:	2a25      	cmp	r2, #37	; 0x25
 8024914:	d1f9      	bne.n	802490a <_vfiprintf_r+0x7a>
 8024916:	ebba 0b04 	subs.w	fp, sl, r4
 802491a:	d00b      	beq.n	8024934 <_vfiprintf_r+0xa4>
 802491c:	465b      	mov	r3, fp
 802491e:	4622      	mov	r2, r4
 8024920:	4629      	mov	r1, r5
 8024922:	4630      	mov	r0, r6
 8024924:	f7ff ffa1 	bl	802486a <__sfputs_r>
 8024928:	3001      	adds	r0, #1
 802492a:	f000 80a9 	beq.w	8024a80 <_vfiprintf_r+0x1f0>
 802492e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024930:	445a      	add	r2, fp
 8024932:	9209      	str	r2, [sp, #36]	; 0x24
 8024934:	f89a 3000 	ldrb.w	r3, [sl]
 8024938:	2b00      	cmp	r3, #0
 802493a:	f000 80a1 	beq.w	8024a80 <_vfiprintf_r+0x1f0>
 802493e:	2300      	movs	r3, #0
 8024940:	f04f 32ff 	mov.w	r2, #4294967295
 8024944:	f10a 0a01 	add.w	sl, sl, #1
 8024948:	9304      	str	r3, [sp, #16]
 802494a:	9307      	str	r3, [sp, #28]
 802494c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024950:	931a      	str	r3, [sp, #104]	; 0x68
 8024952:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024956:	4654      	mov	r4, sl
 8024958:	2205      	movs	r2, #5
 802495a:	4855      	ldr	r0, [pc, #340]	; (8024ab0 <_vfiprintf_r+0x220>)
 802495c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024960:	f000 fbb8 	bl	80250d4 <memchr>
 8024964:	9a04      	ldr	r2, [sp, #16]
 8024966:	b9d8      	cbnz	r0, 80249a0 <_vfiprintf_r+0x110>
 8024968:	06d1      	lsls	r1, r2, #27
 802496a:	bf44      	itt	mi
 802496c:	2320      	movmi	r3, #32
 802496e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024972:	0713      	lsls	r3, r2, #28
 8024974:	bf44      	itt	mi
 8024976:	232b      	movmi	r3, #43	; 0x2b
 8024978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802497c:	f89a 3000 	ldrb.w	r3, [sl]
 8024980:	2b2a      	cmp	r3, #42	; 0x2a
 8024982:	d015      	beq.n	80249b0 <_vfiprintf_r+0x120>
 8024984:	9a07      	ldr	r2, [sp, #28]
 8024986:	4654      	mov	r4, sl
 8024988:	2000      	movs	r0, #0
 802498a:	f04f 0c0a 	mov.w	ip, #10
 802498e:	4621      	mov	r1, r4
 8024990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024994:	3b30      	subs	r3, #48	; 0x30
 8024996:	2b09      	cmp	r3, #9
 8024998:	d94d      	bls.n	8024a36 <_vfiprintf_r+0x1a6>
 802499a:	b1b0      	cbz	r0, 80249ca <_vfiprintf_r+0x13a>
 802499c:	9207      	str	r2, [sp, #28]
 802499e:	e014      	b.n	80249ca <_vfiprintf_r+0x13a>
 80249a0:	eba0 0308 	sub.w	r3, r0, r8
 80249a4:	46a2      	mov	sl, r4
 80249a6:	fa09 f303 	lsl.w	r3, r9, r3
 80249aa:	4313      	orrs	r3, r2
 80249ac:	9304      	str	r3, [sp, #16]
 80249ae:	e7d2      	b.n	8024956 <_vfiprintf_r+0xc6>
 80249b0:	9b03      	ldr	r3, [sp, #12]
 80249b2:	1d19      	adds	r1, r3, #4
 80249b4:	681b      	ldr	r3, [r3, #0]
 80249b6:	2b00      	cmp	r3, #0
 80249b8:	9103      	str	r1, [sp, #12]
 80249ba:	bfbb      	ittet	lt
 80249bc:	425b      	neglt	r3, r3
 80249be:	f042 0202 	orrlt.w	r2, r2, #2
 80249c2:	9307      	strge	r3, [sp, #28]
 80249c4:	9307      	strlt	r3, [sp, #28]
 80249c6:	bfb8      	it	lt
 80249c8:	9204      	strlt	r2, [sp, #16]
 80249ca:	7823      	ldrb	r3, [r4, #0]
 80249cc:	2b2e      	cmp	r3, #46	; 0x2e
 80249ce:	d10c      	bne.n	80249ea <_vfiprintf_r+0x15a>
 80249d0:	7863      	ldrb	r3, [r4, #1]
 80249d2:	2b2a      	cmp	r3, #42	; 0x2a
 80249d4:	d134      	bne.n	8024a40 <_vfiprintf_r+0x1b0>
 80249d6:	9b03      	ldr	r3, [sp, #12]
 80249d8:	3402      	adds	r4, #2
 80249da:	1d1a      	adds	r2, r3, #4
 80249dc:	681b      	ldr	r3, [r3, #0]
 80249de:	2b00      	cmp	r3, #0
 80249e0:	9203      	str	r2, [sp, #12]
 80249e2:	bfb8      	it	lt
 80249e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80249e8:	9305      	str	r3, [sp, #20]
 80249ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8024ac0 <_vfiprintf_r+0x230>
 80249ee:	2203      	movs	r2, #3
 80249f0:	7821      	ldrb	r1, [r4, #0]
 80249f2:	4650      	mov	r0, sl
 80249f4:	f000 fb6e 	bl	80250d4 <memchr>
 80249f8:	b138      	cbz	r0, 8024a0a <_vfiprintf_r+0x17a>
 80249fa:	eba0 000a 	sub.w	r0, r0, sl
 80249fe:	2240      	movs	r2, #64	; 0x40
 8024a00:	9b04      	ldr	r3, [sp, #16]
 8024a02:	3401      	adds	r4, #1
 8024a04:	4082      	lsls	r2, r0
 8024a06:	4313      	orrs	r3, r2
 8024a08:	9304      	str	r3, [sp, #16]
 8024a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024a0e:	2206      	movs	r2, #6
 8024a10:	4828      	ldr	r0, [pc, #160]	; (8024ab4 <_vfiprintf_r+0x224>)
 8024a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024a16:	f000 fb5d 	bl	80250d4 <memchr>
 8024a1a:	2800      	cmp	r0, #0
 8024a1c:	d03f      	beq.n	8024a9e <_vfiprintf_r+0x20e>
 8024a1e:	4b26      	ldr	r3, [pc, #152]	; (8024ab8 <_vfiprintf_r+0x228>)
 8024a20:	bb1b      	cbnz	r3, 8024a6a <_vfiprintf_r+0x1da>
 8024a22:	9b03      	ldr	r3, [sp, #12]
 8024a24:	3307      	adds	r3, #7
 8024a26:	f023 0307 	bic.w	r3, r3, #7
 8024a2a:	3308      	adds	r3, #8
 8024a2c:	9303      	str	r3, [sp, #12]
 8024a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a30:	443b      	add	r3, r7
 8024a32:	9309      	str	r3, [sp, #36]	; 0x24
 8024a34:	e768      	b.n	8024908 <_vfiprintf_r+0x78>
 8024a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8024a3a:	460c      	mov	r4, r1
 8024a3c:	2001      	movs	r0, #1
 8024a3e:	e7a6      	b.n	802498e <_vfiprintf_r+0xfe>
 8024a40:	2300      	movs	r3, #0
 8024a42:	3401      	adds	r4, #1
 8024a44:	f04f 0c0a 	mov.w	ip, #10
 8024a48:	4619      	mov	r1, r3
 8024a4a:	9305      	str	r3, [sp, #20]
 8024a4c:	4620      	mov	r0, r4
 8024a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024a52:	3a30      	subs	r2, #48	; 0x30
 8024a54:	2a09      	cmp	r2, #9
 8024a56:	d903      	bls.n	8024a60 <_vfiprintf_r+0x1d0>
 8024a58:	2b00      	cmp	r3, #0
 8024a5a:	d0c6      	beq.n	80249ea <_vfiprintf_r+0x15a>
 8024a5c:	9105      	str	r1, [sp, #20]
 8024a5e:	e7c4      	b.n	80249ea <_vfiprintf_r+0x15a>
 8024a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8024a64:	4604      	mov	r4, r0
 8024a66:	2301      	movs	r3, #1
 8024a68:	e7f0      	b.n	8024a4c <_vfiprintf_r+0x1bc>
 8024a6a:	ab03      	add	r3, sp, #12
 8024a6c:	462a      	mov	r2, r5
 8024a6e:	a904      	add	r1, sp, #16
 8024a70:	4630      	mov	r0, r6
 8024a72:	9300      	str	r3, [sp, #0]
 8024a74:	4b11      	ldr	r3, [pc, #68]	; (8024abc <_vfiprintf_r+0x22c>)
 8024a76:	f3af 8000 	nop.w
 8024a7a:	4607      	mov	r7, r0
 8024a7c:	1c78      	adds	r0, r7, #1
 8024a7e:	d1d6      	bne.n	8024a2e <_vfiprintf_r+0x19e>
 8024a80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024a82:	07d9      	lsls	r1, r3, #31
 8024a84:	d405      	bmi.n	8024a92 <_vfiprintf_r+0x202>
 8024a86:	89ab      	ldrh	r3, [r5, #12]
 8024a88:	059a      	lsls	r2, r3, #22
 8024a8a:	d402      	bmi.n	8024a92 <_vfiprintf_r+0x202>
 8024a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024a8e:	f7ff fd05 	bl	802449c <__retarget_lock_release_recursive>
 8024a92:	89ab      	ldrh	r3, [r5, #12]
 8024a94:	065b      	lsls	r3, r3, #25
 8024a96:	f53f af1d 	bmi.w	80248d4 <_vfiprintf_r+0x44>
 8024a9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024a9c:	e71c      	b.n	80248d8 <_vfiprintf_r+0x48>
 8024a9e:	ab03      	add	r3, sp, #12
 8024aa0:	462a      	mov	r2, r5
 8024aa2:	a904      	add	r1, sp, #16
 8024aa4:	4630      	mov	r0, r6
 8024aa6:	9300      	str	r3, [sp, #0]
 8024aa8:	4b04      	ldr	r3, [pc, #16]	; (8024abc <_vfiprintf_r+0x22c>)
 8024aaa:	f000 f87d 	bl	8024ba8 <_printf_i>
 8024aae:	e7e4      	b.n	8024a7a <_vfiprintf_r+0x1ea>
 8024ab0:	08029bf1 	.word	0x08029bf1
 8024ab4:	08029bfb 	.word	0x08029bfb
 8024ab8:	00000000 	.word	0x00000000
 8024abc:	0802486b 	.word	0x0802486b
 8024ac0:	08029bf7 	.word	0x08029bf7

08024ac4 <_printf_common>:
 8024ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024ac8:	4616      	mov	r6, r2
 8024aca:	4699      	mov	r9, r3
 8024acc:	688a      	ldr	r2, [r1, #8]
 8024ace:	4607      	mov	r7, r0
 8024ad0:	690b      	ldr	r3, [r1, #16]
 8024ad2:	460c      	mov	r4, r1
 8024ad4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024ad8:	4293      	cmp	r3, r2
 8024ada:	bfb8      	it	lt
 8024adc:	4613      	movlt	r3, r2
 8024ade:	6033      	str	r3, [r6, #0]
 8024ae0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024ae4:	b10a      	cbz	r2, 8024aea <_printf_common+0x26>
 8024ae6:	3301      	adds	r3, #1
 8024ae8:	6033      	str	r3, [r6, #0]
 8024aea:	6823      	ldr	r3, [r4, #0]
 8024aec:	0699      	lsls	r1, r3, #26
 8024aee:	bf42      	ittt	mi
 8024af0:	6833      	ldrmi	r3, [r6, #0]
 8024af2:	3302      	addmi	r3, #2
 8024af4:	6033      	strmi	r3, [r6, #0]
 8024af6:	6825      	ldr	r5, [r4, #0]
 8024af8:	f015 0506 	ands.w	r5, r5, #6
 8024afc:	d106      	bne.n	8024b0c <_printf_common+0x48>
 8024afe:	f104 0a19 	add.w	sl, r4, #25
 8024b02:	68e3      	ldr	r3, [r4, #12]
 8024b04:	6832      	ldr	r2, [r6, #0]
 8024b06:	1a9b      	subs	r3, r3, r2
 8024b08:	42ab      	cmp	r3, r5
 8024b0a:	dc2b      	bgt.n	8024b64 <_printf_common+0xa0>
 8024b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024b10:	1e13      	subs	r3, r2, #0
 8024b12:	6822      	ldr	r2, [r4, #0]
 8024b14:	bf18      	it	ne
 8024b16:	2301      	movne	r3, #1
 8024b18:	0692      	lsls	r2, r2, #26
 8024b1a:	d430      	bmi.n	8024b7e <_printf_common+0xba>
 8024b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024b20:	4649      	mov	r1, r9
 8024b22:	4638      	mov	r0, r7
 8024b24:	47c0      	blx	r8
 8024b26:	3001      	adds	r0, #1
 8024b28:	d023      	beq.n	8024b72 <_printf_common+0xae>
 8024b2a:	6823      	ldr	r3, [r4, #0]
 8024b2c:	341a      	adds	r4, #26
 8024b2e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8024b32:	f003 0306 	and.w	r3, r3, #6
 8024b36:	2b04      	cmp	r3, #4
 8024b38:	bf0a      	itet	eq
 8024b3a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8024b3e:	2500      	movne	r5, #0
 8024b40:	6833      	ldreq	r3, [r6, #0]
 8024b42:	f04f 0600 	mov.w	r6, #0
 8024b46:	bf08      	it	eq
 8024b48:	1aed      	subeq	r5, r5, r3
 8024b4a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8024b4e:	bf08      	it	eq
 8024b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024b54:	4293      	cmp	r3, r2
 8024b56:	bfc4      	itt	gt
 8024b58:	1a9b      	subgt	r3, r3, r2
 8024b5a:	18ed      	addgt	r5, r5, r3
 8024b5c:	42b5      	cmp	r5, r6
 8024b5e:	d11a      	bne.n	8024b96 <_printf_common+0xd2>
 8024b60:	2000      	movs	r0, #0
 8024b62:	e008      	b.n	8024b76 <_printf_common+0xb2>
 8024b64:	2301      	movs	r3, #1
 8024b66:	4652      	mov	r2, sl
 8024b68:	4649      	mov	r1, r9
 8024b6a:	4638      	mov	r0, r7
 8024b6c:	47c0      	blx	r8
 8024b6e:	3001      	adds	r0, #1
 8024b70:	d103      	bne.n	8024b7a <_printf_common+0xb6>
 8024b72:	f04f 30ff 	mov.w	r0, #4294967295
 8024b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024b7a:	3501      	adds	r5, #1
 8024b7c:	e7c1      	b.n	8024b02 <_printf_common+0x3e>
 8024b7e:	18e1      	adds	r1, r4, r3
 8024b80:	1c5a      	adds	r2, r3, #1
 8024b82:	2030      	movs	r0, #48	; 0x30
 8024b84:	3302      	adds	r3, #2
 8024b86:	4422      	add	r2, r4
 8024b88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024b8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024b90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024b94:	e7c2      	b.n	8024b1c <_printf_common+0x58>
 8024b96:	2301      	movs	r3, #1
 8024b98:	4622      	mov	r2, r4
 8024b9a:	4649      	mov	r1, r9
 8024b9c:	4638      	mov	r0, r7
 8024b9e:	47c0      	blx	r8
 8024ba0:	3001      	adds	r0, #1
 8024ba2:	d0e6      	beq.n	8024b72 <_printf_common+0xae>
 8024ba4:	3601      	adds	r6, #1
 8024ba6:	e7d9      	b.n	8024b5c <_printf_common+0x98>

08024ba8 <_printf_i>:
 8024ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024bac:	7e0f      	ldrb	r7, [r1, #24]
 8024bae:	4691      	mov	r9, r2
 8024bb0:	4680      	mov	r8, r0
 8024bb2:	460c      	mov	r4, r1
 8024bb4:	2f78      	cmp	r7, #120	; 0x78
 8024bb6:	469a      	mov	sl, r3
 8024bb8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024bba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8024bbe:	d807      	bhi.n	8024bd0 <_printf_i+0x28>
 8024bc0:	2f62      	cmp	r7, #98	; 0x62
 8024bc2:	d80a      	bhi.n	8024bda <_printf_i+0x32>
 8024bc4:	2f00      	cmp	r7, #0
 8024bc6:	f000 80d3 	beq.w	8024d70 <_printf_i+0x1c8>
 8024bca:	2f58      	cmp	r7, #88	; 0x58
 8024bcc:	f000 80bf 	beq.w	8024d4e <_printf_i+0x1a6>
 8024bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024bd8:	e03a      	b.n	8024c50 <_printf_i+0xa8>
 8024bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8024bde:	2b15      	cmp	r3, #21
 8024be0:	d8f6      	bhi.n	8024bd0 <_printf_i+0x28>
 8024be2:	a101      	add	r1, pc, #4	; (adr r1, 8024be8 <_printf_i+0x40>)
 8024be4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024be8:	08024c41 	.word	0x08024c41
 8024bec:	08024c55 	.word	0x08024c55
 8024bf0:	08024bd1 	.word	0x08024bd1
 8024bf4:	08024bd1 	.word	0x08024bd1
 8024bf8:	08024bd1 	.word	0x08024bd1
 8024bfc:	08024bd1 	.word	0x08024bd1
 8024c00:	08024c55 	.word	0x08024c55
 8024c04:	08024bd1 	.word	0x08024bd1
 8024c08:	08024bd1 	.word	0x08024bd1
 8024c0c:	08024bd1 	.word	0x08024bd1
 8024c10:	08024bd1 	.word	0x08024bd1
 8024c14:	08024d57 	.word	0x08024d57
 8024c18:	08024c81 	.word	0x08024c81
 8024c1c:	08024d13 	.word	0x08024d13
 8024c20:	08024bd1 	.word	0x08024bd1
 8024c24:	08024bd1 	.word	0x08024bd1
 8024c28:	08024d79 	.word	0x08024d79
 8024c2c:	08024bd1 	.word	0x08024bd1
 8024c30:	08024c81 	.word	0x08024c81
 8024c34:	08024bd1 	.word	0x08024bd1
 8024c38:	08024bd1 	.word	0x08024bd1
 8024c3c:	08024d1b 	.word	0x08024d1b
 8024c40:	682b      	ldr	r3, [r5, #0]
 8024c42:	1d1a      	adds	r2, r3, #4
 8024c44:	681b      	ldr	r3, [r3, #0]
 8024c46:	602a      	str	r2, [r5, #0]
 8024c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024c50:	2301      	movs	r3, #1
 8024c52:	e09e      	b.n	8024d92 <_printf_i+0x1ea>
 8024c54:	6820      	ldr	r0, [r4, #0]
 8024c56:	682b      	ldr	r3, [r5, #0]
 8024c58:	0607      	lsls	r7, r0, #24
 8024c5a:	f103 0104 	add.w	r1, r3, #4
 8024c5e:	6029      	str	r1, [r5, #0]
 8024c60:	d501      	bpl.n	8024c66 <_printf_i+0xbe>
 8024c62:	681e      	ldr	r6, [r3, #0]
 8024c64:	e003      	b.n	8024c6e <_printf_i+0xc6>
 8024c66:	0646      	lsls	r6, r0, #25
 8024c68:	d5fb      	bpl.n	8024c62 <_printf_i+0xba>
 8024c6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8024c6e:	2e00      	cmp	r6, #0
 8024c70:	da03      	bge.n	8024c7a <_printf_i+0xd2>
 8024c72:	232d      	movs	r3, #45	; 0x2d
 8024c74:	4276      	negs	r6, r6
 8024c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024c7a:	4859      	ldr	r0, [pc, #356]	; (8024de0 <_printf_i+0x238>)
 8024c7c:	230a      	movs	r3, #10
 8024c7e:	e012      	b.n	8024ca6 <_printf_i+0xfe>
 8024c80:	682b      	ldr	r3, [r5, #0]
 8024c82:	6820      	ldr	r0, [r4, #0]
 8024c84:	1d19      	adds	r1, r3, #4
 8024c86:	6029      	str	r1, [r5, #0]
 8024c88:	0605      	lsls	r5, r0, #24
 8024c8a:	d501      	bpl.n	8024c90 <_printf_i+0xe8>
 8024c8c:	681e      	ldr	r6, [r3, #0]
 8024c8e:	e002      	b.n	8024c96 <_printf_i+0xee>
 8024c90:	0641      	lsls	r1, r0, #25
 8024c92:	d5fb      	bpl.n	8024c8c <_printf_i+0xe4>
 8024c94:	881e      	ldrh	r6, [r3, #0]
 8024c96:	2f6f      	cmp	r7, #111	; 0x6f
 8024c98:	4851      	ldr	r0, [pc, #324]	; (8024de0 <_printf_i+0x238>)
 8024c9a:	bf0c      	ite	eq
 8024c9c:	2308      	moveq	r3, #8
 8024c9e:	230a      	movne	r3, #10
 8024ca0:	2100      	movs	r1, #0
 8024ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024ca6:	6865      	ldr	r5, [r4, #4]
 8024ca8:	2d00      	cmp	r5, #0
 8024caa:	60a5      	str	r5, [r4, #8]
 8024cac:	bfa2      	ittt	ge
 8024cae:	6821      	ldrge	r1, [r4, #0]
 8024cb0:	f021 0104 	bicge.w	r1, r1, #4
 8024cb4:	6021      	strge	r1, [r4, #0]
 8024cb6:	b90e      	cbnz	r6, 8024cbc <_printf_i+0x114>
 8024cb8:	2d00      	cmp	r5, #0
 8024cba:	d04a      	beq.n	8024d52 <_printf_i+0x1aa>
 8024cbc:	4615      	mov	r5, r2
 8024cbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8024cc2:	fb03 6711 	mls	r7, r3, r1, r6
 8024cc6:	5dc7      	ldrb	r7, [r0, r7]
 8024cc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8024ccc:	4637      	mov	r7, r6
 8024cce:	460e      	mov	r6, r1
 8024cd0:	42bb      	cmp	r3, r7
 8024cd2:	d9f4      	bls.n	8024cbe <_printf_i+0x116>
 8024cd4:	2b08      	cmp	r3, #8
 8024cd6:	d10b      	bne.n	8024cf0 <_printf_i+0x148>
 8024cd8:	6823      	ldr	r3, [r4, #0]
 8024cda:	07de      	lsls	r6, r3, #31
 8024cdc:	d508      	bpl.n	8024cf0 <_printf_i+0x148>
 8024cde:	6923      	ldr	r3, [r4, #16]
 8024ce0:	6861      	ldr	r1, [r4, #4]
 8024ce2:	4299      	cmp	r1, r3
 8024ce4:	bfde      	ittt	le
 8024ce6:	2330      	movle	r3, #48	; 0x30
 8024ce8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024cec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8024cf0:	1b52      	subs	r2, r2, r5
 8024cf2:	6122      	str	r2, [r4, #16]
 8024cf4:	464b      	mov	r3, r9
 8024cf6:	aa03      	add	r2, sp, #12
 8024cf8:	4621      	mov	r1, r4
 8024cfa:	4640      	mov	r0, r8
 8024cfc:	f8cd a000 	str.w	sl, [sp]
 8024d00:	f7ff fee0 	bl	8024ac4 <_printf_common>
 8024d04:	3001      	adds	r0, #1
 8024d06:	d149      	bne.n	8024d9c <_printf_i+0x1f4>
 8024d08:	f04f 30ff 	mov.w	r0, #4294967295
 8024d0c:	b004      	add	sp, #16
 8024d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024d12:	6823      	ldr	r3, [r4, #0]
 8024d14:	f043 0320 	orr.w	r3, r3, #32
 8024d18:	6023      	str	r3, [r4, #0]
 8024d1a:	2778      	movs	r7, #120	; 0x78
 8024d1c:	4831      	ldr	r0, [pc, #196]	; (8024de4 <_printf_i+0x23c>)
 8024d1e:	6823      	ldr	r3, [r4, #0]
 8024d20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8024d24:	061f      	lsls	r7, r3, #24
 8024d26:	6829      	ldr	r1, [r5, #0]
 8024d28:	f851 6b04 	ldr.w	r6, [r1], #4
 8024d2c:	d402      	bmi.n	8024d34 <_printf_i+0x18c>
 8024d2e:	065f      	lsls	r7, r3, #25
 8024d30:	bf48      	it	mi
 8024d32:	b2b6      	uxthmi	r6, r6
 8024d34:	07df      	lsls	r7, r3, #31
 8024d36:	6029      	str	r1, [r5, #0]
 8024d38:	bf44      	itt	mi
 8024d3a:	f043 0320 	orrmi.w	r3, r3, #32
 8024d3e:	6023      	strmi	r3, [r4, #0]
 8024d40:	b91e      	cbnz	r6, 8024d4a <_printf_i+0x1a2>
 8024d42:	6823      	ldr	r3, [r4, #0]
 8024d44:	f023 0320 	bic.w	r3, r3, #32
 8024d48:	6023      	str	r3, [r4, #0]
 8024d4a:	2310      	movs	r3, #16
 8024d4c:	e7a8      	b.n	8024ca0 <_printf_i+0xf8>
 8024d4e:	4824      	ldr	r0, [pc, #144]	; (8024de0 <_printf_i+0x238>)
 8024d50:	e7e5      	b.n	8024d1e <_printf_i+0x176>
 8024d52:	4615      	mov	r5, r2
 8024d54:	e7be      	b.n	8024cd4 <_printf_i+0x12c>
 8024d56:	682b      	ldr	r3, [r5, #0]
 8024d58:	6826      	ldr	r6, [r4, #0]
 8024d5a:	1d18      	adds	r0, r3, #4
 8024d5c:	6961      	ldr	r1, [r4, #20]
 8024d5e:	6028      	str	r0, [r5, #0]
 8024d60:	0635      	lsls	r5, r6, #24
 8024d62:	681b      	ldr	r3, [r3, #0]
 8024d64:	d501      	bpl.n	8024d6a <_printf_i+0x1c2>
 8024d66:	6019      	str	r1, [r3, #0]
 8024d68:	e002      	b.n	8024d70 <_printf_i+0x1c8>
 8024d6a:	0670      	lsls	r0, r6, #25
 8024d6c:	d5fb      	bpl.n	8024d66 <_printf_i+0x1be>
 8024d6e:	8019      	strh	r1, [r3, #0]
 8024d70:	2300      	movs	r3, #0
 8024d72:	4615      	mov	r5, r2
 8024d74:	6123      	str	r3, [r4, #16]
 8024d76:	e7bd      	b.n	8024cf4 <_printf_i+0x14c>
 8024d78:	682b      	ldr	r3, [r5, #0]
 8024d7a:	2100      	movs	r1, #0
 8024d7c:	1d1a      	adds	r2, r3, #4
 8024d7e:	602a      	str	r2, [r5, #0]
 8024d80:	681d      	ldr	r5, [r3, #0]
 8024d82:	6862      	ldr	r2, [r4, #4]
 8024d84:	4628      	mov	r0, r5
 8024d86:	f000 f9a5 	bl	80250d4 <memchr>
 8024d8a:	b108      	cbz	r0, 8024d90 <_printf_i+0x1e8>
 8024d8c:	1b40      	subs	r0, r0, r5
 8024d8e:	6060      	str	r0, [r4, #4]
 8024d90:	6863      	ldr	r3, [r4, #4]
 8024d92:	6123      	str	r3, [r4, #16]
 8024d94:	2300      	movs	r3, #0
 8024d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024d9a:	e7ab      	b.n	8024cf4 <_printf_i+0x14c>
 8024d9c:	6923      	ldr	r3, [r4, #16]
 8024d9e:	462a      	mov	r2, r5
 8024da0:	4649      	mov	r1, r9
 8024da2:	4640      	mov	r0, r8
 8024da4:	47d0      	blx	sl
 8024da6:	3001      	adds	r0, #1
 8024da8:	d0ae      	beq.n	8024d08 <_printf_i+0x160>
 8024daa:	6823      	ldr	r3, [r4, #0]
 8024dac:	079b      	lsls	r3, r3, #30
 8024dae:	d413      	bmi.n	8024dd8 <_printf_i+0x230>
 8024db0:	68e0      	ldr	r0, [r4, #12]
 8024db2:	9b03      	ldr	r3, [sp, #12]
 8024db4:	4298      	cmp	r0, r3
 8024db6:	bfb8      	it	lt
 8024db8:	4618      	movlt	r0, r3
 8024dba:	e7a7      	b.n	8024d0c <_printf_i+0x164>
 8024dbc:	2301      	movs	r3, #1
 8024dbe:	4632      	mov	r2, r6
 8024dc0:	4649      	mov	r1, r9
 8024dc2:	4640      	mov	r0, r8
 8024dc4:	47d0      	blx	sl
 8024dc6:	3001      	adds	r0, #1
 8024dc8:	d09e      	beq.n	8024d08 <_printf_i+0x160>
 8024dca:	3501      	adds	r5, #1
 8024dcc:	68e3      	ldr	r3, [r4, #12]
 8024dce:	9903      	ldr	r1, [sp, #12]
 8024dd0:	1a5b      	subs	r3, r3, r1
 8024dd2:	42ab      	cmp	r3, r5
 8024dd4:	dcf2      	bgt.n	8024dbc <_printf_i+0x214>
 8024dd6:	e7eb      	b.n	8024db0 <_printf_i+0x208>
 8024dd8:	2500      	movs	r5, #0
 8024dda:	f104 0619 	add.w	r6, r4, #25
 8024dde:	e7f5      	b.n	8024dcc <_printf_i+0x224>
 8024de0:	08029c02 	.word	0x08029c02
 8024de4:	08029c13 	.word	0x08029c13

08024de8 <__sflush_r>:
 8024de8:	898a      	ldrh	r2, [r1, #12]
 8024dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024dee:	4605      	mov	r5, r0
 8024df0:	0710      	lsls	r0, r2, #28
 8024df2:	460c      	mov	r4, r1
 8024df4:	d458      	bmi.n	8024ea8 <__sflush_r+0xc0>
 8024df6:	684b      	ldr	r3, [r1, #4]
 8024df8:	2b00      	cmp	r3, #0
 8024dfa:	dc05      	bgt.n	8024e08 <__sflush_r+0x20>
 8024dfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024dfe:	2b00      	cmp	r3, #0
 8024e00:	dc02      	bgt.n	8024e08 <__sflush_r+0x20>
 8024e02:	2000      	movs	r0, #0
 8024e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024e0a:	2e00      	cmp	r6, #0
 8024e0c:	d0f9      	beq.n	8024e02 <__sflush_r+0x1a>
 8024e0e:	2300      	movs	r3, #0
 8024e10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024e14:	682f      	ldr	r7, [r5, #0]
 8024e16:	6a21      	ldr	r1, [r4, #32]
 8024e18:	602b      	str	r3, [r5, #0]
 8024e1a:	d032      	beq.n	8024e82 <__sflush_r+0x9a>
 8024e1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024e1e:	89a3      	ldrh	r3, [r4, #12]
 8024e20:	075a      	lsls	r2, r3, #29
 8024e22:	d505      	bpl.n	8024e30 <__sflush_r+0x48>
 8024e24:	6863      	ldr	r3, [r4, #4]
 8024e26:	1ac0      	subs	r0, r0, r3
 8024e28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024e2a:	b10b      	cbz	r3, 8024e30 <__sflush_r+0x48>
 8024e2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024e2e:	1ac0      	subs	r0, r0, r3
 8024e30:	2300      	movs	r3, #0
 8024e32:	4602      	mov	r2, r0
 8024e34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024e36:	4628      	mov	r0, r5
 8024e38:	6a21      	ldr	r1, [r4, #32]
 8024e3a:	47b0      	blx	r6
 8024e3c:	1c43      	adds	r3, r0, #1
 8024e3e:	89a3      	ldrh	r3, [r4, #12]
 8024e40:	d106      	bne.n	8024e50 <__sflush_r+0x68>
 8024e42:	6829      	ldr	r1, [r5, #0]
 8024e44:	291d      	cmp	r1, #29
 8024e46:	d82b      	bhi.n	8024ea0 <__sflush_r+0xb8>
 8024e48:	4a28      	ldr	r2, [pc, #160]	; (8024eec <__sflush_r+0x104>)
 8024e4a:	410a      	asrs	r2, r1
 8024e4c:	07d6      	lsls	r6, r2, #31
 8024e4e:	d427      	bmi.n	8024ea0 <__sflush_r+0xb8>
 8024e50:	2200      	movs	r2, #0
 8024e52:	04d9      	lsls	r1, r3, #19
 8024e54:	6062      	str	r2, [r4, #4]
 8024e56:	6922      	ldr	r2, [r4, #16]
 8024e58:	6022      	str	r2, [r4, #0]
 8024e5a:	d504      	bpl.n	8024e66 <__sflush_r+0x7e>
 8024e5c:	1c42      	adds	r2, r0, #1
 8024e5e:	d101      	bne.n	8024e64 <__sflush_r+0x7c>
 8024e60:	682b      	ldr	r3, [r5, #0]
 8024e62:	b903      	cbnz	r3, 8024e66 <__sflush_r+0x7e>
 8024e64:	6560      	str	r0, [r4, #84]	; 0x54
 8024e66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024e68:	602f      	str	r7, [r5, #0]
 8024e6a:	2900      	cmp	r1, #0
 8024e6c:	d0c9      	beq.n	8024e02 <__sflush_r+0x1a>
 8024e6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024e72:	4299      	cmp	r1, r3
 8024e74:	d002      	beq.n	8024e7c <__sflush_r+0x94>
 8024e76:	4628      	mov	r0, r5
 8024e78:	f7ff fb3c 	bl	80244f4 <_free_r>
 8024e7c:	2000      	movs	r0, #0
 8024e7e:	6360      	str	r0, [r4, #52]	; 0x34
 8024e80:	e7c0      	b.n	8024e04 <__sflush_r+0x1c>
 8024e82:	2301      	movs	r3, #1
 8024e84:	4628      	mov	r0, r5
 8024e86:	47b0      	blx	r6
 8024e88:	1c41      	adds	r1, r0, #1
 8024e8a:	d1c8      	bne.n	8024e1e <__sflush_r+0x36>
 8024e8c:	682b      	ldr	r3, [r5, #0]
 8024e8e:	2b00      	cmp	r3, #0
 8024e90:	d0c5      	beq.n	8024e1e <__sflush_r+0x36>
 8024e92:	2b1d      	cmp	r3, #29
 8024e94:	d001      	beq.n	8024e9a <__sflush_r+0xb2>
 8024e96:	2b16      	cmp	r3, #22
 8024e98:	d101      	bne.n	8024e9e <__sflush_r+0xb6>
 8024e9a:	602f      	str	r7, [r5, #0]
 8024e9c:	e7b1      	b.n	8024e02 <__sflush_r+0x1a>
 8024e9e:	89a3      	ldrh	r3, [r4, #12]
 8024ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024ea4:	81a3      	strh	r3, [r4, #12]
 8024ea6:	e7ad      	b.n	8024e04 <__sflush_r+0x1c>
 8024ea8:	690f      	ldr	r7, [r1, #16]
 8024eaa:	2f00      	cmp	r7, #0
 8024eac:	d0a9      	beq.n	8024e02 <__sflush_r+0x1a>
 8024eae:	0793      	lsls	r3, r2, #30
 8024eb0:	680e      	ldr	r6, [r1, #0]
 8024eb2:	600f      	str	r7, [r1, #0]
 8024eb4:	bf0c      	ite	eq
 8024eb6:	694b      	ldreq	r3, [r1, #20]
 8024eb8:	2300      	movne	r3, #0
 8024eba:	eba6 0807 	sub.w	r8, r6, r7
 8024ebe:	608b      	str	r3, [r1, #8]
 8024ec0:	f1b8 0f00 	cmp.w	r8, #0
 8024ec4:	dd9d      	ble.n	8024e02 <__sflush_r+0x1a>
 8024ec6:	4643      	mov	r3, r8
 8024ec8:	463a      	mov	r2, r7
 8024eca:	6a21      	ldr	r1, [r4, #32]
 8024ecc:	4628      	mov	r0, r5
 8024ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024ed0:	47b0      	blx	r6
 8024ed2:	2800      	cmp	r0, #0
 8024ed4:	dc06      	bgt.n	8024ee4 <__sflush_r+0xfc>
 8024ed6:	89a3      	ldrh	r3, [r4, #12]
 8024ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8024edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024ee0:	81a3      	strh	r3, [r4, #12]
 8024ee2:	e78f      	b.n	8024e04 <__sflush_r+0x1c>
 8024ee4:	4407      	add	r7, r0
 8024ee6:	eba8 0800 	sub.w	r8, r8, r0
 8024eea:	e7e9      	b.n	8024ec0 <__sflush_r+0xd8>
 8024eec:	dfbffffe 	.word	0xdfbffffe

08024ef0 <_fflush_r>:
 8024ef0:	b538      	push	{r3, r4, r5, lr}
 8024ef2:	690b      	ldr	r3, [r1, #16]
 8024ef4:	4605      	mov	r5, r0
 8024ef6:	460c      	mov	r4, r1
 8024ef8:	b913      	cbnz	r3, 8024f00 <_fflush_r+0x10>
 8024efa:	2500      	movs	r5, #0
 8024efc:	4628      	mov	r0, r5
 8024efe:	bd38      	pop	{r3, r4, r5, pc}
 8024f00:	b118      	cbz	r0, 8024f0a <_fflush_r+0x1a>
 8024f02:	6a03      	ldr	r3, [r0, #32]
 8024f04:	b90b      	cbnz	r3, 8024f0a <_fflush_r+0x1a>
 8024f06:	f7ff f829 	bl	8023f5c <__sinit>
 8024f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024f0e:	2b00      	cmp	r3, #0
 8024f10:	d0f3      	beq.n	8024efa <_fflush_r+0xa>
 8024f12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024f14:	07d0      	lsls	r0, r2, #31
 8024f16:	d404      	bmi.n	8024f22 <_fflush_r+0x32>
 8024f18:	0599      	lsls	r1, r3, #22
 8024f1a:	d402      	bmi.n	8024f22 <_fflush_r+0x32>
 8024f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024f1e:	f7ff fabc 	bl	802449a <__retarget_lock_acquire_recursive>
 8024f22:	4628      	mov	r0, r5
 8024f24:	4621      	mov	r1, r4
 8024f26:	f7ff ff5f 	bl	8024de8 <__sflush_r>
 8024f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024f2c:	4605      	mov	r5, r0
 8024f2e:	07da      	lsls	r2, r3, #31
 8024f30:	d4e4      	bmi.n	8024efc <_fflush_r+0xc>
 8024f32:	89a3      	ldrh	r3, [r4, #12]
 8024f34:	059b      	lsls	r3, r3, #22
 8024f36:	d4e1      	bmi.n	8024efc <_fflush_r+0xc>
 8024f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024f3a:	f7ff faaf 	bl	802449c <__retarget_lock_release_recursive>
 8024f3e:	e7dd      	b.n	8024efc <_fflush_r+0xc>

08024f40 <fiprintf>:
 8024f40:	b40e      	push	{r1, r2, r3}
 8024f42:	b503      	push	{r0, r1, lr}
 8024f44:	ab03      	add	r3, sp, #12
 8024f46:	4601      	mov	r1, r0
 8024f48:	4805      	ldr	r0, [pc, #20]	; (8024f60 <fiprintf+0x20>)
 8024f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8024f4e:	6800      	ldr	r0, [r0, #0]
 8024f50:	9301      	str	r3, [sp, #4]
 8024f52:	f7ff fc9d 	bl	8024890 <_vfiprintf_r>
 8024f56:	b002      	add	sp, #8
 8024f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8024f5c:	b003      	add	sp, #12
 8024f5e:	4770      	bx	lr
 8024f60:	20050128 	.word	0x20050128

08024f64 <__swhatbuf_r>:
 8024f64:	b570      	push	{r4, r5, r6, lr}
 8024f66:	460c      	mov	r4, r1
 8024f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024f6c:	b096      	sub	sp, #88	; 0x58
 8024f6e:	4615      	mov	r5, r2
 8024f70:	2900      	cmp	r1, #0
 8024f72:	461e      	mov	r6, r3
 8024f74:	da0c      	bge.n	8024f90 <__swhatbuf_r+0x2c>
 8024f76:	89a3      	ldrh	r3, [r4, #12]
 8024f78:	2100      	movs	r1, #0
 8024f7a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8024f7e:	bf0c      	ite	eq
 8024f80:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8024f84:	2340      	movne	r3, #64	; 0x40
 8024f86:	2000      	movs	r0, #0
 8024f88:	6031      	str	r1, [r6, #0]
 8024f8a:	602b      	str	r3, [r5, #0]
 8024f8c:	b016      	add	sp, #88	; 0x58
 8024f8e:	bd70      	pop	{r4, r5, r6, pc}
 8024f90:	466a      	mov	r2, sp
 8024f92:	f000 f87d 	bl	8025090 <_fstat_r>
 8024f96:	2800      	cmp	r0, #0
 8024f98:	dbed      	blt.n	8024f76 <__swhatbuf_r+0x12>
 8024f9a:	9901      	ldr	r1, [sp, #4]
 8024f9c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8024fa0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8024fa4:	4259      	negs	r1, r3
 8024fa6:	4159      	adcs	r1, r3
 8024fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024fac:	e7eb      	b.n	8024f86 <__swhatbuf_r+0x22>

08024fae <__smakebuf_r>:
 8024fae:	898b      	ldrh	r3, [r1, #12]
 8024fb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024fb2:	079d      	lsls	r5, r3, #30
 8024fb4:	4606      	mov	r6, r0
 8024fb6:	460c      	mov	r4, r1
 8024fb8:	d507      	bpl.n	8024fca <__smakebuf_r+0x1c>
 8024fba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024fbe:	6023      	str	r3, [r4, #0]
 8024fc0:	6123      	str	r3, [r4, #16]
 8024fc2:	2301      	movs	r3, #1
 8024fc4:	6163      	str	r3, [r4, #20]
 8024fc6:	b002      	add	sp, #8
 8024fc8:	bd70      	pop	{r4, r5, r6, pc}
 8024fca:	ab01      	add	r3, sp, #4
 8024fcc:	466a      	mov	r2, sp
 8024fce:	f7ff ffc9 	bl	8024f64 <__swhatbuf_r>
 8024fd2:	9900      	ldr	r1, [sp, #0]
 8024fd4:	4605      	mov	r5, r0
 8024fd6:	4630      	mov	r0, r6
 8024fd8:	f7fe fe6a 	bl	8023cb0 <_malloc_r>
 8024fdc:	b948      	cbnz	r0, 8024ff2 <__smakebuf_r+0x44>
 8024fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024fe2:	059a      	lsls	r2, r3, #22
 8024fe4:	d4ef      	bmi.n	8024fc6 <__smakebuf_r+0x18>
 8024fe6:	f023 0303 	bic.w	r3, r3, #3
 8024fea:	f043 0302 	orr.w	r3, r3, #2
 8024fee:	81a3      	strh	r3, [r4, #12]
 8024ff0:	e7e3      	b.n	8024fba <__smakebuf_r+0xc>
 8024ff2:	89a3      	ldrh	r3, [r4, #12]
 8024ff4:	6020      	str	r0, [r4, #0]
 8024ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024ffa:	6120      	str	r0, [r4, #16]
 8024ffc:	81a3      	strh	r3, [r4, #12]
 8024ffe:	9b00      	ldr	r3, [sp, #0]
 8025000:	6163      	str	r3, [r4, #20]
 8025002:	9b01      	ldr	r3, [sp, #4]
 8025004:	b15b      	cbz	r3, 802501e <__smakebuf_r+0x70>
 8025006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802500a:	4630      	mov	r0, r6
 802500c:	f000 f852 	bl	80250b4 <_isatty_r>
 8025010:	b128      	cbz	r0, 802501e <__smakebuf_r+0x70>
 8025012:	89a3      	ldrh	r3, [r4, #12]
 8025014:	f023 0303 	bic.w	r3, r3, #3
 8025018:	f043 0301 	orr.w	r3, r3, #1
 802501c:	81a3      	strh	r3, [r4, #12]
 802501e:	89a3      	ldrh	r3, [r4, #12]
 8025020:	431d      	orrs	r5, r3
 8025022:	81a5      	strh	r5, [r4, #12]
 8025024:	e7cf      	b.n	8024fc6 <__smakebuf_r+0x18>

08025026 <_putc_r>:
 8025026:	b570      	push	{r4, r5, r6, lr}
 8025028:	460d      	mov	r5, r1
 802502a:	4614      	mov	r4, r2
 802502c:	4606      	mov	r6, r0
 802502e:	b118      	cbz	r0, 8025038 <_putc_r+0x12>
 8025030:	6a03      	ldr	r3, [r0, #32]
 8025032:	b90b      	cbnz	r3, 8025038 <_putc_r+0x12>
 8025034:	f7fe ff92 	bl	8023f5c <__sinit>
 8025038:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802503a:	07d8      	lsls	r0, r3, #31
 802503c:	d405      	bmi.n	802504a <_putc_r+0x24>
 802503e:	89a3      	ldrh	r3, [r4, #12]
 8025040:	0599      	lsls	r1, r3, #22
 8025042:	d402      	bmi.n	802504a <_putc_r+0x24>
 8025044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025046:	f7ff fa28 	bl	802449a <__retarget_lock_acquire_recursive>
 802504a:	68a3      	ldr	r3, [r4, #8]
 802504c:	3b01      	subs	r3, #1
 802504e:	2b00      	cmp	r3, #0
 8025050:	60a3      	str	r3, [r4, #8]
 8025052:	da05      	bge.n	8025060 <_putc_r+0x3a>
 8025054:	69a2      	ldr	r2, [r4, #24]
 8025056:	4293      	cmp	r3, r2
 8025058:	db12      	blt.n	8025080 <_putc_r+0x5a>
 802505a:	b2eb      	uxtb	r3, r5
 802505c:	2b0a      	cmp	r3, #10
 802505e:	d00f      	beq.n	8025080 <_putc_r+0x5a>
 8025060:	6823      	ldr	r3, [r4, #0]
 8025062:	1c5a      	adds	r2, r3, #1
 8025064:	6022      	str	r2, [r4, #0]
 8025066:	701d      	strb	r5, [r3, #0]
 8025068:	b2ed      	uxtb	r5, r5
 802506a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802506c:	07da      	lsls	r2, r3, #31
 802506e:	d405      	bmi.n	802507c <_putc_r+0x56>
 8025070:	89a3      	ldrh	r3, [r4, #12]
 8025072:	059b      	lsls	r3, r3, #22
 8025074:	d402      	bmi.n	802507c <_putc_r+0x56>
 8025076:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025078:	f7ff fa10 	bl	802449c <__retarget_lock_release_recursive>
 802507c:	4628      	mov	r0, r5
 802507e:	bd70      	pop	{r4, r5, r6, pc}
 8025080:	4629      	mov	r1, r5
 8025082:	4622      	mov	r2, r4
 8025084:	4630      	mov	r0, r6
 8025086:	f7ff f8b1 	bl	80241ec <__swbuf_r>
 802508a:	4605      	mov	r5, r0
 802508c:	e7ed      	b.n	802506a <_putc_r+0x44>
	...

08025090 <_fstat_r>:
 8025090:	b538      	push	{r3, r4, r5, lr}
 8025092:	2300      	movs	r3, #0
 8025094:	4d06      	ldr	r5, [pc, #24]	; (80250b0 <_fstat_r+0x20>)
 8025096:	4604      	mov	r4, r0
 8025098:	4608      	mov	r0, r1
 802509a:	4611      	mov	r1, r2
 802509c:	602b      	str	r3, [r5, #0]
 802509e:	f7dc f974 	bl	800138a <_fstat>
 80250a2:	1c43      	adds	r3, r0, #1
 80250a4:	d102      	bne.n	80250ac <_fstat_r+0x1c>
 80250a6:	682b      	ldr	r3, [r5, #0]
 80250a8:	b103      	cbz	r3, 80250ac <_fstat_r+0x1c>
 80250aa:	6023      	str	r3, [r4, #0]
 80250ac:	bd38      	pop	{r3, r4, r5, pc}
 80250ae:	bf00      	nop
 80250b0:	2007f064 	.word	0x2007f064

080250b4 <_isatty_r>:
 80250b4:	b538      	push	{r3, r4, r5, lr}
 80250b6:	2300      	movs	r3, #0
 80250b8:	4d05      	ldr	r5, [pc, #20]	; (80250d0 <_isatty_r+0x1c>)
 80250ba:	4604      	mov	r4, r0
 80250bc:	4608      	mov	r0, r1
 80250be:	602b      	str	r3, [r5, #0]
 80250c0:	f7dc f973 	bl	80013aa <_isatty>
 80250c4:	1c43      	adds	r3, r0, #1
 80250c6:	d102      	bne.n	80250ce <_isatty_r+0x1a>
 80250c8:	682b      	ldr	r3, [r5, #0]
 80250ca:	b103      	cbz	r3, 80250ce <_isatty_r+0x1a>
 80250cc:	6023      	str	r3, [r4, #0]
 80250ce:	bd38      	pop	{r3, r4, r5, pc}
 80250d0:	2007f064 	.word	0x2007f064

080250d4 <memchr>:
 80250d4:	b2c9      	uxtb	r1, r1
 80250d6:	4402      	add	r2, r0
 80250d8:	b510      	push	{r4, lr}
 80250da:	4290      	cmp	r0, r2
 80250dc:	4603      	mov	r3, r0
 80250de:	d101      	bne.n	80250e4 <memchr+0x10>
 80250e0:	2300      	movs	r3, #0
 80250e2:	e003      	b.n	80250ec <memchr+0x18>
 80250e4:	781c      	ldrb	r4, [r3, #0]
 80250e6:	3001      	adds	r0, #1
 80250e8:	428c      	cmp	r4, r1
 80250ea:	d1f6      	bne.n	80250da <memchr+0x6>
 80250ec:	4618      	mov	r0, r3
 80250ee:	bd10      	pop	{r4, pc}

080250f0 <abort>:
 80250f0:	2006      	movs	r0, #6
 80250f2:	b508      	push	{r3, lr}
 80250f4:	f000 f85a 	bl	80251ac <raise>
 80250f8:	2001      	movs	r0, #1
 80250fa:	f7dc f913 	bl	8001324 <_exit>

080250fe <_realloc_r>:
 80250fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025102:	4680      	mov	r8, r0
 8025104:	4614      	mov	r4, r2
 8025106:	460e      	mov	r6, r1
 8025108:	b921      	cbnz	r1, 8025114 <_realloc_r+0x16>
 802510a:	4611      	mov	r1, r2
 802510c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025110:	f7fe bdce 	b.w	8023cb0 <_malloc_r>
 8025114:	b92a      	cbnz	r2, 8025122 <_realloc_r+0x24>
 8025116:	4625      	mov	r5, r4
 8025118:	f7ff f9ec 	bl	80244f4 <_free_r>
 802511c:	4628      	mov	r0, r5
 802511e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025122:	f000 f85f 	bl	80251e4 <_malloc_usable_size_r>
 8025126:	4284      	cmp	r4, r0
 8025128:	4607      	mov	r7, r0
 802512a:	d802      	bhi.n	8025132 <_realloc_r+0x34>
 802512c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8025130:	d812      	bhi.n	8025158 <_realloc_r+0x5a>
 8025132:	4621      	mov	r1, r4
 8025134:	4640      	mov	r0, r8
 8025136:	f7fe fdbb 	bl	8023cb0 <_malloc_r>
 802513a:	4605      	mov	r5, r0
 802513c:	2800      	cmp	r0, #0
 802513e:	d0ed      	beq.n	802511c <_realloc_r+0x1e>
 8025140:	42bc      	cmp	r4, r7
 8025142:	4622      	mov	r2, r4
 8025144:	4631      	mov	r1, r6
 8025146:	bf28      	it	cs
 8025148:	463a      	movcs	r2, r7
 802514a:	f7ff f9a8 	bl	802449e <memcpy>
 802514e:	4631      	mov	r1, r6
 8025150:	4640      	mov	r0, r8
 8025152:	f7ff f9cf 	bl	80244f4 <_free_r>
 8025156:	e7e1      	b.n	802511c <_realloc_r+0x1e>
 8025158:	4635      	mov	r5, r6
 802515a:	e7df      	b.n	802511c <_realloc_r+0x1e>

0802515c <_raise_r>:
 802515c:	291f      	cmp	r1, #31
 802515e:	b538      	push	{r3, r4, r5, lr}
 8025160:	4604      	mov	r4, r0
 8025162:	460d      	mov	r5, r1
 8025164:	d904      	bls.n	8025170 <_raise_r+0x14>
 8025166:	2316      	movs	r3, #22
 8025168:	6003      	str	r3, [r0, #0]
 802516a:	f04f 30ff 	mov.w	r0, #4294967295
 802516e:	bd38      	pop	{r3, r4, r5, pc}
 8025170:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8025172:	b112      	cbz	r2, 802517a <_raise_r+0x1e>
 8025174:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025178:	b94b      	cbnz	r3, 802518e <_raise_r+0x32>
 802517a:	4620      	mov	r0, r4
 802517c:	f000 f830 	bl	80251e0 <_getpid_r>
 8025180:	462a      	mov	r2, r5
 8025182:	4601      	mov	r1, r0
 8025184:	4620      	mov	r0, r4
 8025186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802518a:	f000 b817 	b.w	80251bc <_kill_r>
 802518e:	2b01      	cmp	r3, #1
 8025190:	d00a      	beq.n	80251a8 <_raise_r+0x4c>
 8025192:	1c59      	adds	r1, r3, #1
 8025194:	d103      	bne.n	802519e <_raise_r+0x42>
 8025196:	2316      	movs	r3, #22
 8025198:	6003      	str	r3, [r0, #0]
 802519a:	2001      	movs	r0, #1
 802519c:	e7e7      	b.n	802516e <_raise_r+0x12>
 802519e:	2400      	movs	r4, #0
 80251a0:	4628      	mov	r0, r5
 80251a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80251a6:	4798      	blx	r3
 80251a8:	2000      	movs	r0, #0
 80251aa:	e7e0      	b.n	802516e <_raise_r+0x12>

080251ac <raise>:
 80251ac:	4b02      	ldr	r3, [pc, #8]	; (80251b8 <raise+0xc>)
 80251ae:	4601      	mov	r1, r0
 80251b0:	6818      	ldr	r0, [r3, #0]
 80251b2:	f7ff bfd3 	b.w	802515c <_raise_r>
 80251b6:	bf00      	nop
 80251b8:	20050128 	.word	0x20050128

080251bc <_kill_r>:
 80251bc:	b538      	push	{r3, r4, r5, lr}
 80251be:	2300      	movs	r3, #0
 80251c0:	4d06      	ldr	r5, [pc, #24]	; (80251dc <_kill_r+0x20>)
 80251c2:	4604      	mov	r4, r0
 80251c4:	4608      	mov	r0, r1
 80251c6:	4611      	mov	r1, r2
 80251c8:	602b      	str	r3, [r5, #0]
 80251ca:	f7dc f899 	bl	8001300 <_kill>
 80251ce:	1c43      	adds	r3, r0, #1
 80251d0:	d102      	bne.n	80251d8 <_kill_r+0x1c>
 80251d2:	682b      	ldr	r3, [r5, #0]
 80251d4:	b103      	cbz	r3, 80251d8 <_kill_r+0x1c>
 80251d6:	6023      	str	r3, [r4, #0]
 80251d8:	bd38      	pop	{r3, r4, r5, pc}
 80251da:	bf00      	nop
 80251dc:	2007f064 	.word	0x2007f064

080251e0 <_getpid_r>:
 80251e0:	f7dc b886 	b.w	80012f0 <_getpid>

080251e4 <_malloc_usable_size_r>:
 80251e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80251e8:	1f18      	subs	r0, r3, #4
 80251ea:	2b00      	cmp	r3, #0
 80251ec:	bfbc      	itt	lt
 80251ee:	580b      	ldrlt	r3, [r1, r0]
 80251f0:	18c0      	addlt	r0, r0, r3
 80251f2:	4770      	bx	lr

080251f4 <_init>:
 80251f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80251f6:	bf00      	nop
 80251f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80251fa:	bc08      	pop	{r3}
 80251fc:	469e      	mov	lr, r3
 80251fe:	4770      	bx	lr

08025200 <_fini>:
 8025200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025202:	bf00      	nop
 8025204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025206:	bc08      	pop	{r3}
 8025208:	469e      	mov	lr, r3
 802520a:	4770      	bx	lr
