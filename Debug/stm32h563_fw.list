
stm32h563_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e66c  08000250  08000250  00010250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .Table4CLI    00000030  0800e8bc  0800e8bc  0001e8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata       00000518  0800e8ec  0800e8ec  0001e8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800ee04  0800ee04  000200b4  2**0
                  CONTENTS
  5 .ARM          00000008  0800ee04  0800ee04  0001ee04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800ee0c  0800ee0c  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800ee0c  0800ee0c  0001ee0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800ee10  0800ee10  0001ee10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000b4  20000000  0800ee14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001464  200000b4  0800eec8  000200b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001518  0800eec8  00021518  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ea  2**0
                  CONTENTS, READONLY
 14 .debug_info   000286eb  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000574b  00000000  00000000  00048818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002248  00000000  00000000  0004df68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a89  00000000  00000000  000501b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036b20  00000000  00000000  00051c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002abfd  00000000  00000000  00088759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00158df3  00000000  00000000  000b3356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009680  00000000  00000000  0020c14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  002157cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200000b4 	.word	0x200000b4
 800026c:	00000000 	.word	0x00000000
 8000270:	0800e8a4 	.word	0x0800e8a4

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200000b8 	.word	0x200000b8
 800028c:	0800e8a4 	.word	0x0800e8a4

08000290 <strcmp>:
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000298:	2a01      	cmp	r2, #1
 800029a:	bf28      	it	cs
 800029c:	429a      	cmpcs	r2, r3
 800029e:	d0f7      	beq.n	8000290 <strcmp>
 80002a0:	1ad0      	subs	r0, r2, r3
 80002a2:	4770      	bx	lr

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b982 	b.w	80005d0 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ea:	460d      	mov	r5, r1
 80002ec:	4604      	mov	r4, r0
 80002ee:	460f      	mov	r7, r1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d146      	bne.n	8000382 <__udivmoddi4+0x9e>
 80002f4:	428a      	cmp	r2, r1
 80002f6:	4694      	mov	ip, r2
 80002f8:	d95e      	bls.n	80003b8 <__udivmoddi4+0xd4>
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	b143      	cbz	r3, 8000312 <__udivmoddi4+0x2e>
 8000300:	fa02 fc03 	lsl.w	ip, r2, r3
 8000304:	f1c3 0220 	rsb	r2, r3, #32
 8000308:	409f      	lsls	r7, r3
 800030a:	409c      	lsls	r4, r3
 800030c:	fa20 f202 	lsr.w	r2, r0, r2
 8000310:	4317      	orrs	r7, r2
 8000312:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000316:	fa1f f58c 	uxth.w	r5, ip
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fbb7 f1fe 	udiv	r1, r7, lr
 8000320:	fb0e 7711 	mls	r7, lr, r1, r7
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800032c:	4290      	cmp	r0, r2
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x5e>
 8000330:	eb1c 0202 	adds.w	r2, ip, r2
 8000334:	f101 37ff 	add.w	r7, r1, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x5c>
 800033a:	4290      	cmp	r0, r2
 800033c:	f200 8134 	bhi.w	80005a8 <__udivmoddi4+0x2c4>
 8000340:	4639      	mov	r1, r7
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	fb00 f505 	mul.w	r5, r0, r5
 8000352:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000356:	42a5      	cmp	r5, r4
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x88>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x86>
 8000364:	42a5      	cmp	r5, r4
 8000366:	f200 8119 	bhi.w	800059c <__udivmoddi4+0x2b8>
 800036a:	4610      	mov	r0, r2
 800036c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	2100      	movs	r1, #0
 8000374:	b11e      	cbz	r6, 800037e <__udivmoddi4+0x9a>
 8000376:	40dc      	lsrs	r4, r3
 8000378:	2300      	movs	r3, #0
 800037a:	e9c6 4300 	strd	r4, r3, [r6]
 800037e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000382:	428b      	cmp	r3, r1
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0xb4>
 8000386:	2e00      	cmp	r6, #0
 8000388:	f000 80fc 	beq.w	8000584 <__udivmoddi4+0x2a0>
 800038c:	2100      	movs	r1, #0
 800038e:	e9c6 0500 	strd	r0, r5, [r6]
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	d14c      	bne.n	800043a <__udivmoddi4+0x156>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f0c0 80f2 	bcc.w	800058a <__udivmoddi4+0x2a6>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f240 80ef 	bls.w	800058a <__udivmoddi4+0x2a6>
 80003ac:	4608      	mov	r0, r1
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d0e5      	beq.n	800037e <__udivmoddi4+0x9a>
 80003b2:	e9c6 4700 	strd	r4, r7, [r6]
 80003b6:	e7e2      	b.n	800037e <__udivmoddi4+0x9a>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xd8>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f382 	clz	r3, r2
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f040 809f 	bne.w	8000504 <__udivmoddi4+0x220>
 80003c6:	1a8a      	subs	r2, r1, r2
 80003c8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb2 f5fe 	udiv	r5, r2, lr
 80003d6:	fb0e 2015 	mls	r0, lr, r5, r2
 80003da:	0c22      	lsrs	r2, r4, #16
 80003dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e0:	fb07 f005 	mul.w	r0, r7, r5
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d90f      	bls.n	8000408 <__udivmoddi4+0x124>
 80003e8:	eb1c 0202 	adds.w	r2, ip, r2
 80003ec:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f0:	bf2c      	ite	cs
 80003f2:	f04f 0901 	movcs.w	r9, #1
 80003f6:	f04f 0900 	movcc.w	r9, #0
 80003fa:	4290      	cmp	r0, r2
 80003fc:	d903      	bls.n	8000406 <__udivmoddi4+0x122>
 80003fe:	f1b9 0f00 	cmp.w	r9, #0
 8000402:	f000 80ce 	beq.w	80005a2 <__udivmoddi4+0x2be>
 8000406:	4645      	mov	r5, r8
 8000408:	1a12      	subs	r2, r2, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000410:	fb0e 2210 	mls	r2, lr, r0, r2
 8000414:	fb00 f707 	mul.w	r7, r0, r7
 8000418:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800041c:	42a7      	cmp	r7, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x14e>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 32ff 	add.w	r2, r0, #4294967295
 8000428:	d202      	bcs.n	8000430 <__udivmoddi4+0x14c>
 800042a:	42a7      	cmp	r7, r4
 800042c:	f200 80b3 	bhi.w	8000596 <__udivmoddi4+0x2b2>
 8000430:	4610      	mov	r0, r2
 8000432:	1be4      	subs	r4, r4, r7
 8000434:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000438:	e79c      	b.n	8000374 <__udivmoddi4+0x90>
 800043a:	f1c1 0420 	rsb	r4, r1, #32
 800043e:	408b      	lsls	r3, r1
 8000440:	fa05 fc01 	lsl.w	ip, r5, r1
 8000444:	fa22 f704 	lsr.w	r7, r2, r4
 8000448:	40e5      	lsrs	r5, r4
 800044a:	408a      	lsls	r2, r1
 800044c:	431f      	orrs	r7, r3
 800044e:	fa20 f304 	lsr.w	r3, r0, r4
 8000452:	4088      	lsls	r0, r1
 8000454:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000458:	ea43 030c 	orr.w	r3, r3, ip
 800045c:	fa1f fc87 	uxth.w	ip, r7
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb5 fef8 	udiv	lr, r5, r8
 8000468:	fb08 551e 	mls	r5, r8, lr, r5
 800046c:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000470:	fb0e f90c 	mul.w	r9, lr, ip
 8000474:	45a9      	cmp	r9, r5
 8000476:	d90e      	bls.n	8000496 <__udivmoddi4+0x1b2>
 8000478:	197d      	adds	r5, r7, r5
 800047a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047e:	bf2c      	ite	cs
 8000480:	f04f 0b01 	movcs.w	fp, #1
 8000484:	f04f 0b00 	movcc.w	fp, #0
 8000488:	45a9      	cmp	r9, r5
 800048a:	d903      	bls.n	8000494 <__udivmoddi4+0x1b0>
 800048c:	f1bb 0f00 	cmp.w	fp, #0
 8000490:	f000 808d 	beq.w	80005ae <__udivmoddi4+0x2ca>
 8000494:	46d6      	mov	lr, sl
 8000496:	eba5 0509 	sub.w	r5, r5, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb5 f3f8 	udiv	r3, r5, r8
 80004a2:	fb08 5513 	mls	r5, r8, r3, r5
 80004a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004aa:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80004ae:	45ac      	cmp	ip, r5
 80004b0:	d906      	bls.n	80004c0 <__udivmoddi4+0x1dc>
 80004b2:	197d      	adds	r5, r7, r5
 80004b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x1da>
 80004ba:	45ac      	cmp	ip, r5
 80004bc:	d87e      	bhi.n	80005bc <__udivmoddi4+0x2d8>
 80004be:	4643      	mov	r3, r8
 80004c0:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004c4:	eba5 050c 	sub.w	r5, r5, ip
 80004c8:	fba3 9802 	umull	r9, r8, r3, r2
 80004cc:	4545      	cmp	r5, r8
 80004ce:	46ce      	mov	lr, r9
 80004d0:	46c4      	mov	ip, r8
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x1f6>
 80004d4:	d106      	bne.n	80004e4 <__udivmoddi4+0x200>
 80004d6:	4548      	cmp	r0, r9
 80004d8:	d204      	bcs.n	80004e4 <__udivmoddi4+0x200>
 80004da:	3b01      	subs	r3, #1
 80004dc:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e0:	eb68 0c07 	sbc.w	ip, r8, r7
 80004e4:	2e00      	cmp	r6, #0
 80004e6:	d06f      	beq.n	80005c8 <__udivmoddi4+0x2e4>
 80004e8:	ebb0 020e 	subs.w	r2, r0, lr
 80004ec:	eb65 050c 	sbc.w	r5, r5, ip
 80004f0:	40ca      	lsrs	r2, r1
 80004f2:	fa05 f404 	lsl.w	r4, r5, r4
 80004f6:	40cd      	lsrs	r5, r1
 80004f8:	4618      	mov	r0, r3
 80004fa:	4314      	orrs	r4, r2
 80004fc:	2100      	movs	r1, #0
 80004fe:	e9c6 4500 	strd	r4, r5, [r6]
 8000502:	e73c      	b.n	800037e <__udivmoddi4+0x9a>
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	f1c3 0220 	rsb	r2, r3, #32
 800050c:	4099      	lsls	r1, r3
 800050e:	409c      	lsls	r4, r3
 8000510:	40d5      	lsrs	r5, r2
 8000512:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000516:	fa20 f202 	lsr.w	r2, r0, r2
 800051a:	fa1f f78c 	uxth.w	r7, ip
 800051e:	fbb5 f0fe 	udiv	r0, r5, lr
 8000522:	430a      	orrs	r2, r1
 8000524:	fb0e 5510 	mls	r5, lr, r0, r5
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052e:	fb00 f507 	mul.w	r5, r0, r7
 8000532:	428d      	cmp	r5, r1
 8000534:	d90e      	bls.n	8000554 <__udivmoddi4+0x270>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	bf2c      	ite	cs
 8000540:	f04f 0901 	movcs.w	r9, #1
 8000544:	f04f 0900 	movcc.w	r9, #0
 8000548:	428d      	cmp	r5, r1
 800054a:	d902      	bls.n	8000552 <__udivmoddi4+0x26e>
 800054c:	f1b9 0f00 	cmp.w	r9, #0
 8000550:	d031      	beq.n	80005b6 <__udivmoddi4+0x2d2>
 8000552:	4640      	mov	r0, r8
 8000554:	1b49      	subs	r1, r1, r5
 8000556:	b292      	uxth	r2, r2
 8000558:	fbb1 f5fe 	udiv	r5, r1, lr
 800055c:	fb0e 1115 	mls	r1, lr, r5, r1
 8000560:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000564:	fb05 f107 	mul.w	r1, r5, r7
 8000568:	4291      	cmp	r1, r2
 800056a:	d907      	bls.n	800057c <__udivmoddi4+0x298>
 800056c:	eb1c 0202 	adds.w	r2, ip, r2
 8000570:	f105 38ff 	add.w	r8, r5, #4294967295
 8000574:	d201      	bcs.n	800057a <__udivmoddi4+0x296>
 8000576:	4291      	cmp	r1, r2
 8000578:	d823      	bhi.n	80005c2 <__udivmoddi4+0x2de>
 800057a:	4645      	mov	r5, r8
 800057c:	1a52      	subs	r2, r2, r1
 800057e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000582:	e726      	b.n	80003d2 <__udivmoddi4+0xee>
 8000584:	4631      	mov	r1, r6
 8000586:	4630      	mov	r0, r6
 8000588:	e6f9      	b.n	800037e <__udivmoddi4+0x9a>
 800058a:	1a84      	subs	r4, r0, r2
 800058c:	eb65 0203 	sbc.w	r2, r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	4617      	mov	r7, r2
 8000594:	e70b      	b.n	80003ae <__udivmoddi4+0xca>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74a      	b.n	8000432 <__udivmoddi4+0x14e>
 800059c:	4464      	add	r4, ip
 800059e:	3802      	subs	r0, #2
 80005a0:	e6e4      	b.n	800036c <__udivmoddi4+0x88>
 80005a2:	3d02      	subs	r5, #2
 80005a4:	4462      	add	r2, ip
 80005a6:	e72f      	b.n	8000408 <__udivmoddi4+0x124>
 80005a8:	3902      	subs	r1, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e6c9      	b.n	8000342 <__udivmoddi4+0x5e>
 80005ae:	f1ae 0e02 	sub.w	lr, lr, #2
 80005b2:	443d      	add	r5, r7
 80005b4:	e76f      	b.n	8000496 <__udivmoddi4+0x1b2>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4461      	add	r1, ip
 80005ba:	e7cb      	b.n	8000554 <__udivmoddi4+0x270>
 80005bc:	3b02      	subs	r3, #2
 80005be:	443d      	add	r5, r7
 80005c0:	e77e      	b.n	80004c0 <__udivmoddi4+0x1dc>
 80005c2:	3d02      	subs	r5, #2
 80005c4:	4462      	add	r2, ip
 80005c6:	e7d9      	b.n	800057c <__udivmoddi4+0x298>
 80005c8:	4618      	mov	r0, r3
 80005ca:	4631      	mov	r1, r6
 80005cc:	e6d7      	b.n	800037e <__udivmoddi4+0x9a>
 80005ce:	bf00      	nop

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <AppMain>:
#include "svPlatform.h"
#include "svCLI.h"
#include "svDebug.h"
#include "svRingBuffer.h"
void AppMain()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af02      	add	r7, sp, #8
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80005da:	b662      	cpsie	i
}
 80005dc:	bf00      	nop
  __enable_irq();

  RESET_Init();
 80005de:	f001 fe19 	bl	8002214 <RESET_Init>
  LED_Init();
 80005e2:	f001 fd67 	bl	80020b4 <LED_Init>
  LED_SimpleAnimation();
 80005e6:	f001 fdbf 	bl	8002168 <LED_SimpleAnimation>

  svDebugInit();
 80005ea:	f001 ffd9 	bl	80025a0 <svDebugInit>
  UART_Init(_DEF_UART1, 115200);
 80005ee:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005f2:	2000      	movs	r0, #0
 80005f4:	f001 fe76 	bl	80022e4 <UART_Init>

  CAN_Init();
 80005f8:	f000 fda6 	bl	8001148 <CAN_Init>
  CAN_Open(_DEF_CAN1, CAN_NORMAL, CAN_CLASSIC, CAN_1M, CAN_2M);
 80005fc:	2305      	movs	r3, #5
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2304      	movs	r3, #4
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fe22 	bl	8001250 <CAN_Open>
  // Chk Reset Count
  uint32_t pre_time = HAL_GetTick();
 800060c:	f002 f86c 	bl	80026e8 <HAL_GetTick>
 8000610:	6078      	str	r0, [r7, #4]

  DebugMsg(DEBUGMSG_APP, "\r\n<< svCLI TEST : >>\r\n");
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <AppMain+0x54>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d902      	bls.n	8000620 <AppMain+0x4c>
 800061a:	4804      	ldr	r0, [pc, #16]	; (800062c <AppMain+0x58>)
 800061c:	f001 fff4 	bl	8002608 <svDebugMessage>
  /* Start scheduler */
  //osKernelStart();
  while(1)
  {

    svDebugProcess();
 8000620:	f001 ff66 	bl	80024f0 <svDebugProcess>
 8000624:	e7fc      	b.n	8000620 <AppMain+0x4c>
 8000626:	bf00      	nop
 8000628:	20000028 	.word	0x20000028
 800062c:	0800e8ec 	.word	0x0800e8ec

08000630 <HAL_GPIO_EXTI_Rising_Callback>:
    */
  }
}

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == USER_BUTTON_Pin)
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000640:	d103      	bne.n	800064a <HAL_GPIO_EXTI_Rising_Callback+0x1a>
  {
    HAL_GPIO_TogglePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin);
 8000642:	2101      	movs	r1, #1
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 8000646:	f003 fc87 	bl	8003f58 <HAL_GPIO_TogglePin>
  }
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	42020400 	.word	0x42020400

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f002 f80a 	bl	8002674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f810 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 f972 	bl	800094c <MX_GPIO_Init>
  MX_FLASH_Init();
 8000668:	f000 f8bc 	bl	80007e4 <MX_FLASH_Init>
  MX_ICACHE_Init();
 800066c:	f000 f8cc 	bl	8000808 <MX_ICACHE_Init>
  //MX_USART2_UART_Init();
  //MX_RTC_Init();
  MX_LPUART1_UART_Init();
 8000670:	f000 f8d6 	bl	8000820 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000674:	f000 f91e 	bl	80008b4 <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 8000678:	f000 f86e 	bl	8000758 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  AppMain();
 800067c:	f7ff ffaa 	bl	80005d4 <AppMain>
  /* USER CODE END 2 */

  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	e7fe      	b.n	8000680 <main+0x28>
	...

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b09c      	sub	sp, #112	; 0x70
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2250      	movs	r2, #80	; 0x50
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00d fd0a 	bl	800e0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006aa:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <SystemClock_Config+0xd0>)
 80006ac:	691b      	ldr	r3, [r3, #16]
 80006ae:	4a29      	ldr	r2, [pc, #164]	; (8000754 <SystemClock_Config+0xd0>)
 80006b0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80006b4:	6113      	str	r3, [r2, #16]
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <SystemClock_Config+0xd0>)
 80006b8:	691b      	ldr	r3, [r3, #16]
 80006ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c2:	bf00      	nop
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <SystemClock_Config+0xd0>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f003 0308 	and.w	r3, r3, #8
 80006cc:	2b08      	cmp	r3, #8
 80006ce:	d1f9      	bne.n	80006c4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006d0:	2309      	movs	r3, #9
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 80006d4:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006e4:	2303      	movs	r3, #3
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 20;
 80006ec:	2314      	movs	r3, #20
 80006ee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80006fc:	230c      	movs	r3, #12
 80006fe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000700:	2300      	movs	r3, #0
 8000702:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f003 fc7f 	bl	8004010 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000718:	f000 fa18 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	231f      	movs	r3, #31
 800071e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2303      	movs	r3, #3
 8000722:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2103      	movs	r1, #3
 800073a:	4618      	mov	r0, r3
 800073c:	f004 f8a0 	bl	8004880 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000746:	f000 fa01 	bl	8000b4c <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3770      	adds	r7, #112	; 0x70
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	44020800 	.word	0x44020800

08000758 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_FDCAN1_Init+0x84>)
 800075e:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <MX_FDCAN1_Init+0x88>)
 8000760:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_FDCAN1_Init+0x84>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_FDCAN1_Init+0x84>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_FDCAN1_Init+0x84>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_FDCAN1_Init+0x84>)
 8000776:	2200      	movs	r2, #0
 8000778:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_FDCAN1_Init+0x84>)
 800077c:	2200      	movs	r2, #0
 800077e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_FDCAN1_Init+0x84>)
 8000782:	2200      	movs	r2, #0
 8000784:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_FDCAN1_Init+0x84>)
 8000788:	2210      	movs	r2, #16
 800078a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_FDCAN1_Init+0x84>)
 800078e:	2201      	movs	r2, #1
 8000790:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_FDCAN1_Init+0x84>)
 8000794:	2202      	movs	r2, #2
 8000796:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_FDCAN1_Init+0x84>)
 800079a:	2202      	movs	r2, #2
 800079c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_FDCAN1_Init+0x84>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <MX_FDCAN1_Init+0x84>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_FDCAN1_Init+0x84>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_FDCAN1_Init+0x84>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_FDCAN1_Init+0x84>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_FDCAN1_Init+0x84>)
 80007be:	2200      	movs	r2, #0
 80007c0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_FDCAN1_Init+0x84>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_FDCAN1_Init+0x84>)
 80007ca:	f002 f943 	bl	8002a54 <HAL_FDCAN_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80007d4:	f000 f9ba 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000d0 	.word	0x200000d0
 80007e0:	4000a400 	.word	0x4000a400

080007e4 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 80007e8:	f003 f816 	bl	8003818 <HAL_FLASH_Unlock>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 80007f2:	f000 f9ab 	bl	8000b4c <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 80007f6:	f003 f835 	bl	8003864 <HAL_FLASH_Lock>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 8000800:	f000 f9a4 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 800080c:	f003 fbf0 	bl	8003ff0 <HAL_ICACHE_Enable>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000816:	f000 f999 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000824:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000826:	4a21      	ldr	r2, [pc, #132]	; (80008ac <MX_LPUART1_UART_Init+0x8c>)
 8000828:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 800082c:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <MX_LPUART1_UART_Init+0x90>)
 800082e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000844:	220c      	movs	r2, #12
 8000846:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 800085c:	2200      	movs	r2, #0
 800085e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000860:	4811      	ldr	r0, [pc, #68]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000862:	f009 ffed 	bl	800a840 <HAL_UART_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800086c:	f000 f96e 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000874:	f00b ff23 	bl	800c6be <HAL_UARTEx_SetTxFifoThreshold>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800087e:	f000 f965 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000882:	2100      	movs	r1, #0
 8000884:	4808      	ldr	r0, [pc, #32]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000886:	f00b ff58 	bl	800c73a <HAL_UARTEx_SetRxFifoThreshold>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000890:	f000 f95c 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_LPUART1_UART_Init+0x88>)
 8000896:	f00b fed9 	bl	800c64c <HAL_UARTEx_DisableFifoMode>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80008a0:	f000 f954 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000134 	.word	0x20000134
 80008ac:	44002400 	.word	0x44002400
 80008b0:	00033324 	.word	0x00033324

080008b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008ba:	4a23      	ldr	r2, [pc, #140]	; (8000948 <MX_USART3_UART_Init+0x94>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008fc:	4811      	ldr	r0, [pc, #68]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008fe:	f009 ff9f 	bl	800a840 <HAL_UART_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000908:	f000 f920 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090c:	2100      	movs	r1, #0
 800090e:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_USART3_UART_Init+0x90>)
 8000910:	f00b fed5 	bl	800c6be <HAL_UARTEx_SetTxFifoThreshold>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800091a:	f000 f917 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091e:	2100      	movs	r1, #0
 8000920:	4808      	ldr	r0, [pc, #32]	; (8000944 <MX_USART3_UART_Init+0x90>)
 8000922:	f00b ff0a 	bl	800c73a <HAL_UARTEx_SetRxFifoThreshold>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800092c:	f000 f90e 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_USART3_UART_Init+0x90>)
 8000932:	f00b fe8b 	bl	800c64c <HAL_UARTEx_DisableFifoMode>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800093c:	f000 f906 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200001c8 	.word	0x200001c8
 8000948:	40004800 	.word	0x40004800

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000962:	4b6b      	ldr	r3, [pc, #428]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000968:	4a69      	ldr	r2, [pc, #420]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000972:	4b67      	ldr	r3, [pc, #412]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000978:	f003 0310 	and.w	r3, r3, #16
 800097c:	623b      	str	r3, [r7, #32]
 800097e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000980:	4b63      	ldr	r3, [pc, #396]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000986:	4a62      	ldr	r2, [pc, #392]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000990:	4b5f      	ldr	r3, [pc, #380]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	61fb      	str	r3, [r7, #28]
 800099c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099e:	4b5c      	ldr	r3, [pc, #368]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009a4:	4a5a      	ldr	r2, [pc, #360]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009a6:	f043 0320 	orr.w	r3, r3, #32
 80009aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009ae:	4b58      	ldr	r3, [pc, #352]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b4:	f003 0320 	and.w	r3, r3, #32
 80009b8:	61bb      	str	r3, [r7, #24]
 80009ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009bc:	4b54      	ldr	r3, [pc, #336]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009c2:	4a53      	ldr	r2, [pc, #332]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009cc:	4b50      	ldr	r3, [pc, #320]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4b4d      	ldr	r3, [pc, #308]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009e0:	4a4b      	ldr	r2, [pc, #300]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009ea:	4b49      	ldr	r3, [pc, #292]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f8:	4b45      	ldr	r3, [pc, #276]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 80009fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009fe:	4a44      	ldr	r2, [pc, #272]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a08:	4b41      	ldr	r3, [pc, #260]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a16:	4b3e      	ldr	r3, [pc, #248]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a1c:	4a3c      	ldr	r2, [pc, #240]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a26:	4b3a      	ldr	r3, [pc, #232]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b36      	ldr	r3, [pc, #216]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a3a:	4a35      	ldr	r2, [pc, #212]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a44:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <MX_GPIO_Init+0x1c4>)
 8000a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_YELLOW_GPIO_Port, LED2_YELLOW_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2110      	movs	r1, #16
 8000a56:	482f      	ldr	r0, [pc, #188]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 8000a58:	f003 fa66 	bl	8003f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GREEN_GPIO_Port, LED1_GREEN_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2101      	movs	r1, #1
 8000a60:	482d      	ldr	r0, [pc, #180]	; (8000b18 <MX_GPIO_Init+0x1cc>)
 8000a62:	f003 fa61 	bl	8003f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_RED_GPIO_Port, LED3_RED_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2110      	movs	r1, #16
 8000a6a:	482c      	ldr	r0, [pc, #176]	; (8000b1c <MX_GPIO_Init+0x1d0>)
 8000a6c:	f003 fa5c 	bl	8003f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <MX_GPIO_Init+0x1d4>)
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4827      	ldr	r0, [pc, #156]	; (8000b24 <MX_GPIO_Init+0x1d8>)
 8000a86:	f003 f8fd 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED2_YELLOW_Pin;
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481c      	ldr	r0, [pc, #112]	; (8000b14 <MX_GPIO_Init+0x1c8>)
 8000aa2:	f003 f8ef 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_GREEN_Pin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	4619      	mov	r1, r3
 8000abc:	4816      	ldr	r0, [pc, #88]	; (8000b18 <MX_GPIO_Init+0x1cc>)
 8000abe:	f003 f8e1 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_RED_Pin */
  GPIO_InitStruct.Pin = LED3_RED_Pin;
 8000ac2:	2310      	movs	r3, #16
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED3_RED_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4810      	ldr	r0, [pc, #64]	; (8000b1c <MX_GPIO_Init+0x1d0>)
 8000ada:	f003 f8d3 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_GPIO_Init+0x1d4>)
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	480a      	ldr	r0, [pc, #40]	; (8000b1c <MX_GPIO_Init+0x1d0>)
 8000af2:	f003 f8c7 	bl	8003c84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 5, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2105      	movs	r1, #5
 8000afa:	2018      	movs	r0, #24
 8000afc:	f001 fedc 	bl	80028b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000b00:	2018      	movs	r0, #24
 8000b02:	f001 fef3 	bl	80028ec <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b06:	bf00      	nop
 8000b08:	3738      	adds	r7, #56	; 0x38
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	44020c00 	.word	0x44020c00
 8000b14:	42021400 	.word	0x42021400
 8000b18:	42020400 	.word	0x42020400
 8000b1c:	42021800 	.word	0x42021800
 8000b20:	10110000 	.word	0x10110000
 8000b24:	42020800 	.word	0x42020800

08000b28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d101      	bne.n	8000b3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b3a:	f001 fdc1 	bl	80026c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40001000 	.word	0x40001000

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>

08000b56 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	210f      	movs	r1, #15
 8000b5e:	f06f 0001 	mvn.w	r0, #1
 8000b62:	f001 fea9 	bl	80028b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0d0      	sub	sp, #320	; 0x140
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000b7a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000b90:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000b94:	4618      	mov	r0, r3
 8000b96:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f00d fa85 	bl	800e0ac <memset>
  if(huart->Instance==LPUART1)
 8000ba2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ba6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a9e      	ldr	r2, [pc, #632]	; (8000e28 <HAL_UART_MspInit+0x2bc>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d15e      	bne.n	8000c72 <HAL_UART_MspInit+0x106>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bb4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000bb8:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000bbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8000bc8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000bcc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd6:	f107 0320 	add.w	r3, r7, #32
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 f9ca 	bl	8004f74 <HAL_RCCEx_PeriphCLKConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000be6:	f7ff ffb1 	bl	8000b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bea:	4b90      	ldr	r3, [pc, #576]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000bec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000bf0:	4a8e      	ldr	r2, [pc, #568]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000bfa:	4b8c      	ldr	r3, [pc, #560]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000bfc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c00:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8000c04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c08:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c12:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000c16:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	4b84      	ldr	r3, [pc, #528]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c1e:	4a83      	ldr	r2, [pc, #524]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c28:	4b80      	ldr	r3, [pc, #512]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c2e:	f003 0202 	and.w	r2, r3, #2
 8000c32:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c36:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c40:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000c44:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c46:	23c0      	movs	r3, #192	; 0xc0
 8000c48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c5e:	2308      	movs	r3, #8
 8000c60:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4871      	ldr	r0, [pc, #452]	; (8000e30 <HAL_UART_MspInit+0x2c4>)
 8000c6c:	f003 f80a 	bl	8003c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c70:	e0d5      	b.n	8000e1e <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART2)
 8000c72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c76:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a6d      	ldr	r2, [pc, #436]	; (8000e34 <HAL_UART_MspInit+0x2c8>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d165      	bne.n	8000d50 <HAL_UART_MspInit+0x1e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c84:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c88:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000c8c:	f04f 0202 	mov.w	r2, #2
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c98:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000c9c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 f963 	bl	8004f74 <HAL_RCCEx_PeriphCLKConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8000cb4:	f7ff ff4a 	bl	8000b4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb8:	4b5c      	ldr	r3, [pc, #368]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000cba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000cbe:	4a5b      	ldr	r2, [pc, #364]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000cc8:	4b58      	ldr	r3, [pc, #352]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000cce:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8000cd2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000ce0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ce4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce6:	4b51      	ldr	r3, [pc, #324]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cec:	4a4f      	ldr	r2, [pc, #316]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cf6:	4b4d      	ldr	r3, [pc, #308]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cfc:	f003 0208 	and.w	r2, r3, #8
 8000d00:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000d12:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d14:	2360      	movs	r3, #96	; 0x60
 8000d16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d32:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000d36:	4619      	mov	r1, r3
 8000d38:	483f      	ldr	r0, [pc, #252]	; (8000e38 <HAL_UART_MspInit+0x2cc>)
 8000d3a:	f002 ffa3 	bl	8003c84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2105      	movs	r1, #5
 8000d42:	203b      	movs	r0, #59	; 0x3b
 8000d44:	f001 fdb8 	bl	80028b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d48:	203b      	movs	r0, #59	; 0x3b
 8000d4a:	f001 fdcf 	bl	80028ec <HAL_NVIC_EnableIRQ>
}
 8000d4e:	e066      	b.n	8000e1e <HAL_UART_MspInit+0x2b2>
  else if(huart->Instance==USART3)
 8000d50:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d54:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a37      	ldr	r2, [pc, #220]	; (8000e3c <HAL_UART_MspInit+0x2d0>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d15d      	bne.n	8000e1e <HAL_UART_MspInit+0x2b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d62:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d66:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000d6a:	f04f 0204 	mov.w	r2, #4
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d76:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000d7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d7e:	2200      	movs	r2, #0
 8000d80:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	4618      	mov	r0, r3
 8000d88:	f004 f8f4 	bl	8004f74 <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_UART_MspInit+0x22a>
      Error_Handler();
 8000d92:	f7ff fedb 	bl	8000b4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000d98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d9c:	4a23      	ldr	r2, [pc, #140]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000da8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000dac:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8000db0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000db4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dbe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000dc2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dca:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_UART_MspInit+0x2c0>)
 8000dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dda:	f003 0208 	and.w	r2, r3, #8
 8000dde:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000de2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000dec:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000df0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000df2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000df6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e12:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000e16:	4619      	mov	r1, r3
 8000e18:	4807      	ldr	r0, [pc, #28]	; (8000e38 <HAL_UART_MspInit+0x2cc>)
 8000e1a:	f002 ff33 	bl	8003c84 <HAL_GPIO_Init>
}
 8000e1e:	bf00      	nop
 8000e20:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	44002400 	.word	0x44002400
 8000e2c:	44020c00 	.word	0x44020c00
 8000e30:	42020400 	.word	0x42020400
 8000e34:	40004400 	.word	0x40004400
 8000e38:	42020c00 	.word	0x42020c00
 8000e3c:	40004800 	.word	0x40004800

08000e40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	; 0x38
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e48:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <HAL_InitTick+0xd8>)
 8000e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e4e:	4a32      	ldr	r2, [pc, #200]	; (8000f18 <HAL_InitTick+0xd8>)
 8000e50:	f043 0310 	orr.w	r3, r3, #16
 8000e54:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <HAL_InitTick+0xd8>)
 8000e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e5e:	f003 0310 	and.w	r3, r3, #16
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e66:	f107 020c 	add.w	r2, r7, #12
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f004 f847 	bl	8004f04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d103      	bne.n	8000e88 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e80:	f003 fffe 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8000e84:	6378      	str	r0, [r7, #52]	; 0x34
 8000e86:	e004      	b.n	8000e92 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e88:	f003 fffa 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e94:	095b      	lsrs	r3, r3, #5
 8000e96:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <HAL_InitTick+0xdc>)
 8000e98:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9c:	09db      	lsrs	r3, r3, #7
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <HAL_InitTick+0xe0>)
 8000ea4:	4a1f      	ldr	r2, [pc, #124]	; (8000f24 <HAL_InitTick+0xe4>)
 8000ea6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_InitTick+0xe0>)
 8000eaa:	2263      	movs	r2, #99	; 0x63
 8000eac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <HAL_InitTick+0xe0>)
 8000eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_InitTick+0xe0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_InitTick+0xe0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000ec0:	4817      	ldr	r0, [pc, #92]	; (8000f20 <HAL_InitTick+0xe0>)
 8000ec2:	f009 f8d7 	bl	800a074 <HAL_TIM_Base_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ecc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d118      	bne.n	8000f06 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ed4:	4812      	ldr	r0, [pc, #72]	; (8000f20 <HAL_InitTick+0xe0>)
 8000ed6:	f009 f92f 	bl	800a138 <HAL_TIM_Base_Start_IT>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10e      	bne.n	8000f06 <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b0f      	cmp	r3, #15
 8000eec:	d808      	bhi.n	8000f00 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	2031      	movs	r0, #49	; 0x31
 8000ef4:	f001 fce0 	bl	80028b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <HAL_InitTick+0xe8>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e002      	b.n	8000f06 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000f06:	2031      	movs	r0, #49	; 0x31
 8000f08:	f001 fcf0 	bl	80028ec <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8000f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3738      	adds	r7, #56	; 0x38
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	44020c00 	.word	0x44020c00
 8000f1c:	0a7c5ac5 	.word	0x0a7c5ac5
 8000f20:	2000025c 	.word	0x2000025c
 8000f24:	40001000 	.word	0x40001000
 8000f28:	2000002c 	.word	0x2000002c

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f30:	e7fe      	b.n	8000f30 <NMI_Handler+0x4>

08000f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <HardFault_Handler+0x4>

08000f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <MemManage_Handler+0x4>

08000f3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <BusFault_Handler+0x4>

08000f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <UsageFault_Handler+0x4>

08000f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000f5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f60:	f003 f814 	bl	8003f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <TIM6_IRQHandler+0x10>)
 8000f6e:	f009 f991 	bl	800a294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000025c 	.word	0x2000025c

08000f7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <USART2_IRQHandler+0x10>)
 8000f82:	f009 fdad 	bl	800aae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000860 	.word	0x20000860

08000f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f98:	4a14      	ldr	r2, [pc, #80]	; (8000fec <_sbrk+0x5c>)
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <_sbrk+0x60>)
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <_sbrk+0x64>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <_sbrk+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d207      	bcs.n	8000fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc0:	f00d f8a0 	bl	800e104 <__errno>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	e009      	b.n	8000fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <_sbrk+0x64>)
 8000fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200a0000 	.word	0x200a0000
 8000ff0:	00000400 	.word	0x00000400
 8000ff4:	200002a8 	.word	0x200002a8
 8000ff8:	20001518 	.word	0x20001518

08000ffc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001002:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <SystemInit+0xdc>)
 8001004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001008:	4a33      	ldr	r2, [pc, #204]	; (80010d8 <SystemInit+0xdc>)
 800100a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800100e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001012:	4b32      	ldr	r3, [pc, #200]	; (80010dc <SystemInit+0xe0>)
 8001014:	2201      	movs	r2, #1
 8001016:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001018:	4b30      	ldr	r3, [pc, #192]	; (80010dc <SystemInit+0xe0>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800101e:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <SystemInit+0xe0>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <SystemInit+0xe0>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	492c      	ldr	r1, [pc, #176]	; (80010dc <SystemInit+0xe0>)
 800102a:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <SystemInit+0xe4>)
 800102c:	4013      	ands	r3, r2
 800102e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <SystemInit+0xe0>)
 8001032:	2200      	movs	r2, #0
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001036:	4b29      	ldr	r3, [pc, #164]	; (80010dc <SystemInit+0xe0>)
 8001038:	2200      	movs	r2, #0
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <SystemInit+0xe0>)
 800103e:	2200      	movs	r2, #0
 8001040:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <SystemInit+0xe0>)
 8001044:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <SystemInit+0xe8>)
 8001046:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <SystemInit+0xe0>)
 800104a:	2200      	movs	r2, #0
 800104c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <SystemInit+0xe0>)
 8001050:	4a24      	ldr	r2, [pc, #144]	; (80010e4 <SystemInit+0xe8>)
 8001052:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <SystemInit+0xe0>)
 8001056:	2200      	movs	r2, #0
 8001058:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <SystemInit+0xe0>)
 800105c:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <SystemInit+0xe8>)
 800105e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <SystemInit+0xe0>)
 8001062:	2200      	movs	r2, #0
 8001064:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <SystemInit+0xe0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <SystemInit+0xe0>)
 800106c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001070:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <SystemInit+0xe0>)
 8001074:	2200      	movs	r2, #0
 8001076:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <SystemInit+0xdc>)
 800107a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800107e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <SystemInit+0xec>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001088:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001090:	d003      	beq.n	800109a <SystemInit+0x9e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001098:	d117      	bne.n	80010ca <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <SystemInit+0xec>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d005      	beq.n	80010b2 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <SystemInit+0xec>)
 80010a8:	4a10      	ldr	r2, [pc, #64]	; (80010ec <SystemInit+0xf0>)
 80010aa:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <SystemInit+0xec>)
 80010ae:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <SystemInit+0xf4>)
 80010b0:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <SystemInit+0xec>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <SystemInit+0xec>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <SystemInit+0xec>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <SystemInit+0xec>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	61d3      	str	r3, [r2, #28]
  }
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00
 80010dc:	44020c00 	.word	0x44020c00
 80010e0:	eae2eae3 	.word	0xeae2eae3
 80010e4:	01010280 	.word	0x01010280
 80010e8:	40022000 	.word	0x40022000
 80010ec:	08192a3b 	.word	0x08192a3b
 80010f0:	4c5d6e7f 	.word	0x4c5d6e7f

080010f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f8:	f7ff ff80 	bl	8000ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <LoopForever+0x6>)
  ldr r1, =_edata
 80010fe:	490d      	ldr	r1, [pc, #52]	; (8001134 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <LoopForever+0xe>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001114:	4c0a      	ldr	r4, [pc, #40]	; (8001140 <LoopForever+0x16>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001122:	f00c fff5 	bl	800e110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001126:	f7ff fa97 	bl	8000658 <main>

0800112a <LoopForever>:

LoopForever:
    b LoopForever
 800112a:	e7fe      	b.n	800112a <LoopForever>
  ldr   r0, =_estack
 800112c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001138:	0800ee14 	.word	0x0800ee14
  ldr r2, =_sbss
 800113c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8001140:	20001518 	.word	0x20001518

08001144 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC1_IRQHandler>
	...

08001148 <CAN_Init>:
static volatile uint32_t err_int_cnt = 0;

static void CAN_ErrUpdate(uint8_t ch);

BOOL     CAN_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 800114e:	2301      	movs	r3, #1
 8001150:	603b      	str	r3, [r7, #0]

  for(int i=0; i<CAN_MAX_CH; i++)
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	e070      	b.n	800123a <CAN_Init+0xf2>
  {
    can_tbl[i].is_init = TRUE;
 8001158:	4a3c      	ldr	r2, [pc, #240]	; (800124c <CAN_Init+0x104>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f240 516c 	movw	r1, #1388	; 0x56c
 8001160:	fb01 f303 	mul.w	r3, r1, r3
 8001164:	4413      	add	r3, r2
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]
    can_tbl[i].is_open = TRUE;
 800116a:	4a38      	ldr	r2, [pc, #224]	; (800124c <CAN_Init+0x104>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f240 516c 	movw	r1, #1388	; 0x56c
 8001172:	fb01 f303 	mul.w	r3, r1, r3
 8001176:	4413      	add	r3, r2
 8001178:	3304      	adds	r3, #4
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]
    can_tbl[i].err_code = CAN_ERR_NONE;
 800117e:	4a33      	ldr	r2, [pc, #204]	; (800124c <CAN_Init+0x104>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f240 516c 	movw	r1, #1388	; 0x56c
 8001186:	fb01 f303 	mul.w	r3, r1, r3
 800118a:	4413      	add	r3, r2
 800118c:	3308      	adds	r3, #8
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
    can_tbl[i].state = 0;
 8001192:	4a2e      	ldr	r2, [pc, #184]	; (800124c <CAN_Init+0x104>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f240 516c 	movw	r1, #1388	; 0x56c
 800119a:	fb01 f303 	mul.w	r3, r1, r3
 800119e:	4413      	add	r3, r2
 80011a0:	330c      	adds	r3, #12
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
    can_tbl[i].recovery_cnt = 0;
 80011a6:	4a29      	ldr	r2, [pc, #164]	; (800124c <CAN_Init+0x104>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f240 516c 	movw	r1, #1388	; 0x56c
 80011ae:	fb01 f303 	mul.w	r3, r1, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	3310      	adds	r3, #16
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]

    can_tbl[i].q_rx_full_cnt = 0;
 80011ba:	4a24      	ldr	r2, [pc, #144]	; (800124c <CAN_Init+0x104>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f240 516c 	movw	r1, #1388	; 0x56c
 80011c2:	fb01 f303 	mul.w	r3, r1, r3
 80011c6:	4413      	add	r3, r2
 80011c8:	3314      	adds	r3, #20
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
    can_tbl[i].q_tx_full_cnt = 0;
 80011ce:	4a1f      	ldr	r2, [pc, #124]	; (800124c <CAN_Init+0x104>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f240 516c 	movw	r1, #1388	; 0x56c
 80011d6:	fb01 f303 	mul.w	r3, r1, r3
 80011da:	4413      	add	r3, r2
 80011dc:	3318      	adds	r3, #24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_full_cnt = 0;
 80011e2:	4a1a      	ldr	r2, [pc, #104]	; (800124c <CAN_Init+0x104>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f240 516c 	movw	r1, #1388	; 0x56c
 80011ea:	fb01 f303 	mul.w	r3, r1, r3
 80011ee:	4413      	add	r3, r2
 80011f0:	331c      	adds	r3, #28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_lost_cnt = 0;
 80011f6:	4a15      	ldr	r2, [pc, #84]	; (800124c <CAN_Init+0x104>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f240 516c 	movw	r1, #1388	; 0x56c
 80011fe:	fb01 f303 	mul.w	r3, r1, r3
 8001202:	4413      	add	r3, r2
 8001204:	3320      	adds	r3, #32
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]

    qbufferCreateBySize(&can_tbl[i].q_msg, (uint8_t *)&can_tbl[i].can_msg[0], sizeof(CAN_MSG_t), CAN_MSG_RX_BUF_MAX);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f240 526c 	movw	r2, #1388	; 0x56c
 8001210:	fb02 f303 	mul.w	r3, r2, r3
 8001214:	3398      	adds	r3, #152	; 0x98
 8001216:	4a0d      	ldr	r2, [pc, #52]	; (800124c <CAN_Init+0x104>)
 8001218:	1898      	adds	r0, r3, r2
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f240 526c 	movw	r2, #1388	; 0x56c
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	33a8      	adds	r3, #168	; 0xa8
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <CAN_Init+0x104>)
 8001228:	4413      	add	r3, r2
 800122a:	1d19      	adds	r1, r3, #4
 800122c:	2310      	movs	r3, #16
 800122e:	224c      	movs	r2, #76	; 0x4c
 8001230:	f00b fb10 	bl	800c854 <qbufferCreateBySize>
  for(int i=0; i<CAN_MAX_CH; i++)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3301      	adds	r3, #1
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	dd8b      	ble.n	8001158 <CAN_Init+0x10>

  }
  return ret;
 8001240:	683b      	ldr	r3, [r7, #0]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200002ac 	.word	0x200002ac

08001250 <CAN_Open>:

BOOL     CAN_Open(uint8_t ch, CAN_MODE_t mode, CAN_FRAME_t frame, CAN_BAUD_t baud, CAN_BAUD_t baud_data)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af02      	add	r7, sp, #8
 8001256:	4604      	mov	r4, r0
 8001258:	4608      	mov	r0, r1
 800125a:	4611      	mov	r1, r2
 800125c:	461a      	mov	r2, r3
 800125e:	4623      	mov	r3, r4
 8001260:	71fb      	strb	r3, [r7, #7]
 8001262:	4603      	mov	r3, r0
 8001264:	71bb      	strb	r3, [r7, #6]
 8001266:	460b      	mov	r3, r1
 8001268:	717b      	strb	r3, [r7, #5]
 800126a:	4613      	mov	r3, r2
 800126c:	713b      	strb	r3, [r7, #4]
  BOOL ret = TRUE;
 800126e:	2301      	movs	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
  FDCAN_HandleTypeDef  *p_can;
  uint32_t tdc_offset;

  p_can = &can_tbl[ch].hfdcan;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f240 526c 	movw	r2, #1388	; 0x56c
 8001278:	fb02 f303 	mul.w	r3, r2, r3
 800127c:	3330      	adds	r3, #48	; 0x30
 800127e:	4a90      	ldr	r2, [pc, #576]	; (80014c0 <CAN_Open+0x270>)
 8001280:	4413      	add	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
  if(ch >= CAN_MAX_CH) return FALSE;
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <CAN_Open+0x3e>
 800128a:	2300      	movs	r3, #0
 800128c:	e114      	b.n	80014b8 <CAN_Open+0x268>

  switch(ch)
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	f040 80a8 	bne.w	80013e6 <CAN_Open+0x196>
  {
    case _DEF_CAN1:
      p_can->Instance = FDCAN1;
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4a8a      	ldr	r2, [pc, #552]	; (80014c4 <CAN_Open+0x274>)
 800129a:	601a      	str	r2, [r3, #0]
      p_can->Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
      p_can->Init.FrameFormat = frame_tbl[frame];
 80012a2:	797b      	ldrb	r3, [r7, #5]
 80012a4:	4a88      	ldr	r2, [pc, #544]	; (80014c8 <CAN_Open+0x278>)
 80012a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	609a      	str	r2, [r3, #8]
      p_can->Init.Mode = mode_tbl[mode];
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	4a86      	ldr	r2, [pc, #536]	; (80014cc <CAN_Open+0x27c>)
 80012b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	60da      	str	r2, [r3, #12]
      p_can->Init.AutoRetransmission = ENABLE;
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2201      	movs	r2, #1
 80012be:	741a      	strb	r2, [r3, #16]
      p_can->Init.TransmitPause = ENABLE;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	2201      	movs	r2, #1
 80012c4:	745a      	strb	r2, [r3, #17]
      p_can->Init.ProtocolException = ENABLE;
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	2201      	movs	r2, #1
 80012ca:	749a      	strb	r2, [r3, #18]
      p_can->Init.NominalPrescaler = p_baud_normal[baud].prescaler;
 80012cc:	4b80      	ldr	r3, [pc, #512]	; (80014d0 <CAN_Open+0x280>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	793b      	ldrb	r3, [r7, #4]
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	4413      	add	r3, r2
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	615a      	str	r2, [r3, #20]
      p_can->Init.NominalSyncJumpWidth = p_baud_normal[baud].sjw;
 80012dc:	4b7c      	ldr	r3, [pc, #496]	; (80014d0 <CAN_Open+0x280>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	793b      	ldrb	r3, [r7, #4]
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	4413      	add	r3, r2
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	619a      	str	r2, [r3, #24]
      p_can->Init.NominalTimeSeg1 = p_baud_normal[baud].tseg1;
 80012ec:	4b78      	ldr	r3, [pc, #480]	; (80014d0 <CAN_Open+0x280>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	793b      	ldrb	r3, [r7, #4]
 80012f2:	011b      	lsls	r3, r3, #4
 80012f4:	4413      	add	r3, r2
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	61da      	str	r2, [r3, #28]
      p_can->Init.NominalTimeSeg2 = p_baud_normal[baud].tseg2;
 80012fc:	4b74      	ldr	r3, [pc, #464]	; (80014d0 <CAN_Open+0x280>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	793b      	ldrb	r3, [r7, #4]
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	4413      	add	r3, r2
 8001306:	68da      	ldr	r2, [r3, #12]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	621a      	str	r2, [r3, #32]
      p_can->Init.DataPrescaler = p_baud_data[baud_data].prescaler;
 800130c:	4b71      	ldr	r3, [pc, #452]	; (80014d4 <CAN_Open+0x284>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	4413      	add	r3, r2
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
      p_can->Init.DataSyncJumpWidth = p_baud_data[baud_data].sjw;
 800131e:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <CAN_Open+0x284>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	4413      	add	r3, r2
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
      p_can->Init.DataTimeSeg1 = p_baud_data[baud_data].tseg1;
 8001330:	4b68      	ldr	r3, [pc, #416]	; (80014d4 <CAN_Open+0x284>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	4413      	add	r3, r2
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
      p_can->Init.DataTimeSeg2 = p_baud_data[baud_data].tseg2;
 8001342:	4b64      	ldr	r3, [pc, #400]	; (80014d4 <CAN_Open+0x284>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	4413      	add	r3, r2
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	631a      	str	r2, [r3, #48]	; 0x30
      p_can->Init.StdFiltersNbr = 28;
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	221c      	movs	r2, #28
 8001358:	635a      	str	r2, [r3, #52]	; 0x34
      p_can->Init.ExtFiltersNbr = 8;
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	2208      	movs	r2, #8
 800135e:	639a      	str	r2, [r3, #56]	; 0x38
      p_can->Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION; //FIFO MODE
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	2200      	movs	r2, #0
 8001364:	63da      	str	r2, [r3, #60]	; 0x3c
      can_tbl[ch].mode                  = mode;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4a55      	ldr	r2, [pc, #340]	; (80014c0 <CAN_Open+0x270>)
 800136a:	f240 516c 	movw	r1, #1388	; 0x56c
 800136e:	fb01 f303 	mul.w	r3, r1, r3
 8001372:	4413      	add	r3, r2
 8001374:	332c      	adds	r3, #44	; 0x2c
 8001376:	79ba      	ldrb	r2, [r7, #6]
 8001378:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].frame                 = frame;
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	4a50      	ldr	r2, [pc, #320]	; (80014c0 <CAN_Open+0x270>)
 800137e:	f240 516c 	movw	r1, #1388	; 0x56c
 8001382:	fb01 f303 	mul.w	r3, r1, r3
 8001386:	4413      	add	r3, r2
 8001388:	332d      	adds	r3, #45	; 0x2d
 800138a:	797a      	ldrb	r2, [r7, #5]
 800138c:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud                  = baud;
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	4a4b      	ldr	r2, [pc, #300]	; (80014c0 <CAN_Open+0x270>)
 8001392:	f240 516c 	movw	r1, #1388	; 0x56c
 8001396:	fb01 f303 	mul.w	r3, r1, r3
 800139a:	4413      	add	r3, r2
 800139c:	332e      	adds	r3, #46	; 0x2e
 800139e:	793a      	ldrb	r2, [r7, #4]
 80013a0:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud_data             = baud_data;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	4a46      	ldr	r2, [pc, #280]	; (80014c0 <CAN_Open+0x270>)
 80013a6:	f240 516c 	movw	r1, #1388	; 0x56c
 80013aa:	fb01 f303 	mul.w	r3, r1, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	332f      	adds	r3, #47	; 0x2f
 80013b2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80013b6:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].fifo_idx              = FDCAN_RX_FIFO0;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	4a41      	ldr	r2, [pc, #260]	; (80014c0 <CAN_Open+0x270>)
 80013bc:	f240 516c 	movw	r1, #1388	; 0x56c
 80013c0:	fb01 f303 	mul.w	r3, r1, r3
 80013c4:	4413      	add	r3, r2
 80013c6:	3324      	adds	r3, #36	; 0x24
 80013c8:	2240      	movs	r2, #64	; 0x40
 80013ca:	601a      	str	r2, [r3, #0]
      can_tbl[ch].enable_int            = FDCAN_IT_LIST_RX_FIFO0 |
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4a3c      	ldr	r2, [pc, #240]	; (80014c0 <CAN_Open+0x270>)
 80013d0:	f240 516c 	movw	r1, #1388	; 0x56c
 80013d4:	fb01 f303 	mul.w	r3, r1, r3
 80013d8:	4413      	add	r3, r2
 80013da:	3328      	adds	r3, #40	; 0x28
 80013dc:	4a3e      	ldr	r2, [pc, #248]	; (80014d8 <CAN_Open+0x288>)
 80013de:	601a      	str	r2, [r3, #0]
                                          FDCAN_IT_BUS_OFF |
                                          FDCAN_IT_ERROR_WARNING |
                                          FDCAN_IT_ERROR_PASSIVE;

      ret = TRUE;
 80013e0:	2301      	movs	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]

      break;
 80013e4:	bf00      	nop
  }

  if(ret != TRUE)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d001      	beq.n	80013f0 <CAN_Open+0x1a0>
  {
    return FALSE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	e063      	b.n	80014b8 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_Init(p_can) != HAL_OK)
 80013f0:	6938      	ldr	r0, [r7, #16]
 80013f2:	f001 fb2f 	bl	8002a54 <HAL_FDCAN_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <CAN_Open+0x1b0>
  {
    return FALSE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e05b      	b.n	80014b8 <CAN_Open+0x268>
  }

  CAN_ConfigFilter(ch, 0, CAN_STD, 0x0000, 0x0000);
 8001400:	79f8      	ldrb	r0, [r7, #7]
 8001402:	2300      	movs	r3, #0
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2300      	movs	r3, #0
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	f000 f866 	bl	80014dc <CAN_ConfigFilter>
  CAN_ConfigFilter(ch, 0, CAN_EXT, 0x0000, 0x0000);
 8001410:	79f8      	ldrb	r0, [r7, #7]
 8001412:	2300      	movs	r3, #0
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2300      	movs	r3, #0
 8001418:	2201      	movs	r2, #1
 800141a:	2100      	movs	r1, #0
 800141c:	f000 f85e 	bl	80014dc <CAN_ConfigFilter>

  if (HAL_FDCAN_ConfigGlobalFilter(p_can, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8001420:	2300      	movs	r3, #0
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2300      	movs	r3, #0
 8001426:	2202      	movs	r2, #2
 8001428:	2102      	movs	r1, #2
 800142a:	6938      	ldr	r0, [r7, #16]
 800142c:	f001 fcc6 	bl	8002dbc <HAL_FDCAN_ConfigGlobalFilter>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <CAN_Open+0x1ea>
  {
    return FALSE;
 8001436:	2300      	movs	r3, #0
 8001438:	e03e      	b.n	80014b8 <CAN_Open+0x268>
  }
  if (HAL_FDCAN_ActivateNotification(p_can, can_tbl[ch].enable_int, 0) != HAL_OK)
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	4a20      	ldr	r2, [pc, #128]	; (80014c0 <CAN_Open+0x270>)
 800143e:	f240 516c 	movw	r1, #1388	; 0x56c
 8001442:	fb01 f303 	mul.w	r3, r1, r3
 8001446:	4413      	add	r3, r2
 8001448:	3328      	adds	r3, #40	; 0x28
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2200      	movs	r2, #0
 800144e:	4619      	mov	r1, r3
 8001450:	6938      	ldr	r0, [r7, #16]
 8001452:	f001 fea7 	bl	80031a4 <HAL_FDCAN_ActivateNotification>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <CAN_Open+0x210>
  {
    return FALSE;
 800145c:	2300      	movs	r3, #0
 800145e:	e02b      	b.n	80014b8 <CAN_Open+0x268>
  }


  tdc_offset = p_can->Init.DataPrescaler * p_can->Init.DataTimeSeg1;
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001468:	fb02 f303 	mul.w	r3, r2, r3
 800146c:	60fb      	str	r3, [r7, #12]

  if (HAL_FDCAN_ConfigTxDelayCompensation(p_can, tdc_offset, 0) != HAL_OK) return FALSE;
 800146e:	2200      	movs	r2, #0
 8001470:	68f9      	ldr	r1, [r7, #12]
 8001472:	6938      	ldr	r0, [r7, #16]
 8001474:	f001 fcd3 	bl	8002e1e <HAL_FDCAN_ConfigTxDelayCompensation>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <CAN_Open+0x232>
 800147e:	2300      	movs	r3, #0
 8001480:	e01a      	b.n	80014b8 <CAN_Open+0x268>
  if (HAL_FDCAN_EnableTxDelayCompensation(p_can) != HAL_OK)                return FALSE;
 8001482:	6938      	ldr	r0, [r7, #16]
 8001484:	f001 fced 	bl	8002e62 <HAL_FDCAN_EnableTxDelayCompensation>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <CAN_Open+0x242>
 800148e:	2300      	movs	r3, #0
 8001490:	e012      	b.n	80014b8 <CAN_Open+0x268>

  if (HAL_FDCAN_Start(p_can) != HAL_OK)
 8001492:	6938      	ldr	r0, [r7, #16]
 8001494:	f001 fd06 	bl	8002ea4 <HAL_FDCAN_Start>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <CAN_Open+0x252>
  {
    return FALSE;
 800149e:	2300      	movs	r3, #0
 80014a0:	e00a      	b.n	80014b8 <CAN_Open+0x268>
  }

  can_tbl[ch].is_open = TRUE;
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <CAN_Open+0x270>)
 80014a6:	f240 516c 	movw	r1, #1388	; 0x56c
 80014aa:	fb01 f303 	mul.w	r3, r1, r3
 80014ae:	4413      	add	r3, r2
 80014b0:	3304      	adds	r3, #4
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

  return ret;
 80014b6:	697b      	ldr	r3, [r7, #20]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	371c      	adds	r7, #28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd90      	pop	{r4, r7, pc}
 80014c0:	200002ac 	.word	0x200002ac
 80014c4:	4000a400 	.word	0x4000a400
 80014c8:	0800ed80 	.word	0x0800ed80
 80014cc:	0800ed8c 	.word	0x0800ed8c
 80014d0:	20000004 	.word	0x20000004
 80014d4:	20000008 	.word	0x20000008
 80014d8:	000e0007 	.word	0x000e0007

080014dc <CAN_ConfigFilter>:
void     CAN_Close(uint8_t ch)
{

}
BOOL     CAN_ConfigFilter(uint8_t ch, uint8_t index, CAN_ID_TYPE_t id_type, uint32_t id, uint32_t id_mask)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	4603      	mov	r3, r0
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	460b      	mov	r3, r1
 80014ea:	71bb      	strb	r3, [r7, #6]
 80014ec:	4613      	mov	r3, r2
 80014ee:	717b      	strb	r3, [r7, #5]
  BOOL ret = FALSE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24

  FDCAN_FilterTypeDef sFilterConfig;

  if (ch >= CAN_MAX_CH) return FALSE;
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <CAN_ConfigFilter+0x22>
 80014fa:	2300      	movs	r3, #0
 80014fc:	e034      	b.n	8001568 <CAN_ConfigFilter+0x8c>


  if (id_type == CAN_STD)
 80014fe:	797b      	ldrb	r3, [r7, #5]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <CAN_ConfigFilter+0x2e>
  {
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e002      	b.n	8001510 <CAN_ConfigFilter+0x34>
  }
  else
  {
    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800150a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800150e:	60fb      	str	r3, [r7, #12]
  }

  if (can_tbl[ch].fifo_idx == FDCAN_RX_FIFO0)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	4a17      	ldr	r2, [pc, #92]	; (8001570 <CAN_ConfigFilter+0x94>)
 8001514:	f240 516c 	movw	r1, #1388	; 0x56c
 8001518:	fb01 f303 	mul.w	r3, r1, r3
 800151c:	4413      	add	r3, r2
 800151e:	3324      	adds	r3, #36	; 0x24
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b40      	cmp	r3, #64	; 0x40
 8001524:	d102      	bne.n	800152c <CAN_ConfigFilter+0x50>
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO0;
 8001526:	2301      	movs	r3, #1
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	e001      	b.n	8001530 <CAN_ConfigFilter+0x54>
  }
  else
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO1;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
  }

  sFilterConfig.FilterIndex   = index;
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterType    = FDCAN_FILTER_MASK; //Classic filter
 8001534:	2302      	movs	r3, #2
 8001536:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterID1     = id;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterID2     = id_mask;
 800153c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153e:	623b      	str	r3, [r7, #32]


  if (HAL_FDCAN_ConfigFilter(&can_tbl[ch].hfdcan, &sFilterConfig) == HAL_OK)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f240 526c 	movw	r2, #1388	; 0x56c
 8001546:	fb02 f303 	mul.w	r3, r2, r3
 800154a:	3330      	adds	r3, #48	; 0x30
 800154c:	4a08      	ldr	r2, [pc, #32]	; (8001570 <CAN_ConfigFilter+0x94>)
 800154e:	4413      	add	r3, r2
 8001550:	f107 020c 	add.w	r2, r7, #12
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f001 fbd6 	bl	8002d08 <HAL_FDCAN_ConfigFilter>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <CAN_ConfigFilter+0x8a>
  {
    ret = TRUE;
 8001562:	2301      	movs	r3, #1
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001568:	4618      	mov	r0, r3
 800156a:	3728      	adds	r7, #40	; 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200002ac 	.word	0x200002ac

08001574 <CAN_MsgAvailable>:

uint32_t CAN_MsgAvailable(uint8_t ch)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return 0;
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d901      	bls.n	8001588 <CAN_MsgAvailable+0x14>
 8001584:	2300      	movs	r3, #0
 8001586:	e00b      	b.n	80015a0 <CAN_MsgAvailable+0x2c>

  return qbufferAvailable(&can_tbl[ch].q_msg);
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f240 526c 	movw	r2, #1388	; 0x56c
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	3398      	adds	r3, #152	; 0x98
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <CAN_MsgAvailable+0x34>)
 8001596:	4413      	add	r3, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f00b fa3e 	bl	800ca1a <qbufferAvailable>
 800159e:	4603      	mov	r3, r0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200002ac 	.word	0x200002ac

080015ac <CAN_MsgRead>:

    return ret;
  }
}
BOOL     CAN_MsgRead(uint8_t ch, CAN_MSG_t *p_msg)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
  BOOL ret = TRUE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]

  if(ch > CAN_MAX_CH) return 0;
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d901      	bls.n	80015c6 <CAN_MsgRead+0x1a>
 80015c2:	2300      	movs	r3, #0
 80015c4:	e00e      	b.n	80015e4 <CAN_MsgRead+0x38>

  ret = qbufferRead(&can_tbl[ch].q_msg, (uint8_t *)p_msg, 1);
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	f240 526c 	movw	r2, #1388	; 0x56c
 80015cc:	fb02 f303 	mul.w	r3, r2, r3
 80015d0:	3398      	adds	r3, #152	; 0x98
 80015d2:	4a06      	ldr	r2, [pc, #24]	; (80015ec <CAN_MsgRead+0x40>)
 80015d4:	4413      	add	r3, r2
 80015d6:	2201      	movs	r2, #1
 80015d8:	6839      	ldr	r1, [r7, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f00b f9b2 	bl	800c944 <qbufferRead>
 80015e0:	60f8      	str	r0, [r7, #12]

  return ret;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200002ac 	.word	0x200002ac

080015f0 <CAN_RxFifoCallback>:
  return HAL_FDCAN_GetState(&can_tbl[ch].hfdcan);
}


void CAN_RxFifoCallback(uint8_t ch, FDCAN_HandleTypeDef *hfdcan)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08e      	sub	sp, #56	; 0x38
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
  CAN_MSG_t *rx_buf;
  FDCAN_RxHeaderTypeDef rx_header;


  rx_buf  = (CAN_MSG_t *)qbufferPeekWrite(&can_tbl[ch].q_msg);
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f240 526c 	movw	r2, #1388	; 0x56c
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	3398      	adds	r3, #152	; 0x98
 8001608:	4a4b      	ldr	r2, [pc, #300]	; (8001738 <CAN_RxFifoCallback+0x148>)
 800160a:	4413      	add	r3, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f00b f9f1 	bl	800c9f4 <qbufferPeekWrite>
 8001612:	6378      	str	r0, [r7, #52]	; 0x34

  if (HAL_FDCAN_GetRxMessage(hfdcan, can_tbl[ch].fifo_idx, &rx_header, rx_buf->data) == HAL_OK)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4a48      	ldr	r2, [pc, #288]	; (8001738 <CAN_RxFifoCallback+0x148>)
 8001618:	f240 516c 	movw	r1, #1388	; 0x56c
 800161c:	fb01 f303 	mul.w	r3, r1, r3
 8001620:	4413      	add	r3, r2
 8001622:	3324      	adds	r3, #36	; 0x24
 8001624:	6819      	ldr	r1, [r3, #0]
 8001626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001628:	3306      	adds	r3, #6
 800162a:	f107 020c 	add.w	r2, r7, #12
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f001 fc60 	bl	8002ef4 <HAL_FDCAN_GetRxMessage>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d179      	bne.n	800172e <CAN_RxFifoCallback+0x13e>
  {
    if(rx_header.IdType == FDCAN_STANDARD_ID)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d107      	bne.n	8001650 <CAN_RxFifoCallback+0x60>
    {
      rx_buf->id      = rx_header.Identifier;
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001644:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_STD;
 8001646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800164e:	e006      	b.n	800165e <CAN_RxFifoCallback+0x6e>
    }
    else
    {
      rx_buf->id      = rx_header.Identifier;
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001654:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_EXT;
 8001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    }
    rx_buf->length = dlc_len_tbl[(rx_header.DataLength >> 16) & 0x0F];
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	0c1b      	lsrs	r3, r3, #16
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	4a35      	ldr	r2, [pc, #212]	; (800173c <CAN_RxFifoCallback+0x14c>)
 8001668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166c:	b29a      	uxth	r2, r3
 800166e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001670:	809a      	strh	r2, [r3, #4]


    if (rx_header.FDFormat == FDCAN_FD_CAN)
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001678:	d10d      	bne.n	8001696 <CAN_RxFifoCallback+0xa6>
    {
      if (rx_header.BitRateSwitch == FDCAN_BRS_ON)
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001680:	d104      	bne.n	800168c <CAN_RxFifoCallback+0x9c>
      {
        rx_buf->frame = CAN_FD_BRS;
 8001682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001684:	2202      	movs	r2, #2
 8001686:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800168a:	e008      	b.n	800169e <CAN_RxFifoCallback+0xae>
      }
      else
      {
        rx_buf->frame = CAN_FD_NO_BRS;
 800168c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8001694:	e003      	b.n	800169e <CAN_RxFifoCallback+0xae>
      }
    }
    else
    {
      rx_buf->frame = CAN_CLASSIC;
 8001696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    }

    if (qbufferWrite(&can_tbl[ch].q_msg, NULL, 1) != TRUE)
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f240 526c 	movw	r2, #1388	; 0x56c
 80016a4:	fb02 f303 	mul.w	r3, r2, r3
 80016a8:	3398      	adds	r3, #152	; 0x98
 80016aa:	4a23      	ldr	r2, [pc, #140]	; (8001738 <CAN_RxFifoCallback+0x148>)
 80016ac:	4413      	add	r3, r2
 80016ae:	2201      	movs	r2, #1
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f00b f8ed 	bl	800c892 <qbufferWrite>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d011      	beq.n	80016e2 <CAN_RxFifoCallback+0xf2>
    {
      can_tbl[ch].q_rx_full_cnt++;
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	491d      	ldr	r1, [pc, #116]	; (8001738 <CAN_RxFifoCallback+0x148>)
 80016c2:	f240 526c 	movw	r2, #1388	; 0x56c
 80016c6:	fb03 f202 	mul.w	r2, r3, r2
 80016ca:	440a      	add	r2, r1
 80016cc:	3214      	adds	r2, #20
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	3201      	adds	r2, #1
 80016d2:	4919      	ldr	r1, [pc, #100]	; (8001738 <CAN_RxFifoCallback+0x148>)
 80016d4:	f240 506c 	movw	r0, #1388	; 0x56c
 80016d8:	fb00 f303 	mul.w	r3, r0, r3
 80016dc:	440b      	add	r3, r1
 80016de:	3314      	adds	r3, #20
 80016e0:	601a      	str	r2, [r3, #0]
    }

    if( can_tbl[ch].handler != NULL )
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <CAN_RxFifoCallback+0x148>)
 80016e6:	f240 516c 	movw	r1, #1388	; 0x56c
 80016ea:	fb01 f303 	mul.w	r3, r1, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	3394      	adds	r3, #148	; 0x94
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d01a      	beq.n	800172e <CAN_RxFifoCallback+0x13e>
    {
      if ((*can_tbl[ch].handler)((void *)rx_buf) == TRUE)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <CAN_RxFifoCallback+0x148>)
 80016fc:	f240 516c 	movw	r1, #1388	; 0x56c
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	4413      	add	r3, r2
 8001706:	3394      	adds	r3, #148	; 0x94
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800170c:	4798      	blx	r3
 800170e:	4603      	mov	r3, r0
 8001710:	2b01      	cmp	r3, #1
 8001712:	d10c      	bne.n	800172e <CAN_RxFifoCallback+0x13e>
      {
        qbufferRead(&can_tbl[ch].q_msg, NULL, 1);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	f240 526c 	movw	r2, #1388	; 0x56c
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	3398      	adds	r3, #152	; 0x98
 8001720:	4a05      	ldr	r2, [pc, #20]	; (8001738 <CAN_RxFifoCallback+0x148>)
 8001722:	4413      	add	r3, r2
 8001724:	2201      	movs	r2, #1
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f00b f90b 	bl	800c944 <qbufferRead>
      }
    }
  }
}
 800172e:	bf00      	nop
 8001730:	3738      	adds	r7, #56	; 0x38
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200002ac 	.word	0x200002ac
 800173c:	0800ed40 	.word	0x0800ed40

08001740 <CAN_ErrUpdate>:
  if (err_code & CAN_ERR_WARNING) UART_Printf("  ERR : CAN_ERR_WARNING\n");
  if (err_code & CAN_ERR_BUS_OFF) UART_Printf("  ERR : CAN_ERR_BUS_OFF\n");
}

void CAN_ErrUpdate(uint8_t ch)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08e      	sub	sp, #56	; 0x38
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  FDCAN_ProtocolStatusTypeDef protocol_status;

  HAL_FDCAN_GetProtocolStatus(&can_tbl[ch].hfdcan, &protocol_status);
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f240 526c 	movw	r2, #1388	; 0x56c
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	3330      	adds	r3, #48	; 0x30
 8001756:	4a48      	ldr	r2, [pc, #288]	; (8001878 <CAN_ErrUpdate+0x138>)
 8001758:	4413      	add	r3, r2
 800175a:	f107 020c 	add.w	r2, r7, #12
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f001 fccf 	bl	8003104 <HAL_FDCAN_GetProtocolStatus>

  if (protocol_status.ErrorPassive)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d014      	beq.n	8001796 <CAN_ErrUpdate+0x56>
  {
    can_tbl[ch].err_code |= CAN_ERR_PASSIVE;
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	4a42      	ldr	r2, [pc, #264]	; (8001878 <CAN_ErrUpdate+0x138>)
 8001770:	f240 516c 	movw	r1, #1388	; 0x56c
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	3308      	adds	r3, #8
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	f042 0201 	orr.w	r2, r2, #1
 8001784:	493c      	ldr	r1, [pc, #240]	; (8001878 <CAN_ErrUpdate+0x138>)
 8001786:	f240 506c 	movw	r0, #1388	; 0x56c
 800178a:	fb00 f303 	mul.w	r3, r0, r3
 800178e:	440b      	add	r3, r1
 8001790:	3308      	adds	r3, #8
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e013      	b.n	80017be <CAN_ErrUpdate+0x7e>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_PASSIVE;
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	4a37      	ldr	r2, [pc, #220]	; (8001878 <CAN_ErrUpdate+0x138>)
 800179a:	f240 516c 	movw	r1, #1388	; 0x56c
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	3308      	adds	r3, #8
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	4932      	ldr	r1, [pc, #200]	; (8001878 <CAN_ErrUpdate+0x138>)
 80017b0:	f240 506c 	movw	r0, #1388	; 0x56c
 80017b4:	fb00 f303 	mul.w	r3, r0, r3
 80017b8:	440b      	add	r3, r1
 80017ba:	3308      	adds	r3, #8
 80017bc:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.Warning)
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d014      	beq.n	80017ee <CAN_ErrUpdate+0xae>
  {
    can_tbl[ch].err_code |= CAN_ERR_WARNING;
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	4a2c      	ldr	r2, [pc, #176]	; (8001878 <CAN_ErrUpdate+0x138>)
 80017c8:	f240 516c 	movw	r1, #1388	; 0x56c
 80017cc:	fb01 f303 	mul.w	r3, r1, r3
 80017d0:	4413      	add	r3, r2
 80017d2:	3308      	adds	r3, #8
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f042 0202 	orr.w	r2, r2, #2
 80017dc:	4926      	ldr	r1, [pc, #152]	; (8001878 <CAN_ErrUpdate+0x138>)
 80017de:	f240 506c 	movw	r0, #1388	; 0x56c
 80017e2:	fb00 f303 	mul.w	r3, r0, r3
 80017e6:	440b      	add	r3, r1
 80017e8:	3308      	adds	r3, #8
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e013      	b.n	8001816 <CAN_ErrUpdate+0xd6>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_WARNING;
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	4a21      	ldr	r2, [pc, #132]	; (8001878 <CAN_ErrUpdate+0x138>)
 80017f2:	f240 516c 	movw	r1, #1388	; 0x56c
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	3308      	adds	r3, #8
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f022 0202 	bic.w	r2, r2, #2
 8001806:	491c      	ldr	r1, [pc, #112]	; (8001878 <CAN_ErrUpdate+0x138>)
 8001808:	f240 506c 	movw	r0, #1388	; 0x56c
 800180c:	fb00 f303 	mul.w	r3, r0, r3
 8001810:	440b      	add	r3, r1
 8001812:	3308      	adds	r3, #8
 8001814:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.BusOff)
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d014      	beq.n	8001846 <CAN_ErrUpdate+0x106>
  {
    can_tbl[ch].err_code |= CAN_ERR_BUS_OFF;
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4a16      	ldr	r2, [pc, #88]	; (8001878 <CAN_ErrUpdate+0x138>)
 8001820:	f240 516c 	movw	r1, #1388	; 0x56c
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	4413      	add	r3, r2
 800182a:	3308      	adds	r3, #8
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f042 0204 	orr.w	r2, r2, #4
 8001834:	4910      	ldr	r1, [pc, #64]	; (8001878 <CAN_ErrUpdate+0x138>)
 8001836:	f240 506c 	movw	r0, #1388	; 0x56c
 800183a:	fb00 f303 	mul.w	r3, r0, r3
 800183e:	440b      	add	r3, r1
 8001840:	3308      	adds	r3, #8
 8001842:	601a      	str	r2, [r3, #0]
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
  }
}
 8001844:	e013      	b.n	800186e <CAN_ErrUpdate+0x12e>
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <CAN_ErrUpdate+0x138>)
 800184a:	f240 516c 	movw	r1, #1388	; 0x56c
 800184e:	fb01 f303 	mul.w	r3, r1, r3
 8001852:	4413      	add	r3, r2
 8001854:	3308      	adds	r3, #8
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f022 0204 	bic.w	r2, r2, #4
 800185e:	4906      	ldr	r1, [pc, #24]	; (8001878 <CAN_ErrUpdate+0x138>)
 8001860:	f240 506c 	movw	r0, #1388	; 0x56c
 8001864:	fb00 f303 	mul.w	r3, r0, r3
 8001868:	440b      	add	r3, r1
 800186a:	3308      	adds	r3, #8
 800186c:	601a      	str	r2, [r3, #0]
}
 800186e:	bf00      	nop
 8001870:	3738      	adds	r7, #56	; 0x38
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200002ac 	.word	0x200002ac

0800187c <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint8_t ch = _DEF_CAN1;
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]

  CAN_ErrUpdate(ch);
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff57 	bl	8001740 <CAN_ErrUpdate>
}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_FDCAN_ErrorCallback>:
void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint8_t ch = _DEF_CAN1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	73fb      	strb	r3, [r7, #15]

  err_int_cnt++;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_FDCAN_ErrorCallback+0x54>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <HAL_FDCAN_ErrorCallback+0x54>)
 80018b0:	6013      	str	r3, [r2, #0]

  if (hfdcan->ErrorCode > 0)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d013      	beq.n	80018e2 <HAL_FDCAN_ErrorCallback+0x46>
  {
    can_tbl[ch].err_code |= CAN_ERR_ETC;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	4a0d      	ldr	r2, [pc, #52]	; (80018f4 <HAL_FDCAN_ErrorCallback+0x58>)
 80018be:	f240 516c 	movw	r1, #1388	; 0x56c
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	3308      	adds	r3, #8
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	f042 0210 	orr.w	r2, r2, #16
 80018d2:	4908      	ldr	r1, [pc, #32]	; (80018f4 <HAL_FDCAN_ErrorCallback+0x58>)
 80018d4:	f240 506c 	movw	r0, #1388	; 0x56c
 80018d8:	fb00 f303 	mul.w	r3, r0, r3
 80018dc:	440b      	add	r3, r1
 80018de:	3308      	adds	r3, #8
 80018e0:	601a      	str	r2, [r3, #0]
  }
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000818 	.word	0x20000818
 80018f4:	200002ac 	.word	0x200002ac

080018f8 <FDCAN1_IT0_IRQHandler>:

void FDCAN1_IT0_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  HAL_FDCAN_IRQHandler(&can_tbl[_DEF_CAN1].hfdcan);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <FDCAN1_IT0_IRQHandler+0x10>)
 80018fe:	f001 fd37 	bl	8003370 <HAL_FDCAN_IRQHandler>
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200002dc 	.word	0x200002dc

0800190c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_FDCAN_RxFifo0Callback+0x1c>
  {
    CAN_RxFifoCallback(_DEF_CAN1, hfdcan);
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff fe64 	bl	80015f0 <CAN_RxFifoCallback>
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_FULL) != RESET)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d004      	beq.n	800193c <HAL_FDCAN_RxFifo0Callback+0x30>
  {
    can_tbl[_DEF_CAN1].fifo_full_cnt++;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	3301      	adds	r3, #1
 8001938:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800193a:	61d3      	str	r3, [r2, #28]
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_MESSAGE_LOST) != RESET)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <HAL_FDCAN_RxFifo0Callback+0x44>
  {
    can_tbl[_DEF_CAN1].fifo_lost_cnt++;
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	3301      	adds	r3, #1
 800194c:	4a02      	ldr	r2, [pc, #8]	; (8001958 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800194e:	6213      	str	r3, [r2, #32]
  }
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200002ac 	.word	0x200002ac

0800195c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b0cc      	sub	sp, #304	; 0x130
 8001960:	af00      	add	r7, sp, #0
 8001962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001966:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800196a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800197c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001980:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001984:	4618      	mov	r0, r3
 8001986:	f44f 7384 	mov.w	r3, #264	; 0x108
 800198a:	461a      	mov	r2, r3
 800198c:	2100      	movs	r1, #0
 800198e:	f00c fb8d 	bl	800e0ac <memset>
  if(hfdcan->Instance==FDCAN1)
 8001992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a37      	ldr	r2, [pc, #220]	; (8001a7c <HAL_FDCAN_MspInit+0x120>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d166      	bne.n	8001a72 <HAL_FDCAN_MspInit+0x116>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80019a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80019a8:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0304 	mov.w	r3, #4
 80019b4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80019b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80019bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019c0:	2200      	movs	r2, #0
 80019c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	4618      	mov	r0, r3
 80019cc:	f003 fad2 	bl	8004f74 <HAL_RCCEx_PeriphCLKConfig>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_FDCAN_MspInit+0x7e>
    {
      Error_Handler();
 80019d6:	f7ff f8b9 	bl	8000b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80019da:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <HAL_FDCAN_MspInit+0x124>)
 80019dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80019e0:	4a27      	ldr	r2, [pc, #156]	; (8001a80 <HAL_FDCAN_MspInit+0x124>)
 80019e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80019ea:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <HAL_FDCAN_MspInit+0x124>)
 80019ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80019f0:	f403 7200 	and.w	r2, r3, #512	; 0x200
 80019f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80019f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001a02:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a06:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <HAL_FDCAN_MspInit+0x124>)
 8001a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a0e:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <HAL_FDCAN_MspInit+0x124>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_FDCAN_MspInit+0x124>)
 8001a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a1e:	f003 0201 	and.w	r2, r3, #1
 8001a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001a26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001a30:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a34:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001a50:	2309      	movs	r3, #9
 8001a52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4809      	ldr	r0, [pc, #36]	; (8001a84 <HAL_FDCAN_MspInit+0x128>)
 8001a5e:	f002 f911 	bl	8003c84 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2105      	movs	r1, #5
 8001a66:	2027      	movs	r0, #39	; 0x27
 8001a68:	f000 ff26 	bl	80028b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001a6c:	2027      	movs	r0, #39	; 0x27
 8001a6e:	f000 ff3d 	bl	80028ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	4000a400 	.word	0x4000a400
 8001a80:	44020c00 	.word	0x44020c00
 8001a84:	42020000 	.word	0x42020000

08001a88 <CLI_FDCANTest>:
}

#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (CAN_TEST, "CAN", "CAN [1(INFO),2(READ),3(SEND)] [0x0800 F000 ~ address]", CLI_FDCANTest)
static void CLI_FDCANTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b09c      	sub	sp, #112	; 0x70
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
  BOOL ret = FALSE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	663b      	str	r3, [r7, #96]	; 0x60

  if (nCount == 2)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	f040 80ca 	bne.w	8001c36 <CLI_FDCANTest+0x1ae>
  {
    switch(nFirst)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d003      	beq.n	8001ab0 <CLI_FDCANTest+0x28>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d062      	beq.n	8001b74 <CLI_FDCANTest+0xec>
            DebugMsg(DEBUGMSG_CLI,"\n");
          }
        }
    }
  }
}
 8001aae:	e0c2      	b.n	8001c36 <CLI_FDCANTest+0x1ae>
        for (int i=0; i<CAN_MAX_CH; i++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ab4:	e057      	b.n	8001b66 <CLI_FDCANTest+0xde>
          DebugMsg(DEBUGMSG_CLI,"is_open       : %d\n", can_tbl[i].is_open);
 8001ab6:	4b62      	ldr	r3, [pc, #392]	; (8001c40 <CLI_FDCANTest+0x1b8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00c      	beq.n	8001ad8 <CLI_FDCANTest+0x50>
 8001abe:	4a61      	ldr	r2, [pc, #388]	; (8001c44 <CLI_FDCANTest+0x1bc>)
 8001ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ac2:	f240 516c 	movw	r1, #1388	; 0x56c
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	3304      	adds	r3, #4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	485d      	ldr	r0, [pc, #372]	; (8001c48 <CLI_FDCANTest+0x1c0>)
 8001ad4:	f000 fd98 	bl	8002608 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_rx_full_cnt : %d\n", can_tbl[i].q_rx_full_cnt);
 8001ad8:	4b59      	ldr	r3, [pc, #356]	; (8001c40 <CLI_FDCANTest+0x1b8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00c      	beq.n	8001afa <CLI_FDCANTest+0x72>
 8001ae0:	4a58      	ldr	r2, [pc, #352]	; (8001c44 <CLI_FDCANTest+0x1bc>)
 8001ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ae4:	f240 516c 	movw	r1, #1388	; 0x56c
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	3314      	adds	r3, #20
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4619      	mov	r1, r3
 8001af4:	4855      	ldr	r0, [pc, #340]	; (8001c4c <CLI_FDCANTest+0x1c4>)
 8001af6:	f000 fd87 	bl	8002608 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"q_tx_full_cnt : %d\n", can_tbl[i].q_tx_full_cnt);
 8001afa:	4b51      	ldr	r3, [pc, #324]	; (8001c40 <CLI_FDCANTest+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00c      	beq.n	8001b1c <CLI_FDCANTest+0x94>
 8001b02:	4a50      	ldr	r2, [pc, #320]	; (8001c44 <CLI_FDCANTest+0x1bc>)
 8001b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b06:	f240 516c 	movw	r1, #1388	; 0x56c
 8001b0a:	fb01 f303 	mul.w	r3, r1, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	3318      	adds	r3, #24
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	484e      	ldr	r0, [pc, #312]	; (8001c50 <CLI_FDCANTest+0x1c8>)
 8001b18:	f000 fd76 	bl	8002608 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_full_cnt : %d\n", can_tbl[i].fifo_full_cnt);
 8001b1c:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <CLI_FDCANTest+0x1b8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00c      	beq.n	8001b3e <CLI_FDCANTest+0xb6>
 8001b24:	4a47      	ldr	r2, [pc, #284]	; (8001c44 <CLI_FDCANTest+0x1bc>)
 8001b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b28:	f240 516c 	movw	r1, #1388	; 0x56c
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	331c      	adds	r3, #28
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4619      	mov	r1, r3
 8001b38:	4846      	ldr	r0, [pc, #280]	; (8001c54 <CLI_FDCANTest+0x1cc>)
 8001b3a:	f000 fd65 	bl	8002608 <svDebugMessage>
          DebugMsg(DEBUGMSG_CLI,"fifo_lost_cnt : %d\n", can_tbl[i].fifo_lost_cnt);
 8001b3e:	4b40      	ldr	r3, [pc, #256]	; (8001c40 <CLI_FDCANTest+0x1b8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00c      	beq.n	8001b60 <CLI_FDCANTest+0xd8>
 8001b46:	4a3f      	ldr	r2, [pc, #252]	; (8001c44 <CLI_FDCANTest+0x1bc>)
 8001b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b4a:	f240 516c 	movw	r1, #1388	; 0x56c
 8001b4e:	fb01 f303 	mul.w	r3, r1, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	3320      	adds	r3, #32
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	483f      	ldr	r0, [pc, #252]	; (8001c58 <CLI_FDCANTest+0x1d0>)
 8001b5c:	f000 fd54 	bl	8002608 <svDebugMessage>
        for (int i=0; i<CAN_MAX_CH; i++)
 8001b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b62:	3301      	adds	r3, #1
 8001b64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	dda4      	ble.n	8001ab6 <CLI_FDCANTest+0x2e>
        ret = TRUE;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	663b      	str	r3, [r7, #96]	; 0x60
        break;
 8001b70:	bf00      	nop
}
 8001b72:	e060      	b.n	8001c36 <CLI_FDCANTest+0x1ae>
        uint32_t index = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	66bb      	str	r3, [r7, #104]	; 0x68
          if (CAN_MsgAvailable(_DEF_CAN1))
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff fcfb 	bl	8001574 <CAN_MsgAvailable>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f9      	beq.n	8001b78 <CLI_FDCANTest+0xf0>
            CAN_MsgRead(_DEF_CAN1, &msg);
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4619      	mov	r1, r3
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff fd0e 	bl	80015ac <CAN_MsgRead>
            index %= 1000;
 8001b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b92:	4a32      	ldr	r2, [pc, #200]	; (8001c5c <CLI_FDCANTest+0x1d4>)
 8001b94:	fba2 1203 	umull	r1, r2, r2, r3
 8001b98:	0992      	lsrs	r2, r2, #6
 8001b9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b9e:	fb01 f202 	mul.w	r2, r1, r2
 8001ba2:	1a9b      	subs	r3, r3, r2
 8001ba4:	66bb      	str	r3, [r7, #104]	; 0x68
            DebugMsg(DEBUGMSG_CLI,"%03d(R) <- id ", index++);
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <CLI_FDCANTest+0x1b8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d006      	beq.n	8001bbc <CLI_FDCANTest+0x134>
 8001bae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	66ba      	str	r2, [r7, #104]	; 0x68
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	482a      	ldr	r0, [pc, #168]	; (8001c60 <CLI_FDCANTest+0x1d8>)
 8001bb8:	f000 fd26 	bl	8002608 <svDebugMessage>
            if (msg.id_type == CAN_STD)
 8001bbc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d107      	bne.n	8001bd4 <CLI_FDCANTest+0x14c>
              DebugMsg(DEBUGMSG_CLI,"std ");
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <CLI_FDCANTest+0x1b8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00a      	beq.n	8001be2 <CLI_FDCANTest+0x15a>
 8001bcc:	4825      	ldr	r0, [pc, #148]	; (8001c64 <CLI_FDCANTest+0x1dc>)
 8001bce:	f000 fd1b 	bl	8002608 <svDebugMessage>
 8001bd2:	e006      	b.n	8001be2 <CLI_FDCANTest+0x15a>
              DebugMsg(DEBUGMSG_CLI,"ext ");
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <CLI_FDCANTest+0x1b8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <CLI_FDCANTest+0x15a>
 8001bdc:	4822      	ldr	r0, [pc, #136]	; (8001c68 <CLI_FDCANTest+0x1e0>)
 8001bde:	f000 fd13 	bl	8002608 <svDebugMessage>
            DebugMsg(DEBUGMSG_CLI,": 0x%08X, L:%02d, ", msg.id, msg.length);
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <CLI_FDCANTest+0x1b8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <CLI_FDCANTest+0x16e>
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	8b3a      	ldrh	r2, [r7, #24]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	481e      	ldr	r0, [pc, #120]	; (8001c6c <CLI_FDCANTest+0x1e4>)
 8001bf2:	f000 fd09 	bl	8002608 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	667b      	str	r3, [r7, #100]	; 0x64
 8001bfa:	e00f      	b.n	8001c1c <CLI_FDCANTest+0x194>
              DebugMsg(DEBUGMSG_CLI,"0x%02X ", msg.data[i]);
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <CLI_FDCANTest+0x1b8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <CLI_FDCANTest+0x18e>
 8001c04:	f107 021a 	add.w	r2, r7, #26
 8001c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c0a:	4413      	add	r3, r2
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4817      	ldr	r0, [pc, #92]	; (8001c70 <CLI_FDCANTest+0x1e8>)
 8001c12:	f000 fcf9 	bl	8002608 <svDebugMessage>
            for (int i=0; i<msg.length; i++)
 8001c16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c18:	3301      	adds	r3, #1
 8001c1a:	667b      	str	r3, [r7, #100]	; 0x64
 8001c1c:	8b3b      	ldrh	r3, [r7, #24]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c22:	4293      	cmp	r3, r2
 8001c24:	dbea      	blt.n	8001bfc <CLI_FDCANTest+0x174>
            DebugMsg(DEBUGMSG_CLI,"\n");
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <CLI_FDCANTest+0x1b8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0a4      	beq.n	8001b78 <CLI_FDCANTest+0xf0>
 8001c2e:	4811      	ldr	r0, [pc, #68]	; (8001c74 <CLI_FDCANTest+0x1ec>)
 8001c30:	f000 fcea 	bl	8002608 <svDebugMessage>
          if (CAN_MsgAvailable(_DEF_CAN1))
 8001c34:	e7a0      	b.n	8001b78 <CLI_FDCANTest+0xf0>
}
 8001c36:	bf00      	nop
 8001c38:	3770      	adds	r7, #112	; 0x70
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000028 	.word	0x20000028
 8001c44:	200002ac 	.word	0x200002ac
 8001c48:	0800e994 	.word	0x0800e994
 8001c4c:	0800e9a8 	.word	0x0800e9a8
 8001c50:	0800e9bc 	.word	0x0800e9bc
 8001c54:	0800e9d0 	.word	0x0800e9d0
 8001c58:	0800e9e4 	.word	0x0800e9e4
 8001c5c:	10624dd3 	.word	0x10624dd3
 8001c60:	0800e9f8 	.word	0x0800e9f8
 8001c64:	0800ea08 	.word	0x0800ea08
 8001c68:	0800ea10 	.word	0x0800ea10
 8001c6c:	0800ea18 	.word	0x0800ea18
 8001c70:	0800ea2c 	.word	0x0800ea2c
 8001c74:	0800ea34 	.word	0x0800ea34

08001c78 <Flash_Erase>:


  return ret;
}
BOOL Flash_Erase(uint32_t addr, uint32_t length)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08c      	sub	sp, #48	; 0x30
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  BOOL ret = FALSE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24

  int32_t start_sector = -1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t end_sector = -1;
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_FLASH_Unlock();
 8001c92:	f001 fdc1 	bl	8003818 <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTCHANGEERR);
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <Flash_Erase+0xb0>)
 8001c98:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c9c:	631a      	str	r2, [r3, #48]	; 0x30

  start_sector = -1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  end_sector = -1;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
 8001cae:	e013      	b.n	8001cd8 <Flash_Erase+0x60>
  {
    if(Flash_InSector(i, addr, length) == TRUE)
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f837 	bl	8001d2c <Flash_InSector>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d106      	bne.n	8001cd2 <Flash_Erase+0x5a>
    {
      if(start_sector < 0)
 8001cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	da01      	bge.n	8001cce <Flash_Erase+0x56>
      {
        start_sector = i;
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      end_sector = i;
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0; i < FLASH_MAX_SECTOR; i++)
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	623b      	str	r3, [r7, #32]
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	2b7f      	cmp	r3, #127	; 0x7f
 8001cdc:	dde8      	ble.n	8001cb0 <Flash_Erase+0x38>
    }
  }

  if(start_sector >= 0)
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	db19      	blt.n	8001d18 <Flash_Erase+0xa0>
    HAL_StatusTypeDef status;
    // TypeErase : Mass or Page Erase ,Banks :   Page/PageAddress:  Nbpages:
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t SectorError;
    //@ref FLASH_Type_Erase
    EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	60fb      	str	r3, [r7, #12]
    //@ref FLASH_Banks  - FLASH_BANK_BOTH  , 1
    EraseInit.Banks = FLASH_BANK_BOTH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	613b      	str	r3, [r7, #16]
    EraseInit.Sector = start_sector;    // sector 번호 OR sector address , 확인해야댐 (페이지 번호를 주거나, 지우는 주소를 주거나)
 8001cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cee:	617b      	str	r3, [r7, #20]
    EraseInit.NbSectors = (end_sector - start_sector) + 1;     // 페이지 개수 (시작 페이지 부터 몇개의 페이지를 지울 것인가)
 8001cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 8001cfa:	f107 0208 	add.w	r2, r7, #8
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 feb9 	bl	8003a7c <HAL_FLASHEx_Erase>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	77fb      	strb	r3, [r7, #31]

    if(status == HAL_OK)
 8001d0e:	7ffb      	ldrb	r3, [r7, #31]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <Flash_Erase+0xa0>
    {
      ret = TRUE;
 8001d14:	2301      	movs	r3, #1
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  HAL_FLASH_Lock();
 8001d18:	f001 fda4 	bl	8003864 <HAL_FLASH_Lock>
  return ret;
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3730      	adds	r7, #48	; 0x30
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40022000 	.word	0x40022000

08001d2c <Flash_InSector>:
BOOL Flash_InSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b08b      	sub	sp, #44	; 0x2c
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	81fb      	strh	r3, [r7, #14]
  BOOL ret = FALSE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = FLASH_BASE + (sector_num * FLASH_SECTOR_SIZE);
 8001d3e:	89fb      	ldrh	r3, [r7, #14]
 8001d40:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001d44:	035b      	lsls	r3, r3, #13
 8001d46:	623b      	str	r3, [r7, #32]
  sector_end   = sector_start + FLASH_SECTOR_SIZE - 1;
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001d4e:	331f      	adds	r3, #31
 8001d50:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 8001d60:	6a3a      	ldr	r2, [r7, #32]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d305      	bcc.n	8001d74 <Flash_InSector+0x48>
 8001d68:	6a3a      	ldr	r2, [r7, #32]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d801      	bhi.n	8001d74 <Flash_InSector+0x48>
  {
    ret = TRUE;
 8001d70:	2301      	movs	r3, #1
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d305      	bcc.n	8001d88 <Flash_InSector+0x5c>
 8001d7c:	69fa      	ldr	r2, [r7, #28]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d801      	bhi.n	8001d88 <Flash_InSector+0x5c>
  {
    ret = TRUE;
 8001d84:	2301      	movs	r3, #1
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d305      	bcc.n	8001d9c <Flash_InSector+0x70>
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d801      	bhi.n	8001d9c <Flash_InSector+0x70>
  {
    ret = TRUE;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d305      	bcc.n	8001db0 <Flash_InSector+0x84>
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d801      	bhi.n	8001db0 <Flash_InSector+0x84>
  {
    ret = TRUE;
 8001dac:	2301      	movs	r3, #1
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
  }

  return ret;
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	372c      	adds	r7, #44	; 0x2c
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <Flash_Write>:

BOOL Flash_Write(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b092      	sub	sp, #72	; 0x48
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t buf[32];
  uint32_t offset;
  HAL_StatusTypeDef status;

  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Unlock();
 8001dce:	f001 fd23 	bl	8003818 <HAL_FLASH_Unlock>

  index = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	643b      	str	r3, [r7, #64]	; 0x40
  offset = addr % FLASH_WRITE_SIZE;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	63fb      	str	r3, [r7, #60]	; 0x3c


  if(offset != 0 || length < FLASH_WRITE_SIZE)
 8001dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d103      	bne.n	8001dec <Flash_Write+0x2e>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b0f      	cmp	r3, #15
 8001de8:	f200 808e 	bhi.w	8001f08 <Flash_Write+0x14a>
  {
    write_addr = addr - offset;
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 8001df4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001df6:	f107 0310 	add.w	r3, r7, #16
 8001dfa:	2210      	movs	r2, #16
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f00c f9ad 	bl	800e15c <memcpy>
    memcpy(&buf[offset], &p_data[0], constrain(FLASH_WRITE_SIZE-offset, 0, length));
 8001e02:	f107 0210 	add.w	r2, r7, #16
 8001e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e08:	18d0      	adds	r0, r2, r3
 8001e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e0c:	f1c3 0210 	rsb	r2, r3, #16
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4293      	cmp	r3, r2
 8001e14:	bf28      	it	cs
 8001e16:	4613      	movcs	r3, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	68b9      	ldr	r1, [r7, #8]
 8001e1c:	f00c f99e 	bl	800e15c <memcpy>

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	461a      	mov	r2, r3
 8001e26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e28:	2002      	movs	r0, #2
 8001e2a:	f001 fc7d 	bl	8003728 <HAL_FLASH_Program>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status != HAL_OK)
 8001e34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <Flash_Write+0x82>
    {
      return FALSE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e06c      	b.n	8001f1a <Flash_Write+0x15c>
    }

    if (offset == 0 && length < FLASH_WRITE_SIZE)
 8001e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d107      	bne.n	8001e56 <Flash_Write+0x98>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b0f      	cmp	r3, #15
 8001e4a:	d804      	bhi.n	8001e56 <Flash_Write+0x98>
    {
      index += length;
 8001e4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	643b      	str	r3, [r7, #64]	; 0x40
 8001e54:	e004      	b.n	8001e60 <Flash_Write+0xa2>
    }
    else
    {
      index += (FLASH_WRITE_SIZE - offset);
 8001e56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	3310      	adds	r3, #16
 8001e5e:	643b      	str	r3, [r7, #64]	; 0x40
    }
  }
  while(index < length)
 8001e60:	e052      	b.n	8001f08 <Flash_Write+0x14a>
  {
    write_length = constrain(length - index, 0, FLASH_WRITE_SIZE);
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b10      	cmp	r3, #16
 8001e6a:	bf28      	it	cs
 8001e6c:	2310      	movcs	r3, #16
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30

    if (write_length == FLASH_WRITE_SIZE)
 8001e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e72:	2b10      	cmp	r3, #16
 8001e74:	d117      	bne.n	8001ea6 <Flash_Write+0xe8>
    {
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, addr + index, (uint32_t)&p_data[index]);
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e7a:	18d1      	adds	r1, r2, r3
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e80:	4413      	add	r3, r2
 8001e82:	461a      	mov	r2, r3
 8001e84:	2002      	movs	r0, #2
 8001e86:	f001 fc4f 	bl	8003728 <HAL_FLASH_Program>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 8001e90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <Flash_Write+0xe0>
      {
        ret = FALSE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001e9c:	e03a      	b.n	8001f14 <Flash_Write+0x156>
      }
      index += write_length;
 8001e9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea2:	4413      	add	r3, r2
 8001ea4:	643b      	str	r3, [r7, #64]	; 0x40
    }

    if ((length - index) > 0 && (length - index) < FLASH_WRITE_SIZE)
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d02c      	beq.n	8001f08 <Flash_Write+0x14a>
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d827      	bhi.n	8001f08 <Flash_Write+0x14a>
    {
      offset = length - index;
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
      write_addr = addr + index;
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ec4:	4413      	add	r3, r2
 8001ec6:	63bb      	str	r3, [r7, #56]	; 0x38
      memcpy(&buf[0], (void *)write_addr, FLASH_WRITE_SIZE);
 8001ec8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001eca:	f107 0310 	add.w	r3, r7, #16
 8001ece:	2210      	movs	r2, #16
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f00c f943 	bl	800e15c <memcpy>
      memcpy(&buf[0], &p_data[index], offset);
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eda:	18d1      	adds	r1, r2, r3
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f00c f93a 	bl	800e15c <memcpy>

      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, write_addr, (uint32_t)&buf);
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	461a      	mov	r2, r3
 8001eee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f001 fc19 	bl	8003728 <HAL_FLASH_Program>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (status != HAL_OK)
 8001efc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d006      	beq.n	8001f12 <Flash_Write+0x154>
      {
        return FALSE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e008      	b.n	8001f1a <Flash_Write+0x15c>
  while(index < length)
 8001f08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d3a8      	bcc.n	8001e62 <Flash_Write+0xa4>
 8001f10:	e000      	b.n	8001f14 <Flash_Write+0x156>
      }
      break;
 8001f12:	bf00      	nop
    }
  }
  // FLASH 메모리를 access 하기 위해 필요
  HAL_FLASH_Lock();
 8001f14:	f001 fca6 	bl	8003864 <HAL_FLASH_Lock>
  return ret;
 8001f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3748      	adds	r7, #72	; 0x48
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <Flash_Read>:
BOOL Flash_Read(uint32_t addr, uint32_t *p_data, uint32_t length)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b089      	sub	sp, #36	; 0x24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	61bb      	str	r3, [r7, #24]

  // 1byte 데이터 포인터
  uint8_t *p_byte = (uint8_t *)addr;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	617b      	str	r3, [r7, #20]

  for(int i=0; i < length; i++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	e00c      	b.n	8001f56 <Flash_Read+0x34>
  {
    p_data[i] = p_byte[i];
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4413      	add	r3, r2
 8001f42:	7819      	ldrb	r1, [r3, #0]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]
  for(int i=0; i < length; i++)
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	3301      	adds	r3, #1
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d8ee      	bhi.n	8001f3c <Flash_Read+0x1a>
  }



  return ret;
 8001f5e:	69bb      	ldr	r3, [r7, #24]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3724      	adds	r7, #36	; 0x24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <CLI_FlashTest>:

// Read, Erase, Write
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (FLASH_TEST, "Flash", "Flash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]", CLI_FlashTest)
static void CLI_FlashTest(char *pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nAddress)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b09a      	sub	sp, #104	; 0x68
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
  if(nCount == 2)
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	f040 8085 	bne.w	800208c <CLI_FlashTest+0x120>
  {
    switch(nFirst)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d049      	beq.n	800201c <CLI_FlashTest+0xb0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d871      	bhi.n	8002072 <CLI_FlashTest+0x106>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d003      	beq.n	8001f9c <CLI_FlashTest+0x30>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d029      	beq.n	8001fee <CLI_FlashTest+0x82>
 8001f9a:	e06a      	b.n	8002072 <CLI_FlashTest+0x106>
    {
      case 1:
        uint32_t rbuf[16];
        DebugMsg(DEBUGMSG_CLI,"=============================================\r\n");
 8001f9c:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <CLI_FlashTest+0x128>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <CLI_FlashTest+0x3e>
 8001fa4:	483c      	ldr	r0, [pc, #240]	; (8002098 <CLI_FlashTest+0x12c>)
 8001fa6:	f000 fb2f 	bl	8002608 <svDebugMessage>
        Flash_Read(nAddress, &rbuf[0],16);
 8001faa:	f107 0310 	add.w	r3, r7, #16
 8001fae:	2210      	movs	r2, #16
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6838      	ldr	r0, [r7, #0]
 8001fb4:	f7ff ffb5 	bl	8001f22 <Flash_Read>
        for(int i=0; i<16; i++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	667b      	str	r3, [r7, #100]	; 0x64
 8001fbc:	e013      	b.n	8001fe6 <CLI_FlashTest+0x7a>
        {
          DebugMsg(DEBUGMSG_CLI, "0x%X : 0x%X\n", nAddress + i, rbuf[i]);
 8001fbe:	4b35      	ldr	r3, [pc, #212]	; (8002094 <CLI_FlashTest+0x128>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00c      	beq.n	8001fe0 <CLI_FlashTest+0x74>
 8001fc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	18d1      	adds	r1, r2, r3
 8001fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	3368      	adds	r3, #104	; 0x68
 8001fd2:	443b      	add	r3, r7
 8001fd4:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4830      	ldr	r0, [pc, #192]	; (800209c <CLI_FlashTest+0x130>)
 8001fdc:	f000 fb14 	bl	8002608 <svDebugMessage>
        for(int i=0; i<16; i++)
 8001fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	667b      	str	r3, [r7, #100]	; 0x64
 8001fe6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fe8:	2b0f      	cmp	r3, #15
 8001fea:	dde8      	ble.n	8001fbe <CLI_FlashTest+0x52>
        }
        break;
 8001fec:	e04e      	b.n	800208c <CLI_FlashTest+0x120>
      case 2:
        if(Flash_Erase(nAddress, 16) == TRUE)
 8001fee:	2110      	movs	r1, #16
 8001ff0:	6838      	ldr	r0, [r7, #0]
 8001ff2:	f7ff fe41 	bl	8001c78 <Flash_Erase>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d107      	bne.n	800200c <CLI_FlashTest+0xa0>
        {
          DebugMsg(DEBUGMSG_CLI, "Erase OK\n");
 8001ffc:	4b25      	ldr	r3, [pc, #148]	; (8002094 <CLI_FlashTest+0x128>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d03e      	beq.n	8002082 <CLI_FlashTest+0x116>
 8002004:	4826      	ldr	r0, [pc, #152]	; (80020a0 <CLI_FlashTest+0x134>)
 8002006:	f000 faff 	bl	8002608 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
        }
        break;
 800200a:	e03a      	b.n	8002082 <CLI_FlashTest+0x116>
          DebugMsg(DEBUGMSG_CLI, "Erase Fail\n");
 800200c:	4b21      	ldr	r3, [pc, #132]	; (8002094 <CLI_FlashTest+0x128>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d036      	beq.n	8002082 <CLI_FlashTest+0x116>
 8002014:	4823      	ldr	r0, [pc, #140]	; (80020a4 <CLI_FlashTest+0x138>)
 8002016:	f000 faf7 	bl	8002608 <svDebugMessage>
        break;
 800201a:	e032      	b.n	8002082 <CLI_FlashTest+0x116>
      case 3:
        uint8_t wbuf[16];
        for(int i=0; i<16; i++)
 800201c:	2300      	movs	r3, #0
 800201e:	663b      	str	r3, [r7, #96]	; 0x60
 8002020:	e00a      	b.n	8002038 <CLI_FlashTest+0xcc>
        {
          wbuf[i] = i;
 8002022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002024:	b2d9      	uxtb	r1, r3
 8002026:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800202a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800202c:	4413      	add	r3, r2
 800202e:	460a      	mov	r2, r1
 8002030:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<16; i++)
 8002032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002034:	3301      	adds	r3, #1
 8002036:	663b      	str	r3, [r7, #96]	; 0x60
 8002038:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800203a:	2b0f      	cmp	r3, #15
 800203c:	ddf1      	ble.n	8002022 <CLI_FlashTest+0xb6>
        }
        if(Flash_Write(nAddress, wbuf, 16) == TRUE)
 800203e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002042:	2210      	movs	r2, #16
 8002044:	4619      	mov	r1, r3
 8002046:	6838      	ldr	r0, [r7, #0]
 8002048:	f7ff feb9 	bl	8001dbe <Flash_Write>
 800204c:	4603      	mov	r3, r0
 800204e:	2b01      	cmp	r3, #1
 8002050:	d107      	bne.n	8002062 <CLI_FlashTest+0xf6>
        {
          DebugMsg(DEBUGMSG_CLI, "Write OK\n");
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <CLI_FlashTest+0x128>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d015      	beq.n	8002086 <CLI_FlashTest+0x11a>
 800205a:	4813      	ldr	r0, [pc, #76]	; (80020a8 <CLI_FlashTest+0x13c>)
 800205c:	f000 fad4 	bl	8002608 <svDebugMessage>
        }
        else
        {
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
        }
        break;
 8002060:	e011      	b.n	8002086 <CLI_FlashTest+0x11a>
          DebugMsg(DEBUGMSG_CLI,"Write Fail\n");
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <CLI_FlashTest+0x128>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00d      	beq.n	8002086 <CLI_FlashTest+0x11a>
 800206a:	4810      	ldr	r0, [pc, #64]	; (80020ac <CLI_FlashTest+0x140>)
 800206c:	f000 facc 	bl	8002608 <svDebugMessage>
        break;
 8002070:	e009      	b.n	8002086 <CLI_FlashTest+0x11a>
      default:
        DebugMsg(DEBUGMSG_CLI,"\r\nFlash [1(Read),2(Erase),3(Write)] [0x0800 F000 ~ address]\r\n");
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <CLI_FlashTest+0x128>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <CLI_FlashTest+0x11e>
 800207a:	480d      	ldr	r0, [pc, #52]	; (80020b0 <CLI_FlashTest+0x144>)
 800207c:	f000 fac4 	bl	8002608 <svDebugMessage>
        break;
 8002080:	e003      	b.n	800208a <CLI_FlashTest+0x11e>
        break;
 8002082:	bf00      	nop
 8002084:	e002      	b.n	800208c <CLI_FlashTest+0x120>
        break;
 8002086:	bf00      	nop
 8002088:	e000      	b.n	800208c <CLI_FlashTest+0x120>
        break;
 800208a:	bf00      	nop
    }
  }
}
 800208c:	bf00      	nop
 800208e:	3768      	adds	r7, #104	; 0x68
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000028 	.word	0x20000028
 8002098:	0800ea7c 	.word	0x0800ea7c
 800209c:	0800eaac 	.word	0x0800eaac
 80020a0:	0800eabc 	.word	0x0800eabc
 80020a4:	0800eac8 	.word	0x0800eac8
 80020a8:	0800ead4 	.word	0x0800ead4
 80020ac:	0800eae0 	.word	0x0800eae0
 80020b0:	0800eaec 	.word	0x0800eaec

080020b4 <LED_Init>:
static BOOL s_bLEDInit = FALSE;
static BOOL s_bLEDEnable = FALSE;

// Function Declarations
void LED_Init(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  s_bLEDInit = TRUE;
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <LED_Init+0x1c>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	601a      	str	r2, [r3, #0]
  s_bLEDEnable = TRUE;
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <LED_Init+0x20>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	2000081c 	.word	0x2000081c
 80020d4:	20000820 	.word	0x20000820

080020d8 <LED_OnOff>:
{
  s_bLEDEnable = bEnable;
}

void LED_OnOff(LED_e eLED, BOOL bOn)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
  if(FALSE == s_bLEDEnable)
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <LED_OnOff+0x7c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d02d      	beq.n	8002148 <LED_OnOff+0x70>
    return;
  }

  GPIO_TypeDef* LED_GPIO_Port;
  uint16_t LED_GPIO_Pin;
  if(s_bLEDInit)
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <LED_OnOff+0x80>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d02c      	beq.n	800214e <LED_OnOff+0x76>
  {
    switch(eLED){
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d010      	beq.n	800211c <LED_OnOff+0x44>
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	dc26      	bgt.n	800214c <LED_OnOff+0x74>
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d002      	beq.n	8002108 <LED_OnOff+0x30>
 8002102:	2b02      	cmp	r3, #2
 8002104:	d005      	beq.n	8002112 <LED_OnOff+0x3a>
      case LED3_RED:
        LED_GPIO_Port = LED3_RED_GPIO_Port;
        LED_GPIO_Pin = LED3_RED_Pin;
        break;
      default:
        return;
 8002106:	e021      	b.n	800214c <LED_OnOff+0x74>
        LED_GPIO_Port = LED1_GREEN_GPIO_Port;
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <LED_OnOff+0x84>)
 800210a:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED1_GREEN_Pin;
 800210c:	2301      	movs	r3, #1
 800210e:	817b      	strh	r3, [r7, #10]
        break;
 8002110:	e009      	b.n	8002126 <LED_OnOff+0x4e>
        LED_GPIO_Port = LED2_YELLOW_GPIO_Port;
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <LED_OnOff+0x88>)
 8002114:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED2_YELLOW_Pin;
 8002116:	2310      	movs	r3, #16
 8002118:	817b      	strh	r3, [r7, #10]
        break;
 800211a:	e004      	b.n	8002126 <LED_OnOff+0x4e>
        LED_GPIO_Port = LED3_RED_GPIO_Port;
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <LED_OnOff+0x8c>)
 800211e:	60fb      	str	r3, [r7, #12]
        LED_GPIO_Pin = LED3_RED_Pin;
 8002120:	2310      	movs	r3, #16
 8002122:	817b      	strh	r3, [r7, #10]
        break;
 8002124:	bf00      	nop
        break;
    }
    if(bOn)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <LED_OnOff+0x62>
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_SET);
 800212c:	897b      	ldrh	r3, [r7, #10]
 800212e:	2201      	movs	r2, #1
 8002130:	4619      	mov	r1, r3
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f001 fef8 	bl	8003f28 <HAL_GPIO_WritePin>
 8002138:	e009      	b.n	800214e <LED_OnOff+0x76>
    }
    else
    {
      HAL_GPIO_WritePin(LED_GPIO_Port, LED_GPIO_Pin, GPIO_PIN_RESET);
 800213a:	897b      	ldrh	r3, [r7, #10]
 800213c:	2200      	movs	r2, #0
 800213e:	4619      	mov	r1, r3
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f001 fef1 	bl	8003f28 <HAL_GPIO_WritePin>
 8002146:	e002      	b.n	800214e <LED_OnOff+0x76>
    return;
 8002148:	bf00      	nop
 800214a:	e000      	b.n	800214e <LED_OnOff+0x76>
        return;
 800214c:	bf00      	nop
    }
  }
}
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000820 	.word	0x20000820
 8002158:	2000081c 	.word	0x2000081c
 800215c:	42020400 	.word	0x42020400
 8002160:	42021400 	.word	0x42021400
 8002164:	42021800 	.word	0x42021800

08002168 <LED_SimpleAnimation>:
  LED_OnOff(LED2_YELLOW, bOn);
  LED_OnOff(LED3_RED, bOn);
}

void LED_SimpleAnimation(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
  for(int i =0; i<3; i++)
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	e02c      	b.n	80021ce <LED_SimpleAnimation+0x66>
  {
    LED_OnOff(LED1_GREEN, TRUE);
 8002174:	2101      	movs	r1, #1
 8002176:	2001      	movs	r0, #1
 8002178:	f7ff ffae 	bl	80020d8 <LED_OnOff>
    HAL_Delay(50);
 800217c:	2032      	movs	r0, #50	; 0x32
 800217e:	f000 fabf 	bl	8002700 <HAL_Delay>
    LED_OnOff(LED1_GREEN, FALSE);
 8002182:	2100      	movs	r1, #0
 8002184:	2001      	movs	r0, #1
 8002186:	f7ff ffa7 	bl	80020d8 <LED_OnOff>
    HAL_Delay(50);
 800218a:	2032      	movs	r0, #50	; 0x32
 800218c:	f000 fab8 	bl	8002700 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, TRUE);
 8002190:	2101      	movs	r1, #1
 8002192:	2002      	movs	r0, #2
 8002194:	f7ff ffa0 	bl	80020d8 <LED_OnOff>
    HAL_Delay(50);
 8002198:	2032      	movs	r0, #50	; 0x32
 800219a:	f000 fab1 	bl	8002700 <HAL_Delay>
    LED_OnOff(LED2_YELLOW, FALSE);
 800219e:	2100      	movs	r1, #0
 80021a0:	2002      	movs	r0, #2
 80021a2:	f7ff ff99 	bl	80020d8 <LED_OnOff>
    HAL_Delay(50);
 80021a6:	2032      	movs	r0, #50	; 0x32
 80021a8:	f000 faaa 	bl	8002700 <HAL_Delay>
    LED_OnOff(LED3_RED, TRUE);
 80021ac:	2101      	movs	r1, #1
 80021ae:	2003      	movs	r0, #3
 80021b0:	f7ff ff92 	bl	80020d8 <LED_OnOff>
    HAL_Delay(50);
 80021b4:	2032      	movs	r0, #50	; 0x32
 80021b6:	f000 faa3 	bl	8002700 <HAL_Delay>
    LED_OnOff(LED3_RED, FALSE);
 80021ba:	2100      	movs	r1, #0
 80021bc:	2003      	movs	r0, #3
 80021be:	f7ff ff8b 	bl	80020d8 <LED_OnOff>
    HAL_Delay(50);
 80021c2:	2032      	movs	r0, #50	; 0x32
 80021c4:	f000 fa9c 	bl	8002700 <HAL_Delay>
  for(int i =0; i<3; i++)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3301      	adds	r3, #1
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	ddcf      	ble.n	8002174 <LED_SimpleAnimation+0xc>
  }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <CLI_LEDTest>:
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (LED_TEST,"LED","LED [1~11] [0,1,2] ",CLI_LEDTest);

static void CLI_LEDTest(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	603b      	str	r3, [r7, #0]
  if (nCount == 2) {
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d10b      	bne.n	800220a <CLI_LEDTest+0x2c>
    LED_OnOff((LED_e)nFirst, (BOOL)(nSecond != 0));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf14      	ite	ne
 80021fc:	2301      	movne	r3, #1
 80021fe:	2300      	moveq	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	4619      	mov	r1, r3
 8002204:	4610      	mov	r0, r2
 8002206:	f7ff ff67 	bl	80020d8 <LED_OnOff>
  }
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <RESET_Init>:
  }
}


BOOL RESET_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
  BOOL ret = TRUE;
 800221a:	2301      	movs	r3, #1
 800221c:	603b      	str	r3, [r7, #0]
  BOOL is_debug = FALSE;
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 8002222:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <RESET_Init+0x80>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <RESET_Init+0x1e>
  {
    is_debug = TRUE;
 800222e:	2301      	movs	r3, #1
 8002230:	607b      	str	r3, [r7, #4]
  }
  RTC_WriteBackupReg(RESET_REG_COUNT+1, RESET_REG_MAGICNUMBER);
 8002232:	4919      	ldr	r1, [pc, #100]	; (8002298 <RESET_Init+0x84>)
 8002234:	2002      	movs	r0, #2
 8002236:	f000 f845 	bl	80022c4 <RTC_WriteBackupReg>
  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if((RCC->RSR & (1<<26) && is_debug != TRUE) && RTC_ReadBackupReg(RESET_REG_COUNT+1) == RESET_REG_MAGICNUMBER)
 800223a:	4b18      	ldr	r3, [pc, #96]	; (800229c <RESET_Init+0x88>)
 800223c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002240:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01c      	beq.n	8002282 <RESET_Init+0x6e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d019      	beq.n	8002282 <RESET_Init+0x6e>
 800224e:	2002      	movs	r0, #2
 8002250:	f000 f828 	bl	80022a4 <RTC_ReadBackupReg>
 8002254:	4603      	mov	r3, r0
 8002256:	4a10      	ldr	r2, [pc, #64]	; (8002298 <RESET_Init+0x84>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d112      	bne.n	8002282 <RESET_Init+0x6e>
  {
    RTC_WriteBackupReg(RESET_REG_COUNT, RTC_ReadBackupReg(RESET_REG_COUNT) + 1);
 800225c:	2001      	movs	r0, #1
 800225e:	f000 f821 	bl	80022a4 <RTC_ReadBackupReg>
 8002262:	4603      	mov	r3, r0
 8002264:	3301      	adds	r3, #1
 8002266:	4619      	mov	r1, r3
 8002268:	2001      	movs	r0, #1
 800226a:	f000 f82b 	bl	80022c4 <RTC_WriteBackupReg>
    HAL_Delay(500); // 500 m delay
 800226e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002272:	f000 fa45 	bl	8002700 <HAL_Delay>
    s_ResetCount = RTC_ReadBackupReg(RESET_REG_COUNT);
 8002276:	2001      	movs	r0, #1
 8002278:	f000 f814 	bl	80022a4 <RTC_ReadBackupReg>
 800227c:	4603      	mov	r3, r0
 800227e:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <RESET_Init+0x8c>)
 8002280:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  RTC_WriteBackupReg(RESET_REG_COUNT, 0);
 8002282:	2100      	movs	r1, #0
 8002284:	2001      	movs	r0, #1
 8002286:	f000 f81d 	bl	80022c4 <RTC_WriteBackupReg>

  return ret;
 800228a:	683b      	ldr	r3, [r7, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	e000edf0 	.word	0xe000edf0
 8002298:	20240215 	.word	0x20240215
 800229c:	44020c00 	.word	0x44020c00
 80022a0:	20000824 	.word	0x20000824

080022a4 <RTC_ReadBackupReg>:
#include "RTC.h"

RTC_HandleTypeDef hrtc;

uint32_t RTC_ReadBackupReg(uint32_t index)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4804      	ldr	r0, [pc, #16]	; (80022c0 <RTC_ReadBackupReg+0x1c>)
 80022b0:	f007 feca 	bl	800a048 <HAL_RTCEx_BKUPRead>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000828 	.word	0x20000828

080022c4 <RTC_WriteBackupReg>:

void RTC_WriteBackupReg(uint32_t index, uint32_t data)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4803      	ldr	r0, [pc, #12]	; (80022e0 <RTC_WriteBackupReg+0x1c>)
 80022d4:	f007 fea0 	bl	800a018 <HAL_RTCEx_BKUPWrite>
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000828 	.word	0x20000828

080022e4 <UART_Init>:

UART_HandleTypeDef huart2;
//UART_HandleTypeDef huart3;

void  UART_Init(uint8_t ch, uint32_t baud)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  switch(ch)
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d177      	bne.n	80023e6 <UART_Init+0x102>
  {
    case _DEF_UART1:
      huart2.Instance = USART2;
 80022f6:	4b3e      	ldr	r3, [pc, #248]	; (80023f0 <UART_Init+0x10c>)
 80022f8:	4a3e      	ldr	r2, [pc, #248]	; (80023f4 <UART_Init+0x110>)
 80022fa:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = baud;
 80022fc:	4a3c      	ldr	r2, [pc, #240]	; (80023f0 <UART_Init+0x10c>)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002302:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <UART_Init+0x10c>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 8002308:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <UART_Init+0x10c>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 800230e:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <UART_Init+0x10c>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <UART_Init+0x10c>)
 8002316:	220c      	movs	r2, #12
 8002318:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231a:	4b35      	ldr	r3, [pc, #212]	; (80023f0 <UART_Init+0x10c>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002320:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <UART_Init+0x10c>)
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
      huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002326:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <UART_Init+0x10c>)
 8002328:	2200      	movs	r2, #0
 800232a:	621a      	str	r2, [r3, #32]
      huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800232c:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <UART_Init+0x10c>)
 800232e:	2200      	movs	r2, #0
 8002330:	625a      	str	r2, [r3, #36]	; 0x24
      huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002332:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <UART_Init+0x10c>)
 8002334:	2200      	movs	r2, #0
 8002336:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_UART_Init(&huart2) != HAL_OK)
 8002338:	482d      	ldr	r0, [pc, #180]	; (80023f0 <UART_Init+0x10c>)
 800233a:	f008 fa81 	bl	800a840 <HAL_UART_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <UART_Init+0x72>
      {
        Error_Handler();
 8002344:	f7fe fc02 	bl	8000b4c <Error_Handler>
        s_bUARTConnected = FALSE;
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <UART_Init+0x114>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 800234e:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <UART_Init+0x118>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e031      	b.n	80023ba <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002356:	2100      	movs	r1, #0
 8002358:	4825      	ldr	r0, [pc, #148]	; (80023f0 <UART_Init+0x10c>)
 800235a:	f00a f9b0 	bl	800c6be <HAL_UARTEx_SetTxFifoThreshold>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <UART_Init+0x92>
      {
        Error_Handler();
 8002364:	f7fe fbf2 	bl	8000b4c <Error_Handler>
        s_bUARTConnected = FALSE;
 8002368:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <UART_Init+0x114>)
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 800236e:	4b23      	ldr	r3, [pc, #140]	; (80023fc <UART_Init+0x118>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	e021      	b.n	80023ba <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002376:	2100      	movs	r1, #0
 8002378:	481d      	ldr	r0, [pc, #116]	; (80023f0 <UART_Init+0x10c>)
 800237a:	f00a f9de 	bl	800c73a <HAL_UARTEx_SetRxFifoThreshold>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <UART_Init+0xb2>
      {
        Error_Handler();
 8002384:	f7fe fbe2 	bl	8000b4c <Error_Handler>
        s_bUARTConnected = FALSE;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <UART_Init+0x114>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <UART_Init+0x118>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e011      	b.n	80023ba <UART_Init+0xd6>
      }
      else if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002396:	4816      	ldr	r0, [pc, #88]	; (80023f0 <UART_Init+0x10c>)
 8002398:	f00a f958 	bl	800c64c <HAL_UARTEx_DisableFifoMode>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <UART_Init+0xd0>
      {
        Error_Handler();
 80023a2:	f7fe fbd3 	bl	8000b4c <Error_Handler>
        s_bUARTConnected = FALSE;
 80023a6:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <UART_Init+0x114>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 80023ac:	4b13      	ldr	r3, [pc, #76]	; (80023fc <UART_Init+0x118>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	e002      	b.n	80023ba <UART_Init+0xd6>
      }
      else
      {
        // ring buffer
        svRingBuffer_Reset(&g_uartRxBuff);
 80023b4:	4812      	ldr	r0, [pc, #72]	; (8002400 <UART_Init+0x11c>)
 80023b6:	f00b f93c 	bl	800d632 <svRingBuffer_Reset>
      }

      if(HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx_data,1) != HAL_OK)
 80023ba:	2201      	movs	r2, #1
 80023bc:	4911      	ldr	r1, [pc, #68]	; (8002404 <UART_Init+0x120>)
 80023be:	480c      	ldr	r0, [pc, #48]	; (80023f0 <UART_Init+0x10c>)
 80023c0:	f008 fb2c 	bl	800aa1c <HAL_UART_Receive_IT>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <UART_Init+0xf4>
      {
        s_bUARTConnected = FALSE;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <UART_Init+0x114>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
        g_bDebugTx = FALSE;
 80023d0:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <UART_Init+0x118>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
      else
      {
        s_bUARTConnected = TRUE;
        g_bDebugTx = TRUE;
      }
      break;
 80023d6:	e007      	b.n	80023e8 <UART_Init+0x104>
        s_bUARTConnected = TRUE;
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <UART_Init+0x114>)
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
        g_bDebugTx = TRUE;
 80023de:	4b07      	ldr	r3, [pc, #28]	; (80023fc <UART_Init+0x118>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
      break;
 80023e4:	e000      	b.n	80023e8 <UART_Init+0x104>
    default:
      break;
 80023e6:	bf00      	nop
  }
  return;
 80023e8:	bf00      	nop
}
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000860 	.word	0x20000860
 80023f4:	40004400 	.word	0x40004400
 80023f8:	2000085c 	.word	0x2000085c
 80023fc:	20000974 	.word	0x20000974
 8002400:	2000000c 	.word	0x2000000c
 8002404:	20000858 	.word	0x20000858

08002408 <IsUartConnected>:

BOOL  IsUartConnected(uint8_t ch)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
  return s_bUARTConnected;
 8002412:	4b04      	ldr	r3, [pc, #16]	; (8002424 <IsUartConnected+0x1c>)
 8002414:	681b      	ldr	r3, [r3, #0]
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	2000085c 	.word	0x2000085c

08002428 <UART_Write>:

uint32_t  UART_Write(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	71fb      	strb	r3, [r7, #7]
 8002434:	4613      	mov	r3, r2
 8002436:	80bb      	strh	r3, [r7, #4]
  uint32_t ret = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status;

  switch(ch)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d110      	bne.n	8002464 <UART_Write+0x3c>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart2, Buf, Len, 100);
 8002442:	88ba      	ldrh	r2, [r7, #4]
 8002444:	2364      	movs	r3, #100	; 0x64
 8002446:	6839      	ldr	r1, [r7, #0]
 8002448:	480a      	ldr	r0, [pc, #40]	; (8002474 <UART_Write+0x4c>)
 800244a:	f008 fa49 	bl	800a8e0 <HAL_UART_Transmit>
 800244e:	4603      	mov	r3, r0
 8002450:	72fb      	strb	r3, [r7, #11]

      if(status == HAL_OK)
 8002452:	7afb      	ldrb	r3, [r7, #11]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d107      	bne.n	8002468 <UART_Write+0x40>
      {
        ret = Len;
 8002458:	88bb      	ldrh	r3, [r7, #4]
 800245a:	60fb      	str	r3, [r7, #12]
        g_bDebugTx = TRUE;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <UART_Write+0x50>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]
      }
      break;
 8002462:	e001      	b.n	8002468 <UART_Write+0x40>
    default:
      break;
 8002464:	bf00      	nop
 8002466:	e000      	b.n	800246a <UART_Write+0x42>
      break;
 8002468:	bf00      	nop
  }
  return ret;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000860 	.word	0x20000860
 8002478:	20000974 	.word	0x20000974

0800247c <HAL_UART_RxCpltCallback>:
  return ret;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0c      	ldr	r2, [pc, #48]	; (80024bc <HAL_UART_RxCpltCallback+0x40>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d112      	bne.n	80024b4 <HAL_UART_RxCpltCallback+0x38>
  {
    // For UART Test
    // UART_Printf(_DEF_UART1, "RxData : 0x%X\n", rx_data);
    int result = svRingBuffer_Push(&g_uartRxBuff, rx_data);
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_UART_RxCpltCallback+0x44>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	4619      	mov	r1, r3
 8002494:	480b      	ldr	r0, [pc, #44]	; (80024c4 <HAL_UART_RxCpltCallback+0x48>)
 8002496:	f00b f8e4 	bl	800d662 <svRingBuffer_Push>
 800249a:	60f8      	str	r0, [r7, #12]
    if(result == -2 )
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f113 0f02 	cmn.w	r3, #2
 80024a2:	d102      	bne.n	80024aa <HAL_UART_RxCpltCallback+0x2e>
    {
      svRingBuffer_Reset(&g_uartRxBuff);
 80024a4:	4807      	ldr	r0, [pc, #28]	; (80024c4 <HAL_UART_RxCpltCallback+0x48>)
 80024a6:	f00b f8c4 	bl	800d632 <svRingBuffer_Reset>
    }else
    {

    }
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data, 1);
 80024aa:	2201      	movs	r2, #1
 80024ac:	4904      	ldr	r1, [pc, #16]	; (80024c0 <HAL_UART_RxCpltCallback+0x44>)
 80024ae:	4806      	ldr	r0, [pc, #24]	; (80024c8 <HAL_UART_RxCpltCallback+0x4c>)
 80024b0:	f008 fab4 	bl	800aa1c <HAL_UART_Receive_IT>
  }
}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40004400 	.word	0x40004400
 80024c0:	20000858 	.word	0x20000858
 80024c4:	2000000c 	.word	0x2000000c
 80024c8:	20000860 	.word	0x20000860

080024cc <svDebugRxChar>:
  return ch;
}
#endif

char svDebugRxChar(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
	if (svRingBuffer_GetCount(&g_rbDebugRx) > 0) {
 80024d0:	4806      	ldr	r0, [pc, #24]	; (80024ec <svDebugRxChar+0x20>)
 80024d2:	f00b f88c 	bl	800d5ee <svRingBuffer_GetCount>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <svDebugRxChar+0x1a>
		return svRingBuffer_Pop(&g_rbDebugRx);
 80024dc:	4803      	ldr	r0, [pc, #12]	; (80024ec <svDebugRxChar+0x20>)
 80024de:	f00b f8f4 	bl	800d6ca <svRingBuffer_Pop>
 80024e2:	4603      	mov	r3, r0
 80024e4:	e000      	b.n	80024e8 <svDebugRxChar+0x1c>
	}
	else {
		return 0;
 80024e6:	2300      	movs	r3, #0
	}
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	2000000c 	.word	0x2000000c

080024f0 <svDebugProcess>:

void svDebugProcess(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
	if (IsUartConnected(_DEF_UART1)) {
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7ff ff86 	bl	8002408 <IsUartConnected>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d01a      	beq.n	8002538 <svDebugProcess+0x48>
	  svCLI_Handler();
 8002502:	f00a ff21 	bl	800d348 <svCLI_Handler>
		if (g_bDebugTx == TRUE) {
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <svDebugProcess+0x50>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d114      	bne.n	8002538 <svDebugProcess+0x48>
			size_t nLength = lwrb_get_linear_block_read_length(&g_lwrbDebugTx);
 800250e:	480d      	ldr	r0, [pc, #52]	; (8002544 <svDebugProcess+0x54>)
 8002510:	f00b fc95 	bl	800de3e <lwrb_get_linear_block_read_length>
 8002514:	6078      	str	r0, [r7, #4]
			if (nLength > 0) {
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00d      	beq.n	8002538 <svDebugProcess+0x48>
			  /*
				if (nLength > UART_TX_DATA_SIZE) {
					nLength = UART_TX_DATA_SIZE;
				}
				*/
				UART_Write(_DEF_UART1, lwrb_get_linear_block_read_address(&g_lwrbDebugTx), nLength);
 800251c:	4809      	ldr	r0, [pc, #36]	; (8002544 <svDebugProcess+0x54>)
 800251e:	f00b fc72 	bl	800de06 <lwrb_get_linear_block_read_address>
 8002522:	4601      	mov	r1, r0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	b29b      	uxth	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	2000      	movs	r0, #0
 800252c:	f7ff ff7c 	bl	8002428 <UART_Write>
				lwrb_skip(&g_lwrbDebugTx, nLength);
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4804      	ldr	r0, [pc, #16]	; (8002544 <svDebugProcess+0x54>)
 8002534:	f00b fcb6 	bl	800dea4 <lwrb_skip>
				g_bDebugTx = TRUE;
		  }
		}
		*/
	}
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000974 	.word	0x20000974
 8002544:	20000978 	.word	0x20000978

08002548 <svDebugCallback>:

void svDebugCallback(LWRB_VOLATILE struct lwrb* buff, lwrb_evt_type_t evt, size_t bp)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	460b      	mov	r3, r1
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	72fb      	strb	r3, [r7, #11]
	if (evt == LWRB_EVT_FULL) {
 8002556:	7afb      	ldrb	r3, [r7, #11]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d11a      	bne.n	8002592 <svDebugCallback+0x4a>
		if (IsUartConnected(_DEF_UART1)) {
 800255c:	2000      	movs	r0, #0
 800255e:	f7ff ff53 	bl	8002408 <IsUartConnected>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d014      	beq.n	8002592 <svDebugCallback+0x4a>
			uint32_t uTick = HAL_GetTick();
 8002568:	f000 f8be 	bl	80026e8 <HAL_GetTick>
 800256c:	6178      	str	r0, [r7, #20]
			while (GetElapsedTime(uTick) < 100) {
 800256e:	e003      	b.n	8002578 <svDebugCallback+0x30>
				if (g_bDebugTx == TRUE) {
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <svDebugCallback+0x54>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d006      	beq.n	8002586 <svDebugCallback+0x3e>
			while (GetElapsedTime(uTick) < 100) {
 8002578:	6978      	ldr	r0, [r7, #20]
 800257a:	f000 f863 	bl	8002644 <GetElapsedTime>
 800257e:	4603      	mov	r3, r0
 8002580:	2b63      	cmp	r3, #99	; 0x63
 8002582:	d9f5      	bls.n	8002570 <svDebugCallback+0x28>
 8002584:	e000      	b.n	8002588 <svDebugCallback+0x40>
					break;
 8002586:	bf00      	nop
				}
				// HAL_Delay(1);
			}
      g_bDebugTx = TRUE;
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <svDebugCallback+0x54>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]
			svDebugProcess();
 800258e:	f7ff ffaf 	bl	80024f0 <svDebugProcess>
		}
	}
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000974 	.word	0x20000974

080025a0 <svDebugInit>:
{
	return lwrb_get_free(&g_lwrbDebugTx);
}

void svDebugInit(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	svRingBuffer_Reset(&g_rbDebugRx);
 80025a4:	4809      	ldr	r0, [pc, #36]	; (80025cc <svDebugInit+0x2c>)
 80025a6:	f00b f844 	bl	800d632 <svRingBuffer_Reset>
	svCLI_Init(&svDebugRxChar, &svDebugPutChar, NULL);
 80025aa:	2200      	movs	r2, #0
 80025ac:	4908      	ldr	r1, [pc, #32]	; (80025d0 <svDebugInit+0x30>)
 80025ae:	4809      	ldr	r0, [pc, #36]	; (80025d4 <svDebugInit+0x34>)
 80025b0:	f00a fa4c 	bl	800ca4c <svCLI_Init>

  lwrb_init(&g_lwrbDebugTx, &s_byDebugTxRingBuffer[0], DEBUG_TX_BUFFER_SIZE);
 80025b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b8:	4907      	ldr	r1, [pc, #28]	; (80025d8 <svDebugInit+0x38>)
 80025ba:	4808      	ldr	r0, [pc, #32]	; (80025dc <svDebugInit+0x3c>)
 80025bc:	f00b fb04 	bl	800dbc8 <lwrb_init>
	lwrb_set_evt_fn(&g_lwrbDebugTx, svDebugCallback);
 80025c0:	4907      	ldr	r1, [pc, #28]	; (80025e0 <svDebugInit+0x40>)
 80025c2:	4806      	ldr	r0, [pc, #24]	; (80025dc <svDebugInit+0x3c>)
 80025c4:	f00b fb21 	bl	800dc0a <lwrb_set_evt_fn>
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	2000000c 	.word	0x2000000c
 80025d0:	080025e5 	.word	0x080025e5
 80025d4:	080024cd 	.word	0x080024cd
 80025d8:	2000098c 	.word	0x2000098c
 80025dc:	20000978 	.word	0x20000978
 80025e0:	08002549 	.word	0x08002549

080025e4 <svDebugPutChar>:
		uDebugMsgLevel = DEBUG_VERBOSE;
	g_DebugMsgLevel = uDebugMsgLevel;
}

void svDebugPutChar(char cPut)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
	lwrb_write(&g_lwrbDebugTx, (const void*)(&cPut), 1);
 80025ee:	1dfb      	adds	r3, r7, #7
 80025f0:	2201      	movs	r2, #1
 80025f2:	4619      	mov	r1, r3
 80025f4:	4803      	ldr	r0, [pc, #12]	; (8002604 <svDebugPutChar+0x20>)
 80025f6:	f00b fb21 	bl	800dc3c <lwrb_write>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000978 	.word	0x20000978

08002608 <svDebugMessage>:
#endif
	lwrb_write(&g_lwrbDebugTx, (const void*)szMsg, lenMax);
}

void svDebugMessage(char* fmt,...)
{
 8002608:	b40f      	push	{r0, r1, r2, r3}
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
	static char s_msg4Debug[DEBUG_MESSAGE_SIZE];
	va_list ap;
	int len;

	va_start(ap, fmt);
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	603b      	str	r3, [r7, #0]
	len = vsprintf(s_msg4Debug, fmt, ap);
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	6939      	ldr	r1, [r7, #16]
 800261a:	4808      	ldr	r0, [pc, #32]	; (800263c <svDebugMessage+0x34>)
 800261c:	f00b fd3c 	bl	800e098 <vsiprintf>
 8002620:	6078      	str	r0, [r7, #4]
	va_end(ap);

	lwrb_write(&g_lwrbDebugTx, (const void*)s_msg4Debug, len);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	461a      	mov	r2, r3
 8002626:	4905      	ldr	r1, [pc, #20]	; (800263c <svDebugMessage+0x34>)
 8002628:	4805      	ldr	r0, [pc, #20]	; (8002640 <svDebugMessage+0x38>)
 800262a:	f00b fb07 	bl	800dc3c <lwrb_write>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002638:	b004      	add	sp, #16
 800263a:	4770      	bx	lr
 800263c:	20000b90 	.word	0x20000b90
 8002640:	20000978 	.word	0x20000978

08002644 <GetElapsedTime>:
#include <math.h>


// Functions
uint32_t GetElapsedTime(uint32_t tickRef)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	uint32_t tickCurrent = HAL_GetTick();
 800264c:	f000 f84c 	bl	80026e8 <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]
	// Check Wrap around
	if (tickCurrent < tickRef) {
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	429a      	cmp	r2, r3
 8002658:	d204      	bcs.n	8002664 <GetElapsedTime+0x20>
		return (0xffffffff - tickRef + tickCurrent);
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	e002      	b.n	800266a <GetElapsedTime+0x26>
	}
	else {
		return tickCurrent - tickRef;
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	1ad3      	subs	r3, r2, r3
	}
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002678:	2003      	movs	r0, #3
 800267a:	f000 f912 	bl	80028a2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800267e:	f002 fab7 	bl	8004bf0 <HAL_RCC_GetSysClockFreq>
 8002682:	4602      	mov	r2, r0
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_Init+0x40>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	490a      	ldr	r1, [pc, #40]	; (80026b8 <HAL_Init+0x44>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	4a09      	ldr	r2, [pc, #36]	; (80026bc <HAL_Init+0x48>)
 8002696:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002698:	200f      	movs	r0, #15
 800269a:	f7fe fbd1 	bl	8000e40 <HAL_InitTick>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e002      	b.n	80026ae <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026a8:	f7fe fa55 	bl	8000b56 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	44020c00 	.word	0x44020c00
 80026b8:	0800ec58 	.word	0x0800ec58
 80026bc:	20000000 	.word	0x20000000

080026c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_IncTick+0x20>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_IncTick+0x24>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <HAL_IncTick+0x24>)
 80026d2:	6013      	str	r3, [r2, #0]
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000030 	.word	0x20000030
 80026e4:	20000c10 	.word	0x20000c10

080026e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return uwTick;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <HAL_GetTick+0x14>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000c10 	.word	0x20000c10

08002700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff ffee 	bl	80026e8 <HAL_GetTick>
 800270c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d005      	beq.n	8002726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <HAL_Delay+0x44>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4413      	add	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002726:	bf00      	nop
 8002728:	f7ff ffde 	bl	80026e8 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	429a      	cmp	r2, r3
 8002736:	d8f7      	bhi.n	8002728 <HAL_Delay+0x28>
  {
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000030 	.word	0x20000030

08002748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <__NVIC_SetPriorityGrouping+0x44>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002764:	4013      	ands	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800277a:	4a04      	ldr	r2, [pc, #16]	; (800278c <__NVIC_SetPriorityGrouping+0x44>)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	60d3      	str	r3, [r2, #12]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002794:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	f003 0307 	and.w	r3, r3, #7
}
 800279e:	4618      	mov	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	db0b      	blt.n	80027d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	f003 021f 	and.w	r2, r3, #31
 80027c4:	4907      	ldr	r1, [pc, #28]	; (80027e4 <__NVIC_EnableIRQ+0x38>)
 80027c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2001      	movs	r0, #1
 80027ce:	fa00 f202 	lsl.w	r2, r0, r2
 80027d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000e100 	.word	0xe000e100

080027e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	6039      	str	r1, [r7, #0]
 80027f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	db0a      	blt.n	8002812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	490c      	ldr	r1, [pc, #48]	; (8002834 <__NVIC_SetPriority+0x4c>)
 8002802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002806:	0112      	lsls	r2, r2, #4
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	440b      	add	r3, r1
 800280c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002810:	e00a      	b.n	8002828 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	4908      	ldr	r1, [pc, #32]	; (8002838 <__NVIC_SetPriority+0x50>)
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	3b04      	subs	r3, #4
 8002820:	0112      	lsls	r2, r2, #4
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	440b      	add	r3, r1
 8002826:	761a      	strb	r2, [r3, #24]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000e100 	.word	0xe000e100
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800283c:	b480      	push	{r7}
 800283e:	b089      	sub	sp, #36	; 0x24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f1c3 0307 	rsb	r3, r3, #7
 8002856:	2b04      	cmp	r3, #4
 8002858:	bf28      	it	cs
 800285a:	2304      	movcs	r3, #4
 800285c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3304      	adds	r3, #4
 8002862:	2b06      	cmp	r3, #6
 8002864:	d902      	bls.n	800286c <NVIC_EncodePriority+0x30>
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3b03      	subs	r3, #3
 800286a:	e000      	b.n	800286e <NVIC_EncodePriority+0x32>
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	f04f 32ff 	mov.w	r2, #4294967295
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43da      	mvns	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	401a      	ands	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002884:	f04f 31ff 	mov.w	r1, #4294967295
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	fa01 f303 	lsl.w	r3, r1, r3
 800288e:	43d9      	mvns	r1, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002894:	4313      	orrs	r3, r2
         );
}
 8002896:	4618      	mov	r0, r3
 8002898:	3724      	adds	r7, #36	; 0x24
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff ff4c 	bl	8002748 <__NVIC_SetPriorityGrouping>
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028c6:	f7ff ff63 	bl	8002790 <__NVIC_GetPriorityGrouping>
 80028ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	6978      	ldr	r0, [r7, #20]
 80028d2:	f7ff ffb3 	bl	800283c <NVIC_EncodePriority>
 80028d6:	4602      	mov	r2, r0
 80028d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff82 	bl	80027e8 <__NVIC_SetPriority>
}
 80028e4:	bf00      	nop
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff56 	bl	80027ac <__NVIC_EnableIRQ>
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002910:	f7ff feea 	bl	80026e8 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e06b      	b.n	80029f8 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d008      	beq.n	800293e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e05c      	b.n	80029f8 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0204 	orr.w	r2, r2, #4
 800294c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2205      	movs	r2, #5
 8002952:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002956:	e020      	b.n	800299a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002958:	f7ff fec6 	bl	80026e8 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b05      	cmp	r3, #5
 8002964:	d919      	bls.n	800299a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	f043 0210 	orr.w	r2, r3, #16
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2203      	movs	r2, #3
 8002976:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298a:	2201      	movs	r2, #1
 800298c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e02e      	b.n	80029f8 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0d7      	beq.n	8002958 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0202 	orr.w	r2, r2, #2
 80029b6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2204      	movs	r2, #4
 80029bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80029c8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e2:	2201      	movs	r2, #1
 80029e4:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e019      	b.n	8002a46 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d004      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2220      	movs	r2, #32
 8002a22:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e00e      	b.n	8002a46 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a3e:	f043 0304 	orr.w	r3, r3, #4
 8002a42:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e147      	b.n	8002cf6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fe ff6e 	bl	800195c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0210 	bic.w	r2, r2, #16
 8002a8e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a90:	f7ff fe2a 	bl	80026e8 <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002a96:	e012      	b.n	8002abe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002a98:	f7ff fe26 	bl	80026e8 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b0a      	cmp	r3, #10
 8002aa4:	d90b      	bls.n	8002abe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e11b      	b.n	8002cf6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d0e5      	beq.n	8002a98 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002adc:	f7ff fe04 	bl	80026e8 <HAL_GetTick>
 8002ae0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002ae2:	e012      	b.n	8002b0a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ae4:	f7ff fe00 	bl	80026e8 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b0a      	cmp	r3, #10
 8002af0:	d90b      	bls.n	8002b0a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2203      	movs	r2, #3
 8002b02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0f5      	b.n	8002cf6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0e5      	beq.n	8002ae4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0202 	orr.w	r2, r2, #2
 8002b26:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a74      	ldr	r2, [pc, #464]	; (8002d00 <HAL_FDCAN_Init+0x2ac>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d103      	bne.n	8002b3a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002b32:	4a74      	ldr	r2, [pc, #464]	; (8002d04 <HAL_FDCAN_Init+0x2b0>)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	7c1b      	ldrb	r3, [r3, #16]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d108      	bne.n	8002b54 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699a      	ldr	r2, [r3, #24]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b50:	619a      	str	r2, [r3, #24]
 8002b52:	e007      	b.n	8002b64 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b62:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7c5b      	ldrb	r3, [r3, #17]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d108      	bne.n	8002b7e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b7a:	619a      	str	r2, [r3, #24]
 8002b7c:	e007      	b.n	8002b8e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699a      	ldr	r2, [r3, #24]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b8c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	7c9b      	ldrb	r3, [r3, #18]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d108      	bne.n	8002ba8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ba4:	619a      	str	r2, [r3, #24]
 8002ba6:	e007      	b.n	8002bb8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699a      	ldr	r2, [r3, #24]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bb6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699a      	ldr	r2, [r3, #24]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002bdc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0210 	bic.w	r2, r2, #16
 8002bec:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d108      	bne.n	8002c08 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699a      	ldr	r2, [r3, #24]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0204 	orr.w	r2, r2, #4
 8002c04:	619a      	str	r2, [r3, #24]
 8002c06:	e02c      	b.n	8002c62 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d028      	beq.n	8002c62 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d01c      	beq.n	8002c52 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c26:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0210 	orr.w	r2, r2, #16
 8002c36:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d110      	bne.n	8002c62 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0220 	orr.w	r2, r2, #32
 8002c4e:	619a      	str	r2, [r3, #24]
 8002c50:	e007      	b.n	8002c62 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0220 	orr.w	r2, r2, #32
 8002c60:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c72:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002c7a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002c8a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002c8c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c96:	d115      	bne.n	8002cc4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ca6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	3b01      	subs	r3, #1
 8002cae:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002cb0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002cc0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002cc2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fcc2 	bl	8003664 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	4000a400 	.word	0x4000a400
 8002d04:	4000a500 	.word	0x4000a500

08002d08 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d18:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d002      	beq.n	8002d26 <HAL_FDCAN_ConfigFilter+0x1e>
 8002d20:	7dfb      	ldrb	r3, [r7, #23]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d13d      	bne.n	8002da2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d119      	bne.n	8002d62 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002d3a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002d42:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e01d      	b.n	8002d9e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	075a      	lsls	r2, r3, #29
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	079a      	lsls	r2, r3, #30
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3304      	adds	r3, #4
 8002d96:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e006      	b.n	8002db0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da6:	f043 0202 	orr.w	r2, r3, #2
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
  }
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d116      	bne.n	8002e04 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dde:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	011a      	lsls	r2, r3, #4
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	431a      	orrs	r2, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	431a      	orrs	r2, r3
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	e006      	b.n	8002e12 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e08:	f043 0204 	orr.w	r2, r3, #4
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
  }
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d108      	bne.n	8002e48 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	0219      	lsls	r1, r3, #8
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e006      	b.n	8002e56 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4c:	f043 0204 	orr.w	r2, r3, #4
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
  }
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d109      	bne.n	8002e8a <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e84:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e006      	b.n	8002e98 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8e:	f043 0204 	orr.w	r2, r3, #4
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
  }
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d110      	bne.n	8002eda <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e006      	b.n	8002ee8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ede:	f043 0204 	orr.w	r2, r3, #4
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
  }
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b08b      	sub	sp, #44	; 0x2c
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f0c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002f0e:	7efb      	ldrb	r3, [r7, #27]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	f040 80e8 	bne.w	80030e6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b40      	cmp	r3, #64	; 0x40
 8002f1a:	d137      	bne.n	8002f8c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d107      	bne.n	8002f3c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0db      	b.n	80030f4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	0e1b      	lsrs	r3, r3, #24
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d10a      	bne.n	8002f64 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f56:	0a5b      	lsrs	r3, r3, #9
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002f60:	2301      	movs	r3, #1
 8002f62:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6c:	0a1b      	lsrs	r3, r3, #8
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	4413      	add	r3, r2
 8002f76:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	440b      	add	r3, r1
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8a:	e036      	b.n	8002ffa <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d107      	bne.n	8002fac <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0a3      	b.n	80030f4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fb4:	0e1b      	lsrs	r3, r3, #24
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc6:	0a1b      	lsrs	r3, r3, #8
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d107      	bne.n	800301e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	0c9b      	lsrs	r3, r3, #18
 8003014:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e005      	b.n	800302a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	3304      	adds	r3, #4
 8003046:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	b29a      	uxth	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	0c1b      	lsrs	r3, r3, #16
 8003058:	f003 020f 	and.w	r2, r3, #15
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	0e1b      	lsrs	r3, r3, #24
 800307e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	0fda      	lsrs	r2, r3, #31
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	3304      	adds	r3, #4
 8003094:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800309a:	2300      	movs	r3, #0
 800309c:	623b      	str	r3, [r7, #32]
 800309e:	e00a      	b.n	80030b6 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	441a      	add	r2, r3
 80030a6:	6839      	ldr	r1, [r7, #0]
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	440b      	add	r3, r1
 80030ac:	7812      	ldrb	r2, [r2, #0]
 80030ae:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	3301      	adds	r3, #1
 80030b4:	623b      	str	r3, [r7, #32]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	4a11      	ldr	r2, [pc, #68]	; (8003100 <HAL_FDCAN_GetRxMessage+0x20c>)
 80030bc:	5cd3      	ldrb	r3, [r2, r3]
 80030be:	461a      	mov	r2, r3
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d3ec      	bcc.n	80030a0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b40      	cmp	r3, #64	; 0x40
 80030ca:	d105      	bne.n	80030d8 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80030d6:	e004      	b.n	80030e2 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	e006      	b.n	80030f4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ea:	f043 0208 	orr.w	r2, r3, #8
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
  }
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	372c      	adds	r7, #44	; 0x2c
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	0800ed98 	.word	0x0800ed98

08003104 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 0207 	and.w	r2, r3, #7
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	f003 0207 	and.w	r2, r3, #7
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0218 	and.w	r2, r3, #24
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	f003 0201 	and.w	r2, r3, #1
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	f003 0201 	and.w	r2, r3, #1
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	09db      	lsrs	r3, r3, #7
 8003152:	f003 0201 	and.w	r2, r3, #1
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	0adb      	lsrs	r3, r3, #11
 800315e:	f003 0201 	and.w	r2, r3, #1
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	0b1b      	lsrs	r3, r3, #12
 800316a:	f003 0201 	and.w	r2, r3, #1
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	0b5b      	lsrs	r3, r3, #13
 8003176:	f003 0201 	and.w	r2, r3, #1
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	0b9b      	lsrs	r3, r3, #14
 8003182:	f003 0201 	and.w	r2, r3, #1
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	625a      	str	r2, [r3, #36]	; 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	629a      	str	r2, [r3, #40]	; 0x28

  /* Return function status */
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031b6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d003      	beq.n	80031c6 <HAL_FDCAN_ActivateNotification+0x22>
 80031be:	7dfb      	ldrb	r3, [r7, #23]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	f040 80c8 	bne.w	8003356 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d004      	beq.n	80031e2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d03b      	beq.n	800325a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d004      	beq.n	80031f6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d031      	beq.n	800325a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d004      	beq.n	800320a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b00      	cmp	r3, #0
 8003208:	d027      	beq.n	800325a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003210:	2b00      	cmp	r3, #0
 8003212:	d004      	beq.n	800321e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d01d      	beq.n	800325a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003224:	2b00      	cmp	r3, #0
 8003226:	d004      	beq.n	8003232 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	d013      	beq.n	800325a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003238:	2b00      	cmp	r3, #0
 800323a:	d004      	beq.n	8003246 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00c      	beq.n	800326a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d107      	bne.n	800326a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0201 	orr.w	r2, r2, #1
 8003268:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	2b00      	cmp	r3, #0
 8003272:	d004      	beq.n	800327e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d13b      	bne.n	80032f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003284:	2b00      	cmp	r3, #0
 8003286:	d004      	beq.n	8003292 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d131      	bne.n	80032f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003298:	2b00      	cmp	r3, #0
 800329a:	d004      	beq.n	80032a6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d127      	bne.n	80032f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d004      	beq.n	80032ba <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d11d      	bne.n	80032f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d004      	beq.n	80032ce <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d113      	bne.n	80032f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d004      	beq.n	80032e2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00c      	beq.n	8003306 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0202 	orr.w	r2, r2, #2
 8003304:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	2b00      	cmp	r3, #0
 800330e:	d009      	beq.n	8003324 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	430a      	orrs	r2, r1
 8003320:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d009      	beq.n	8003342 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	430a      	orrs	r2, r1
 800333e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	430a      	orrs	r2, r1
 8003350:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e006      	b.n	8003364 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335a:	f043 0202 	orr.w	r2, r3, #2
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
  }
}
 8003364:	4618      	mov	r0, r3
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08c      	sub	sp, #48	; 0x30
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800338c:	4013      	ands	r3, r2
 800338e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033a4:	4013      	ands	r3, r2
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033bc:	4013      	ands	r3, r2
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80033ca:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	6a3a      	ldr	r2, [r7, #32]
 80033d4:	4013      	ands	r3, r2
 80033d6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033e2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fe:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d006      	beq.n	8003422 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2240      	movs	r2, #64	; 0x40
 800341a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f916 	bl	800364e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d019      	beq.n	8003460 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d014      	beq.n	8003460 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800343e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4013      	ands	r3, r2
 800344c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003456:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003458:	6939      	ldr	r1, [r7, #16]
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f8d8 	bl	8003610 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800346c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800346e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f8a2 	bl	80035ba <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003482:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe fa40 	bl	800190c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	2b00      	cmp	r3, #0
 8003490:	d007      	beq.n	80034a2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800349a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f897 	bl	80035d0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00c      	beq.n	80034c6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034be:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f890 	bl	80035e6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d018      	beq.n	8003502 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d013      	beq.n	8003502 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80034e2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4013      	ands	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2280      	movs	r2, #128	; 0x80
 80034f8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80034fa:	68f9      	ldr	r1, [r7, #12]
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f87c 	bl	80035fa <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00c      	beq.n	8003526 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800351e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f880 	bl	8003626 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00c      	beq.n	800354a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d007      	beq.n	800354a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003542:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f878 	bl	800363a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00f      	beq.n	8003574 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003566:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d007      	beq.n	800358a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003582:	69f9      	ldr	r1, [r7, #28]
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7fe f979 	bl	800187c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d009      	beq.n	80035a4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6a3a      	ldr	r2, [r7, #32]
 8003596:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7fe f975 	bl	800189c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80035b2:	bf00      	nop
 80035b4:	3730      	adds	r7, #48	; 0x30
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800366c:	4b2c      	ldr	r3, [pc, #176]	; (8003720 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800366e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a2b      	ldr	r2, [pc, #172]	; (8003724 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d103      	bne.n	8003682 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003680:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003690:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003698:	041a      	lsls	r2, r3, #16
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b6:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036be:	061a      	lsls	r2, r3, #24
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	e005      	b.n	8003704 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	3304      	adds	r3, #4
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	429a      	cmp	r2, r3
 800370e:	d3f3      	bcc.n	80036f8 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	4000ac00 	.word	0x4000ac00
 8003724:	4000a800 	.word	0x4000a800

08003728 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data to be programmed
  *         This parameter shall be 32-bit aligned
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003734:	4b32      	ldr	r3, [pc, #200]	; (8003800 <HAL_FLASH_Program+0xd8>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_FLASH_Program+0x18>
 800373c:	2302      	movs	r3, #2
 800373e:	e05a      	b.n	80037f6 <HAL_FLASH_Program+0xce>
 8003740:	4b2f      	ldr	r3, [pc, #188]	; (8003800 <HAL_FLASH_Program+0xd8>)
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003746:	4b2e      	ldr	r3, [pc, #184]	; (8003800 <HAL_FLASH_Program+0xd8>)
 8003748:	2200      	movs	r2, #0
 800374a:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800374c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003750:	f000 f8a4 	bl	800389c <FLASH_WaitForLastOperation>
 8003754:	4603      	mov	r3, r0
 8003756:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 8003758:	7ffb      	ldrb	r3, [r7, #31]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d147      	bne.n	80037ee <HAL_FLASH_Program+0xc6>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 800375e:	4a28      	ldr	r2, [pc, #160]	; (8003800 <HAL_FLASH_Program+0xd8>)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8003764:	4b27      	ldr	r3, [pc, #156]	; (8003804 <HAL_FLASH_Program+0xdc>)
 8003766:	61bb      	str	r3, [r7, #24]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800376e:	2b02      	cmp	r3, #2
 8003770:	d104      	bne.n	800377c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_USER_MEM_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(FlashAddress, DataAddress);
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	68b8      	ldr	r0, [r7, #8]
 8003776:	f000 f8df 	bl	8003938 <FLASH_Program_QuadWord>
 800377a:	e01b      	b.n	80037b4 <HAL_FLASH_Program+0x8c>
    }
#if defined (FLASH_SR_OBKERR)
    else if ((TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK) || (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4a22      	ldr	r2, [pc, #136]	; (8003808 <HAL_FLASH_Program+0xe0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <HAL_FLASH_Program+0x64>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4a21      	ldr	r2, [pc, #132]	; (800380c <HAL_FLASH_Program+0xe4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d104      	bne.n	8003796 <HAL_FLASH_Program+0x6e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OBK_ADDRESS(FlashAddress));

      /* Program a quad-word (128-bit) of OBK at a specified address */
      FLASH_Program_QuadWord_OBK(FlashAddress, DataAddress);
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	68b8      	ldr	r0, [r7, #8]
 8003790:	f000 f90e 	bl	80039b0 <FLASH_Program_QuadWord_OBK>
 8003794:	e00e      	b.n	80037b4 <HAL_FLASH_Program+0x8c>
    }
#endif /* FLASH_SR_OBKERR */
#if defined (FLASH_EDATAR_EDATA_EN)
    else if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_HALFWORD_EDATA)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800379c:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <HAL_FLASH_Program+0xe8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d104      	bne.n	80037ac <HAL_FLASH_Program+0x84>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_EDATA_ADDRESS(FlashAddress));

      /* Program a Flash high-cycle data half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	68b8      	ldr	r0, [r7, #8]
 80037a6:	f000 f94f 	bl	8003a48 <FLASH_Program_HalfWord>
 80037aa:	e003      	b.n	80037b4 <HAL_FLASH_Program+0x8c>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_OTP_ADDRESS(FlashAddress));

      /* Program an OTP half-word at a specified address */
      FLASH_Program_HalfWord(FlashAddress, DataAddress);
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	68b8      	ldr	r0, [r7, #8]
 80037b0:	f000 f94a 	bl	8003a48 <FLASH_Program_HalfWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80037b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037b8:	f000 f870 	bl	800389c <FLASH_WaitForLastOperation>
 80037bc:	4603      	mov	r3, r0
 80037be:	77fb      	strb	r3, [r7, #31]

#if defined (FLASH_SR_OBKERR)
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK | FLASH_OBK | FLASH_OTP | FLASH_OBKCFGR_ALT_SECT)));
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 4330 	bic.w	r3, r3, #2952790016	; 0xb0000000
 80037ca:	f023 0304 	bic.w	r3, r3, #4
 80037ce:	43db      	mvns	r3, r3
 80037d0:	401a      	ands	r2, r3
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	601a      	str	r2, [r3, #0]

    /* Clear alternate sector bit */
    if (TypeProgram == FLASH_TYPEPROGRAM_QUADWORD_OBK_ALT)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4a0c      	ldr	r2, [pc, #48]	; (800380c <HAL_FLASH_Program+0xe4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d107      	bne.n	80037ee <HAL_FLASH_Program+0xc6>
    {
      reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 80037de:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <HAL_FLASH_Program+0xec>)
 80037e0:	617b      	str	r3, [r7, #20]
      CLEAR_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f023 0204 	bic.w	r2, r3, #4
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	601a      	str	r2, [r3, #0]
    /* If the program operation is completed, disable the PG */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK |  FLASH_OTP)));
#endif /* FLASH_SR_OBKERR */
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80037ee:	4b04      	ldr	r3, [pc, #16]	; (8003800 <HAL_FLASH_Program+0xd8>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80037f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000034 	.word	0x20000034
 8003804:	40022028 	.word	0x40022028
 8003808:	10000002 	.word	0x10000002
 800380c:	10000006 	.word	0x10000006
 8003810:	40000002 	.word	0x40000002
 8003814:	40022040 	.word	0x40022040

08003818 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8003822:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <HAL_FLASH_Unlock+0x40>)
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 800382e:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <HAL_FLASH_Unlock+0x40>)
 8003830:	4a0a      	ldr	r2, [pc, #40]	; (800385c <HAL_FLASH_Unlock+0x44>)
 8003832:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8003834:	4b08      	ldr	r3, [pc, #32]	; (8003858 <HAL_FLASH_Unlock+0x40>)
 8003836:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <HAL_FLASH_Unlock+0x48>)
 8003838:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <HAL_FLASH_Unlock+0x40>)
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800384a:	79fb      	ldrb	r3, [r7, #7]
}
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	40022000 	.word	0x40022000
 800385c:	45670123 	.word	0x45670123
 8003860:	cdef89ab 	.word	0xcdef89ab

08003864 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_FLASH_Lock+0x34>)
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	4a09      	ldr	r2, [pc, #36]	; (8003898 <HAL_FLASH_Lock+0x34>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6293      	str	r3, [r2, #40]	; 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 800387a:	4b07      	ldr	r3, [pc, #28]	; (8003898 <HAL_FLASH_Lock+0x34>)
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800388a:	79fb      	ldrb	r3, [r7, #7]
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	40022000 	.word	0x40022000

0800389c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]

  uint32_t errorflag;
  const __IO uint32_t *reg_sr;
  __IO uint32_t *reg_ccr;

  uint32_t tickstart = HAL_GetTick();
 80038a4:	f7fe ff20 	bl	80026e8 <HAL_GetTick>
 80038a8:	6178      	str	r0, [r7, #20]

  /* Access to SR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 80038aa:	4b20      	ldr	r3, [pc, #128]	; (800392c <FLASH_WaitForLastOperation+0x90>)
 80038ac:	613b      	str	r3, [r7, #16]
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Wait on BSY, WBNE and DBNE flags to be reset */
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 80038ae:	e010      	b.n	80038d2 <FLASH_WaitForLastOperation+0x36>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b6:	d00c      	beq.n	80038d2 <FLASH_WaitForLastOperation+0x36>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038b8:	f7fe ff16 	bl	80026e8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d302      	bcc.n	80038ce <FLASH_WaitForLastOperation+0x32>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <FLASH_WaitForLastOperation+0x36>
      {
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e027      	b.n	8003922 <FLASH_WaitForLastOperation+0x86>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WBNE | FLASH_FLAG_DBNE)) != 0U)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 030b 	and.w	r3, r3, #11
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e8      	bne.n	80038b0 <FLASH_WaitForLastOperation+0x14>
    }
  }

  /* Access to CCR register depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_ccr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCCR) : &(FLASH_NS->NSCCR);
 80038de:	4b14      	ldr	r3, [pc, #80]	; (8003930 <FLASH_WaitForLastOperation+0x94>)
 80038e0:	60fb      	str	r3, [r7, #12]
#else
  reg_ccr = &(FLASH_NS->NSCCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Check FLASH operation error flags */
  errorflag = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 037e 	and.w	r3, r3, #16646144	; 0xfe0000
 80038ea:	60bb      	str	r3, [r7, #8]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  errorflag |= (FLASH->NSSR & FLASH_FLAG_OPTCHANGEERR);
#endif /* __ARM_FEATURE_CMSE */

  /* In case of error reported in Flash SR or OPTSR registers */
  if (errorflag != 0U)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80038f2:	4b10      	ldr	r3, [pc, #64]	; (8003934 <FLASH_WaitForLastOperation+0x98>)
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	4a0e      	ldr	r2, [pc, #56]	; (8003934 <FLASH_WaitForLastOperation+0x98>)
 80038fc:	6053      	str	r3, [r2, #4]

    /* Clear error flags */
    (*reg_ccr) = errorflag & FLASH_FLAG_SR_ERRORS;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f403 027e 	and.w	r2, r3, #16646144	; 0xfe0000
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSCCR = FLASH_FLAG_OPTCHANGEERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e00a      	b.n	8003922 <FLASH_WaitForLastOperation+0x86>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <FLASH_WaitForLastOperation+0x84>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_ccr) = FLASH_FLAG_EOP;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800391e:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40022020 	.word	0x40022020
 8003930:	40022030 	.word	0x40022030
 8003934:	20000034 	.word	0x20000034

08003938 <FLASH_Program_QuadWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8003938:	b480      	push	{r7}
 800393a:	b08b      	sub	sp, #44	; 0x2c
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8003942:	2304      	movs	r3, #4
 8003944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8003950:	4b16      	ldr	r3, [pc, #88]	; (80039ac <FLASH_Program_QuadWord+0x74>)
 8003952:	61bb      	str	r3, [r7, #24]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f043 0202 	orr.w	r2, r3, #2
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003960:	f3ef 8310 	mrs	r3, PRIMASK
 8003964:	613b      	str	r3, [r7, #16]
  return(result);
 8003966:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003968:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800396a:	b672      	cpsid	i
}
 800396c:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	3304      	adds	r3, #4
 800397a:	623b      	str	r3, [r7, #32]
    src_addr++;
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	3304      	adds	r3, #4
 8003980:	61fb      	str	r3, [r7, #28]
    index--;
 8003982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003986:	3b01      	subs	r3, #1
 8003988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 800398c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ec      	bne.n	800396e <FLASH_Program_QuadWord+0x36>
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f383 8810 	msr	PRIMASK, r3
}
 800399e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80039a0:	bf00      	nop
 80039a2:	372c      	adds	r7, #44	; 0x2c
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	40022028 	.word	0x40022028

080039b0 <FLASH_Program_QuadWord_OBK>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord_OBK(uint32_t FlashAddress, uint32_t DataAddress)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b08b      	sub	sp, #44	; 0x2c
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 80039ba:	2304      	movs	r3, #4
 80039bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t *dest_addr = (uint32_t *)FlashAddress;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	61fb      	str	r3, [r7, #28]
  uint32_t primask_bit;
  __IO uint32_t *reg_cr;
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80039c8:	4b1c      	ldr	r3, [pc, #112]	; (8003a3c <FLASH_Program_QuadWord_OBK+0x8c>)
 80039ca:	61bb      	str	r3, [r7, #24]
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 80039cc:	4b1c      	ldr	r3, [pc, #112]	; (8003a40 <FLASH_Program_QuadWord_OBK+0x90>)
 80039ce:	617b      	str	r3, [r7, #20]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f043 0202 	orr.w	r2, r3, #2
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	601a      	str	r2, [r3, #0]

  /* Set ALT_SECT bit */
  SET_BIT((*reg_obkcfgr), pFlash.ProcedureOnGoing & FLASH_OBKCFGR_ALT_SECT);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4b18      	ldr	r3, [pc, #96]	; (8003a44 <FLASH_Program_QuadWord_OBK+0x94>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	431a      	orrs	r2, r3
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039ee:	f3ef 8310 	mrs	r3, PRIMASK
 80039f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80039f4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80039f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80039f8:	b672      	cpsid	i
}
 80039fa:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	3304      	adds	r3, #4
 8003a08:	623b      	str	r3, [r7, #32]
    src_addr++;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	61fb      	str	r3, [r7, #28]
    index--;
 8003a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a14:	3b01      	subs	r3, #1
 8003a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  } while (index != 0U);
 8003a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1ec      	bne.n	80039fc <FLASH_Program_QuadWord_OBK+0x4c>
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f383 8810 	msr	PRIMASK, r3
}
 8003a2c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003a2e:	bf00      	nop
 8003a30:	372c      	adds	r7, #44	; 0x2c
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40022028 	.word	0x40022028
 8003a40:	40022040 	.word	0x40022040
 8003a44:	20000034 	.word	0x20000034

08003a48 <FLASH_Program_HalfWord>:
  * @param  FlashAddress specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t FlashAddress, uint32_t DataAddress)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  __IO uint32_t *reg_cr;

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <FLASH_Program_HalfWord+0x30>)
 8003a54:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Set HalfWord_PG bit */
  SET_BIT((*reg_cr), FLASH_CR_PG);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f043 0202 	orr.w	r2, r3, #2
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	601a      	str	r2, [r3, #0]

  /* Program a halfword word (16 bits) */
  *(__IO uint16_t *)FlashAddress = *(__IO uint16_t *)DataAddress;
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8812      	ldrh	r2, [r2, #0]
 8003a68:	b292      	uxth	r2, r2
 8003a6a:	801a      	strh	r2, [r3, #0]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	40022028 	.word	0x40022028

08003a7c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a86:	4b3a      	ldr	r3, [pc, #232]	; (8003b70 <HAL_FLASHEx_Erase+0xf4>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_FLASHEx_Erase+0x16>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e06a      	b.n	8003b68 <HAL_FLASHEx_Erase+0xec>
 8003a92:	4b37      	ldr	r3, [pc, #220]	; (8003b70 <HAL_FLASHEx_Erase+0xf4>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a98:	4b35      	ldr	r3, [pc, #212]	; (8003b70 <HAL_FLASHEx_Erase+0xf4>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003a9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003aa2:	f7ff fefb 	bl	800389c <FLASH_WaitForLastOperation>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d157      	bne.n	8003b60 <HAL_FLASHEx_Erase+0xe4>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a2e      	ldr	r2, [pc, #184]	; (8003b70 <HAL_FLASHEx_Erase+0xf4>)
 8003ab6:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8003ab8:	4b2e      	ldr	r3, [pc, #184]	; (8003b74 <HAL_FLASHEx_Erase+0xf8>)
 8003aba:	60fb      	str	r3, [r7, #12]
#else
    reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ac4:	f248 0208 	movw	r2, #32776	; 0x8008
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d10b      	bne.n	8003ae4 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 f853 	bl	8003b7c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003ad6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ada:	f7ff fedf 	bl	800389c <FLASH_WaitForLastOperation>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	75fb      	strb	r3, [r7, #23]
 8003ae2:	e033      	b.n	8003b4c <HAL_FLASHEx_Erase+0xd0>
    }
#if defined (FLASH_SR_OBKERR)
    else if (pEraseInit->TypeErase == FLASH_TYPEERASE_OBK_ALT)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a23      	ldr	r2, [pc, #140]	; (8003b78 <HAL_FLASHEx_Erase+0xfc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d108      	bne.n	8003b00 <HAL_FLASHEx_Erase+0x84>
    {
      /* OBK erase to be done */
      FLASH_OBKErase();
 8003aee:	f000 f8b5 	bl	8003c5c <FLASH_OBKErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003af2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003af6:	f7ff fed1 	bl	800389c <FLASH_WaitForLastOperation>
 8003afa:	4603      	mov	r3, r0
 8003afc:	75fb      	strb	r3, [r7, #23]
 8003afe:	e025      	b.n	8003b4c <HAL_FLASHEx_Erase+0xd0>
    }
#endif /* FLASH_SR_OBKERR */
    else
    {
      /* Initialization of SectorError variable */
      *SectorError = 0xFFFFFFFFU;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	f04f 32ff 	mov.w	r2, #4294967295
 8003b06:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	e015      	b.n	8003b3c <HAL_FLASHEx_Erase+0xc0>
           sector_index++)
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4619      	mov	r1, r3
 8003b16:	6938      	ldr	r0, [r7, #16]
 8003b18:	f000 f868 	bl	8003bec <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b20:	f7ff febc 	bl	800389c <FLASH_WaitForLastOperation>
 8003b24:	4603      	mov	r3, r0
 8003b26:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_FLASHEx_Erase+0xba>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	601a      	str	r2, [r3, #0]
          break;
 8003b34:	e00a      	b.n	8003b4c <HAL_FLASHEx_Erase+0xd0>
           sector_index++)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	613b      	str	r3, [r7, #16]
      for (sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); \
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	4413      	add	r3, r2
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d3e1      	bcc.n	8003b10 <HAL_FLASHEx_Erase+0x94>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003b60:	4b03      	ldr	r3, [pc, #12]	; (8003b70 <HAL_FLASHEx_Erase+0xf4>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]

  return status;
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000034 	.word	0x20000034
 8003b74:	40022028 	.word	0x40022028
 8003b78:	80000008 	.word	0x80000008

08003b7c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8003b84:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <FLASH_MassErase+0x6c>)
 8003b86:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  /* Flash Mass Erase */
  if ((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d108      	bne.n	8003ba4 <FLASH_MassErase+0x28>
  {
    /* Set Mass Erase Bit */
    SET_BIT((*reg_cr), FLASH_CR_MER | FLASH_CR_START);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b9a:	f043 0320 	orr.w	r3, r3, #32
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	6013      	str	r3, [r2, #0]
    {
      /* Erase Bank2 */
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
    }
  }
}
 8003ba2:	e01b      	b.n	8003bdc <FLASH_MassErase+0x60>
    if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <FLASH_MassErase+0x46>
      MODIFY_REG((*reg_cr), (FLASH_CR_BKSEL | FLASH_CR_BER | FLASH_CR_START), (FLASH_CR_BER | FLASH_CR_START));
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bb6:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003bba:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	601a      	str	r2, [r3, #0]
    if ((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <FLASH_MassErase+0x60>
      SET_BIT((*reg_cr), (FLASH_CR_BER | FLASH_CR_BKSEL | FLASH_CR_START));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bd4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	6013      	str	r3, [r2, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	40022028 	.word	0x40022028

08003bec <FLASH_Erase_Sector>:
  *            @arg FLASH_BANK_1: Sector in bank 1 to be erased
  *            @arg FLASH_BANK_2: Sector in bank 2 to be erased
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
#if defined (FLASH_OPTSR2_TZEN)
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8003bf6:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <FLASH_Erase_Sector+0x6c>)
 8003bf8:	60fb      	str	r3, [r7, #12]
#else
  reg_cr = &(FLASH_NS->NSCR);
#endif /* FLASH_OPTSR2_TZEN */

  if ((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d011      	beq.n	8003c28 <FLASH_Erase_Sector+0x3c>
  {
    /* Reset Sector Number for Bank1 */
    (*reg_cr) &= ~(FLASH_CR_SNB | FLASH_CR_BKSEL);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c0c:	f423 53fe 	bic.w	r3, r3, #8128	; 0x1fc0
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	6013      	str	r3, [r2, #0]

    (*reg_cr) |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	019b      	lsls	r3, r3, #6
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f043 0224 	orr.w	r2, r3, #36	; 0x24
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	601a      	str	r2, [r3, #0]
    /* Reset Sector Number for Bank2 */
    (*reg_cr) &= ~(FLASH_CR_SNB);

    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
  }
}
 8003c26:	e010      	b.n	8003c4a <FLASH_Erase_Sector+0x5e>
    (*reg_cr) &= ~(FLASH_CR_SNB);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f423 52fe 	bic.w	r2, r3, #8128	; 0x1fc0
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	601a      	str	r2, [r3, #0]
    (*reg_cr) |= (FLASH_CR_SER | FLASH_CR_BKSEL | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	019b      	lsls	r3, r3, #6
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c42:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	6013      	str	r3, [r2, #0]
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40022028 	.word	0x40022028

08003c5c <FLASH_OBKErase>:
/**
  * @brief  Erase of FLASH OBK
  * @retval None
  */
static void FLASH_OBKErase()
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
  __IO uint32_t *reg_obkcfgr;

  /* Access to SECOBKCFGR or NSOBKCFGR registers depends on operation type */
  reg_obkcfgr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECOBKCFGR) : &(FLASH_NS->NSOBKCFGR);
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <FLASH_OBKErase+0x24>)
 8003c64:	607b      	str	r3, [r7, #4]

  /* Set OBK Erase Bit */
  SET_BIT((*reg_obkcfgr), FLASH_OBKCFGR_ALT_SECT_ERASE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f043 0208 	orr.w	r2, r3, #8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	601a      	str	r2, [r3, #0]
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40022040 	.word	0x40022040

08003c84 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003c92:	e136      	b.n	8003f02 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	2101      	movs	r1, #1
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8128 	beq.w	8003efc <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d003      	beq.n	8003cbc <HAL_GPIO_Init+0x38>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b12      	cmp	r3, #18
 8003cba:	d125      	bne.n	8003d08 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	08da      	lsrs	r2, r3, #3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3208      	adds	r2, #8
 8003cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	220f      	movs	r2, #15
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f003 020f 	and.w	r2, r3, #15
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	08da      	lsrs	r2, r3, #3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3208      	adds	r2, #8
 8003d02:	6979      	ldr	r1, [r7, #20]
 8003d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	2203      	movs	r2, #3
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 0203 	and.w	r2, r3, #3
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d00b      	beq.n	8003d5c <HAL_GPIO_Init+0xd8>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d007      	beq.n	8003d5c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d50:	2b11      	cmp	r3, #17
 8003d52:	d003      	beq.n	8003d5c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b12      	cmp	r3, #18
 8003d5a:	d130      	bne.n	8003dbe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	2203      	movs	r2, #3
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4013      	ands	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d92:	2201      	movs	r2, #1
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	f003 0201 	and.w	r2, r3, #1
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d017      	beq.n	8003df6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d07c      	beq.n	8003efc <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003e02:	4a47      	ldr	r2, [pc, #284]	; (8003f20 <HAL_GPIO_Init+0x29c>)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	3318      	adds	r3, #24
 8003e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	220f      	movs	r2, #15
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4013      	ands	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0a9a      	lsrs	r2, r3, #10
 8003e2a:	4b3e      	ldr	r3, [pc, #248]	; (8003f24 <HAL_GPIO_Init+0x2a0>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	f002 0203 	and.w	r2, r2, #3
 8003e34:	00d2      	lsls	r2, r2, #3
 8003e36:	4093      	lsls	r3, r2
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003e3e:	4938      	ldr	r1, [pc, #224]	; (8003f20 <HAL_GPIO_Init+0x29c>)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	3318      	adds	r3, #24
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003e4c:	4b34      	ldr	r3, [pc, #208]	; (8003f20 <HAL_GPIO_Init+0x29c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003e70:	4a2b      	ldr	r2, [pc, #172]	; (8003f20 <HAL_GPIO_Init+0x29c>)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003e76:	4b2a      	ldr	r3, [pc, #168]	; (8003f20 <HAL_GPIO_Init+0x29c>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4013      	ands	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003e9a:	4a21      	ldr	r2, [pc, #132]	; (8003f20 <HAL_GPIO_Init+0x29c>)
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003ea0:	4b1f      	ldr	r3, [pc, #124]	; (8003f20 <HAL_GPIO_Init+0x29c>)
 8003ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003ec6:	4a16      	ldr	r2, [pc, #88]	; (8003f20 <HAL_GPIO_Init+0x29c>)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8003ece:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <HAL_GPIO_Init+0x29c>)
 8003ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4013      	ands	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003ef4:	4a0a      	ldr	r2, [pc, #40]	; (8003f20 <HAL_GPIO_Init+0x29c>)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	3301      	adds	r3, #1
 8003f00:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f47f aec1 	bne.w	8003c94 <HAL_GPIO_Init+0x10>
  }
}
 8003f12:	bf00      	nop
 8003f14:	bf00      	nop
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	44022000 	.word	0x44022000
 8003f24:	002f7f7f 	.word	0x002f7f7f

08003f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	807b      	strh	r3, [r7, #2]
 8003f34:	4613      	mov	r3, r2
 8003f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f38:	787b      	ldrb	r3, [r7, #1]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f3e:	887a      	ldrh	r2, [r7, #2]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f44:	e002      	b.n	8003f4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f46:	887a      	ldrh	r2, [r7, #2]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f6a:	887a      	ldrh	r2, [r7, #2]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	041a      	lsls	r2, r3, #16
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	43d9      	mvns	r1, r3
 8003f76:	887b      	ldrh	r3, [r7, #2]
 8003f78:	400b      	ands	r3, r1
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	619a      	str	r2, [r3, #24]
}
 8003f80:	bf00      	nop
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003f96:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d006      	beq.n	8003fb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003fa2:	4a0c      	ldr	r2, [pc, #48]	; (8003fd4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003fa4:	88fb      	ldrh	r3, [r7, #6]
 8003fa6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fc fb40 	bl	8000630 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003fb0:	4b08      	ldr	r3, [pc, #32]	; (8003fd4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d006      	beq.n	8003fca <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003fbc:	4a05      	ldr	r2, [pc, #20]	; (8003fd4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 f807 	bl	8003fd8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	44022000 	.word	0x44022000

08003fd8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_ICACHE_Enable+0x1c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a04      	ldr	r2, [pc, #16]	; (800400c <HAL_ICACHE_Enable+0x1c>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40030400 	.word	0x40030400

08004010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d102      	bne.n	8004024 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f000 bc28 	b.w	8004874 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004024:	4b94      	ldr	r3, [pc, #592]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	f003 0318 	and.w	r3, r3, #24
 800402c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800402e:	4b92      	ldr	r3, [pc, #584]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b00      	cmp	r3, #0
 8004042:	d05b      	beq.n	80040fc <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	2b08      	cmp	r3, #8
 8004048:	d005      	beq.n	8004056 <HAL_RCC_OscConfig+0x46>
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	2b18      	cmp	r3, #24
 800404e:	d114      	bne.n	800407a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d111      	bne.n	800407a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f000 bc08 	b.w	8004874 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004064:	4b84      	ldr	r3, [pc, #528]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	041b      	lsls	r3, r3, #16
 8004072:	4981      	ldr	r1, [pc, #516]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004074:	4313      	orrs	r3, r2
 8004076:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004078:	e040      	b.n	80040fc <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d023      	beq.n	80040ca <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004082:	4b7d      	ldr	r3, [pc, #500]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a7c      	ldr	r2, [pc, #496]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7fe fb2b 	bl	80026e8 <HAL_GetTick>
 8004092:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004096:	f7fe fb27 	bl	80026e8 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e3e5      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80040a8:	4b73      	ldr	r3, [pc, #460]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80040b4:	4b70      	ldr	r3, [pc, #448]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	041b      	lsls	r3, r3, #16
 80040c2:	496d      	ldr	r1, [pc, #436]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	618b      	str	r3, [r1, #24]
 80040c8:	e018      	b.n	80040fc <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80040ca:	4b6b      	ldr	r3, [pc, #428]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a6a      	ldr	r2, [pc, #424]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80040d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fe fb07 	bl	80026e8 <HAL_GetTick>
 80040da:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80040de:	f7fe fb03 	bl	80026e8 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e3c1      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80040f0:	4b61      	ldr	r3, [pc, #388]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f0      	bne.n	80040de <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80a0 	beq.w	800424a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	2b10      	cmp	r3, #16
 800410e:	d005      	beq.n	800411c <HAL_RCC_OscConfig+0x10c>
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b18      	cmp	r3, #24
 8004114:	d109      	bne.n	800412a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b03      	cmp	r3, #3
 800411a:	d106      	bne.n	800412a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	f040 8092 	bne.w	800424a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e3a4      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004132:	d106      	bne.n	8004142 <HAL_RCC_OscConfig+0x132>
 8004134:	4b50      	ldr	r3, [pc, #320]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a4f      	ldr	r2, [pc, #316]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 800413a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	e058      	b.n	80041f4 <HAL_RCC_OscConfig+0x1e4>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d112      	bne.n	8004170 <HAL_RCC_OscConfig+0x160>
 800414a:	4b4b      	ldr	r3, [pc, #300]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a4a      	ldr	r2, [pc, #296]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	4b48      	ldr	r3, [pc, #288]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a47      	ldr	r2, [pc, #284]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 800415c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	4b45      	ldr	r3, [pc, #276]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a44      	ldr	r2, [pc, #272]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	e041      	b.n	80041f4 <HAL_RCC_OscConfig+0x1e4>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004178:	d112      	bne.n	80041a0 <HAL_RCC_OscConfig+0x190>
 800417a:	4b3f      	ldr	r3, [pc, #252]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a3e      	ldr	r2, [pc, #248]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	4b3c      	ldr	r3, [pc, #240]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a3b      	ldr	r2, [pc, #236]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 800418c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	4b39      	ldr	r3, [pc, #228]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a38      	ldr	r2, [pc, #224]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e029      	b.n	80041f4 <HAL_RCC_OscConfig+0x1e4>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80041a8:	d112      	bne.n	80041d0 <HAL_RCC_OscConfig+0x1c0>
 80041aa:	4b33      	ldr	r3, [pc, #204]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a32      	ldr	r2, [pc, #200]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80041b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	4b30      	ldr	r3, [pc, #192]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a2f      	ldr	r2, [pc, #188]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80041bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	4b2d      	ldr	r3, [pc, #180]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a2c      	ldr	r2, [pc, #176]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80041c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	e011      	b.n	80041f4 <HAL_RCC_OscConfig+0x1e4>
 80041d0:	4b29      	ldr	r3, [pc, #164]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a28      	ldr	r2, [pc, #160]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80041d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	4b26      	ldr	r3, [pc, #152]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a25      	ldr	r2, [pc, #148]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80041e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	4b23      	ldr	r3, [pc, #140]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a22      	ldr	r2, [pc, #136]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 80041ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80041f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d013      	beq.n	8004224 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fe fa74 	bl	80026e8 <HAL_GetTick>
 8004200:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004204:	f7fe fa70 	bl	80026e8 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	; 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e32e      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004216:	4b18      	ldr	r3, [pc, #96]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0x1f4>
 8004222:	e012      	b.n	800424a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7fe fa60 	bl	80026e8 <HAL_GetTick>
 8004228:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800422c:	f7fe fa5c 	bl	80026e8 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	; 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e31a      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800423e:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <HAL_RCC_OscConfig+0x268>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 809a 	beq.w	800438c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_RCC_OscConfig+0x25a>
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	2b18      	cmp	r3, #24
 8004262:	d149      	bne.n	80042f8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d146      	bne.n	80042f8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d104      	bne.n	800427c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e2fe      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
 8004276:	bf00      	nop
 8004278:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d11c      	bne.n	80042bc <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8004282:	4b9a      	ldr	r3, [pc, #616]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0218 	and.w	r2, r3, #24
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	429a      	cmp	r2, r3
 8004290:	d014      	beq.n	80042bc <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004292:	4b96      	ldr	r3, [pc, #600]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 0218 	bic.w	r2, r3, #24
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	4993      	ldr	r1, [pc, #588]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80042a4:	f000 fdd0 	bl	8004e48 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042a8:	4b91      	ldr	r3, [pc, #580]	; (80044f0 <HAL_RCC_OscConfig+0x4e0>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fc fdc7 	bl	8000e40 <HAL_InitTick>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e2db      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042bc:	f7fe fa14 	bl	80026e8 <HAL_GetTick>
 80042c0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80042c4:	f7fe fa10 	bl	80026e8 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e2ce      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042d6:	4b85      	ldr	r3, [pc, #532]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80042e2:	4b82      	ldr	r3, [pc, #520]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	041b      	lsls	r3, r3, #16
 80042f0:	497e      	ldr	r1, [pc, #504]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80042f6:	e049      	b.n	800438c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d02c      	beq.n	800435a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004300:	4b7a      	ldr	r3, [pc, #488]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 0218 	bic.w	r2, r3, #24
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	4977      	ldr	r1, [pc, #476]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004312:	4b76      	ldr	r3, [pc, #472]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a75      	ldr	r2, [pc, #468]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431e:	f7fe f9e3 	bl	80026e8 <HAL_GetTick>
 8004322:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004326:	f7fe f9df 	bl	80026e8 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e29d      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004338:	4b6c      	ldr	r3, [pc, #432]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004344:	4b69      	ldr	r3, [pc, #420]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	041b      	lsls	r3, r3, #16
 8004352:	4966      	ldr	r1, [pc, #408]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 8004354:	4313      	orrs	r3, r2
 8004356:	610b      	str	r3, [r1, #16]
 8004358:	e018      	b.n	800438c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435a:	4b64      	ldr	r3, [pc, #400]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a63      	ldr	r2, [pc, #396]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7fe f9bf 	bl	80026e8 <HAL_GetTick>
 800436a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800436e:	f7fe f9bb 	bl	80026e8 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e279      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004380:	4b5a      	ldr	r3, [pc, #360]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1f0      	bne.n	800436e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d03c      	beq.n	8004412 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01c      	beq.n	80043da <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043a0:	4b52      	ldr	r3, [pc, #328]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80043a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043a6:	4a51      	ldr	r2, [pc, #324]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80043a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b0:	f7fe f99a 	bl	80026e8 <HAL_GetTick>
 80043b4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80043b8:	f7fe f996 	bl	80026e8 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e254      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80043ca:	4b48      	ldr	r3, [pc, #288]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80043cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ef      	beq.n	80043b8 <HAL_RCC_OscConfig+0x3a8>
 80043d8:	e01b      	b.n	8004412 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043da:	4b44      	ldr	r3, [pc, #272]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80043dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043e0:	4a42      	ldr	r2, [pc, #264]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80043e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ea:	f7fe f97d 	bl	80026e8 <HAL_GetTick>
 80043ee:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80043f2:	f7fe f979 	bl	80026e8 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e237      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004404:	4b39      	ldr	r3, [pc, #228]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 8004406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800440a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1ef      	bne.n	80043f2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 80d2 	beq.w	80045c4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004420:	4b34      	ldr	r3, [pc, #208]	; (80044f4 <HAL_RCC_OscConfig+0x4e4>)
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d118      	bne.n	800445e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800442c:	4b31      	ldr	r3, [pc, #196]	; (80044f4 <HAL_RCC_OscConfig+0x4e4>)
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	4a30      	ldr	r2, [pc, #192]	; (80044f4 <HAL_RCC_OscConfig+0x4e4>)
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004438:	f7fe f956 	bl	80026e8 <HAL_GetTick>
 800443c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004440:	f7fe f952 	bl	80026e8 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e210      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004452:	4b28      	ldr	r3, [pc, #160]	; (80044f4 <HAL_RCC_OscConfig+0x4e4>)
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d108      	bne.n	8004478 <HAL_RCC_OscConfig+0x468>
 8004466:	4b21      	ldr	r3, [pc, #132]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 8004468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800446c:	4a1f      	ldr	r2, [pc, #124]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004476:	e074      	b.n	8004562 <HAL_RCC_OscConfig+0x552>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d118      	bne.n	80044b2 <HAL_RCC_OscConfig+0x4a2>
 8004480:	4b1a      	ldr	r3, [pc, #104]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 8004482:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004486:	4a19      	ldr	r2, [pc, #100]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004490:	4b16      	ldr	r3, [pc, #88]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 8004492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004496:	4a15      	ldr	r2, [pc, #84]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 8004498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800449c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80044a0:	4b12      	ldr	r3, [pc, #72]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80044a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044a6:	4a11      	ldr	r2, [pc, #68]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80044a8:	f023 0304 	bic.w	r3, r3, #4
 80044ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80044b0:	e057      	b.n	8004562 <HAL_RCC_OscConfig+0x552>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b05      	cmp	r3, #5
 80044b8:	d11e      	bne.n	80044f8 <HAL_RCC_OscConfig+0x4e8>
 80044ba:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80044bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044c0:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80044c2:	f043 0304 	orr.w	r3, r3, #4
 80044c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80044ca:	4b08      	ldr	r3, [pc, #32]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80044cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044d0:	4a06      	ldr	r2, [pc, #24]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80044d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80044da:	4b04      	ldr	r3, [pc, #16]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80044dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044e0:	4a02      	ldr	r2, [pc, #8]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80044ea:	e03a      	b.n	8004562 <HAL_RCC_OscConfig+0x552>
 80044ec:	44020c00 	.word	0x44020c00
 80044f0:	2000002c 	.word	0x2000002c
 80044f4:	44020800 	.word	0x44020800
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b85      	cmp	r3, #133	; 0x85
 80044fe:	d118      	bne.n	8004532 <HAL_RCC_OscConfig+0x522>
 8004500:	4ba2      	ldr	r3, [pc, #648]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004506:	4aa1      	ldr	r2, [pc, #644]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004508:	f043 0304 	orr.w	r3, r3, #4
 800450c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004510:	4b9e      	ldr	r3, [pc, #632]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004516:	4a9d      	ldr	r2, [pc, #628]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004520:	4b9a      	ldr	r3, [pc, #616]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004526:	4a99      	ldr	r2, [pc, #612]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004528:	f043 0301 	orr.w	r3, r3, #1
 800452c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004530:	e017      	b.n	8004562 <HAL_RCC_OscConfig+0x552>
 8004532:	4b96      	ldr	r3, [pc, #600]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004534:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004538:	4a94      	ldr	r2, [pc, #592]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004542:	4b92      	ldr	r3, [pc, #584]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004548:	4a90      	ldr	r2, [pc, #576]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 800454a:	f023 0304 	bic.w	r3, r3, #4
 800454e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004552:	4b8e      	ldr	r3, [pc, #568]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004558:	4a8c      	ldr	r2, [pc, #560]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 800455a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800455e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d016      	beq.n	8004598 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456a:	f7fe f8bd 	bl	80026e8 <HAL_GetTick>
 800456e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004570:	e00a      	b.n	8004588 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	f7fe f8b9 	bl	80026e8 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004580:	4293      	cmp	r3, r2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e175      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004588:	4b80      	ldr	r3, [pc, #512]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 800458a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0ed      	beq.n	8004572 <HAL_RCC_OscConfig+0x562>
 8004596:	e015      	b.n	80045c4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004598:	f7fe f8a6 	bl	80026e8 <HAL_GetTick>
 800459c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800459e:	e00a      	b.n	80045b6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a0:	f7fe f8a2 	bl	80026e8 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e15e      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045b6:	4b75      	ldr	r3, [pc, #468]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 80045b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1ed      	bne.n	80045a0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d036      	beq.n	800463e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d019      	beq.n	800460c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045d8:	4b6c      	ldr	r3, [pc, #432]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a6b      	ldr	r2, [pc, #428]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 80045de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e4:	f7fe f880 	bl	80026e8 <HAL_GetTick>
 80045e8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80045ec:	f7fe f87c 	bl	80026e8 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e13a      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80045fe:	4b63      	ldr	r3, [pc, #396]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x5dc>
 800460a:	e018      	b.n	800463e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800460c:	4b5f      	ldr	r3, [pc, #380]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a5e      	ldr	r2, [pc, #376]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004612:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004616:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004618:	f7fe f866 	bl	80026e8 <HAL_GetTick>
 800461c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004620:	f7fe f862 	bl	80026e8 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e120      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004632:	4b56      	ldr	r3, [pc, #344]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 8115 	beq.w	8004872 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	2b18      	cmp	r3, #24
 800464c:	f000 80af 	beq.w	80047ae <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	2b02      	cmp	r3, #2
 8004656:	f040 8086 	bne.w	8004766 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800465a:	4b4c      	ldr	r3, [pc, #304]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a4b      	ldr	r2, [pc, #300]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004660:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004666:	f7fe f83f 	bl	80026e8 <HAL_GetTick>
 800466a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800466e:	f7fe f83b 	bl	80026e8 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e0f9      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004680:	4b42      	ldr	r3, [pc, #264]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800468c:	4b3f      	ldr	r3, [pc, #252]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 800468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004690:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004694:	f023 0303 	bic.w	r3, r3, #3
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046a0:	0212      	lsls	r2, r2, #8
 80046a2:	430a      	orrs	r2, r1
 80046a4:	4939      	ldr	r1, [pc, #228]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	628b      	str	r3, [r1, #40]	; 0x28
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	3b01      	subs	r3, #1
 80046b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	3b01      	subs	r3, #1
 80046ba:	025b      	lsls	r3, r3, #9
 80046bc:	b29b      	uxth	r3, r3
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c4:	3b01      	subs	r3, #1
 80046c6:	041b      	lsls	r3, r3, #16
 80046c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	3b01      	subs	r3, #1
 80046d4:	061b      	lsls	r3, r3, #24
 80046d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046da:	492c      	ldr	r1, [pc, #176]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80046e0:	4b2a      	ldr	r3, [pc, #168]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	4a29      	ldr	r2, [pc, #164]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 80046e6:	f023 0310 	bic.w	r3, r3, #16
 80046ea:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f0:	4a26      	ldr	r2, [pc, #152]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80046f6:	4b25      	ldr	r3, [pc, #148]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	4a24      	ldr	r2, [pc, #144]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 80046fc:	f043 0310 	orr.w	r3, r3, #16
 8004700:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004702:	4b22      	ldr	r3, [pc, #136]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	f023 020c 	bic.w	r2, r3, #12
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	491f      	ldr	r1, [pc, #124]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004710:	4313      	orrs	r3, r2
 8004712:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004714:	4b1d      	ldr	r3, [pc, #116]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	f023 0220 	bic.w	r2, r3, #32
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004720:	491a      	ldr	r1, [pc, #104]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004722:	4313      	orrs	r3, r2
 8004724:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004726:	4b19      	ldr	r3, [pc, #100]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	4a18      	ldr	r2, [pc, #96]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 800472c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004730:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004732:	4b16      	ldr	r3, [pc, #88]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a15      	ldr	r2, [pc, #84]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004738:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800473c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473e:	f7fd ffd3 	bl	80026e8 <HAL_GetTick>
 8004742:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004746:	f7fd ffcf 	bl	80026e8 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e08d      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004758:	4b0c      	ldr	r3, [pc, #48]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x736>
 8004764:	e085      	b.n	8004872 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004766:	4b09      	ldr	r3, [pc, #36]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a08      	ldr	r2, [pc, #32]	; (800478c <HAL_RCC_OscConfig+0x77c>)
 800476c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004772:	f7fd ffb9 	bl	80026e8 <HAL_GetTick>
 8004776:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004778:	e00a      	b.n	8004790 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800477a:	f7fd ffb5 	bl	80026e8 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d903      	bls.n	8004790 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e073      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
 800478c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004790:	4b3a      	ldr	r3, [pc, #232]	; (800487c <HAL_RCC_OscConfig+0x86c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1ee      	bne.n	800477a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800479c:	4b37      	ldr	r3, [pc, #220]	; (800487c <HAL_RCC_OscConfig+0x86c>)
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	4a36      	ldr	r2, [pc, #216]	; (800487c <HAL_RCC_OscConfig+0x86c>)
 80047a2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80047a6:	f023 0303 	bic.w	r3, r3, #3
 80047aa:	6293      	str	r3, [r2, #40]	; 0x28
 80047ac:	e061      	b.n	8004872 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80047ae:	4b33      	ldr	r3, [pc, #204]	; (800487c <HAL_RCC_OscConfig+0x86c>)
 80047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047b4:	4b31      	ldr	r3, [pc, #196]	; (800487c <HAL_RCC_OscConfig+0x86c>)
 80047b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d031      	beq.n	8004826 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f003 0203 	and.w	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d12a      	bne.n	8004826 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	0a1b      	lsrs	r3, r3, #8
 80047d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d122      	bne.n	8004826 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ea:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d11a      	bne.n	8004826 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	0a5b      	lsrs	r3, r3, #9
 80047f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d111      	bne.n	8004826 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d108      	bne.n	8004826 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	0e1b      	lsrs	r3, r3, #24
 8004818:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004822:	429a      	cmp	r2, r3
 8004824:	d001      	beq.n	800482a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e024      	b.n	8004874 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800482a:	4b14      	ldr	r3, [pc, #80]	; (800487c <HAL_RCC_OscConfig+0x86c>)
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	08db      	lsrs	r3, r3, #3
 8004830:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004838:	429a      	cmp	r2, r3
 800483a:	d01a      	beq.n	8004872 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <HAL_RCC_OscConfig+0x86c>)
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	4a0e      	ldr	r2, [pc, #56]	; (800487c <HAL_RCC_OscConfig+0x86c>)
 8004842:	f023 0310 	bic.w	r3, r3, #16
 8004846:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fd ff4e 	bl	80026e8 <HAL_GetTick>
 800484c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800484e:	bf00      	nop
 8004850:	f7fd ff4a 	bl	80026e8 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	4293      	cmp	r3, r2
 800485a:	d0f9      	beq.n	8004850 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004860:	4a06      	ldr	r2, [pc, #24]	; (800487c <HAL_RCC_OscConfig+0x86c>)
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004866:	4b05      	ldr	r3, [pc, #20]	; (800487c <HAL_RCC_OscConfig+0x86c>)
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	4a04      	ldr	r2, [pc, #16]	; (800487c <HAL_RCC_OscConfig+0x86c>)
 800486c:	f043 0310 	orr.w	r3, r3, #16
 8004870:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	44020c00 	.word	0x44020c00

08004880 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e19e      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004894:	4b83      	ldr	r3, [pc, #524]	; (8004aa4 <HAL_RCC_ClockConfig+0x224>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 030f 	and.w	r3, r3, #15
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d910      	bls.n	80048c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a2:	4b80      	ldr	r3, [pc, #512]	; (8004aa4 <HAL_RCC_ClockConfig+0x224>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f023 020f 	bic.w	r2, r3, #15
 80048aa:	497e      	ldr	r1, [pc, #504]	; (8004aa4 <HAL_RCC_ClockConfig+0x224>)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b2:	4b7c      	ldr	r3, [pc, #496]	; (8004aa4 <HAL_RCC_ClockConfig+0x224>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e186      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d012      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	4b74      	ldr	r3, [pc, #464]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	0a1b      	lsrs	r3, r3, #8
 80048da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048de:	429a      	cmp	r2, r3
 80048e0:	d909      	bls.n	80048f6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80048e2:	4b71      	ldr	r3, [pc, #452]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	496d      	ldr	r1, [pc, #436]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d012      	beq.n	8004928 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	4b68      	ldr	r3, [pc, #416]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	091b      	lsrs	r3, r3, #4
 800490c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004910:	429a      	cmp	r2, r3
 8004912:	d909      	bls.n	8004928 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004914:	4b64      	ldr	r3, [pc, #400]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	4961      	ldr	r1, [pc, #388]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 8004924:	4313      	orrs	r3, r2
 8004926:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d010      	beq.n	8004956 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	4b5b      	ldr	r3, [pc, #364]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004940:	429a      	cmp	r2, r3
 8004942:	d908      	bls.n	8004956 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004944:	4b58      	ldr	r3, [pc, #352]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	4955      	ldr	r1, [pc, #340]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 8004952:	4313      	orrs	r3, r2
 8004954:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d010      	beq.n	8004984 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	4b50      	ldr	r3, [pc, #320]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	429a      	cmp	r2, r3
 8004970:	d908      	bls.n	8004984 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004972:	4b4d      	ldr	r3, [pc, #308]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	f023 020f 	bic.w	r2, r3, #15
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	494a      	ldr	r1, [pc, #296]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 8004980:	4313      	orrs	r3, r2
 8004982:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8093 	beq.w	8004ab8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b03      	cmp	r3, #3
 8004998:	d107      	bne.n	80049aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800499a:	4b43      	ldr	r3, [pc, #268]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d121      	bne.n	80049ea <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e113      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d107      	bne.n	80049c2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049b2:	4b3d      	ldr	r3, [pc, #244]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d115      	bne.n	80049ea <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e107      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80049ca:	4b37      	ldr	r3, [pc, #220]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e0fb      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049da:	4b33      	ldr	r3, [pc, #204]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e0f3      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80049ea:	4b2f      	ldr	r3, [pc, #188]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f023 0203 	bic.w	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	492c      	ldr	r1, [pc, #176]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049fc:	f7fd fe74 	bl	80026e8 <HAL_GetTick>
 8004a00:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d112      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004a0c:	f7fd fe6c 	bl	80026e8 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e0d7      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a22:	4b21      	ldr	r3, [pc, #132]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f003 0318 	and.w	r3, r3, #24
 8004a2a:	2b18      	cmp	r3, #24
 8004a2c:	d1ee      	bne.n	8004a0c <HAL_RCC_ClockConfig+0x18c>
 8004a2e:	e043      	b.n	8004ab8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d112      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a38:	e00a      	b.n	8004a50 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004a3a:	f7fd fe55 	bl	80026e8 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e0c0      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a50:	4b15      	ldr	r3, [pc, #84]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	f003 0318 	and.w	r3, r3, #24
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d1ee      	bne.n	8004a3a <HAL_RCC_ClockConfig+0x1ba>
 8004a5c:	e02c      	b.n	8004ab8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d122      	bne.n	8004aac <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004a66:	e00a      	b.n	8004a7e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004a68:	f7fd fe3e 	bl	80026e8 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e0a9      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004a7e:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <HAL_RCC_ClockConfig+0x228>)
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f003 0318 	and.w	r3, r3, #24
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d1ee      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x1e8>
 8004a8a:	e015      	b.n	8004ab8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004a8c:	f7fd fe2c 	bl	80026e8 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d906      	bls.n	8004aac <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e097      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x352>
 8004aa2:	bf00      	nop
 8004aa4:	40022000 	.word	0x40022000
 8004aa8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aac:	4b4b      	ldr	r3, [pc, #300]	; (8004bdc <HAL_RCC_ClockConfig+0x35c>)
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f003 0318 	and.w	r3, r3, #24
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e9      	bne.n	8004a8c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d010      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	4b44      	ldr	r3, [pc, #272]	; (8004bdc <HAL_RCC_ClockConfig+0x35c>)
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d208      	bcs.n	8004ae6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004ad4:	4b41      	ldr	r3, [pc, #260]	; (8004bdc <HAL_RCC_ClockConfig+0x35c>)
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f023 020f 	bic.w	r2, r3, #15
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	493e      	ldr	r1, [pc, #248]	; (8004bdc <HAL_RCC_ClockConfig+0x35c>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae6:	4b3e      	ldr	r3, [pc, #248]	; (8004be0 <HAL_RCC_ClockConfig+0x360>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d210      	bcs.n	8004b16 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af4:	4b3a      	ldr	r3, [pc, #232]	; (8004be0 <HAL_RCC_ClockConfig+0x360>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f023 020f 	bic.w	r2, r3, #15
 8004afc:	4938      	ldr	r1, [pc, #224]	; (8004be0 <HAL_RCC_ClockConfig+0x360>)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b04:	4b36      	ldr	r3, [pc, #216]	; (8004be0 <HAL_RCC_ClockConfig+0x360>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d001      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e05d      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d010      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	4b2d      	ldr	r3, [pc, #180]	; (8004bdc <HAL_RCC_ClockConfig+0x35c>)
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d208      	bcs.n	8004b44 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004b32:	4b2a      	ldr	r3, [pc, #168]	; (8004bdc <HAL_RCC_ClockConfig+0x35c>)
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	4927      	ldr	r1, [pc, #156]	; (8004bdc <HAL_RCC_ClockConfig+0x35c>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d012      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	4b21      	ldr	r3, [pc, #132]	; (8004bdc <HAL_RCC_ClockConfig+0x35c>)
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d209      	bcs.n	8004b76 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004b62:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <HAL_RCC_ClockConfig+0x35c>)
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	491a      	ldr	r1, [pc, #104]	; (8004bdc <HAL_RCC_ClockConfig+0x35c>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d012      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695a      	ldr	r2, [r3, #20]
 8004b86:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <HAL_RCC_ClockConfig+0x35c>)
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d209      	bcs.n	8004ba8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004b94:	4b11      	ldr	r3, [pc, #68]	; (8004bdc <HAL_RCC_ClockConfig+0x35c>)
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	490e      	ldr	r1, [pc, #56]	; (8004bdc <HAL_RCC_ClockConfig+0x35c>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004ba8:	f000 f822 	bl	8004bf0 <HAL_RCC_GetSysClockFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <HAL_RCC_ClockConfig+0x35c>)
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	490b      	ldr	r1, [pc, #44]	; (8004be4 <HAL_RCC_ClockConfig+0x364>)
 8004bb8:	5ccb      	ldrb	r3, [r1, r3]
 8004bba:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbe:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <HAL_RCC_ClockConfig+0x368>)
 8004bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <HAL_RCC_ClockConfig+0x36c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fc f93a 	bl	8000e40 <HAL_InitTick>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004bd0:	7afb      	ldrb	r3, [r7, #11]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	44020c00 	.word	0x44020c00
 8004be0:	40022000 	.word	0x40022000
 8004be4:	0800ec58 	.word	0x0800ec58
 8004be8:	20000000 	.word	0x20000000
 8004bec:	2000002c 	.word	0x2000002c

08004bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b089      	sub	sp, #36	; 0x24
 8004bf4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004bf6:	4b8c      	ldr	r3, [pc, #560]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f003 0318 	and.w	r3, r3, #24
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d102      	bne.n	8004c08 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004c02:	4b8a      	ldr	r3, [pc, #552]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x23c>)
 8004c04:	61fb      	str	r3, [r7, #28]
 8004c06:	e107      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c08:	4b87      	ldr	r3, [pc, #540]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	f003 0318 	and.w	r3, r3, #24
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d112      	bne.n	8004c3a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004c14:	4b84      	ldr	r3, [pc, #528]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d009      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c20:	4b81      	ldr	r3, [pc, #516]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	08db      	lsrs	r3, r3, #3
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	4a81      	ldr	r2, [pc, #516]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x240>)
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	e0f1      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004c34:	4b7e      	ldr	r3, [pc, #504]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x240>)
 8004c36:	61fb      	str	r3, [r7, #28]
 8004c38:	e0ee      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c3a:	4b7b      	ldr	r3, [pc, #492]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f003 0318 	and.w	r3, r3, #24
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d102      	bne.n	8004c4c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c46:	4b7b      	ldr	r3, [pc, #492]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x244>)
 8004c48:	61fb      	str	r3, [r7, #28]
 8004c4a:	e0e5      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c4c:	4b76      	ldr	r3, [pc, #472]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	f003 0318 	and.w	r3, r3, #24
 8004c54:	2b18      	cmp	r3, #24
 8004c56:	f040 80dd 	bne.w	8004e14 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004c5a:	4b73      	ldr	r3, [pc, #460]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004c64:	4b70      	ldr	r3, [pc, #448]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	0a1b      	lsrs	r3, r3, #8
 8004c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c6e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004c70:	4b6d      	ldr	r3, [pc, #436]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004c7c:	4b6a      	ldr	r3, [pc, #424]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004c80:	08db      	lsrs	r3, r3, #3
 8004c82:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	fb02 f303 	mul.w	r3, r2, r3
 8004c8c:	ee07 3a90 	vmov	s15, r3
 8004c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c94:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 80b7 	beq.w	8004e0e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d003      	beq.n	8004cae <HAL_RCC_GetSysClockFreq+0xbe>
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d056      	beq.n	8004d5a <HAL_RCC_GetSysClockFreq+0x16a>
 8004cac:	e077      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004cae:	4b5e      	ldr	r3, [pc, #376]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d02d      	beq.n	8004d16 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004cba:	4b5b      	ldr	r3, [pc, #364]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	08db      	lsrs	r3, r3, #3
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	4a5a      	ldr	r2, [pc, #360]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x240>)
 8004cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cca:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	ee07 3a90 	vmov	s15, r3
 8004cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce4:	4b50      	ldr	r3, [pc, #320]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cec:	ee07 3a90 	vmov	s15, r3
 8004cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cf4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cf8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004e38 <HAL_RCC_GetSysClockFreq+0x248>
 8004cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d10:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004d14:	e065      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	ee07 3a90 	vmov	s15, r3
 8004d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d20:	eddf 6a46 	vldr	s13, [pc, #280]	; 8004e3c <HAL_RCC_GetSysClockFreq+0x24c>
 8004d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d28:	4b3f      	ldr	r3, [pc, #252]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d30:	ee07 3a90 	vmov	s15, r3
 8004d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d38:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d3c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004e38 <HAL_RCC_GetSysClockFreq+0x248>
 8004d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d54:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004d58:	e043      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	ee07 3a90 	vmov	s15, r3
 8004d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d64:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004e40 <HAL_RCC_GetSysClockFreq+0x250>
 8004d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d6c:	4b2e      	ldr	r3, [pc, #184]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d74:	ee07 3a90 	vmov	s15, r3
 8004d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d80:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004e38 <HAL_RCC_GetSysClockFreq+0x248>
 8004d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d98:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004d9c:	e021      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	ee07 3a90 	vmov	s15, r3
 8004da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004e44 <HAL_RCC_GetSysClockFreq+0x254>
 8004dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db0:	4b1d      	ldr	r3, [pc, #116]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dc4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004e38 <HAL_RCC_GetSysClockFreq+0x248>
 8004dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ddc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004de0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004de2:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x238>)
 8004de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de6:	0a5b      	lsrs	r3, r3, #9
 8004de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dec:	3301      	adds	r3, #1
 8004dee:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dfa:	edd7 6a06 	vldr	s13, [r7, #24]
 8004dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e06:	ee17 3a90 	vmov	r3, s15
 8004e0a:	61fb      	str	r3, [r7, #28]
 8004e0c:	e004      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
 8004e12:	e001      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x240>)
 8004e16:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004e18:	69fb      	ldr	r3, [r7, #28]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3724      	adds	r7, #36	; 0x24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	44020c00 	.word	0x44020c00
 8004e2c:	003d0900 	.word	0x003d0900
 8004e30:	03d09000 	.word	0x03d09000
 8004e34:	007a1200 	.word	0x007a1200
 8004e38:	46000000 	.word	0x46000000
 8004e3c:	4c742400 	.word	0x4c742400
 8004e40:	4af42400 	.word	0x4af42400
 8004e44:	4a742400 	.word	0x4a742400

08004e48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004e4c:	f7ff fed0 	bl	8004bf0 <HAL_RCC_GetSysClockFreq>
 8004e50:	4602      	mov	r2, r0
 8004e52:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004e54:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004e56:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004e5a:	4907      	ldr	r1, [pc, #28]	; (8004e78 <HAL_RCC_GetHCLKFreq+0x30>)
 8004e5c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004e5e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004e62:	fa22 f303 	lsr.w	r3, r2, r3
 8004e66:	4a05      	ldr	r2, [pc, #20]	; (8004e7c <HAL_RCC_GetHCLKFreq+0x34>)
 8004e68:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004e6a:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <HAL_RCC_GetHCLKFreq+0x34>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	44020c00 	.word	0x44020c00
 8004e78:	0800ec58 	.word	0x0800ec58
 8004e7c:	20000000 	.word	0x20000000

08004e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004e84:	f7ff ffe0 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	091b      	lsrs	r3, r3, #4
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	4904      	ldr	r1, [pc, #16]	; (8004ea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e96:	5ccb      	ldrb	r3, [r1, r3]
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	44020c00 	.word	0x44020c00
 8004ea8:	0800ec68 	.word	0x0800ec68

08004eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004eb0:	f7ff ffca 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	4904      	ldr	r1, [pc, #16]	; (8004ed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ec2:	5ccb      	ldrb	r3, [r1, r3]
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	44020c00 	.word	0x44020c00
 8004ed4:	0800ec68 	.word	0x0800ec68

08004ed8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004edc:	f7ff ffb4 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	4b06      	ldr	r3, [pc, #24]	; (8004efc <HAL_RCC_GetPCLK3Freq+0x24>)
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	0b1b      	lsrs	r3, r3, #12
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	4904      	ldr	r1, [pc, #16]	; (8004f00 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004eee:	5ccb      	ldrb	r3, [r1, r3]
 8004ef0:	f003 031f 	and.w	r3, r3, #31
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	44020c00 	.word	0x44020c00
 8004f00:	0800ec68 	.word	0x0800ec68

08004f04 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	221f      	movs	r2, #31
 8004f12:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004f14:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <HAL_RCC_GetClockConfig+0x68>)
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	f003 0203 	and.w	r2, r3, #3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8004f20:	4b12      	ldr	r3, [pc, #72]	; (8004f6c <HAL_RCC_GetClockConfig+0x68>)
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f003 020f 	and.w	r2, r3, #15
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	091b      	lsrs	r3, r3, #4
 8004f3e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	0a1b      	lsrs	r3, r3, #8
 8004f4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f52:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <HAL_RCC_GetClockConfig+0x6c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 020f 	and.w	r2, r3, #15
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	601a      	str	r2, [r3, #0]
}
 8004f5e:	bf00      	nop
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	44020c00 	.word	0x44020c00
 8004f70:	40022000 	.word	0x40022000

08004f74 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f78:	b0d8      	sub	sp, #352	; 0x160
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f80:	2300      	movs	r3, #0
 8004f82:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f86:	2300      	movs	r3, #0
 8004f88:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8004f98:	2500      	movs	r5, #0
 8004f9a:	ea54 0305 	orrs.w	r3, r4, r5
 8004f9e:	d00b      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004fa0:	4bcd      	ldr	r3, [pc, #820]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004fa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fa6:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8004faa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	4ac9      	ldr	r2, [pc, #804]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004fb2:	430b      	orrs	r3, r1
 8004fb4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	f002 0801 	and.w	r8, r2, #1
 8004fc4:	f04f 0900 	mov.w	r9, #0
 8004fc8:	ea58 0309 	orrs.w	r3, r8, r9
 8004fcc:	d042      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004fce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd4:	2b05      	cmp	r3, #5
 8004fd6:	d823      	bhi.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004fd8:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08005029 	.word	0x08005029
 8004fe4:	08004ff9 	.word	0x08004ff9
 8004fe8:	0800500d 	.word	0x0800500d
 8004fec:	08005029 	.word	0x08005029
 8004ff0:	08005029 	.word	0x08005029
 8004ff4:	08005029 	.word	0x08005029
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	4618      	mov	r0, r3
 8005000:	f004 feda 	bl	8009db8 <RCCEx_PLL2_Config>
 8005004:	4603      	mov	r3, r0
 8005006:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800500a:	e00e      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800500c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005010:	3330      	adds	r3, #48	; 0x30
 8005012:	4618      	mov	r0, r3
 8005014:	f004 ff68 	bl	8009ee8 <RCCEx_PLL3_Config>
 8005018:	4603      	mov	r3, r0
 800501a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800501e:	e004      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005026:	e000      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8005028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800502a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10c      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005032:	4ba9      	ldr	r3, [pc, #676]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005034:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005038:	f023 0107 	bic.w	r1, r3, #7
 800503c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005042:	4aa5      	ldr	r2, [pc, #660]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005044:	430b      	orrs	r3, r1
 8005046:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800504a:	e003      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005050:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005054:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505c:	f002 0a02 	and.w	sl, r2, #2
 8005060:	f04f 0b00 	mov.w	fp, #0
 8005064:	ea5a 030b 	orrs.w	r3, sl, fp
 8005068:	f000 8088 	beq.w	800517c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800506c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005072:	2b28      	cmp	r3, #40	; 0x28
 8005074:	d868      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005076:	a201      	add	r2, pc, #4	; (adr r2, 800507c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507c:	08005151 	.word	0x08005151
 8005080:	08005149 	.word	0x08005149
 8005084:	08005149 	.word	0x08005149
 8005088:	08005149 	.word	0x08005149
 800508c:	08005149 	.word	0x08005149
 8005090:	08005149 	.word	0x08005149
 8005094:	08005149 	.word	0x08005149
 8005098:	08005149 	.word	0x08005149
 800509c:	08005121 	.word	0x08005121
 80050a0:	08005149 	.word	0x08005149
 80050a4:	08005149 	.word	0x08005149
 80050a8:	08005149 	.word	0x08005149
 80050ac:	08005149 	.word	0x08005149
 80050b0:	08005149 	.word	0x08005149
 80050b4:	08005149 	.word	0x08005149
 80050b8:	08005149 	.word	0x08005149
 80050bc:	08005135 	.word	0x08005135
 80050c0:	08005149 	.word	0x08005149
 80050c4:	08005149 	.word	0x08005149
 80050c8:	08005149 	.word	0x08005149
 80050cc:	08005149 	.word	0x08005149
 80050d0:	08005149 	.word	0x08005149
 80050d4:	08005149 	.word	0x08005149
 80050d8:	08005149 	.word	0x08005149
 80050dc:	08005151 	.word	0x08005151
 80050e0:	08005149 	.word	0x08005149
 80050e4:	08005149 	.word	0x08005149
 80050e8:	08005149 	.word	0x08005149
 80050ec:	08005149 	.word	0x08005149
 80050f0:	08005149 	.word	0x08005149
 80050f4:	08005149 	.word	0x08005149
 80050f8:	08005149 	.word	0x08005149
 80050fc:	08005151 	.word	0x08005151
 8005100:	08005149 	.word	0x08005149
 8005104:	08005149 	.word	0x08005149
 8005108:	08005149 	.word	0x08005149
 800510c:	08005149 	.word	0x08005149
 8005110:	08005149 	.word	0x08005149
 8005114:	08005149 	.word	0x08005149
 8005118:	08005149 	.word	0x08005149
 800511c:	08005151 	.word	0x08005151
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005120:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005124:	3308      	adds	r3, #8
 8005126:	4618      	mov	r0, r3
 8005128:	f004 fe46 	bl	8009db8 <RCCEx_PLL2_Config>
 800512c:	4603      	mov	r3, r0
 800512e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005132:	e00e      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005134:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005138:	3330      	adds	r3, #48	; 0x30
 800513a:	4618      	mov	r0, r3
 800513c:	f004 fed4 	bl	8009ee8 <RCCEx_PLL3_Config>
 8005140:	4603      	mov	r3, r0
 8005142:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005146:	e004      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800514e:	e000      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8005150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005152:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10c      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800515a:	4b5f      	ldr	r3, [pc, #380]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800515c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005160:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005164:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800516a:	4a5b      	ldr	r2, [pc, #364]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800516c:	430b      	orrs	r3, r1
 800516e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005172:	e003      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005174:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005178:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800517c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	f002 0304 	and.w	r3, r2, #4
 8005188:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800518c:	2300      	movs	r3, #0
 800518e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005192:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8005196:	460b      	mov	r3, r1
 8005198:	4313      	orrs	r3, r2
 800519a:	d04e      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800519c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80051a6:	d02c      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80051a8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80051ac:	d825      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80051ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b2:	d028      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80051b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b8:	d81f      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80051ba:	2bc0      	cmp	r3, #192	; 0xc0
 80051bc:	d025      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80051be:	2bc0      	cmp	r3, #192	; 0xc0
 80051c0:	d81b      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80051c2:	2b80      	cmp	r3, #128	; 0x80
 80051c4:	d00f      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80051c6:	2b80      	cmp	r3, #128	; 0x80
 80051c8:	d817      	bhi.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d01f      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d113      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051d6:	3308      	adds	r3, #8
 80051d8:	4618      	mov	r0, r3
 80051da:	f004 fded 	bl	8009db8 <RCCEx_PLL2_Config>
 80051de:	4603      	mov	r3, r0
 80051e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80051e4:	e014      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051ea:	3330      	adds	r3, #48	; 0x30
 80051ec:	4618      	mov	r0, r3
 80051ee:	f004 fe7b 	bl	8009ee8 <RCCEx_PLL3_Config>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80051f8:	e00a      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005200:	e006      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005202:	bf00      	nop
 8005204:	e004      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005206:	bf00      	nop
 8005208:	e002      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800520a:	bf00      	nop
 800520c:	e000      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800520e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005210:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10c      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005218:	4b2f      	ldr	r3, [pc, #188]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800521a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800521e:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005222:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005228:	4a2b      	ldr	r2, [pc, #172]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800522a:	430b      	orrs	r3, r1
 800522c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005230:	e003      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005232:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005236:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800523a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	f002 0308 	and.w	r3, r2, #8
 8005246:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800524a:	2300      	movs	r3, #0
 800524c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005250:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8005254:	460b      	mov	r3, r1
 8005256:	4313      	orrs	r3, r2
 8005258:	d056      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800525a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800525e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005260:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005264:	d031      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005266:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800526a:	d82a      	bhi.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800526c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005270:	d02d      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005276:	d824      	bhi.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005278:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800527c:	d029      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800527e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005282:	d81e      	bhi.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005288:	d011      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800528a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800528e:	d818      	bhi.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d023      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005298:	d113      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800529a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800529e:	3308      	adds	r3, #8
 80052a0:	4618      	mov	r0, r3
 80052a2:	f004 fd89 	bl	8009db8 <RCCEx_PLL2_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80052ac:	e017      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052b2:	3330      	adds	r3, #48	; 0x30
 80052b4:	4618      	mov	r0, r3
 80052b6:	f004 fe17 	bl	8009ee8 <RCCEx_PLL3_Config>
 80052ba:	4603      	mov	r3, r0
 80052bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80052c0:	e00d      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80052c8:	e009      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80052ca:	bf00      	nop
 80052cc:	e007      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80052ce:	bf00      	nop
 80052d0:	e005      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80052d2:	bf00      	nop
 80052d4:	e003      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80052d6:	bf00      	nop
 80052d8:	44020c00 	.word	0x44020c00
        break;
 80052dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10c      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80052e6:	4bbb      	ldr	r3, [pc, #748]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80052e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80052ec:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80052f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052f6:	4ab7      	ldr	r2, [pc, #732]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80052f8:	430b      	orrs	r3, r1
 80052fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80052fe:	e003      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005300:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005304:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005308:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f002 0310 	and.w	r3, r2, #16
 8005314:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005318:	2300      	movs	r3, #0
 800531a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800531e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8005322:	460b      	mov	r3, r1
 8005324:	4313      	orrs	r3, r2
 8005326:	d053      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8005328:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800532c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005332:	d031      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005334:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005338:	d82a      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800533a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800533e:	d02d      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005344:	d824      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005346:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800534a:	d029      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800534c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005350:	d81e      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005356:	d011      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800535c:	d818      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800535e:	2b00      	cmp	r3, #0
 8005360:	d020      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005366:	d113      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005368:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800536c:	3308      	adds	r3, #8
 800536e:	4618      	mov	r0, r3
 8005370:	f004 fd22 	bl	8009db8 <RCCEx_PLL2_Config>
 8005374:	4603      	mov	r3, r0
 8005376:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800537a:	e014      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800537c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005380:	3330      	adds	r3, #48	; 0x30
 8005382:	4618      	mov	r0, r3
 8005384:	f004 fdb0 	bl	8009ee8 <RCCEx_PLL3_Config>
 8005388:	4603      	mov	r3, r0
 800538a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800538e:	e00a      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005396:	e006      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005398:	bf00      	nop
 800539a:	e004      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800539c:	bf00      	nop
 800539e:	e002      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80053a0:	bf00      	nop
 80053a2:	e000      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80053a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10c      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80053ae:	4b89      	ldr	r3, [pc, #548]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80053b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80053b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80053b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053be:	4a85      	ldr	r2, [pc, #532]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80053c0:	430b      	orrs	r3, r1
 80053c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80053c6:	e003      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053cc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80053d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f002 0320 	and.w	r3, r2, #32
 80053dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80053e0:	2300      	movs	r3, #0
 80053e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80053e6:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 80053ea:	460b      	mov	r3, r1
 80053ec:	4313      	orrs	r3, r2
 80053ee:	d053      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80053f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f6:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80053fa:	d031      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80053fc:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005400:	d82a      	bhi.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005402:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005406:	d02d      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800540c:	d824      	bhi.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800540e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005412:	d029      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005414:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005418:	d81e      	bhi.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800541a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800541e:	d011      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005424:	d818      	bhi.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005426:	2b00      	cmp	r3, #0
 8005428:	d020      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800542a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800542e:	d113      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005430:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005434:	3308      	adds	r3, #8
 8005436:	4618      	mov	r0, r3
 8005438:	f004 fcbe 	bl	8009db8 <RCCEx_PLL2_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005442:	e014      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005444:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005448:	3330      	adds	r3, #48	; 0x30
 800544a:	4618      	mov	r0, r3
 800544c:	f004 fd4c 	bl	8009ee8 <RCCEx_PLL3_Config>
 8005450:	4603      	mov	r3, r0
 8005452:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005456:	e00a      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800545e:	e006      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005460:	bf00      	nop
 8005462:	e004      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005464:	bf00      	nop
 8005466:	e002      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005468:	bf00      	nop
 800546a:	e000      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800546c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800546e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10c      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005476:	4b57      	ldr	r3, [pc, #348]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800547c:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8005480:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005486:	4a53      	ldr	r2, [pc, #332]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005488:	430b      	orrs	r3, r1
 800548a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800548e:	e003      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005490:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005494:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005498:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80054a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80054a8:	2300      	movs	r3, #0
 80054aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80054ae:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 80054b2:	460b      	mov	r3, r1
 80054b4:	4313      	orrs	r3, r2
 80054b6:	d053      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80054b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054be:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054c2:	d031      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80054c4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054c8:	d82a      	bhi.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80054ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ce:	d02d      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80054d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d4:	d824      	bhi.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80054d6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054da:	d029      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80054dc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054e0:	d81e      	bhi.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80054e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054e6:	d011      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x598>
 80054e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054ec:	d818      	bhi.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d020      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80054f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054f6:	d113      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054fc:	3308      	adds	r3, #8
 80054fe:	4618      	mov	r0, r3
 8005500:	f004 fc5a 	bl	8009db8 <RCCEx_PLL2_Config>
 8005504:	4603      	mov	r3, r0
 8005506:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800550a:	e014      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800550c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005510:	3330      	adds	r3, #48	; 0x30
 8005512:	4618      	mov	r0, r3
 8005514:	f004 fce8 	bl	8009ee8 <RCCEx_PLL3_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800551e:	e00a      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005526:	e006      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005528:	bf00      	nop
 800552a:	e004      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800552c:	bf00      	nop
 800552e:	e002      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005530:	bf00      	nop
 8005532:	e000      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005536:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10c      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800553e:	4b25      	ldr	r3, [pc, #148]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005540:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005544:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8005548:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800554c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800554e:	4a21      	ldr	r2, [pc, #132]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005550:	430b      	orrs	r3, r1
 8005552:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005556:	e003      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005558:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800555c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005560:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800556c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005570:	2300      	movs	r3, #0
 8005572:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005576:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 800557a:	460b      	mov	r3, r1
 800557c:	4313      	orrs	r3, r2
 800557e:	d055      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005580:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005586:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800558a:	d033      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800558c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005590:	d82c      	bhi.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005592:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005596:	d02f      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005598:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800559c:	d826      	bhi.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x678>
 800559e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055a2:	d02b      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x688>
 80055a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055a8:	d820      	bhi.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x678>
 80055aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ae:	d013      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80055b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055b4:	d81a      	bhi.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x678>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d022      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80055ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055be:	d115      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055c4:	3308      	adds	r3, #8
 80055c6:	4618      	mov	r0, r3
 80055c8:	f004 fbf6 	bl	8009db8 <RCCEx_PLL2_Config>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80055d2:	e016      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80055d4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055dc:	3330      	adds	r3, #48	; 0x30
 80055de:	4618      	mov	r0, r3
 80055e0:	f004 fc82 	bl	8009ee8 <RCCEx_PLL3_Config>
 80055e4:	4603      	mov	r3, r0
 80055e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80055ea:	e00a      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80055f2:	e006      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80055f4:	bf00      	nop
 80055f6:	e004      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80055f8:	bf00      	nop
 80055fa:	e002      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80055fc:	bf00      	nop
 80055fe:	e000      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005602:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10c      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800560a:	4bbb      	ldr	r3, [pc, #748]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800560c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005610:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005614:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800561a:	4ab7      	ldr	r2, [pc, #732]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800561c:	430b      	orrs	r3, r1
 800561e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005622:	e003      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005624:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005628:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800562c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8005638:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800563c:	2300      	movs	r3, #0
 800563e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005642:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8005646:	460b      	mov	r3, r1
 8005648:	4313      	orrs	r3, r2
 800564a:	d053      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800564c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005652:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005656:	d031      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005658:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800565c:	d82a      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800565e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005662:	d02d      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005664:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005668:	d824      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800566a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800566e:	d029      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005670:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005674:	d81e      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800567a:	d011      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800567c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005680:	d818      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d020      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005686:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800568a:	d113      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800568c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005690:	3308      	adds	r3, #8
 8005692:	4618      	mov	r0, r3
 8005694:	f004 fb90 	bl	8009db8 <RCCEx_PLL2_Config>
 8005698:	4603      	mov	r3, r0
 800569a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800569e:	e014      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056a4:	3330      	adds	r3, #48	; 0x30
 80056a6:	4618      	mov	r0, r3
 80056a8:	f004 fc1e 	bl	8009ee8 <RCCEx_PLL3_Config>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80056b2:	e00a      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80056ba:	e006      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80056bc:	bf00      	nop
 80056be:	e004      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80056c0:	bf00      	nop
 80056c2:	e002      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80056c4:	bf00      	nop
 80056c6:	e000      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80056c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10c      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80056d2:	4b89      	ldr	r3, [pc, #548]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80056d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80056d8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80056dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056e2:	4a85      	ldr	r2, [pc, #532]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80056e4:	430b      	orrs	r3, r1
 80056e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80056ea:	e003      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80056f0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80056f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8005700:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005704:	2300      	movs	r3, #0
 8005706:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800570a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800570e:	460b      	mov	r3, r1
 8005710:	4313      	orrs	r3, r2
 8005712:	d055      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8005714:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800571c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8005720:	d031      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8005722:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8005726:	d82a      	bhi.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800572c:	d02d      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x816>
 800572e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005732:	d824      	bhi.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005734:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005738:	d029      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800573a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800573e:	d81e      	bhi.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005740:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005744:	d011      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8005746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800574a:	d818      	bhi.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d020      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8005750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005754:	d113      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005756:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800575a:	3308      	adds	r3, #8
 800575c:	4618      	mov	r0, r3
 800575e:	f004 fb2b 	bl	8009db8 <RCCEx_PLL2_Config>
 8005762:	4603      	mov	r3, r0
 8005764:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005768:	e014      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800576a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800576e:	3330      	adds	r3, #48	; 0x30
 8005770:	4618      	mov	r0, r3
 8005772:	f004 fbb9 	bl	8009ee8 <RCCEx_PLL3_Config>
 8005776:	4603      	mov	r3, r0
 8005778:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800577c:	e00a      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005784:	e006      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005786:	bf00      	nop
 8005788:	e004      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800578a:	bf00      	nop
 800578c:	e002      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800578e:	bf00      	nop
 8005790:	e000      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005794:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10d      	bne.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800579c:	4b56      	ldr	r3, [pc, #344]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800579e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057a2:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 80057a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ae:	4a52      	ldr	r2, [pc, #328]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80057b0:	430b      	orrs	r3, r1
 80057b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80057b6:	e003      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057bc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80057c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80057cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80057d0:	2300      	movs	r3, #0
 80057d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057d6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80057da:	460b      	mov	r3, r1
 80057dc:	4313      	orrs	r3, r2
 80057de:	d044      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80057e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e8:	2b05      	cmp	r3, #5
 80057ea:	d823      	bhi.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80057ec:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80057ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f2:	bf00      	nop
 80057f4:	0800583d 	.word	0x0800583d
 80057f8:	0800580d 	.word	0x0800580d
 80057fc:	08005821 	.word	0x08005821
 8005800:	0800583d 	.word	0x0800583d
 8005804:	0800583d 	.word	0x0800583d
 8005808:	0800583d 	.word	0x0800583d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800580c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005810:	3308      	adds	r3, #8
 8005812:	4618      	mov	r0, r3
 8005814:	f004 fad0 	bl	8009db8 <RCCEx_PLL2_Config>
 8005818:	4603      	mov	r3, r0
 800581a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800581e:	e00e      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005820:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005824:	3330      	adds	r3, #48	; 0x30
 8005826:	4618      	mov	r0, r3
 8005828:	f004 fb5e 	bl	8009ee8 <RCCEx_PLL3_Config>
 800582c:	4603      	mov	r3, r0
 800582e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005832:	e004      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800583a:	e000      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800583c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800583e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10d      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8005846:	4b2c      	ldr	r3, [pc, #176]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005848:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800584c:	f023 0107 	bic.w	r1, r3, #7
 8005850:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005858:	4a27      	ldr	r2, [pc, #156]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800585a:	430b      	orrs	r3, r1
 800585c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005860:	e003      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005862:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005866:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800586a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005876:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800587a:	2300      	movs	r3, #0
 800587c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005880:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005884:	460b      	mov	r3, r1
 8005886:	4313      	orrs	r3, r2
 8005888:	d04f      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800588a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005892:	2b50      	cmp	r3, #80	; 0x50
 8005894:	d029      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005896:	2b50      	cmp	r3, #80	; 0x50
 8005898:	d823      	bhi.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800589a:	2b40      	cmp	r3, #64	; 0x40
 800589c:	d027      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800589e:	2b40      	cmp	r3, #64	; 0x40
 80058a0:	d81f      	bhi.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80058a2:	2b30      	cmp	r3, #48	; 0x30
 80058a4:	d025      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80058a6:	2b30      	cmp	r3, #48	; 0x30
 80058a8:	d81b      	bhi.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d00f      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058ae:	2b20      	cmp	r3, #32
 80058b0:	d817      	bhi.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d022      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x988>
 80058b6:	2b10      	cmp	r3, #16
 80058b8:	d113      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058be:	3308      	adds	r3, #8
 80058c0:	4618      	mov	r0, r3
 80058c2:	f004 fa79 	bl	8009db8 <RCCEx_PLL2_Config>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80058cc:	e017      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058d2:	3330      	adds	r3, #48	; 0x30
 80058d4:	4618      	mov	r0, r3
 80058d6:	f004 fb07 	bl	8009ee8 <RCCEx_PLL3_Config>
 80058da:	4603      	mov	r3, r0
 80058dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80058e0:	e00d      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80058e8:	e009      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80058ea:	bf00      	nop
 80058ec:	e007      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80058ee:	bf00      	nop
 80058f0:	e005      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80058f2:	bf00      	nop
 80058f4:	e003      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80058f6:	bf00      	nop
 80058f8:	44020c00 	.word	0x44020c00
        break;
 80058fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10d      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8005906:	4baf      	ldr	r3, [pc, #700]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005908:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800590c:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005910:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005918:	4aaa      	ldr	r2, [pc, #680]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800591a:	430b      	orrs	r3, r1
 800591c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005920:	e003      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005922:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005926:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800592a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005936:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800593a:	2300      	movs	r3, #0
 800593c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005940:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005944:	460b      	mov	r3, r1
 8005946:	4313      	orrs	r3, r2
 8005948:	d055      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800594a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800594e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005952:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005956:	d031      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8005958:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800595c:	d82a      	bhi.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800595e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005962:	d02d      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005964:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005968:	d824      	bhi.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800596a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800596e:	d029      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005970:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005974:	d81e      	bhi.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005976:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800597a:	d011      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800597c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005980:	d818      	bhi.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005982:	2b00      	cmp	r3, #0
 8005984:	d020      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8005986:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800598a:	d113      	bne.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800598c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005990:	3308      	adds	r3, #8
 8005992:	4618      	mov	r0, r3
 8005994:	f004 fa10 	bl	8009db8 <RCCEx_PLL2_Config>
 8005998:	4603      	mov	r3, r0
 800599a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800599e:	e014      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059a4:	3330      	adds	r3, #48	; 0x30
 80059a6:	4618      	mov	r0, r3
 80059a8:	f004 fa9e 	bl	8009ee8 <RCCEx_PLL3_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80059b2:	e00a      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80059ba:	e006      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80059bc:	bf00      	nop
 80059be:	e004      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80059c0:	bf00      	nop
 80059c2:	e002      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80059c4:	bf00      	nop
 80059c6:	e000      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80059c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10d      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80059d2:	4b7c      	ldr	r3, [pc, #496]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80059d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059d8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80059dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059e4:	4a77      	ldr	r2, [pc, #476]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80059e6:	430b      	orrs	r3, r1
 80059e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059ec:	e003      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80059f2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005a02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a06:	2300      	movs	r3, #0
 8005a08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005a10:	460b      	mov	r3, r1
 8005a12:	4313      	orrs	r3, r2
 8005a14:	d03d      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005a16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a22:	d01b      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8005a24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a28:	d814      	bhi.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005a2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a2e:	d017      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8005a30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a34:	d80e      	bhi.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d014      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8005a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a3e:	d109      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a44:	3330      	adds	r3, #48	; 0x30
 8005a46:	4618      	mov	r0, r3
 8005a48:	f004 fa4e 	bl	8009ee8 <RCCEx_PLL3_Config>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005a52:	e008      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005a5a:	e004      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005a5c:	bf00      	nop
 8005a5e:	e002      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005a60:	bf00      	nop
 8005a62:	e000      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a66:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10d      	bne.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005a6e:	4b55      	ldr	r3, [pc, #340]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005a70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a74:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005a78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a80:	4a50      	ldr	r2, [pc, #320]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005a82:	430b      	orrs	r3, r1
 8005a84:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005a88:	e003      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a8e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005a9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005aa8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	d03d      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005ab2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005abe:	d01b      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005ac0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ac4:	d814      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005ac6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005aca:	d017      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005acc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ad0:	d80e      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d014      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8005ad6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ada:	d109      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005adc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ae0:	3330      	adds	r3, #48	; 0x30
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f004 fa00 	bl	8009ee8 <RCCEx_PLL3_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005aee:	e008      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005af6:	e004      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005af8:	bf00      	nop
 8005afa:	e002      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005afc:	bf00      	nop
 8005afe:	e000      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b02:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10d      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005b0a:	4b2e      	ldr	r3, [pc, #184]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005b0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005b10:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8005b14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b1c:	4a29      	ldr	r2, [pc, #164]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005b24:	e003      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b26:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b2a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b44:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	d040      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005b4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b5a:	d01b      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8005b5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b60:	d814      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005b62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b66:	d017      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005b68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b6c:	d80e      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d014      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b76:	d109      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b7c:	3330      	adds	r3, #48	; 0x30
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f004 f9b2 	bl	8009ee8 <RCCEx_PLL3_Config>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005b8a:	e008      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005b92:	e004      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005b94:	bf00      	nop
 8005b96:	e002      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005b98:	bf00      	nop
 8005b9a:	e000      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d110      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005ba6:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005ba8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005bac:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005bb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bb8:	4a02      	ldr	r2, [pc, #8]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005bc0:	e006      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8005bc2:	bf00      	nop
 8005bc4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005bcc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	2100      	movs	r1, #0
 8005bda:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005be6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4313      	orrs	r3, r2
 8005bee:	d03d      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8005bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bf8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005bfc:	d01b      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005bfe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c02:	d814      	bhi.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005c04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c08:	d017      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8005c0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c0e:	d80e      	bhi.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d014      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8005c14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c18:	d109      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c1e:	3330      	adds	r3, #48	; 0x30
 8005c20:	4618      	mov	r0, r3
 8005c22:	f004 f961 	bl	8009ee8 <RCCEx_PLL3_Config>
 8005c26:	4603      	mov	r3, r0
 8005c28:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8005c2c:	e008      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005c34:	e004      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005c36:	bf00      	nop
 8005c38:	e002      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005c3a:	bf00      	nop
 8005c3c:	e000      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c40:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10d      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005c48:	4bbe      	ldr	r3, [pc, #760]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005c4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c4e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005c52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c5a:	4aba      	ldr	r2, [pc, #744]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005c62:	e003      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c68:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005c6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005c78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005c86:	460b      	mov	r3, r1
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	d035      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005c8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c98:	d015      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8005c9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c9e:	d80e      	bhi.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d012      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ca8:	d109      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cae:	3330      	adds	r3, #48	; 0x30
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f004 f919 	bl	8009ee8 <RCCEx_PLL3_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005cbc:	e006      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005cc4:	e002      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005cc6:	bf00      	nop
 8005cc8:	e000      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ccc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10d      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005cd4:	4b9b      	ldr	r3, [pc, #620]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005cd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005cda:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8005cde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ce2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ce6:	4a97      	ldr	r2, [pc, #604]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005cee:	e003      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005cf4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005cf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	2100      	movs	r1, #0
 8005d02:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4313      	orrs	r3, r2
 8005d16:	d00e      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005d18:	4b8a      	ldr	r3, [pc, #552]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	4a89      	ldr	r2, [pc, #548]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d22:	61d3      	str	r3, [r2, #28]
 8005d24:	4b87      	ldr	r3, [pc, #540]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d26:	69d9      	ldr	r1, [r3, #28]
 8005d28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d2c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005d30:	4a84      	ldr	r2, [pc, #528]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d32:	430b      	orrs	r3, r1
 8005d34:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005d42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d46:	2300      	movs	r3, #0
 8005d48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d4c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005d50:	460b      	mov	r3, r1
 8005d52:	4313      	orrs	r3, r2
 8005d54:	d055      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d5e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005d62:	d031      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005d64:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005d68:	d82a      	bhi.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6e:	d02d      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d74:	d824      	bhi.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d7a:	d029      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005d7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d80:	d81e      	bhi.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d86:	d011      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d8c:	d818      	bhi.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d020      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d96:	d113      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f004 f80a 	bl	8009db8 <RCCEx_PLL2_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005daa:	e014      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005dac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005db0:	3330      	adds	r3, #48	; 0x30
 8005db2:	4618      	mov	r0, r3
 8005db4:	f004 f898 	bl	8009ee8 <RCCEx_PLL3_Config>
 8005db8:	4603      	mov	r3, r0
 8005dba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005dbe:	e00a      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005dc6:	e006      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005dc8:	bf00      	nop
 8005dca:	e004      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005dcc:	bf00      	nop
 8005dce:	e002      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005dd0:	bf00      	nop
 8005dd2:	e000      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10d      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005dde:	4b59      	ldr	r3, [pc, #356]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005de0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005de4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005dec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005df0:	4a54      	ldr	r2, [pc, #336]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005df2:	430b      	orrs	r3, r1
 8005df4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005df8:	e003      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005dfe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005e02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e12:	2300      	movs	r3, #0
 8005e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e18:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	d055      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e2a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005e2e:	d031      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8005e30:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005e34:	d82a      	bhi.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005e36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e3a:	d02d      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8005e3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e40:	d824      	bhi.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005e42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e46:	d029      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8005e48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e4c:	d81e      	bhi.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e52:	d011      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8005e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e58:	d818      	bhi.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d020      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e62:	d113      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e68:	3308      	adds	r3, #8
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f003 ffa4 	bl	8009db8 <RCCEx_PLL2_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005e76:	e014      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e7c:	3330      	adds	r3, #48	; 0x30
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f004 f832 	bl	8009ee8 <RCCEx_PLL3_Config>
 8005e84:	4603      	mov	r3, r0
 8005e86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005e8a:	e00a      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005e92:	e006      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005e94:	bf00      	nop
 8005e96:	e004      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005e98:	bf00      	nop
 8005e9a:	e002      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005e9c:	bf00      	nop
 8005e9e:	e000      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ea2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10d      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005eaa:	4b26      	ldr	r3, [pc, #152]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005eac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005eb0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005eb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005eb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ebc:	4a21      	ldr	r2, [pc, #132]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005ebe:	430b      	orrs	r3, r1
 8005ec0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005ec4:	e003      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005eca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005ece:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8005edc:	f003 0320 	and.w	r3, r3, #32
 8005ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ee4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4313      	orrs	r3, r2
 8005eec:	d057      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005eee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ef2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ef6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005efa:	d033      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f00:	d82c      	bhi.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005f02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f06:	d02f      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005f08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f0c:	d826      	bhi.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005f0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f12:	d02b      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005f14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f18:	d820      	bhi.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f1e:	d013      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f24:	d81a      	bhi.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d022      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8005f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f2e:	d115      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f34:	3308      	adds	r3, #8
 8005f36:	4618      	mov	r0, r3
 8005f38:	f003 ff3e 	bl	8009db8 <RCCEx_PLL2_Config>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005f42:	e016      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8005f44:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f4c:	3330      	adds	r3, #48	; 0x30
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f003 ffca 	bl	8009ee8 <RCCEx_PLL3_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005f5a:	e00a      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005f62:	e006      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005f64:	bf00      	nop
 8005f66:	e004      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005f68:	bf00      	nop
 8005f6a:	e002      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005f6c:	bf00      	nop
 8005f6e:	e000      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10d      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8005f7a:	4bbb      	ldr	r3, [pc, #748]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005f7c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005f80:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005f88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f8c:	4ab6      	ldr	r2, [pc, #728]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005f8e:	430b      	orrs	r3, r1
 8005f90:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005f94:	e003      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005f9a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8005f9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8005fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005fb4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	d055      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8005fbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fc6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8005fca:	d031      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005fcc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8005fd0:	d82a      	bhi.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fd6:	d02d      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fdc:	d824      	bhi.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005fde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fe2:	d029      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005fe4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fe8:	d81e      	bhi.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005fea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fee:	d011      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005ff0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ff4:	d818      	bhi.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d020      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8005ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ffe:	d113      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006000:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006004:	3308      	adds	r3, #8
 8006006:	4618      	mov	r0, r3
 8006008:	f003 fed6 	bl	8009db8 <RCCEx_PLL2_Config>
 800600c:	4603      	mov	r3, r0
 800600e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006012:	e014      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006014:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006018:	3330      	adds	r3, #48	; 0x30
 800601a:	4618      	mov	r0, r3
 800601c:	f003 ff64 	bl	8009ee8 <RCCEx_PLL3_Config>
 8006020:	4603      	mov	r3, r0
 8006022:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006026:	e00a      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800602e:	e006      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006030:	bf00      	nop
 8006032:	e004      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006034:	bf00      	nop
 8006036:	e002      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006038:	bf00      	nop
 800603a:	e000      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800603c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800603e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10d      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8006046:	4b88      	ldr	r3, [pc, #544]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006048:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800604c:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8006050:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006054:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006058:	4a83      	ldr	r2, [pc, #524]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800605a:	430b      	orrs	r3, r1
 800605c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006060:	e003      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006062:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006066:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800606a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800606e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006072:	2100      	movs	r1, #0
 8006074:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8006078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006080:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006084:	460b      	mov	r3, r1
 8006086:	4313      	orrs	r3, r2
 8006088:	d055      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800608a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800608e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006092:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006096:	d031      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8006098:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800609c:	d82a      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800609e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060a2:	d02d      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80060a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060a8:	d824      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80060aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80060ae:	d029      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80060b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80060b4:	d81e      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80060b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060ba:	d011      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80060bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060c0:	d818      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d020      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80060c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060ca:	d113      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060d0:	3308      	adds	r3, #8
 80060d2:	4618      	mov	r0, r3
 80060d4:	f003 fe70 	bl	8009db8 <RCCEx_PLL2_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80060de:	e014      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060e4:	3330      	adds	r3, #48	; 0x30
 80060e6:	4618      	mov	r0, r3
 80060e8:	f003 fefe 	bl	8009ee8 <RCCEx_PLL3_Config>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80060f2:	e00a      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80060fa:	e006      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80060fc:	bf00      	nop
 80060fe:	e004      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006100:	bf00      	nop
 8006102:	e002      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006104:	bf00      	nop
 8006106:	e000      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10d      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8006112:	4b55      	ldr	r3, [pc, #340]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006114:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006118:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800611c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006120:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006124:	4a50      	ldr	r2, [pc, #320]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006126:	430b      	orrs	r3, r1
 8006128:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800612c:	e003      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006132:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006136:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	2100      	movs	r1, #0
 8006140:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8006144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006148:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800614c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006150:	460b      	mov	r3, r1
 8006152:	4313      	orrs	r3, r2
 8006154:	d055      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8006156:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800615a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800615e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006162:	d031      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8006164:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006168:	d82a      	bhi.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800616a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616e:	d02d      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8006170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006174:	d824      	bhi.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006176:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800617a:	d029      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800617c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006180:	d81e      	bhi.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006186:	d011      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8006188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800618c:	d818      	bhi.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d020      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8006192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006196:	d113      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006198:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800619c:	3308      	adds	r3, #8
 800619e:	4618      	mov	r0, r3
 80061a0:	f003 fe0a 	bl	8009db8 <RCCEx_PLL2_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80061aa:	e014      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061b0:	3330      	adds	r3, #48	; 0x30
 80061b2:	4618      	mov	r0, r3
 80061b4:	f003 fe98 	bl	8009ee8 <RCCEx_PLL3_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80061be:	e00a      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80061c6:	e006      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80061c8:	bf00      	nop
 80061ca:	e004      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80061cc:	bf00      	nop
 80061ce:	e002      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80061d0:	bf00      	nop
 80061d2:	e000      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80061d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10d      	bne.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80061de:	4b22      	ldr	r3, [pc, #136]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80061e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80061e4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80061e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80061f0:	4a1d      	ldr	r2, [pc, #116]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80061f2:	430b      	orrs	r3, r1
 80061f4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80061f8:	e003      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80061fe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006202:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800620e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006212:	2300      	movs	r3, #0
 8006214:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006218:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800621c:	460b      	mov	r3, r1
 800621e:	4313      	orrs	r3, r2
 8006220:	d055      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006222:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006226:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800622a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800622e:	d035      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8006230:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006234:	d82e      	bhi.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006236:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800623a:	d031      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800623c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006240:	d828      	bhi.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006246:	d01b      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8006248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800624c:	d822      	bhi.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8006252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006256:	d009      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8006258:	e01c      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800625a:	4b03      	ldr	r3, [pc, #12]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800625c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625e:	4a02      	ldr	r2, [pc, #8]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006264:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006266:	e01c      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8006268:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800626c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006270:	3308      	adds	r3, #8
 8006272:	4618      	mov	r0, r3
 8006274:	f003 fda0 	bl	8009db8 <RCCEx_PLL2_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800627e:	e010      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006280:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006284:	3330      	adds	r3, #48	; 0x30
 8006286:	4618      	mov	r0, r3
 8006288:	f003 fe2e 	bl	8009ee8 <RCCEx_PLL3_Config>
 800628c:	4603      	mov	r3, r0
 800628e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006292:	e006      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800629a:	e002      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800629c:	bf00      	nop
 800629e:	e000      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80062a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10d      	bne.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80062aa:	4bc3      	ldr	r3, [pc, #780]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80062ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062b0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80062b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80062bc:	4abe      	ldr	r2, [pc, #760]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80062be:	430b      	orrs	r3, r1
 80062c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80062c4:	e003      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80062ca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80062ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d6:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80062da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062de:	2300      	movs	r3, #0
 80062e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062e4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80062e8:	460b      	mov	r3, r1
 80062ea:	4313      	orrs	r3, r2
 80062ec:	d051      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80062ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80062f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062fa:	d033      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80062fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006300:	d82c      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006302:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006306:	d02d      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006308:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800630c:	d826      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800630e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006312:	d019      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8006314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006318:	d820      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800631e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006322:	d007      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8006324:	e01a      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006326:	4ba4      	ldr	r3, [pc, #656]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632a:	4aa3      	ldr	r2, [pc, #652]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800632c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006330:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006332:	e018      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006334:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006338:	3308      	adds	r3, #8
 800633a:	4618      	mov	r0, r3
 800633c:	f003 fd3c 	bl	8009db8 <RCCEx_PLL2_Config>
 8006340:	4603      	mov	r3, r0
 8006342:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006346:	e00e      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006348:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800634c:	3330      	adds	r3, #48	; 0x30
 800634e:	4618      	mov	r0, r3
 8006350:	f003 fdca 	bl	8009ee8 <RCCEx_PLL3_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800635a:	e004      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006362:	e000      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8006364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006366:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10d      	bne.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800636e:	4b92      	ldr	r3, [pc, #584]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006374:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8006378:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800637c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006380:	4a8d      	ldr	r2, [pc, #564]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006382:	430b      	orrs	r3, r1
 8006384:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006388:	e003      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800638e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006392:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800639e:	67bb      	str	r3, [r7, #120]	; 0x78
 80063a0:	2300      	movs	r3, #0
 80063a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80063a8:	460b      	mov	r3, r1
 80063aa:	4313      	orrs	r3, r2
 80063ac:	d032      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80063ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80063b6:	2b05      	cmp	r3, #5
 80063b8:	d80f      	bhi.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d211      	bcs.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d911      	bls.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d109      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063ca:	3308      	adds	r3, #8
 80063cc:	4618      	mov	r0, r3
 80063ce:	f003 fcf3 	bl	8009db8 <RCCEx_PLL2_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80063d8:	e006      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80063e0:	e002      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80063e2:	bf00      	nop
 80063e4:	e000      	b.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80063e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10d      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80063f0:	4b71      	ldr	r3, [pc, #452]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80063f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063f6:	f023 0107 	bic.w	r1, r3, #7
 80063fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006402:	4a6d      	ldr	r2, [pc, #436]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006404:	430b      	orrs	r3, r1
 8006406:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800640a:	e003      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006410:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006414:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	2100      	movs	r1, #0
 800641e:	6739      	str	r1, [r7, #112]	; 0x70
 8006420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006424:	677b      	str	r3, [r7, #116]	; 0x74
 8006426:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800642a:	460b      	mov	r3, r1
 800642c:	4313      	orrs	r3, r2
 800642e:	d024      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006430:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006434:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800643c:	2b08      	cmp	r3, #8
 800643e:	d005      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006446:	e002      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006448:	bf00      	nop
 800644a:	e000      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800644c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800644e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10d      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006456:	4b58      	ldr	r3, [pc, #352]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800645c:	f023 0108 	bic.w	r1, r3, #8
 8006460:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006464:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006468:	4a53      	ldr	r2, [pc, #332]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800646a:	430b      	orrs	r3, r1
 800646c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006470:	e003      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006472:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006476:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800647a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006486:	66bb      	str	r3, [r7, #104]	; 0x68
 8006488:	2300      	movs	r3, #0
 800648a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800648c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006490:	460b      	mov	r3, r1
 8006492:	4313      	orrs	r3, r2
 8006494:	f000 80b9 	beq.w	800660a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006498:	4b48      	ldr	r3, [pc, #288]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	4a47      	ldr	r2, [pc, #284]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800649e:	f043 0301 	orr.w	r3, r3, #1
 80064a2:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064a4:	f7fc f920 	bl	80026e8 <HAL_GetTick>
 80064a8:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80064ac:	e00b      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ae:	f7fc f91b 	bl	80026e8 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d903      	bls.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80064c4:	e005      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80064c6:	4b3d      	ldr	r3, [pc, #244]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0ed      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80064d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f040 8093 	bne.w	8006602 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80064dc:	4b36      	ldr	r3, [pc, #216]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80064de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80064ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d023      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80064f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80064f6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80064fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80064fe:	4293      	cmp	r3, r2
 8006500:	d01b      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006502:	4b2d      	ldr	r3, [pc, #180]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800650c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006510:	4b29      	ldr	r3, [pc, #164]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006516:	4a28      	ldr	r2, [pc, #160]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800651c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006520:	4b25      	ldr	r3, [pc, #148]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006526:	4a24      	ldr	r2, [pc, #144]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800652c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006530:	4a21      	ldr	r2, [pc, #132]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006532:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006536:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800653a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d019      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006546:	f7fc f8cf 	bl	80026e8 <HAL_GetTick>
 800654a:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800654e:	e00d      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006550:	f7fc f8ca 	bl	80026e8 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800655a:	1ad2      	subs	r2, r2, r3
 800655c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006560:	429a      	cmp	r2, r3
 8006562:	d903      	bls.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 800656a:	e006      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800656c:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800656e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0ea      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800657a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800657e:	2b00      	cmp	r3, #0
 8006580:	d13a      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006582:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006586:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800658a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800658e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006592:	d115      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006594:	4b08      	ldr	r3, [pc, #32]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800659c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80065a0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80065a4:	091b      	lsrs	r3, r3, #4
 80065a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80065aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80065ae:	4a02      	ldr	r2, [pc, #8]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065b0:	430b      	orrs	r3, r1
 80065b2:	61d3      	str	r3, [r2, #28]
 80065b4:	e00a      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80065b6:	bf00      	nop
 80065b8:	44020c00 	.word	0x44020c00
 80065bc:	44020800 	.word	0x44020800
 80065c0:	4b9f      	ldr	r3, [pc, #636]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	4a9e      	ldr	r2, [pc, #632]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80065c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80065ca:	61d3      	str	r3, [r2, #28]
 80065cc:	4b9c      	ldr	r3, [pc, #624]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80065ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065d2:	4a9b      	ldr	r2, [pc, #620]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80065d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80065dc:	4b98      	ldr	r3, [pc, #608]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80065de:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80065e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80065e6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80065ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ee:	4a94      	ldr	r2, [pc, #592]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80065f0:	430b      	orrs	r3, r1
 80065f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80065f6:	e008      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065f8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80065fc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8006600:	e003      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006602:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006606:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800660a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006616:	663b      	str	r3, [r7, #96]	; 0x60
 8006618:	2300      	movs	r3, #0
 800661a:	667b      	str	r3, [r7, #100]	; 0x64
 800661c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006620:	460b      	mov	r3, r1
 8006622:	4313      	orrs	r3, r2
 8006624:	d035      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006626:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800662a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800662e:	2b30      	cmp	r3, #48	; 0x30
 8006630:	d014      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8006632:	2b30      	cmp	r3, #48	; 0x30
 8006634:	d80e      	bhi.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006636:	2b20      	cmp	r3, #32
 8006638:	d012      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800663a:	2b20      	cmp	r3, #32
 800663c:	d80a      	bhi.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d010      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006642:	2b10      	cmp	r3, #16
 8006644:	d106      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006646:	4b7e      	ldr	r3, [pc, #504]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664a:	4a7d      	ldr	r2, [pc, #500]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800664c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006650:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006652:	e008      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800665a:	e004      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800665c:	bf00      	nop
 800665e:	e002      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006660:	bf00      	nop
 8006662:	e000      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006666:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10d      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800666e:	4b74      	ldr	r3, [pc, #464]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006670:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006674:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006678:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800667c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006680:	4a6f      	ldr	r2, [pc, #444]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006682:	430b      	orrs	r3, r1
 8006684:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006688:	e003      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800668e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006692:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669a:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800669e:	65bb      	str	r3, [r7, #88]	; 0x58
 80066a0:	2300      	movs	r3, #0
 80066a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066a4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80066a8:	460b      	mov	r3, r1
 80066aa:	4313      	orrs	r3, r2
 80066ac:	d033      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80066ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80066b2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80066ba:	2b40      	cmp	r3, #64	; 0x40
 80066bc:	d007      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80066be:	e010      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066c0:	4b5f      	ldr	r3, [pc, #380]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c4:	4a5e      	ldr	r2, [pc, #376]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ca:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80066cc:	e00d      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80066d2:	3308      	adds	r3, #8
 80066d4:	4618      	mov	r0, r3
 80066d6:	f003 fb6f 	bl	8009db8 <RCCEx_PLL2_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80066e0:	e003      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80066e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10d      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80066f2:	4b53      	ldr	r3, [pc, #332]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80066f8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80066fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006700:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8006704:	4a4e      	ldr	r2, [pc, #312]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006706:	430b      	orrs	r3, r1
 8006708:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800670c:	e003      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800670e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006712:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006716:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006722:	653b      	str	r3, [r7, #80]	; 0x50
 8006724:	2300      	movs	r3, #0
 8006726:	657b      	str	r3, [r7, #84]	; 0x54
 8006728:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800672c:	460b      	mov	r3, r1
 800672e:	4313      	orrs	r3, r2
 8006730:	d033      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8006732:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006736:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800673e:	2b80      	cmp	r3, #128	; 0x80
 8006740:	d007      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8006742:	e010      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006744:	4b3e      	ldr	r3, [pc, #248]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006748:	4a3d      	ldr	r2, [pc, #244]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800674a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800674e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006750:	e00d      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006752:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006756:	3308      	adds	r3, #8
 8006758:	4618      	mov	r0, r3
 800675a:	f003 fb2d 	bl	8009db8 <RCCEx_PLL2_Config>
 800675e:	4603      	mov	r3, r0
 8006760:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006764:	e003      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800676c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10d      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8006776:	4b32      	ldr	r3, [pc, #200]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006778:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800677c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006780:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006784:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8006788:	4a2d      	ldr	r2, [pc, #180]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800678a:	430b      	orrs	r3, r1
 800678c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006790:	e003      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006792:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006796:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800679a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80067a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80067a8:	2300      	movs	r3, #0
 80067aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067ac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80067b0:	460b      	mov	r3, r1
 80067b2:	4313      	orrs	r3, r2
 80067b4:	d04a      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80067b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80067ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067be:	2b04      	cmp	r3, #4
 80067c0:	d827      	bhi.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80067c2:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	080067dd 	.word	0x080067dd
 80067cc:	080067eb 	.word	0x080067eb
 80067d0:	080067ff 	.word	0x080067ff
 80067d4:	0800681b 	.word	0x0800681b
 80067d8:	0800681b 	.word	0x0800681b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067dc:	4b18      	ldr	r3, [pc, #96]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80067de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e0:	4a17      	ldr	r2, [pc, #92]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80067e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067e6:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80067e8:	e018      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80067ee:	3308      	adds	r3, #8
 80067f0:	4618      	mov	r0, r3
 80067f2:	f003 fae1 	bl	8009db8 <RCCEx_PLL2_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80067fc:	e00e      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006802:	3330      	adds	r3, #48	; 0x30
 8006804:	4618      	mov	r0, r3
 8006806:	f003 fb6f 	bl	8009ee8 <RCCEx_PLL3_Config>
 800680a:	4603      	mov	r3, r0
 800680c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006810:	e004      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006818:	e000      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800681a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800681c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10f      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006824:	4b06      	ldr	r3, [pc, #24]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800682a:	f023 0107 	bic.w	r1, r3, #7
 800682e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006836:	4a02      	ldr	r2, [pc, #8]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006838:	430b      	orrs	r3, r1
 800683a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800683e:	e005      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8006840:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006844:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006848:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800684c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006854:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006858:	643b      	str	r3, [r7, #64]	; 0x40
 800685a:	2300      	movs	r3, #0
 800685c:	647b      	str	r3, [r7, #68]	; 0x44
 800685e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006862:	460b      	mov	r3, r1
 8006864:	4313      	orrs	r3, r2
 8006866:	f000 8081 	beq.w	800696c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800686a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800686e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006872:	2b20      	cmp	r3, #32
 8006874:	d85f      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	08006901 	.word	0x08006901
 8006880:	08006937 	.word	0x08006937
 8006884:	08006937 	.word	0x08006937
 8006888:	08006937 	.word	0x08006937
 800688c:	08006937 	.word	0x08006937
 8006890:	08006937 	.word	0x08006937
 8006894:	08006937 	.word	0x08006937
 8006898:	08006937 	.word	0x08006937
 800689c:	0800690f 	.word	0x0800690f
 80068a0:	08006937 	.word	0x08006937
 80068a4:	08006937 	.word	0x08006937
 80068a8:	08006937 	.word	0x08006937
 80068ac:	08006937 	.word	0x08006937
 80068b0:	08006937 	.word	0x08006937
 80068b4:	08006937 	.word	0x08006937
 80068b8:	08006937 	.word	0x08006937
 80068bc:	08006923 	.word	0x08006923
 80068c0:	08006937 	.word	0x08006937
 80068c4:	08006937 	.word	0x08006937
 80068c8:	08006937 	.word	0x08006937
 80068cc:	08006937 	.word	0x08006937
 80068d0:	08006937 	.word	0x08006937
 80068d4:	08006937 	.word	0x08006937
 80068d8:	08006937 	.word	0x08006937
 80068dc:	0800693f 	.word	0x0800693f
 80068e0:	08006937 	.word	0x08006937
 80068e4:	08006937 	.word	0x08006937
 80068e8:	08006937 	.word	0x08006937
 80068ec:	08006937 	.word	0x08006937
 80068f0:	08006937 	.word	0x08006937
 80068f4:	08006937 	.word	0x08006937
 80068f8:	08006937 	.word	0x08006937
 80068fc:	0800693f 	.word	0x0800693f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006900:	4bab      	ldr	r3, [pc, #684]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006904:	4aaa      	ldr	r2, [pc, #680]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800690a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800690c:	e018      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800690e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006912:	3308      	adds	r3, #8
 8006914:	4618      	mov	r0, r3
 8006916:	f003 fa4f 	bl	8009db8 <RCCEx_PLL2_Config>
 800691a:	4603      	mov	r3, r0
 800691c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006920:	e00e      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006922:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006926:	3330      	adds	r3, #48	; 0x30
 8006928:	4618      	mov	r0, r3
 800692a:	f003 fadd 	bl	8009ee8 <RCCEx_PLL3_Config>
 800692e:	4603      	mov	r3, r0
 8006930:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006934:	e004      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800693c:	e000      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800693e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006940:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10d      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006948:	4b99      	ldr	r3, [pc, #612]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800694a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800694e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006952:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006956:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800695a:	4a95      	ldr	r2, [pc, #596]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800695c:	430b      	orrs	r3, r1
 800695e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006962:	e003      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006964:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006968:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800696c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006978:	63bb      	str	r3, [r7, #56]	; 0x38
 800697a:	2300      	movs	r3, #0
 800697c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800697e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006982:	460b      	mov	r3, r1
 8006984:	4313      	orrs	r3, r2
 8006986:	d04e      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006988:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800698c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006994:	d02e      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699a:	d827      	bhi.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800699c:	2bc0      	cmp	r3, #192	; 0xc0
 800699e:	d02b      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80069a0:	2bc0      	cmp	r3, #192	; 0xc0
 80069a2:	d823      	bhi.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80069a4:	2b80      	cmp	r3, #128	; 0x80
 80069a6:	d017      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80069a8:	2b80      	cmp	r3, #128	; 0x80
 80069aa:	d81f      	bhi.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d002      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80069b0:	2b40      	cmp	r3, #64	; 0x40
 80069b2:	d007      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80069b4:	e01a      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b6:	4b7e      	ldr	r3, [pc, #504]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80069b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ba:	4a7d      	ldr	r2, [pc, #500]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80069bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069c0:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80069c2:	e01a      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80069c8:	3308      	adds	r3, #8
 80069ca:	4618      	mov	r0, r3
 80069cc:	f003 f9f4 	bl	8009db8 <RCCEx_PLL2_Config>
 80069d0:	4603      	mov	r3, r0
 80069d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80069d6:	e010      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80069dc:	3330      	adds	r3, #48	; 0x30
 80069de:	4618      	mov	r0, r3
 80069e0:	f003 fa82 	bl	8009ee8 <RCCEx_PLL3_Config>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80069ea:	e006      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80069f2:	e002      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80069f4:	bf00      	nop
 80069f6:	e000      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80069f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10d      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006a02:	4b6b      	ldr	r3, [pc, #428]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a08:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a14:	4a66      	ldr	r2, [pc, #408]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a16:	430b      	orrs	r3, r1
 8006a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a1c:	e003      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006a22:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8006a26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006a32:	633b      	str	r3, [r7, #48]	; 0x30
 8006a34:	2300      	movs	r3, #0
 8006a36:	637b      	str	r3, [r7, #52]	; 0x34
 8006a38:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	d055      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006a42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a46:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006a4a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006a4e:	d031      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8006a50:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006a54:	d82a      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a5a:	d02d      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8006a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a60:	d824      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006a62:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a66:	d029      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8006a68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a6c:	d81e      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a72:	d011      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a78:	d818      	bhi.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d020      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8006a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a82:	d113      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a88:	3308      	adds	r3, #8
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f003 f994 	bl	8009db8 <RCCEx_PLL2_Config>
 8006a90:	4603      	mov	r3, r0
 8006a92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006a96:	e014      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a9c:	3330      	adds	r3, #48	; 0x30
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f003 fa22 	bl	8009ee8 <RCCEx_PLL3_Config>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006aaa:	e00a      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006ab2:	e006      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006ab4:	bf00      	nop
 8006ab6:	e004      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006ab8:	bf00      	nop
 8006aba:	e002      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006abc:	bf00      	nop
 8006abe:	e000      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10d      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8006aca:	4b39      	ldr	r3, [pc, #228]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ad0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8006ad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ad8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006adc:	4a34      	ldr	r2, [pc, #208]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006ade:	430b      	orrs	r3, r1
 8006ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ae4:	e003      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006aea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006aee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006afc:	2300      	movs	r3, #0
 8006afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006b04:	460b      	mov	r3, r1
 8006b06:	4313      	orrs	r3, r2
 8006b08:	d058      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8006b0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b12:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006b16:	d031      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8006b18:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006b1c:	d82a      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b22:	d02d      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8006b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b28:	d824      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006b2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b2e:	d029      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8006b30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b34:	d81e      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b3a:	d011      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8006b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b40:	d818      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d020      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8006b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b4a:	d113      	bne.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b50:	3308      	adds	r3, #8
 8006b52:	4618      	mov	r0, r3
 8006b54:	f003 f930 	bl	8009db8 <RCCEx_PLL2_Config>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006b5e:	e014      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b64:	3330      	adds	r3, #48	; 0x30
 8006b66:	4618      	mov	r0, r3
 8006b68:	f003 f9be 	bl	8009ee8 <RCCEx_PLL3_Config>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006b72:	e00a      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006b7a:	e006      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006b7c:	bf00      	nop
 8006b7e:	e004      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006b80:	bf00      	nop
 8006b82:	e002      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006b84:	bf00      	nop
 8006b86:	e000      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b8a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d110      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8006b92:	4b07      	ldr	r3, [pc, #28]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b98:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006b9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ba4:	4902      	ldr	r1, [pc, #8]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006bac:	e006      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8006bae:	bf00      	nop
 8006bb0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006bb8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006bbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	6239      	str	r1, [r7, #32]
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	d055      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8006bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006bdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006be0:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006be4:	d031      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8006be6:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006bea:	d82a      	bhi.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006bec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bf0:	d02d      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8006bf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bf6:	d824      	bhi.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006bf8:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006bfc:	d029      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8006bfe:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006c02:	d81e      	bhi.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c08:	d011      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8006c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c0e:	d818      	bhi.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d020      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8006c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c18:	d113      	bne.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c1e:	3308      	adds	r3, #8
 8006c20:	4618      	mov	r0, r3
 8006c22:	f003 f8c9 	bl	8009db8 <RCCEx_PLL2_Config>
 8006c26:	4603      	mov	r3, r0
 8006c28:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006c2c:	e014      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c32:	3330      	adds	r3, #48	; 0x30
 8006c34:	4618      	mov	r0, r3
 8006c36:	f003 f957 	bl	8009ee8 <RCCEx_PLL3_Config>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006c40:	e00a      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006c48:	e006      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006c4a:	bf00      	nop
 8006c4c:	e004      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006c4e:	bf00      	nop
 8006c50:	e002      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006c52:	bf00      	nop
 8006c54:	e000      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c58:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10d      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8006c60:	4b88      	ldr	r3, [pc, #544]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c66:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8006c6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c72:	4984      	ldr	r1, [pc, #528]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006c7a:	e003      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006c80:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006c84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	61b9      	str	r1, [r7, #24]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	61fb      	str	r3, [r7, #28]
 8006c96:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	d03d      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ca4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006ca8:	2b03      	cmp	r3, #3
 8006caa:	d81c      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8006cac:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8006cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb2:	bf00      	nop
 8006cb4:	08006cef 	.word	0x08006cef
 8006cb8:	08006cc5 	.word	0x08006cc5
 8006cbc:	08006cd3 	.word	0x08006cd3
 8006cc0:	08006cef 	.word	0x08006cef
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cc4:	4b6f      	ldr	r3, [pc, #444]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc8:	4a6e      	ldr	r2, [pc, #440]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cce:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006cd0:	e00e      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f003 f86d 	bl	8009db8 <RCCEx_PLL2_Config>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006ce4:	e004      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006cec:	e000      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8006cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cf0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10d      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006cf8:	4b62      	ldr	r3, [pc, #392]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006cfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006cfe:	f023 0203 	bic.w	r2, r3, #3
 8006d02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006d0a:	495e      	ldr	r1, [pc, #376]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006d12:	e003      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d14:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006d18:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	2100      	movs	r1, #0
 8006d26:	6139      	str	r1, [r7, #16]
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d32:	460b      	mov	r3, r1
 8006d34:	4313      	orrs	r3, r2
 8006d36:	d03a      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006d38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d44:	d00e      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8006d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d4a:	d815      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d017      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8006d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d54:	d110      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d56:	4b4b      	ldr	r3, [pc, #300]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5a:	4a4a      	ldr	r2, [pc, #296]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d60:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006d62:	e00e      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d68:	3308      	adds	r3, #8
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f003 f824 	bl	8009db8 <RCCEx_PLL2_Config>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006d76:	e004      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006d7e:	e000      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8006d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10d      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8006d8a:	4b3e      	ldr	r3, [pc, #248]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d9c:	4939      	ldr	r1, [pc, #228]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8006da4:	e003      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006daa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006dae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	2100      	movs	r1, #0
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	f003 0310 	and.w	r3, r3, #16
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	d038      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8006dca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006dce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006dd2:	2b30      	cmp	r3, #48	; 0x30
 8006dd4:	d01b      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8006dd6:	2b30      	cmp	r3, #48	; 0x30
 8006dd8:	d815      	bhi.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8006dda:	2b10      	cmp	r3, #16
 8006ddc:	d002      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d007      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8006de2:	e010      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de4:	4b27      	ldr	r3, [pc, #156]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de8:	4a26      	ldr	r2, [pc, #152]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dee:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006df0:	e00e      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006df2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006df6:	3330      	adds	r3, #48	; 0x30
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f003 f875 	bl	8009ee8 <RCCEx_PLL3_Config>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006e04:	e004      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006e0c:	e000      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8006e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e10:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10d      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006e18:	4b1a      	ldr	r3, [pc, #104]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e26:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006e2a:	4916      	ldr	r1, [pc, #88]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006e32:	e003      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e34:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006e38:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	2100      	movs	r1, #0
 8006e46:	6039      	str	r1, [r7, #0]
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	607b      	str	r3, [r7, #4]
 8006e4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e52:	460b      	mov	r3, r1
 8006e54:	4313      	orrs	r3, r2
 8006e56:	d00c      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006e58:	4b0a      	ldr	r3, [pc, #40]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e66:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006e6a:	4906      	ldr	r1, [pc, #24]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8006e72:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e82:	bf00      	nop
 8006e84:	44020c00 	.word	0x44020c00

08006e88 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b08b      	sub	sp, #44	; 0x2c
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006e90:	4bad      	ldr	r3, [pc, #692]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e98:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006e9a:	4bab      	ldr	r3, [pc, #684]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006ea4:	4ba8      	ldr	r3, [pc, #672]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	0a1b      	lsrs	r3, r3, #8
 8006eaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eae:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006eb0:	4ba5      	ldr	r3, [pc, #660]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	f003 0310 	and.w	r3, r3, #16
 8006eb8:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006eba:	4ba3      	ldr	r3, [pc, #652]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebe:	08db      	lsrs	r3, r3, #3
 8006ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	fb02 f303 	mul.w	r3, r2, r3
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8126 	beq.w	800712a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d053      	beq.n	8006f8c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d86f      	bhi.n	8006fca <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d003      	beq.n	8006ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d02b      	beq.n	8006f4e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8006ef6:	e068      	b.n	8006fca <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ef8:	4b93      	ldr	r3, [pc, #588]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	08db      	lsrs	r3, r3, #3
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	4a92      	ldr	r2, [pc, #584]	; (800714c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f04:	fa22 f303 	lsr.w	r3, r2, r3
 8006f08:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	ee07 3a90 	vmov	s15, r3
 8006f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	ee07 3a90 	vmov	s15, r3
 8006f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006f30:	eddf 5a87 	vldr	s11, [pc, #540]	; 8007150 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006f34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f48:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006f4c:	e068      	b.n	8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	ee07 3a90 	vmov	s15, r3
 8006f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f58:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8007154 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f6a:	ed97 6a04 	vldr	s12, [r7, #16]
 8006f6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007150 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f86:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006f8a:	e049      	b.n	8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	ee07 3a90 	vmov	s15, r3
 8006f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f96:	eddf 6a70 	vldr	s13, [pc, #448]	; 8007158 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8006f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	ee07 3a90 	vmov	s15, r3
 8006fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa8:	ed97 6a04 	vldr	s12, [r7, #16]
 8006fac:	eddf 5a68 	vldr	s11, [pc, #416]	; 8007150 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006fc8:	e02a      	b.n	8007020 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fca:	4b5f      	ldr	r3, [pc, #380]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	08db      	lsrs	r3, r3, #3
 8006fd0:	f003 0303 	and.w	r3, r3, #3
 8006fd4:	4a5d      	ldr	r2, [pc, #372]	; (800714c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fda:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	ee07 3a90 	vmov	s15, r3
 8006fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffe:	ed97 6a04 	vldr	s12, [r7, #16]
 8007002:	eddf 5a53 	vldr	s11, [pc, #332]	; 8007150 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800700e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800701e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007020:	4b49      	ldr	r3, [pc, #292]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007028:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800702c:	d121      	bne.n	8007072 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800702e:	4b46      	ldr	r3, [pc, #280]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d017      	beq.n	800706a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800703a:	4b43      	ldr	r3, [pc, #268]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800703c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800703e:	0a5b      	lsrs	r3, r3, #9
 8007040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007044:	ee07 3a90 	vmov	s15, r3
 8007048:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800704c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007050:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007054:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800705c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007060:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	e006      	b.n	8007078 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	e002      	b.n	8007078 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007078:	4b33      	ldr	r3, [pc, #204]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007080:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007084:	d121      	bne.n	80070ca <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007086:	4b30      	ldr	r3, [pc, #192]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d017      	beq.n	80070c2 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007092:	4b2d      	ldr	r3, [pc, #180]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007096:	0c1b      	lsrs	r3, r3, #16
 8007098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800709c:	ee07 3a90 	vmov	s15, r3
 80070a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80070a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070a8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80070ac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80070b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070b8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	605a      	str	r2, [r3, #4]
 80070c0:	e006      	b.n	80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	605a      	str	r2, [r3, #4]
 80070c8:	e002      	b.n	80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070d0:	4b1d      	ldr	r3, [pc, #116]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070dc:	d121      	bne.n	8007122 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80070de:	4b1a      	ldr	r3, [pc, #104]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80070e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d017      	beq.n	800711a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80070ea:	4b17      	ldr	r3, [pc, #92]	; (8007148 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80070ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ee:	0e1b      	lsrs	r3, r3, #24
 80070f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f4:	ee07 3a90 	vmov	s15, r3
 80070f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80070fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007100:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007104:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800710c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007110:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007118:	e010      	b.n	800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	609a      	str	r2, [r3, #8]
}
 8007120:	e00c      	b.n	800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	609a      	str	r2, [r3, #8]
}
 8007128:	e008      	b.n	800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	609a      	str	r2, [r3, #8]
}
 800713c:	bf00      	nop
 800713e:	372c      	adds	r7, #44	; 0x2c
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	44020c00 	.word	0x44020c00
 800714c:	03d09000 	.word	0x03d09000
 8007150:	46000000 	.word	0x46000000
 8007154:	4a742400 	.word	0x4a742400
 8007158:	4af42400 	.word	0x4af42400

0800715c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800715c:	b480      	push	{r7}
 800715e:	b08b      	sub	sp, #44	; 0x2c
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007164:	4bad      	ldr	r3, [pc, #692]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800716e:	4bab      	ldr	r3, [pc, #684]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007178:	4ba8      	ldr	r3, [pc, #672]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	0a1b      	lsrs	r3, r3, #8
 800717e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007182:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8007184:	4ba5      	ldr	r3, [pc, #660]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	f003 0310 	and.w	r3, r3, #16
 800718c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800718e:	4ba3      	ldr	r3, [pc, #652]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	08db      	lsrs	r3, r3, #3
 8007194:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	fb02 f303 	mul.w	r3, r2, r3
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 8126 	beq.w	80073fe <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d053      	beq.n	8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d86f      	bhi.n	800729e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d003      	beq.n	80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d02b      	beq.n	8007222 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80071ca:	e068      	b.n	800729e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071cc:	4b93      	ldr	r3, [pc, #588]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	08db      	lsrs	r3, r3, #3
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	4a92      	ldr	r2, [pc, #584]	; (8007420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80071d8:	fa22 f303 	lsr.w	r3, r2, r3
 80071dc:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	ee07 3a90 	vmov	s15, r3
 80071e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	ee07 3a90 	vmov	s15, r3
 80071fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007200:	ed97 6a04 	vldr	s12, [r7, #16]
 8007204:	eddf 5a87 	vldr	s11, [pc, #540]	; 8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007208:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007210:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007214:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8007220:	e068      	b.n	80072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	ee07 3a90 	vmov	s15, r3
 8007228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8007428 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007230:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007242:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800724a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800725e:	e049      	b.n	80072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726a:	eddf 6a70 	vldr	s13, [pc, #448]	; 800742c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800726e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	ee07 3a90 	vmov	s15, r3
 8007278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007280:	eddf 5a68 	vldr	s11, [pc, #416]	; 8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007284:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007288:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007298:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800729c:	e02a      	b.n	80072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800729e:	4b5f      	ldr	r3, [pc, #380]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	08db      	lsrs	r3, r3, #3
 80072a4:	f003 0303 	and.w	r3, r3, #3
 80072a8:	4a5d      	ldr	r2, [pc, #372]	; (8007420 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80072aa:	fa22 f303 	lsr.w	r3, r2, r3
 80072ae:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	ee07 3a90 	vmov	s15, r3
 80072c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d2:	ed97 6a04 	vldr	s12, [r7, #16]
 80072d6:	eddf 5a53 	vldr	s11, [pc, #332]	; 8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80072da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80072f2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072f4:	4b49      	ldr	r3, [pc, #292]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007300:	d121      	bne.n	8007346 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007302:	4b46      	ldr	r3, [pc, #280]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d017      	beq.n	800733e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800730e:	4b43      	ldr	r3, [pc, #268]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007312:	0a5b      	lsrs	r3, r3, #9
 8007314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007318:	ee07 3a90 	vmov	s15, r3
 800731c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007320:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007324:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007328:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800732c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007334:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	e006      	b.n	800734c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	e002      	b.n	800734c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800734c:	4b33      	ldr	r3, [pc, #204]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007354:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007358:	d121      	bne.n	800739e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800735a:	4b30      	ldr	r3, [pc, #192]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d017      	beq.n	8007396 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007366:	4b2d      	ldr	r3, [pc, #180]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736a:	0c1b      	lsrs	r3, r3, #16
 800736c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007370:	ee07 3a90 	vmov	s15, r3
 8007374:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800737c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007380:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800738c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	605a      	str	r2, [r3, #4]
 8007394:	e006      	b.n	80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	605a      	str	r2, [r3, #4]
 800739c:	e002      	b.n	80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073a4:	4b1d      	ldr	r3, [pc, #116]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073b0:	d121      	bne.n	80073f6 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80073b2:	4b1a      	ldr	r3, [pc, #104]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d017      	beq.n	80073ee <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80073be:	4b17      	ldr	r3, [pc, #92]	; (800741c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80073c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c2:	0e1b      	lsrs	r3, r3, #24
 80073c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073c8:	ee07 3a90 	vmov	s15, r3
 80073cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80073d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073d4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80073d8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80073dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073e4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073ec:	e010      	b.n	8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	609a      	str	r2, [r3, #8]
}
 80073f4:	e00c      	b.n	8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	609a      	str	r2, [r3, #8]
}
 80073fc:	e008      	b.n	8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	609a      	str	r2, [r3, #8]
}
 8007410:	bf00      	nop
 8007412:	372c      	adds	r7, #44	; 0x2c
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	44020c00 	.word	0x44020c00
 8007420:	03d09000 	.word	0x03d09000
 8007424:	46000000 	.word	0x46000000
 8007428:	4a742400 	.word	0x4a742400
 800742c:	4af42400 	.word	0x4af42400

08007430 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007430:	b480      	push	{r7}
 8007432:	b08b      	sub	sp, #44	; 0x2c
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007438:	4bad      	ldr	r3, [pc, #692]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800743a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007440:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007442:	4bab      	ldr	r3, [pc, #684]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800744c:	4ba8      	ldr	r3, [pc, #672]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800744e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007450:	0a1b      	lsrs	r3, r3, #8
 8007452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007456:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8007458:	4ba5      	ldr	r3, [pc, #660]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800745a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745c:	f003 0310 	and.w	r3, r3, #16
 8007460:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007462:	4ba3      	ldr	r3, [pc, #652]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007466:	08db      	lsrs	r3, r3, #3
 8007468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	fb02 f303 	mul.w	r3, r2, r3
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 8126 	beq.w	80076d2 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	2b03      	cmp	r3, #3
 800748a:	d053      	beq.n	8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	2b03      	cmp	r3, #3
 8007490:	d86f      	bhi.n	8007572 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d003      	beq.n	80074a0 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d02b      	beq.n	80074f6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800749e:	e068      	b.n	8007572 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074a0:	4b93      	ldr	r3, [pc, #588]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	08db      	lsrs	r3, r3, #3
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	4a92      	ldr	r2, [pc, #584]	; (80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80074ac:	fa22 f303 	lsr.w	r3, r2, r3
 80074b0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	ee07 3a90 	vmov	s15, r3
 80074b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	ee07 3a90 	vmov	s15, r3
 80074d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d4:	ed97 6a04 	vldr	s12, [r7, #16]
 80074d8:	eddf 5a87 	vldr	s11, [pc, #540]	; 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80074dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80074f4:	e068      	b.n	80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	ee07 3a90 	vmov	s15, r3
 80074fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007500:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80076fc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007512:	ed97 6a04 	vldr	s12, [r7, #16]
 8007516:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800751a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800751e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800752a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8007532:	e049      	b.n	80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	ee07 3a90 	vmov	s15, r3
 800753a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8007700 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	ee07 3a90 	vmov	s15, r3
 800754c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007550:	ed97 6a04 	vldr	s12, [r7, #16]
 8007554:	eddf 5a68 	vldr	s11, [pc, #416]	; 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007558:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007564:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8007570:	e02a      	b.n	80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007572:	4b5f      	ldr	r3, [pc, #380]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	08db      	lsrs	r3, r3, #3
 8007578:	f003 0303 	and.w	r3, r3, #3
 800757c:	4a5d      	ldr	r2, [pc, #372]	; (80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800757e:	fa22 f303 	lsr.w	r3, r2, r3
 8007582:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a6:	ed97 6a04 	vldr	s12, [r7, #16]
 80075aa:	eddf 5a53 	vldr	s11, [pc, #332]	; 80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80075ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80075c6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075c8:	4b49      	ldr	r3, [pc, #292]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075d4:	d121      	bne.n	800761a <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80075d6:	4b46      	ldr	r3, [pc, #280]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d017      	beq.n	8007612 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80075e2:	4b43      	ldr	r3, [pc, #268]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80075e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e6:	0a5b      	lsrs	r3, r3, #9
 80075e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ec:	ee07 3a90 	vmov	s15, r3
 80075f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80075f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075f8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80075fc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007608:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	e006      	b.n	8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	e002      	b.n	8007620 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007620:	4b33      	ldr	r3, [pc, #204]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800762c:	d121      	bne.n	8007672 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800762e:	4b30      	ldr	r3, [pc, #192]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d017      	beq.n	800766a <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800763a:	4b2d      	ldr	r3, [pc, #180]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800763c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763e:	0c1b      	lsrs	r3, r3, #16
 8007640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007644:	ee07 3a90 	vmov	s15, r3
 8007648:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800764c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007650:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007654:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800765c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007660:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	605a      	str	r2, [r3, #4]
 8007668:	e006      	b.n	8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	605a      	str	r2, [r3, #4]
 8007670:	e002      	b.n	8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007678:	4b1d      	ldr	r3, [pc, #116]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007684:	d121      	bne.n	80076ca <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007686:	4b1a      	ldr	r3, [pc, #104]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d017      	beq.n	80076c2 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007692:	4b17      	ldr	r3, [pc, #92]	; (80076f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007696:	0e1b      	lsrs	r3, r3, #24
 8007698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800769c:	ee07 3a90 	vmov	s15, r3
 80076a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80076a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076a8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80076ac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80076b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076b8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80076c0:	e010      	b.n	80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	609a      	str	r2, [r3, #8]
}
 80076c8:	e00c      	b.n	80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	609a      	str	r2, [r3, #8]
}
 80076d0:	e008      	b.n	80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	609a      	str	r2, [r3, #8]
}
 80076e4:	bf00      	nop
 80076e6:	372c      	adds	r7, #44	; 0x2c
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	44020c00 	.word	0x44020c00
 80076f4:	03d09000 	.word	0x03d09000
 80076f8:	46000000 	.word	0x46000000
 80076fc:	4a742400 	.word	0x4a742400
 8007700:	4af42400 	.word	0x4af42400

08007704 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007704:	b590      	push	{r4, r7, lr}
 8007706:	b08f      	sub	sp, #60	; 0x3c
 8007708:	af00      	add	r7, sp, #0
 800770a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800770e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007712:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8007716:	4321      	orrs	r1, r4
 8007718:	d150      	bne.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800771a:	4b26      	ldr	r3, [pc, #152]	; (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800771c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007724:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007726:	4b23      	ldr	r3, [pc, #140]	; (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800772c:	f003 0302 	and.w	r3, r3, #2
 8007730:	2b02      	cmp	r3, #2
 8007732:	d108      	bne.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800773a:	d104      	bne.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800773c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007740:	637b      	str	r3, [r7, #52]	; 0x34
 8007742:	f002 bb2a 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007746:	4b1b      	ldr	r3, [pc, #108]	; (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800774c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007754:	d108      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800775c:	d104      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800775e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007762:	637b      	str	r3, [r7, #52]	; 0x34
 8007764:	f002 bb19 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007768:	4b12      	ldr	r3, [pc, #72]	; (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007774:	d119      	bne.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800777c:	d115      	bne.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800777e:	4b0d      	ldr	r3, [pc, #52]	; (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8007786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800778a:	d30a      	bcc.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800778c:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	0a1b      	lsrs	r3, r3, #8
 8007792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007796:	4a08      	ldr	r2, [pc, #32]	; (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007798:	fbb2 f3f3 	udiv	r3, r2, r3
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800779e:	f002 bafc 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80077a6:	f002 baf8 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	637b      	str	r3, [r7, #52]	; 0x34
 80077ae:	f002 baf4 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077b2:	bf00      	nop
 80077b4:	44020c00 	.word	0x44020c00
 80077b8:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80077bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077c0:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 80077c4:	ea50 0104 	orrs.w	r1, r0, r4
 80077c8:	f001 8275 	beq.w	8008cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80077cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077d0:	2801      	cmp	r0, #1
 80077d2:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 80077d6:	f082 82dd 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077de:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 80077e2:	ea50 0104 	orrs.w	r1, r0, r4
 80077e6:	f001 816c 	beq.w	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80077ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077ee:	2801      	cmp	r0, #1
 80077f0:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 80077f4:	f082 82ce 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077fc:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8007800:	ea50 0104 	orrs.w	r1, r0, r4
 8007804:	f001 8602 	beq.w	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8007808:	e9d7 0100 	ldrd	r0, r1, [r7]
 800780c:	2801      	cmp	r0, #1
 800780e:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8007812:	f082 82bf 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007816:	e9d7 0100 	ldrd	r0, r1, [r7]
 800781a:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800781e:	ea50 0104 	orrs.w	r1, r0, r4
 8007822:	f001 854c 	beq.w	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8007826:	e9d7 0100 	ldrd	r0, r1, [r7]
 800782a:	2801      	cmp	r0, #1
 800782c:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8007830:	f082 82b0 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007834:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007838:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 800783c:	ea50 0104 	orrs.w	r1, r0, r4
 8007840:	f001 849e 	beq.w	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8007844:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007848:	2801      	cmp	r0, #1
 800784a:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800784e:	f082 82a1 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007852:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007856:	f1a1 0420 	sub.w	r4, r1, #32
 800785a:	ea50 0104 	orrs.w	r1, r0, r4
 800785e:	f001 83e8 	beq.w	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8007862:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007866:	2801      	cmp	r0, #1
 8007868:	f171 0120 	sbcs.w	r1, r1, #32
 800786c:	f082 8292 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007874:	f1a1 0410 	sub.w	r4, r1, #16
 8007878:	ea50 0104 	orrs.w	r1, r0, r4
 800787c:	f002 8256 	beq.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007880:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007884:	2801      	cmp	r0, #1
 8007886:	f171 0110 	sbcs.w	r1, r1, #16
 800788a:	f082 8283 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800788e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007892:	f1a1 0408 	sub.w	r4, r1, #8
 8007896:	ea50 0104 	orrs.w	r1, r0, r4
 800789a:	f002 81cc 	beq.w	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800789e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078a2:	2801      	cmp	r0, #1
 80078a4:	f171 0108 	sbcs.w	r1, r1, #8
 80078a8:	f082 8274 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078b0:	1f0c      	subs	r4, r1, #4
 80078b2:	ea50 0104 	orrs.w	r1, r0, r4
 80078b6:	f001 8648 	beq.w	800954a <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80078ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078be:	2801      	cmp	r0, #1
 80078c0:	f171 0104 	sbcs.w	r1, r1, #4
 80078c4:	f082 8266 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078cc:	1e8c      	subs	r4, r1, #2
 80078ce:	ea50 0104 	orrs.w	r1, r0, r4
 80078d2:	f002 8143 	beq.w	8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80078d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078da:	2801      	cmp	r0, #1
 80078dc:	f171 0102 	sbcs.w	r1, r1, #2
 80078e0:	f082 8258 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078e8:	1e4c      	subs	r4, r1, #1
 80078ea:	ea50 0104 	orrs.w	r1, r0, r4
 80078ee:	f002 80ce 	beq.w	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80078f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078f6:	2801      	cmp	r0, #1
 80078f8:	f171 0101 	sbcs.w	r1, r1, #1
 80078fc:	f082 824a 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007900:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007904:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8007908:	4321      	orrs	r1, r4
 800790a:	f002 8059 	beq.w	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800790e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007912:	4cd9      	ldr	r4, [pc, #868]	; (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007914:	42a0      	cmp	r0, r4
 8007916:	f171 0100 	sbcs.w	r1, r1, #0
 800791a:	f082 823b 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800791e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007922:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8007926:	4321      	orrs	r1, r4
 8007928:	f001 87d9 	beq.w	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800792c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007930:	4cd2      	ldr	r4, [pc, #840]	; (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007932:	42a0      	cmp	r0, r4
 8007934:	f171 0100 	sbcs.w	r1, r1, #0
 8007938:	f082 822c 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800793c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007940:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8007944:	4321      	orrs	r1, r4
 8007946:	f001 8751 	beq.w	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800794a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800794e:	4ccc      	ldr	r4, [pc, #816]	; (8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007950:	42a0      	cmp	r0, r4
 8007952:	f171 0100 	sbcs.w	r1, r1, #0
 8007956:	f082 821d 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800795a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800795e:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8007962:	4321      	orrs	r1, r4
 8007964:	f001 869a 	beq.w	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8007968:	e9d7 0100 	ldrd	r0, r1, [r7]
 800796c:	4cc5      	ldr	r4, [pc, #788]	; (8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800796e:	42a0      	cmp	r0, r4
 8007970:	f171 0100 	sbcs.w	r1, r1, #0
 8007974:	f082 820e 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800797c:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8007980:	4321      	orrs	r1, r4
 8007982:	f001 8612 	beq.w	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8007986:	e9d7 0100 	ldrd	r0, r1, [r7]
 800798a:	4cbf      	ldr	r4, [pc, #764]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800798c:	42a0      	cmp	r0, r4
 800798e:	f171 0100 	sbcs.w	r1, r1, #0
 8007992:	f082 81ff 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007996:	e9d7 0100 	ldrd	r0, r1, [r7]
 800799a:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 800799e:	4321      	orrs	r1, r4
 80079a0:	f002 817e 	beq.w	8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 80079a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079a8:	4cb8      	ldr	r4, [pc, #736]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80079aa:	42a0      	cmp	r0, r4
 80079ac:	f171 0100 	sbcs.w	r1, r1, #0
 80079b0:	f082 81f0 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079b8:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 80079bc:	4321      	orrs	r1, r4
 80079be:	f000 829e 	beq.w	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80079c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079c6:	4cb2      	ldr	r4, [pc, #712]	; (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80079c8:	42a0      	cmp	r0, r4
 80079ca:	f171 0100 	sbcs.w	r1, r1, #0
 80079ce:	f082 81e1 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079d6:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 80079da:	4321      	orrs	r1, r4
 80079dc:	f000 826d 	beq.w	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80079e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079e4:	4cab      	ldr	r4, [pc, #684]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80079e6:	42a0      	cmp	r0, r4
 80079e8:	f171 0100 	sbcs.w	r1, r1, #0
 80079ec:	f082 81d2 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079f4:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 80079f8:	4321      	orrs	r1, r4
 80079fa:	f001 800d 	beq.w	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80079fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a02:	4ca5      	ldr	r4, [pc, #660]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007a04:	42a0      	cmp	r0, r4
 8007a06:	f171 0100 	sbcs.w	r1, r1, #0
 8007a0a:	f082 81c3 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a12:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8007a16:	4321      	orrs	r1, r4
 8007a18:	f000 81d0 	beq.w	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8007a1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a20:	4c9e      	ldr	r4, [pc, #632]	; (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a22:	42a0      	cmp	r0, r4
 8007a24:	f171 0100 	sbcs.w	r1, r1, #0
 8007a28:	f082 81b4 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a30:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8007a34:	4321      	orrs	r1, r4
 8007a36:	f000 8142 	beq.w	8007cbe <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8007a3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a3e:	4c98      	ldr	r4, [pc, #608]	; (8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007a40:	42a0      	cmp	r0, r4
 8007a42:	f171 0100 	sbcs.w	r1, r1, #0
 8007a46:	f082 81a5 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a4e:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8007a52:	4321      	orrs	r1, r4
 8007a54:	f001 824e 	beq.w	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007a58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a5c:	4c91      	ldr	r4, [pc, #580]	; (8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007a5e:	42a0      	cmp	r0, r4
 8007a60:	f171 0100 	sbcs.w	r1, r1, #0
 8007a64:	f082 8196 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a6c:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8007a70:	4321      	orrs	r1, r4
 8007a72:	f001 8197 	beq.w	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8007a76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a7a:	4c8b      	ldr	r4, [pc, #556]	; (8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007a7c:	42a0      	cmp	r0, r4
 8007a7e:	f171 0100 	sbcs.w	r1, r1, #0
 8007a82:	f082 8187 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a8a:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8007a8e:	4321      	orrs	r1, r4
 8007a90:	f001 8154 	beq.w	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a98:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8007a9c:	f171 0100 	sbcs.w	r1, r1, #0
 8007aa0:	f082 8178 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007aa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aa8:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8007aac:	4321      	orrs	r1, r4
 8007aae:	f001 80b7 	beq.w	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007ab2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ab6:	f248 0401 	movw	r4, #32769	; 0x8001
 8007aba:	42a0      	cmp	r0, r4
 8007abc:	f171 0100 	sbcs.w	r1, r1, #0
 8007ac0:	f082 8168 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ac4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ac8:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8007acc:	4321      	orrs	r1, r4
 8007ace:	f001 8064 	beq.w	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8007ad2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ad6:	f244 0401 	movw	r4, #16385	; 0x4001
 8007ada:	42a0      	cmp	r0, r4
 8007adc:	f171 0100 	sbcs.w	r1, r1, #0
 8007ae0:	f082 8158 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ae4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ae8:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8007aec:	4321      	orrs	r1, r4
 8007aee:	f001 8011 	beq.w	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8007af2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007af6:	f242 0401 	movw	r4, #8193	; 0x2001
 8007afa:	42a0      	cmp	r0, r4
 8007afc:	f171 0100 	sbcs.w	r1, r1, #0
 8007b00:	f082 8148 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b08:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8007b0c:	4321      	orrs	r1, r4
 8007b0e:	f000 871e 	beq.w	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8007b12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b16:	f241 0401 	movw	r4, #4097	; 0x1001
 8007b1a:	42a0      	cmp	r0, r4
 8007b1c:	f171 0100 	sbcs.w	r1, r1, #0
 8007b20:	f082 8138 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b28:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8007b2c:	4321      	orrs	r1, r4
 8007b2e:	f000 86a8 	beq.w	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8007b32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b36:	f640 0401 	movw	r4, #2049	; 0x801
 8007b3a:	42a0      	cmp	r0, r4
 8007b3c:	f171 0100 	sbcs.w	r1, r1, #0
 8007b40:	f082 8128 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b48:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8007b4c:	4321      	orrs	r1, r4
 8007b4e:	f000 8632 	beq.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8007b52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b56:	f240 4401 	movw	r4, #1025	; 0x401
 8007b5a:	42a0      	cmp	r0, r4
 8007b5c:	f171 0100 	sbcs.w	r1, r1, #0
 8007b60:	f082 8118 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b68:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8007b6c:	4321      	orrs	r1, r4
 8007b6e:	f000 85b0 	beq.w	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8007b72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b76:	f240 2401 	movw	r4, #513	; 0x201
 8007b7a:	42a0      	cmp	r0, r4
 8007b7c:	f171 0100 	sbcs.w	r1, r1, #0
 8007b80:	f082 8108 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b88:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8007b8c:	4321      	orrs	r1, r4
 8007b8e:	f000 8535 	beq.w	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007b92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b96:	f240 1401 	movw	r4, #257	; 0x101
 8007b9a:	42a0      	cmp	r0, r4
 8007b9c:	f171 0100 	sbcs.w	r1, r1, #0
 8007ba0:	f082 80f8 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ba4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ba8:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8007bac:	4321      	orrs	r1, r4
 8007bae:	f000 84ba 	beq.w	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8007bb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bb6:	2881      	cmp	r0, #129	; 0x81
 8007bb8:	f171 0100 	sbcs.w	r1, r1, #0
 8007bbc:	f082 80ea 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007bc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bc4:	2821      	cmp	r0, #33	; 0x21
 8007bc6:	f171 0100 	sbcs.w	r1, r1, #0
 8007bca:	d26f      	bcs.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007bcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bd0:	4301      	orrs	r1, r0
 8007bd2:	f002 80df 	beq.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007bd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bda:	1e42      	subs	r2, r0, #1
 8007bdc:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007be0:	2a20      	cmp	r2, #32
 8007be2:	f173 0100 	sbcs.w	r1, r3, #0
 8007be6:	f082 80d5 	bcs.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007bea:	2a1f      	cmp	r2, #31
 8007bec:	f202 80d2 	bhi.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007bf0:	a101      	add	r1, pc, #4	; (adr r1, 8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007bf2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007bf6:	bf00      	nop
 8007bf8:	08007f59 	.word	0x08007f59
 8007bfc:	08008025 	.word	0x08008025
 8007c00:	08009d95 	.word	0x08009d95
 8007c04:	080080e5 	.word	0x080080e5
 8007c08:	08009d95 	.word	0x08009d95
 8007c0c:	08009d95 	.word	0x08009d95
 8007c10:	08009d95 	.word	0x08009d95
 8007c14:	080081b5 	.word	0x080081b5
 8007c18:	08009d95 	.word	0x08009d95
 8007c1c:	08009d95 	.word	0x08009d95
 8007c20:	08009d95 	.word	0x08009d95
 8007c24:	08009d95 	.word	0x08009d95
 8007c28:	08009d95 	.word	0x08009d95
 8007c2c:	08009d95 	.word	0x08009d95
 8007c30:	08009d95 	.word	0x08009d95
 8007c34:	08008297 	.word	0x08008297
 8007c38:	08009d95 	.word	0x08009d95
 8007c3c:	08009d95 	.word	0x08009d95
 8007c40:	08009d95 	.word	0x08009d95
 8007c44:	08009d95 	.word	0x08009d95
 8007c48:	08009d95 	.word	0x08009d95
 8007c4c:	08009d95 	.word	0x08009d95
 8007c50:	08009d95 	.word	0x08009d95
 8007c54:	08009d95 	.word	0x08009d95
 8007c58:	08009d95 	.word	0x08009d95
 8007c5c:	08009d95 	.word	0x08009d95
 8007c60:	08009d95 	.word	0x08009d95
 8007c64:	08009d95 	.word	0x08009d95
 8007c68:	08009d95 	.word	0x08009d95
 8007c6c:	08009d95 	.word	0x08009d95
 8007c70:	08009d95 	.word	0x08009d95
 8007c74:	0800836d 	.word	0x0800836d
 8007c78:	80000001 	.word	0x80000001
 8007c7c:	40000001 	.word	0x40000001
 8007c80:	20000001 	.word	0x20000001
 8007c84:	10000001 	.word	0x10000001
 8007c88:	08000001 	.word	0x08000001
 8007c8c:	04000001 	.word	0x04000001
 8007c90:	00800001 	.word	0x00800001
 8007c94:	00400001 	.word	0x00400001
 8007c98:	00200001 	.word	0x00200001
 8007c9c:	00100001 	.word	0x00100001
 8007ca0:	00080001 	.word	0x00080001
 8007ca4:	00040001 	.word	0x00040001
 8007ca8:	00020001 	.word	0x00020001
 8007cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb0:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	f000 83c4 	beq.w	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007cba:	f002 b86b 	b.w	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007cbe:	4ba1      	ldr	r3, [pc, #644]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007cc4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007cd0:	d036      	beq.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007cd8:	d86b      	bhi.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ce0:	d02b      	beq.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ce8:	d863      	bhi.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cf0:	d01b      	beq.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cf8:	d85b      	bhi.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d004      	beq.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d06:	d008      	beq.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8007d08:	e053      	b.n	8007db2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d0a:	f107 0320 	add.w	r3, r7, #32
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff f8ba 	bl	8006e88 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d18:	e04e      	b.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d1a:	f107 0314 	add.w	r3, r7, #20
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff fa1c 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d28:	e046      	b.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d2a:	f107 0308 	add.w	r3, r7, #8
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff fb7e 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d38:	e03e      	b.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007d3a:	4b83      	ldr	r3, [pc, #524]	; (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007d3c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d3e:	e03b      	b.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d40:	4b80      	ldr	r3, [pc, #512]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d46:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d4c:	4b7d      	ldr	r3, [pc, #500]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d10c      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8007d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d109      	bne.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d5e:	4b79      	ldr	r3, [pc, #484]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	08db      	lsrs	r3, r3, #3
 8007d64:	f003 0303 	and.w	r3, r3, #3
 8007d68:	4a78      	ldr	r2, [pc, #480]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d70:	e01e      	b.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d72:	4b74      	ldr	r3, [pc, #464]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d7e:	d106      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d86:	d102      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007d88:	4b71      	ldr	r3, [pc, #452]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d8c:	e010      	b.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d8e:	4b6d      	ldr	r3, [pc, #436]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d9a:	d106      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8007d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007da2:	d102      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007da4:	4b6b      	ldr	r3, [pc, #428]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007da6:	637b      	str	r3, [r7, #52]	; 0x34
 8007da8:	e002      	b.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007dae:	e003      	b.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8007db0:	e002      	b.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007db6:	bf00      	nop
          }
        }
        break;
 8007db8:	f001 bfef 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007dbc:	4b61      	ldr	r3, [pc, #388]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007dbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007dc2:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8007dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dce:	d036      	beq.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dd6:	d86b      	bhi.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007dde:	d02b      	beq.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007de6:	d863      	bhi.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dee:	d01b      	beq.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007df6:	d85b      	bhi.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d004      	beq.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e04:	d008      	beq.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8007e06:	e053      	b.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e08:	f107 0320 	add.w	r3, r7, #32
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff f83b 	bl	8006e88 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e16:	e04e      	b.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e18:	f107 0314 	add.w	r3, r7, #20
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7ff f99d 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e26:	e046      	b.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e28:	f107 0308 	add.w	r3, r7, #8
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7ff faff 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e36:	e03e      	b.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007e38:	4b43      	ldr	r3, [pc, #268]	; (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007e3a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e3c:	e03b      	b.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e3e:	4b41      	ldr	r3, [pc, #260]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e44:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007e48:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e4a:	4b3e      	ldr	r3, [pc, #248]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0302 	and.w	r3, r3, #2
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d10c      	bne.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d109      	bne.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e5c:	4b39      	ldr	r3, [pc, #228]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	08db      	lsrs	r3, r3, #3
 8007e62:	f003 0303 	and.w	r3, r3, #3
 8007e66:	4a39      	ldr	r2, [pc, #228]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007e68:	fa22 f303 	lsr.w	r3, r2, r3
 8007e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e6e:	e01e      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e70:	4b34      	ldr	r3, [pc, #208]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e7c:	d106      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e84:	d102      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007e86:	4b32      	ldr	r3, [pc, #200]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007e88:	637b      	str	r3, [r7, #52]	; 0x34
 8007e8a:	e010      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e8c:	4b2d      	ldr	r3, [pc, #180]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e98:	d106      	bne.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8007e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ea0:	d102      	bne.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007ea2:	4b2c      	ldr	r3, [pc, #176]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ea6:	e002      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007eac:	e003      	b.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8007eae:	e002      	b.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007eb4:	bf00      	nop
          }
        }
        break;
 8007eb6:	f001 bf70 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007eba:	4b22      	ldr	r3, [pc, #136]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ebc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec4:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d108      	bne.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ecc:	f107 0320 	add.w	r3, r7, #32
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe ffd9 	bl	8006e88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007eda:	f001 bf5e 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee0:	2b40      	cmp	r3, #64	; 0x40
 8007ee2:	d108      	bne.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ee4:	f107 0314 	add.w	r3, r7, #20
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7ff f937 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ef2:	f001 bf52 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007efa:	f001 bf4e 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007efe:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f08:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d108      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f10:	f107 0320 	add.w	r3, r7, #32
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fe ffb7 	bl	8006e88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f1e:	f001 bf3c 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	2b80      	cmp	r3, #128	; 0x80
 8007f26:	d108      	bne.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f28:	f107 0314 	add.w	r3, r7, #20
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff f915 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f36:	f001 bf30 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f3e:	f001 bf2c 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f42:	bf00      	nop
 8007f44:	44020c00 	.word	0x44020c00
 8007f48:	00bb8000 	.word	0x00bb8000
 8007f4c:	03d09000 	.word	0x03d09000
 8007f50:	003d0900 	.word	0x003d0900
 8007f54:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007f58:	4b9d      	ldr	r3, [pc, #628]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007f5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007f5e:	f003 0307 	and.w	r3, r3, #7
 8007f62:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d104      	bne.n	8007f74 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007f6a:	f7fc ff9f 	bl	8004eac <HAL_RCC_GetPCLK2Freq>
 8007f6e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f70:	f001 bf13 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007f74:	4b96      	ldr	r3, [pc, #600]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f80:	d10a      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d107      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f88:	f107 0314 	add.w	r3, r7, #20
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7ff f8e5 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	637b      	str	r3, [r7, #52]	; 0x34
 8007f96:	e043      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8007f98:	4b8d      	ldr	r3, [pc, #564]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fa4:	d10a      	bne.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d107      	bne.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fac:	f107 0308 	add.w	r3, r7, #8
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7ff fa3d 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007fba:	e031      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007fbc:	4b84      	ldr	r3, [pc, #528]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d10c      	bne.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d109      	bne.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fce:	4b80      	ldr	r3, [pc, #512]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	08db      	lsrs	r3, r3, #3
 8007fd4:	f003 0303 	and.w	r3, r3, #3
 8007fd8:	4a7e      	ldr	r2, [pc, #504]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007fda:	fa22 f303 	lsr.w	r3, r2, r3
 8007fde:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe0:	e01e      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007fe2:	4b7b      	ldr	r3, [pc, #492]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fee:	d105      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	d102      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8007ff6:	4b78      	ldr	r3, [pc, #480]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8007ffa:	e011      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007ffc:	4b74      	ldr	r3, [pc, #464]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007ffe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	2b02      	cmp	r3, #2
 8008008:	d106      	bne.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	2b05      	cmp	r3, #5
 800800e:	d103      	bne.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8008010:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008014:	637b      	str	r3, [r7, #52]	; 0x34
 8008016:	e003      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800801c:	f001 bebd 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008020:	f001 bebb 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008024:	4b6a      	ldr	r3, [pc, #424]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008026:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800802a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800802e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	2b00      	cmp	r3, #0
 8008034:	d104      	bne.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008036:	f7fc ff23 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 800803a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800803c:	f001 bead 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8008040:	4b63      	ldr	r3, [pc, #396]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800804c:	d10a      	bne.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	2b08      	cmp	r3, #8
 8008052:	d107      	bne.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008054:	f107 0314 	add.w	r3, r7, #20
 8008058:	4618      	mov	r0, r3
 800805a:	f7ff f87f 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	637b      	str	r3, [r7, #52]	; 0x34
 8008062:	e03d      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8008064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008066:	2b10      	cmp	r3, #16
 8008068:	d108      	bne.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800806a:	f107 0308 	add.w	r3, r7, #8
 800806e:	4618      	mov	r0, r3
 8008070:	f7ff f9de 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008078:	f001 be8f 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800807c:	4b54      	ldr	r3, [pc, #336]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b02      	cmp	r3, #2
 8008086:	d10c      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	2b18      	cmp	r3, #24
 800808c:	d109      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800808e:	4b50      	ldr	r3, [pc, #320]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	08db      	lsrs	r3, r3, #3
 8008094:	f003 0303 	and.w	r3, r3, #3
 8008098:	4a4e      	ldr	r2, [pc, #312]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800809a:	fa22 f303 	lsr.w	r3, r2, r3
 800809e:	637b      	str	r3, [r7, #52]	; 0x34
 80080a0:	e01e      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80080a2:	4b4b      	ldr	r3, [pc, #300]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ae:	d105      	bne.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80080b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	d102      	bne.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80080b6:	4b48      	ldr	r3, [pc, #288]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80080b8:	637b      	str	r3, [r7, #52]	; 0x34
 80080ba:	e011      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80080bc:	4b44      	ldr	r3, [pc, #272]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80080be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080c2:	f003 0302 	and.w	r3, r3, #2
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d106      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	2b28      	cmp	r3, #40	; 0x28
 80080ce:	d103      	bne.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80080d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080d4:	637b      	str	r3, [r7, #52]	; 0x34
 80080d6:	e003      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080dc:	f001 be5d 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80080e0:	f001 be5b 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80080e4:	4b3a      	ldr	r3, [pc, #232]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80080e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80080ea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80080ee:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d104      	bne.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80080f6:	f7fc fec3 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 80080fa:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80080fc:	f001 be4d 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008100:	4b33      	ldr	r3, [pc, #204]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800810c:	d10a      	bne.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	2b40      	cmp	r3, #64	; 0x40
 8008112:	d107      	bne.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008114:	f107 0314 	add.w	r3, r7, #20
 8008118:	4618      	mov	r0, r3
 800811a:	f7ff f81f 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	637b      	str	r3, [r7, #52]	; 0x34
 8008122:	e045      	b.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008124:	4b2a      	ldr	r3, [pc, #168]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800812c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008130:	d10a      	bne.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	2b80      	cmp	r3, #128	; 0x80
 8008136:	d107      	bne.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008138:	f107 0308 	add.w	r3, r7, #8
 800813c:	4618      	mov	r0, r3
 800813e:	f7ff f977 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	637b      	str	r3, [r7, #52]	; 0x34
 8008146:	e033      	b.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008148:	4b21      	ldr	r3, [pc, #132]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b02      	cmp	r3, #2
 8008152:	d10c      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	2bc0      	cmp	r3, #192	; 0xc0
 8008158:	d109      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800815a:	4b1d      	ldr	r3, [pc, #116]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	08db      	lsrs	r3, r3, #3
 8008160:	f003 0303 	and.w	r3, r3, #3
 8008164:	4a1b      	ldr	r2, [pc, #108]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008166:	fa22 f303 	lsr.w	r3, r2, r3
 800816a:	637b      	str	r3, [r7, #52]	; 0x34
 800816c:	e020      	b.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800816e:	4b18      	ldr	r3, [pc, #96]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800817a:	d106      	bne.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008182:	d102      	bne.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8008184:	4b14      	ldr	r3, [pc, #80]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008186:	637b      	str	r3, [r7, #52]	; 0x34
 8008188:	e012      	b.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800818a:	4b11      	ldr	r3, [pc, #68]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800818c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008190:	f003 0302 	and.w	r3, r3, #2
 8008194:	2b02      	cmp	r3, #2
 8008196:	d107      	bne.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8008198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800819e:	d103      	bne.n	80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80081a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081a4:	637b      	str	r3, [r7, #52]	; 0x34
 80081a6:	e003      	b.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081ac:	f001 bdf5 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081b0:	f001 bdf3 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80081b4:	4b06      	ldr	r3, [pc, #24]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80081ba:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80081be:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10a      	bne.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80081c6:	f7fc fe5b 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 80081ca:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80081cc:	f001 bde5 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081d0:	44020c00 	.word	0x44020c00
 80081d4:	03d09000 	.word	0x03d09000
 80081d8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80081dc:	4ba0      	ldr	r3, [pc, #640]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081e8:	d10b      	bne.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081f0:	d107      	bne.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081f2:	f107 0314 	add.w	r3, r7, #20
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe ffb0 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008200:	e047      	b.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8008202:	4b97      	ldr	r3, [pc, #604]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800820a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800820e:	d10b      	bne.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8008210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008216:	d107      	bne.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008218:	f107 0308 	add.w	r3, r7, #8
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff f907 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	637b      	str	r3, [r7, #52]	; 0x34
 8008226:	e034      	b.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008228:	4b8d      	ldr	r3, [pc, #564]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0302 	and.w	r3, r3, #2
 8008230:	2b02      	cmp	r3, #2
 8008232:	d10d      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800823a:	d109      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800823c:	4b88      	ldr	r3, [pc, #544]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	08db      	lsrs	r3, r3, #3
 8008242:	f003 0303 	and.w	r3, r3, #3
 8008246:	4a87      	ldr	r2, [pc, #540]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008248:	fa22 f303 	lsr.w	r3, r2, r3
 800824c:	637b      	str	r3, [r7, #52]	; 0x34
 800824e:	e020      	b.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008250:	4b83      	ldr	r3, [pc, #524]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800825c:	d106      	bne.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008264:	d102      	bne.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8008266:	4b80      	ldr	r3, [pc, #512]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008268:	637b      	str	r3, [r7, #52]	; 0x34
 800826a:	e012      	b.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800826c:	4b7c      	ldr	r3, [pc, #496]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800826e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b02      	cmp	r3, #2
 8008278:	d107      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008280:	d103      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8008282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008286:	637b      	str	r3, [r7, #52]	; 0x34
 8008288:	e003      	b.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800828e:	f001 bd84 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008292:	f001 bd82 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008296:	4b72      	ldr	r3, [pc, #456]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008298:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800829c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80082a0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d104      	bne.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80082a8:	f7fc fdea 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 80082ac:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80082ae:	f001 bd74 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80082b2:	4b6b      	ldr	r3, [pc, #428]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082be:	d10b      	bne.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80082c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c6:	d107      	bne.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082c8:	f107 0314 	add.w	r3, r7, #20
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fe ff45 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	637b      	str	r3, [r7, #52]	; 0x34
 80082d6:	e047      	b.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80082d8:	4b61      	ldr	r3, [pc, #388]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082e4:	d10b      	bne.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80082e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ec:	d107      	bne.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ee:	f107 0308 	add.w	r3, r7, #8
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7ff f89c 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	637b      	str	r3, [r7, #52]	; 0x34
 80082fc:	e034      	b.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80082fe:	4b58      	ldr	r3, [pc, #352]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b02      	cmp	r3, #2
 8008308:	d10d      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008310:	d109      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008312:	4b53      	ldr	r3, [pc, #332]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	08db      	lsrs	r3, r3, #3
 8008318:	f003 0303 	and.w	r3, r3, #3
 800831c:	4a51      	ldr	r2, [pc, #324]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800831e:	fa22 f303 	lsr.w	r3, r2, r3
 8008322:	637b      	str	r3, [r7, #52]	; 0x34
 8008324:	e020      	b.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008326:	4b4e      	ldr	r3, [pc, #312]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800832e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008332:	d106      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800833a:	d102      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800833c:	4b4a      	ldr	r3, [pc, #296]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800833e:	637b      	str	r3, [r7, #52]	; 0x34
 8008340:	e012      	b.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008342:	4b47      	ldr	r3, [pc, #284]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008348:	f003 0302 	and.w	r3, r3, #2
 800834c:	2b02      	cmp	r3, #2
 800834e:	d107      	bne.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8008350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008352:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008356:	d103      	bne.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8008358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800835c:	637b      	str	r3, [r7, #52]	; 0x34
 800835e:	e003      	b.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8008360:	2300      	movs	r3, #0
 8008362:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008364:	f001 bd19 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008368:	f001 bd17 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800836c:	4b3c      	ldr	r3, [pc, #240]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800836e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008372:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8008376:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837a:	2b00      	cmp	r3, #0
 800837c:	d104      	bne.n	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800837e:	f7fc fd7f 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8008382:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008384:	f001 bd09 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008388:	4b35      	ldr	r3, [pc, #212]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008394:	d10b      	bne.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8008396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800839c:	d107      	bne.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800839e:	f107 0314 	add.w	r3, r7, #20
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fe feda 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	637b      	str	r3, [r7, #52]	; 0x34
 80083ac:	e047      	b.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80083ae:	4b2c      	ldr	r3, [pc, #176]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ba:	d10b      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083c2:	d107      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083c4:	f107 0308 	add.w	r3, r7, #8
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7ff f831 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	637b      	str	r3, [r7, #52]	; 0x34
 80083d2:	e034      	b.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80083d4:	4b22      	ldr	r3, [pc, #136]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 0302 	and.w	r3, r3, #2
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d10d      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80083e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e2:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80083e6:	d109      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083e8:	4b1d      	ldr	r3, [pc, #116]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	08db      	lsrs	r3, r3, #3
 80083ee:	f003 0303 	and.w	r3, r3, #3
 80083f2:	4a1c      	ldr	r2, [pc, #112]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80083f4:	fa22 f303 	lsr.w	r3, r2, r3
 80083f8:	637b      	str	r3, [r7, #52]	; 0x34
 80083fa:	e020      	b.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80083fc:	4b18      	ldr	r3, [pc, #96]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008408:	d106      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008410:	d102      	bne.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8008412:	4b15      	ldr	r3, [pc, #84]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008414:	637b      	str	r3, [r7, #52]	; 0x34
 8008416:	e012      	b.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008418:	4b11      	ldr	r3, [pc, #68]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800841a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800841e:	f003 0302 	and.w	r3, r3, #2
 8008422:	2b02      	cmp	r3, #2
 8008424:	d107      	bne.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800842c:	d103      	bne.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800842e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008432:	637b      	str	r3, [r7, #52]	; 0x34
 8008434:	e003      	b.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800843a:	f001 bcae 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800843e:	f001 bcac 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8008442:	4b07      	ldr	r3, [pc, #28]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008444:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008448:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 800844c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10b      	bne.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008454:	f7fc fd14 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8008458:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800845a:	f001 bc9e 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800845e:	bf00      	nop
 8008460:	44020c00 	.word	0x44020c00
 8008464:	03d09000 	.word	0x03d09000
 8008468:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800846c:	4ba0      	ldr	r3, [pc, #640]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008478:	d10b      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008480:	d107      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008482:	f107 0314 	add.w	r3, r7, #20
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fe68 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	637b      	str	r3, [r7, #52]	; 0x34
 8008490:	e047      	b.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8008492:	4b97      	ldr	r3, [pc, #604]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800849a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800849e:	d10b      	bne.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80084a6:	d107      	bne.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084a8:	f107 0308 	add.w	r3, r7, #8
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fe ffbf 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	637b      	str	r3, [r7, #52]	; 0x34
 80084b6:	e034      	b.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80084b8:	4b8d      	ldr	r3, [pc, #564]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d10d      	bne.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80084c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80084ca:	d109      	bne.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084cc:	4b88      	ldr	r3, [pc, #544]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	08db      	lsrs	r3, r3, #3
 80084d2:	f003 0303 	and.w	r3, r3, #3
 80084d6:	4a87      	ldr	r2, [pc, #540]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80084d8:	fa22 f303 	lsr.w	r3, r2, r3
 80084dc:	637b      	str	r3, [r7, #52]	; 0x34
 80084de:	e020      	b.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80084e0:	4b83      	ldr	r3, [pc, #524]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084ec:	d106      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80084ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084f4:	d102      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80084f6:	4b80      	ldr	r3, [pc, #512]	; (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80084f8:	637b      	str	r3, [r7, #52]	; 0x34
 80084fa:	e012      	b.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80084fc:	4b7c      	ldr	r3, [pc, #496]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80084fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008502:	f003 0302 	and.w	r3, r3, #2
 8008506:	2b02      	cmp	r3, #2
 8008508:	d107      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008510:	d103      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8008512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008516:	637b      	str	r3, [r7, #52]	; 0x34
 8008518:	e003      	b.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800851a:	2300      	movs	r3, #0
 800851c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800851e:	f001 bc3c 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008522:	f001 bc3a 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8008526:	4b72      	ldr	r3, [pc, #456]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008528:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800852c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008530:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	2b00      	cmp	r3, #0
 8008536:	d104      	bne.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008538:	f7fc fca2 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 800853c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800853e:	f001 bc2c 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008542:	4b6b      	ldr	r3, [pc, #428]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800854a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800854e:	d10b      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008556:	d107      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008558:	f107 0314 	add.w	r3, r7, #20
 800855c:	4618      	mov	r0, r3
 800855e:	f7fe fdfd 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	637b      	str	r3, [r7, #52]	; 0x34
 8008566:	e047      	b.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008568:	4b61      	ldr	r3, [pc, #388]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008574:	d10b      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800857c:	d107      	bne.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800857e:	f107 0308 	add.w	r3, r7, #8
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe ff54 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	637b      	str	r3, [r7, #52]	; 0x34
 800858c:	e034      	b.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800858e:	4b58      	ldr	r3, [pc, #352]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0302 	and.w	r3, r3, #2
 8008596:	2b02      	cmp	r3, #2
 8008598:	d10d      	bne.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800859a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085a0:	d109      	bne.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085a2:	4b53      	ldr	r3, [pc, #332]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	08db      	lsrs	r3, r3, #3
 80085a8:	f003 0303 	and.w	r3, r3, #3
 80085ac:	4a51      	ldr	r2, [pc, #324]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80085ae:	fa22 f303 	lsr.w	r3, r2, r3
 80085b2:	637b      	str	r3, [r7, #52]	; 0x34
 80085b4:	e020      	b.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80085b6:	4b4e      	ldr	r3, [pc, #312]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085c2:	d106      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085ca:	d102      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80085cc:	4b4a      	ldr	r3, [pc, #296]	; (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80085ce:	637b      	str	r3, [r7, #52]	; 0x34
 80085d0:	e012      	b.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80085d2:	4b47      	ldr	r3, [pc, #284]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80085d8:	f003 0302 	and.w	r3, r3, #2
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d107      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80085e6:	d103      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80085e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ec:	637b      	str	r3, [r7, #52]	; 0x34
 80085ee:	e003      	b.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085f4:	f001 bbd1 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80085f8:	f001 bbcf 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80085fc:	4b3c      	ldr	r3, [pc, #240]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008602:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008606:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	2b00      	cmp	r3, #0
 800860c:	d104      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800860e:	f7fc fc37 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8008612:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008614:	f001 bbc1 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008618:	4b35      	ldr	r3, [pc, #212]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008624:	d10b      	bne.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800862c:	d107      	bne.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800862e:	f107 0314 	add.w	r3, r7, #20
 8008632:	4618      	mov	r0, r3
 8008634:	f7fe fd92 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	637b      	str	r3, [r7, #52]	; 0x34
 800863c:	e047      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800863e:	4b2c      	ldr	r3, [pc, #176]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800864a:	d10b      	bne.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800864c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008652:	d107      	bne.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008654:	f107 0308 	add.w	r3, r7, #8
 8008658:	4618      	mov	r0, r3
 800865a:	f7fe fee9 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	637b      	str	r3, [r7, #52]	; 0x34
 8008662:	e034      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008664:	4b22      	ldr	r3, [pc, #136]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0302 	and.w	r3, r3, #2
 800866c:	2b02      	cmp	r3, #2
 800866e:	d10d      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008672:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008676:	d109      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008678:	4b1d      	ldr	r3, [pc, #116]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	08db      	lsrs	r3, r3, #3
 800867e:	f003 0303 	and.w	r3, r3, #3
 8008682:	4a1c      	ldr	r2, [pc, #112]	; (80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008684:	fa22 f303 	lsr.w	r3, r2, r3
 8008688:	637b      	str	r3, [r7, #52]	; 0x34
 800868a:	e020      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800868c:	4b18      	ldr	r3, [pc, #96]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008698:	d106      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086a0:	d102      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80086a2:	4b15      	ldr	r3, [pc, #84]	; (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80086a4:	637b      	str	r3, [r7, #52]	; 0x34
 80086a6:	e012      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80086a8:	4b11      	ldr	r3, [pc, #68]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086ae:	f003 0302 	and.w	r3, r3, #2
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d107      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80086bc:	d103      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80086be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086c2:	637b      	str	r3, [r7, #52]	; 0x34
 80086c4:	e003      	b.n	80086ce <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086ca:	f001 bb66 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086ce:	f001 bb64 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80086d2:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80086d8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 80086dc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10b      	bne.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80086e4:	f7fc fbcc 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 80086e8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80086ea:	f001 bb56 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086ee:	bf00      	nop
 80086f0:	44020c00 	.word	0x44020c00
 80086f4:	03d09000 	.word	0x03d09000
 80086f8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80086fc:	4ba1      	ldr	r3, [pc, #644]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008704:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008708:	d10b      	bne.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008710:	d107      	bne.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008712:	f107 0314 	add.w	r3, r7, #20
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe fd20 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	637b      	str	r3, [r7, #52]	; 0x34
 8008720:	e047      	b.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8008722:	4b98      	ldr	r3, [pc, #608]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800872a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800872e:	d10b      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8008730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008736:	d107      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008738:	f107 0308 	add.w	r3, r7, #8
 800873c:	4618      	mov	r0, r3
 800873e:	f7fe fe77 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	637b      	str	r3, [r7, #52]	; 0x34
 8008746:	e034      	b.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8008748:	4b8e      	ldr	r3, [pc, #568]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0302 	and.w	r3, r3, #2
 8008750:	2b02      	cmp	r3, #2
 8008752:	d10d      	bne.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8008754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008756:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800875a:	d109      	bne.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800875c:	4b89      	ldr	r3, [pc, #548]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	08db      	lsrs	r3, r3, #3
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	4a88      	ldr	r2, [pc, #544]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008768:	fa22 f303 	lsr.w	r3, r2, r3
 800876c:	637b      	str	r3, [r7, #52]	; 0x34
 800876e:	e020      	b.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8008770:	4b84      	ldr	r3, [pc, #528]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800877c:	d106      	bne.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800877e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008784:	d102      	bne.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8008786:	4b81      	ldr	r3, [pc, #516]	; (800898c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008788:	637b      	str	r3, [r7, #52]	; 0x34
 800878a:	e012      	b.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800878c:	4b7d      	ldr	r3, [pc, #500]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800878e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b02      	cmp	r3, #2
 8008798:	d107      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800879a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80087a0:	d103      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80087a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a6:	637b      	str	r3, [r7, #52]	; 0x34
 80087a8:	e003      	b.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80087aa:	2300      	movs	r3, #0
 80087ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087ae:	f001 baf4 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80087b2:	f001 baf2 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80087b6:	4b73      	ldr	r3, [pc, #460]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80087bc:	f003 0307 	and.w	r3, r3, #7
 80087c0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80087c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d104      	bne.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80087c8:	f7fc fb5a 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 80087cc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80087ce:	f001 bae4 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80087d2:	4b6c      	ldr	r3, [pc, #432]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087de:	d10a      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80087e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d107      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087e6:	f107 0314 	add.w	r3, r7, #20
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fe fcb6 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	637b      	str	r3, [r7, #52]	; 0x34
 80087f4:	e043      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80087f6:	4b63      	ldr	r3, [pc, #396]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008802:	d10a      	bne.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8008804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008806:	2b02      	cmp	r3, #2
 8008808:	d107      	bne.n	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800880a:	f107 0308 	add.w	r3, r7, #8
 800880e:	4618      	mov	r0, r3
 8008810:	f7fe fe0e 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	637b      	str	r3, [r7, #52]	; 0x34
 8008818:	e031      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800881a:	4b5a      	ldr	r3, [pc, #360]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0302 	and.w	r3, r3, #2
 8008822:	2b02      	cmp	r3, #2
 8008824:	d10c      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	2b03      	cmp	r3, #3
 800882a:	d109      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800882c:	4b55      	ldr	r3, [pc, #340]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	08db      	lsrs	r3, r3, #3
 8008832:	f003 0303 	and.w	r3, r3, #3
 8008836:	4a54      	ldr	r2, [pc, #336]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008838:	fa22 f303 	lsr.w	r3, r2, r3
 800883c:	637b      	str	r3, [r7, #52]	; 0x34
 800883e:	e01e      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8008840:	4b50      	ldr	r3, [pc, #320]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800884c:	d105      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008850:	2b04      	cmp	r3, #4
 8008852:	d102      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8008854:	4b4d      	ldr	r3, [pc, #308]	; (800898c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008856:	637b      	str	r3, [r7, #52]	; 0x34
 8008858:	e011      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800885a:	4b4a      	ldr	r3, [pc, #296]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800885c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008860:	f003 0302 	and.w	r3, r3, #2
 8008864:	2b02      	cmp	r3, #2
 8008866:	d106      	bne.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886a:	2b05      	cmp	r3, #5
 800886c:	d103      	bne.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800886e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008872:	637b      	str	r3, [r7, #52]	; 0x34
 8008874:	e003      	b.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8008876:	2300      	movs	r3, #0
 8008878:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800887a:	f001 ba8e 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800887e:	f001 ba8c 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8008882:	4b40      	ldr	r3, [pc, #256]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008884:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800888c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	2b00      	cmp	r3, #0
 8008892:	d104      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008894:	f7fc faf4 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8008898:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800889a:	f001 ba7e 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800889e:	4b39      	ldr	r3, [pc, #228]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088aa:	d10a      	bne.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	2b10      	cmp	r3, #16
 80088b0:	d107      	bne.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088b2:	f107 0314 	add.w	r3, r7, #20
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe fc50 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	637b      	str	r3, [r7, #52]	; 0x34
 80088c0:	e043      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80088c2:	4b30      	ldr	r3, [pc, #192]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088ce:	d10a      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80088d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d2:	2b20      	cmp	r3, #32
 80088d4:	d107      	bne.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088d6:	f107 0308 	add.w	r3, r7, #8
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fe fda8 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	637b      	str	r3, [r7, #52]	; 0x34
 80088e4:	e031      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80088e6:	4b27      	ldr	r3, [pc, #156]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d10c      	bne.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80088f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f4:	2b30      	cmp	r3, #48	; 0x30
 80088f6:	d109      	bne.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088f8:	4b22      	ldr	r3, [pc, #136]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	08db      	lsrs	r3, r3, #3
 80088fe:	f003 0303 	and.w	r3, r3, #3
 8008902:	4a21      	ldr	r2, [pc, #132]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008904:	fa22 f303 	lsr.w	r3, r2, r3
 8008908:	637b      	str	r3, [r7, #52]	; 0x34
 800890a:	e01e      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800890c:	4b1d      	ldr	r3, [pc, #116]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008918:	d105      	bne.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	2b40      	cmp	r3, #64	; 0x40
 800891e:	d102      	bne.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8008920:	4b1a      	ldr	r3, [pc, #104]	; (800898c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008922:	637b      	str	r3, [r7, #52]	; 0x34
 8008924:	e011      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8008926:	4b17      	ldr	r3, [pc, #92]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800892c:	f003 0302 	and.w	r3, r3, #2
 8008930:	2b02      	cmp	r3, #2
 8008932:	d106      	bne.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8008934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008936:	2b50      	cmp	r3, #80	; 0x50
 8008938:	d103      	bne.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800893a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800893e:	637b      	str	r3, [r7, #52]	; 0x34
 8008940:	e003      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008946:	f001 ba28 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800894a:	f001 ba26 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800894e:	4b0d      	ldr	r3, [pc, #52]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008954:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008958:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800895a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895c:	2b00      	cmp	r3, #0
 800895e:	d104      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008960:	f7fc faba 	bl	8004ed8 <HAL_RCC_GetPCLK3Freq>
 8008964:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008966:	f001 ba18 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800896a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008970:	d10e      	bne.n	8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008972:	f107 0314 	add.w	r3, r7, #20
 8008976:	4618      	mov	r0, r3
 8008978:	f7fe fbf0 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008980:	f001 ba0b 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008984:	44020c00 	.word	0x44020c00
 8008988:	03d09000 	.word	0x03d09000
 800898c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008996:	d108      	bne.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008998:	f107 0308 	add.w	r3, r7, #8
 800899c:	4618      	mov	r0, r3
 800899e:	f7fe fd47 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089a6:	f001 b9f8 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80089aa:	4ba4      	ldr	r3, [pc, #656]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d10d      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80089b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80089bc:	d109      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089be:	4b9f      	ldr	r3, [pc, #636]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	08db      	lsrs	r3, r3, #3
 80089c4:	f003 0303 	and.w	r3, r3, #3
 80089c8:	4a9d      	ldr	r2, [pc, #628]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80089ca:	fa22 f303 	lsr.w	r3, r2, r3
 80089ce:	637b      	str	r3, [r7, #52]	; 0x34
 80089d0:	e020      	b.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80089d2:	4b9a      	ldr	r3, [pc, #616]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089de:	d106      	bne.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089e6:	d102      	bne.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80089e8:	4b96      	ldr	r3, [pc, #600]	; (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80089ea:	637b      	str	r3, [r7, #52]	; 0x34
 80089ec:	e012      	b.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80089ee:	4b93      	ldr	r3, [pc, #588]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80089f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d107      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008a02:	d103      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8008a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a08:	637b      	str	r3, [r7, #52]	; 0x34
 8008a0a:	e003      	b.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a10:	f001 b9c3 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a14:	f001 b9c1 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008a18:	4b88      	ldr	r3, [pc, #544]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008a1e:	f003 0307 	and.w	r3, r3, #7
 8008a22:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d104      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008a2a:	f7fc fa0d 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8008a2e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008a30:	f001 b9b3 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d104      	bne.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8008a3a:	f7fc f8d9 	bl	8004bf0 <HAL_RCC_GetSysClockFreq>
 8008a3e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008a40:	f001 b9ab 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d108      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a4a:	f107 0314 	add.w	r3, r7, #20
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fe fb84 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a58:	f001 b99f 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008a5c:	4b77      	ldr	r3, [pc, #476]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a68:	d105      	bne.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	2b03      	cmp	r3, #3
 8008a6e:	d102      	bne.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8008a70:	4b75      	ldr	r3, [pc, #468]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8008a72:	637b      	str	r3, [r7, #52]	; 0x34
 8008a74:	e023      	b.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008a76:	4b71      	ldr	r3, [pc, #452]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0302 	and.w	r3, r3, #2
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d10c      	bne.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8008a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a84:	2b04      	cmp	r3, #4
 8008a86:	d109      	bne.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a88:	4b6c      	ldr	r3, [pc, #432]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	08db      	lsrs	r3, r3, #3
 8008a8e:	f003 0303 	and.w	r3, r3, #3
 8008a92:	4a6b      	ldr	r2, [pc, #428]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008a94:	fa22 f303 	lsr.w	r3, r2, r3
 8008a98:	637b      	str	r3, [r7, #52]	; 0x34
 8008a9a:	e010      	b.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008a9c:	4b67      	ldr	r3, [pc, #412]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aa8:	d105      	bne.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	2b05      	cmp	r3, #5
 8008aae:	d102      	bne.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008ab0:	4b64      	ldr	r3, [pc, #400]	; (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ab4:	e003      	b.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008aba:	f001 b96e 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008abe:	f001 b96c 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008ac2:	4b5e      	ldr	r3, [pc, #376]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008ac8:	f003 0308 	and.w	r3, r3, #8
 8008acc:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008ace:	4b5b      	ldr	r3, [pc, #364]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ad4:	f003 0302 	and.w	r3, r3, #2
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d106      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8008adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d103      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8008ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ae8:	e012      	b.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008aea:	4b54      	ldr	r3, [pc, #336]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008af4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008af8:	d106      	bne.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	2b08      	cmp	r3, #8
 8008afe:	d103      	bne.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8008b00:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008b04:	637b      	str	r3, [r7, #52]	; 0x34
 8008b06:	e003      	b.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008b0c:	f001 b945 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b10:	f001 b943 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008b14:	4b49      	ldr	r3, [pc, #292]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008b1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b1e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d104      	bne.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b26:	f7fc f9ab 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8008b2a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b2c:	f001 b935 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b36:	d108      	bne.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b38:	f107 0308 	add.w	r3, r7, #8
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fe fc77 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b46:	f001 b928 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008b4a:	4b3c      	ldr	r3, [pc, #240]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d10d      	bne.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b5c:	d109      	bne.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b5e:	4b37      	ldr	r3, [pc, #220]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	08db      	lsrs	r3, r3, #3
 8008b64:	f003 0303 	and.w	r3, r3, #3
 8008b68:	4a35      	ldr	r2, [pc, #212]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8008b70:	e011      	b.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008b72:	4b32      	ldr	r3, [pc, #200]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b7e:	d106      	bne.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8008b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b86:	d102      	bne.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8008b88:	4b2e      	ldr	r3, [pc, #184]	; (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8008b8c:	e003      	b.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b92:	f001 b902 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b96:	f001 b900 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008b9a:	4b28      	ldr	r3, [pc, #160]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008ba0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008ba4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d104      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008bac:	f7fc f968 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8008bb0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008bb2:	f001 b8f2 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008bbc:	d108      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bbe:	f107 0308 	add.w	r3, r7, #8
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fe fc34 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bcc:	f001 b8e5 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008bd0:	4b1a      	ldr	r3, [pc, #104]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d10d      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bde:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008be2:	d109      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008be4:	4b15      	ldr	r3, [pc, #84]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	08db      	lsrs	r3, r3, #3
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	4a14      	ldr	r2, [pc, #80]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf6:	e011      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008bf8:	4b10      	ldr	r3, [pc, #64]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c04:	d106      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008c0c:	d102      	bne.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8008c0e:	4b0d      	ldr	r3, [pc, #52]	; (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008c10:	637b      	str	r3, [r7, #52]	; 0x34
 8008c12:	e003      	b.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c18:	f001 b8bf 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c1c:	f001 b8bd 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008c20:	4b06      	ldr	r3, [pc, #24]	; (8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008c26:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008c2a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10c      	bne.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008c32:	f7fc f951 	bl	8004ed8 <HAL_RCC_GetPCLK3Freq>
 8008c36:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c38:	f001 b8af 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c3c:	44020c00 	.word	0x44020c00
 8008c40:	03d09000 	.word	0x03d09000
 8008c44:	003d0900 	.word	0x003d0900
 8008c48:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c52:	d108      	bne.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c54:	f107 0308 	add.w	r3, r7, #8
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fe fbe9 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c62:	f001 b89a 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008c66:	4b9f      	ldr	r3, [pc, #636]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 0302 	and.w	r3, r3, #2
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d10d      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c78:	d109      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c7a:	4b9a      	ldr	r3, [pc, #616]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	08db      	lsrs	r3, r3, #3
 8008c80:	f003 0303 	and.w	r3, r3, #3
 8008c84:	4a98      	ldr	r2, [pc, #608]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008c86:	fa22 f303 	lsr.w	r3, r2, r3
 8008c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c8c:	e011      	b.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008c8e:	4b95      	ldr	r3, [pc, #596]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c9a:	d106      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ca2:	d102      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008ca4:	4b91      	ldr	r3, [pc, #580]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ca8:	e003      	b.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8008caa:	2300      	movs	r3, #0
 8008cac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008cae:	f001 b874 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008cb2:	f001 b872 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008cb6:	4b8b      	ldr	r3, [pc, #556]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008cb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008cbc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008cc0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d104      	bne.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008cc8:	f7fc f906 	bl	8004ed8 <HAL_RCC_GetPCLK3Freq>
 8008ccc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008cce:	f001 b864 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cd8:	d108      	bne.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cda:	f107 0308 	add.w	r3, r7, #8
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fe fba6 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ce8:	f001 b857 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008cec:	4b7d      	ldr	r3, [pc, #500]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0302 	and.w	r3, r3, #2
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d10d      	bne.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cfe:	d109      	bne.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d00:	4b78      	ldr	r3, [pc, #480]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	08db      	lsrs	r3, r3, #3
 8008d06:	f003 0303 	and.w	r3, r3, #3
 8008d0a:	4a77      	ldr	r2, [pc, #476]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d10:	637b      	str	r3, [r7, #52]	; 0x34
 8008d12:	e011      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008d14:	4b73      	ldr	r3, [pc, #460]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d20:	d106      	bne.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8008d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008d28:	d102      	bne.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8008d2a:	4b70      	ldr	r3, [pc, #448]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d2e:	e003      	b.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d34:	f001 b831 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d38:	f001 b82f 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008d3c:	4b69      	ldr	r3, [pc, #420]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d42:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008d46:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d104      	bne.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d4e:	f7fc f897 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8008d52:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008d54:	f001 b821 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d5e:	d108      	bne.n	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d60:	f107 0308 	add.w	r3, r7, #8
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fe fb63 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d6e:	f001 b814 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008d72:	4b5c      	ldr	r3, [pc, #368]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 0302 	and.w	r3, r3, #2
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d10e      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d84:	d10a      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d86:	4b57      	ldr	r3, [pc, #348]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	08db      	lsrs	r3, r3, #3
 8008d8c:	f003 0303 	and.w	r3, r3, #3
 8008d90:	4a55      	ldr	r2, [pc, #340]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008d92:	fa22 f303 	lsr.w	r3, r2, r3
 8008d96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d98:	f000 bfff 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008da0:	f000 bffb 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008da4:	4b4f      	ldr	r3, [pc, #316]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008da6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008daa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008dae:	633b      	str	r3, [r7, #48]	; 0x30
 8008db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008db6:	d056      	beq.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8008db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008dbe:	f200 808b 	bhi.w	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dc8:	d03e      	beq.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dd0:	f200 8082 	bhi.w	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dda:	d027      	beq.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008de2:	d879      	bhi.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dea:	d017      	beq.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8008dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008df2:	d871      	bhi.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d004      	beq.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e00:	d004      	beq.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8008e02:	e069      	b.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008e04:	f7fc f868 	bl	8004ed8 <HAL_RCC_GetPCLK3Freq>
 8008e08:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008e0a:	e068      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e0c:	f107 0314 	add.w	r3, r7, #20
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fe f9a3 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008e1a:	e060      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e1c:	f107 0308 	add.w	r3, r7, #8
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7fe fb05 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008e2a:	e058      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008e2c:	4b2d      	ldr	r3, [pc, #180]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d103      	bne.n	8008e42 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8008e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e3e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008e40:	e04d      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008e42:	2300      	movs	r3, #0
 8008e44:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008e46:	e04a      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008e48:	4b26      	ldr	r3, [pc, #152]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e56:	d103      	bne.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8008e58:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008e5c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008e5e:	e03e      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008e60:	2300      	movs	r3, #0
 8008e62:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008e64:	e03b      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e66:	4b1f      	ldr	r3, [pc, #124]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008e6c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008e70:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e72:	4b1c      	ldr	r3, [pc, #112]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 0302 	and.w	r3, r3, #2
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d10c      	bne.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8008e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d109      	bne.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e84:	4b17      	ldr	r3, [pc, #92]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	08db      	lsrs	r3, r3, #3
 8008e8a:	f003 0303 	and.w	r3, r3, #3
 8008e8e:	4a16      	ldr	r2, [pc, #88]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008e90:	fa22 f303 	lsr.w	r3, r2, r3
 8008e94:	637b      	str	r3, [r7, #52]	; 0x34
 8008e96:	e01e      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e98:	4b12      	ldr	r3, [pc, #72]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ea4:	d106      	bne.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eac:	d102      	bne.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008eae:	4b0f      	ldr	r3, [pc, #60]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8008eb2:	e010      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008eb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ec0:	d106      	bne.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8008ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ec8:	d102      	bne.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008eca:	4b09      	ldr	r3, [pc, #36]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8008ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8008ece:	e002      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008ed4:	e003      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8008ed6:	e002      	b.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008edc:	bf00      	nop
          }
        }
        break;
 8008ede:	f000 bf5c 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ee2:	bf00      	nop
 8008ee4:	44020c00 	.word	0x44020c00
 8008ee8:	03d09000 	.word	0x03d09000
 8008eec:	003d0900 	.word	0x003d0900
 8008ef0:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008ef4:	4b9e      	ldr	r3, [pc, #632]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008ef6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008efa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008efe:	633b      	str	r3, [r7, #48]	; 0x30
 8008f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f02:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008f06:	d056      	beq.n	8008fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008f0e:	f200 808b 	bhi.w	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f18:	d03e      	beq.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f20:	f200 8082 	bhi.w	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f2a:	d027      	beq.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f32:	d879      	bhi.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f3a:	d017      	beq.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f42:	d871      	bhi.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d004      	beq.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f50:	d004      	beq.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8008f52:	e069      	b.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008f54:	f7fb ff94 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8008f58:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008f5a:	e068      	b.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f5c:	f107 0314 	add.w	r3, r7, #20
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe f8fb 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008f6a:	e060      	b.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f6c:	f107 0308 	add.w	r3, r7, #8
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe fa5d 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008f7a:	e058      	b.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f7c:	4b7c      	ldr	r3, [pc, #496]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008f7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f82:	f003 0302 	and.w	r3, r3, #2
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d103      	bne.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8008f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f8e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f90:	e04d      	b.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008f92:	2300      	movs	r3, #0
 8008f94:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008f96:	e04a      	b.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008f98:	4b75      	ldr	r3, [pc, #468]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008f9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fa6:	d103      	bne.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8008fa8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008fac:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008fae:	e03e      	b.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008fb4:	e03b      	b.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008fb6:	4b6e      	ldr	r3, [pc, #440]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008fb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008fbc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008fc0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fc2:	4b6b      	ldr	r3, [pc, #428]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d10c      	bne.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8008fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d109      	bne.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fd4:	4b66      	ldr	r3, [pc, #408]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	08db      	lsrs	r3, r3, #3
 8008fda:	f003 0303 	and.w	r3, r3, #3
 8008fde:	4a65      	ldr	r2, [pc, #404]	; (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8008fe6:	e01e      	b.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fe8:	4b61      	ldr	r3, [pc, #388]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ff4:	d106      	bne.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8008ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ffc:	d102      	bne.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008ffe:	4b5e      	ldr	r3, [pc, #376]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009000:	637b      	str	r3, [r7, #52]	; 0x34
 8009002:	e010      	b.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009004:	4b5a      	ldr	r3, [pc, #360]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800900c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009010:	d106      	bne.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8009012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009018:	d102      	bne.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800901a:	4b58      	ldr	r3, [pc, #352]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800901c:	637b      	str	r3, [r7, #52]	; 0x34
 800901e:	e002      	b.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009024:	e003      	b.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8009026:	e002      	b.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8009028:	2300      	movs	r3, #0
 800902a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800902c:	bf00      	nop
          }
        }
        break;
 800902e:	f000 beb4 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009032:	4b4f      	ldr	r3, [pc, #316]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009034:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009038:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800903c:	633b      	str	r3, [r7, #48]	; 0x30
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009044:	d056      	beq.n	80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8009046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800904c:	f200 808b 	bhi.w	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009056:	d03e      	beq.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8009058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800905e:	f200 8082 	bhi.w	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009068:	d027      	beq.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009070:	d879      	bhi.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009078:	d017      	beq.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009080:	d871      	bhi.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009084:	2b00      	cmp	r3, #0
 8009086:	d004      	beq.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8009088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800908e:	d004      	beq.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8009090:	e069      	b.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009092:	f7fb ff21 	bl	8004ed8 <HAL_RCC_GetPCLK3Freq>
 8009096:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009098:	e068      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800909a:	f107 0314 	add.w	r3, r7, #20
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe f85c 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80090a8:	e060      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090aa:	f107 0308 	add.w	r3, r7, #8
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fe f9be 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80090b8:	e058      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80090ba:	4b2d      	ldr	r3, [pc, #180]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80090bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090c0:	f003 0302 	and.w	r3, r3, #2
 80090c4:	2b02      	cmp	r3, #2
 80090c6:	d103      	bne.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80090c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090cc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80090ce:	e04d      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80090d0:	2300      	movs	r3, #0
 80090d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80090d4:	e04a      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80090d6:	4b26      	ldr	r3, [pc, #152]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80090d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090e4:	d103      	bne.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80090e6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80090ea:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80090ec:	e03e      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80090f2:	e03b      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090f4:	4b1e      	ldr	r3, [pc, #120]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80090f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80090fa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80090fe:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009100:	4b1b      	ldr	r3, [pc, #108]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0302 	and.w	r3, r3, #2
 8009108:	2b02      	cmp	r3, #2
 800910a:	d10c      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800910c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910e:	2b00      	cmp	r3, #0
 8009110:	d109      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009112:	4b17      	ldr	r3, [pc, #92]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	08db      	lsrs	r3, r3, #3
 8009118:	f003 0303 	and.w	r3, r3, #3
 800911c:	4a15      	ldr	r2, [pc, #84]	; (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800911e:	fa22 f303 	lsr.w	r3, r2, r3
 8009122:	637b      	str	r3, [r7, #52]	; 0x34
 8009124:	e01e      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009126:	4b12      	ldr	r3, [pc, #72]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800912e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009132:	d106      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8009134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800913a:	d102      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800913c:	4b0e      	ldr	r3, [pc, #56]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800913e:	637b      	str	r3, [r7, #52]	; 0x34
 8009140:	e010      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009142:	4b0b      	ldr	r3, [pc, #44]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800914a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800914e:	d106      	bne.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8009150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009152:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009156:	d102      	bne.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009158:	4b08      	ldr	r3, [pc, #32]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800915a:	637b      	str	r3, [r7, #52]	; 0x34
 800915c:	e002      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800915e:	2300      	movs	r3, #0
 8009160:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009162:	e003      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8009164:	e002      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8009166:	2300      	movs	r3, #0
 8009168:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800916a:	bf00      	nop
          }
        }
        break;
 800916c:	f000 be15 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009170:	44020c00 	.word	0x44020c00
 8009174:	03d09000 	.word	0x03d09000
 8009178:	003d0900 	.word	0x003d0900
 800917c:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009180:	4b9e      	ldr	r3, [pc, #632]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009182:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009186:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800918a:	633b      	str	r3, [r7, #48]	; 0x30
 800918c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009192:	d056      	beq.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009196:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800919a:	f200 808b 	bhi.w	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091a4:	d03e      	beq.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80091a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091ac:	f200 8082 	bhi.w	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80091b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091b6:	d027      	beq.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80091b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091be:	d879      	bhi.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80091c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091c6:	d017      	beq.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80091c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091ce:	d871      	bhi.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80091d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d004      	beq.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80091d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091dc:	d004      	beq.n	80091e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80091de:	e069      	b.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80091e0:	f7fb fe7a 	bl	8004ed8 <HAL_RCC_GetPCLK3Freq>
 80091e4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80091e6:	e068      	b.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091e8:	f107 0314 	add.w	r3, r7, #20
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fd ffb5 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80091f6:	e060      	b.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091f8:	f107 0308 	add.w	r3, r7, #8
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fe f917 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009206:	e058      	b.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009208:	4b7c      	ldr	r3, [pc, #496]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800920a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b02      	cmp	r3, #2
 8009214:	d103      	bne.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8009216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800921a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800921c:	e04d      	b.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800921e:	2300      	movs	r3, #0
 8009220:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009222:	e04a      	b.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009224:	4b75      	ldr	r3, [pc, #468]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800922a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800922e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009232:	d103      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8009234:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009238:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800923a:	e03e      	b.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009240:	e03b      	b.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009242:	4b6e      	ldr	r3, [pc, #440]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009244:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009248:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800924c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800924e:	4b6b      	ldr	r3, [pc, #428]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b02      	cmp	r3, #2
 8009258:	d10c      	bne.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800925a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925c:	2b00      	cmp	r3, #0
 800925e:	d109      	bne.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009260:	4b66      	ldr	r3, [pc, #408]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	08db      	lsrs	r3, r3, #3
 8009266:	f003 0303 	and.w	r3, r3, #3
 800926a:	4a65      	ldr	r2, [pc, #404]	; (8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800926c:	fa22 f303 	lsr.w	r3, r2, r3
 8009270:	637b      	str	r3, [r7, #52]	; 0x34
 8009272:	e01e      	b.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009274:	4b61      	ldr	r3, [pc, #388]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800927c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009280:	d106      	bne.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8009282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009288:	d102      	bne.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800928a:	4b5e      	ldr	r3, [pc, #376]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800928c:	637b      	str	r3, [r7, #52]	; 0x34
 800928e:	e010      	b.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009290:	4b5a      	ldr	r3, [pc, #360]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800929c:	d106      	bne.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800929e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092a4:	d102      	bne.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80092a6:	4b58      	ldr	r3, [pc, #352]	; (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80092a8:	637b      	str	r3, [r7, #52]	; 0x34
 80092aa:	e002      	b.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80092b0:	e003      	b.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80092b2:	e002      	b.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80092b4:	2300      	movs	r3, #0
 80092b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80092b8:	bf00      	nop
          }
        }
        break;
 80092ba:	f000 bd6e 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80092be:	4b4f      	ldr	r3, [pc, #316]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80092c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80092c4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80092c8:	633b      	str	r3, [r7, #48]	; 0x30
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80092d0:	d056      	beq.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80092d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80092d8:	f200 808b 	bhi.w	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092e2:	d03e      	beq.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092ea:	f200 8082 	bhi.w	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80092ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092f4:	d027      	beq.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80092f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092fc:	d879      	bhi.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80092fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009300:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009304:	d017      	beq.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8009306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800930c:	d871      	bhi.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	2b00      	cmp	r3, #0
 8009312:	d004      	beq.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8009314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009316:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800931a:	d004      	beq.n	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800931c:	e069      	b.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800931e:	f7fb fddb 	bl	8004ed8 <HAL_RCC_GetPCLK3Freq>
 8009322:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009324:	e068      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009326:	f107 0314 	add.w	r3, r7, #20
 800932a:	4618      	mov	r0, r3
 800932c:	f7fd ff16 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009334:	e060      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009336:	f107 0308 	add.w	r3, r7, #8
 800933a:	4618      	mov	r0, r3
 800933c:	f7fe f878 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009344:	e058      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009346:	4b2d      	ldr	r3, [pc, #180]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800934c:	f003 0302 	and.w	r3, r3, #2
 8009350:	2b02      	cmp	r3, #2
 8009352:	d103      	bne.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8009354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009358:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800935a:	e04d      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800935c:	2300      	movs	r3, #0
 800935e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009360:	e04a      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009362:	4b26      	ldr	r3, [pc, #152]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800936c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009370:	d103      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8009372:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009376:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009378:	e03e      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800937a:	2300      	movs	r3, #0
 800937c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800937e:	e03b      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009380:	4b1e      	ldr	r3, [pc, #120]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009382:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009386:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800938a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800938c:	4b1b      	ldr	r3, [pc, #108]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 0302 	and.w	r3, r3, #2
 8009394:	2b02      	cmp	r3, #2
 8009396:	d10c      	bne.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8009398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939a:	2b00      	cmp	r3, #0
 800939c:	d109      	bne.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800939e:	4b17      	ldr	r3, [pc, #92]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	08db      	lsrs	r3, r3, #3
 80093a4:	f003 0303 	and.w	r3, r3, #3
 80093a8:	4a15      	ldr	r2, [pc, #84]	; (8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80093aa:	fa22 f303 	lsr.w	r3, r2, r3
 80093ae:	637b      	str	r3, [r7, #52]	; 0x34
 80093b0:	e01e      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093b2:	4b12      	ldr	r3, [pc, #72]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093be:	d106      	bne.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80093c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c6:	d102      	bne.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80093c8:	4b0e      	ldr	r3, [pc, #56]	; (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80093ca:	637b      	str	r3, [r7, #52]	; 0x34
 80093cc:	e010      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093ce:	4b0b      	ldr	r3, [pc, #44]	; (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093da:	d106      	bne.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80093dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093e2:	d102      	bne.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80093e4:	4b08      	ldr	r3, [pc, #32]	; (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80093e6:	637b      	str	r3, [r7, #52]	; 0x34
 80093e8:	e002      	b.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80093ee:	e003      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80093f0:	e002      	b.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80093f2:	2300      	movs	r3, #0
 80093f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80093f6:	bf00      	nop
          }
        }
        break;
 80093f8:	f000 bccf 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80093fc:	44020c00 	.word	0x44020c00
 8009400:	03d09000 	.word	0x03d09000
 8009404:	003d0900 	.word	0x003d0900
 8009408:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800940c:	4b9e      	ldr	r3, [pc, #632]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800940e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009412:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009416:	633b      	str	r3, [r7, #48]	; 0x30
 8009418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800941e:	d056      	beq.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8009420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009426:	f200 808b 	bhi.w	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009430:	d03e      	beq.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8009432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009438:	f200 8082 	bhi.w	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800943c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009442:	d027      	beq.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800944a:	d879      	bhi.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800944c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009452:	d017      	beq.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8009454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800945a:	d871      	bhi.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	2b00      	cmp	r3, #0
 8009460:	d004      	beq.n	800946c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009468:	d004      	beq.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800946a:	e069      	b.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800946c:	f7fb fd34 	bl	8004ed8 <HAL_RCC_GetPCLK3Freq>
 8009470:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009472:	e068      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009474:	f107 0314 	add.w	r3, r7, #20
 8009478:	4618      	mov	r0, r3
 800947a:	f7fd fe6f 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009482:	e060      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009484:	f107 0308 	add.w	r3, r7, #8
 8009488:	4618      	mov	r0, r3
 800948a:	f7fd ffd1 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009492:	e058      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009494:	4b7c      	ldr	r3, [pc, #496]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800949a:	f003 0302 	and.w	r3, r3, #2
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d103      	bne.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80094a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094a6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80094a8:	e04d      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80094ae:	e04a      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80094b0:	4b75      	ldr	r3, [pc, #468]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80094b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80094b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094be:	d103      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80094c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80094c4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80094c6:	e03e      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80094cc:	e03b      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094ce:	4b6e      	ldr	r3, [pc, #440]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80094d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80094d4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80094d8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094da:	4b6b      	ldr	r3, [pc, #428]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0302 	and.w	r3, r3, #2
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d10c      	bne.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80094e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d109      	bne.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094ec:	4b66      	ldr	r3, [pc, #408]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	08db      	lsrs	r3, r3, #3
 80094f2:	f003 0303 	and.w	r3, r3, #3
 80094f6:	4a65      	ldr	r2, [pc, #404]	; (800968c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80094f8:	fa22 f303 	lsr.w	r3, r2, r3
 80094fc:	637b      	str	r3, [r7, #52]	; 0x34
 80094fe:	e01e      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009500:	4b61      	ldr	r3, [pc, #388]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800950c:	d106      	bne.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800950e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009514:	d102      	bne.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009516:	4b5e      	ldr	r3, [pc, #376]	; (8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009518:	637b      	str	r3, [r7, #52]	; 0x34
 800951a:	e010      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800951c:	4b5a      	ldr	r3, [pc, #360]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009524:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009528:	d106      	bne.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800952a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009530:	d102      	bne.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009532:	4b58      	ldr	r3, [pc, #352]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009534:	637b      	str	r3, [r7, #52]	; 0x34
 8009536:	e002      	b.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009538:	2300      	movs	r3, #0
 800953a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800953c:	e003      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800953e:	e002      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8009540:	2300      	movs	r3, #0
 8009542:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009544:	bf00      	nop
          }
        }
        break;
 8009546:	f000 bc28 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800954a:	4b4f      	ldr	r3, [pc, #316]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800954c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009554:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009556:	4b4c      	ldr	r3, [pc, #304]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800955e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009562:	d106      	bne.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009566:	2b00      	cmp	r3, #0
 8009568:	d103      	bne.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800956a:	4b4a      	ldr	r3, [pc, #296]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800956c:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800956e:	f000 bc14 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009578:	d108      	bne.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800957a:	f107 0320 	add.w	r3, r7, #32
 800957e:	4618      	mov	r0, r3
 8009580:	f7fd fc82 	bl	8006e88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009588:	f000 bc07 	b.w	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800958c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009592:	d107      	bne.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009594:	f107 0314 	add.w	r3, r7, #20
 8009598:	4618      	mov	r0, r3
 800959a:	f7fd fddf 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095a2:	e3fa      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80095a4:	2300      	movs	r3, #0
 80095a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095a8:	e3f7      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80095aa:	4b37      	ldr	r3, [pc, #220]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80095b0:	f003 0307 	and.w	r3, r3, #7
 80095b4:	633b      	str	r3, [r7, #48]	; 0x30
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	2b04      	cmp	r3, #4
 80095ba:	d861      	bhi.n	8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80095bc:	a201      	add	r2, pc, #4	; (adr r2, 80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80095be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c2:	bf00      	nop
 80095c4:	080095d9 	.word	0x080095d9
 80095c8:	080095e9 	.word	0x080095e9
 80095cc:	080095f9 	.word	0x080095f9
 80095d0:	08009609 	.word	0x08009609
 80095d4:	0800960f 	.word	0x0800960f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095d8:	f107 0320 	add.w	r3, r7, #32
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fd fc53 	bl	8006e88 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80095e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80095e6:	e04e      	b.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095e8:	f107 0314 	add.w	r3, r7, #20
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fd fdb5 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80095f6:	e046      	b.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095f8:	f107 0308 	add.w	r3, r7, #8
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fd ff17 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009606:	e03e      	b.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009608:	4b23      	ldr	r3, [pc, #140]	; (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800960a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800960c:	e03b      	b.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800960e:	4b1e      	ldr	r3, [pc, #120]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009614:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009618:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800961a:	4b1b      	ldr	r3, [pc, #108]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0302 	and.w	r3, r3, #2
 8009622:	2b02      	cmp	r3, #2
 8009624:	d10c      	bne.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8009626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009628:	2b00      	cmp	r3, #0
 800962a:	d109      	bne.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800962c:	4b16      	ldr	r3, [pc, #88]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	08db      	lsrs	r3, r3, #3
 8009632:	f003 0303 	and.w	r3, r3, #3
 8009636:	4a15      	ldr	r2, [pc, #84]	; (800968c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009638:	fa22 f303 	lsr.w	r3, r2, r3
 800963c:	637b      	str	r3, [r7, #52]	; 0x34
 800963e:	e01e      	b.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009640:	4b11      	ldr	r3, [pc, #68]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800964c:	d106      	bne.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800964e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009654:	d102      	bne.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009656:	4b0e      	ldr	r3, [pc, #56]	; (8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009658:	637b      	str	r3, [r7, #52]	; 0x34
 800965a:	e010      	b.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800965c:	4b0a      	ldr	r3, [pc, #40]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009668:	d106      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800966a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800966c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009670:	d102      	bne.n	8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009672:	4b08      	ldr	r3, [pc, #32]	; (8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009674:	637b      	str	r3, [r7, #52]	; 0x34
 8009676:	e002      	b.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800967c:	e003      	b.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800967e:	e002      	b.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009680:	2300      	movs	r3, #0
 8009682:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009684:	bf00      	nop
          }
        }
        break;
 8009686:	e388      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009688:	44020c00 	.word	0x44020c00
 800968c:	03d09000 	.word	0x03d09000
 8009690:	003d0900 	.word	0x003d0900
 8009694:	007a1200 	.word	0x007a1200
 8009698:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800969c:	4ba9      	ldr	r3, [pc, #676]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800969e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096a6:	633b      	str	r3, [r7, #48]	; 0x30
 80096a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096aa:	2b20      	cmp	r3, #32
 80096ac:	f200 809a 	bhi.w	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80096b0:	a201      	add	r2, pc, #4	; (adr r2, 80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80096b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b6:	bf00      	nop
 80096b8:	0800973d 	.word	0x0800973d
 80096bc:	080097e5 	.word	0x080097e5
 80096c0:	080097e5 	.word	0x080097e5
 80096c4:	080097e5 	.word	0x080097e5
 80096c8:	080097e5 	.word	0x080097e5
 80096cc:	080097e5 	.word	0x080097e5
 80096d0:	080097e5 	.word	0x080097e5
 80096d4:	080097e5 	.word	0x080097e5
 80096d8:	0800974d 	.word	0x0800974d
 80096dc:	080097e5 	.word	0x080097e5
 80096e0:	080097e5 	.word	0x080097e5
 80096e4:	080097e5 	.word	0x080097e5
 80096e8:	080097e5 	.word	0x080097e5
 80096ec:	080097e5 	.word	0x080097e5
 80096f0:	080097e5 	.word	0x080097e5
 80096f4:	080097e5 	.word	0x080097e5
 80096f8:	0800975d 	.word	0x0800975d
 80096fc:	080097e5 	.word	0x080097e5
 8009700:	080097e5 	.word	0x080097e5
 8009704:	080097e5 	.word	0x080097e5
 8009708:	080097e5 	.word	0x080097e5
 800970c:	080097e5 	.word	0x080097e5
 8009710:	080097e5 	.word	0x080097e5
 8009714:	080097e5 	.word	0x080097e5
 8009718:	0800976d 	.word	0x0800976d
 800971c:	080097e5 	.word	0x080097e5
 8009720:	080097e5 	.word	0x080097e5
 8009724:	080097e5 	.word	0x080097e5
 8009728:	080097e5 	.word	0x080097e5
 800972c:	080097e5 	.word	0x080097e5
 8009730:	080097e5 	.word	0x080097e5
 8009734:	080097e5 	.word	0x080097e5
 8009738:	08009773 	.word	0x08009773
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800973c:	f107 0320 	add.w	r3, r7, #32
 8009740:	4618      	mov	r0, r3
 8009742:	f7fd fba1 	bl	8006e88 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009748:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800974a:	e04e      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800974c:	f107 0314 	add.w	r3, r7, #20
 8009750:	4618      	mov	r0, r3
 8009752:	f7fd fd03 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800975a:	e046      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800975c:	f107 0308 	add.w	r3, r7, #8
 8009760:	4618      	mov	r0, r3
 8009762:	f7fd fe65 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800976a:	e03e      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800976c:	4b76      	ldr	r3, [pc, #472]	; (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800976e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009770:	e03b      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009772:	4b74      	ldr	r3, [pc, #464]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009774:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009778:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800977c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800977e:	4b71      	ldr	r3, [pc, #452]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 0302 	and.w	r3, r3, #2
 8009786:	2b02      	cmp	r3, #2
 8009788:	d10c      	bne.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978c:	2b00      	cmp	r3, #0
 800978e:	d109      	bne.n	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009790:	4b6c      	ldr	r3, [pc, #432]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	08db      	lsrs	r3, r3, #3
 8009796:	f003 0303 	and.w	r3, r3, #3
 800979a:	4a6c      	ldr	r2, [pc, #432]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800979c:	fa22 f303 	lsr.w	r3, r2, r3
 80097a0:	637b      	str	r3, [r7, #52]	; 0x34
 80097a2:	e01e      	b.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097a4:	4b67      	ldr	r3, [pc, #412]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097b0:	d106      	bne.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80097b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097b8:	d102      	bne.n	80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80097ba:	4b65      	ldr	r3, [pc, #404]	; (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80097bc:	637b      	str	r3, [r7, #52]	; 0x34
 80097be:	e010      	b.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097c0:	4b60      	ldr	r3, [pc, #384]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097cc:	d106      	bne.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80097ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097d4:	d102      	bne.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80097d6:	4b5f      	ldr	r3, [pc, #380]	; (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80097d8:	637b      	str	r3, [r7, #52]	; 0x34
 80097da:	e002      	b.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80097dc:	2300      	movs	r3, #0
 80097de:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80097e0:	e003      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80097e2:	e002      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80097e8:	bf00      	nop
          }
        }
        break;
 80097ea:	e2d6      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80097ec:	4b55      	ldr	r3, [pc, #340]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80097ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097f2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80097f6:	633b      	str	r3, [r7, #48]	; 0x30
 80097f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097fe:	d031      	beq.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009806:	d866      	bhi.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980a:	2bc0      	cmp	r3, #192	; 0xc0
 800980c:	d027      	beq.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	2bc0      	cmp	r3, #192	; 0xc0
 8009812:	d860      	bhi.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009816:	2b80      	cmp	r3, #128	; 0x80
 8009818:	d019      	beq.n	800984e <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800981a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981c:	2b80      	cmp	r3, #128	; 0x80
 800981e:	d85a      	bhi.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8009826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009828:	2b40      	cmp	r3, #64	; 0x40
 800982a:	d008      	beq.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800982c:	e053      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800982e:	f107 0320 	add.w	r3, r7, #32
 8009832:	4618      	mov	r0, r3
 8009834:	f7fd fb28 	bl	8006e88 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800983c:	e04e      	b.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800983e:	f107 0314 	add.w	r3, r7, #20
 8009842:	4618      	mov	r0, r3
 8009844:	f7fd fc8a 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800984c:	e046      	b.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800984e:	f107 0308 	add.w	r3, r7, #8
 8009852:	4618      	mov	r0, r3
 8009854:	f7fd fdec 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800985c:	e03e      	b.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800985e:	4b3a      	ldr	r3, [pc, #232]	; (8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009860:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009862:	e03b      	b.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009864:	4b37      	ldr	r3, [pc, #220]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800986a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800986e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009870:	4b34      	ldr	r3, [pc, #208]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0302 	and.w	r3, r3, #2
 8009878:	2b02      	cmp	r3, #2
 800987a:	d10c      	bne.n	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800987c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987e:	2b00      	cmp	r3, #0
 8009880:	d109      	bne.n	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009882:	4b30      	ldr	r3, [pc, #192]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	08db      	lsrs	r3, r3, #3
 8009888:	f003 0303 	and.w	r3, r3, #3
 800988c:	4a2f      	ldr	r2, [pc, #188]	; (800994c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800988e:	fa22 f303 	lsr.w	r3, r2, r3
 8009892:	637b      	str	r3, [r7, #52]	; 0x34
 8009894:	e01e      	b.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009896:	4b2b      	ldr	r3, [pc, #172]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800989e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098a2:	d106      	bne.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 80098a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098aa:	d102      	bne.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80098ac:	4b28      	ldr	r3, [pc, #160]	; (8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80098ae:	637b      	str	r3, [r7, #52]	; 0x34
 80098b0:	e010      	b.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098b2:	4b24      	ldr	r3, [pc, #144]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098be:	d106      	bne.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80098c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098c6:	d102      	bne.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80098c8:	4b22      	ldr	r3, [pc, #136]	; (8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80098ca:	637b      	str	r3, [r7, #52]	; 0x34
 80098cc:	e002      	b.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80098ce:	2300      	movs	r3, #0
 80098d0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80098d2:	e003      	b.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80098d4:	e002      	b.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80098da:	bf00      	nop
          }
        }
        break;
 80098dc:	e25d      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80098de:	4b19      	ldr	r3, [pc, #100]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80098e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098e4:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80098e8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80098ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d103      	bne.n	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80098f0:	f7fb fadc 	bl	8004eac <HAL_RCC_GetPCLK2Freq>
 80098f4:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80098f6:	e250      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80098f8:	4b12      	ldr	r3, [pc, #72]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009904:	d10b      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8009906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800990c:	d107      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800990e:	f107 0314 	add.w	r3, r7, #20
 8009912:	4618      	mov	r0, r3
 8009914:	f7fd fc22 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	637b      	str	r3, [r7, #52]	; 0x34
 800991c:	e04f      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800991e:	4b09      	ldr	r3, [pc, #36]	; (8009944 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800992a:	d115      	bne.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800992c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009932:	d111      	bne.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009934:	f107 0308 	add.w	r3, r7, #8
 8009938:	4618      	mov	r0, r3
 800993a:	f7fd fd79 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	637b      	str	r3, [r7, #52]	; 0x34
 8009942:	e03c      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8009944:	44020c00 	.word	0x44020c00
 8009948:	00bb8000 	.word	0x00bb8000
 800994c:	03d09000 	.word	0x03d09000
 8009950:	003d0900 	.word	0x003d0900
 8009954:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009958:	4b94      	ldr	r3, [pc, #592]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0302 	and.w	r3, r3, #2
 8009960:	2b02      	cmp	r3, #2
 8009962:	d10d      	bne.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8009964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009966:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800996a:	d109      	bne.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800996c:	4b8f      	ldr	r3, [pc, #572]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	08db      	lsrs	r3, r3, #3
 8009972:	f003 0303 	and.w	r3, r3, #3
 8009976:	4a8e      	ldr	r2, [pc, #568]	; (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009978:	fa22 f303 	lsr.w	r3, r2, r3
 800997c:	637b      	str	r3, [r7, #52]	; 0x34
 800997e:	e01e      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009980:	4b8a      	ldr	r3, [pc, #552]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800998c:	d106      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009994:	d102      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8009996:	4b87      	ldr	r3, [pc, #540]	; (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009998:	637b      	str	r3, [r7, #52]	; 0x34
 800999a:	e010      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800999c:	4b83      	ldr	r3, [pc, #524]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099a8:	d106      	bne.n	80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 80099aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80099b0:	d102      	bne.n	80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 80099b2:	4b81      	ldr	r3, [pc, #516]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80099b4:	637b      	str	r3, [r7, #52]	; 0x34
 80099b6:	e002      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099bc:	e1ed      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80099be:	e1ec      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80099c0:	4b7a      	ldr	r3, [pc, #488]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80099c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099c6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80099ca:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80099cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d103      	bne.n	80099da <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80099d2:	f7fb fa81 	bl	8004ed8 <HAL_RCC_GetPCLK3Freq>
 80099d6:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80099d8:	e1df      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80099da:	4b74      	ldr	r3, [pc, #464]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099e6:	d10b      	bne.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80099e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ee:	d107      	bne.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099f0:	f107 0314 	add.w	r3, r7, #20
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fd fbb1 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	637b      	str	r3, [r7, #52]	; 0x34
 80099fe:	e045      	b.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8009a00:	4b6a      	ldr	r3, [pc, #424]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a0c:	d10b      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a14:	d107      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a16:	f107 0308 	add.w	r3, r7, #8
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fd fd08 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	637b      	str	r3, [r7, #52]	; 0x34
 8009a24:	e032      	b.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8009a26:	4b61      	ldr	r3, [pc, #388]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f003 0302 	and.w	r3, r3, #2
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d10d      	bne.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8009a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009a38:	d109      	bne.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a3a:	4b5c      	ldr	r3, [pc, #368]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	08db      	lsrs	r3, r3, #3
 8009a40:	f003 0303 	and.w	r3, r3, #3
 8009a44:	4a5a      	ldr	r2, [pc, #360]	; (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009a46:	fa22 f303 	lsr.w	r3, r2, r3
 8009a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8009a4c:	e01e      	b.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8009a4e:	4b57      	ldr	r3, [pc, #348]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a5a:	d106      	bne.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8009a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a62:	d102      	bne.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8009a64:	4b53      	ldr	r3, [pc, #332]	; (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009a66:	637b      	str	r3, [r7, #52]	; 0x34
 8009a68:	e010      	b.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8009a6a:	4b50      	ldr	r3, [pc, #320]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a76:	d106      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8009a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009a7e:	d102      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8009a80:	4b4d      	ldr	r3, [pc, #308]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009a82:	637b      	str	r3, [r7, #52]	; 0x34
 8009a84:	e002      	b.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a8a:	e186      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a8c:	e185      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009a8e:	4b47      	ldr	r3, [pc, #284]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a94:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8009a98:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d103      	bne.n	8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009aa0:	f7fb fa04 	bl	8004eac <HAL_RCC_GetPCLK2Freq>
 8009aa4:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009aa6:	e178      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009aa8:	4b40      	ldr	r3, [pc, #256]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ab4:	d10b      	bne.n	8009ace <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009abc:	d107      	bne.n	8009ace <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009abe:	f107 0314 	add.w	r3, r7, #20
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fd fb4a 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	637b      	str	r3, [r7, #52]	; 0x34
 8009acc:	e045      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8009ace:	4b37      	ldr	r3, [pc, #220]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ad6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ada:	d10b      	bne.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8009adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ae2:	d107      	bne.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ae4:	f107 0308 	add.w	r3, r7, #8
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fd fca1 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	637b      	str	r3, [r7, #52]	; 0x34
 8009af2:	e032      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8009af4:	4b2d      	ldr	r3, [pc, #180]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0302 	and.w	r3, r3, #2
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d10d      	bne.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8009b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b02:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8009b06:	d109      	bne.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b08:	4b28      	ldr	r3, [pc, #160]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	08db      	lsrs	r3, r3, #3
 8009b0e:	f003 0303 	and.w	r3, r3, #3
 8009b12:	4a27      	ldr	r2, [pc, #156]	; (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009b14:	fa22 f303 	lsr.w	r3, r2, r3
 8009b18:	637b      	str	r3, [r7, #52]	; 0x34
 8009b1a:	e01e      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8009b1c:	4b23      	ldr	r3, [pc, #140]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b28:	d106      	bne.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8009b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b30:	d102      	bne.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8009b32:	4b20      	ldr	r3, [pc, #128]	; (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009b34:	637b      	str	r3, [r7, #52]	; 0x34
 8009b36:	e010      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8009b38:	4b1c      	ldr	r3, [pc, #112]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b44:	d106      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8009b4c:	d102      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8009b4e:	4b1a      	ldr	r3, [pc, #104]	; (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009b50:	637b      	str	r3, [r7, #52]	; 0x34
 8009b52:	e002      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8009b54:	2300      	movs	r3, #0
 8009b56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b58:	e11f      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009b5a:	e11e      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009b5c:	4b13      	ldr	r3, [pc, #76]	; (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009b62:	f003 0303 	and.w	r3, r3, #3
 8009b66:	633b      	str	r3, [r7, #48]	; 0x30
 8009b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d85f      	bhi.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8009b6e:	a201      	add	r2, pc, #4	; (adr r2, 8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8009b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b74:	08009b85 	.word	0x08009b85
 8009b78:	08009b8d 	.word	0x08009b8d
 8009b7c:	08009b9d 	.word	0x08009b9d
 8009b80:	08009bbd 	.word	0x08009bbd

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009b84:	f7fb f960 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8009b88:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009b8a:	e053      	b.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b8c:	f107 0320 	add.w	r3, r7, #32
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fd f979 	bl	8006e88 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009b9a:	e04b      	b.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b9c:	f107 0314 	add.w	r3, r7, #20
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fd fadb 	bl	800715c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009baa:	e043      	b.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009bac:	44020c00 	.word	0x44020c00
 8009bb0:	03d09000 	.word	0x03d09000
 8009bb4:	003d0900 	.word	0x003d0900
 8009bb8:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009bbc:	4b79      	ldr	r3, [pc, #484]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009bbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009bc2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009bc8:	4b76      	ldr	r3, [pc, #472]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0302 	and.w	r3, r3, #2
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d10c      	bne.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8009bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d109      	bne.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bda:	4b72      	ldr	r3, [pc, #456]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	08db      	lsrs	r3, r3, #3
 8009be0:	f003 0303 	and.w	r3, r3, #3
 8009be4:	4a70      	ldr	r2, [pc, #448]	; (8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8009be6:	fa22 f303 	lsr.w	r3, r2, r3
 8009bea:	637b      	str	r3, [r7, #52]	; 0x34
 8009bec:	e01e      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009bee:	4b6d      	ldr	r3, [pc, #436]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bfa:	d106      	bne.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8009bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c02:	d102      	bne.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009c04:	4b69      	ldr	r3, [pc, #420]	; (8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8009c06:	637b      	str	r3, [r7, #52]	; 0x34
 8009c08:	e010      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c0a:	4b66      	ldr	r3, [pc, #408]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c16:	d106      	bne.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8009c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c1e:	d102      	bne.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009c20:	4b63      	ldr	r3, [pc, #396]	; (8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8009c22:	637b      	str	r3, [r7, #52]	; 0x34
 8009c24:	e002      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009c2a:	e003      	b.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009c2c:	e002      	b.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009c32:	bf00      	nop
          }
        }
        break;
 8009c34:	e0b1      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009c36:	4b5b      	ldr	r3, [pc, #364]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009c3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009c40:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009c42:	4b58      	ldr	r3, [pc, #352]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c48:	f003 0302 	and.w	r3, r3, #2
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d106      	bne.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8009c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d103      	bne.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8009c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c5c:	e01f      	b.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009c5e:	4b51      	ldr	r3, [pc, #324]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c6c:	d106      	bne.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c70:	2b40      	cmp	r3, #64	; 0x40
 8009c72:	d103      	bne.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8009c74:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009c78:	637b      	str	r3, [r7, #52]	; 0x34
 8009c7a:	e010      	b.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009c7c:	4b49      	ldr	r3, [pc, #292]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c88:	d106      	bne.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8c:	2b80      	cmp	r3, #128	; 0x80
 8009c8e:	d103      	bne.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8009c90:	f248 0312 	movw	r3, #32786	; 0x8012
 8009c94:	637b      	str	r3, [r7, #52]	; 0x34
 8009c96:	e002      	b.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8009c9c:	e07d      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c9e:	e07c      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009ca0:	4b40      	ldr	r3, [pc, #256]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ca2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009ca6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009caa:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009cac:	4b3d      	ldr	r3, [pc, #244]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cb8:	d105      	bne.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8009cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d102      	bne.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8009cc0:	4b3c      	ldr	r3, [pc, #240]	; (8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8009cc4:	e031      	b.n	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009cc6:	4b37      	ldr	r3, [pc, #220]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cd2:	d10a      	bne.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd6:	2b10      	cmp	r3, #16
 8009cd8:	d107      	bne.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cda:	f107 0320 	add.w	r3, r7, #32
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fd f8d2 	bl	8006e88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ce8:	e01f      	b.n	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009cea:	4b2e      	ldr	r3, [pc, #184]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009cf0:	f003 0302 	and.w	r3, r3, #2
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d106      	bne.n	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8009cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfa:	2b20      	cmp	r3, #32
 8009cfc:	d103      	bne.n	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8009cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d02:	637b      	str	r3, [r7, #52]	; 0x34
 8009d04:	e011      	b.n	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009d06:	4b27      	ldr	r3, [pc, #156]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d14:	d106      	bne.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d18:	2b30      	cmp	r3, #48	; 0x30
 8009d1a:	d103      	bne.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8009d1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009d20:	637b      	str	r3, [r7, #52]	; 0x34
 8009d22:	e002      	b.n	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009d24:	2300      	movs	r3, #0
 8009d26:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8009d28:	e037      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d2a:	e036      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009d2c:	4b1d      	ldr	r3, [pc, #116]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009d32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d36:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3a:	2b10      	cmp	r3, #16
 8009d3c:	d107      	bne.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d3e:	f107 0320 	add.w	r3, r7, #32
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fd f8a0 	bl	8006e88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009d4c:	e025      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009d4e:	4b15      	ldr	r3, [pc, #84]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d5a:	d10a      	bne.n	8009d72 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5e:	2b20      	cmp	r3, #32
 8009d60:	d107      	bne.n	8009d72 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d62:	f107 0308 	add.w	r3, r7, #8
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fd fb62 	bl	8007430 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8009d70:	e00f      	b.n	8009d92 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009d72:	4b0c      	ldr	r3, [pc, #48]	; (8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d7e:	d105      	bne.n	8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8009d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d82:	2b30      	cmp	r3, #48	; 0x30
 8009d84:	d102      	bne.n	8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8009d86:	4b0b      	ldr	r3, [pc, #44]	; (8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009d88:	637b      	str	r3, [r7, #52]	; 0x34
 8009d8a:	e002      	b.n	8009d92 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8009d90:	e003      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d92:	e002      	b.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8009d94:	2300      	movs	r3, #0
 8009d96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d98:	bf00      	nop
    }
  }

  return (frequency);
 8009d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	373c      	adds	r7, #60	; 0x3c
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd90      	pop	{r4, r7, pc}
 8009da4:	44020c00 	.word	0x44020c00
 8009da8:	03d09000 	.word	0x03d09000
 8009dac:	003d0900 	.word	0x003d0900
 8009db0:	007a1200 	.word	0x007a1200
 8009db4:	02dc6c00 	.word	0x02dc6c00

08009db8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009dc0:	4b48      	ldr	r3, [pc, #288]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a47      	ldr	r2, [pc, #284]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009dc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009dca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009dcc:	f7f8 fc8c 	bl	80026e8 <HAL_GetTick>
 8009dd0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dd2:	e008      	b.n	8009de6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009dd4:	f7f8 fc88 	bl	80026e8 <HAL_GetTick>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	1ad3      	subs	r3, r2, r3
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d901      	bls.n	8009de6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e07a      	b.n	8009edc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009de6:	4b3f      	ldr	r3, [pc, #252]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1f0      	bne.n	8009dd4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009df2:	4b3c      	ldr	r3, [pc, #240]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009dfa:	f023 0303 	bic.w	r3, r3, #3
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	6811      	ldr	r1, [r2, #0]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	6852      	ldr	r2, [r2, #4]
 8009e06:	0212      	lsls	r2, r2, #8
 8009e08:	430a      	orrs	r2, r1
 8009e0a:	4936      	ldr	r1, [pc, #216]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	3b01      	subs	r3, #1
 8009e16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	025b      	lsls	r3, r3, #9
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	431a      	orrs	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	041b      	lsls	r3, r3, #16
 8009e2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e32:	431a      	orrs	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	695b      	ldr	r3, [r3, #20]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	061b      	lsls	r3, r3, #24
 8009e3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e40:	4928      	ldr	r1, [pc, #160]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009e42:	4313      	orrs	r3, r2
 8009e44:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009e46:	4b27      	ldr	r3, [pc, #156]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4a:	f023 020c 	bic.w	r2, r3, #12
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	699b      	ldr	r3, [r3, #24]
 8009e52:	4924      	ldr	r1, [pc, #144]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009e54:	4313      	orrs	r3, r2
 8009e56:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8009e58:	4b22      	ldr	r3, [pc, #136]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5c:	f023 0220 	bic.w	r2, r3, #32
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	69db      	ldr	r3, [r3, #28]
 8009e64:	491f      	ldr	r1, [pc, #124]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009e66:	4313      	orrs	r3, r2
 8009e68:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009e6a:	4b1e      	ldr	r3, [pc, #120]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e72:	491c      	ldr	r1, [pc, #112]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009e74:	4313      	orrs	r3, r2
 8009e76:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8009e78:	4b1a      	ldr	r3, [pc, #104]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7c:	4a19      	ldr	r2, [pc, #100]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009e7e:	f023 0310 	bic.w	r3, r3, #16
 8009e82:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009e84:	4b17      	ldr	r3, [pc, #92]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e8c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	6a12      	ldr	r2, [r2, #32]
 8009e94:	00d2      	lsls	r2, r2, #3
 8009e96:	4913      	ldr	r1, [pc, #76]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009e9c:	4b11      	ldr	r3, [pc, #68]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea0:	4a10      	ldr	r2, [pc, #64]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009ea2:	f043 0310 	orr.w	r3, r3, #16
 8009ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009ea8:	4b0e      	ldr	r3, [pc, #56]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a0d      	ldr	r2, [pc, #52]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009eae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009eb2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009eb4:	f7f8 fc18 	bl	80026e8 <HAL_GetTick>
 8009eb8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009eba:	e008      	b.n	8009ece <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ebc:	f7f8 fc14 	bl	80026e8 <HAL_GetTick>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d901      	bls.n	8009ece <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	e006      	b.n	8009edc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ece:	4b05      	ldr	r3, [pc, #20]	; (8009ee4 <RCCEx_PLL2_Config+0x12c>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d0f0      	beq.n	8009ebc <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009eda:	2300      	movs	r3, #0

}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	44020c00 	.word	0x44020c00

08009ee8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009ef0:	4b48      	ldr	r3, [pc, #288]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a47      	ldr	r2, [pc, #284]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009efa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009efc:	f7f8 fbf4 	bl	80026e8 <HAL_GetTick>
 8009f00:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f02:	e008      	b.n	8009f16 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009f04:	f7f8 fbf0 	bl	80026e8 <HAL_GetTick>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d901      	bls.n	8009f16 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009f12:	2303      	movs	r3, #3
 8009f14:	e07a      	b.n	800a00c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f16:	4b3f      	ldr	r3, [pc, #252]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1f0      	bne.n	8009f04 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009f22:	4b3c      	ldr	r3, [pc, #240]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f2a:	f023 0303 	bic.w	r3, r3, #3
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	6811      	ldr	r1, [r2, #0]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	6852      	ldr	r2, [r2, #4]
 8009f36:	0212      	lsls	r2, r2, #8
 8009f38:	430a      	orrs	r2, r1
 8009f3a:	4936      	ldr	r1, [pc, #216]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	630b      	str	r3, [r1, #48]	; 0x30
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	3b01      	subs	r3, #1
 8009f46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	025b      	lsls	r3, r3, #9
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	431a      	orrs	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	041b      	lsls	r3, r3, #16
 8009f5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f62:	431a      	orrs	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	695b      	ldr	r3, [r3, #20]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	061b      	lsls	r3, r3, #24
 8009f6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f70:	4928      	ldr	r1, [pc, #160]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009f72:	4313      	orrs	r3, r2
 8009f74:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f76:	4b27      	ldr	r3, [pc, #156]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f7a:	f023 020c 	bic.w	r2, r3, #12
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	699b      	ldr	r3, [r3, #24]
 8009f82:	4924      	ldr	r1, [pc, #144]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009f88:	4b22      	ldr	r3, [pc, #136]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8c:	f023 0220 	bic.w	r2, r3, #32
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	69db      	ldr	r3, [r3, #28]
 8009f94:	491f      	ldr	r1, [pc, #124]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009f9a:	4b1e      	ldr	r3, [pc, #120]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa2:	491c      	ldr	r1, [pc, #112]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009fa8:	4b1a      	ldr	r3, [pc, #104]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fac:	4a19      	ldr	r2, [pc, #100]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009fae:	f023 0310 	bic.w	r3, r3, #16
 8009fb2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009fb4:	4b17      	ldr	r3, [pc, #92]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fbc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	6a12      	ldr	r2, [r2, #32]
 8009fc4:	00d2      	lsls	r2, r2, #3
 8009fc6:	4913      	ldr	r1, [pc, #76]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009fcc:	4b11      	ldr	r3, [pc, #68]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd0:	4a10      	ldr	r2, [pc, #64]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009fd2:	f043 0310 	orr.w	r3, r3, #16
 8009fd6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009fd8:	4b0e      	ldr	r3, [pc, #56]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a0d      	ldr	r2, [pc, #52]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 8009fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fe2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009fe4:	f7f8 fb80 	bl	80026e8 <HAL_GetTick>
 8009fe8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fea:	e008      	b.n	8009ffe <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009fec:	f7f8 fb7c 	bl	80026e8 <HAL_GetTick>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d901      	bls.n	8009ffe <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	e006      	b.n	800a00c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ffe:	4b05      	ldr	r3, [pc, #20]	; (800a014 <RCCEx_PLL3_Config+0x12c>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a006:	2b00      	cmp	r3, #0
 800a008:	d0f0      	beq.n	8009fec <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	44020c00 	.word	0x44020c00

0800a018 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a018:	b480      	push	{r7}
 800a01a:	b087      	sub	sp, #28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800a024:	4b07      	ldr	r3, [pc, #28]	; (800a044 <HAL_RTCEx_BKUPWrite+0x2c>)
 800a026:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	4413      	add	r3, r2
 800a030:	617b      	str	r3, [r7, #20]

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	601a      	str	r2, [r3, #0]
}
 800a038:	bf00      	nop
 800a03a:	371c      	adds	r7, #28
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	44007d00 	.word	0x44007d00

0800a048 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(const RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
 800a052:	4b07      	ldr	r3, [pc, #28]	; (800a070 <HAL_RTCEx_BKUPRead+0x28>)
 800a054:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	4413      	add	r3, r2
 800a05e:	60fb      	str	r3, [r7, #12]

  /* Read the data from the specified register */
  return (*(__IO uint32_t *)tmp);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	44007d00 	.word	0x44007d00

0800a074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d101      	bne.n	800a086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e049      	b.n	800a11a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d106      	bne.n	800a0a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f841 	bl	800a122 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	f000 fa60 	bl	800a578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a122:	b480      	push	{r7}
 800a124:	b083      	sub	sp, #12
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a12a:	bf00      	nop
 800a12c:	370c      	adds	r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
	...

0800a138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a146:	b2db      	uxtb	r3, r3
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d001      	beq.n	800a150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e07c      	b.n	800a24a <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2202      	movs	r2, #2
 800a154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68da      	ldr	r2, [r3, #12]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f042 0201 	orr.w	r2, r2, #1
 800a166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a3a      	ldr	r2, [pc, #232]	; (800a258 <HAL_TIM_Base_Start_IT+0x120>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d04a      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0xd0>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a39      	ldr	r2, [pc, #228]	; (800a25c <HAL_TIM_Base_Start_IT+0x124>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d045      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0xd0>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a184:	d040      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0xd0>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a18e:	d03b      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0xd0>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a32      	ldr	r2, [pc, #200]	; (800a260 <HAL_TIM_Base_Start_IT+0x128>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d036      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0xd0>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a31      	ldr	r2, [pc, #196]	; (800a264 <HAL_TIM_Base_Start_IT+0x12c>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d031      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0xd0>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a2f      	ldr	r2, [pc, #188]	; (800a268 <HAL_TIM_Base_Start_IT+0x130>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d02c      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0xd0>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a2e      	ldr	r2, [pc, #184]	; (800a26c <HAL_TIM_Base_Start_IT+0x134>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d027      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0xd0>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a2c      	ldr	r2, [pc, #176]	; (800a270 <HAL_TIM_Base_Start_IT+0x138>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d022      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0xd0>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a2b      	ldr	r2, [pc, #172]	; (800a274 <HAL_TIM_Base_Start_IT+0x13c>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d01d      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0xd0>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a29      	ldr	r2, [pc, #164]	; (800a278 <HAL_TIM_Base_Start_IT+0x140>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d018      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0xd0>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a28      	ldr	r2, [pc, #160]	; (800a27c <HAL_TIM_Base_Start_IT+0x144>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d013      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0xd0>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a26      	ldr	r2, [pc, #152]	; (800a280 <HAL_TIM_Base_Start_IT+0x148>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d00e      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0xd0>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a25      	ldr	r2, [pc, #148]	; (800a284 <HAL_TIM_Base_Start_IT+0x14c>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d009      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0xd0>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a23      	ldr	r2, [pc, #140]	; (800a288 <HAL_TIM_Base_Start_IT+0x150>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d004      	beq.n	800a208 <HAL_TIM_Base_Start_IT+0xd0>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a22      	ldr	r2, [pc, #136]	; (800a28c <HAL_TIM_Base_Start_IT+0x154>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d115      	bne.n	800a234 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	689a      	ldr	r2, [r3, #8]
 800a20e:	4b20      	ldr	r3, [pc, #128]	; (800a290 <HAL_TIM_Base_Start_IT+0x158>)
 800a210:	4013      	ands	r3, r2
 800a212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2b06      	cmp	r3, #6
 800a218:	d015      	beq.n	800a246 <HAL_TIM_Base_Start_IT+0x10e>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a220:	d011      	beq.n	800a246 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f042 0201 	orr.w	r2, r2, #1
 800a230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a232:	e008      	b.n	800a246 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f042 0201 	orr.w	r2, r2, #1
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	e000      	b.n	800a248 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a246:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	40012c00 	.word	0x40012c00
 800a25c:	50012c00 	.word	0x50012c00
 800a260:	40000400 	.word	0x40000400
 800a264:	50000400 	.word	0x50000400
 800a268:	40000800 	.word	0x40000800
 800a26c:	50000800 	.word	0x50000800
 800a270:	40000c00 	.word	0x40000c00
 800a274:	50000c00 	.word	0x50000c00
 800a278:	40013400 	.word	0x40013400
 800a27c:	50013400 	.word	0x50013400
 800a280:	40001800 	.word	0x40001800
 800a284:	50001800 	.word	0x50001800
 800a288:	40014000 	.word	0x40014000
 800a28c:	50014000 	.word	0x50014000
 800a290:	00010007 	.word	0x00010007

0800a294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	f003 0302 	and.w	r3, r3, #2
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d020      	beq.n	800a2f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f003 0302 	and.w	r3, r3, #2
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d01b      	beq.n	800a2f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f06f 0202 	mvn.w	r2, #2
 800a2c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	699b      	ldr	r3, [r3, #24]
 800a2d6:	f003 0303 	and.w	r3, r3, #3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d003      	beq.n	800a2e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f92c 	bl	800a53c <HAL_TIM_IC_CaptureCallback>
 800a2e4:	e005      	b.n	800a2f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f91e 	bl	800a528 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f92f 	bl	800a550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	f003 0304 	and.w	r3, r3, #4
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d020      	beq.n	800a344 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f003 0304 	and.w	r3, r3, #4
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d01b      	beq.n	800a344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f06f 0204 	mvn.w	r2, #4
 800a314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2202      	movs	r2, #2
 800a31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f906 	bl	800a53c <HAL_TIM_IC_CaptureCallback>
 800a330:	e005      	b.n	800a33e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f8f8 	bl	800a528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 f909 	bl	800a550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	f003 0308 	and.w	r3, r3, #8
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d020      	beq.n	800a390 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f003 0308 	and.w	r3, r3, #8
 800a354:	2b00      	cmp	r3, #0
 800a356:	d01b      	beq.n	800a390 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f06f 0208 	mvn.w	r2, #8
 800a360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2204      	movs	r2, #4
 800a366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	69db      	ldr	r3, [r3, #28]
 800a36e:	f003 0303 	and.w	r3, r3, #3
 800a372:	2b00      	cmp	r3, #0
 800a374:	d003      	beq.n	800a37e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f8e0 	bl	800a53c <HAL_TIM_IC_CaptureCallback>
 800a37c:	e005      	b.n	800a38a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 f8d2 	bl	800a528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 f8e3 	bl	800a550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	f003 0310 	and.w	r3, r3, #16
 800a396:	2b00      	cmp	r3, #0
 800a398:	d020      	beq.n	800a3dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f003 0310 	and.w	r3, r3, #16
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d01b      	beq.n	800a3dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f06f 0210 	mvn.w	r2, #16
 800a3ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2208      	movs	r2, #8
 800a3b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	69db      	ldr	r3, [r3, #28]
 800a3ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d003      	beq.n	800a3ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 f8ba 	bl	800a53c <HAL_TIM_IC_CaptureCallback>
 800a3c8:	e005      	b.n	800a3d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f8ac 	bl	800a528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f8bd 	bl	800a550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	f003 0301 	and.w	r3, r3, #1
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00c      	beq.n	800a400 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d007      	beq.n	800a400 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f06f 0201 	mvn.w	r2, #1
 800a3f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7f6 fb94 	bl	8000b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00c      	beq.n	800a424 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a410:	2b00      	cmp	r3, #0
 800a412:	d007      	beq.n	800a424 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a41c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f9d2 	bl	800a7c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00c      	beq.n	800a448 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a434:	2b00      	cmp	r3, #0
 800a436:	d007      	beq.n	800a448 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f9ca 	bl	800a7dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00c      	beq.n	800a46c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d007      	beq.n	800a46c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f87c 	bl	800a564 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	f003 0320 	and.w	r3, r3, #32
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00c      	beq.n	800a490 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f003 0320 	and.w	r3, r3, #32
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d007      	beq.n	800a490 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f06f 0220 	mvn.w	r2, #32
 800a488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f992 	bl	800a7b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00c      	beq.n	800a4b4 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d007      	beq.n	800a4b4 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a4ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f99e 	bl	800a7f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00c      	beq.n	800a4d8 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d007      	beq.n	800a4d8 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a4d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 f996 	bl	800a804 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00c      	beq.n	800a4fc <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d007      	beq.n	800a4fc <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a4f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f98e 	bl	800a818 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00c      	beq.n	800a520 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d007      	beq.n	800a520 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f986 	bl	800a82c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a520:	bf00      	nop
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a530:	bf00      	nop
 800a532:	370c      	adds	r7, #12
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a544:	bf00      	nop
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a558:	bf00      	nop
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a74      	ldr	r2, [pc, #464]	; (800a75c <TIM_Base_SetConfig+0x1e4>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d02b      	beq.n	800a5e8 <TIM_Base_SetConfig+0x70>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a73      	ldr	r2, [pc, #460]	; (800a760 <TIM_Base_SetConfig+0x1e8>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d027      	beq.n	800a5e8 <TIM_Base_SetConfig+0x70>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a59e:	d023      	beq.n	800a5e8 <TIM_Base_SetConfig+0x70>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5a6:	d01f      	beq.n	800a5e8 <TIM_Base_SetConfig+0x70>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a6e      	ldr	r2, [pc, #440]	; (800a764 <TIM_Base_SetConfig+0x1ec>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d01b      	beq.n	800a5e8 <TIM_Base_SetConfig+0x70>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a6d      	ldr	r2, [pc, #436]	; (800a768 <TIM_Base_SetConfig+0x1f0>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d017      	beq.n	800a5e8 <TIM_Base_SetConfig+0x70>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a6c      	ldr	r2, [pc, #432]	; (800a76c <TIM_Base_SetConfig+0x1f4>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d013      	beq.n	800a5e8 <TIM_Base_SetConfig+0x70>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a6b      	ldr	r2, [pc, #428]	; (800a770 <TIM_Base_SetConfig+0x1f8>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d00f      	beq.n	800a5e8 <TIM_Base_SetConfig+0x70>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4a6a      	ldr	r2, [pc, #424]	; (800a774 <TIM_Base_SetConfig+0x1fc>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d00b      	beq.n	800a5e8 <TIM_Base_SetConfig+0x70>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	4a69      	ldr	r2, [pc, #420]	; (800a778 <TIM_Base_SetConfig+0x200>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d007      	beq.n	800a5e8 <TIM_Base_SetConfig+0x70>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4a68      	ldr	r2, [pc, #416]	; (800a77c <TIM_Base_SetConfig+0x204>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d003      	beq.n	800a5e8 <TIM_Base_SetConfig+0x70>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	4a67      	ldr	r2, [pc, #412]	; (800a780 <TIM_Base_SetConfig+0x208>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d108      	bne.n	800a5fa <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a57      	ldr	r2, [pc, #348]	; (800a75c <TIM_Base_SetConfig+0x1e4>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d05b      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a56      	ldr	r2, [pc, #344]	; (800a760 <TIM_Base_SetConfig+0x1e8>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d057      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a610:	d053      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a618:	d04f      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a51      	ldr	r2, [pc, #324]	; (800a764 <TIM_Base_SetConfig+0x1ec>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d04b      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a50      	ldr	r2, [pc, #320]	; (800a768 <TIM_Base_SetConfig+0x1f0>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d047      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4a4f      	ldr	r2, [pc, #316]	; (800a76c <TIM_Base_SetConfig+0x1f4>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d043      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a4e      	ldr	r2, [pc, #312]	; (800a770 <TIM_Base_SetConfig+0x1f8>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d03f      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a4d      	ldr	r2, [pc, #308]	; (800a774 <TIM_Base_SetConfig+0x1fc>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d03b      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a4c      	ldr	r2, [pc, #304]	; (800a778 <TIM_Base_SetConfig+0x200>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d037      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a4b      	ldr	r2, [pc, #300]	; (800a77c <TIM_Base_SetConfig+0x204>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d033      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4a4a      	ldr	r2, [pc, #296]	; (800a780 <TIM_Base_SetConfig+0x208>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d02f      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a49      	ldr	r2, [pc, #292]	; (800a784 <TIM_Base_SetConfig+0x20c>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d02b      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a48      	ldr	r2, [pc, #288]	; (800a788 <TIM_Base_SetConfig+0x210>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d027      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a47      	ldr	r2, [pc, #284]	; (800a78c <TIM_Base_SetConfig+0x214>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d023      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4a46      	ldr	r2, [pc, #280]	; (800a790 <TIM_Base_SetConfig+0x218>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d01f      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a45      	ldr	r2, [pc, #276]	; (800a794 <TIM_Base_SetConfig+0x21c>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d01b      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a44      	ldr	r2, [pc, #272]	; (800a798 <TIM_Base_SetConfig+0x220>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d017      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a43      	ldr	r2, [pc, #268]	; (800a79c <TIM_Base_SetConfig+0x224>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d013      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a42      	ldr	r2, [pc, #264]	; (800a7a0 <TIM_Base_SetConfig+0x228>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d00f      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4a41      	ldr	r2, [pc, #260]	; (800a7a4 <TIM_Base_SetConfig+0x22c>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d00b      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a40      	ldr	r2, [pc, #256]	; (800a7a8 <TIM_Base_SetConfig+0x230>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d007      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a3f      	ldr	r2, [pc, #252]	; (800a7ac <TIM_Base_SetConfig+0x234>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d003      	beq.n	800a6ba <TIM_Base_SetConfig+0x142>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4a3e      	ldr	r2, [pc, #248]	; (800a7b0 <TIM_Base_SetConfig+0x238>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d108      	bne.n	800a6cc <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	689a      	ldr	r2, [r3, #8]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	4a1a      	ldr	r2, [pc, #104]	; (800a75c <TIM_Base_SetConfig+0x1e4>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d023      	beq.n	800a740 <TIM_Base_SetConfig+0x1c8>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4a19      	ldr	r2, [pc, #100]	; (800a760 <TIM_Base_SetConfig+0x1e8>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d01f      	beq.n	800a740 <TIM_Base_SetConfig+0x1c8>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a1e      	ldr	r2, [pc, #120]	; (800a77c <TIM_Base_SetConfig+0x204>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d01b      	beq.n	800a740 <TIM_Base_SetConfig+0x1c8>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	4a1d      	ldr	r2, [pc, #116]	; (800a780 <TIM_Base_SetConfig+0x208>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d017      	beq.n	800a740 <TIM_Base_SetConfig+0x1c8>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a22      	ldr	r2, [pc, #136]	; (800a79c <TIM_Base_SetConfig+0x224>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d013      	beq.n	800a740 <TIM_Base_SetConfig+0x1c8>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a21      	ldr	r2, [pc, #132]	; (800a7a0 <TIM_Base_SetConfig+0x228>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d00f      	beq.n	800a740 <TIM_Base_SetConfig+0x1c8>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a20      	ldr	r2, [pc, #128]	; (800a7a4 <TIM_Base_SetConfig+0x22c>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d00b      	beq.n	800a740 <TIM_Base_SetConfig+0x1c8>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a1f      	ldr	r2, [pc, #124]	; (800a7a8 <TIM_Base_SetConfig+0x230>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d007      	beq.n	800a740 <TIM_Base_SetConfig+0x1c8>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a1e      	ldr	r2, [pc, #120]	; (800a7ac <TIM_Base_SetConfig+0x234>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d003      	beq.n	800a740 <TIM_Base_SetConfig+0x1c8>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a1d      	ldr	r2, [pc, #116]	; (800a7b0 <TIM_Base_SetConfig+0x238>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d103      	bne.n	800a748 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	691a      	ldr	r2, [r3, #16]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	615a      	str	r2, [r3, #20]
}
 800a74e:	bf00      	nop
 800a750:	3714      	adds	r7, #20
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	40012c00 	.word	0x40012c00
 800a760:	50012c00 	.word	0x50012c00
 800a764:	40000400 	.word	0x40000400
 800a768:	50000400 	.word	0x50000400
 800a76c:	40000800 	.word	0x40000800
 800a770:	50000800 	.word	0x50000800
 800a774:	40000c00 	.word	0x40000c00
 800a778:	50000c00 	.word	0x50000c00
 800a77c:	40013400 	.word	0x40013400
 800a780:	50013400 	.word	0x50013400
 800a784:	40001800 	.word	0x40001800
 800a788:	50001800 	.word	0x50001800
 800a78c:	40001c00 	.word	0x40001c00
 800a790:	50001c00 	.word	0x50001c00
 800a794:	40002000 	.word	0x40002000
 800a798:	50002000 	.word	0x50002000
 800a79c:	40014000 	.word	0x40014000
 800a7a0:	50014000 	.word	0x50014000
 800a7a4:	40014400 	.word	0x40014400
 800a7a8:	50014400 	.word	0x50014400
 800a7ac:	40014800 	.word	0x40014800
 800a7b0:	50014800 	.word	0x50014800

0800a7b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7bc:	bf00      	nop
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a7f8:	bf00      	nop
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e042      	b.n	800a8d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d106      	bne.n	800a86a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7f6 f981 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2224      	movs	r2, #36	; 0x24
 800a86e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f022 0201 	bic.w	r2, r2, #1
 800a880:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a886:	2b00      	cmp	r3, #0
 800a888:	d002      	beq.n	800a890 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fe0a 	bl	800b4a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fc19 	bl	800b0c8 <UART_SetConfig>
 800a896:	4603      	mov	r3, r0
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d101      	bne.n	800a8a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	e01b      	b.n	800a8d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	689a      	ldr	r2, [r3, #8]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f042 0201 	orr.w	r2, r2, #1
 800a8ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fe89 	bl	800b5e8 <UART_CheckIdleState>
 800a8d6:	4603      	mov	r3, r0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08a      	sub	sp, #40	; 0x28
 800a8e4:	af02      	add	r7, sp, #8
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	603b      	str	r3, [r7, #0]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f6:	2b20      	cmp	r3, #32
 800a8f8:	f040 808b 	bne.w	800aa12 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d002      	beq.n	800a908 <HAL_UART_Transmit+0x28>
 800a902:	88fb      	ldrh	r3, [r7, #6]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d101      	bne.n	800a90c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e083      	b.n	800aa14 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a916:	2b80      	cmp	r3, #128	; 0x80
 800a918:	d107      	bne.n	800a92a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	689a      	ldr	r2, [r3, #8]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a928:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2221      	movs	r2, #33	; 0x21
 800a936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a93a:	f7f7 fed5 	bl	80026e8 <HAL_GetTick>
 800a93e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	88fa      	ldrh	r2, [r7, #6]
 800a944:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	88fa      	ldrh	r2, [r7, #6]
 800a94c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a958:	d108      	bne.n	800a96c <HAL_UART_Transmit+0x8c>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d104      	bne.n	800a96c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a962:	2300      	movs	r3, #0
 800a964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	61bb      	str	r3, [r7, #24]
 800a96a:	e003      	b.n	800a974 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a970:	2300      	movs	r3, #0
 800a972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a974:	e030      	b.n	800a9d8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	9300      	str	r3, [sp, #0]
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	2200      	movs	r2, #0
 800a97e:	2180      	movs	r1, #128	; 0x80
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	f000 fedb 	bl	800b73c <UART_WaitOnFlagUntilTimeout>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d005      	beq.n	800a998 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2220      	movs	r2, #32
 800a990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a994:	2303      	movs	r3, #3
 800a996:	e03d      	b.n	800aa14 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10b      	bne.n	800a9b6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	3302      	adds	r3, #2
 800a9b2:	61bb      	str	r3, [r7, #24]
 800a9b4:	e007      	b.n	800a9c6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	781a      	ldrb	r2, [r3, #0]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1c8      	bne.n	800a976 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	2140      	movs	r1, #64	; 0x40
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f000 fea4 	bl	800b73c <UART_WaitOnFlagUntilTimeout>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d005      	beq.n	800aa06 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2220      	movs	r2, #32
 800a9fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800aa02:	2303      	movs	r3, #3
 800aa04:	e006      	b.n	800aa14 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2220      	movs	r2, #32
 800aa0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e000      	b.n	800aa14 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800aa12:	2302      	movs	r3, #2
  }
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3720      	adds	r7, #32
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08a      	sub	sp, #40	; 0x28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	4613      	mov	r3, r2
 800aa28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa30:	2b20      	cmp	r3, #32
 800aa32:	d14b      	bne.n	800aacc <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d002      	beq.n	800aa40 <HAL_UART_Receive_IT+0x24>
 800aa3a:	88fb      	ldrh	r3, [r7, #6]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	e044      	b.n	800aace <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa54:	2b40      	cmp	r3, #64	; 0x40
 800aa56:	d107      	bne.n	800aa68 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	689a      	ldr	r2, [r3, #8]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa66:	609a      	str	r2, [r3, #8]
    }

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a1a      	ldr	r2, [pc, #104]	; (800aad8 <HAL_UART_Receive_IT+0xbc>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d024      	beq.n	800aabc <HAL_UART_Receive_IT+0xa0>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a19      	ldr	r2, [pc, #100]	; (800aadc <HAL_UART_Receive_IT+0xc0>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d01f      	beq.n	800aabc <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d018      	beq.n	800aabc <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	e853 3f00 	ldrex	r3, [r3]
 800aa96:	613b      	str	r3, [r7, #16]
   return(result);
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aa9e:	627b      	str	r3, [r7, #36]	; 0x24
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa8:	623b      	str	r3, [r7, #32]
 800aaaa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaac:	69f9      	ldr	r1, [r7, #28]
 800aaae:	6a3a      	ldr	r2, [r7, #32]
 800aab0:	e841 2300 	strex	r3, r2, [r1]
 800aab4:	61bb      	str	r3, [r7, #24]
   return(result);
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1e6      	bne.n	800aa8a <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800aabc:	88fb      	ldrh	r3, [r7, #6]
 800aabe:	461a      	mov	r2, r3
 800aac0:	68b9      	ldr	r1, [r7, #8]
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	f000 fea2 	bl	800b80c <UART_Start_Receive_IT>
 800aac8:	4603      	mov	r3, r0
 800aaca:	e000      	b.n	800aace <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800aacc:	2302      	movs	r3, #2
  }
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3728      	adds	r7, #40	; 0x28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	44002400 	.word	0x44002400
 800aadc:	54002400 	.word	0x54002400

0800aae0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b0ae      	sub	sp, #184	; 0xb8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	69db      	ldr	r3, [r3, #28]
 800aaee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ab06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ab0a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ab0e:	4013      	ands	r3, r2
 800ab10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 800ab14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d11b      	bne.n	800ab54 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ab1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ab20:	f003 0320 	and.w	r3, r3, #32
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d015      	beq.n	800ab54 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ab28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ab2c:	f003 0320 	and.w	r3, r3, #32
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d105      	bne.n	800ab40 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ab34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d009      	beq.n	800ab54 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f000 8293 	beq.w	800b070 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	4798      	blx	r3
      }
      return;
 800ab52:	e28d      	b.n	800b070 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ab54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f000 80fd 	beq.w	800ad58 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ab5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ab62:	4b7a      	ldr	r3, [pc, #488]	; (800ad4c <HAL_UART_IRQHandler+0x26c>)
 800ab64:	4013      	ands	r3, r2
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d106      	bne.n	800ab78 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ab6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ab6e:	4b78      	ldr	r3, [pc, #480]	; (800ad50 <HAL_UART_IRQHandler+0x270>)
 800ab70:	4013      	ands	r3, r2
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f000 80f0 	beq.w	800ad58 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ab7c:	f003 0301 	and.w	r3, r3, #1
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d011      	beq.n	800aba8 <HAL_UART_IRQHandler+0xc8>
 800ab84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ab88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00b      	beq.n	800aba8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2201      	movs	r2, #1
 800ab96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab9e:	f043 0201 	orr.w	r2, r3, #1
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aba8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800abac:	f003 0302 	and.w	r3, r3, #2
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d011      	beq.n	800abd8 <HAL_UART_IRQHandler+0xf8>
 800abb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800abb8:	f003 0301 	and.w	r3, r3, #1
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d00b      	beq.n	800abd8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2202      	movs	r2, #2
 800abc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abce:	f043 0204 	orr.w	r2, r3, #4
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800abd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800abdc:	f003 0304 	and.w	r3, r3, #4
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d011      	beq.n	800ac08 <HAL_UART_IRQHandler+0x128>
 800abe4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800abe8:	f003 0301 	and.w	r3, r3, #1
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00b      	beq.n	800ac08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2204      	movs	r2, #4
 800abf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abfe:	f043 0202 	orr.w	r2, r3, #2
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ac08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ac0c:	f003 0308 	and.w	r3, r3, #8
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d017      	beq.n	800ac44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ac18:	f003 0320 	and.w	r3, r3, #32
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d105      	bne.n	800ac2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ac20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ac24:	4b49      	ldr	r3, [pc, #292]	; (800ad4c <HAL_UART_IRQHandler+0x26c>)
 800ac26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00b      	beq.n	800ac44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2208      	movs	r2, #8
 800ac32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac3a:	f043 0208 	orr.w	r2, r3, #8
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ac44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ac48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d012      	beq.n	800ac76 <HAL_UART_IRQHandler+0x196>
 800ac50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ac54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00c      	beq.n	800ac76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac6c:	f043 0220 	orr.w	r2, r3, #32
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 81f9 	beq.w	800b074 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ac86:	f003 0320 	and.w	r3, r3, #32
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d013      	beq.n	800acb6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ac92:	f003 0320 	and.w	r3, r3, #32
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d105      	bne.n	800aca6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d007      	beq.n	800acb6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acca:	2b40      	cmp	r3, #64	; 0x40
 800accc:	d005      	beq.n	800acda <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800acce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800acd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d02e      	beq.n	800ad38 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 feb8 	bl	800ba50 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acea:	2b40      	cmp	r3, #64	; 0x40
 800acec:	d120      	bne.n	800ad30 <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d017      	beq.n	800ad28 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acfe:	4a15      	ldr	r2, [pc, #84]	; (800ad54 <HAL_UART_IRQHandler+0x274>)
 800ad00:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7f7 fe79 	bl	8002a00 <HAL_DMA_Abort_IT>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d019      	beq.n	800ad48 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ad22:	4610      	mov	r0, r2
 800ad24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad26:	e00f      	b.n	800ad48 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 f9b7 	bl	800b09c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad2e:	e00b      	b.n	800ad48 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f9b3 	bl	800b09c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad36:	e007      	b.n	800ad48 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 f9af 	bl	800b09c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ad46:	e195      	b.n	800b074 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad48:	bf00      	nop
    return;
 800ad4a:	e193      	b.n	800b074 <HAL_UART_IRQHandler+0x594>
 800ad4c:	10000001 	.word	0x10000001
 800ad50:	04000120 	.word	0x04000120
 800ad54:	0800bb1d 	.word	0x0800bb1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	f040 8129 	bne.w	800afb4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ad62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ad66:	f003 0310 	and.w	r3, r3, #16
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f000 8122 	beq.w	800afb4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ad70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ad74:	f003 0310 	and.w	r3, r3, #16
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 811b 	beq.w	800afb4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2210      	movs	r2, #16
 800ad84:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad90:	2b40      	cmp	r3, #64	; 0x40
 800ad92:	f040 8091 	bne.w	800aeb8 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ada0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800ada4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f000 8165 	beq.w	800b078 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800adb4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800adb8:	429a      	cmp	r2, r3
 800adba:	f080 815d 	bcs.w	800b078 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800adc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800add0:	2b81      	cmp	r3, #129	; 0x81
 800add2:	d060      	beq.n	800ae96 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800addc:	e853 3f00 	ldrex	r3, [r3]
 800ade0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ade2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ade4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ade8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	461a      	mov	r2, r3
 800adf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800adfa:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800adfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ae02:	e841 2300 	strex	r3, r2, [r1]
 800ae06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ae08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1e2      	bne.n	800add4 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3308      	adds	r3, #8
 800ae14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae18:	e853 3f00 	ldrex	r3, [r3]
 800ae1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ae1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae20:	f023 0301 	bic.w	r3, r3, #1
 800ae24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ae32:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ae34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ae38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ae3a:	e841 2300 	strex	r3, r2, [r1]
 800ae3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ae40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1e3      	bne.n	800ae0e <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2220      	movs	r2, #32
 800ae4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae5c:	e853 3f00 	ldrex	r3, [r3]
 800ae60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ae62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae64:	f023 0310 	bic.w	r3, r3, #16
 800ae68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	461a      	mov	r2, r3
 800ae72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae76:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae7e:	e841 2300 	strex	r3, r2, [r1]
 800ae82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ae84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1e4      	bne.n	800ae54 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f7 fd39 	bl	8002908 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2202      	movs	r2, #2
 800ae9a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	4619      	mov	r1, r3
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 f8fd 	bl	800b0b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aeb6:	e0df      	b.n	800b078 <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f000 80d1 	beq.w	800b07c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800aeda:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f000 80cc 	beq.w	800b07c <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeec:	e853 3f00 	ldrex	r3, [r3]
 800aef0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	461a      	mov	r2, r3
 800af02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af06:	647b      	str	r3, [r7, #68]	; 0x44
 800af08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e4      	bne.n	800aee4 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	3308      	adds	r3, #8
 800af20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af24:	e853 3f00 	ldrex	r3, [r3]
 800af28:	623b      	str	r3, [r7, #32]
   return(result);
 800af2a:	6a3b      	ldr	r3, [r7, #32]
 800af2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af30:	f023 0301 	bic.w	r3, r3, #1
 800af34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	3308      	adds	r3, #8
 800af3e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800af42:	633a      	str	r2, [r7, #48]	; 0x30
 800af44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af4a:	e841 2300 	strex	r3, r2, [r1]
 800af4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1e1      	bne.n	800af1a <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2220      	movs	r2, #32
 800af5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	e853 3f00 	ldrex	r3, [r3]
 800af76:	60fb      	str	r3, [r7, #12]
   return(result);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f023 0310 	bic.w	r3, r3, #16
 800af7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800af8c:	61fb      	str	r3, [r7, #28]
 800af8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af90:	69b9      	ldr	r1, [r7, #24]
 800af92:	69fa      	ldr	r2, [r7, #28]
 800af94:	e841 2300 	strex	r3, r2, [r1]
 800af98:	617b      	str	r3, [r7, #20]
   return(result);
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1e4      	bne.n	800af6a <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2202      	movs	r2, #2
 800afa4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800afa6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800afaa:	4619      	mov	r1, r3
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f87f 	bl	800b0b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800afb2:	e063      	b.n	800b07c <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800afb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800afb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00e      	beq.n	800afde <HAL_UART_IRQHandler+0x4fe>
 800afc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800afc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d008      	beq.n	800afde <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800afd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f001 fb1a 	bl	800c610 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800afdc:	e051      	b.n	800b082 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800afde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800afe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d014      	beq.n	800b014 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800afea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800afee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d105      	bne.n	800b002 <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800affa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800affe:	2b00      	cmp	r3, #0
 800b000:	d008      	beq.n	800b014 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b006:	2b00      	cmp	r3, #0
 800b008:	d03a      	beq.n	800b080 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	4798      	blx	r3
    }
    return;
 800b012:	e035      	b.n	800b080 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b014:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d009      	beq.n	800b034 <HAL_UART_IRQHandler+0x554>
 800b020:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d003      	beq.n	800b034 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fd8b 	bl	800bb48 <UART_EndTransmit_IT>
    return;
 800b032:	e026      	b.n	800b082 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b034:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b038:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d009      	beq.n	800b054 <HAL_UART_IRQHandler+0x574>
 800b040:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b044:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d003      	beq.n	800b054 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f001 faf3 	bl	800c638 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b052:	e016      	b.n	800b082 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b054:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d010      	beq.n	800b082 <HAL_UART_IRQHandler+0x5a2>
 800b060:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b064:	2b00      	cmp	r3, #0
 800b066:	da0c      	bge.n	800b082 <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f001 fadb 	bl	800c624 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b06e:	e008      	b.n	800b082 <HAL_UART_IRQHandler+0x5a2>
      return;
 800b070:	bf00      	nop
 800b072:	e006      	b.n	800b082 <HAL_UART_IRQHandler+0x5a2>
    return;
 800b074:	bf00      	nop
 800b076:	e004      	b.n	800b082 <HAL_UART_IRQHandler+0x5a2>
      return;
 800b078:	bf00      	nop
 800b07a:	e002      	b.n	800b082 <HAL_UART_IRQHandler+0x5a2>
      return;
 800b07c:	bf00      	nop
 800b07e:	e000      	b.n	800b082 <HAL_UART_IRQHandler+0x5a2>
    return;
 800b080:	bf00      	nop
  }
}
 800b082:	37b8      	adds	r7, #184	; 0xb8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b090:	bf00      	nop
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b0a4:	bf00      	nop
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b0bc:	bf00      	nop
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0cc:	b094      	sub	sp, #80	; 0x50
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	4b78      	ldr	r3, [pc, #480]	; (800b2c0 <UART_SetConfig+0x1f8>)
 800b0de:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e2:	689a      	ldr	r2, [r3, #8]
 800b0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	431a      	orrs	r2, r3
 800b0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	431a      	orrs	r2, r3
 800b0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f2:	69db      	ldr	r3, [r3, #28]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4971      	ldr	r1, [pc, #452]	; (800b2c4 <UART_SetConfig+0x1fc>)
 800b100:	4019      	ands	r1, r3
 800b102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b108:	430b      	orrs	r3, r1
 800b10a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b118:	68d9      	ldr	r1, [r3, #12]
 800b11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	ea40 0301 	orr.w	r3, r0, r1
 800b122:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b126:	699b      	ldr	r3, [r3, #24]
 800b128:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	4b64      	ldr	r3, [pc, #400]	; (800b2c0 <UART_SetConfig+0x1f8>)
 800b130:	429a      	cmp	r2, r3
 800b132:	d009      	beq.n	800b148 <UART_SetConfig+0x80>
 800b134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	4b63      	ldr	r3, [pc, #396]	; (800b2c8 <UART_SetConfig+0x200>)
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d004      	beq.n	800b148 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b140:	6a1a      	ldr	r2, [r3, #32]
 800b142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b144:	4313      	orrs	r3, r2
 800b146:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800b152:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800b156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b15c:	430b      	orrs	r3, r1
 800b15e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b166:	f023 000f 	bic.w	r0, r3, #15
 800b16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	ea40 0301 	orr.w	r3, r0, r1
 800b176:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	4b53      	ldr	r3, [pc, #332]	; (800b2cc <UART_SetConfig+0x204>)
 800b17e:	429a      	cmp	r2, r3
 800b180:	d102      	bne.n	800b188 <UART_SetConfig+0xc0>
 800b182:	2301      	movs	r3, #1
 800b184:	64bb      	str	r3, [r7, #72]	; 0x48
 800b186:	e066      	b.n	800b256 <UART_SetConfig+0x18e>
 800b188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	4b50      	ldr	r3, [pc, #320]	; (800b2d0 <UART_SetConfig+0x208>)
 800b18e:	429a      	cmp	r2, r3
 800b190:	d102      	bne.n	800b198 <UART_SetConfig+0xd0>
 800b192:	2302      	movs	r3, #2
 800b194:	64bb      	str	r3, [r7, #72]	; 0x48
 800b196:	e05e      	b.n	800b256 <UART_SetConfig+0x18e>
 800b198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	4b4d      	ldr	r3, [pc, #308]	; (800b2d4 <UART_SetConfig+0x20c>)
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d102      	bne.n	800b1a8 <UART_SetConfig+0xe0>
 800b1a2:	2304      	movs	r3, #4
 800b1a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1a6:	e056      	b.n	800b256 <UART_SetConfig+0x18e>
 800b1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	4b4a      	ldr	r3, [pc, #296]	; (800b2d8 <UART_SetConfig+0x210>)
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d102      	bne.n	800b1b8 <UART_SetConfig+0xf0>
 800b1b2:	2308      	movs	r3, #8
 800b1b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1b6:	e04e      	b.n	800b256 <UART_SetConfig+0x18e>
 800b1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	4b47      	ldr	r3, [pc, #284]	; (800b2dc <UART_SetConfig+0x214>)
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d102      	bne.n	800b1c8 <UART_SetConfig+0x100>
 800b1c2:	2310      	movs	r3, #16
 800b1c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1c6:	e046      	b.n	800b256 <UART_SetConfig+0x18e>
 800b1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	4b44      	ldr	r3, [pc, #272]	; (800b2e0 <UART_SetConfig+0x218>)
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d102      	bne.n	800b1d8 <UART_SetConfig+0x110>
 800b1d2:	2320      	movs	r3, #32
 800b1d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1d6:	e03e      	b.n	800b256 <UART_SetConfig+0x18e>
 800b1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	4b41      	ldr	r3, [pc, #260]	; (800b2e4 <UART_SetConfig+0x21c>)
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d102      	bne.n	800b1e8 <UART_SetConfig+0x120>
 800b1e2:	2340      	movs	r3, #64	; 0x40
 800b1e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1e6:	e036      	b.n	800b256 <UART_SetConfig+0x18e>
 800b1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	4b3e      	ldr	r3, [pc, #248]	; (800b2e8 <UART_SetConfig+0x220>)
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d102      	bne.n	800b1f8 <UART_SetConfig+0x130>
 800b1f2:	2380      	movs	r3, #128	; 0x80
 800b1f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1f6:	e02e      	b.n	800b256 <UART_SetConfig+0x18e>
 800b1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	4b3b      	ldr	r3, [pc, #236]	; (800b2ec <UART_SetConfig+0x224>)
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d103      	bne.n	800b20a <UART_SetConfig+0x142>
 800b202:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b206:	64bb      	str	r3, [r7, #72]	; 0x48
 800b208:	e025      	b.n	800b256 <UART_SetConfig+0x18e>
 800b20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	4b38      	ldr	r3, [pc, #224]	; (800b2f0 <UART_SetConfig+0x228>)
 800b210:	429a      	cmp	r2, r3
 800b212:	d103      	bne.n	800b21c <UART_SetConfig+0x154>
 800b214:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b218:	64bb      	str	r3, [r7, #72]	; 0x48
 800b21a:	e01c      	b.n	800b256 <UART_SetConfig+0x18e>
 800b21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	4b34      	ldr	r3, [pc, #208]	; (800b2f4 <UART_SetConfig+0x22c>)
 800b222:	429a      	cmp	r2, r3
 800b224:	d103      	bne.n	800b22e <UART_SetConfig+0x166>
 800b226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b22a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b22c:	e013      	b.n	800b256 <UART_SetConfig+0x18e>
 800b22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	4b31      	ldr	r3, [pc, #196]	; (800b2f8 <UART_SetConfig+0x230>)
 800b234:	429a      	cmp	r2, r3
 800b236:	d103      	bne.n	800b240 <UART_SetConfig+0x178>
 800b238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b23c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b23e:	e00a      	b.n	800b256 <UART_SetConfig+0x18e>
 800b240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	4b1e      	ldr	r3, [pc, #120]	; (800b2c0 <UART_SetConfig+0x1f8>)
 800b246:	429a      	cmp	r2, r3
 800b248:	d103      	bne.n	800b252 <UART_SetConfig+0x18a>
 800b24a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b24e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b250:	e001      	b.n	800b256 <UART_SetConfig+0x18e>
 800b252:	2300      	movs	r3, #0
 800b254:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	4b19      	ldr	r3, [pc, #100]	; (800b2c0 <UART_SetConfig+0x1f8>)
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d005      	beq.n	800b26c <UART_SetConfig+0x1a4>
 800b260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	4b18      	ldr	r3, [pc, #96]	; (800b2c8 <UART_SetConfig+0x200>)
 800b266:	429a      	cmp	r2, r3
 800b268:	f040 8094 	bne.w	800b394 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b26c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b26e:	2200      	movs	r2, #0
 800b270:	623b      	str	r3, [r7, #32]
 800b272:	627a      	str	r2, [r7, #36]	; 0x24
 800b274:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b278:	f7fc fa44 	bl	8007704 <HAL_RCCEx_GetPeriphCLKFreq>
 800b27c:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b27e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b280:	2b00      	cmp	r3, #0
 800b282:	f000 80f7 	beq.w	800b474 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28a:	4a1c      	ldr	r2, [pc, #112]	; (800b2fc <UART_SetConfig+0x234>)
 800b28c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b290:	461a      	mov	r2, r3
 800b292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b294:	fbb3 f3f2 	udiv	r3, r3, r2
 800b298:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29c:	685a      	ldr	r2, [r3, #4]
 800b29e:	4613      	mov	r3, r2
 800b2a0:	005b      	lsls	r3, r3, #1
 800b2a2:	4413      	add	r3, r2
 800b2a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d305      	bcc.n	800b2b6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d924      	bls.n	800b300 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b2bc:	e069      	b.n	800b392 <UART_SetConfig+0x2ca>
 800b2be:	bf00      	nop
 800b2c0:	44002400 	.word	0x44002400
 800b2c4:	cfff69f3 	.word	0xcfff69f3
 800b2c8:	54002400 	.word	0x54002400
 800b2cc:	40013800 	.word	0x40013800
 800b2d0:	40004400 	.word	0x40004400
 800b2d4:	40004800 	.word	0x40004800
 800b2d8:	40004c00 	.word	0x40004c00
 800b2dc:	40005000 	.word	0x40005000
 800b2e0:	40006400 	.word	0x40006400
 800b2e4:	40007800 	.word	0x40007800
 800b2e8:	40007c00 	.word	0x40007c00
 800b2ec:	40008000 	.word	0x40008000
 800b2f0:	40006800 	.word	0x40006800
 800b2f4:	40006c00 	.word	0x40006c00
 800b2f8:	40008400 	.word	0x40008400
 800b2fc:	0800eda8 	.word	0x0800eda8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b302:	2200      	movs	r2, #0
 800b304:	61bb      	str	r3, [r7, #24]
 800b306:	61fa      	str	r2, [r7, #28]
 800b308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30c:	4a64      	ldr	r2, [pc, #400]	; (800b4a0 <UART_SetConfig+0x3d8>)
 800b30e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b312:	b29b      	uxth	r3, r3
 800b314:	2200      	movs	r2, #0
 800b316:	613b      	str	r3, [r7, #16]
 800b318:	617a      	str	r2, [r7, #20]
 800b31a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b31e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b322:	f7f4 ffc7 	bl	80002b4 <__aeabi_uldivmod>
 800b326:	4602      	mov	r2, r0
 800b328:	460b      	mov	r3, r1
 800b32a:	4610      	mov	r0, r2
 800b32c:	4619      	mov	r1, r3
 800b32e:	f04f 0200 	mov.w	r2, #0
 800b332:	f04f 0300 	mov.w	r3, #0
 800b336:	020b      	lsls	r3, r1, #8
 800b338:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b33c:	0202      	lsls	r2, r0, #8
 800b33e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b340:	6849      	ldr	r1, [r1, #4]
 800b342:	0849      	lsrs	r1, r1, #1
 800b344:	2000      	movs	r0, #0
 800b346:	460c      	mov	r4, r1
 800b348:	4605      	mov	r5, r0
 800b34a:	eb12 0804 	adds.w	r8, r2, r4
 800b34e:	eb43 0905 	adc.w	r9, r3, r5
 800b352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	60bb      	str	r3, [r7, #8]
 800b35a:	60fa      	str	r2, [r7, #12]
 800b35c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b360:	4640      	mov	r0, r8
 800b362:	4649      	mov	r1, r9
 800b364:	f7f4 ffa6 	bl	80002b4 <__aeabi_uldivmod>
 800b368:	4602      	mov	r2, r0
 800b36a:	460b      	mov	r3, r1
 800b36c:	4613      	mov	r3, r2
 800b36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b376:	d308      	bcc.n	800b38a <UART_SetConfig+0x2c2>
 800b378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b37a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b37e:	d204      	bcs.n	800b38a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800b380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b386:	60da      	str	r2, [r3, #12]
 800b388:	e003      	b.n	800b392 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800b390:	e070      	b.n	800b474 <UART_SetConfig+0x3ac>
 800b392:	e06f      	b.n	800b474 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b396:	69db      	ldr	r3, [r3, #28]
 800b398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b39c:	d13c      	bne.n	800b418 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b39e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	603b      	str	r3, [r7, #0]
 800b3a4:	607a      	str	r2, [r7, #4]
 800b3a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b3aa:	f7fc f9ab 	bl	8007704 <HAL_RCCEx_GetPeriphCLKFreq>
 800b3ae:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d05e      	beq.n	800b474 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ba:	4a39      	ldr	r2, [pc, #228]	; (800b4a0 <UART_SetConfig+0x3d8>)
 800b3bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3c8:	005a      	lsls	r2, r3, #1
 800b3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	085b      	lsrs	r3, r3, #1
 800b3d0:	441a      	add	r2, r3
 800b3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3da:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3de:	2b0f      	cmp	r3, #15
 800b3e0:	d916      	bls.n	800b410 <UART_SetConfig+0x348>
 800b3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3e8:	d212      	bcs.n	800b410 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	f023 030f 	bic.w	r3, r3, #15
 800b3f2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3f6:	085b      	lsrs	r3, r3, #1
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	f003 0307 	and.w	r3, r3, #7
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b402:	4313      	orrs	r3, r2
 800b404:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800b406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b40c:	60da      	str	r2, [r3, #12]
 800b40e:	e031      	b.n	800b474 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b410:	2301      	movs	r3, #1
 800b412:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b416:	e02d      	b.n	800b474 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b41a:	2200      	movs	r2, #0
 800b41c:	469a      	mov	sl, r3
 800b41e:	4693      	mov	fp, r2
 800b420:	4650      	mov	r0, sl
 800b422:	4659      	mov	r1, fp
 800b424:	f7fc f96e 	bl	8007704 <HAL_RCCEx_GetPeriphCLKFreq>
 800b428:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800b42a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d021      	beq.n	800b474 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b434:	4a1a      	ldr	r2, [pc, #104]	; (800b4a0 <UART_SetConfig+0x3d8>)
 800b436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b43a:	461a      	mov	r2, r3
 800b43c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b43e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	085b      	lsrs	r3, r3, #1
 800b448:	441a      	add	r2, r3
 800b44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b452:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b456:	2b0f      	cmp	r3, #15
 800b458:	d909      	bls.n	800b46e <UART_SetConfig+0x3a6>
 800b45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b45c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b460:	d205      	bcs.n	800b46e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b464:	b29a      	uxth	r2, r3
 800b466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	60da      	str	r2, [r3, #12]
 800b46c:	e002      	b.n	800b474 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b476:	2201      	movs	r2, #1
 800b478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47e:	2201      	movs	r2, #1
 800b480:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b486:	2200      	movs	r2, #0
 800b488:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48c:	2200      	movs	r2, #0
 800b48e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b490:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b494:	4618      	mov	r0, r3
 800b496:	3750      	adds	r7, #80	; 0x50
 800b498:	46bd      	mov	sp, r7
 800b49a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b49e:	bf00      	nop
 800b4a0:	0800eda8 	.word	0x0800eda8

0800b4a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b0:	f003 0308 	and.w	r3, r3, #8
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00a      	beq.n	800b4ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	430a      	orrs	r2, r1
 800b4cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d2:	f003 0301 	and.w	r3, r3, #1
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00a      	beq.n	800b4f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	430a      	orrs	r2, r1
 800b4ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f4:	f003 0302 	and.w	r3, r3, #2
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00a      	beq.n	800b512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	430a      	orrs	r2, r1
 800b510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b516:	f003 0304 	and.w	r3, r3, #4
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00a      	beq.n	800b534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	430a      	orrs	r2, r1
 800b532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b538:	f003 0310 	and.w	r3, r3, #16
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00a      	beq.n	800b556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	430a      	orrs	r2, r1
 800b554:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b55a:	f003 0320 	and.w	r3, r3, #32
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00a      	beq.n	800b578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	430a      	orrs	r2, r1
 800b576:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b57c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b580:	2b00      	cmp	r3, #0
 800b582:	d01a      	beq.n	800b5ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	430a      	orrs	r2, r1
 800b598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b59e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5a2:	d10a      	bne.n	800b5ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	430a      	orrs	r2, r1
 800b5b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00a      	beq.n	800b5dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	430a      	orrs	r2, r1
 800b5da:	605a      	str	r2, [r3, #4]
  }
}
 800b5dc:	bf00      	nop
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b098      	sub	sp, #96	; 0x60
 800b5ec:	af02      	add	r7, sp, #8
 800b5ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5f8:	f7f7 f876 	bl	80026e8 <HAL_GetTick>
 800b5fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f003 0308 	and.w	r3, r3, #8
 800b608:	2b08      	cmp	r3, #8
 800b60a:	d12f      	bne.n	800b66c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b60c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b614:	2200      	movs	r2, #0
 800b616:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f88e 	bl	800b73c <UART_WaitOnFlagUntilTimeout>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	d022      	beq.n	800b66c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62e:	e853 3f00 	ldrex	r3, [r3]
 800b632:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b63a:	653b      	str	r3, [r7, #80]	; 0x50
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	461a      	mov	r2, r3
 800b642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b644:	647b      	str	r3, [r7, #68]	; 0x44
 800b646:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b648:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b64a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b64c:	e841 2300 	strex	r3, r2, [r1]
 800b650:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1e6      	bne.n	800b626 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2220      	movs	r2, #32
 800b65c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b668:	2303      	movs	r3, #3
 800b66a:	e063      	b.n	800b734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f003 0304 	and.w	r3, r3, #4
 800b676:	2b04      	cmp	r3, #4
 800b678:	d149      	bne.n	800b70e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b67a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b682:	2200      	movs	r2, #0
 800b684:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f857 	bl	800b73c <UART_WaitOnFlagUntilTimeout>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d03c      	beq.n	800b70e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69c:	e853 3f00 	ldrex	r3, [r3]
 800b6a0:	623b      	str	r3, [r7, #32]
   return(result);
 800b6a2:	6a3b      	ldr	r3, [r7, #32]
 800b6a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b6a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6b2:	633b      	str	r3, [r7, #48]	; 0x30
 800b6b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ba:	e841 2300 	strex	r3, r2, [r1]
 800b6be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1e6      	bne.n	800b694 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	3308      	adds	r3, #8
 800b6cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	e853 3f00 	ldrex	r3, [r3]
 800b6d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f023 0301 	bic.w	r3, r3, #1
 800b6dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	3308      	adds	r3, #8
 800b6e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6e6:	61fa      	str	r2, [r7, #28]
 800b6e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ea:	69b9      	ldr	r1, [r7, #24]
 800b6ec:	69fa      	ldr	r2, [r7, #28]
 800b6ee:	e841 2300 	strex	r3, r2, [r1]
 800b6f2:	617b      	str	r3, [r7, #20]
   return(result);
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1e5      	bne.n	800b6c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2220      	movs	r2, #32
 800b6fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b70a:	2303      	movs	r3, #3
 800b70c:	e012      	b.n	800b734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2220      	movs	r2, #32
 800b712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2220      	movs	r2, #32
 800b71a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3758      	adds	r7, #88	; 0x58
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	603b      	str	r3, [r7, #0]
 800b748:	4613      	mov	r3, r2
 800b74a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b74c:	e049      	b.n	800b7e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b754:	d045      	beq.n	800b7e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b756:	f7f6 ffc7 	bl	80026e8 <HAL_GetTick>
 800b75a:	4602      	mov	r2, r0
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	1ad3      	subs	r3, r2, r3
 800b760:	69ba      	ldr	r2, [r7, #24]
 800b762:	429a      	cmp	r2, r3
 800b764:	d302      	bcc.n	800b76c <UART_WaitOnFlagUntilTimeout+0x30>
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d101      	bne.n	800b770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b76c:	2303      	movs	r3, #3
 800b76e:	e048      	b.n	800b802 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f003 0304 	and.w	r3, r3, #4
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d031      	beq.n	800b7e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	69db      	ldr	r3, [r3, #28]
 800b784:	f003 0308 	and.w	r3, r3, #8
 800b788:	2b08      	cmp	r3, #8
 800b78a:	d110      	bne.n	800b7ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2208      	movs	r2, #8
 800b792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f000 f95b 	bl	800ba50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2208      	movs	r2, #8
 800b79e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e029      	b.n	800b802 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	69db      	ldr	r3, [r3, #28]
 800b7b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7bc:	d111      	bne.n	800b7e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b7c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f000 f941 	bl	800ba50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2220      	movs	r2, #32
 800b7d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b7de:	2303      	movs	r3, #3
 800b7e0:	e00f      	b.n	800b802 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	69da      	ldr	r2, [r3, #28]
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	68ba      	ldr	r2, [r7, #8]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	bf0c      	ite	eq
 800b7f2:	2301      	moveq	r3, #1
 800b7f4:	2300      	movne	r3, #0
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	79fb      	ldrb	r3, [r7, #7]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d0a6      	beq.n	800b74e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
	...

0800b80c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b0a3      	sub	sp, #140	; 0x8c
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	4613      	mov	r3, r2
 800b818:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	88fa      	ldrh	r2, [r7, #6]
 800b824:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	88fa      	ldrh	r2, [r7, #6]
 800b82c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b83e:	d10e      	bne.n	800b85e <UART_Start_Receive_IT+0x52>
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d105      	bne.n	800b854 <UART_Start_Receive_IT+0x48>
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b84e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b852:	e02d      	b.n	800b8b0 <UART_Start_Receive_IT+0xa4>
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	22ff      	movs	r2, #255	; 0xff
 800b858:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b85c:	e028      	b.n	800b8b0 <UART_Start_Receive_IT+0xa4>
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d10d      	bne.n	800b882 <UART_Start_Receive_IT+0x76>
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	691b      	ldr	r3, [r3, #16]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d104      	bne.n	800b878 <UART_Start_Receive_IT+0x6c>
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	22ff      	movs	r2, #255	; 0xff
 800b872:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b876:	e01b      	b.n	800b8b0 <UART_Start_Receive_IT+0xa4>
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	227f      	movs	r2, #127	; 0x7f
 800b87c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b880:	e016      	b.n	800b8b0 <UART_Start_Receive_IT+0xa4>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b88a:	d10d      	bne.n	800b8a8 <UART_Start_Receive_IT+0x9c>
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	691b      	ldr	r3, [r3, #16]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d104      	bne.n	800b89e <UART_Start_Receive_IT+0x92>
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	227f      	movs	r2, #127	; 0x7f
 800b898:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b89c:	e008      	b.n	800b8b0 <UART_Start_Receive_IT+0xa4>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	223f      	movs	r2, #63	; 0x3f
 800b8a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8a6:	e003      	b.n	800b8b0 <UART_Start_Receive_IT+0xa4>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2222      	movs	r2, #34	; 0x22
 800b8bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	3308      	adds	r3, #8
 800b8c6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8ca:	e853 3f00 	ldrex	r3, [r3]
 800b8ce:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b8d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8d2:	f043 0301 	orr.w	r3, r3, #1
 800b8d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	3308      	adds	r3, #8
 800b8e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b8e4:	673a      	str	r2, [r7, #112]	; 0x70
 800b8e6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b8ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b8ec:	e841 2300 	strex	r3, r2, [r1]
 800b8f0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b8f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1e3      	bne.n	800b8c0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b900:	d14f      	bne.n	800b9a2 <UART_Start_Receive_IT+0x196>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b908:	88fa      	ldrh	r2, [r7, #6]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d349      	bcc.n	800b9a2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	689b      	ldr	r3, [r3, #8]
 800b912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b916:	d107      	bne.n	800b928 <UART_Start_Receive_IT+0x11c>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	691b      	ldr	r3, [r3, #16]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d103      	bne.n	800b928 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	4a47      	ldr	r2, [pc, #284]	; (800ba40 <UART_Start_Receive_IT+0x234>)
 800b924:	675a      	str	r2, [r3, #116]	; 0x74
 800b926:	e002      	b.n	800b92e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	4a46      	ldr	r2, [pc, #280]	; (800ba44 <UART_Start_Receive_IT+0x238>)
 800b92c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d01a      	beq.n	800b96c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b93c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b93e:	e853 3f00 	ldrex	r3, [r3]
 800b942:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b94a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	461a      	mov	r2, r3
 800b954:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b958:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b95a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b95e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b960:	e841 2300 	strex	r3, r2, [r1]
 800b964:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1e4      	bne.n	800b936 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	3308      	adds	r3, #8
 800b972:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b976:	e853 3f00 	ldrex	r3, [r3]
 800b97a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b982:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	3308      	adds	r3, #8
 800b98a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b98c:	64ba      	str	r2, [r7, #72]	; 0x48
 800b98e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b990:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b992:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b994:	e841 2300 	strex	r3, r2, [r1]
 800b998:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b99a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1e5      	bne.n	800b96c <UART_Start_Receive_IT+0x160>
 800b9a0:	e046      	b.n	800ba30 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	689b      	ldr	r3, [r3, #8]
 800b9a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9aa:	d107      	bne.n	800b9bc <UART_Start_Receive_IT+0x1b0>
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d103      	bne.n	800b9bc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	4a24      	ldr	r2, [pc, #144]	; (800ba48 <UART_Start_Receive_IT+0x23c>)
 800b9b8:	675a      	str	r2, [r3, #116]	; 0x74
 800b9ba:	e002      	b.n	800b9c2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	4a23      	ldr	r2, [pc, #140]	; (800ba4c <UART_Start_Receive_IT+0x240>)
 800b9c0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	691b      	ldr	r3, [r3, #16]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d019      	beq.n	800b9fe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d2:	e853 3f00 	ldrex	r3, [r3]
 800b9d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b9de:	677b      	str	r3, [r7, #116]	; 0x74
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9e8:	637b      	str	r3, [r7, #52]	; 0x34
 800b9ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b9ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9f0:	e841 2300 	strex	r3, r2, [r1]
 800b9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d1e6      	bne.n	800b9ca <UART_Start_Receive_IT+0x1be>
 800b9fc:	e018      	b.n	800ba30 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	e853 3f00 	ldrex	r3, [r3]
 800ba0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	f043 0320 	orr.w	r3, r3, #32
 800ba12:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba1c:	623b      	str	r3, [r7, #32]
 800ba1e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba20:	69f9      	ldr	r1, [r7, #28]
 800ba22:	6a3a      	ldr	r2, [r7, #32]
 800ba24:	e841 2300 	strex	r3, r2, [r1]
 800ba28:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1e6      	bne.n	800b9fe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	378c      	adds	r7, #140	; 0x8c
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop
 800ba40:	0800c299 	.word	0x0800c299
 800ba44:	0800bf29 	.word	0x0800bf29
 800ba48:	0800bd65 	.word	0x0800bd65
 800ba4c:	0800bba1 	.word	0x0800bba1

0800ba50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b095      	sub	sp, #84	; 0x54
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba60:	e853 3f00 	ldrex	r3, [r3]
 800ba64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ba66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	461a      	mov	r2, r3
 800ba74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba76:	643b      	str	r3, [r7, #64]	; 0x40
 800ba78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba7e:	e841 2300 	strex	r3, r2, [r1]
 800ba82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1e6      	bne.n	800ba58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	3308      	adds	r3, #8
 800ba90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba92:	6a3b      	ldr	r3, [r7, #32]
 800ba94:	e853 3f00 	ldrex	r3, [r3]
 800ba98:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba9a:	69fb      	ldr	r3, [r7, #28]
 800ba9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800baa0:	f023 0301 	bic.w	r3, r3, #1
 800baa4:	64bb      	str	r3, [r7, #72]	; 0x48
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	3308      	adds	r3, #8
 800baac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800baae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bab0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bab6:	e841 2300 	strex	r3, r2, [r1]
 800baba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800babc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d1e3      	bne.n	800ba8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d118      	bne.n	800bafc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	e853 3f00 	ldrex	r3, [r3]
 800bad6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	f023 0310 	bic.w	r3, r3, #16
 800bade:	647b      	str	r3, [r7, #68]	; 0x44
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	461a      	mov	r2, r3
 800bae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bae8:	61bb      	str	r3, [r7, #24]
 800baea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baec:	6979      	ldr	r1, [r7, #20]
 800baee:	69ba      	ldr	r2, [r7, #24]
 800baf0:	e841 2300 	strex	r3, r2, [r1]
 800baf4:	613b      	str	r3, [r7, #16]
   return(result);
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1e6      	bne.n	800baca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2220      	movs	r2, #32
 800bb00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bb10:	bf00      	nop
 800bb12:	3754      	adds	r7, #84	; 0x54
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	f7ff faae 	bl	800b09c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb40:	bf00      	nop
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b088      	sub	sp, #32
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	e853 3f00 	ldrex	r3, [r3]
 800bb5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb64:	61fb      	str	r3, [r7, #28]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	61bb      	str	r3, [r7, #24]
 800bb70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb72:	6979      	ldr	r1, [r7, #20]
 800bb74:	69ba      	ldr	r2, [r7, #24]
 800bb76:	e841 2300 	strex	r3, r2, [r1]
 800bb7a:	613b      	str	r3, [r7, #16]
   return(result);
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d1e6      	bne.n	800bb50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2220      	movs	r2, #32
 800bb86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f7ff fa79 	bl	800b088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb96:	bf00      	nop
 800bb98:	3720      	adds	r7, #32
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
	...

0800bba0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b09c      	sub	sp, #112	; 0x70
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bbae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbb8:	2b22      	cmp	r3, #34	; 0x22
 800bbba:	f040 80c3 	bne.w	800bd44 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bbc8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bbcc:	b2d9      	uxtb	r1, r3
 800bbce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbd8:	400a      	ands	r2, r1
 800bbda:	b2d2      	uxtb	r2, r2
 800bbdc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbe2:	1c5a      	adds	r2, r3, #1
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f040 80a6 	bne.w	800bd54 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc10:	e853 3f00 	ldrex	r3, [r3]
 800bc14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bc16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc1c:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	461a      	mov	r2, r3
 800bc24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc26:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc28:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc2e:	e841 2300 	strex	r3, r2, [r1]
 800bc32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bc34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1e6      	bne.n	800bc08 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	3308      	adds	r3, #8
 800bc40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc44:	e853 3f00 	ldrex	r3, [r3]
 800bc48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4c:	f023 0301 	bic.w	r3, r3, #1
 800bc50:	667b      	str	r3, [r7, #100]	; 0x64
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	3308      	adds	r3, #8
 800bc58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc5a:	647a      	str	r2, [r7, #68]	; 0x44
 800bc5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc62:	e841 2300 	strex	r3, r2, [r1]
 800bc66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1e5      	bne.n	800bc3a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2220      	movs	r2, #32
 800bc72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4a35      	ldr	r2, [pc, #212]	; (800bd5c <UART_RxISR_8BIT+0x1bc>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d024      	beq.n	800bcd6 <UART_RxISR_8BIT+0x136>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a33      	ldr	r2, [pc, #204]	; (800bd60 <UART_RxISR_8BIT+0x1c0>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d01f      	beq.n	800bcd6 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d018      	beq.n	800bcd6 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcac:	e853 3f00 	ldrex	r3, [r3]
 800bcb0:	623b      	str	r3, [r7, #32]
   return(result);
 800bcb2:	6a3b      	ldr	r3, [r7, #32]
 800bcb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bcb8:	663b      	str	r3, [r7, #96]	; 0x60
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcc2:	633b      	str	r3, [r7, #48]	; 0x30
 800bcc4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcca:	e841 2300 	strex	r3, r2, [r1]
 800bcce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d1e6      	bne.n	800bca4 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d12e      	bne.n	800bd3c <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	e853 3f00 	ldrex	r3, [r3]
 800bcf0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f023 0310 	bic.w	r3, r3, #16
 800bcf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd02:	61fb      	str	r3, [r7, #28]
 800bd04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd06:	69b9      	ldr	r1, [r7, #24]
 800bd08:	69fa      	ldr	r2, [r7, #28]
 800bd0a:	e841 2300 	strex	r3, r2, [r1]
 800bd0e:	617b      	str	r3, [r7, #20]
   return(result);
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1e6      	bne.n	800bce4 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	69db      	ldr	r3, [r3, #28]
 800bd1c:	f003 0310 	and.w	r3, r3, #16
 800bd20:	2b10      	cmp	r3, #16
 800bd22:	d103      	bne.n	800bd2c <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2210      	movs	r2, #16
 800bd2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd32:	4619      	mov	r1, r3
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f7ff f9bb 	bl	800b0b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd3a:	e00b      	b.n	800bd54 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f7f6 fb9d 	bl	800247c <HAL_UART_RxCpltCallback>
}
 800bd42:	e007      	b.n	800bd54 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	699a      	ldr	r2, [r3, #24]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f042 0208 	orr.w	r2, r2, #8
 800bd52:	619a      	str	r2, [r3, #24]
}
 800bd54:	bf00      	nop
 800bd56:	3770      	adds	r7, #112	; 0x70
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	44002400 	.word	0x44002400
 800bd60:	54002400 	.word	0x54002400

0800bd64 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b09c      	sub	sp, #112	; 0x70
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd7c:	2b22      	cmp	r3, #34	; 0x22
 800bd7e:	f040 80c3 	bne.w	800bf08 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd90:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800bd92:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800bd96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bd9a:	4013      	ands	r3, r2
 800bd9c:	b29a      	uxth	r2, r3
 800bd9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bda0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bda6:	1c9a      	adds	r2, r3, #2
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f040 80a6 	bne.w	800bf18 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdd4:	e853 3f00 	ldrex	r3, [r3]
 800bdd8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bdda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bde0:	667b      	str	r3, [r7, #100]	; 0x64
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	461a      	mov	r2, r3
 800bde8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdea:	657b      	str	r3, [r7, #84]	; 0x54
 800bdec:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bdf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bdf2:	e841 2300 	strex	r3, r2, [r1]
 800bdf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bdf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d1e6      	bne.n	800bdcc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	3308      	adds	r3, #8
 800be04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be08:	e853 3f00 	ldrex	r3, [r3]
 800be0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800be0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be10:	f023 0301 	bic.w	r3, r3, #1
 800be14:	663b      	str	r3, [r7, #96]	; 0x60
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	3308      	adds	r3, #8
 800be1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be1e:	643a      	str	r2, [r7, #64]	; 0x40
 800be20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be26:	e841 2300 	strex	r3, r2, [r1]
 800be2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d1e5      	bne.n	800bdfe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2220      	movs	r2, #32
 800be36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2200      	movs	r2, #0
 800be3e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a35      	ldr	r2, [pc, #212]	; (800bf20 <UART_RxISR_16BIT+0x1bc>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d024      	beq.n	800be9a <UART_RxISR_16BIT+0x136>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a33      	ldr	r2, [pc, #204]	; (800bf24 <UART_RxISR_16BIT+0x1c0>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d01f      	beq.n	800be9a <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be64:	2b00      	cmp	r3, #0
 800be66:	d018      	beq.n	800be9a <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6e:	6a3b      	ldr	r3, [r7, #32]
 800be70:	e853 3f00 	ldrex	r3, [r3]
 800be74:	61fb      	str	r3, [r7, #28]
   return(result);
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800be7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	461a      	mov	r2, r3
 800be84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be88:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be8e:	e841 2300 	strex	r3, r2, [r1]
 800be92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1e6      	bne.n	800be68 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d12e      	bne.n	800bf00 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	e853 3f00 	ldrex	r3, [r3]
 800beb4:	60bb      	str	r3, [r7, #8]
   return(result);
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	f023 0310 	bic.w	r3, r3, #16
 800bebc:	65bb      	str	r3, [r7, #88]	; 0x58
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	461a      	mov	r2, r3
 800bec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bec6:	61bb      	str	r3, [r7, #24]
 800bec8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beca:	6979      	ldr	r1, [r7, #20]
 800becc:	69ba      	ldr	r2, [r7, #24]
 800bece:	e841 2300 	strex	r3, r2, [r1]
 800bed2:	613b      	str	r3, [r7, #16]
   return(result);
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1e6      	bne.n	800bea8 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	69db      	ldr	r3, [r3, #28]
 800bee0:	f003 0310 	and.w	r3, r3, #16
 800bee4:	2b10      	cmp	r3, #16
 800bee6:	d103      	bne.n	800bef0 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2210      	movs	r2, #16
 800beee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bef6:	4619      	mov	r1, r3
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f7ff f8d9 	bl	800b0b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800befe:	e00b      	b.n	800bf18 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f7f6 fabb 	bl	800247c <HAL_UART_RxCpltCallback>
}
 800bf06:	e007      	b.n	800bf18 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	699a      	ldr	r2, [r3, #24]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f042 0208 	orr.w	r2, r2, #8
 800bf16:	619a      	str	r2, [r3, #24]
}
 800bf18:	bf00      	nop
 800bf1a:	3770      	adds	r7, #112	; 0x70
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	44002400 	.word	0x44002400
 800bf24:	54002400 	.word	0x54002400

0800bf28 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b0ac      	sub	sp, #176	; 0xb0
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf36:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	69db      	ldr	r3, [r3, #28]
 800bf40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf5e:	2b22      	cmp	r3, #34	; 0x22
 800bf60:	f040 8187 	bne.w	800c272 <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bf6a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bf6e:	e12a      	b.n	800c1c6 <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf76:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bf7a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800bf7e:	b2d9      	uxtb	r1, r3
 800bf80:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800bf84:	b2da      	uxtb	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf8a:	400a      	ands	r2, r1
 800bf8c:	b2d2      	uxtb	r2, r2
 800bf8e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf94:	1c5a      	adds	r2, r3, #1
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	69db      	ldr	r3, [r3, #28]
 800bfb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bfb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bfba:	f003 0307 	and.w	r3, r3, #7
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d053      	beq.n	800c06a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bfc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bfc6:	f003 0301 	and.w	r3, r3, #1
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d011      	beq.n	800bff2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800bfce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bfd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00b      	beq.n	800bff2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfe8:	f043 0201 	orr.w	r2, r3, #1
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bff6:	f003 0302 	and.w	r3, r3, #2
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d011      	beq.n	800c022 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800bffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00b      	beq.n	800c022 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2202      	movs	r2, #2
 800c010:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c018:	f043 0204 	orr.w	r2, r3, #4
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c026:	f003 0304 	and.w	r3, r3, #4
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d011      	beq.n	800c052 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c02e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c032:	f003 0301 	and.w	r3, r3, #1
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00b      	beq.n	800c052 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	2204      	movs	r2, #4
 800c040:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c048:	f043 0202 	orr.w	r2, r3, #2
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d006      	beq.n	800c06a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f7ff f81d 	bl	800b09c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c070:	b29b      	uxth	r3, r3
 800c072:	2b00      	cmp	r3, #0
 800c074:	f040 80a7 	bne.w	800c1c6 <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c07e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c080:	e853 3f00 	ldrex	r3, [r3]
 800c084:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c08c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	461a      	mov	r2, r3
 800c096:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c09a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c09c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c09e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c0a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c0a2:	e841 2300 	strex	r3, r2, [r1]
 800c0a6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c0a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d1e4      	bne.n	800c078 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	3308      	adds	r3, #8
 800c0b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0b8:	e853 3f00 	ldrex	r3, [r3]
 800c0bc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c0be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0c4:	f023 0301 	bic.w	r3, r3, #1
 800c0c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	3308      	adds	r3, #8
 800c0d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c0d6:	66ba      	str	r2, [r7, #104]	; 0x68
 800c0d8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0da:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c0dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c0de:	e841 2300 	strex	r3, r2, [r1]
 800c0e2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c0e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d1e1      	bne.n	800c0ae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2220      	movs	r2, #32
 800c0ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a62      	ldr	r2, [pc, #392]	; (800c28c <UART_RxISR_8BIT_FIFOEN+0x364>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d026      	beq.n	800c156 <UART_RxISR_8BIT_FIFOEN+0x22e>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a60      	ldr	r2, [pc, #384]	; (800c290 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d021      	beq.n	800c156 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d01a      	beq.n	800c156 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c128:	e853 3f00 	ldrex	r3, [r3]
 800c12c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c12e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c130:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c134:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	461a      	mov	r2, r3
 800c13e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c142:	657b      	str	r3, [r7, #84]	; 0x54
 800c144:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c146:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c148:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c14a:	e841 2300 	strex	r3, r2, [r1]
 800c14e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1e4      	bne.n	800c120 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d130      	bne.n	800c1c0 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c16c:	e853 3f00 	ldrex	r3, [r3]
 800c170:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c174:	f023 0310 	bic.w	r3, r3, #16
 800c178:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	461a      	mov	r2, r3
 800c182:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c186:	643b      	str	r3, [r7, #64]	; 0x40
 800c188:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c18c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c18e:	e841 2300 	strex	r3, r2, [r1]
 800c192:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1e4      	bne.n	800c164 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	69db      	ldr	r3, [r3, #28]
 800c1a0:	f003 0310 	and.w	r3, r3, #16
 800c1a4:	2b10      	cmp	r3, #16
 800c1a6:	d103      	bne.n	800c1b0 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2210      	movs	r2, #16
 800c1ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f7fe ff79 	bl	800b0b0 <HAL_UARTEx_RxEventCallback>
 800c1be:	e002      	b.n	800c1c6 <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f7f6 f95b 	bl	800247c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c1c6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d006      	beq.n	800c1dc <UART_RxISR_8BIT_FIFOEN+0x2b4>
 800c1ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1d2:	f003 0320 	and.w	r3, r3, #32
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	f47f aeca 	bne.w	800bf70 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c1e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d049      	beq.n	800c282 <UART_RxISR_8BIT_FIFOEN+0x35a>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c1f4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d242      	bcs.n	800c282 <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	3308      	adds	r3, #8
 800c202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c204:	6a3b      	ldr	r3, [r7, #32]
 800c206:	e853 3f00 	ldrex	r3, [r3]
 800c20a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c212:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	3308      	adds	r3, #8
 800c21c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c220:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c222:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c228:	e841 2300 	strex	r3, r2, [r1]
 800c22c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1e3      	bne.n	800c1fc <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a17      	ldr	r2, [pc, #92]	; (800c294 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800c238:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	e853 3f00 	ldrex	r3, [r3]
 800c246:	60bb      	str	r3, [r7, #8]
   return(result);
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	f043 0320 	orr.w	r3, r3, #32
 800c24e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	461a      	mov	r2, r3
 800c258:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c25c:	61bb      	str	r3, [r7, #24]
 800c25e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c260:	6979      	ldr	r1, [r7, #20]
 800c262:	69ba      	ldr	r2, [r7, #24]
 800c264:	e841 2300 	strex	r3, r2, [r1]
 800c268:	613b      	str	r3, [r7, #16]
   return(result);
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d1e4      	bne.n	800c23a <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c270:	e007      	b.n	800c282 <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	699a      	ldr	r2, [r3, #24]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f042 0208 	orr.w	r2, r2, #8
 800c280:	619a      	str	r2, [r3, #24]
}
 800c282:	bf00      	nop
 800c284:	37b0      	adds	r7, #176	; 0xb0
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	44002400 	.word	0x44002400
 800c290:	54002400 	.word	0x54002400
 800c294:	0800bba1 	.word	0x0800bba1

0800c298 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b0ae      	sub	sp, #184	; 0xb8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	69db      	ldr	r3, [r3, #28]
 800c2b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	689b      	ldr	r3, [r3, #8]
 800c2c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2ce:	2b22      	cmp	r3, #34	; 0x22
 800c2d0:	f040 818b 	bne.w	800c5ea <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c2da:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c2de:	e12e      	b.n	800c53e <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c2f2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c2f6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c302:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c308:	1c9a      	adds	r2, r3, #2
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c314:	b29b      	uxth	r3, r3
 800c316:	3b01      	subs	r3, #1
 800c318:	b29a      	uxth	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	69db      	ldr	r3, [r3, #28]
 800c326:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c32a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c32e:	f003 0307 	and.w	r3, r3, #7
 800c332:	2b00      	cmp	r3, #0
 800c334:	d053      	beq.n	800c3de <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c336:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c33a:	f003 0301 	and.w	r3, r3, #1
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d011      	beq.n	800c366 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00b      	beq.n	800c366 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2201      	movs	r2, #1
 800c354:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c35c:	f043 0201 	orr.w	r2, r3, #1
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c366:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c36a:	f003 0302 	and.w	r3, r3, #2
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d011      	beq.n	800c396 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c372:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c376:	f003 0301 	and.w	r3, r3, #1
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00b      	beq.n	800c396 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2202      	movs	r2, #2
 800c384:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c38c:	f043 0204 	orr.w	r2, r3, #4
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c396:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c39a:	f003 0304 	and.w	r3, r3, #4
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d011      	beq.n	800c3c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c3a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00b      	beq.n	800c3c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2204      	movs	r2, #4
 800c3b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3bc:	f043 0202 	orr.w	r2, r3, #2
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d006      	beq.n	800c3de <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f7fe fe63 	bl	800b09c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3e4:	b29b      	uxth	r3, r3
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	f040 80a9 	bne.w	800c53e <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3f4:	e853 3f00 	ldrex	r3, [r3]
 800c3f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c3fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	461a      	mov	r2, r3
 800c40a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c40e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c412:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c414:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c416:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c41a:	e841 2300 	strex	r3, r2, [r1]
 800c41e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1e2      	bne.n	800c3ec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3308      	adds	r3, #8
 800c42c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c430:	e853 3f00 	ldrex	r3, [r3]
 800c434:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c43c:	f023 0301 	bic.w	r3, r3, #1
 800c440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	3308      	adds	r3, #8
 800c44a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c44e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c450:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c452:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c454:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c456:	e841 2300 	strex	r3, r2, [r1]
 800c45a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c45c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d1e1      	bne.n	800c426 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2220      	movs	r2, #32
 800c466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a62      	ldr	r2, [pc, #392]	; (800c604 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d026      	beq.n	800c4ce <UART_RxISR_16BIT_FIFOEN+0x236>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a60      	ldr	r2, [pc, #384]	; (800c608 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d021      	beq.n	800c4ce <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d01a      	beq.n	800c4ce <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4a0:	e853 3f00 	ldrex	r3, [r3]
 800c4a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c4a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c4ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c4ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800c4bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c4c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c4c2:	e841 2300 	strex	r3, r2, [r1]
 800c4c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c4c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d1e4      	bne.n	800c498 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d130      	bne.n	800c538 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e4:	e853 3f00 	ldrex	r3, [r3]
 800c4e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ec:	f023 0310 	bic.w	r3, r3, #16
 800c4f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c4fe:	647b      	str	r3, [r7, #68]	; 0x44
 800c500:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c502:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c504:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c506:	e841 2300 	strex	r3, r2, [r1]
 800c50a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1e4      	bne.n	800c4dc <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	69db      	ldr	r3, [r3, #28]
 800c518:	f003 0310 	and.w	r3, r3, #16
 800c51c:	2b10      	cmp	r3, #16
 800c51e:	d103      	bne.n	800c528 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2210      	movs	r2, #16
 800c526:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c52e:	4619      	mov	r1, r3
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f7fe fdbd 	bl	800b0b0 <HAL_UARTEx_RxEventCallback>
 800c536:	e002      	b.n	800c53e <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f7f5 ff9f 	bl	800247c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c53e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800c542:	2b00      	cmp	r3, #0
 800c544:	d006      	beq.n	800c554 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800c546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c54a:	f003 0320 	and.w	r3, r3, #32
 800c54e:	2b00      	cmp	r3, #0
 800c550:	f47f aec6 	bne.w	800c2e0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c55a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c55e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c562:	2b00      	cmp	r3, #0
 800c564:	d049      	beq.n	800c5fa <UART_RxISR_16BIT_FIFOEN+0x362>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c56c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800c570:	429a      	cmp	r2, r3
 800c572:	d242      	bcs.n	800c5fa <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	3308      	adds	r3, #8
 800c57a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57e:	e853 3f00 	ldrex	r3, [r3]
 800c582:	623b      	str	r3, [r7, #32]
   return(result);
 800c584:	6a3b      	ldr	r3, [r7, #32]
 800c586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c58a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	3308      	adds	r3, #8
 800c594:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c598:	633a      	str	r2, [r7, #48]	; 0x30
 800c59a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c59e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5a0:	e841 2300 	strex	r3, r2, [r1]
 800c5a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d1e3      	bne.n	800c574 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4a17      	ldr	r2, [pc, #92]	; (800c60c <UART_RxISR_16BIT_FIFOEN+0x374>)
 800c5b0:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	e853 3f00 	ldrex	r3, [r3]
 800c5be:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f043 0320 	orr.w	r3, r3, #32
 800c5c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c5d4:	61fb      	str	r3, [r7, #28]
 800c5d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d8:	69b9      	ldr	r1, [r7, #24]
 800c5da:	69fa      	ldr	r2, [r7, #28]
 800c5dc:	e841 2300 	strex	r3, r2, [r1]
 800c5e0:	617b      	str	r3, [r7, #20]
   return(result);
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1e4      	bne.n	800c5b2 <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c5e8:	e007      	b.n	800c5fa <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	699a      	ldr	r2, [r3, #24]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f042 0208 	orr.w	r2, r2, #8
 800c5f8:	619a      	str	r2, [r3, #24]
}
 800c5fa:	bf00      	nop
 800c5fc:	37b8      	adds	r7, #184	; 0xb8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	44002400 	.word	0x44002400
 800c608:	54002400 	.word	0x54002400
 800c60c:	0800bd65 	.word	0x0800bd65

0800c610 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c618:	bf00      	nop
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c62c:	bf00      	nop
 800c62e:	370c      	adds	r7, #12
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr

0800c64c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b085      	sub	sp, #20
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d101      	bne.n	800c662 <HAL_UARTEx_DisableFifoMode+0x16>
 800c65e:	2302      	movs	r3, #2
 800c660:	e027      	b.n	800c6b2 <HAL_UARTEx_DisableFifoMode+0x66>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2201      	movs	r2, #1
 800c666:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2224      	movs	r2, #36	; 0x24
 800c66e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f022 0201 	bic.w	r2, r2, #1
 800c688:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c690:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2220      	movs	r2, #32
 800c6a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3714      	adds	r7, #20
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6be:	b580      	push	{r7, lr}
 800c6c0:	b084      	sub	sp, #16
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
 800c6c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d101      	bne.n	800c6d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c6d2:	2302      	movs	r3, #2
 800c6d4:	e02d      	b.n	800c732 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2224      	movs	r2, #36	; 0x24
 800c6e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f022 0201 	bic.w	r2, r2, #1
 800c6fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	683a      	ldr	r2, [r7, #0]
 800c70e:	430a      	orrs	r2, r1
 800c710:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 f850 	bl	800c7b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2220      	movs	r2, #32
 800c724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c730:	2300      	movs	r3, #0
}
 800c732:	4618      	mov	r0, r3
 800c734:	3710      	adds	r7, #16
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b084      	sub	sp, #16
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
 800c742:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d101      	bne.n	800c752 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c74e:	2302      	movs	r3, #2
 800c750:	e02d      	b.n	800c7ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2201      	movs	r2, #1
 800c756:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2224      	movs	r2, #36	; 0x24
 800c75e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f022 0201 	bic.w	r2, r2, #1
 800c778:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	683a      	ldr	r2, [r7, #0]
 800c78a:	430a      	orrs	r2, r1
 800c78c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f812 	bl	800c7b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2220      	movs	r2, #32
 800c7a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
	...

0800c7b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d108      	bne.n	800c7da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c7d8:	e031      	b.n	800c83e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c7da:	2308      	movs	r3, #8
 800c7dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c7de:	2308      	movs	r3, #8
 800c7e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	0e5b      	lsrs	r3, r3, #25
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	f003 0307 	and.w	r3, r3, #7
 800c7f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	0f5b      	lsrs	r3, r3, #29
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	f003 0307 	and.w	r3, r3, #7
 800c800:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c802:	7bbb      	ldrb	r3, [r7, #14]
 800c804:	7b3a      	ldrb	r2, [r7, #12]
 800c806:	4911      	ldr	r1, [pc, #68]	; (800c84c <UARTEx_SetNbDataToProcess+0x94>)
 800c808:	5c8a      	ldrb	r2, [r1, r2]
 800c80a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c80e:	7b3a      	ldrb	r2, [r7, #12]
 800c810:	490f      	ldr	r1, [pc, #60]	; (800c850 <UARTEx_SetNbDataToProcess+0x98>)
 800c812:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c814:	fb93 f3f2 	sdiv	r3, r3, r2
 800c818:	b29a      	uxth	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c820:	7bfb      	ldrb	r3, [r7, #15]
 800c822:	7b7a      	ldrb	r2, [r7, #13]
 800c824:	4909      	ldr	r1, [pc, #36]	; (800c84c <UARTEx_SetNbDataToProcess+0x94>)
 800c826:	5c8a      	ldrb	r2, [r1, r2]
 800c828:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c82c:	7b7a      	ldrb	r2, [r7, #13]
 800c82e:	4908      	ldr	r1, [pc, #32]	; (800c850 <UARTEx_SetNbDataToProcess+0x98>)
 800c830:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c832:	fb93 f3f2 	sdiv	r3, r3, r2
 800c836:	b29a      	uxth	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c83e:	bf00      	nop
 800c840:	3714      	adds	r7, #20
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	0800edc0 	.word	0x0800edc0
 800c850:	0800edc8 	.word	0x0800edc8

0800c854 <qbufferCreateBySize>:

  return ret;
}

BOOL qbufferCreateBySize(qbuffer_t *p_node, uint8_t *p_buf, uint32_t size, uint32_t length)
{
 800c854:	b480      	push	{r7}
 800c856:	b087      	sub	sp, #28
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	607a      	str	r2, [r7, #4]
 800c860:	603b      	str	r3, [r7, #0]
  BOOL ret = TRUE;
 800c862:	2301      	movs	r3, #1
 800c864:	617b      	str	r3, [r7, #20]

  p_node->in    = 0;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2200      	movs	r2, #0
 800c86a:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2200      	movs	r2, #0
 800c870:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	683a      	ldr	r2, [r7, #0]
 800c876:	609a      	str	r2, [r3, #8]
  p_node->size  = size;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	68ba      	ldr	r2, [r7, #8]
 800c882:	611a      	str	r2, [r3, #16]

  return ret;
 800c884:	697b      	ldr	r3, [r7, #20]
}
 800c886:	4618      	mov	r0, r3
 800c888:	371c      	adds	r7, #28
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr

0800c892 <qbufferWrite>:

BOOL qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800c892:	b480      	push	{r7}
 800c894:	b08b      	sub	sp, #44	; 0x2c
 800c896:	af00      	add	r7, sp, #0
 800c898:	60f8      	str	r0, [r7, #12]
 800c89a:	60b9      	str	r1, [r7, #8]
 800c89c:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t next_in;


  for (int i=0; i<length; i++)
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	623b      	str	r3, [r7, #32]
 800c8a6:	e042      	b.n	800c92e <qbufferWrite+0x9c>
  {
    next_in = (p_node->in + 1) % p_node->len;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	6892      	ldr	r2, [r2, #8]
 800c8b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c8b6:	fb01 f202 	mul.w	r2, r1, r2
 800c8ba:	1a9b      	subs	r3, r3, r2
 800c8bc:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	685b      	ldr	r3, [r3, #4]
 800c8c2:	69ba      	ldr	r2, [r7, #24]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d02c      	beq.n	800c922 <qbufferWrite+0x90>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	691b      	ldr	r3, [r3, #16]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d024      	beq.n	800c91a <qbufferWrite+0x88>
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d021      	beq.n	800c91a <qbufferWrite+0x88>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	691a      	ldr	r2, [r3, #16]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	68f9      	ldr	r1, [r7, #12]
 800c8e0:	68c9      	ldr	r1, [r1, #12]
 800c8e2:	fb01 f303 	mul.w	r3, r1, r3
 800c8e6:	4413      	add	r3, r2
 800c8e8:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	61fb      	str	r3, [r7, #28]
 800c8ee:	e00a      	b.n	800c906 <qbufferWrite+0x74>
        {
          p_buf[i] = p_data[i];
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	441a      	add	r2, r3
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	6979      	ldr	r1, [r7, #20]
 800c8fa:	440b      	add	r3, r1
 800c8fc:	7812      	ldrb	r2, [r2, #0]
 800c8fe:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	3301      	adds	r3, #1
 800c904:	61fb      	str	r3, [r7, #28]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	68da      	ldr	r2, [r3, #12]
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d8ef      	bhi.n	800c8f0 <qbufferWrite+0x5e>
        }
        p_data += p_node->size;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	4413      	add	r3, r2
 800c918:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	69ba      	ldr	r2, [r7, #24]
 800c91e:	601a      	str	r2, [r3, #0]
 800c920:	e002      	b.n	800c928 <qbufferWrite+0x96>
    }
    else
    {
      ret = FALSE;
 800c922:	2300      	movs	r3, #0
 800c924:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800c926:	e006      	b.n	800c936 <qbufferWrite+0xa4>
  for (int i=0; i<length; i++)
 800c928:	6a3b      	ldr	r3, [r7, #32]
 800c92a:	3301      	adds	r3, #1
 800c92c:	623b      	str	r3, [r7, #32]
 800c92e:	6a3b      	ldr	r3, [r7, #32]
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	429a      	cmp	r2, r3
 800c934:	d8b8      	bhi.n	800c8a8 <qbufferWrite+0x16>
    }
  }

  return ret;
 800c936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c938:	4618      	mov	r0, r3
 800c93a:	372c      	adds	r7, #44	; 0x2c
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr

0800c944 <qbufferRead>:

BOOL qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800c944:	b480      	push	{r7}
 800c946:	b089      	sub	sp, #36	; 0x24
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	607a      	str	r2, [r7, #4]
  BOOL ret = TRUE;
 800c950:	2301      	movs	r3, #1
 800c952:	61fb      	str	r3, [r7, #28]


  for (int i=0; i<length; i++)
 800c954:	2300      	movs	r3, #0
 800c956:	61bb      	str	r3, [r7, #24]
 800c958:	e041      	b.n	800c9de <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	691b      	ldr	r3, [r3, #16]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d024      	beq.n	800c9ac <qbufferRead+0x68>
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d021      	beq.n	800c9ac <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	691a      	ldr	r2, [r3, #16]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	68f9      	ldr	r1, [r7, #12]
 800c972:	68c9      	ldr	r1, [r1, #12]
 800c974:	fb01 f303 	mul.w	r3, r1, r3
 800c978:	4413      	add	r3, r2
 800c97a:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 800c97c:	2300      	movs	r3, #0
 800c97e:	617b      	str	r3, [r7, #20]
 800c980:	e00a      	b.n	800c998 <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	693a      	ldr	r2, [r7, #16]
 800c986:	441a      	add	r2, r3
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	68b9      	ldr	r1, [r7, #8]
 800c98c:	440b      	add	r3, r1
 800c98e:	7812      	ldrb	r2, [r2, #0]
 800c990:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	3301      	adds	r3, #1
 800c996:	617b      	str	r3, [r7, #20]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	68da      	ldr	r2, [r3, #12]
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d8ef      	bhi.n	800c982 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	685a      	ldr	r2, [r3, #4]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d00c      	beq.n	800c9d2 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	3301      	adds	r3, #1
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	6892      	ldr	r2, [r2, #8]
 800c9c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9c6:	fb01 f202 	mul.w	r2, r1, r2
 800c9ca:	1a9a      	subs	r2, r3, r2
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	605a      	str	r2, [r3, #4]
 800c9d0:	e002      	b.n	800c9d8 <qbufferRead+0x94>
    }
    else
    {
      ret = FALSE;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	61fb      	str	r3, [r7, #28]
      break;
 800c9d6:	e006      	b.n	800c9e6 <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	61bb      	str	r3, [r7, #24]
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d8b9      	bhi.n	800c95a <qbufferRead+0x16>
    }
  }

  return ret;
 800c9e6:	69fb      	ldr	r3, [r7, #28]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3724      	adds	r7, #36	; 0x24
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <qbufferPeekWrite>:

uint8_t *qbufferPeekWrite(qbuffer_t *p_node)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  return &p_node->p_buf[p_node->in*p_node->size];
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	691a      	ldr	r2, [r3, #16]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	6879      	ldr	r1, [r7, #4]
 800ca06:	68c9      	ldr	r1, [r1, #12]
 800ca08:	fb01 f303 	mul.w	r3, r1, r3
 800ca0c:	4413      	add	r3, r2
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr

0800ca1a <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800ca1a:	b480      	push	{r7}
 800ca1c:	b085      	sub	sp, #20
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	1ad3      	subs	r3, r2, r3
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	6892      	ldr	r2, [r2, #8]
 800ca30:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca34:	fb01 f202 	mul.w	r2, r1, r2
 800ca38:	1a9b      	subs	r3, r3, r2
 800ca3a:	60fb      	str	r3, [r7, #12]

  return ret;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3714      	adds	r7, #20
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr
	...

0800ca4c <svCLI_Init>:
// extern variables

// Functions
// svCLI_Init must be called before using CLI
void svCLI_Init(SVCLI_GET_CHAR_FUNC funcGetChar, SVCLI_PUT_CHAR_FUNC funcPutChar, SVCLI_COMMIT_FUNC funcCommit)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
	svGetChar = funcGetChar;
 800ca58:	4a18      	ldr	r2, [pc, #96]	; (800cabc <svCLI_Init+0x70>)
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6013      	str	r3, [r2, #0]
	svPutChar = funcPutChar;
 800ca5e:	4a18      	ldr	r2, [pc, #96]	; (800cac0 <svCLI_Init+0x74>)
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	6013      	str	r3, [r2, #0]
	svCommit = funcCommit;
 800ca64:	4a17      	ldr	r2, [pc, #92]	; (800cac4 <svCLI_Init+0x78>)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6013      	str	r3, [r2, #0]
	szCLIString[0] = 0;
 800ca6a:	4b17      	ldr	r3, [pc, #92]	; (800cac8 <svCLI_Init+0x7c>)
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	701a      	strb	r2, [r3, #0]
#pragma section=".Table4CLI"
  sCLITableBegin = (SVCLI_t*)__section_begin(".Table4CLI");
  sCLITablEnd = (SVCLI_t*)__section_end(".Table4CLI");

#elif defined ( __GNUC__ )
  sCLITableBegin = (SVCLI_t*)Table4CLI_start;
 800ca70:	4b16      	ldr	r3, [pc, #88]	; (800cacc <svCLI_Init+0x80>)
 800ca72:	4a17      	ldr	r2, [pc, #92]	; (800cad0 <svCLI_Init+0x84>)
 800ca74:	601a      	str	r2, [r3, #0]
  sCLITablEnd = (SVCLI_t*)Table4CLI_end;
 800ca76:	4b17      	ldr	r3, [pc, #92]	; (800cad4 <svCLI_Init+0x88>)
 800ca78:	4a17      	ldr	r2, [pc, #92]	; (800cad8 <svCLI_Init+0x8c>)
 800ca7a:	601a      	str	r2, [r3, #0]
#endif

  if (s_bPwdOK) {
 800ca7c:	4b17      	ldr	r3, [pc, #92]	; (800cadc <svCLI_Init+0x90>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d00d      	beq.n	800caa0 <svCLI_Init+0x54>
    strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800ca84:	4b16      	ldr	r3, [pc, #88]	; (800cae0 <svCLI_Init+0x94>)
 800ca86:	4a17      	ldr	r2, [pc, #92]	; (800cae4 <svCLI_Init+0x98>)
 800ca88:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ca8c:	6018      	str	r0, [r3, #0]
 800ca8e:	3304      	adds	r3, #4
 800ca90:	8019      	strh	r1, [r3, #0]
 800ca92:	3302      	adds	r3, #2
 800ca94:	0c0a      	lsrs	r2, r1, #16
 800ca96:	701a      	strb	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800ca98:	4b13      	ldr	r3, [pc, #76]	; (800cae8 <svCLI_Init+0x9c>)
 800ca9a:	2206      	movs	r2, #6
 800ca9c:	601a      	str	r2, [r3, #0]
  }
  else {
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
  }
}
 800ca9e:	e007      	b.n	800cab0 <svCLI_Init+0x64>
    strcpy(szCLI_PROMPT, CLI_PROMPT_PWD);
 800caa0:	4b0f      	ldr	r3, [pc, #60]	; (800cae0 <svCLI_Init+0x94>)
 800caa2:	4a12      	ldr	r2, [pc, #72]	; (800caec <svCLI_Init+0xa0>)
 800caa4:	ca07      	ldmia	r2, {r0, r1, r2}
 800caa6:	c303      	stmia	r3!, {r0, r1}
 800caa8:	801a      	strh	r2, [r3, #0]
    snCLI_PROMPT_LENGTH = CLI_PROMPT_PWD_LENGTH;
 800caaa:	4b0f      	ldr	r3, [pc, #60]	; (800cae8 <svCLI_Init+0x9c>)
 800caac:	2209      	movs	r2, #9
 800caae:	601a      	str	r2, [r3, #0]
}
 800cab0:	bf00      	nop
 800cab2:	3714      	adds	r7, #20
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr
 800cabc:	20000e28 	.word	0x20000e28
 800cac0:	20000e2c 	.word	0x20000e2c
 800cac4:	20000e30 	.word	0x20000e30
 800cac8:	20000c14 	.word	0x20000c14
 800cacc:	20000e20 	.word	0x20000e20
 800cad0:	0800e8bc 	.word	0x0800e8bc
 800cad4:	20000e24 	.word	0x20000e24
 800cad8:	0800e8ec 	.word	0x0800e8ec
 800cadc:	20000050 	.word	0x20000050
 800cae0:	20000054 	.word	0x20000054
 800cae4:	0800eb44 	.word	0x0800eb44
 800cae8:	20000060 	.word	0x20000060
 800caec:	0800eb4c 	.word	0x0800eb4c

0800caf0 <svCLI_Printf>:

static int svCLI_Printf(char* fmt,...)
{
 800caf0:	b40f      	push	{r0, r1, r2, r3}
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b084      	sub	sp, #16
 800caf6:	af00      	add	r7, sp, #0
static char msg[256];
	va_list ap;
	int len;

	va_start(ap, fmt);
 800caf8:	f107 031c 	add.w	r3, r7, #28
 800cafc:	607b      	str	r3, [r7, #4]
	len = vsprintf(msg, fmt, ap);
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	69b9      	ldr	r1, [r7, #24]
 800cb02:	480f      	ldr	r0, [pc, #60]	; (800cb40 <svCLI_Printf+0x50>)
 800cb04:	f001 fac8 	bl	800e098 <vsiprintf>
 800cb08:	60b8      	str	r0, [r7, #8]
	va_end(ap);
	for (int i=0;i<len;i++) {
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	60fb      	str	r3, [r7, #12]
 800cb0e:	e00a      	b.n	800cb26 <svCLI_Printf+0x36>
		svPutChar(msg[i]);
 800cb10:	4b0c      	ldr	r3, [pc, #48]	; (800cb44 <svCLI_Printf+0x54>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	490a      	ldr	r1, [pc, #40]	; (800cb40 <svCLI_Printf+0x50>)
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	440a      	add	r2, r1
 800cb1a:	7812      	ldrb	r2, [r2, #0]
 800cb1c:	4610      	mov	r0, r2
 800cb1e:	4798      	blx	r3
	for (int i=0;i<len;i++) {
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	3301      	adds	r3, #1
 800cb24:	60fb      	str	r3, [r7, #12]
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	dbf0      	blt.n	800cb10 <svCLI_Printf+0x20>
	}
	return len;
 800cb2e:	68bb      	ldr	r3, [r7, #8]
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb3a:	b004      	add	sp, #16
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	20000e40 	.word	0x20000e40
 800cb44:	20000e2c 	.word	0x20000e2c

0800cb48 <svCLI_ShowHelp>:

void svCLI_ShowHelp(void)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
	if (svPutChar) {
 800cb4e:	4b2d      	ldr	r3, [pc, #180]	; (800cc04 <svCLI_ShowHelp+0xbc>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d04a      	beq.n	800cbec <svCLI_ShowHelp+0xa4>
		if (sCLITableBegin != sCLITablEnd) {
 800cb56:	4b2c      	ldr	r3, [pc, #176]	; (800cc08 <svCLI_ShowHelp+0xc0>)
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	4b2c      	ldr	r3, [pc, #176]	; (800cc0c <svCLI_ShowHelp+0xc4>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d03e      	beq.n	800cbe0 <svCLI_ShowHelp+0x98>
			for (unsigned int s=0;s<80;s++) svPutChar('=');
 800cb62:	2300      	movs	r3, #0
 800cb64:	60fb      	str	r3, [r7, #12]
 800cb66:	e006      	b.n	800cb76 <svCLI_ShowHelp+0x2e>
 800cb68:	4b26      	ldr	r3, [pc, #152]	; (800cc04 <svCLI_ShowHelp+0xbc>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	203d      	movs	r0, #61	; 0x3d
 800cb6e:	4798      	blx	r3
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	3301      	adds	r3, #1
 800cb74:	60fb      	str	r3, [r7, #12]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2b4f      	cmp	r3, #79	; 0x4f
 800cb7a:	d9f5      	bls.n	800cb68 <svCLI_ShowHelp+0x20>
			svCLI_Printf("\r\n");
 800cb7c:	4824      	ldr	r0, [pc, #144]	; (800cc10 <svCLI_ShowHelp+0xc8>)
 800cb7e:	f7ff ffb7 	bl	800caf0 <svCLI_Printf>
			SVCLI_t* pCLIEntry;
			int nCount = 1;
 800cb82:	2301      	movs	r3, #1
 800cb84:	607b      	str	r3, [r7, #4]
			for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800cb86:	4b20      	ldr	r3, [pc, #128]	; (800cc08 <svCLI_ShowHelp+0xc0>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	60bb      	str	r3, [r7, #8]
 800cb8c:	e012      	b.n	800cbb4 <svCLI_ShowHelp+0x6c>
				svCLI_Printf(AES_RESET"%d."AES_BRIGHT_GREEN_FG" %s :"AES_BRIGHT_WHITE_FG" %s\r\n",nCount++, pCLIEntry->szCmd, pCLIEntry->szHelp ? pCLIEntry->szHelp : ":");
 800cb8e:	6879      	ldr	r1, [r7, #4]
 800cb90:	1c4b      	adds	r3, r1, #1
 800cb92:	607b      	str	r3, [r7, #4]
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d002      	beq.n	800cba6 <svCLI_ShowHelp+0x5e>
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	e000      	b.n	800cba8 <svCLI_ShowHelp+0x60>
 800cba6:	4b1b      	ldr	r3, [pc, #108]	; (800cc14 <svCLI_ShowHelp+0xcc>)
 800cba8:	481b      	ldr	r0, [pc, #108]	; (800cc18 <svCLI_ShowHelp+0xd0>)
 800cbaa:	f7ff ffa1 	bl	800caf0 <svCLI_Printf>
			for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	330c      	adds	r3, #12
 800cbb2:	60bb      	str	r3, [r7, #8]
 800cbb4:	4b15      	ldr	r3, [pc, #84]	; (800cc0c <svCLI_ShowHelp+0xc4>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	68ba      	ldr	r2, [r7, #8]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d3e7      	bcc.n	800cb8e <svCLI_ShowHelp+0x46>
			}
			svCLI_Printf(AES_RESET);
 800cbbe:	4817      	ldr	r0, [pc, #92]	; (800cc1c <svCLI_ShowHelp+0xd4>)
 800cbc0:	f7ff ff96 	bl	800caf0 <svCLI_Printf>
			for (unsigned int s=0;s<80;s++) svPutChar('=');
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	603b      	str	r3, [r7, #0]
 800cbc8:	e006      	b.n	800cbd8 <svCLI_ShowHelp+0x90>
 800cbca:	4b0e      	ldr	r3, [pc, #56]	; (800cc04 <svCLI_ShowHelp+0xbc>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	203d      	movs	r0, #61	; 0x3d
 800cbd0:	4798      	blx	r3
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	603b      	str	r3, [r7, #0]
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	2b4f      	cmp	r3, #79	; 0x4f
 800cbdc:	d9f5      	bls.n	800cbca <svCLI_ShowHelp+0x82>
 800cbde:	e002      	b.n	800cbe6 <svCLI_ShowHelp+0x9e>
		}
		else {	// No CLI Entry
			svCLI_Printf("No CLI Entries !!!");
 800cbe0:	480f      	ldr	r0, [pc, #60]	; (800cc20 <svCLI_ShowHelp+0xd8>)
 800cbe2:	f7ff ff85 	bl	800caf0 <svCLI_Printf>
		}
		svCLI_Printf("\r\n");
 800cbe6:	480a      	ldr	r0, [pc, #40]	; (800cc10 <svCLI_ShowHelp+0xc8>)
 800cbe8:	f7ff ff82 	bl	800caf0 <svCLI_Printf>
	}
	if (svCommit) {
 800cbec:	4b0d      	ldr	r3, [pc, #52]	; (800cc24 <svCLI_ShowHelp+0xdc>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <svCLI_ShowHelp+0xb2>
		svCommit();
 800cbf4:	4b0b      	ldr	r3, [pc, #44]	; (800cc24 <svCLI_ShowHelp+0xdc>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4798      	blx	r3
	}
}
 800cbfa:	bf00      	nop
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	20000e2c 	.word	0x20000e2c
 800cc08:	20000e20 	.word	0x20000e20
 800cc0c:	20000e24 	.word	0x20000e24
 800cc10:	0800eb58 	.word	0x0800eb58
 800cc14:	0800eb5c 	.word	0x0800eb5c
 800cc18:	0800eb60 	.word	0x0800eb60
 800cc1c:	0800eb80 	.word	0x0800eb80
 800cc20:	0800eb88 	.word	0x0800eb88
 800cc24:	20000e30 	.word	0x20000e30

0800cc28 <_strlenOffspace>:

// String length after stripped off space[0x20]
static int _strlenOffspace(const char* szString)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
	int nCount = 0;
 800cc30:	2300      	movs	r3, #0
 800cc32:	60fb      	str	r3, [r7, #12]
	if ((szString == NULL) || (*szString == 0))
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <_strlenOffspace+0x1a>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d104      	bne.n	800cc4c <_strlenOffspace+0x24>
		return 0;
 800cc42:	2300      	movs	r3, #0
 800cc44:	e017      	b.n	800cc76 <_strlenOffspace+0x4e>
	// Strip off first spaces
	while (*szString == ' ') szString++;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	3301      	adds	r3, #1
 800cc4a:	607b      	str	r3, [r7, #4]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	2b20      	cmp	r3, #32
 800cc52:	d0f8      	beq.n	800cc46 <_strlenOffspace+0x1e>
	// Count
	while (*szString) {
 800cc54:	e008      	b.n	800cc68 <_strlenOffspace+0x40>
		if (*szString++ != ' ') {
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	1c5a      	adds	r2, r3, #1
 800cc5a:	607a      	str	r2, [r7, #4]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	2b20      	cmp	r3, #32
 800cc60:	d007      	beq.n	800cc72 <_strlenOffspace+0x4a>
			nCount++;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	3301      	adds	r3, #1
 800cc66:	60fb      	str	r3, [r7, #12]
	while (*szString) {
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d1f2      	bne.n	800cc56 <_strlenOffspace+0x2e>
 800cc70:	e000      	b.n	800cc74 <_strlenOffspace+0x4c>
		}
		else
			break;
 800cc72:	bf00      	nop
	}
	return nCount;
 800cc74:	68fb      	ldr	r3, [r7, #12]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3714      	adds	r7, #20
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr

0800cc82 <_toLower>:

static char _toLower(char c)
{
 800cc82:	b480      	push	{r7}
 800cc84:	b083      	sub	sp, #12
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	4603      	mov	r3, r0
 800cc8a:	71fb      	strb	r3, [r7, #7]
  if ((c >= 'A') && (c <= 'Z')) {
 800cc8c:	79fb      	ldrb	r3, [r7, #7]
 800cc8e:	2b40      	cmp	r3, #64	; 0x40
 800cc90:	d905      	bls.n	800cc9e <_toLower+0x1c>
 800cc92:	79fb      	ldrb	r3, [r7, #7]
 800cc94:	2b5a      	cmp	r3, #90	; 0x5a
 800cc96:	d802      	bhi.n	800cc9e <_toLower+0x1c>
    c = (c - 'A') + 'a';
 800cc98:	79fb      	ldrb	r3, [r7, #7]
 800cc9a:	3320      	adds	r3, #32
 800cc9c:	71fb      	strb	r3, [r7, #7]
  }
  return c;
 800cc9e:	79fb      	ldrb	r3, [r7, #7]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <_isPrintable>:

static int _isPrintable(char c)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	71fb      	strb	r3, [r7, #7]
	if ((' ' <= c) && (c <= '~'))
 800ccb6:	79fb      	ldrb	r3, [r7, #7]
 800ccb8:	2b1f      	cmp	r3, #31
 800ccba:	d904      	bls.n	800ccc6 <_isPrintable+0x1a>
 800ccbc:	79fb      	ldrb	r3, [r7, #7]
 800ccbe:	2b7e      	cmp	r3, #126	; 0x7e
 800ccc0:	d801      	bhi.n	800ccc6 <_isPrintable+0x1a>
		return 1;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e000      	b.n	800ccc8 <_isPrintable+0x1c>
	return 0;
 800ccc6:	2300      	movs	r3, #0
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <_isHex>:

static int _isHex(char c)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	4603      	mov	r3, r0
 800ccdc:	71fb      	strb	r3, [r7, #7]
  if (((c >= '0') && (c <= '9')) ||				\
 800ccde:	79fb      	ldrb	r3, [r7, #7]
 800cce0:	2b2f      	cmp	r3, #47	; 0x2f
 800cce2:	d902      	bls.n	800ccea <_isHex+0x16>
 800cce4:	79fb      	ldrb	r3, [r7, #7]
 800cce6:	2b39      	cmp	r3, #57	; 0x39
 800cce8:	d90b      	bls.n	800cd02 <_isHex+0x2e>
 800ccea:	79fb      	ldrb	r3, [r7, #7]
 800ccec:	2b40      	cmp	r3, #64	; 0x40
 800ccee:	d902      	bls.n	800ccf6 <_isHex+0x22>
      ((c >= 'A') && (c <= 'F')) ||  	\
 800ccf0:	79fb      	ldrb	r3, [r7, #7]
 800ccf2:	2b46      	cmp	r3, #70	; 0x46
 800ccf4:	d905      	bls.n	800cd02 <_isHex+0x2e>
 800ccf6:	79fb      	ldrb	r3, [r7, #7]
 800ccf8:	2b60      	cmp	r3, #96	; 0x60
 800ccfa:	d904      	bls.n	800cd06 <_isHex+0x32>
      ((c >= 'a') && (c <= 'f')))
 800ccfc:	79fb      	ldrb	r3, [r7, #7]
 800ccfe:	2b66      	cmp	r3, #102	; 0x66
 800cd00:	d801      	bhi.n	800cd06 <_isHex+0x32>
    return 1;
 800cd02:	2301      	movs	r3, #1
 800cd04:	e000      	b.n	800cd08 <_isHex+0x34>
	return 0;
 800cd06:	2300      	movs	r3, #0
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <_fromHex>:

static int _fromHex(char c) 
{
 800cd14:	b480      	push	{r7}
 800cd16:	b085      	sub	sp, #20
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	60fb      	str	r3, [r7, #12]

  if ((c >= '0') && (c <= '9')) {
 800cd22:	79fb      	ldrb	r3, [r7, #7]
 800cd24:	2b2f      	cmp	r3, #47	; 0x2f
 800cd26:	d906      	bls.n	800cd36 <_fromHex+0x22>
 800cd28:	79fb      	ldrb	r3, [r7, #7]
 800cd2a:	2b39      	cmp	r3, #57	; 0x39
 800cd2c:	d803      	bhi.n	800cd36 <_fromHex+0x22>
    ret = (c - '0');
 800cd2e:	79fb      	ldrb	r3, [r7, #7]
 800cd30:	3b30      	subs	r3, #48	; 0x30
 800cd32:	60fb      	str	r3, [r7, #12]
 800cd34:	e012      	b.n	800cd5c <_fromHex+0x48>
  } 
	else if ((c >= 'a') && (c <= 'f')) {
 800cd36:	79fb      	ldrb	r3, [r7, #7]
 800cd38:	2b60      	cmp	r3, #96	; 0x60
 800cd3a:	d906      	bls.n	800cd4a <_fromHex+0x36>
 800cd3c:	79fb      	ldrb	r3, [r7, #7]
 800cd3e:	2b66      	cmp	r3, #102	; 0x66
 800cd40:	d803      	bhi.n	800cd4a <_fromHex+0x36>
    ret = (c - 'a' + 0x0a);
 800cd42:	79fb      	ldrb	r3, [r7, #7]
 800cd44:	3b57      	subs	r3, #87	; 0x57
 800cd46:	60fb      	str	r3, [r7, #12]
 800cd48:	e008      	b.n	800cd5c <_fromHex+0x48>
  } 
	else if ((c >= 'A') && (c <= 'F')) {
 800cd4a:	79fb      	ldrb	r3, [r7, #7]
 800cd4c:	2b40      	cmp	r3, #64	; 0x40
 800cd4e:	d905      	bls.n	800cd5c <_fromHex+0x48>
 800cd50:	79fb      	ldrb	r3, [r7, #7]
 800cd52:	2b46      	cmp	r3, #70	; 0x46
 800cd54:	d802      	bhi.n	800cd5c <_fromHex+0x48>
    ret = (c - 'A' + 0x0A);
 800cd56:	79fb      	ldrb	r3, [r7, #7]
 800cd58:	3b37      	subs	r3, #55	; 0x37
 800cd5a:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3714      	adds	r7, #20
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <_strNoCaseCmp>:

static int _strNoCaseCmp(const char *s1, const char *s2, int nLenghth)
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b086      	sub	sp, #24
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	60f8      	str	r0, [r7, #12]
 800cd72:	60b9      	str	r1, [r7, #8]
 800cd74:	607a      	str	r2, [r7, #4]
  char c1, c2;

  if (nLenghth == 0)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d101      	bne.n	800cd80 <_strNoCaseCmp+0x16>
    return 0;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	e026      	b.n	800cdce <_strNoCaseCmp+0x64>
  do {
		if ((c1 = _toLower(*s1++)) != (c2 = _toLower(*s2++))) {
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	1c5a      	adds	r2, r3, #1
 800cd84:	60fa      	str	r2, [r7, #12]
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7ff ff7a 	bl	800cc82 <_toLower>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	75fb      	strb	r3, [r7, #23]
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	1c5a      	adds	r2, r3, #1
 800cd96:	60ba      	str	r2, [r7, #8]
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7ff ff71 	bl	800cc82 <_toLower>
 800cda0:	4603      	mov	r3, r0
 800cda2:	75bb      	strb	r3, [r7, #22]
 800cda4:	7dfa      	ldrb	r2, [r7, #23]
 800cda6:	7dbb      	ldrb	r3, [r7, #22]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d009      	beq.n	800cdc0 <_strNoCaseCmp+0x56>
			if ((c1 == 0) || (c2 == 0))
 800cdac:	7dfb      	ldrb	r3, [r7, #23]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00c      	beq.n	800cdcc <_strNoCaseCmp+0x62>
 800cdb2:	7dbb      	ldrb	r3, [r7, #22]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d009      	beq.n	800cdcc <_strNoCaseCmp+0x62>
					break;
			return ((unsigned char)c1 - (unsigned char)c2);
 800cdb8:	7dfa      	ldrb	r2, [r7, #23]
 800cdba:	7dbb      	ldrb	r3, [r7, #22]
 800cdbc:	1ad3      	subs	r3, r2, r3
 800cdbe:	e006      	b.n	800cdce <_strNoCaseCmp+0x64>
		}
  } while (--nLenghth != 0);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	607b      	str	r3, [r7, #4]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d1d9      	bne.n	800cd80 <_strNoCaseCmp+0x16>
  return 0;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3718      	adds	r7, #24
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <_svMemCpy>:

static void _svMemCpy(char* dst, char *src, int nLength)
{
 800cdd6:	b480      	push	{r7}
 800cdd8:	b085      	sub	sp, #20
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	60f8      	str	r0, [r7, #12]
 800cdde:	60b9      	str	r1, [r7, #8]
 800cde0:	607a      	str	r2, [r7, #4]
	while (nLength--) {
 800cde2:	e007      	b.n	800cdf4 <_svMemCpy+0x1e>
		*dst++=*src++;
 800cde4:	68ba      	ldr	r2, [r7, #8]
 800cde6:	1c53      	adds	r3, r2, #1
 800cde8:	60bb      	str	r3, [r7, #8]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	1c59      	adds	r1, r3, #1
 800cdee:	60f9      	str	r1, [r7, #12]
 800cdf0:	7812      	ldrb	r2, [r2, #0]
 800cdf2:	701a      	strb	r2, [r3, #0]
	while (nLength--) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	1e5a      	subs	r2, r3, #1
 800cdf8:	607a      	str	r2, [r7, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1f2      	bne.n	800cde4 <_svMemCpy+0xe>
	}
}
 800cdfe:	bf00      	nop
 800ce00:	bf00      	nop
 800ce02:	3714      	adds	r7, #20
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <_svClearLine>:

static void _svClearLine(void)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
	svPutChar('\r');
 800ce12:	4b16      	ldr	r3, [pc, #88]	; (800ce6c <_svClearLine+0x60>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	200d      	movs	r0, #13
 800ce18:	4798      	blx	r3
	// Remove Strings
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	607b      	str	r3, [r7, #4]
 800ce1e:	e006      	b.n	800ce2e <_svClearLine+0x22>
		svPutChar(' ');
 800ce20:	4b12      	ldr	r3, [pc, #72]	; (800ce6c <_svClearLine+0x60>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2020      	movs	r0, #32
 800ce26:	4798      	blx	r3
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	607b      	str	r3, [r7, #4]
 800ce2e:	4b10      	ldr	r3, [pc, #64]	; (800ce70 <_svClearLine+0x64>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4a10      	ldr	r2, [pc, #64]	; (800ce74 <_svClearLine+0x68>)
 800ce34:	6812      	ldr	r2, [r2, #0]
 800ce36:	441a      	add	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d8f0      	bhi.n	800ce20 <_svClearLine+0x14>
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800ce3e:	2300      	movs	r3, #0
 800ce40:	603b      	str	r3, [r7, #0]
 800ce42:	e006      	b.n	800ce52 <_svClearLine+0x46>
		svPutChar('\b');
 800ce44:	4b09      	ldr	r3, [pc, #36]	; (800ce6c <_svClearLine+0x60>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2008      	movs	r0, #8
 800ce4a:	4798      	blx	r3
	for(int i=0;i<scntCLIString+snCLI_PROMPT_LENGTH;i++)
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	3301      	adds	r3, #1
 800ce50:	603b      	str	r3, [r7, #0]
 800ce52:	4b07      	ldr	r3, [pc, #28]	; (800ce70 <_svClearLine+0x64>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4a07      	ldr	r2, [pc, #28]	; (800ce74 <_svClearLine+0x68>)
 800ce58:	6812      	ldr	r2, [r2, #0]
 800ce5a:	441a      	add	r2, r3
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d8f0      	bhi.n	800ce44 <_svClearLine+0x38>
}
 800ce62:	bf00      	nop
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	20000e2c 	.word	0x20000e2c
 800ce70:	20000e1c 	.word	0x20000e1c
 800ce74:	20000060 	.word	0x20000060

0800ce78 <svCLIHandleHistory>:

static void svCLIHandleHistory(CLI_HISTORY_CMD_e eHistoryCmd)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	4603      	mov	r3, r0
 800ce80:	71fb      	strb	r3, [r7, #7]
	switch (eHistoryCmd) {
 800ce82:	79fb      	ldrb	r3, [r7, #7]
 800ce84:	2b02      	cmp	r3, #2
 800ce86:	d03f      	beq.n	800cf08 <svCLIHandleHistory+0x90>
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	dc6f      	bgt.n	800cf6c <svCLIHandleHistory+0xf4>
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d002      	beq.n	800ce96 <svCLIHandleHistory+0x1e>
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d052      	beq.n	800cf3a <svCLIHandleHistory+0xc2>
			if (snCLIHistoryPos >= snCLIHistoryCount)
				snCLIHistoryPos = 0;
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
			break;
		default:
			break;
 800ce94:	e06a      	b.n	800cf6c <svCLIHandleHistory+0xf4>
			if (snCLIHistoryCount == MAX_CLI_HISTORY_BUFF_MAX) {	// Full
 800ce96:	4b38      	ldr	r3, [pc, #224]	; (800cf78 <svCLIHandleHistory+0x100>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2b03      	cmp	r3, #3
 800ce9c:	d11c      	bne.n	800ced8 <svCLIHandleHistory+0x60>
				for (int i=1;i<snCLIHistoryCount;i++) {
 800ce9e:	2301      	movs	r3, #1
 800cea0:	60fb      	str	r3, [r7, #12]
 800cea2:	e00f      	b.n	800cec4 <svCLIHandleHistory+0x4c>
	        _svMemCpy(&szCLIHistoryBuffer[i-1][0],&szCLIHistoryBuffer[i][0],MAX_CLI_CHARS);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	3b01      	subs	r3, #1
 800cea8:	01db      	lsls	r3, r3, #7
 800ceaa:	4a34      	ldr	r2, [pc, #208]	; (800cf7c <svCLIHandleHistory+0x104>)
 800ceac:	1898      	adds	r0, r3, r2
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	01db      	lsls	r3, r3, #7
 800ceb2:	4a32      	ldr	r2, [pc, #200]	; (800cf7c <svCLIHandleHistory+0x104>)
 800ceb4:	4413      	add	r3, r2
 800ceb6:	2280      	movs	r2, #128	; 0x80
 800ceb8:	4619      	mov	r1, r3
 800ceba:	f7ff ff8c 	bl	800cdd6 <_svMemCpy>
				for (int i=1;i<snCLIHistoryCount;i++) {
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	3301      	adds	r3, #1
 800cec2:	60fb      	str	r3, [r7, #12]
 800cec4:	4b2c      	ldr	r3, [pc, #176]	; (800cf78 <svCLIHandleHistory+0x100>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	dbea      	blt.n	800cea4 <svCLIHandleHistory+0x2c>
				snCLIHistoryCount--;
 800cece:	4b2a      	ldr	r3, [pc, #168]	; (800cf78 <svCLIHandleHistory+0x100>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	3b01      	subs	r3, #1
 800ced4:	4a28      	ldr	r2, [pc, #160]	; (800cf78 <svCLIHandleHistory+0x100>)
 800ced6:	6013      	str	r3, [r2, #0]
			_svMemCpy(&szCLIHistoryBuffer[snCLIHistoryCount][0], &szCLIString[0],MAX_CLI_CHARS);
 800ced8:	4b27      	ldr	r3, [pc, #156]	; (800cf78 <svCLIHandleHistory+0x100>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	01db      	lsls	r3, r3, #7
 800cede:	4a27      	ldr	r2, [pc, #156]	; (800cf7c <svCLIHandleHistory+0x104>)
 800cee0:	4413      	add	r3, r2
 800cee2:	2280      	movs	r2, #128	; 0x80
 800cee4:	4926      	ldr	r1, [pc, #152]	; (800cf80 <svCLIHandleHistory+0x108>)
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7ff ff75 	bl	800cdd6 <_svMemCpy>
			if (snCLIHistoryCount < MAX_CLI_HISTORY_BUFF_MAX)
 800ceec:	4b22      	ldr	r3, [pc, #136]	; (800cf78 <svCLIHandleHistory+0x100>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	dc04      	bgt.n	800cefe <svCLIHandleHistory+0x86>
				snCLIHistoryCount++;
 800cef4:	4b20      	ldr	r3, [pc, #128]	; (800cf78 <svCLIHandleHistory+0x100>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	3301      	adds	r3, #1
 800cefa:	4a1f      	ldr	r2, [pc, #124]	; (800cf78 <svCLIHandleHistory+0x100>)
 800cefc:	6013      	str	r3, [r2, #0]
			snCLIHistoryPos = snCLIHistoryCount;
 800cefe:	4b1e      	ldr	r3, [pc, #120]	; (800cf78 <svCLIHandleHistory+0x100>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a20      	ldr	r2, [pc, #128]	; (800cf84 <svCLIHandleHistory+0x10c>)
 800cf04:	6013      	str	r3, [r2, #0]
			break;
 800cf06:	e032      	b.n	800cf6e <svCLIHandleHistory+0xf6>
			snCLIHistoryPos--;
 800cf08:	4b1e      	ldr	r3, [pc, #120]	; (800cf84 <svCLIHandleHistory+0x10c>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	3b01      	subs	r3, #1
 800cf0e:	4a1d      	ldr	r2, [pc, #116]	; (800cf84 <svCLIHandleHistory+0x10c>)
 800cf10:	6013      	str	r3, [r2, #0]
			if (snCLIHistoryPos < 0)
 800cf12:	4b1c      	ldr	r3, [pc, #112]	; (800cf84 <svCLIHandleHistory+0x10c>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	da04      	bge.n	800cf24 <svCLIHandleHistory+0xac>
				snCLIHistoryPos = snCLIHistoryCount - 1;
 800cf1a:	4b17      	ldr	r3, [pc, #92]	; (800cf78 <svCLIHandleHistory+0x100>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	4a18      	ldr	r2, [pc, #96]	; (800cf84 <svCLIHandleHistory+0x10c>)
 800cf22:	6013      	str	r3, [r2, #0]
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 800cf24:	4b17      	ldr	r3, [pc, #92]	; (800cf84 <svCLIHandleHistory+0x10c>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	01db      	lsls	r3, r3, #7
 800cf2a:	4a14      	ldr	r2, [pc, #80]	; (800cf7c <svCLIHandleHistory+0x104>)
 800cf2c:	4413      	add	r3, r2
 800cf2e:	2280      	movs	r2, #128	; 0x80
 800cf30:	4619      	mov	r1, r3
 800cf32:	4813      	ldr	r0, [pc, #76]	; (800cf80 <svCLIHandleHistory+0x108>)
 800cf34:	f7ff ff4f 	bl	800cdd6 <_svMemCpy>
			break;
 800cf38:	e019      	b.n	800cf6e <svCLIHandleHistory+0xf6>
			snCLIHistoryPos++;
 800cf3a:	4b12      	ldr	r3, [pc, #72]	; (800cf84 <svCLIHandleHistory+0x10c>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	4a10      	ldr	r2, [pc, #64]	; (800cf84 <svCLIHandleHistory+0x10c>)
 800cf42:	6013      	str	r3, [r2, #0]
			if (snCLIHistoryPos >= snCLIHistoryCount)
 800cf44:	4b0f      	ldr	r3, [pc, #60]	; (800cf84 <svCLIHandleHistory+0x10c>)
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	4b0b      	ldr	r3, [pc, #44]	; (800cf78 <svCLIHandleHistory+0x100>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	db02      	blt.n	800cf56 <svCLIHandleHistory+0xde>
				snCLIHistoryPos = 0;
 800cf50:	4b0c      	ldr	r3, [pc, #48]	; (800cf84 <svCLIHandleHistory+0x10c>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	601a      	str	r2, [r3, #0]
			_svMemCpy(&szCLIString[0], &szCLIHistoryBuffer[snCLIHistoryPos][0],MAX_CLI_CHARS);
 800cf56:	4b0b      	ldr	r3, [pc, #44]	; (800cf84 <svCLIHandleHistory+0x10c>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	01db      	lsls	r3, r3, #7
 800cf5c:	4a07      	ldr	r2, [pc, #28]	; (800cf7c <svCLIHandleHistory+0x104>)
 800cf5e:	4413      	add	r3, r2
 800cf60:	2280      	movs	r2, #128	; 0x80
 800cf62:	4619      	mov	r1, r3
 800cf64:	4806      	ldr	r0, [pc, #24]	; (800cf80 <svCLIHandleHistory+0x108>)
 800cf66:	f7ff ff36 	bl	800cdd6 <_svMemCpy>
			break;
 800cf6a:	e000      	b.n	800cf6e <svCLIHandleHistory+0xf6>
			break;
 800cf6c:	bf00      	nop
	}
}
 800cf6e:	bf00      	nop
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	20000e14 	.word	0x20000e14
 800cf7c:	20000c94 	.word	0x20000c94
 800cf80:	20000c14 	.word	0x20000c14
 800cf84:	20000e18 	.word	0x20000e18

0800cf88 <svCLI_Search>:

static SVCLI_t* svCLI_Search(char **line)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b086      	sub	sp, #24
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
	SVCLI_t* pCLIEntry;
	char* pCurrent = *line;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	613b      	str	r3, [r7, #16]
  // strip off leading spaces
  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 800cf96:	e002      	b.n	800cf9e <svCLI_Search+0x16>
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	613b      	str	r3, [r7, #16]
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d003      	beq.n	800cfae <svCLI_Search+0x26>
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	2b20      	cmp	r3, #32
 800cfac:	d0f4      	beq.n	800cf98 <svCLI_Search+0x10>
	for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800cfae:	4b22      	ldr	r3, [pc, #136]	; (800d038 <svCLI_Search+0xb0>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	617b      	str	r3, [r7, #20]
 800cfb4:	e035      	b.n	800d022 <svCLI_Search+0x9a>
		int nCmdLength = _strlenOffspace(pCLIEntry->szCmd);
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7ff fe34 	bl	800cc28 <_strlenOffspace>
 800cfc0:	60f8      	str	r0, [r7, #12]
		int nArgLength = _strlenOffspace(pCurrent);
 800cfc2:	6938      	ldr	r0, [r7, #16]
 800cfc4:	f7ff fe30 	bl	800cc28 <_strlenOffspace>
 800cfc8:	60b8      	str	r0, [r7, #8]
		pCurrent[nArgLength] = 0;	// NULL termination just after command for comparing
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	693a      	ldr	r2, [r7, #16]
 800cfce:	4413      	add	r3, r2
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	701a      	strb	r2, [r3, #0]
		if (nCmdLength >= nArgLength) {
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	db1f      	blt.n	800d01c <svCLI_Search+0x94>
			if (_strNoCaseCmp(pCurrent, pCLIEntry->szCmd, nCmdLength) == 0) {	// Partial Command OK !!
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	68fa      	ldr	r2, [r7, #12]
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	6938      	ldr	r0, [r7, #16]
 800cfe6:	f7ff fec0 	bl	800cd6a <_strNoCaseCmp>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d115      	bne.n	800d01c <svCLI_Search+0x94>
				pCurrent += (nArgLength + 1);
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	3301      	adds	r3, #1
 800cff4:	693a      	ldr	r2, [r7, #16]
 800cff6:	4413      	add	r3, r2
 800cff8:	613b      	str	r3, [r7, #16]
			  // strip off trailing spaces
			  while (*pCurrent && *pCurrent == ' ') pCurrent++;
 800cffa:	e002      	b.n	800d002 <svCLI_Search+0x7a>
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	3301      	adds	r3, #1
 800d000:	613b      	str	r3, [r7, #16]
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d003      	beq.n	800d012 <svCLI_Search+0x8a>
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	2b20      	cmp	r3, #32
 800d010:	d0f4      	beq.n	800cffc <svCLI_Search+0x74>
				*line = pCurrent;		// remove command & return
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	693a      	ldr	r2, [r7, #16]
 800d016:	601a      	str	r2, [r3, #0]
				
				return pCLIEntry;
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	e008      	b.n	800d02e <svCLI_Search+0xa6>
	for (pCLIEntry=sCLITableBegin;pCLIEntry<sCLITablEnd;pCLIEntry++) {
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	330c      	adds	r3, #12
 800d020:	617b      	str	r3, [r7, #20]
 800d022:	4b06      	ldr	r3, [pc, #24]	; (800d03c <svCLI_Search+0xb4>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	697a      	ldr	r2, [r7, #20]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d3c4      	bcc.n	800cfb6 <svCLI_Search+0x2e>
			}
		}
	}
	return NULL;
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3718      	adds	r7, #24
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	20000e20 	.word	0x20000e20
 800d03c:	20000e24 	.word	0x20000e24

0800d040 <svCLI_ParseNumber>:

int svCLI_ParseNumber(char *s, unsigned int *val, char **res, char *delimiter)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b08a      	sub	sp, #40	; 0x28
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]
 800d04c:	603b      	str	r3, [r7, #0]
  int first = 1;
 800d04e:	2301      	movs	r3, #1
 800d050:	627b      	str	r3, [r7, #36]	; 0x24
  int radix = 10;
 800d052:	230a      	movs	r3, #10
 800d054:	623b      	str	r3, [r7, #32]
  char c;
  unsigned long result = 0;
 800d056:	2300      	movs	r3, #0
 800d058:	61fb      	str	r3, [r7, #28]
  int digit;
		// strip off leading spaces
    while (*s == ' ') s++;
 800d05a:	e002      	b.n	800d062 <svCLI_ParseNumber+0x22>
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	3301      	adds	r3, #1
 800d060:	60fb      	str	r3, [r7, #12]
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	2b20      	cmp	r3, #32
 800d068:	d0f8      	beq.n	800d05c <svCLI_ParseNumber+0x1c>
		if (*s == 0)
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d14d      	bne.n	800d10e <svCLI_ParseNumber+0xce>
			return 0;
 800d072:	2300      	movs	r3, #0
 800d074:	e05b      	b.n	800d12e <svCLI_ParseNumber+0xee>
    while (*s) {
      if (first && (s[0] == '0') && (_toLower(s[1]) == 'x')) {
 800d076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d011      	beq.n	800d0a0 <svCLI_ParseNumber+0x60>
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	2b30      	cmp	r3, #48	; 0x30
 800d082:	d10d      	bne.n	800d0a0 <svCLI_ParseNumber+0x60>
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	3301      	adds	r3, #1
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7ff fdf9 	bl	800cc82 <_toLower>
 800d090:	4603      	mov	r3, r0
 800d092:	2b78      	cmp	r3, #120	; 0x78
 800d094:	d104      	bne.n	800d0a0 <svCLI_ParseNumber+0x60>
        radix = 16;
 800d096:	2310      	movs	r3, #16
 800d098:	623b      	str	r3, [r7, #32]
        s += 2;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	3302      	adds	r3, #2
 800d09e:	60fb      	str	r3, [r7, #12]
      }
      first = 0;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	627b      	str	r3, [r7, #36]	; 0x24
      c = *s++;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	1c5a      	adds	r2, r3, #1
 800d0a8:	60fa      	str	r2, [r7, #12]
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	75fb      	strb	r3, [r7, #23]
      if (_isHex(c) && ((digit = _fromHex(c)) < radix)) {
 800d0ae:	7dfb      	ldrb	r3, [r7, #23]
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7ff fe0f 	bl	800ccd4 <_isHex>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d010      	beq.n	800d0de <svCLI_ParseNumber+0x9e>
 800d0bc:	7dfb      	ldrb	r3, [r7, #23]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7ff fe28 	bl	800cd14 <_fromHex>
 800d0c4:	6138      	str	r0, [r7, #16]
 800d0c6:	693a      	ldr	r2, [r7, #16]
 800d0c8:	6a3b      	ldr	r3, [r7, #32]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	da07      	bge.n	800d0de <svCLI_ParseNumber+0x9e>
        // Valid digit
        result = (result * radix) + digit;
 800d0ce:	6a3b      	ldr	r3, [r7, #32]
 800d0d0:	69fa      	ldr	r2, [r7, #28]
 800d0d2:	fb03 f202 	mul.w	r2, r3, r2
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	4413      	add	r3, r2
 800d0da:	61fb      	str	r3, [r7, #28]
 800d0dc:	e017      	b.n	800d10e <svCLI_ParseNumber+0xce>
      } 
			else {
        if (delimiter != (char *)0) {
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d012      	beq.n	800d10a <svCLI_ParseNumber+0xca>
          // See if this character is one of the delimiters
          char *dp = delimiter;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	61bb      	str	r3, [r7, #24]
          while (*dp && (c != *dp)) dp++;
 800d0e8:	e002      	b.n	800d0f0 <svCLI_ParseNumber+0xb0>
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	61bb      	str	r3, [r7, #24]
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d004      	beq.n	800d102 <svCLI_ParseNumber+0xc2>
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	7dfa      	ldrb	r2, [r7, #23]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d1f3      	bne.n	800d0ea <svCLI_ParseNumber+0xaa>
          if (*dp) break;  // Found a good delimiter
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d106      	bne.n	800d118 <svCLI_ParseNumber+0xd8>
        }
        return 0;  // invalid number
 800d10a:	2300      	movs	r3, #0
 800d10c:	e00f      	b.n	800d12e <svCLI_ParseNumber+0xee>
    while (*s) {
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d1af      	bne.n	800d076 <svCLI_ParseNumber+0x36>
 800d116:	e000      	b.n	800d11a <svCLI_ParseNumber+0xda>
          if (*dp) break;  // Found a good delimiter
 800d118:	bf00      	nop
      }
    }
    *val = result;
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	69fa      	ldr	r2, [r7, #28]
 800d11e:	601a      	str	r2, [r3, #0]
    if (res != (char **)0) {
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d002      	beq.n	800d12c <svCLI_ParseNumber+0xec>
      *res = s;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	68fa      	ldr	r2, [r7, #12]
 800d12a:	601a      	str	r2, [r3, #0]
    }
    return 1;
 800d12c:	2301      	movs	r3, #1
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3728      	adds	r7, #40	; 0x28
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
	...

0800d138 <svCLI_ParsenExecute>:

static void svCLI_ParsenExecute()
{
 800d138:	b590      	push	{r4, r7, lr}
 800d13a:	b089      	sub	sp, #36	; 0x24
 800d13c:	af00      	add	r7, sp, #0
	if (s_bPwdOK == FALSE) {	// Input Password
 800d13e:	4b3a      	ldr	r3, [pc, #232]	; (800d228 <svCLI_ParsenExecute+0xf0>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d120      	bne.n	800d188 <svCLI_ParsenExecute+0x50>
		if (strcmp(szCLIString, DEFAULT_PASSWORD) == 0) {
 800d146:	4939      	ldr	r1, [pc, #228]	; (800d22c <svCLI_ParsenExecute+0xf4>)
 800d148:	4839      	ldr	r0, [pc, #228]	; (800d230 <svCLI_ParsenExecute+0xf8>)
 800d14a:	f7f3 f8a1 	bl	8000290 <strcmp>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d115      	bne.n	800d180 <svCLI_ParsenExecute+0x48>
			s_bPwdOK = TRUE;
 800d154:	4b34      	ldr	r3, [pc, #208]	; (800d228 <svCLI_ParsenExecute+0xf0>)
 800d156:	2201      	movs	r2, #1
 800d158:	601a      	str	r2, [r3, #0]
			svCLI_Printf("Welcome !!\r\n");
 800d15a:	4836      	ldr	r0, [pc, #216]	; (800d234 <svCLI_ParsenExecute+0xfc>)
 800d15c:	f7ff fcc8 	bl	800caf0 <svCLI_Printf>
			strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800d160:	4b35      	ldr	r3, [pc, #212]	; (800d238 <svCLI_ParsenExecute+0x100>)
 800d162:	4a36      	ldr	r2, [pc, #216]	; (800d23c <svCLI_ParsenExecute+0x104>)
 800d164:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d168:	6018      	str	r0, [r3, #0]
 800d16a:	3304      	adds	r3, #4
 800d16c:	8019      	strh	r1, [r3, #0]
 800d16e:	3302      	adds	r3, #2
 800d170:	0c0a      	lsrs	r2, r1, #16
 800d172:	701a      	strb	r2, [r3, #0]
			snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800d174:	4b32      	ldr	r3, [pc, #200]	; (800d240 <svCLI_ParsenExecute+0x108>)
 800d176:	2206      	movs	r2, #6
 800d178:	601a      	str	r2, [r3, #0]
			svCLI_ShowHelp();
 800d17a:	f7ff fce5 	bl	800cb48 <svCLI_ShowHelp>
		}
		else {
			svCLI_Printf("Invalid Password !!\r\n");
		}
		return;
 800d17e:	e04f      	b.n	800d220 <svCLI_ParsenExecute+0xe8>
			svCLI_Printf("Invalid Password !!\r\n");
 800d180:	4830      	ldr	r0, [pc, #192]	; (800d244 <svCLI_ParsenExecute+0x10c>)
 800d182:	f7ff fcb5 	bl	800caf0 <svCLI_Printf>
		return;
 800d186:	e04b      	b.n	800d220 <svCLI_ParsenExecute+0xe8>
	}
	SVCLI_t* pCLIEntry;
	if (sCLITableBegin == sCLITablEnd) {
 800d188:	4b2f      	ldr	r3, [pc, #188]	; (800d248 <svCLI_ParsenExecute+0x110>)
 800d18a:	681a      	ldr	r2, [r3, #0]
 800d18c:	4b2f      	ldr	r3, [pc, #188]	; (800d24c <svCLI_ParsenExecute+0x114>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	429a      	cmp	r2, r3
 800d192:	d103      	bne.n	800d19c <svCLI_ParsenExecute+0x64>
		svCLI_Printf("No CLI Entries !!!\r\n");
 800d194:	482e      	ldr	r0, [pc, #184]	; (800d250 <svCLI_ParsenExecute+0x118>)
 800d196:	f7ff fcab 	bl	800caf0 <svCLI_Printf>
		return;
 800d19a:	e041      	b.n	800d220 <svCLI_ParsenExecute+0xe8>
	}
	char* pLine = szCLIString;
 800d19c:	4b24      	ldr	r3, [pc, #144]	; (800d230 <svCLI_ParsenExecute+0xf8>)
 800d19e:	613b      	str	r3, [r7, #16]
	pCLIEntry = svCLI_Search(&pLine);
 800d1a0:	f107 0310 	add.w	r3, r7, #16
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7ff feef 	bl	800cf88 <svCLI_Search>
 800d1aa:	61b8      	str	r0, [r7, #24]
	if (pCLIEntry) {
 800d1ac:	69bb      	ldr	r3, [r7, #24]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d033      	beq.n	800d21a <svCLI_ParsenExecute+0xe2>
		// Parse more for CLI function
		unsigned int nFirst, nSecond, nCount;
		nCount = 0;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	61fb      	str	r3, [r7, #28]
		nFirst = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	60fb      	str	r3, [r7, #12]
		nSecond = 0;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	60bb      	str	r3, [r7, #8]
		char* pParseLine = pLine;
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	617b      	str	r3, [r7, #20]
		char delim[3] = ", ";
 800d1c2:	4a24      	ldr	r2, [pc, #144]	; (800d254 <svCLI_ParsenExecute+0x11c>)
 800d1c4:	1d3b      	adds	r3, r7, #4
 800d1c6:	6812      	ldr	r2, [r2, #0]
 800d1c8:	4611      	mov	r1, r2
 800d1ca:	8019      	strh	r1, [r3, #0]
 800d1cc:	3302      	adds	r3, #2
 800d1ce:	0c12      	lsrs	r2, r2, #16
 800d1d0:	701a      	strb	r2, [r3, #0]
		if (svCLI_ParseNumber(pLine, &nFirst, &pLine, delim)) {
 800d1d2:	6938      	ldr	r0, [r7, #16]
 800d1d4:	1d3b      	adds	r3, r7, #4
 800d1d6:	f107 0210 	add.w	r2, r7, #16
 800d1da:	f107 010c 	add.w	r1, r7, #12
 800d1de:	f7ff ff2f 	bl	800d040 <svCLI_ParseNumber>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d010      	beq.n	800d20a <svCLI_ParsenExecute+0xd2>
			nCount++;
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	61fb      	str	r3, [r7, #28]
			if (svCLI_ParseNumber(pLine, &nSecond, &pLine, delim)) {
 800d1ee:	6938      	ldr	r0, [r7, #16]
 800d1f0:	1d3b      	adds	r3, r7, #4
 800d1f2:	f107 0210 	add.w	r2, r7, #16
 800d1f6:	f107 0108 	add.w	r1, r7, #8
 800d1fa:	f7ff ff21 	bl	800d040 <svCLI_ParseNumber>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b00      	cmp	r3, #0
 800d202:	d002      	beq.n	800d20a <svCLI_ParsenExecute+0xd2>
				nCount++;
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	3301      	adds	r3, #1
 800d208:	61fb      	str	r3, [r7, #28]
			}
		}
		pCLIEntry->func(pParseLine,nCount,nFirst,nSecond);
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	689c      	ldr	r4, [r3, #8]
 800d20e:	68fa      	ldr	r2, [r7, #12]
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	69f9      	ldr	r1, [r7, #28]
 800d214:	6978      	ldr	r0, [r7, #20]
 800d216:	47a0      	blx	r4
 800d218:	e002      	b.n	800d220 <svCLI_ParsenExecute+0xe8>
	}
	else {
		svCLI_Printf("CLI command Not Found !! - Press Help\r\n");
 800d21a:	480f      	ldr	r0, [pc, #60]	; (800d258 <svCLI_ParsenExecute+0x120>)
 800d21c:	f7ff fc68 	bl	800caf0 <svCLI_Printf>
	}
}
 800d220:	3724      	adds	r7, #36	; 0x24
 800d222:	46bd      	mov	sp, r7
 800d224:	bd90      	pop	{r4, r7, pc}
 800d226:	bf00      	nop
 800d228:	20000050 	.word	0x20000050
 800d22c:	0800eb9c 	.word	0x0800eb9c
 800d230:	20000c14 	.word	0x20000c14
 800d234:	0800eba8 	.word	0x0800eba8
 800d238:	20000054 	.word	0x20000054
 800d23c:	0800eb44 	.word	0x0800eb44
 800d240:	20000060 	.word	0x20000060
 800d244:	0800ebb8 	.word	0x0800ebb8
 800d248:	20000e20 	.word	0x20000e20
 800d24c:	20000e24 	.word	0x20000e24
 800d250:	0800ebd0 	.word	0x0800ebd0
 800d254:	0800ec10 	.word	0x0800ec10
 800d258:	0800ebe8 	.word	0x0800ebe8

0800d25c <svCLI_SetBypassFtn>:

// hellosmk 210225 added
void svCLI_SetBypassFtn(SVCLI_BYPASS_FUNC pfnBypass, char* szPrompt, char szExit, BOOL bEnter)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b086      	sub	sp, #24
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	603b      	str	r3, [r7, #0]
 800d268:	4613      	mov	r3, r2
 800d26a:	71fb      	strb	r3, [r7, #7]
	if ((pfnBypass == NULL) || (szPrompt == NULL) || (szExit == NULL)) {
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d005      	beq.n	800d27e <svCLI_SetBypassFtn+0x22>
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d002      	beq.n	800d27e <svCLI_SetBypassFtn+0x22>
 800d278:	79fb      	ldrb	r3, [r7, #7]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d136      	bne.n	800d2ec <svCLI_SetBypassFtn+0x90>
		if (svBypass == NULL) {
 800d27e:	4b28      	ldr	r3, [pc, #160]	; (800d320 <svCLI_SetBypassFtn+0xc4>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d048      	beq.n	800d318 <svCLI_SetBypassFtn+0xbc>
			// Nothing to do..
			return;
		}
		strcpy(szCLI_PROMPT, CLI_PROMPT_DEFAULT);
 800d286:	4b27      	ldr	r3, [pc, #156]	; (800d324 <svCLI_SetBypassFtn+0xc8>)
 800d288:	4a27      	ldr	r2, [pc, #156]	; (800d328 <svCLI_SetBypassFtn+0xcc>)
 800d28a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d28e:	6018      	str	r0, [r3, #0]
 800d290:	3304      	adds	r3, #4
 800d292:	8019      	strh	r1, [r3, #0]
 800d294:	3302      	adds	r3, #2
 800d296:	0c0a      	lsrs	r2, r1, #16
 800d298:	701a      	strb	r2, [r3, #0]
		snCLI_PROMPT_LENGTH = CLI_PROMPT_DEFAULT_LENGTH;
 800d29a:	4b24      	ldr	r3, [pc, #144]	; (800d32c <svCLI_SetBypassFtn+0xd0>)
 800d29c:	2206      	movs	r2, #6
 800d29e:	601a      	str	r2, [r3, #0]
		svBypass = NULL;
 800d2a0:	4b1f      	ldr	r3, [pc, #124]	; (800d320 <svCLI_SetBypassFtn+0xc4>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	601a      	str	r2, [r3, #0]

		svExit = NULL;
 800d2a6:	4b22      	ldr	r3, [pc, #136]	; (800d330 <svCLI_SetBypassFtn+0xd4>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	701a      	strb	r2, [r3, #0]
		sbEnter = FALSE;
 800d2ac:	4b21      	ldr	r3, [pc, #132]	; (800d334 <svCLI_SetBypassFtn+0xd8>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	601a      	str	r2, [r3, #0]
		
		scntCLIString = 0;	// Clean Up Char
 800d2b2:	4b21      	ldr	r3, [pc, #132]	; (800d338 <svCLI_SetBypassFtn+0xdc>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	601a      	str	r2, [r3, #0]
		// clean up line string
		for (int i=0;i<MAX_CLI_CHARS;i++) {
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	617b      	str	r3, [r7, #20]
 800d2bc:	e007      	b.n	800d2ce <svCLI_SetBypassFtn+0x72>
			szCLIString[i] = '\0';
 800d2be:	4a1f      	ldr	r2, [pc, #124]	; (800d33c <svCLI_SetBypassFtn+0xe0>)
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<MAX_CLI_CHARS;i++) {
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	617b      	str	r3, [r7, #20]
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	2b7f      	cmp	r3, #127	; 0x7f
 800d2d2:	ddf4      	ble.n	800d2be <svCLI_SetBypassFtn+0x62>
		}
		svCLI_Printf("\r\nExit Bypass Mode\r\n%s", szCLI_PROMPT);
 800d2d4:	4913      	ldr	r1, [pc, #76]	; (800d324 <svCLI_SetBypassFtn+0xc8>)
 800d2d6:	481a      	ldr	r0, [pc, #104]	; (800d340 <svCLI_SetBypassFtn+0xe4>)
 800d2d8:	f7ff fc0a 	bl	800caf0 <svCLI_Printf>

		if (svCommit) {
 800d2dc:	4b19      	ldr	r3, [pc, #100]	; (800d344 <svCLI_SetBypassFtn+0xe8>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d01a      	beq.n	800d31a <svCLI_SetBypassFtn+0xbe>
			svCommit();
 800d2e4:	4b17      	ldr	r3, [pc, #92]	; (800d344 <svCLI_SetBypassFtn+0xe8>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4798      	blx	r3
		if (svCommit) {
 800d2ea:	e016      	b.n	800d31a <svCLI_SetBypassFtn+0xbe>
		}
	}
	else {
		strncpy(szCLI_PROMPT, szPrompt, sizeof(szCLI_PROMPT) - 1);
 800d2ec:	2209      	movs	r2, #9
 800d2ee:	68b9      	ldr	r1, [r7, #8]
 800d2f0:	480c      	ldr	r0, [pc, #48]	; (800d324 <svCLI_SetBypassFtn+0xc8>)
 800d2f2:	f000 fee3 	bl	800e0bc <strncpy>
		snCLI_PROMPT_LENGTH = strlen(szCLI_PROMPT);
 800d2f6:	480b      	ldr	r0, [pc, #44]	; (800d324 <svCLI_SetBypassFtn+0xc8>)
 800d2f8:	f7f2 ffd4 	bl	80002a4 <strlen>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	461a      	mov	r2, r3
 800d300:	4b0a      	ldr	r3, [pc, #40]	; (800d32c <svCLI_SetBypassFtn+0xd0>)
 800d302:	601a      	str	r2, [r3, #0]
		svBypass = pfnBypass;
 800d304:	4a06      	ldr	r2, [pc, #24]	; (800d320 <svCLI_SetBypassFtn+0xc4>)
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6013      	str	r3, [r2, #0]
		svExit = szExit;
 800d30a:	4a09      	ldr	r2, [pc, #36]	; (800d330 <svCLI_SetBypassFtn+0xd4>)
 800d30c:	79fb      	ldrb	r3, [r7, #7]
 800d30e:	7013      	strb	r3, [r2, #0]
		sbEnter = bEnter;
 800d310:	4a08      	ldr	r2, [pc, #32]	; (800d334 <svCLI_SetBypassFtn+0xd8>)
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	6013      	str	r3, [r2, #0]
 800d316:	e000      	b.n	800d31a <svCLI_SetBypassFtn+0xbe>
			return;
 800d318:	bf00      	nop
	}
}
 800d31a:	3718      	adds	r7, #24
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	20000e34 	.word	0x20000e34
 800d324:	20000054 	.word	0x20000054
 800d328:	0800eb44 	.word	0x0800eb44
 800d32c:	20000060 	.word	0x20000060
 800d330:	20000e38 	.word	0x20000e38
 800d334:	20000e3c 	.word	0x20000e3c
 800d338:	20000e1c 	.word	0x20000e1c
 800d33c:	20000c14 	.word	0x20000c14
 800d340:	0800ec14 	.word	0x0800ec14
 800d344:	20000e30 	.word	0x20000e30

0800d348 <svCLI_Handler>:

void svCLI_Handler(void)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
	if (sbFirst) {
		svCLI_Printf("\r\n%s", szCLI_PROMPT);
		sbFirst = 0;
	}
#endif	
	if (svGetChar) {
 800d34e:	4b92      	ldr	r3, [pc, #584]	; (800d598 <svCLI_Handler+0x250>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	2b00      	cmp	r3, #0
 800d354:	f000 8114 	beq.w	800d580 <svCLI_Handler+0x238>
		char bSkipPrompt = 0;
 800d358:	2300      	movs	r3, #0
 800d35a:	73fb      	strb	r3, [r7, #15]
		char szChar = svGetChar();
 800d35c:	4b8e      	ldr	r3, [pc, #568]	; (800d598 <svCLI_Handler+0x250>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4798      	blx	r3
 800d362:	4603      	mov	r3, r0
 800d364:	71fb      	strb	r3, [r7, #7]
		if ((szChar != 0) && (szChar != '\n')) {
 800d366:	79fb      	ldrb	r3, [r7, #7]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 8109 	beq.w	800d580 <svCLI_Handler+0x238>
 800d36e:	79fb      	ldrb	r3, [r7, #7]
 800d370:	2b0a      	cmp	r3, #10
 800d372:	f000 8105 	beq.w	800d580 <svCLI_Handler+0x238>
			if (szChar == '\r') {
 800d376:	79fb      	ldrb	r3, [r7, #7]
 800d378:	2b0d      	cmp	r3, #13
 800d37a:	d154      	bne.n	800d426 <svCLI_Handler+0xde>
				sbInEsc = 0;
 800d37c:	4b87      	ldr	r3, [pc, #540]	; (800d59c <svCLI_Handler+0x254>)
 800d37e:	2200      	movs	r2, #0
 800d380:	701a      	strb	r2, [r3, #0]
				svCLI_Printf("\r\n");
 800d382:	4887      	ldr	r0, [pc, #540]	; (800d5a0 <svCLI_Handler+0x258>)
 800d384:	f7ff fbb4 	bl	800caf0 <svCLI_Printf>
				if (scntCLIString > 0) {
 800d388:	4b86      	ldr	r3, [pc, #536]	; (800d5a4 <svCLI_Handler+0x25c>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d031      	beq.n	800d3f4 <svCLI_Handler+0xac>
					// Parse and Execute
					szCLIString[scntCLIString] = '\0';	// NULL Termination
 800d390:	4b84      	ldr	r3, [pc, #528]	; (800d5a4 <svCLI_Handler+0x25c>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a84      	ldr	r2, [pc, #528]	; (800d5a8 <svCLI_Handler+0x260>)
 800d396:	2100      	movs	r1, #0
 800d398:	54d1      	strb	r1, [r2, r3]
					// Save to history Buffer
					svCLIHandleHistory(CLI_HISTORY_ADD);					
 800d39a:	2000      	movs	r0, #0
 800d39c:	f7ff fd6c 	bl	800ce78 <svCLIHandleHistory>
					// Call Parser
					if (svBypass) {	// hellosmk 210225 added
 800d3a0:	4b82      	ldr	r3, [pc, #520]	; (800d5ac <svCLI_Handler+0x264>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d011      	beq.n	800d3cc <svCLI_Handler+0x84>
						bSkipPrompt = 1;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	73fb      	strb	r3, [r7, #15]
						szCLIString[scntCLIString] = '\r';
 800d3ac:	4b7d      	ldr	r3, [pc, #500]	; (800d5a4 <svCLI_Handler+0x25c>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4a7d      	ldr	r2, [pc, #500]	; (800d5a8 <svCLI_Handler+0x260>)
 800d3b2:	210d      	movs	r1, #13
 800d3b4:	54d1      	strb	r1, [r2, r3]
						szCLIString[scntCLIString+1] = '\0';
 800d3b6:	4b7b      	ldr	r3, [pc, #492]	; (800d5a4 <svCLI_Handler+0x25c>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	4a7a      	ldr	r2, [pc, #488]	; (800d5a8 <svCLI_Handler+0x260>)
 800d3be:	2100      	movs	r1, #0
 800d3c0:	54d1      	strb	r1, [r2, r3]
						svBypass(szCLIString);
 800d3c2:	4b7a      	ldr	r3, [pc, #488]	; (800d5ac <svCLI_Handler+0x264>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4878      	ldr	r0, [pc, #480]	; (800d5a8 <svCLI_Handler+0x260>)
 800d3c8:	4798      	blx	r3
 800d3ca:	e001      	b.n	800d3d0 <svCLI_Handler+0x88>
					}
					else {
						svCLI_ParsenExecute();
 800d3cc:	f7ff feb4 	bl	800d138 <svCLI_ParsenExecute>
					}
					scntCLIString = 0;	// Clean Up Char
 800d3d0:	4b74      	ldr	r3, [pc, #464]	; (800d5a4 <svCLI_Handler+0x25c>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	601a      	str	r2, [r3, #0]
					// clean up line string
					for (int i=0;i<MAX_CLI_CHARS;i++) {
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	60bb      	str	r3, [r7, #8]
 800d3da:	e007      	b.n	800d3ec <svCLI_Handler+0xa4>
						szCLIString[i] = '\0';
 800d3dc:	4a72      	ldr	r2, [pc, #456]	; (800d5a8 <svCLI_Handler+0x260>)
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	4413      	add	r3, r2
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	701a      	strb	r2, [r3, #0]
					for (int i=0;i<MAX_CLI_CHARS;i++) {
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	60bb      	str	r3, [r7, #8]
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	2b7f      	cmp	r3, #127	; 0x7f
 800d3f0:	ddf4      	ble.n	800d3dc <svCLI_Handler+0x94>
 800d3f2:	e010      	b.n	800d416 <svCLI_Handler+0xce>
					}
				}
				else if (sbEnter && svBypass) {
 800d3f4:	4b6e      	ldr	r3, [pc, #440]	; (800d5b0 <svCLI_Handler+0x268>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00c      	beq.n	800d416 <svCLI_Handler+0xce>
 800d3fc:	4b6b      	ldr	r3, [pc, #428]	; (800d5ac <svCLI_Handler+0x264>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d008      	beq.n	800d416 <svCLI_Handler+0xce>
					const char cszRet[2] = {'\n',0};
 800d404:	230a      	movs	r3, #10
 800d406:	80bb      	strh	r3, [r7, #4]
					svBypass((char*)cszRet);
 800d408:	4b68      	ldr	r3, [pc, #416]	; (800d5ac <svCLI_Handler+0x264>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	1d3a      	adds	r2, r7, #4
 800d40e:	4610      	mov	r0, r2
 800d410:	4798      	blx	r3
					bSkipPrompt = 1;
 800d412:	2301      	movs	r3, #1
 800d414:	73fb      	strb	r3, [r7, #15]
				}
				
				if (bSkipPrompt == 0) {
 800d416:	7bfb      	ldrb	r3, [r7, #15]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	f040 80b1 	bne.w	800d580 <svCLI_Handler+0x238>
					svCLI_Printf(szCLI_PROMPT);
 800d41e:	4865      	ldr	r0, [pc, #404]	; (800d5b4 <svCLI_Handler+0x26c>)
 800d420:	f7ff fb66 	bl	800caf0 <svCLI_Printf>
 800d424:	e0ac      	b.n	800d580 <svCLI_Handler+0x238>
				}
			}
			else if (svBypass && (szChar == svExit)) {
 800d426:	4b61      	ldr	r3, [pc, #388]	; (800d5ac <svCLI_Handler+0x264>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d019      	beq.n	800d462 <svCLI_Handler+0x11a>
 800d42e:	4b62      	ldr	r3, [pc, #392]	; (800d5b8 <svCLI_Handler+0x270>)
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	79fa      	ldrb	r2, [r7, #7]
 800d434:	429a      	cmp	r2, r3
 800d436:	d114      	bne.n	800d462 <svCLI_Handler+0x11a>
				// Exit Bypass mode
				if (0x11 == svExit) {
 800d438:	4b5f      	ldr	r3, [pc, #380]	; (800d5b8 <svCLI_Handler+0x270>)
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	2b11      	cmp	r3, #17
 800d43e:	d102      	bne.n	800d446 <svCLI_Handler+0xfe>
					svCLI_Printf("^Q");
 800d440:	485e      	ldr	r0, [pc, #376]	; (800d5bc <svCLI_Handler+0x274>)
 800d442:	f7ff fb55 	bl	800caf0 <svCLI_Printf>
				}
				svBypass(NULL);	// Notify Exit !!
 800d446:	4b59      	ldr	r3, [pc, #356]	; (800d5ac <svCLI_Handler+0x264>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	2000      	movs	r0, #0
 800d44c:	4798      	blx	r3
				svCLI_SetBypassFtn(NULL,NULL,NULL,FALSE);
 800d44e:	2300      	movs	r3, #0
 800d450:	2200      	movs	r2, #0
 800d452:	2100      	movs	r1, #0
 800d454:	2000      	movs	r0, #0
 800d456:	f7ff ff01 	bl	800d25c <svCLI_SetBypassFtn>
				sbInEsc = 0;
 800d45a:	4b50      	ldr	r3, [pc, #320]	; (800d59c <svCLI_Handler+0x254>)
 800d45c:	2200      	movs	r2, #0
 800d45e:	701a      	strb	r2, [r3, #0]
 800d460:	e08e      	b.n	800d580 <svCLI_Handler+0x238>
			}
			else if (svBypass && (szChar == 0X1A)) {		// Ctrl+Z
 800d462:	4b52      	ldr	r3, [pc, #328]	; (800d5ac <svCLI_Handler+0x264>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d014      	beq.n	800d494 <svCLI_Handler+0x14c>
 800d46a:	79fb      	ldrb	r3, [r7, #7]
 800d46c:	2b1a      	cmp	r3, #26
 800d46e:	d111      	bne.n	800d494 <svCLI_Handler+0x14c>
				bSkipPrompt = 1;
 800d470:	2301      	movs	r3, #1
 800d472:	73fb      	strb	r3, [r7, #15]
				szCLIString[scntCLIString] = 0X1A;	//Ctrl+z
 800d474:	4b4b      	ldr	r3, [pc, #300]	; (800d5a4 <svCLI_Handler+0x25c>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4a4b      	ldr	r2, [pc, #300]	; (800d5a8 <svCLI_Handler+0x260>)
 800d47a:	211a      	movs	r1, #26
 800d47c:	54d1      	strb	r1, [r2, r3]
				szCLIString[scntCLIString+1] = '\0';	// NULL Termination
 800d47e:	4b49      	ldr	r3, [pc, #292]	; (800d5a4 <svCLI_Handler+0x25c>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	3301      	adds	r3, #1
 800d484:	4a48      	ldr	r2, [pc, #288]	; (800d5a8 <svCLI_Handler+0x260>)
 800d486:	2100      	movs	r1, #0
 800d488:	54d1      	strb	r1, [r2, r3]
				svBypass(szCLIString);
 800d48a:	4b48      	ldr	r3, [pc, #288]	; (800d5ac <svCLI_Handler+0x264>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4846      	ldr	r0, [pc, #280]	; (800d5a8 <svCLI_Handler+0x260>)
 800d490:	4798      	blx	r3
 800d492:	e075      	b.n	800d580 <svCLI_Handler+0x238>
			}
			else {
				if (szChar == '\b')	{ // Back space
 800d494:	79fb      	ldrb	r3, [r7, #7]
 800d496:	2b08      	cmp	r3, #8
 800d498:	d118      	bne.n	800d4cc <svCLI_Handler+0x184>
					sbInEsc = 0;
 800d49a:	4b40      	ldr	r3, [pc, #256]	; (800d59c <svCLI_Handler+0x254>)
 800d49c:	2200      	movs	r2, #0
 800d49e:	701a      	strb	r2, [r3, #0]
					if (scntCLIString > 0) {
 800d4a0:	4b40      	ldr	r3, [pc, #256]	; (800d5a4 <svCLI_Handler+0x25c>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d06b      	beq.n	800d580 <svCLI_Handler+0x238>
						_svClearLine();
 800d4a8:	f7ff fcb0 	bl	800ce0c <_svClearLine>
						scntCLIString--;
 800d4ac:	4b3d      	ldr	r3, [pc, #244]	; (800d5a4 <svCLI_Handler+0x25c>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	4a3c      	ldr	r2, [pc, #240]	; (800d5a4 <svCLI_Handler+0x25c>)
 800d4b4:	6013      	str	r3, [r2, #0]
						szCLIString[scntCLIString] = '\0';	// NULL Termination
 800d4b6:	4b3b      	ldr	r3, [pc, #236]	; (800d5a4 <svCLI_Handler+0x25c>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	4a3b      	ldr	r2, [pc, #236]	; (800d5a8 <svCLI_Handler+0x260>)
 800d4bc:	2100      	movs	r1, #0
 800d4be:	54d1      	strb	r1, [r2, r3]
						svCLI_Printf("%s%s", szCLI_PROMPT, szCLIString);
 800d4c0:	4a39      	ldr	r2, [pc, #228]	; (800d5a8 <svCLI_Handler+0x260>)
 800d4c2:	493c      	ldr	r1, [pc, #240]	; (800d5b4 <svCLI_Handler+0x26c>)
 800d4c4:	483e      	ldr	r0, [pc, #248]	; (800d5c0 <svCLI_Handler+0x278>)
 800d4c6:	f7ff fb13 	bl	800caf0 <svCLI_Printf>
 800d4ca:	e059      	b.n	800d580 <svCLI_Handler+0x238>
					}
				}
				else if (szChar == '[') {	// ESC sequence started
 800d4cc:	79fb      	ldrb	r3, [r7, #7]
 800d4ce:	2b5b      	cmp	r3, #91	; 0x5b
 800d4d0:	d103      	bne.n	800d4da <svCLI_Handler+0x192>
					sbInEsc = 1;
 800d4d2:	4b32      	ldr	r3, [pc, #200]	; (800d59c <svCLI_Handler+0x254>)
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	701a      	strb	r2, [r3, #0]
 800d4d8:	e052      	b.n	800d580 <svCLI_Handler+0x238>
				}
				else if (_isPrintable(szChar)) {
 800d4da:	79fb      	ldrb	r3, [r7, #7]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7ff fbe5 	bl	800ccac <_isPrintable>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d04b      	beq.n	800d580 <svCLI_Handler+0x238>
					if (sbInEsc) {
 800d4e8:	4b2c      	ldr	r3, [pc, #176]	; (800d59c <svCLI_Handler+0x254>)
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d036      	beq.n	800d55e <svCLI_Handler+0x216>
						sbInEsc = 0;
 800d4f0:	4b2a      	ldr	r3, [pc, #168]	; (800d59c <svCLI_Handler+0x254>)
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	701a      	strb	r2, [r3, #0]
						if (snCLIHistoryCount > 0) {
 800d4f6:	4b33      	ldr	r3, [pc, #204]	; (800d5c4 <svCLI_Handler+0x27c>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	dd27      	ble.n	800d54e <svCLI_Handler+0x206>
							switch (szChar) {
 800d4fe:	79fb      	ldrb	r3, [r7, #7]
 800d500:	2b41      	cmp	r3, #65	; 0x41
 800d502:	d002      	beq.n	800d50a <svCLI_Handler+0x1c2>
 800d504:	2b42      	cmp	r3, #66	; 0x42
 800d506:	d011      	beq.n	800d52c <svCLI_Handler+0x1e4>
									// echo back
									scntCLIString = svCLI_Printf("%s", szCLIString);
									// echo back
									break;
								default:	// Do Nothing
									break;
 800d508:	e021      	b.n	800d54e <svCLI_Handler+0x206>
									svCLIHandleHistory(CLI_HISTORY_PREV);
 800d50a:	2002      	movs	r0, #2
 800d50c:	f7ff fcb4 	bl	800ce78 <svCLIHandleHistory>
									_svClearLine();
 800d510:	f7ff fc7c 	bl	800ce0c <_svClearLine>
									svCLI_Printf(szCLI_PROMPT);
 800d514:	4827      	ldr	r0, [pc, #156]	; (800d5b4 <svCLI_Handler+0x26c>)
 800d516:	f7ff faeb 	bl	800caf0 <svCLI_Printf>
									scntCLIString = svCLI_Printf("%s", szCLIString);
 800d51a:	4923      	ldr	r1, [pc, #140]	; (800d5a8 <svCLI_Handler+0x260>)
 800d51c:	482a      	ldr	r0, [pc, #168]	; (800d5c8 <svCLI_Handler+0x280>)
 800d51e:	f7ff fae7 	bl	800caf0 <svCLI_Printf>
 800d522:	4603      	mov	r3, r0
 800d524:	461a      	mov	r2, r3
 800d526:	4b1f      	ldr	r3, [pc, #124]	; (800d5a4 <svCLI_Handler+0x25c>)
 800d528:	601a      	str	r2, [r3, #0]
									break;
 800d52a:	e010      	b.n	800d54e <svCLI_Handler+0x206>
									svCLIHandleHistory(CLI_HISTORY_NEXT);
 800d52c:	2001      	movs	r0, #1
 800d52e:	f7ff fca3 	bl	800ce78 <svCLIHandleHistory>
									_svClearLine();
 800d532:	f7ff fc6b 	bl	800ce0c <_svClearLine>
									svCLI_Printf(szCLI_PROMPT);
 800d536:	481f      	ldr	r0, [pc, #124]	; (800d5b4 <svCLI_Handler+0x26c>)
 800d538:	f7ff fada 	bl	800caf0 <svCLI_Printf>
									scntCLIString = svCLI_Printf("%s", szCLIString);
 800d53c:	491a      	ldr	r1, [pc, #104]	; (800d5a8 <svCLI_Handler+0x260>)
 800d53e:	4822      	ldr	r0, [pc, #136]	; (800d5c8 <svCLI_Handler+0x280>)
 800d540:	f7ff fad6 	bl	800caf0 <svCLI_Printf>
 800d544:	4603      	mov	r3, r0
 800d546:	461a      	mov	r2, r3
 800d548:	4b16      	ldr	r3, [pc, #88]	; (800d5a4 <svCLI_Handler+0x25c>)
 800d54a:	601a      	str	r2, [r3, #0]
									break;
 800d54c:	bf00      	nop
							}
						}
						if (svCommit) {
 800d54e:	4b1f      	ldr	r3, [pc, #124]	; (800d5cc <svCLI_Handler+0x284>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d01c      	beq.n	800d590 <svCLI_Handler+0x248>
							svCommit();
 800d556:	4b1d      	ldr	r3, [pc, #116]	; (800d5cc <svCLI_Handler+0x284>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4798      	blx	r3
						}
						return;
 800d55c:	e018      	b.n	800d590 <svCLI_Handler+0x248>
					}
					if (scntCLIString < (MAX_CLI_CHARS-1)) {
 800d55e:	4b11      	ldr	r3, [pc, #68]	; (800d5a4 <svCLI_Handler+0x25c>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	2b7e      	cmp	r3, #126	; 0x7e
 800d564:	d80c      	bhi.n	800d580 <svCLI_Handler+0x238>
						// echo back
						svPutChar(szChar);
 800d566:	4b1a      	ldr	r3, [pc, #104]	; (800d5d0 <svCLI_Handler+0x288>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	79fa      	ldrb	r2, [r7, #7]
 800d56c:	4610      	mov	r0, r2
 800d56e:	4798      	blx	r3
						szCLIString[scntCLIString++] = szChar;
 800d570:	4b0c      	ldr	r3, [pc, #48]	; (800d5a4 <svCLI_Handler+0x25c>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	1c5a      	adds	r2, r3, #1
 800d576:	490b      	ldr	r1, [pc, #44]	; (800d5a4 <svCLI_Handler+0x25c>)
 800d578:	600a      	str	r2, [r1, #0]
 800d57a:	490b      	ldr	r1, [pc, #44]	; (800d5a8 <svCLI_Handler+0x260>)
 800d57c:	79fa      	ldrb	r2, [r7, #7]
 800d57e:	54ca      	strb	r2, [r1, r3]
					}
				}
			}
		}
	}
	if (svCommit) {
 800d580:	4b12      	ldr	r3, [pc, #72]	; (800d5cc <svCLI_Handler+0x284>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d004      	beq.n	800d592 <svCLI_Handler+0x24a>
		svCommit();
 800d588:	4b10      	ldr	r3, [pc, #64]	; (800d5cc <svCLI_Handler+0x284>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4798      	blx	r3
 800d58e:	e000      	b.n	800d592 <svCLI_Handler+0x24a>
						return;
 800d590:	bf00      	nop
	}
}
 800d592:	3710      	adds	r7, #16
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	20000e28 	.word	0x20000e28
 800d59c:	20000f40 	.word	0x20000f40
 800d5a0:	0800eb58 	.word	0x0800eb58
 800d5a4:	20000e1c 	.word	0x20000e1c
 800d5a8:	20000c14 	.word	0x20000c14
 800d5ac:	20000e34 	.word	0x20000e34
 800d5b0:	20000e3c 	.word	0x20000e3c
 800d5b4:	20000054 	.word	0x20000054
 800d5b8:	20000e38 	.word	0x20000e38
 800d5bc:	0800ec2c 	.word	0x0800ec2c
 800d5c0:	0800ec30 	.word	0x0800ec30
 800d5c4:	20000e14 	.word	0x20000e14
 800d5c8:	0800ec38 	.word	0x0800ec38
 800d5cc:	20000e30 	.word	0x20000e30
 800d5d0:	20000e2c 	.word	0x20000e2c

0800d5d4 <CLI_Help>:
// for CLI
#ifdef USE_CLI_FUNCTIONS
SVCLI_TABLE_ENTRY (HELP,"Help","Help : Show menu",CLI_Help);

static void CLI_Help(char* pArgLine, unsigned int nCount, unsigned int nFirst, unsigned int nSecond)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	607a      	str	r2, [r7, #4]
 800d5e0:	603b      	str	r3, [r7, #0]
	svCLI_ShowHelp();
 800d5e2:	f7ff fab1 	bl	800cb48 <svCLI_ShowHelp>
}
 800d5e6:	bf00      	nop
 800d5e8:	3710      	adds	r7, #16
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}

0800d5ee <svRingBuffer_GetCount>:
{
	return rb->size;
}

unsigned int svRingBuffer_GetCount(const svRingBuffer_t *rb)
{
 800d5ee:	b480      	push	{r7}
 800d5f0:	b085      	sub	sp, #20
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
	unsigned char *h, *t;
	// use temporal value to avoid corruption in between context-switching / Interrupt 
	h = rb->head;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	60fb      	str	r3, [r7, #12]
	t = rb->tail;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	689b      	ldr	r3, [r3, #8]
 800d600:	60bb      	str	r3, [r7, #8]
	if (h >= t)
 800d602:	68fa      	ldr	r2, [r7, #12]
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	429a      	cmp	r2, r3
 800d608:	d303      	bcc.n	800d612 <svRingBuffer_GetCount+0x24>
	  return (h - t);
 800d60a:	68fa      	ldr	r2, [r7, #12]
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	1ad3      	subs	r3, r2, r3
 800d610:	e009      	b.n	800d626 <svRingBuffer_GetCount+0x38>
	else
	  return (unsigned int)(rb->bufend - t + h - rb->buf);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	68da      	ldr	r2, [r3, #12]
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	1ad3      	subs	r3, r2, r3
 800d61a:	461a      	mov	r2, r3
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	441a      	add	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	1ad3      	subs	r3, r2, r3
}
 800d626:	4618      	mov	r0, r3
 800d628:	3714      	adds	r7, #20
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr

0800d632 <svRingBuffer_Reset>:

void svRingBuffer_Reset(svRingBuffer_t *rb)
{
 800d632:	b480      	push	{r7}
 800d634:	b083      	sub	sp, #12
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
	rb->head = rb->tail = rb->buf;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	609a      	str	r2, [r3, #8]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	689a      	ldr	r2, [r3, #8]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	605a      	str	r2, [r3, #4]
	rb->fOverflow = 0;		// Clear Flag
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2200      	movs	r2, #0
 800d64e:	615a      	str	r2, [r3, #20]
	rb->fTurnAround = 0;	// Clear Flag
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	619a      	str	r2, [r3, #24]
}
 800d656:	bf00      	nop
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <svRingBuffer_Push>:
{
	rb->fOverflow = 0;
}

int svRingBuffer_Push(svRingBuffer_t *rb, unsigned char data)
{
 800d662:	b480      	push	{r7}
 800d664:	b085      	sub	sp, #20
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
 800d66a:	460b      	mov	r3, r1
 800d66c:	70fb      	strb	r3, [r7, #3]
	int nRet;
	nRet = 0;
 800d66e:	2300      	movs	r3, #0
 800d670:	60fb      	str	r3, [r7, #12]
	*(rb->head) = data;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	78fa      	ldrb	r2, [r7, #3]
 800d678:	701a      	strb	r2, [r3, #0]
	rb->head++;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	1c5a      	adds	r2, r3, #1
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	605a      	str	r2, [r3, #4]
	if (rb->head == rb->bufend) {	// Wrap around
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	685a      	ldr	r2, [r3, #4]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	68db      	ldr	r3, [r3, #12]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d109      	bne.n	800d6a4 <svRingBuffer_Push+0x42>
	  rb->head = rb->buf;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	605a      	str	r2, [r3, #4]
		rb->fTurnAround = 1;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2201      	movs	r2, #1
 800d69c:	619a      	str	r2, [r3, #24]
		nRet = -1;
 800d69e:	f04f 33ff 	mov.w	r3, #4294967295
 800d6a2:	60fb      	str	r3, [r7, #12]
		// return -1;	// -- hellosmk 210512 to check overflow
	}
	if (rb->head == rb->tail) {		// Over flowed
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	685a      	ldr	r2, [r3, #4]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	689b      	ldr	r3, [r3, #8]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d105      	bne.n	800d6bc <svRingBuffer_Push+0x5a>
	  rb->fOverflow = 1;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	615a      	str	r2, [r3, #20]
		nRet = -2;
 800d6b6:	f06f 0301 	mvn.w	r3, #1
 800d6ba:	60fb      	str	r3, [r7, #12]
	}
	return nRet;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3714      	adds	r7, #20
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr

0800d6ca <svRingBuffer_Pop>:

unsigned char svRingBuffer_Pop(svRingBuffer_t *rb)
{
 800d6ca:	b480      	push	{r7}
 800d6cc:	b085      	sub	sp, #20
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	6078      	str	r0, [r7, #4]
	unsigned char byData;
	byData = *(rb->tail);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	689b      	ldr	r3, [r3, #8]
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	73fb      	strb	r3, [r7, #15]
	rb->tail++;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	1c5a      	adds	r2, r3, #1
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	609a      	str	r2, [r3, #8]
	if (rb->tail == rb->bufend)	// Wrap around
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	689a      	ldr	r2, [r3, #8]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d103      	bne.n	800d6f8 <svRingBuffer_Pop+0x2e>
	  rb->tail = rb->buf;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	609a      	str	r2, [r3, #8]
	return byData;
 800d6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3714      	adds	r7, #20
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr
	...

0800d708 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d708:	b580      	push	{r7, lr}
 800d70a:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800d70c:	4b05      	ldr	r3, [pc, #20]	; (800d724 <SysTick_Handler+0x1c>)
 800d70e:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d710:	f000 f98a 	bl	800da28 <xTaskGetSchedulerState>
 800d714:	4603      	mov	r3, r0
 800d716:	2b01      	cmp	r3, #1
 800d718:	d001      	beq.n	800d71e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d71a:	f000 f9a3 	bl	800da64 <xPortSysTickHandler>
  }
}
 800d71e:	bf00      	nop
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	e000e010 	.word	0xe000e010

0800d728 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b088      	sub	sp, #32
 800d72c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800d72e:	2300      	movs	r3, #0
 800d730:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d732:	4b7a      	ldr	r3, [pc, #488]	; (800d91c <xTaskIncrementTick+0x1f4>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	f040 80e5 	bne.w	800d906 <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d73c:	4b78      	ldr	r3, [pc, #480]	; (800d920 <xTaskIncrementTick+0x1f8>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	3301      	adds	r3, #1
 800d742:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800d744:	4a76      	ldr	r2, [pc, #472]	; (800d920 <xTaskIncrementTick+0x1f8>)
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d118      	bne.n	800d782 <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 800d750:	4b74      	ldr	r3, [pc, #464]	; (800d924 <xTaskIncrementTick+0x1fc>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d002      	beq.n	800d760 <xTaskIncrementTick+0x38>
 800d75a:	f000 f9d5 	bl	800db08 <ulSetInterruptMask>
 800d75e:	e7fe      	b.n	800d75e <xTaskIncrementTick+0x36>
 800d760:	4b70      	ldr	r3, [pc, #448]	; (800d924 <xTaskIncrementTick+0x1fc>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	617b      	str	r3, [r7, #20]
 800d766:	4b70      	ldr	r3, [pc, #448]	; (800d928 <xTaskIncrementTick+0x200>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4a6e      	ldr	r2, [pc, #440]	; (800d924 <xTaskIncrementTick+0x1fc>)
 800d76c:	6013      	str	r3, [r2, #0]
 800d76e:	4a6e      	ldr	r2, [pc, #440]	; (800d928 <xTaskIncrementTick+0x200>)
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	6013      	str	r3, [r2, #0]
 800d774:	4b6d      	ldr	r3, [pc, #436]	; (800d92c <xTaskIncrementTick+0x204>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	3301      	adds	r3, #1
 800d77a:	4a6c      	ldr	r2, [pc, #432]	; (800d92c <xTaskIncrementTick+0x204>)
 800d77c:	6013      	str	r3, [r2, #0]
 800d77e:	f000 f937 	bl	800d9f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800d782:	4b6b      	ldr	r3, [pc, #428]	; (800d930 <xTaskIncrementTick+0x208>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	69ba      	ldr	r2, [r7, #24]
 800d788:	429a      	cmp	r2, r3
 800d78a:	f0c0 80a7 	bcc.w	800d8dc <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d78e:	4b65      	ldr	r3, [pc, #404]	; (800d924 <xTaskIncrementTick+0x1fc>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d104      	bne.n	800d7a2 <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d798:	4b65      	ldr	r3, [pc, #404]	; (800d930 <xTaskIncrementTick+0x208>)
 800d79a:	f04f 32ff 	mov.w	r2, #4294967295
 800d79e:	601a      	str	r2, [r3, #0]
                    break;
 800d7a0:	e09c      	b.n	800d8dc <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7a2:	4b60      	ldr	r3, [pc, #384]	; (800d924 <xTaskIncrementTick+0x1fc>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800d7b2:	69ba      	ldr	r2, [r7, #24]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d203      	bcs.n	800d7c2 <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800d7ba:	4a5d      	ldr	r2, [pc, #372]	; (800d930 <xTaskIncrementTick+0x208>)
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800d7c0:	e08c      	b.n	800d8dc <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	695b      	ldr	r3, [r3, #20]
 800d7c6:	60bb      	str	r3, [r7, #8]
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	689b      	ldr	r3, [r3, #8]
 800d7cc:	693a      	ldr	r2, [r7, #16]
 800d7ce:	68d2      	ldr	r2, [r2, #12]
 800d7d0:	609a      	str	r2, [r3, #8]
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	68db      	ldr	r3, [r3, #12]
 800d7d6:	693a      	ldr	r2, [r7, #16]
 800d7d8:	6892      	ldr	r2, [r2, #8]
 800d7da:	605a      	str	r2, [r3, #4]
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	685a      	ldr	r2, [r3, #4]
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	3304      	adds	r3, #4
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d103      	bne.n	800d7f0 <xTaskIncrementTick+0xc8>
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	68da      	ldr	r2, [r3, #12]
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	605a      	str	r2, [r3, #4]
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	615a      	str	r2, [r3, #20]
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	1e5a      	subs	r2, r3, #1
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d804:	2b00      	cmp	r3, #0
 800d806:	d01e      	beq.n	800d846 <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d80c:	607b      	str	r3, [r7, #4]
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	69db      	ldr	r3, [r3, #28]
 800d812:	693a      	ldr	r2, [r7, #16]
 800d814:	6a12      	ldr	r2, [r2, #32]
 800d816:	609a      	str	r2, [r3, #8]
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	6a1b      	ldr	r3, [r3, #32]
 800d81c:	693a      	ldr	r2, [r7, #16]
 800d81e:	69d2      	ldr	r2, [r2, #28]
 800d820:	605a      	str	r2, [r3, #4]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	685a      	ldr	r2, [r3, #4]
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	3318      	adds	r3, #24
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d103      	bne.n	800d836 <xTaskIncrementTick+0x10e>
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	6a1a      	ldr	r2, [r3, #32]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	605a      	str	r2, [r3, #4]
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	2200      	movs	r2, #0
 800d83a:	629a      	str	r2, [r3, #40]	; 0x28
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	1e5a      	subs	r2, r3, #1
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d84a:	4b3a      	ldr	r3, [pc, #232]	; (800d934 <xTaskIncrementTick+0x20c>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d903      	bls.n	800d85a <xTaskIncrementTick+0x132>
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d856:	4a37      	ldr	r2, [pc, #220]	; (800d934 <xTaskIncrementTick+0x20c>)
 800d858:	6013      	str	r3, [r2, #0]
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d85e:	4936      	ldr	r1, [pc, #216]	; (800d938 <xTaskIncrementTick+0x210>)
 800d860:	4613      	mov	r3, r2
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	4413      	add	r3, r2
 800d866:	009b      	lsls	r3, r3, #2
 800d868:	440b      	add	r3, r1
 800d86a:	3304      	adds	r3, #4
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	603b      	str	r3, [r7, #0]
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	683a      	ldr	r2, [r7, #0]
 800d874:	609a      	str	r2, [r3, #8]
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	689a      	ldr	r2, [r3, #8]
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	60da      	str	r2, [r3, #12]
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	693a      	ldr	r2, [r7, #16]
 800d884:	3204      	adds	r2, #4
 800d886:	605a      	str	r2, [r3, #4]
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	1d1a      	adds	r2, r3, #4
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	609a      	str	r2, [r3, #8]
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d894:	4613      	mov	r3, r2
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	4413      	add	r3, r2
 800d89a:	009b      	lsls	r3, r3, #2
 800d89c:	4a26      	ldr	r2, [pc, #152]	; (800d938 <xTaskIncrementTick+0x210>)
 800d89e:	441a      	add	r2, r3
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	615a      	str	r2, [r3, #20]
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a8:	4923      	ldr	r1, [pc, #140]	; (800d938 <xTaskIncrementTick+0x210>)
 800d8aa:	4613      	mov	r3, r2
 800d8ac:	009b      	lsls	r3, r3, #2
 800d8ae:	4413      	add	r3, r2
 800d8b0:	009b      	lsls	r3, r3, #2
 800d8b2:	440b      	add	r3, r1
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	1c59      	adds	r1, r3, #1
 800d8b8:	481f      	ldr	r0, [pc, #124]	; (800d938 <xTaskIncrementTick+0x210>)
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	4413      	add	r3, r2
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	4403      	add	r3, r0
 800d8c4:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ca:	4b1c      	ldr	r3, [pc, #112]	; (800d93c <xTaskIncrementTick+0x214>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	f67f af5c 	bls.w	800d78e <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8da:	e758      	b.n	800d78e <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d8dc:	4b17      	ldr	r3, [pc, #92]	; (800d93c <xTaskIncrementTick+0x214>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8e2:	4915      	ldr	r1, [pc, #84]	; (800d938 <xTaskIncrementTick+0x210>)
 800d8e4:	4613      	mov	r3, r2
 800d8e6:	009b      	lsls	r3, r3, #2
 800d8e8:	4413      	add	r3, r2
 800d8ea:	009b      	lsls	r3, r3, #2
 800d8ec:	440b      	add	r3, r1
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d901      	bls.n	800d8f8 <xTaskIncrementTick+0x1d0>
            {
                xSwitchRequired = pdTRUE;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800d8f8:	4b11      	ldr	r3, [pc, #68]	; (800d940 <xTaskIncrementTick+0x218>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d007      	beq.n	800d910 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 800d900:	2301      	movs	r3, #1
 800d902:	61fb      	str	r3, [r7, #28]
 800d904:	e004      	b.n	800d910 <xTaskIncrementTick+0x1e8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800d906:	4b0f      	ldr	r3, [pc, #60]	; (800d944 <xTaskIncrementTick+0x21c>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	3301      	adds	r3, #1
 800d90c:	4a0d      	ldr	r2, [pc, #52]	; (800d944 <xTaskIncrementTick+0x21c>)
 800d90e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800d910:	69fb      	ldr	r3, [r7, #28]
}
 800d912:	4618      	mov	r0, r3
 800d914:	3720      	adds	r7, #32
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	200013cc 	.word	0x200013cc
 800d920:	200013b0 	.word	0x200013b0
 800d924:	200013a8 	.word	0x200013a8
 800d928:	200013ac 	.word	0x200013ac
 800d92c:	200013c4 	.word	0x200013c4
 800d930:	200013c8 	.word	0x200013c8
 800d934:	200013b4 	.word	0x200013b4
 800d938:	20000f48 	.word	0x20000f48
 800d93c:	20000f44 	.word	0x20000f44
 800d940:	200013c0 	.word	0x200013c0
 800d944:	200013bc 	.word	0x200013bc

0800d948 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d94e:	4b23      	ldr	r3, [pc, #140]	; (800d9dc <vTaskSwitchContext+0x94>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d003      	beq.n	800d95e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800d956:	4b22      	ldr	r3, [pc, #136]	; (800d9e0 <vTaskSwitchContext+0x98>)
 800d958:	2201      	movs	r2, #1
 800d95a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800d95c:	e039      	b.n	800d9d2 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800d95e:	4b20      	ldr	r3, [pc, #128]	; (800d9e0 <vTaskSwitchContext+0x98>)
 800d960:	2200      	movs	r2, #0
 800d962:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d964:	4b1f      	ldr	r3, [pc, #124]	; (800d9e4 <vTaskSwitchContext+0x9c>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	607b      	str	r3, [r7, #4]
 800d96a:	e008      	b.n	800d97e <vTaskSwitchContext+0x36>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d102      	bne.n	800d978 <vTaskSwitchContext+0x30>
 800d972:	f000 f8c9 	bl	800db08 <ulSetInterruptMask>
 800d976:	e7fe      	b.n	800d976 <vTaskSwitchContext+0x2e>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	3b01      	subs	r3, #1
 800d97c:	607b      	str	r3, [r7, #4]
 800d97e:	491a      	ldr	r1, [pc, #104]	; (800d9e8 <vTaskSwitchContext+0xa0>)
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	4613      	mov	r3, r2
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	4413      	add	r3, r2
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	440b      	add	r3, r1
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d0ec      	beq.n	800d96c <vTaskSwitchContext+0x24>
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	4613      	mov	r3, r2
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	4413      	add	r3, r2
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	4a12      	ldr	r2, [pc, #72]	; (800d9e8 <vTaskSwitchContext+0xa0>)
 800d99e:	4413      	add	r3, r2
 800d9a0:	603b      	str	r3, [r7, #0]
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	685a      	ldr	r2, [r3, #4]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	605a      	str	r2, [r3, #4]
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	685a      	ldr	r2, [r3, #4]
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	3308      	adds	r3, #8
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d104      	bne.n	800d9c2 <vTaskSwitchContext+0x7a>
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	685a      	ldr	r2, [r3, #4]
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	605a      	str	r2, [r3, #4]
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	4a08      	ldr	r2, [pc, #32]	; (800d9ec <vTaskSwitchContext+0xa4>)
 800d9ca:	6013      	str	r3, [r2, #0]
 800d9cc:	4a05      	ldr	r2, [pc, #20]	; (800d9e4 <vTaskSwitchContext+0x9c>)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6013      	str	r3, [r2, #0]
}
 800d9d2:	bf00      	nop
 800d9d4:	3708      	adds	r7, #8
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	200013cc 	.word	0x200013cc
 800d9e0:	200013c0 	.word	0x200013c0
 800d9e4:	200013b4 	.word	0x200013b4
 800d9e8:	20000f48 	.word	0x20000f48
 800d9ec:	20000f44 	.word	0x20000f44

0800d9f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9f4:	4b0a      	ldr	r3, [pc, #40]	; (800da20 <prvResetNextTaskUnblockTime+0x30>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d104      	bne.n	800da08 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800d9fe:	4b09      	ldr	r3, [pc, #36]	; (800da24 <prvResetNextTaskUnblockTime+0x34>)
 800da00:	f04f 32ff 	mov.w	r2, #4294967295
 800da04:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800da06:	e005      	b.n	800da14 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800da08:	4b05      	ldr	r3, [pc, #20]	; (800da20 <prvResetNextTaskUnblockTime+0x30>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a04      	ldr	r2, [pc, #16]	; (800da24 <prvResetNextTaskUnblockTime+0x34>)
 800da12:	6013      	str	r3, [r2, #0]
}
 800da14:	bf00      	nop
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	200013a8 	.word	0x200013a8
 800da24:	200013c8 	.word	0x200013c8

0800da28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800da2e:	4b0b      	ldr	r3, [pc, #44]	; (800da5c <xTaskGetSchedulerState+0x34>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d102      	bne.n	800da3c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800da36:	2301      	movs	r3, #1
 800da38:	607b      	str	r3, [r7, #4]
 800da3a:	e008      	b.n	800da4e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da3c:	4b08      	ldr	r3, [pc, #32]	; (800da60 <xTaskGetSchedulerState+0x38>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d102      	bne.n	800da4a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800da44:	2302      	movs	r3, #2
 800da46:	607b      	str	r3, [r7, #4]
 800da48:	e001      	b.n	800da4e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800da4a:	2300      	movs	r3, #0
 800da4c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800da4e:	687b      	ldr	r3, [r7, #4]
    }
 800da50:	4618      	mov	r0, r3
 800da52:	370c      	adds	r7, #12
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr
 800da5c:	200013b8 	.word	0x200013b8
 800da60:	200013cc 	.word	0x200013cc

0800da64 <xPortSysTickHandler>:
    }
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800da6a:	f000 f84d 	bl	800db08 <ulSetInterruptMask>
 800da6e:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800da70:	f7ff fe5a 	bl	800d728 <xTaskIncrementTick>
 800da74:	4603      	mov	r3, r0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d003      	beq.n	800da82 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800da7a:	4b05      	ldr	r3, [pc, #20]	; (800da90 <xPortSysTickHandler+0x2c>)
 800da7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da80:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 f84d 	bl	800db22 <vClearInterruptMask>
}
 800da88:	bf00      	nop
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	e000ed04 	.word	0xe000ed04

0800da94 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	699b      	ldr	r3, [r3, #24]
 800daa0:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	3b02      	subs	r3, #2
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800daaa:	7afb      	ldrb	r3, [r7, #11]
 800daac:	2b02      	cmp	r3, #2
 800daae:	d102      	bne.n	800dab6 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800dab0:	f000 f80e 	bl	800dad0 <vRestoreContextOfFirstTask>
            break;
 800dab4:	e002      	b.n	800dabc <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800dab6:	f000 f827 	bl	800db08 <ulSetInterruptMask>
 800daba:	e7fe      	b.n	800daba <vPortSVCHandler_C+0x26>
    }
}
 800dabc:	bf00      	nop
 800dabe:	3710      	adds	r7, #16
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}
	...

0800dad0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800dad0:	4a0b      	ldr	r2, [pc, #44]	; (800db00 <pxCurrentTCBConst2>)
 800dad2:	6811      	ldr	r1, [r2, #0]
 800dad4:	6808      	ldr	r0, [r1, #0]
 800dad6:	c806      	ldmia	r0!, {r1, r2}
 800dad8:	f381 880b 	msr	PSPLIM, r1
 800dadc:	2102      	movs	r1, #2
 800dade:	f381 8814 	msr	CONTROL, r1
 800dae2:	3020      	adds	r0, #32
 800dae4:	f380 8809 	msr	PSP, r0
 800dae8:	f3bf 8f6f 	isb	sy
 800daec:	f04f 0000 	mov.w	r0, #0
 800daf0:	f380 8811 	msr	BASEPRI, r0
 800daf4:	4710      	bx	r2
 800daf6:	bf00      	nop
 800daf8:	f3af 8000 	nop.w
 800dafc:	f3af 8000 	nop.w

0800db00 <pxCurrentTCBConst2>:
 800db00:	20000f44 	.word	0x20000f44
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800db04:	bf00      	nop
 800db06:	bf00      	nop

0800db08 <ulSetInterruptMask>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800db08:	f3ef 8011 	mrs	r0, BASEPRI
 800db0c:	f04f 0150 	mov.w	r1, #80	; 0x50
 800db10:	f381 8811 	msr	BASEPRI, r1
 800db14:	f3bf 8f4f 	dsb	sy
 800db18:	f3bf 8f6f 	isb	sy
 800db1c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800db1e:	bf00      	nop
 800db20:	4618      	mov	r0, r3

0800db22 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800db22:	f380 8811 	msr	BASEPRI, r0
 800db26:	f3bf 8f4f 	dsb	sy
 800db2a:	f3bf 8f6f 	isb	sy
 800db2e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800db30:	bf00      	nop
	...

0800db40 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800db40:	f3ef 8009 	mrs	r0, PSP
 800db44:	f3ef 820b 	mrs	r2, PSPLIM
 800db48:	4673      	mov	r3, lr
 800db4a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800db4e:	4a10      	ldr	r2, [pc, #64]	; (800db90 <pxCurrentTCBConst>)
 800db50:	6811      	ldr	r1, [r2, #0]
 800db52:	6008      	str	r0, [r1, #0]
 800db54:	f04f 0050 	mov.w	r0, #80	; 0x50
 800db58:	f380 8811 	msr	BASEPRI, r0
 800db5c:	f3bf 8f4f 	dsb	sy
 800db60:	f3bf 8f6f 	isb	sy
 800db64:	f7ff fef0 	bl	800d948 <vTaskSwitchContext>
 800db68:	f04f 0000 	mov.w	r0, #0
 800db6c:	f380 8811 	msr	BASEPRI, r0
 800db70:	4a07      	ldr	r2, [pc, #28]	; (800db90 <pxCurrentTCBConst>)
 800db72:	6811      	ldr	r1, [r2, #0]
 800db74:	6808      	ldr	r0, [r1, #0]
 800db76:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800db7a:	f382 880b 	msr	PSPLIM, r2
 800db7e:	f380 8809 	msr	PSP, r0
 800db82:	4718      	bx	r3
 800db84:	f3af 8000 	nop.w
 800db88:	f3af 8000 	nop.w
 800db8c:	f3af 8000 	nop.w

0800db90 <pxCurrentTCBConst>:
 800db90:	20000f44 	.word	0x20000f44
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800db94:	bf00      	nop
 800db96:	bf00      	nop
	...

0800dba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800dba0:	f01e 0f04 	tst.w	lr, #4
 800dba4:	bf0c      	ite	eq
 800dba6:	f3ef 8008 	mrseq	r0, MSP
 800dbaa:	f3ef 8009 	mrsne	r0, PSP
 800dbae:	4904      	ldr	r1, [pc, #16]	; (800dbc0 <svchandler_address_const>)
 800dbb0:	4708      	bx	r1
 800dbb2:	bf00      	nop
 800dbb4:	f3af 8000 	nop.w
 800dbb8:	f3af 8000 	nop.w
 800dbbc:	f3af 8000 	nop.w

0800dbc0 <svchandler_address_const>:
 800dbc0:	0800da95 	.word	0x0800da95
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800dbc4:	bf00      	nop
 800dbc6:	bf00      	nop

0800dbc8 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d005      	beq.n	800dbe6 <lwrb_init+0x1e>
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d002      	beq.n	800dbe6 <lwrb_init+0x1e>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <lwrb_init+0x22>
        return 0;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	e00b      	b.n	800dc02 <lwrb_init+0x3a>
    }

    BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
 800dbea:	2214      	movs	r2, #20
 800dbec:	2100      	movs	r1, #0
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	f000 fa5c 	bl	800e0ac <memset>

    buff->size = size;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	68ba      	ldr	r2, [r7, #8]
 800dbfe:	601a      	str	r2, [r3, #0]
#if LWRB_USE_MAGIC
    buff->magic1 = BUF_MAGIC1;
    buff->magic2 = BUF_MAGIC2;
#endif /* LWRB_USE_MAGIC */

    return 1;
 800dc00:	2301      	movs	r3, #1
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3710      	adds	r7, #16
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Buffer handle
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(LWRB_VOLATILE lwrb_t* buff, lwrb_evt_fn evt_fn) {
 800dc0a:	b480      	push	{r7}
 800dc0c:	b083      	sub	sp, #12
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
 800dc12:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00a      	beq.n	800dc30 <lwrb_set_evt_fn+0x26>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d006      	beq.n	800dc30 <lwrb_set_evt_fn+0x26>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d002      	beq.n	800dc30 <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	611a      	str	r2, [r3, #16]
    }
}
 800dc30:	bf00      	nop
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr

0800dc3c <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b088      	sub	sp, #32
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	61bb      	str	r3, [r7, #24]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00d      	beq.n	800dc6e <lwrb_write+0x32>
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d009      	beq.n	800dc6e <lwrb_write+0x32>
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d005      	beq.n	800dc6e <lwrb_write+0x32>
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d002      	beq.n	800dc6e <lwrb_write+0x32>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d101      	bne.n	800dc72 <lwrb_write+0x36>
        return 0;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	e059      	b.n	800dd26 <lwrb_write+0xea>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 800dc72:	68f8      	ldr	r0, [r7, #12]
 800dc74:	f000 f85b 	bl	800dd2e <lwrb_get_free>
 800dc78:	61f8      	str	r0, [r7, #28]

		if (free < btw) {
 800dc7a:	69fa      	ldr	r2, [r7, #28]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d20d      	bcs.n	800dc9e <lwrb_write+0x62>
			BUF_SEND_EVT(buff, LWRB_EVT_FULL, free);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	691b      	ldr	r3, [r3, #16]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d005      	beq.n	800dc96 <lwrb_write+0x5a>
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	691b      	ldr	r3, [r3, #16]
 800dc8e:	69fa      	ldr	r2, [r7, #28]
 800dc90:	2102      	movs	r1, #2
 800dc92:	68f8      	ldr	r0, [r7, #12]
 800dc94:	4798      	blx	r3
			free = lwrb_get_free(buff);
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f000 f849 	bl	800dd2e <lwrb_get_free>
 800dc9c:	61f8      	str	r0, [r7, #28]
		}
		
    btw = BUF_MIN(free, btw);
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	4293      	cmp	r3, r2
 800dca4:	bf28      	it	cs
 800dca6:	4613      	movcs	r3, r2
 800dca8:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d101      	bne.n	800dcb4 <lwrb_write+0x78>
        return 0;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	e038      	b.n	800dd26 <lwrb_write+0xea>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	685a      	ldr	r2, [r3, #4]
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	68db      	ldr	r3, [r3, #12]
 800dcbc:	1ad3      	subs	r3, r2, r3
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	bf28      	it	cs
 800dcc4:	4613      	movcs	r3, r2
 800dcc6:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	4413      	add	r3, r2
 800dcd2:	697a      	ldr	r2, [r7, #20]
 800dcd4:	69b9      	ldr	r1, [r7, #24]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f000 fa40 	bl	800e15c <memcpy>
    buff->w += tocopy;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	68da      	ldr	r2, [r3, #12]
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	441a      	add	r2, r3
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	60da      	str	r2, [r3, #12]
    btw -= tocopy;
 800dce8:	687a      	ldr	r2, [r7, #4]
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	1ad3      	subs	r3, r2, r3
 800dcee:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d00b      	beq.n	800dd0e <lwrb_write+0xd2>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	6818      	ldr	r0, [r3, #0]
 800dcfa:	69ba      	ldr	r2, [r7, #24]
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	4413      	add	r3, r2
 800dd00:	687a      	ldr	r2, [r7, #4]
 800dd02:	4619      	mov	r1, r3
 800dd04:	f000 fa2a 	bl	800e15c <memcpy>
        buff->w = btw;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	68da      	ldr	r2, [r3, #12]
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d302      	bcc.n	800dd20 <lwrb_write+0xe4>
        buff->w = 0;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	60da      	str	r2, [r3, #12]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
    return tocopy + btw;
 800dd20:	697a      	ldr	r2, [r7, #20]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4413      	add	r3, r2
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3720      	adds	r7, #32
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 800dd2e:	b480      	push	{r7}
 800dd30:	b087      	sub	sp, #28
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d007      	beq.n	800dd4c <lwrb_get_free+0x1e>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d003      	beq.n	800dd4c <lwrb_get_free+0x1e>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d101      	bne.n	800dd50 <lwrb_get_free+0x22>
        return 0;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	e01f      	b.n	800dd90 <lwrb_get_free+0x62>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	68db      	ldr	r3, [r3, #12]
 800dd54:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800dd5c:	693a      	ldr	r2, [r7, #16]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d103      	bne.n	800dd6c <lwrb_get_free+0x3e>
        size = buff->size;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	617b      	str	r3, [r7, #20]
 800dd6a:	e00f      	b.n	800dd8c <lwrb_get_free+0x5e>
    } else if (r > w) {
 800dd6c:	68fa      	ldr	r2, [r7, #12]
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d904      	bls.n	800dd7e <lwrb_get_free+0x50>
        size = r - w;
 800dd74:	68fa      	ldr	r2, [r7, #12]
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	617b      	str	r3, [r7, #20]
 800dd7c:	e006      	b.n	800dd8c <lwrb_get_free+0x5e>
    } else {
        size = buff->size - (w - r);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	685a      	ldr	r2, [r3, #4]
 800dd82:	68f9      	ldr	r1, [r7, #12]
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	1acb      	subs	r3, r1, r3
 800dd88:	4413      	add	r3, r2
 800dd8a:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	3b01      	subs	r3, #1
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	371c      	adds	r7, #28
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 800dd9c:	b480      	push	{r7}
 800dd9e:	b087      	sub	sp, #28
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d007      	beq.n	800ddba <lwrb_get_full+0x1e>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d003      	beq.n	800ddba <lwrb_get_full+0x1e>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d101      	bne.n	800ddbe <lwrb_get_full+0x22>
        return 0;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	e01d      	b.n	800ddfa <lwrb_get_full+0x5e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	68db      	ldr	r3, [r3, #12]
 800ddc2:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	689b      	ldr	r3, [r3, #8]
 800ddc8:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 800ddca:	693a      	ldr	r2, [r7, #16]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d102      	bne.n	800ddd8 <lwrb_get_full+0x3c>
        size = 0;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	617b      	str	r3, [r7, #20]
 800ddd6:	e00f      	b.n	800ddf8 <lwrb_get_full+0x5c>
    } else if (w > r) {
 800ddd8:	693a      	ldr	r2, [r7, #16]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d904      	bls.n	800ddea <lwrb_get_full+0x4e>
        size = w - r;
 800dde0:	693a      	ldr	r2, [r7, #16]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	1ad3      	subs	r3, r2, r3
 800dde6:	617b      	str	r3, [r7, #20]
 800dde8:	e006      	b.n	800ddf8 <lwrb_get_full+0x5c>
    } else {
        size = buff->size - (r - w);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	685a      	ldr	r2, [r3, #4]
 800ddee:	6939      	ldr	r1, [r7, #16]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	1acb      	subs	r3, r1, r3
 800ddf4:	4413      	add	r3, r2
 800ddf6:	617b      	str	r3, [r7, #20]
    }
    return size;
 800ddf8:	697b      	ldr	r3, [r7, #20]
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	371c      	adds	r7, #28
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr

0800de06 <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 800de06:	b480      	push	{r7}
 800de08:	b083      	sub	sp, #12
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d007      	beq.n	800de24 <lwrb_get_linear_block_read_address+0x1e>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d003      	beq.n	800de24 <lwrb_get_linear_block_read_address+0x1e>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d101      	bne.n	800de28 <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 800de24:	2300      	movs	r3, #0
 800de26:	e004      	b.n	800de32 <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	4413      	add	r3, r2
}
 800de32:	4618      	mov	r0, r3
 800de34:	370c      	adds	r7, #12
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr

0800de3e <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 800de3e:	b480      	push	{r7}
 800de40:	b087      	sub	sp, #28
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d007      	beq.n	800de5c <lwrb_get_linear_block_read_length+0x1e>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d003      	beq.n	800de5c <lwrb_get_linear_block_read_length+0x1e>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d101      	bne.n	800de60 <lwrb_get_linear_block_read_length+0x22>
        return 0;
 800de5c:	2300      	movs	r3, #0
 800de5e:	e01b      	b.n	800de98 <lwrb_get_linear_block_read_length+0x5a>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	613b      	str	r3, [r7, #16]
    r = buff->r;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 800de6c:	693a      	ldr	r2, [r7, #16]
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	429a      	cmp	r2, r3
 800de72:	d904      	bls.n	800de7e <lwrb_get_linear_block_read_length+0x40>
        len = w - r;
 800de74:	693a      	ldr	r2, [r7, #16]
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	1ad3      	subs	r3, r2, r3
 800de7a:	617b      	str	r3, [r7, #20]
 800de7c:	e00b      	b.n	800de96 <lwrb_get_linear_block_read_length+0x58>
    } else if (r > w) {
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	693b      	ldr	r3, [r7, #16]
 800de82:	429a      	cmp	r2, r3
 800de84:	d905      	bls.n	800de92 <lwrb_get_linear_block_read_length+0x54>
        len = buff->size - r;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	685a      	ldr	r2, [r3, #4]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	1ad3      	subs	r3, r2, r3
 800de8e:	617b      	str	r3, [r7, #20]
 800de90:	e001      	b.n	800de96 <lwrb_get_linear_block_read_length+0x58>
    } else {
        len = 0;
 800de92:	2300      	movs	r3, #0
 800de94:	617b      	str	r3, [r7, #20]
    }
    return len;
 800de96:	697b      	ldr	r3, [r7, #20]
}
 800de98:	4618      	mov	r0, r3
 800de9a:	371c      	adds	r7, #28
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr

0800dea4 <lwrb_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d00a      	beq.n	800deca <lwrb_skip+0x26>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d006      	beq.n	800deca <lwrb_skip+0x26>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d002      	beq.n	800deca <lwrb_skip+0x26>
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d101      	bne.n	800dece <lwrb_skip+0x2a>
        return 0;
 800deca:	2300      	movs	r3, #0
 800decc:	e01d      	b.n	800df0a <lwrb_skip+0x66>
    }

    full = lwrb_get_full(buff);
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f7ff ff64 	bl	800dd9c <lwrb_get_full>
 800ded4:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);
 800ded6:	683a      	ldr	r2, [r7, #0]
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	4293      	cmp	r3, r2
 800dedc:	bf28      	it	cs
 800dede:	4613      	movcs	r3, r2
 800dee0:	603b      	str	r3, [r7, #0]
    buff->r += len;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	689a      	ldr	r2, [r3, #8]
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	441a      	add	r2, r3
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	609a      	str	r2, [r3, #8]
    if (buff->r >= buff->size) {
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	689a      	ldr	r2, [r3, #8]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	429a      	cmp	r2, r3
 800def8:	d306      	bcc.n	800df08 <lwrb_skip+0x64>
        buff->r -= buff->size;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	689a      	ldr	r2, [r3, #8]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	1ad2      	subs	r2, r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	609a      	str	r2, [r3, #8]
    }
    //BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
    return len;
 800df08:	683b      	ldr	r3, [r7, #0]
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
	...

0800df14 <sbrk_aligned>:
 800df14:	b570      	push	{r4, r5, r6, lr}
 800df16:	4e0e      	ldr	r6, [pc, #56]	; (800df50 <sbrk_aligned+0x3c>)
 800df18:	460c      	mov	r4, r1
 800df1a:	4605      	mov	r5, r0
 800df1c:	6831      	ldr	r1, [r6, #0]
 800df1e:	b911      	cbnz	r1, 800df26 <sbrk_aligned+0x12>
 800df20:	f000 f8e0 	bl	800e0e4 <_sbrk_r>
 800df24:	6030      	str	r0, [r6, #0]
 800df26:	4621      	mov	r1, r4
 800df28:	4628      	mov	r0, r5
 800df2a:	f000 f8db 	bl	800e0e4 <_sbrk_r>
 800df2e:	1c43      	adds	r3, r0, #1
 800df30:	d00a      	beq.n	800df48 <sbrk_aligned+0x34>
 800df32:	1cc4      	adds	r4, r0, #3
 800df34:	f024 0403 	bic.w	r4, r4, #3
 800df38:	42a0      	cmp	r0, r4
 800df3a:	d007      	beq.n	800df4c <sbrk_aligned+0x38>
 800df3c:	1a21      	subs	r1, r4, r0
 800df3e:	4628      	mov	r0, r5
 800df40:	f000 f8d0 	bl	800e0e4 <_sbrk_r>
 800df44:	3001      	adds	r0, #1
 800df46:	d101      	bne.n	800df4c <sbrk_aligned+0x38>
 800df48:	f04f 34ff 	mov.w	r4, #4294967295
 800df4c:	4620      	mov	r0, r4
 800df4e:	bd70      	pop	{r4, r5, r6, pc}
 800df50:	200013d4 	.word	0x200013d4

0800df54 <_malloc_r>:
 800df54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df58:	1ccd      	adds	r5, r1, #3
 800df5a:	4607      	mov	r7, r0
 800df5c:	f025 0503 	bic.w	r5, r5, #3
 800df60:	3508      	adds	r5, #8
 800df62:	2d0c      	cmp	r5, #12
 800df64:	bf38      	it	cc
 800df66:	250c      	movcc	r5, #12
 800df68:	2d00      	cmp	r5, #0
 800df6a:	db01      	blt.n	800df70 <_malloc_r+0x1c>
 800df6c:	42a9      	cmp	r1, r5
 800df6e:	d905      	bls.n	800df7c <_malloc_r+0x28>
 800df70:	230c      	movs	r3, #12
 800df72:	2600      	movs	r6, #0
 800df74:	603b      	str	r3, [r7, #0]
 800df76:	4630      	mov	r0, r6
 800df78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e050 <_malloc_r+0xfc>
 800df80:	f000 f868 	bl	800e054 <__malloc_lock>
 800df84:	f8d8 3000 	ldr.w	r3, [r8]
 800df88:	461c      	mov	r4, r3
 800df8a:	bb5c      	cbnz	r4, 800dfe4 <_malloc_r+0x90>
 800df8c:	4629      	mov	r1, r5
 800df8e:	4638      	mov	r0, r7
 800df90:	f7ff ffc0 	bl	800df14 <sbrk_aligned>
 800df94:	1c43      	adds	r3, r0, #1
 800df96:	4604      	mov	r4, r0
 800df98:	d155      	bne.n	800e046 <_malloc_r+0xf2>
 800df9a:	f8d8 4000 	ldr.w	r4, [r8]
 800df9e:	4626      	mov	r6, r4
 800dfa0:	2e00      	cmp	r6, #0
 800dfa2:	d145      	bne.n	800e030 <_malloc_r+0xdc>
 800dfa4:	2c00      	cmp	r4, #0
 800dfa6:	d048      	beq.n	800e03a <_malloc_r+0xe6>
 800dfa8:	6823      	ldr	r3, [r4, #0]
 800dfaa:	4631      	mov	r1, r6
 800dfac:	4638      	mov	r0, r7
 800dfae:	eb04 0903 	add.w	r9, r4, r3
 800dfb2:	f000 f897 	bl	800e0e4 <_sbrk_r>
 800dfb6:	4581      	cmp	r9, r0
 800dfb8:	d13f      	bne.n	800e03a <_malloc_r+0xe6>
 800dfba:	6821      	ldr	r1, [r4, #0]
 800dfbc:	4638      	mov	r0, r7
 800dfbe:	1a6d      	subs	r5, r5, r1
 800dfc0:	4629      	mov	r1, r5
 800dfc2:	f7ff ffa7 	bl	800df14 <sbrk_aligned>
 800dfc6:	3001      	adds	r0, #1
 800dfc8:	d037      	beq.n	800e03a <_malloc_r+0xe6>
 800dfca:	6823      	ldr	r3, [r4, #0]
 800dfcc:	442b      	add	r3, r5
 800dfce:	6023      	str	r3, [r4, #0]
 800dfd0:	f8d8 3000 	ldr.w	r3, [r8]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d038      	beq.n	800e04a <_malloc_r+0xf6>
 800dfd8:	685a      	ldr	r2, [r3, #4]
 800dfda:	42a2      	cmp	r2, r4
 800dfdc:	d12b      	bne.n	800e036 <_malloc_r+0xe2>
 800dfde:	2200      	movs	r2, #0
 800dfe0:	605a      	str	r2, [r3, #4]
 800dfe2:	e00f      	b.n	800e004 <_malloc_r+0xb0>
 800dfe4:	6822      	ldr	r2, [r4, #0]
 800dfe6:	1b52      	subs	r2, r2, r5
 800dfe8:	d41f      	bmi.n	800e02a <_malloc_r+0xd6>
 800dfea:	2a0b      	cmp	r2, #11
 800dfec:	d917      	bls.n	800e01e <_malloc_r+0xca>
 800dfee:	1961      	adds	r1, r4, r5
 800dff0:	42a3      	cmp	r3, r4
 800dff2:	6025      	str	r5, [r4, #0]
 800dff4:	bf18      	it	ne
 800dff6:	6059      	strne	r1, [r3, #4]
 800dff8:	6863      	ldr	r3, [r4, #4]
 800dffa:	bf08      	it	eq
 800dffc:	f8c8 1000 	streq.w	r1, [r8]
 800e000:	5162      	str	r2, [r4, r5]
 800e002:	604b      	str	r3, [r1, #4]
 800e004:	f104 060b 	add.w	r6, r4, #11
 800e008:	4638      	mov	r0, r7
 800e00a:	f000 f829 	bl	800e060 <__malloc_unlock>
 800e00e:	1d23      	adds	r3, r4, #4
 800e010:	f026 0607 	bic.w	r6, r6, #7
 800e014:	1af2      	subs	r2, r6, r3
 800e016:	d0ae      	beq.n	800df76 <_malloc_r+0x22>
 800e018:	1b9b      	subs	r3, r3, r6
 800e01a:	50a3      	str	r3, [r4, r2]
 800e01c:	e7ab      	b.n	800df76 <_malloc_r+0x22>
 800e01e:	42a3      	cmp	r3, r4
 800e020:	6862      	ldr	r2, [r4, #4]
 800e022:	d1dd      	bne.n	800dfe0 <_malloc_r+0x8c>
 800e024:	f8c8 2000 	str.w	r2, [r8]
 800e028:	e7ec      	b.n	800e004 <_malloc_r+0xb0>
 800e02a:	4623      	mov	r3, r4
 800e02c:	6864      	ldr	r4, [r4, #4]
 800e02e:	e7ac      	b.n	800df8a <_malloc_r+0x36>
 800e030:	4634      	mov	r4, r6
 800e032:	6876      	ldr	r6, [r6, #4]
 800e034:	e7b4      	b.n	800dfa0 <_malloc_r+0x4c>
 800e036:	4613      	mov	r3, r2
 800e038:	e7cc      	b.n	800dfd4 <_malloc_r+0x80>
 800e03a:	230c      	movs	r3, #12
 800e03c:	4638      	mov	r0, r7
 800e03e:	603b      	str	r3, [r7, #0]
 800e040:	f000 f80e 	bl	800e060 <__malloc_unlock>
 800e044:	e797      	b.n	800df76 <_malloc_r+0x22>
 800e046:	6025      	str	r5, [r4, #0]
 800e048:	e7dc      	b.n	800e004 <_malloc_r+0xb0>
 800e04a:	605b      	str	r3, [r3, #4]
 800e04c:	deff      	udf	#255	; 0xff
 800e04e:	bf00      	nop
 800e050:	200013d0 	.word	0x200013d0

0800e054 <__malloc_lock>:
 800e054:	4801      	ldr	r0, [pc, #4]	; (800e05c <__malloc_lock+0x8>)
 800e056:	f000 b87f 	b.w	800e158 <__retarget_lock_acquire_recursive>
 800e05a:	bf00      	nop
 800e05c:	20001514 	.word	0x20001514

0800e060 <__malloc_unlock>:
 800e060:	4801      	ldr	r0, [pc, #4]	; (800e068 <__malloc_unlock+0x8>)
 800e062:	f000 b87a 	b.w	800e15a <__retarget_lock_release_recursive>
 800e066:	bf00      	nop
 800e068:	20001514 	.word	0x20001514

0800e06c <_vsiprintf_r>:
 800e06c:	b500      	push	{lr}
 800e06e:	b09b      	sub	sp, #108	; 0x6c
 800e070:	9100      	str	r1, [sp, #0]
 800e072:	9104      	str	r1, [sp, #16]
 800e074:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e078:	9105      	str	r1, [sp, #20]
 800e07a:	9102      	str	r1, [sp, #8]
 800e07c:	4905      	ldr	r1, [pc, #20]	; (800e094 <_vsiprintf_r+0x28>)
 800e07e:	9103      	str	r1, [sp, #12]
 800e080:	4669      	mov	r1, sp
 800e082:	f000 f91f 	bl	800e2c4 <_svfiprintf_r>
 800e086:	9b00      	ldr	r3, [sp, #0]
 800e088:	2200      	movs	r2, #0
 800e08a:	701a      	strb	r2, [r3, #0]
 800e08c:	b01b      	add	sp, #108	; 0x6c
 800e08e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e092:	bf00      	nop
 800e094:	ffff0208 	.word	0xffff0208

0800e098 <vsiprintf>:
 800e098:	4613      	mov	r3, r2
 800e09a:	460a      	mov	r2, r1
 800e09c:	4601      	mov	r1, r0
 800e09e:	4802      	ldr	r0, [pc, #8]	; (800e0a8 <vsiprintf+0x10>)
 800e0a0:	6800      	ldr	r0, [r0, #0]
 800e0a2:	f7ff bfe3 	b.w	800e06c <_vsiprintf_r>
 800e0a6:	bf00      	nop
 800e0a8:	200000b0 	.word	0x200000b0

0800e0ac <memset>:
 800e0ac:	4402      	add	r2, r0
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d100      	bne.n	800e0b6 <memset+0xa>
 800e0b4:	4770      	bx	lr
 800e0b6:	f803 1b01 	strb.w	r1, [r3], #1
 800e0ba:	e7f9      	b.n	800e0b0 <memset+0x4>

0800e0bc <strncpy>:
 800e0bc:	3901      	subs	r1, #1
 800e0be:	4603      	mov	r3, r0
 800e0c0:	b510      	push	{r4, lr}
 800e0c2:	b132      	cbz	r2, 800e0d2 <strncpy+0x16>
 800e0c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e0c8:	3a01      	subs	r2, #1
 800e0ca:	f803 4b01 	strb.w	r4, [r3], #1
 800e0ce:	2c00      	cmp	r4, #0
 800e0d0:	d1f7      	bne.n	800e0c2 <strncpy+0x6>
 800e0d2:	441a      	add	r2, r3
 800e0d4:	2100      	movs	r1, #0
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	d100      	bne.n	800e0dc <strncpy+0x20>
 800e0da:	bd10      	pop	{r4, pc}
 800e0dc:	f803 1b01 	strb.w	r1, [r3], #1
 800e0e0:	e7f9      	b.n	800e0d6 <strncpy+0x1a>
	...

0800e0e4 <_sbrk_r>:
 800e0e4:	b538      	push	{r3, r4, r5, lr}
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	4d05      	ldr	r5, [pc, #20]	; (800e100 <_sbrk_r+0x1c>)
 800e0ea:	4604      	mov	r4, r0
 800e0ec:	4608      	mov	r0, r1
 800e0ee:	602b      	str	r3, [r5, #0]
 800e0f0:	f7f2 ff4e 	bl	8000f90 <_sbrk>
 800e0f4:	1c43      	adds	r3, r0, #1
 800e0f6:	d102      	bne.n	800e0fe <_sbrk_r+0x1a>
 800e0f8:	682b      	ldr	r3, [r5, #0]
 800e0fa:	b103      	cbz	r3, 800e0fe <_sbrk_r+0x1a>
 800e0fc:	6023      	str	r3, [r4, #0]
 800e0fe:	bd38      	pop	{r3, r4, r5, pc}
 800e100:	20001510 	.word	0x20001510

0800e104 <__errno>:
 800e104:	4b01      	ldr	r3, [pc, #4]	; (800e10c <__errno+0x8>)
 800e106:	6818      	ldr	r0, [r3, #0]
 800e108:	4770      	bx	lr
 800e10a:	bf00      	nop
 800e10c:	200000b0 	.word	0x200000b0

0800e110 <__libc_init_array>:
 800e110:	b570      	push	{r4, r5, r6, lr}
 800e112:	4d0d      	ldr	r5, [pc, #52]	; (800e148 <__libc_init_array+0x38>)
 800e114:	2600      	movs	r6, #0
 800e116:	4c0d      	ldr	r4, [pc, #52]	; (800e14c <__libc_init_array+0x3c>)
 800e118:	1b64      	subs	r4, r4, r5
 800e11a:	10a4      	asrs	r4, r4, #2
 800e11c:	42a6      	cmp	r6, r4
 800e11e:	d109      	bne.n	800e134 <__libc_init_array+0x24>
 800e120:	4d0b      	ldr	r5, [pc, #44]	; (800e150 <__libc_init_array+0x40>)
 800e122:	2600      	movs	r6, #0
 800e124:	4c0b      	ldr	r4, [pc, #44]	; (800e154 <__libc_init_array+0x44>)
 800e126:	f000 fbbd 	bl	800e8a4 <_init>
 800e12a:	1b64      	subs	r4, r4, r5
 800e12c:	10a4      	asrs	r4, r4, #2
 800e12e:	42a6      	cmp	r6, r4
 800e130:	d105      	bne.n	800e13e <__libc_init_array+0x2e>
 800e132:	bd70      	pop	{r4, r5, r6, pc}
 800e134:	f855 3b04 	ldr.w	r3, [r5], #4
 800e138:	3601      	adds	r6, #1
 800e13a:	4798      	blx	r3
 800e13c:	e7ee      	b.n	800e11c <__libc_init_array+0xc>
 800e13e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e142:	3601      	adds	r6, #1
 800e144:	4798      	blx	r3
 800e146:	e7f2      	b.n	800e12e <__libc_init_array+0x1e>
 800e148:	0800ee0c 	.word	0x0800ee0c
 800e14c:	0800ee0c 	.word	0x0800ee0c
 800e150:	0800ee0c 	.word	0x0800ee0c
 800e154:	0800ee10 	.word	0x0800ee10

0800e158 <__retarget_lock_acquire_recursive>:
 800e158:	4770      	bx	lr

0800e15a <__retarget_lock_release_recursive>:
 800e15a:	4770      	bx	lr

0800e15c <memcpy>:
 800e15c:	440a      	add	r2, r1
 800e15e:	1e43      	subs	r3, r0, #1
 800e160:	4291      	cmp	r1, r2
 800e162:	d100      	bne.n	800e166 <memcpy+0xa>
 800e164:	4770      	bx	lr
 800e166:	b510      	push	{r4, lr}
 800e168:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e16c:	4291      	cmp	r1, r2
 800e16e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e172:	d1f9      	bne.n	800e168 <memcpy+0xc>
 800e174:	bd10      	pop	{r4, pc}
	...

0800e178 <_free_r>:
 800e178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e17a:	2900      	cmp	r1, #0
 800e17c:	d043      	beq.n	800e206 <_free_r+0x8e>
 800e17e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e182:	1f0c      	subs	r4, r1, #4
 800e184:	9001      	str	r0, [sp, #4]
 800e186:	2b00      	cmp	r3, #0
 800e188:	bfb8      	it	lt
 800e18a:	18e4      	addlt	r4, r4, r3
 800e18c:	f7ff ff62 	bl	800e054 <__malloc_lock>
 800e190:	4a1e      	ldr	r2, [pc, #120]	; (800e20c <_free_r+0x94>)
 800e192:	9801      	ldr	r0, [sp, #4]
 800e194:	6813      	ldr	r3, [r2, #0]
 800e196:	b933      	cbnz	r3, 800e1a6 <_free_r+0x2e>
 800e198:	6063      	str	r3, [r4, #4]
 800e19a:	6014      	str	r4, [r2, #0]
 800e19c:	b003      	add	sp, #12
 800e19e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1a2:	f7ff bf5d 	b.w	800e060 <__malloc_unlock>
 800e1a6:	42a3      	cmp	r3, r4
 800e1a8:	d908      	bls.n	800e1bc <_free_r+0x44>
 800e1aa:	6825      	ldr	r5, [r4, #0]
 800e1ac:	1961      	adds	r1, r4, r5
 800e1ae:	428b      	cmp	r3, r1
 800e1b0:	bf01      	itttt	eq
 800e1b2:	6819      	ldreq	r1, [r3, #0]
 800e1b4:	685b      	ldreq	r3, [r3, #4]
 800e1b6:	1949      	addeq	r1, r1, r5
 800e1b8:	6021      	streq	r1, [r4, #0]
 800e1ba:	e7ed      	b.n	800e198 <_free_r+0x20>
 800e1bc:	461a      	mov	r2, r3
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	b10b      	cbz	r3, 800e1c6 <_free_r+0x4e>
 800e1c2:	42a3      	cmp	r3, r4
 800e1c4:	d9fa      	bls.n	800e1bc <_free_r+0x44>
 800e1c6:	6811      	ldr	r1, [r2, #0]
 800e1c8:	1855      	adds	r5, r2, r1
 800e1ca:	42a5      	cmp	r5, r4
 800e1cc:	d10b      	bne.n	800e1e6 <_free_r+0x6e>
 800e1ce:	6824      	ldr	r4, [r4, #0]
 800e1d0:	4421      	add	r1, r4
 800e1d2:	1854      	adds	r4, r2, r1
 800e1d4:	6011      	str	r1, [r2, #0]
 800e1d6:	42a3      	cmp	r3, r4
 800e1d8:	d1e0      	bne.n	800e19c <_free_r+0x24>
 800e1da:	681c      	ldr	r4, [r3, #0]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	440c      	add	r4, r1
 800e1e0:	6053      	str	r3, [r2, #4]
 800e1e2:	6014      	str	r4, [r2, #0]
 800e1e4:	e7da      	b.n	800e19c <_free_r+0x24>
 800e1e6:	d902      	bls.n	800e1ee <_free_r+0x76>
 800e1e8:	230c      	movs	r3, #12
 800e1ea:	6003      	str	r3, [r0, #0]
 800e1ec:	e7d6      	b.n	800e19c <_free_r+0x24>
 800e1ee:	6825      	ldr	r5, [r4, #0]
 800e1f0:	1961      	adds	r1, r4, r5
 800e1f2:	428b      	cmp	r3, r1
 800e1f4:	bf02      	ittt	eq
 800e1f6:	6819      	ldreq	r1, [r3, #0]
 800e1f8:	685b      	ldreq	r3, [r3, #4]
 800e1fa:	1949      	addeq	r1, r1, r5
 800e1fc:	6063      	str	r3, [r4, #4]
 800e1fe:	bf08      	it	eq
 800e200:	6021      	streq	r1, [r4, #0]
 800e202:	6054      	str	r4, [r2, #4]
 800e204:	e7ca      	b.n	800e19c <_free_r+0x24>
 800e206:	b003      	add	sp, #12
 800e208:	bd30      	pop	{r4, r5, pc}
 800e20a:	bf00      	nop
 800e20c:	200013d0 	.word	0x200013d0

0800e210 <__ssputs_r>:
 800e210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e214:	461f      	mov	r7, r3
 800e216:	688e      	ldr	r6, [r1, #8]
 800e218:	4682      	mov	sl, r0
 800e21a:	460c      	mov	r4, r1
 800e21c:	42be      	cmp	r6, r7
 800e21e:	4690      	mov	r8, r2
 800e220:	680b      	ldr	r3, [r1, #0]
 800e222:	d82c      	bhi.n	800e27e <__ssputs_r+0x6e>
 800e224:	898a      	ldrh	r2, [r1, #12]
 800e226:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e22a:	d026      	beq.n	800e27a <__ssputs_r+0x6a>
 800e22c:	6965      	ldr	r5, [r4, #20]
 800e22e:	6909      	ldr	r1, [r1, #16]
 800e230:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e234:	eba3 0901 	sub.w	r9, r3, r1
 800e238:	1c7b      	adds	r3, r7, #1
 800e23a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e23e:	444b      	add	r3, r9
 800e240:	106d      	asrs	r5, r5, #1
 800e242:	429d      	cmp	r5, r3
 800e244:	bf38      	it	cc
 800e246:	461d      	movcc	r5, r3
 800e248:	0553      	lsls	r3, r2, #21
 800e24a:	d527      	bpl.n	800e29c <__ssputs_r+0x8c>
 800e24c:	4629      	mov	r1, r5
 800e24e:	f7ff fe81 	bl	800df54 <_malloc_r>
 800e252:	4606      	mov	r6, r0
 800e254:	b360      	cbz	r0, 800e2b0 <__ssputs_r+0xa0>
 800e256:	464a      	mov	r2, r9
 800e258:	6921      	ldr	r1, [r4, #16]
 800e25a:	f7ff ff7f 	bl	800e15c <memcpy>
 800e25e:	89a3      	ldrh	r3, [r4, #12]
 800e260:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e268:	81a3      	strh	r3, [r4, #12]
 800e26a:	6126      	str	r6, [r4, #16]
 800e26c:	444e      	add	r6, r9
 800e26e:	6165      	str	r5, [r4, #20]
 800e270:	eba5 0509 	sub.w	r5, r5, r9
 800e274:	6026      	str	r6, [r4, #0]
 800e276:	463e      	mov	r6, r7
 800e278:	60a5      	str	r5, [r4, #8]
 800e27a:	42be      	cmp	r6, r7
 800e27c:	d900      	bls.n	800e280 <__ssputs_r+0x70>
 800e27e:	463e      	mov	r6, r7
 800e280:	4632      	mov	r2, r6
 800e282:	4641      	mov	r1, r8
 800e284:	6820      	ldr	r0, [r4, #0]
 800e286:	f000 faad 	bl	800e7e4 <memmove>
 800e28a:	68a3      	ldr	r3, [r4, #8]
 800e28c:	2000      	movs	r0, #0
 800e28e:	1b9b      	subs	r3, r3, r6
 800e290:	60a3      	str	r3, [r4, #8]
 800e292:	6823      	ldr	r3, [r4, #0]
 800e294:	4433      	add	r3, r6
 800e296:	6023      	str	r3, [r4, #0]
 800e298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e29c:	462a      	mov	r2, r5
 800e29e:	f000 fac9 	bl	800e834 <_realloc_r>
 800e2a2:	4606      	mov	r6, r0
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	d1e0      	bne.n	800e26a <__ssputs_r+0x5a>
 800e2a8:	6921      	ldr	r1, [r4, #16]
 800e2aa:	4650      	mov	r0, sl
 800e2ac:	f7ff ff64 	bl	800e178 <_free_r>
 800e2b0:	230c      	movs	r3, #12
 800e2b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b6:	f8ca 3000 	str.w	r3, [sl]
 800e2ba:	89a3      	ldrh	r3, [r4, #12]
 800e2bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2c0:	81a3      	strh	r3, [r4, #12]
 800e2c2:	e7e9      	b.n	800e298 <__ssputs_r+0x88>

0800e2c4 <_svfiprintf_r>:
 800e2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c8:	4698      	mov	r8, r3
 800e2ca:	898b      	ldrh	r3, [r1, #12]
 800e2cc:	b09d      	sub	sp, #116	; 0x74
 800e2ce:	4607      	mov	r7, r0
 800e2d0:	061b      	lsls	r3, r3, #24
 800e2d2:	460d      	mov	r5, r1
 800e2d4:	4614      	mov	r4, r2
 800e2d6:	d50e      	bpl.n	800e2f6 <_svfiprintf_r+0x32>
 800e2d8:	690b      	ldr	r3, [r1, #16]
 800e2da:	b963      	cbnz	r3, 800e2f6 <_svfiprintf_r+0x32>
 800e2dc:	2140      	movs	r1, #64	; 0x40
 800e2de:	f7ff fe39 	bl	800df54 <_malloc_r>
 800e2e2:	6028      	str	r0, [r5, #0]
 800e2e4:	6128      	str	r0, [r5, #16]
 800e2e6:	b920      	cbnz	r0, 800e2f2 <_svfiprintf_r+0x2e>
 800e2e8:	230c      	movs	r3, #12
 800e2ea:	603b      	str	r3, [r7, #0]
 800e2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f0:	e0d0      	b.n	800e494 <_svfiprintf_r+0x1d0>
 800e2f2:	2340      	movs	r3, #64	; 0x40
 800e2f4:	616b      	str	r3, [r5, #20]
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2fc:	f04f 0901 	mov.w	r9, #1
 800e300:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e4ac <_svfiprintf_r+0x1e8>
 800e304:	9309      	str	r3, [sp, #36]	; 0x24
 800e306:	2320      	movs	r3, #32
 800e308:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e30c:	2330      	movs	r3, #48	; 0x30
 800e30e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e312:	4623      	mov	r3, r4
 800e314:	469a      	mov	sl, r3
 800e316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e31a:	b10a      	cbz	r2, 800e320 <_svfiprintf_r+0x5c>
 800e31c:	2a25      	cmp	r2, #37	; 0x25
 800e31e:	d1f9      	bne.n	800e314 <_svfiprintf_r+0x50>
 800e320:	ebba 0b04 	subs.w	fp, sl, r4
 800e324:	d00b      	beq.n	800e33e <_svfiprintf_r+0x7a>
 800e326:	465b      	mov	r3, fp
 800e328:	4622      	mov	r2, r4
 800e32a:	4629      	mov	r1, r5
 800e32c:	4638      	mov	r0, r7
 800e32e:	f7ff ff6f 	bl	800e210 <__ssputs_r>
 800e332:	3001      	adds	r0, #1
 800e334:	f000 80a9 	beq.w	800e48a <_svfiprintf_r+0x1c6>
 800e338:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e33a:	445a      	add	r2, fp
 800e33c:	9209      	str	r2, [sp, #36]	; 0x24
 800e33e:	f89a 3000 	ldrb.w	r3, [sl]
 800e342:	2b00      	cmp	r3, #0
 800e344:	f000 80a1 	beq.w	800e48a <_svfiprintf_r+0x1c6>
 800e348:	2300      	movs	r3, #0
 800e34a:	f04f 32ff 	mov.w	r2, #4294967295
 800e34e:	f10a 0a01 	add.w	sl, sl, #1
 800e352:	9304      	str	r3, [sp, #16]
 800e354:	9307      	str	r3, [sp, #28]
 800e356:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e35a:	931a      	str	r3, [sp, #104]	; 0x68
 800e35c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e360:	4654      	mov	r4, sl
 800e362:	2205      	movs	r2, #5
 800e364:	4851      	ldr	r0, [pc, #324]	; (800e4ac <_svfiprintf_r+0x1e8>)
 800e366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e36a:	f000 fa55 	bl	800e818 <memchr>
 800e36e:	9a04      	ldr	r2, [sp, #16]
 800e370:	b9d8      	cbnz	r0, 800e3aa <_svfiprintf_r+0xe6>
 800e372:	06d0      	lsls	r0, r2, #27
 800e374:	bf44      	itt	mi
 800e376:	2320      	movmi	r3, #32
 800e378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e37c:	0711      	lsls	r1, r2, #28
 800e37e:	bf44      	itt	mi
 800e380:	232b      	movmi	r3, #43	; 0x2b
 800e382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e386:	f89a 3000 	ldrb.w	r3, [sl]
 800e38a:	2b2a      	cmp	r3, #42	; 0x2a
 800e38c:	d015      	beq.n	800e3ba <_svfiprintf_r+0xf6>
 800e38e:	9a07      	ldr	r2, [sp, #28]
 800e390:	4654      	mov	r4, sl
 800e392:	2000      	movs	r0, #0
 800e394:	f04f 0c0a 	mov.w	ip, #10
 800e398:	4621      	mov	r1, r4
 800e39a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e39e:	3b30      	subs	r3, #48	; 0x30
 800e3a0:	2b09      	cmp	r3, #9
 800e3a2:	d94d      	bls.n	800e440 <_svfiprintf_r+0x17c>
 800e3a4:	b1b0      	cbz	r0, 800e3d4 <_svfiprintf_r+0x110>
 800e3a6:	9207      	str	r2, [sp, #28]
 800e3a8:	e014      	b.n	800e3d4 <_svfiprintf_r+0x110>
 800e3aa:	eba0 0308 	sub.w	r3, r0, r8
 800e3ae:	46a2      	mov	sl, r4
 800e3b0:	fa09 f303 	lsl.w	r3, r9, r3
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	9304      	str	r3, [sp, #16]
 800e3b8:	e7d2      	b.n	800e360 <_svfiprintf_r+0x9c>
 800e3ba:	9b03      	ldr	r3, [sp, #12]
 800e3bc:	1d19      	adds	r1, r3, #4
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	9103      	str	r1, [sp, #12]
 800e3c4:	bfbb      	ittet	lt
 800e3c6:	425b      	neglt	r3, r3
 800e3c8:	f042 0202 	orrlt.w	r2, r2, #2
 800e3cc:	9307      	strge	r3, [sp, #28]
 800e3ce:	9307      	strlt	r3, [sp, #28]
 800e3d0:	bfb8      	it	lt
 800e3d2:	9204      	strlt	r2, [sp, #16]
 800e3d4:	7823      	ldrb	r3, [r4, #0]
 800e3d6:	2b2e      	cmp	r3, #46	; 0x2e
 800e3d8:	d10c      	bne.n	800e3f4 <_svfiprintf_r+0x130>
 800e3da:	7863      	ldrb	r3, [r4, #1]
 800e3dc:	2b2a      	cmp	r3, #42	; 0x2a
 800e3de:	d134      	bne.n	800e44a <_svfiprintf_r+0x186>
 800e3e0:	9b03      	ldr	r3, [sp, #12]
 800e3e2:	3402      	adds	r4, #2
 800e3e4:	1d1a      	adds	r2, r3, #4
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	9203      	str	r2, [sp, #12]
 800e3ec:	bfb8      	it	lt
 800e3ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3f2:	9305      	str	r3, [sp, #20]
 800e3f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e4bc <_svfiprintf_r+0x1f8>
 800e3f8:	2203      	movs	r2, #3
 800e3fa:	7821      	ldrb	r1, [r4, #0]
 800e3fc:	4650      	mov	r0, sl
 800e3fe:	f000 fa0b 	bl	800e818 <memchr>
 800e402:	b138      	cbz	r0, 800e414 <_svfiprintf_r+0x150>
 800e404:	eba0 000a 	sub.w	r0, r0, sl
 800e408:	2240      	movs	r2, #64	; 0x40
 800e40a:	9b04      	ldr	r3, [sp, #16]
 800e40c:	3401      	adds	r4, #1
 800e40e:	4082      	lsls	r2, r0
 800e410:	4313      	orrs	r3, r2
 800e412:	9304      	str	r3, [sp, #16]
 800e414:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e418:	2206      	movs	r2, #6
 800e41a:	4825      	ldr	r0, [pc, #148]	; (800e4b0 <_svfiprintf_r+0x1ec>)
 800e41c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e420:	f000 f9fa 	bl	800e818 <memchr>
 800e424:	2800      	cmp	r0, #0
 800e426:	d038      	beq.n	800e49a <_svfiprintf_r+0x1d6>
 800e428:	4b22      	ldr	r3, [pc, #136]	; (800e4b4 <_svfiprintf_r+0x1f0>)
 800e42a:	bb1b      	cbnz	r3, 800e474 <_svfiprintf_r+0x1b0>
 800e42c:	9b03      	ldr	r3, [sp, #12]
 800e42e:	3307      	adds	r3, #7
 800e430:	f023 0307 	bic.w	r3, r3, #7
 800e434:	3308      	adds	r3, #8
 800e436:	9303      	str	r3, [sp, #12]
 800e438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e43a:	4433      	add	r3, r6
 800e43c:	9309      	str	r3, [sp, #36]	; 0x24
 800e43e:	e768      	b.n	800e312 <_svfiprintf_r+0x4e>
 800e440:	fb0c 3202 	mla	r2, ip, r2, r3
 800e444:	460c      	mov	r4, r1
 800e446:	2001      	movs	r0, #1
 800e448:	e7a6      	b.n	800e398 <_svfiprintf_r+0xd4>
 800e44a:	2300      	movs	r3, #0
 800e44c:	3401      	adds	r4, #1
 800e44e:	f04f 0c0a 	mov.w	ip, #10
 800e452:	4619      	mov	r1, r3
 800e454:	9305      	str	r3, [sp, #20]
 800e456:	4620      	mov	r0, r4
 800e458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e45c:	3a30      	subs	r2, #48	; 0x30
 800e45e:	2a09      	cmp	r2, #9
 800e460:	d903      	bls.n	800e46a <_svfiprintf_r+0x1a6>
 800e462:	2b00      	cmp	r3, #0
 800e464:	d0c6      	beq.n	800e3f4 <_svfiprintf_r+0x130>
 800e466:	9105      	str	r1, [sp, #20]
 800e468:	e7c4      	b.n	800e3f4 <_svfiprintf_r+0x130>
 800e46a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e46e:	4604      	mov	r4, r0
 800e470:	2301      	movs	r3, #1
 800e472:	e7f0      	b.n	800e456 <_svfiprintf_r+0x192>
 800e474:	ab03      	add	r3, sp, #12
 800e476:	462a      	mov	r2, r5
 800e478:	a904      	add	r1, sp, #16
 800e47a:	4638      	mov	r0, r7
 800e47c:	9300      	str	r3, [sp, #0]
 800e47e:	4b0e      	ldr	r3, [pc, #56]	; (800e4b8 <_svfiprintf_r+0x1f4>)
 800e480:	f3af 8000 	nop.w
 800e484:	1c42      	adds	r2, r0, #1
 800e486:	4606      	mov	r6, r0
 800e488:	d1d6      	bne.n	800e438 <_svfiprintf_r+0x174>
 800e48a:	89ab      	ldrh	r3, [r5, #12]
 800e48c:	065b      	lsls	r3, r3, #25
 800e48e:	f53f af2d 	bmi.w	800e2ec <_svfiprintf_r+0x28>
 800e492:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e494:	b01d      	add	sp, #116	; 0x74
 800e496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e49a:	ab03      	add	r3, sp, #12
 800e49c:	462a      	mov	r2, r5
 800e49e:	a904      	add	r1, sp, #16
 800e4a0:	4638      	mov	r0, r7
 800e4a2:	9300      	str	r3, [sp, #0]
 800e4a4:	4b04      	ldr	r3, [pc, #16]	; (800e4b8 <_svfiprintf_r+0x1f4>)
 800e4a6:	f000 f87d 	bl	800e5a4 <_printf_i>
 800e4aa:	e7eb      	b.n	800e484 <_svfiprintf_r+0x1c0>
 800e4ac:	0800edd0 	.word	0x0800edd0
 800e4b0:	0800edda 	.word	0x0800edda
 800e4b4:	00000000 	.word	0x00000000
 800e4b8:	0800e211 	.word	0x0800e211
 800e4bc:	0800edd6 	.word	0x0800edd6

0800e4c0 <_printf_common>:
 800e4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4c4:	4616      	mov	r6, r2
 800e4c6:	4699      	mov	r9, r3
 800e4c8:	688a      	ldr	r2, [r1, #8]
 800e4ca:	4607      	mov	r7, r0
 800e4cc:	690b      	ldr	r3, [r1, #16]
 800e4ce:	460c      	mov	r4, r1
 800e4d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	bfb8      	it	lt
 800e4d8:	4613      	movlt	r3, r2
 800e4da:	6033      	str	r3, [r6, #0]
 800e4dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4e0:	b10a      	cbz	r2, 800e4e6 <_printf_common+0x26>
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	6033      	str	r3, [r6, #0]
 800e4e6:	6823      	ldr	r3, [r4, #0]
 800e4e8:	0699      	lsls	r1, r3, #26
 800e4ea:	bf42      	ittt	mi
 800e4ec:	6833      	ldrmi	r3, [r6, #0]
 800e4ee:	3302      	addmi	r3, #2
 800e4f0:	6033      	strmi	r3, [r6, #0]
 800e4f2:	6825      	ldr	r5, [r4, #0]
 800e4f4:	f015 0506 	ands.w	r5, r5, #6
 800e4f8:	d106      	bne.n	800e508 <_printf_common+0x48>
 800e4fa:	f104 0a19 	add.w	sl, r4, #25
 800e4fe:	68e3      	ldr	r3, [r4, #12]
 800e500:	6832      	ldr	r2, [r6, #0]
 800e502:	1a9b      	subs	r3, r3, r2
 800e504:	42ab      	cmp	r3, r5
 800e506:	dc2b      	bgt.n	800e560 <_printf_common+0xa0>
 800e508:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e50c:	1e13      	subs	r3, r2, #0
 800e50e:	6822      	ldr	r2, [r4, #0]
 800e510:	bf18      	it	ne
 800e512:	2301      	movne	r3, #1
 800e514:	0692      	lsls	r2, r2, #26
 800e516:	d430      	bmi.n	800e57a <_printf_common+0xba>
 800e518:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e51c:	4649      	mov	r1, r9
 800e51e:	4638      	mov	r0, r7
 800e520:	47c0      	blx	r8
 800e522:	3001      	adds	r0, #1
 800e524:	d023      	beq.n	800e56e <_printf_common+0xae>
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	341a      	adds	r4, #26
 800e52a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800e52e:	f003 0306 	and.w	r3, r3, #6
 800e532:	2b04      	cmp	r3, #4
 800e534:	bf0a      	itet	eq
 800e536:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800e53a:	2500      	movne	r5, #0
 800e53c:	6833      	ldreq	r3, [r6, #0]
 800e53e:	f04f 0600 	mov.w	r6, #0
 800e542:	bf08      	it	eq
 800e544:	1aed      	subeq	r5, r5, r3
 800e546:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e54a:	bf08      	it	eq
 800e54c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e550:	4293      	cmp	r3, r2
 800e552:	bfc4      	itt	gt
 800e554:	1a9b      	subgt	r3, r3, r2
 800e556:	18ed      	addgt	r5, r5, r3
 800e558:	42b5      	cmp	r5, r6
 800e55a:	d11a      	bne.n	800e592 <_printf_common+0xd2>
 800e55c:	2000      	movs	r0, #0
 800e55e:	e008      	b.n	800e572 <_printf_common+0xb2>
 800e560:	2301      	movs	r3, #1
 800e562:	4652      	mov	r2, sl
 800e564:	4649      	mov	r1, r9
 800e566:	4638      	mov	r0, r7
 800e568:	47c0      	blx	r8
 800e56a:	3001      	adds	r0, #1
 800e56c:	d103      	bne.n	800e576 <_printf_common+0xb6>
 800e56e:	f04f 30ff 	mov.w	r0, #4294967295
 800e572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e576:	3501      	adds	r5, #1
 800e578:	e7c1      	b.n	800e4fe <_printf_common+0x3e>
 800e57a:	18e1      	adds	r1, r4, r3
 800e57c:	1c5a      	adds	r2, r3, #1
 800e57e:	2030      	movs	r0, #48	; 0x30
 800e580:	3302      	adds	r3, #2
 800e582:	4422      	add	r2, r4
 800e584:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e588:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e58c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e590:	e7c2      	b.n	800e518 <_printf_common+0x58>
 800e592:	2301      	movs	r3, #1
 800e594:	4622      	mov	r2, r4
 800e596:	4649      	mov	r1, r9
 800e598:	4638      	mov	r0, r7
 800e59a:	47c0      	blx	r8
 800e59c:	3001      	adds	r0, #1
 800e59e:	d0e6      	beq.n	800e56e <_printf_common+0xae>
 800e5a0:	3601      	adds	r6, #1
 800e5a2:	e7d9      	b.n	800e558 <_printf_common+0x98>

0800e5a4 <_printf_i>:
 800e5a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a8:	7e0f      	ldrb	r7, [r1, #24]
 800e5aa:	4691      	mov	r9, r2
 800e5ac:	4680      	mov	r8, r0
 800e5ae:	460c      	mov	r4, r1
 800e5b0:	2f78      	cmp	r7, #120	; 0x78
 800e5b2:	469a      	mov	sl, r3
 800e5b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e5b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e5ba:	d807      	bhi.n	800e5cc <_printf_i+0x28>
 800e5bc:	2f62      	cmp	r7, #98	; 0x62
 800e5be:	d80a      	bhi.n	800e5d6 <_printf_i+0x32>
 800e5c0:	2f00      	cmp	r7, #0
 800e5c2:	f000 80d3 	beq.w	800e76c <_printf_i+0x1c8>
 800e5c6:	2f58      	cmp	r7, #88	; 0x58
 800e5c8:	f000 80bf 	beq.w	800e74a <_printf_i+0x1a6>
 800e5cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5d4:	e03a      	b.n	800e64c <_printf_i+0xa8>
 800e5d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5da:	2b15      	cmp	r3, #21
 800e5dc:	d8f6      	bhi.n	800e5cc <_printf_i+0x28>
 800e5de:	a101      	add	r1, pc, #4	; (adr r1, 800e5e4 <_printf_i+0x40>)
 800e5e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5e4:	0800e63d 	.word	0x0800e63d
 800e5e8:	0800e651 	.word	0x0800e651
 800e5ec:	0800e5cd 	.word	0x0800e5cd
 800e5f0:	0800e5cd 	.word	0x0800e5cd
 800e5f4:	0800e5cd 	.word	0x0800e5cd
 800e5f8:	0800e5cd 	.word	0x0800e5cd
 800e5fc:	0800e651 	.word	0x0800e651
 800e600:	0800e5cd 	.word	0x0800e5cd
 800e604:	0800e5cd 	.word	0x0800e5cd
 800e608:	0800e5cd 	.word	0x0800e5cd
 800e60c:	0800e5cd 	.word	0x0800e5cd
 800e610:	0800e753 	.word	0x0800e753
 800e614:	0800e67d 	.word	0x0800e67d
 800e618:	0800e70f 	.word	0x0800e70f
 800e61c:	0800e5cd 	.word	0x0800e5cd
 800e620:	0800e5cd 	.word	0x0800e5cd
 800e624:	0800e775 	.word	0x0800e775
 800e628:	0800e5cd 	.word	0x0800e5cd
 800e62c:	0800e67d 	.word	0x0800e67d
 800e630:	0800e5cd 	.word	0x0800e5cd
 800e634:	0800e5cd 	.word	0x0800e5cd
 800e638:	0800e717 	.word	0x0800e717
 800e63c:	682b      	ldr	r3, [r5, #0]
 800e63e:	1d1a      	adds	r2, r3, #4
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	602a      	str	r2, [r5, #0]
 800e644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e64c:	2301      	movs	r3, #1
 800e64e:	e09e      	b.n	800e78e <_printf_i+0x1ea>
 800e650:	6820      	ldr	r0, [r4, #0]
 800e652:	682b      	ldr	r3, [r5, #0]
 800e654:	0607      	lsls	r7, r0, #24
 800e656:	f103 0104 	add.w	r1, r3, #4
 800e65a:	6029      	str	r1, [r5, #0]
 800e65c:	d501      	bpl.n	800e662 <_printf_i+0xbe>
 800e65e:	681e      	ldr	r6, [r3, #0]
 800e660:	e003      	b.n	800e66a <_printf_i+0xc6>
 800e662:	0646      	lsls	r6, r0, #25
 800e664:	d5fb      	bpl.n	800e65e <_printf_i+0xba>
 800e666:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e66a:	2e00      	cmp	r6, #0
 800e66c:	da03      	bge.n	800e676 <_printf_i+0xd2>
 800e66e:	232d      	movs	r3, #45	; 0x2d
 800e670:	4276      	negs	r6, r6
 800e672:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e676:	4859      	ldr	r0, [pc, #356]	; (800e7dc <_printf_i+0x238>)
 800e678:	230a      	movs	r3, #10
 800e67a:	e012      	b.n	800e6a2 <_printf_i+0xfe>
 800e67c:	682b      	ldr	r3, [r5, #0]
 800e67e:	6820      	ldr	r0, [r4, #0]
 800e680:	1d19      	adds	r1, r3, #4
 800e682:	6029      	str	r1, [r5, #0]
 800e684:	0605      	lsls	r5, r0, #24
 800e686:	d501      	bpl.n	800e68c <_printf_i+0xe8>
 800e688:	681e      	ldr	r6, [r3, #0]
 800e68a:	e002      	b.n	800e692 <_printf_i+0xee>
 800e68c:	0641      	lsls	r1, r0, #25
 800e68e:	d5fb      	bpl.n	800e688 <_printf_i+0xe4>
 800e690:	881e      	ldrh	r6, [r3, #0]
 800e692:	2f6f      	cmp	r7, #111	; 0x6f
 800e694:	4851      	ldr	r0, [pc, #324]	; (800e7dc <_printf_i+0x238>)
 800e696:	bf0c      	ite	eq
 800e698:	2308      	moveq	r3, #8
 800e69a:	230a      	movne	r3, #10
 800e69c:	2100      	movs	r1, #0
 800e69e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e6a2:	6865      	ldr	r5, [r4, #4]
 800e6a4:	2d00      	cmp	r5, #0
 800e6a6:	60a5      	str	r5, [r4, #8]
 800e6a8:	bfa2      	ittt	ge
 800e6aa:	6821      	ldrge	r1, [r4, #0]
 800e6ac:	f021 0104 	bicge.w	r1, r1, #4
 800e6b0:	6021      	strge	r1, [r4, #0]
 800e6b2:	b90e      	cbnz	r6, 800e6b8 <_printf_i+0x114>
 800e6b4:	2d00      	cmp	r5, #0
 800e6b6:	d04a      	beq.n	800e74e <_printf_i+0x1aa>
 800e6b8:	4615      	mov	r5, r2
 800e6ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800e6be:	fb03 6711 	mls	r7, r3, r1, r6
 800e6c2:	5dc7      	ldrb	r7, [r0, r7]
 800e6c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e6c8:	4637      	mov	r7, r6
 800e6ca:	460e      	mov	r6, r1
 800e6cc:	42bb      	cmp	r3, r7
 800e6ce:	d9f4      	bls.n	800e6ba <_printf_i+0x116>
 800e6d0:	2b08      	cmp	r3, #8
 800e6d2:	d10b      	bne.n	800e6ec <_printf_i+0x148>
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	07de      	lsls	r6, r3, #31
 800e6d8:	d508      	bpl.n	800e6ec <_printf_i+0x148>
 800e6da:	6923      	ldr	r3, [r4, #16]
 800e6dc:	6861      	ldr	r1, [r4, #4]
 800e6de:	4299      	cmp	r1, r3
 800e6e0:	bfde      	ittt	le
 800e6e2:	2330      	movle	r3, #48	; 0x30
 800e6e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6ec:	1b52      	subs	r2, r2, r5
 800e6ee:	6122      	str	r2, [r4, #16]
 800e6f0:	464b      	mov	r3, r9
 800e6f2:	aa03      	add	r2, sp, #12
 800e6f4:	4621      	mov	r1, r4
 800e6f6:	4640      	mov	r0, r8
 800e6f8:	f8cd a000 	str.w	sl, [sp]
 800e6fc:	f7ff fee0 	bl	800e4c0 <_printf_common>
 800e700:	3001      	adds	r0, #1
 800e702:	d149      	bne.n	800e798 <_printf_i+0x1f4>
 800e704:	f04f 30ff 	mov.w	r0, #4294967295
 800e708:	b004      	add	sp, #16
 800e70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e70e:	6823      	ldr	r3, [r4, #0]
 800e710:	f043 0320 	orr.w	r3, r3, #32
 800e714:	6023      	str	r3, [r4, #0]
 800e716:	2778      	movs	r7, #120	; 0x78
 800e718:	4831      	ldr	r0, [pc, #196]	; (800e7e0 <_printf_i+0x23c>)
 800e71a:	6823      	ldr	r3, [r4, #0]
 800e71c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e720:	061f      	lsls	r7, r3, #24
 800e722:	6829      	ldr	r1, [r5, #0]
 800e724:	f851 6b04 	ldr.w	r6, [r1], #4
 800e728:	d402      	bmi.n	800e730 <_printf_i+0x18c>
 800e72a:	065f      	lsls	r7, r3, #25
 800e72c:	bf48      	it	mi
 800e72e:	b2b6      	uxthmi	r6, r6
 800e730:	07df      	lsls	r7, r3, #31
 800e732:	6029      	str	r1, [r5, #0]
 800e734:	bf44      	itt	mi
 800e736:	f043 0320 	orrmi.w	r3, r3, #32
 800e73a:	6023      	strmi	r3, [r4, #0]
 800e73c:	b91e      	cbnz	r6, 800e746 <_printf_i+0x1a2>
 800e73e:	6823      	ldr	r3, [r4, #0]
 800e740:	f023 0320 	bic.w	r3, r3, #32
 800e744:	6023      	str	r3, [r4, #0]
 800e746:	2310      	movs	r3, #16
 800e748:	e7a8      	b.n	800e69c <_printf_i+0xf8>
 800e74a:	4824      	ldr	r0, [pc, #144]	; (800e7dc <_printf_i+0x238>)
 800e74c:	e7e5      	b.n	800e71a <_printf_i+0x176>
 800e74e:	4615      	mov	r5, r2
 800e750:	e7be      	b.n	800e6d0 <_printf_i+0x12c>
 800e752:	682b      	ldr	r3, [r5, #0]
 800e754:	6826      	ldr	r6, [r4, #0]
 800e756:	1d18      	adds	r0, r3, #4
 800e758:	6961      	ldr	r1, [r4, #20]
 800e75a:	6028      	str	r0, [r5, #0]
 800e75c:	0635      	lsls	r5, r6, #24
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	d501      	bpl.n	800e766 <_printf_i+0x1c2>
 800e762:	6019      	str	r1, [r3, #0]
 800e764:	e002      	b.n	800e76c <_printf_i+0x1c8>
 800e766:	0670      	lsls	r0, r6, #25
 800e768:	d5fb      	bpl.n	800e762 <_printf_i+0x1be>
 800e76a:	8019      	strh	r1, [r3, #0]
 800e76c:	2300      	movs	r3, #0
 800e76e:	4615      	mov	r5, r2
 800e770:	6123      	str	r3, [r4, #16]
 800e772:	e7bd      	b.n	800e6f0 <_printf_i+0x14c>
 800e774:	682b      	ldr	r3, [r5, #0]
 800e776:	2100      	movs	r1, #0
 800e778:	1d1a      	adds	r2, r3, #4
 800e77a:	602a      	str	r2, [r5, #0]
 800e77c:	681d      	ldr	r5, [r3, #0]
 800e77e:	6862      	ldr	r2, [r4, #4]
 800e780:	4628      	mov	r0, r5
 800e782:	f000 f849 	bl	800e818 <memchr>
 800e786:	b108      	cbz	r0, 800e78c <_printf_i+0x1e8>
 800e788:	1b40      	subs	r0, r0, r5
 800e78a:	6060      	str	r0, [r4, #4]
 800e78c:	6863      	ldr	r3, [r4, #4]
 800e78e:	6123      	str	r3, [r4, #16]
 800e790:	2300      	movs	r3, #0
 800e792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e796:	e7ab      	b.n	800e6f0 <_printf_i+0x14c>
 800e798:	6923      	ldr	r3, [r4, #16]
 800e79a:	462a      	mov	r2, r5
 800e79c:	4649      	mov	r1, r9
 800e79e:	4640      	mov	r0, r8
 800e7a0:	47d0      	blx	sl
 800e7a2:	3001      	adds	r0, #1
 800e7a4:	d0ae      	beq.n	800e704 <_printf_i+0x160>
 800e7a6:	6823      	ldr	r3, [r4, #0]
 800e7a8:	079b      	lsls	r3, r3, #30
 800e7aa:	d413      	bmi.n	800e7d4 <_printf_i+0x230>
 800e7ac:	68e0      	ldr	r0, [r4, #12]
 800e7ae:	9b03      	ldr	r3, [sp, #12]
 800e7b0:	4298      	cmp	r0, r3
 800e7b2:	bfb8      	it	lt
 800e7b4:	4618      	movlt	r0, r3
 800e7b6:	e7a7      	b.n	800e708 <_printf_i+0x164>
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	4632      	mov	r2, r6
 800e7bc:	4649      	mov	r1, r9
 800e7be:	4640      	mov	r0, r8
 800e7c0:	47d0      	blx	sl
 800e7c2:	3001      	adds	r0, #1
 800e7c4:	d09e      	beq.n	800e704 <_printf_i+0x160>
 800e7c6:	3501      	adds	r5, #1
 800e7c8:	68e3      	ldr	r3, [r4, #12]
 800e7ca:	9903      	ldr	r1, [sp, #12]
 800e7cc:	1a5b      	subs	r3, r3, r1
 800e7ce:	42ab      	cmp	r3, r5
 800e7d0:	dcf2      	bgt.n	800e7b8 <_printf_i+0x214>
 800e7d2:	e7eb      	b.n	800e7ac <_printf_i+0x208>
 800e7d4:	2500      	movs	r5, #0
 800e7d6:	f104 0619 	add.w	r6, r4, #25
 800e7da:	e7f5      	b.n	800e7c8 <_printf_i+0x224>
 800e7dc:	0800ede1 	.word	0x0800ede1
 800e7e0:	0800edf2 	.word	0x0800edf2

0800e7e4 <memmove>:
 800e7e4:	4288      	cmp	r0, r1
 800e7e6:	b510      	push	{r4, lr}
 800e7e8:	eb01 0402 	add.w	r4, r1, r2
 800e7ec:	d902      	bls.n	800e7f4 <memmove+0x10>
 800e7ee:	4284      	cmp	r4, r0
 800e7f0:	4623      	mov	r3, r4
 800e7f2:	d807      	bhi.n	800e804 <memmove+0x20>
 800e7f4:	1e43      	subs	r3, r0, #1
 800e7f6:	42a1      	cmp	r1, r4
 800e7f8:	d008      	beq.n	800e80c <memmove+0x28>
 800e7fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e802:	e7f8      	b.n	800e7f6 <memmove+0x12>
 800e804:	4402      	add	r2, r0
 800e806:	4601      	mov	r1, r0
 800e808:	428a      	cmp	r2, r1
 800e80a:	d100      	bne.n	800e80e <memmove+0x2a>
 800e80c:	bd10      	pop	{r4, pc}
 800e80e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e816:	e7f7      	b.n	800e808 <memmove+0x24>

0800e818 <memchr>:
 800e818:	b2c9      	uxtb	r1, r1
 800e81a:	4402      	add	r2, r0
 800e81c:	b510      	push	{r4, lr}
 800e81e:	4290      	cmp	r0, r2
 800e820:	4603      	mov	r3, r0
 800e822:	d101      	bne.n	800e828 <memchr+0x10>
 800e824:	2300      	movs	r3, #0
 800e826:	e003      	b.n	800e830 <memchr+0x18>
 800e828:	781c      	ldrb	r4, [r3, #0]
 800e82a:	3001      	adds	r0, #1
 800e82c:	428c      	cmp	r4, r1
 800e82e:	d1f6      	bne.n	800e81e <memchr+0x6>
 800e830:	4618      	mov	r0, r3
 800e832:	bd10      	pop	{r4, pc}

0800e834 <_realloc_r>:
 800e834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e838:	4680      	mov	r8, r0
 800e83a:	4614      	mov	r4, r2
 800e83c:	460e      	mov	r6, r1
 800e83e:	b921      	cbnz	r1, 800e84a <_realloc_r+0x16>
 800e840:	4611      	mov	r1, r2
 800e842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e846:	f7ff bb85 	b.w	800df54 <_malloc_r>
 800e84a:	b92a      	cbnz	r2, 800e858 <_realloc_r+0x24>
 800e84c:	4625      	mov	r5, r4
 800e84e:	f7ff fc93 	bl	800e178 <_free_r>
 800e852:	4628      	mov	r0, r5
 800e854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e858:	f000 f81b 	bl	800e892 <_malloc_usable_size_r>
 800e85c:	4284      	cmp	r4, r0
 800e85e:	4607      	mov	r7, r0
 800e860:	d802      	bhi.n	800e868 <_realloc_r+0x34>
 800e862:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e866:	d812      	bhi.n	800e88e <_realloc_r+0x5a>
 800e868:	4621      	mov	r1, r4
 800e86a:	4640      	mov	r0, r8
 800e86c:	f7ff fb72 	bl	800df54 <_malloc_r>
 800e870:	4605      	mov	r5, r0
 800e872:	2800      	cmp	r0, #0
 800e874:	d0ed      	beq.n	800e852 <_realloc_r+0x1e>
 800e876:	42bc      	cmp	r4, r7
 800e878:	4622      	mov	r2, r4
 800e87a:	4631      	mov	r1, r6
 800e87c:	bf28      	it	cs
 800e87e:	463a      	movcs	r2, r7
 800e880:	f7ff fc6c 	bl	800e15c <memcpy>
 800e884:	4631      	mov	r1, r6
 800e886:	4640      	mov	r0, r8
 800e888:	f7ff fc76 	bl	800e178 <_free_r>
 800e88c:	e7e1      	b.n	800e852 <_realloc_r+0x1e>
 800e88e:	4635      	mov	r5, r6
 800e890:	e7df      	b.n	800e852 <_realloc_r+0x1e>

0800e892 <_malloc_usable_size_r>:
 800e892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e896:	1f18      	subs	r0, r3, #4
 800e898:	2b00      	cmp	r3, #0
 800e89a:	bfbc      	itt	lt
 800e89c:	580b      	ldrlt	r3, [r1, r0]
 800e89e:	18c0      	addlt	r0, r0, r3
 800e8a0:	4770      	bx	lr
	...

0800e8a4 <_init>:
 800e8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8a6:	bf00      	nop
 800e8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8aa:	bc08      	pop	{r3}
 800e8ac:	469e      	mov	lr, r3
 800e8ae:	4770      	bx	lr

0800e8b0 <_fini>:
 800e8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b2:	bf00      	nop
 800e8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8b6:	bc08      	pop	{r3}
 800e8b8:	469e      	mov	lr, r3
 800e8ba:	4770      	bx	lr
